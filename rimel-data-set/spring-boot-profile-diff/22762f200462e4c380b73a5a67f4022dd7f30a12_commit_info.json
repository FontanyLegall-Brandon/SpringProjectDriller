{'_old_path': WindowsPath('spring-boot/src/test/java/org/springframework/boot/context/initializer/ConfigFileApplicationContextInitializerTests.java'), '_new_path': WindowsPath('spring-boot/src/test/java/org/springframework/boot/context/initializer/ConfigFileApplicationContextInitializerTests.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -24,6 +24,7 @@ import org.junit.Test;\n import org.springframework.boot.SpringApplication;\n import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Profile;\n import org.springframework.context.annotation.PropertySource;\n import org.springframework.context.support.StaticApplicationContext;\n import org.springframework.core.env.MapPropertySource;\n@@ -34,6 +35,7 @@ import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.notNullValue;\n import static org.hamcrest.Matchers.nullValue;\n import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertThat;\n \n /**\n@@ -196,6 +198,35 @@ public class ConfigFileApplicationContextInitializerTests {\n \t\tcontext.close();\n \t}\n \n+\t@Test\n+\tpublic void propertySourceAnnotationInProfile() throws Exception {\n+\t\tSpringApplication application = new SpringApplication(\n+\t\t\t\tWithPropertySourceInProfile.class);\n+\t\tapplication.setWebEnvironment(false);\n+\t\tConfigurableApplicationContext context = application\n+\t\t\t\t.run("--spring.profiles.active=myprofile");\n+\t\tString property = context.getEnvironment().getProperty("my.property");\n+\t\tassertThat(property, equalTo("frompropertiesfile"));\n+\t\tassertNotNull(context.getEnvironment().getPropertySources()\n+\t\t\t\t.get("classpath:/enableprofile.properties"));\n+\t\tassertNull(context.getEnvironment().getPropertySources()\n+\t\t\t\t.get("classpath:/enableprofile-myprofile.properties"));\n+\t\tcontext.close();\n+\t}\n+\n+\t@Test\n+\tpublic void propertySourceAnnotationAndProfile() throws Exception {\n+\t\tSpringApplication application = new SpringApplication(\n+\t\t\t\tWithPropertySourceAndProfile.class);\n+\t\tapplication.setWebEnvironment(false);\n+\t\tConfigurableApplicationContext context = application.run();\n+\t\tString property = context.getEnvironment().getProperty("my.property");\n+\t\tassertThat(property, equalTo(null));\n+\t\tassertNull(context.getEnvironment().getPropertySources()\n+\t\t\t\t.get("classpath:/enableprofile-myprofile.properties"));\n+\t\tcontext.close();\n+\t}\n+\n \t@Test\n \tpublic void propertySourceAnnotationMultipleLocations() throws Exception {\n \t\tSpringApplication application = new SpringApplication(\n@@ -242,6 +273,19 @@ public class ConfigFileApplicationContextInitializerTests {\n \n \t}\n \n+\t@Configuration\n+\t@PropertySource("classpath:/enableprofile.properties")\n+\tprotected static class WithPropertySourceInProfile {\n+\n+\t}\n+\n+\t@Configuration\n+\t@PropertySource("classpath:/enableprofile-myprofile.properties")\n+\t@Profile("myprofile")\n+\tprotected static class WithPropertySourceAndProfile {\n+\n+\t}\n+\n \t@Configuration\n \t@PropertySource({ "classpath:/specificlocation.properties",\n \t\t\t"classpath:/moreproperties.properties" })\n', 'source_code': '/*\n * Copyright 2010-2012 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.context.initializer;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.junit.After;\nimport org.junit.Test;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Profile;\nimport org.springframework.context.annotation.PropertySource;\nimport org.springframework.context.support.StaticApplicationContext;\nimport org.springframework.core.env.MapPropertySource;\nimport org.springframework.core.env.SimpleCommandLinePropertySource;\nimport org.springframework.core.env.StandardEnvironment;\n\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.notNullValue;\nimport static org.hamcrest.Matchers.nullValue;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertThat;\n\n/**\n * Tests for {@link ConfigFileApplicationContextInitializer}.\n * \n * @author Phillip Webb\n * @author Dave Syer\n */\npublic class ConfigFileApplicationContextInitializerTests {\n\n\tprivate StaticApplicationContext context = new StaticApplicationContext();\n\n\tprivate ConfigFileApplicationContextInitializer initializer = new ConfigFileApplicationContextInitializer();\n\n\t@After\n\tpublic void cleanup() {\n\t\tSystem.clearProperty("my.property");\n\t}\n\n\t@Test\n\tpublic void loadPropertiesFile() throws Exception {\n\t\tthis.initializer.setNames("testproperties");\n\t\tthis.initializer.initialize(this.context);\n\t\tString property = this.context.getEnvironment().getProperty("my.property");\n\t\tassertThat(property, equalTo("frompropertiesfile"));\n\t}\n\n\t@Test\n\tpublic void randomValue() throws Exception {\n\t\tStandardEnvironment environment = new StandardEnvironment();\n\t\tthis.initializer.setEnvironment(environment);\n\t\tthis.initializer.initialize(new SpringApplication(), new String[0]);\n\t\tString property = environment.getProperty("random.value");\n\t\tassertThat(property, notNullValue());\n\t}\n\n\t@Test\n\tpublic void loadTwoPropertiesFiles() throws Exception {\n\t\tthis.initializer.setNames("testproperties,moreproperties");\n\t\tthis.initializer.initialize(this.context);\n\t\tString property = this.context.getEnvironment().getProperty("my.property");\n\t\tassertThat(property, equalTo("frommorepropertiesfile"));\n\t}\n\n\t@Test\n\tpublic void loadYamlFile() throws Exception {\n\t\tthis.initializer.setNames("testyaml");\n\t\tthis.initializer.initialize(this.context);\n\t\tString property = this.context.getEnvironment().getProperty("my.property");\n\t\tassertThat(property, equalTo("fromyamlfile"));\n\t\tassertThat(this.context.getEnvironment().getProperty("my.array[0]"), equalTo("1"));\n\t\tassertThat(this.context.getEnvironment().getProperty("my.array"),\n\t\t\t\tnullValue(String.class));\n\t}\n\n\t@Test\n\tpublic void commandLineWins() throws Exception {\n\t\tthis.context\n\t\t\t\t.getEnvironment()\n\t\t\t\t.getPropertySources()\n\t\t\t\t.addFirst(\n\t\t\t\t\t\tnew SimpleCommandLinePropertySource(\n\t\t\t\t\t\t\t\t"--my.property=fromcommandline"));\n\t\tthis.initializer.setNames("testproperties");\n\t\tthis.initializer.initialize(this.context);\n\t\tString property = this.context.getEnvironment().getProperty("my.property");\n\t\tassertThat(property, equalTo("fromcommandline"));\n\t}\n\n\t@Test\n\tpublic void systemPropertyWins() throws Exception {\n\t\tSystem.setProperty("my.property", "fromsystem");\n\t\tthis.initializer.setNames("testproperties");\n\t\tthis.initializer.initialize(this.context);\n\t\tString property = this.context.getEnvironment().getProperty("my.property");\n\t\tassertThat(property, equalTo("fromsystem"));\n\t}\n\n\t@Test\n\tpublic void loadPropertiesThenProfileProperties() throws Exception {\n\t\tthis.initializer.setNames("enableprofile");\n\t\tthis.initializer.initialize(this.context);\n\t\tString property = this.context.getEnvironment().getProperty("my.property");\n\t\tassertThat(property, equalTo("fromprofilepropertiesfile"));\n\t}\n\n\t@Test\n\tpublic void profilePropertiesUsedInPlaceholders() throws Exception {\n\t\tthis.initializer.setNames("enableprofile");\n\t\tthis.initializer.initialize(this.context);\n\t\tString property = this.context.getEnvironment().getProperty("one.more");\n\t\tassertThat(property, equalTo("fromprofilepropertiesfile"));\n\t}\n\n\t@Test\n\tpublic void yamlProfiles() throws Exception {\n\t\tthis.initializer.setNames("testprofiles");\n\t\tthis.context.getEnvironment().setActiveProfiles("dev");\n\t\tthis.initializer.initialize(this.context);\n\t\tString property = this.context.getEnvironment().getProperty("my.property");\n\t\tassertThat(property, equalTo("fromdevprofile"));\n\t\tproperty = this.context.getEnvironment().getProperty("my.other");\n\t\tassertThat(property, equalTo("notempty"));\n\t}\n\n\t@Test\n\tpublic void yamlSetsProfiles() throws Exception {\n\t\tthis.initializer.setNames("testsetprofiles");\n\t\tthis.initializer.initialize(this.context);\n\t\tString property = this.context.getEnvironment().getProperty("my.property");\n\t\tassertThat(property, equalTo("fromdevprofile"));\n\t}\n\n\t@Test\n\tpublic void specificNameAndProfileFromExistingSource() throws Exception {\n\t\tMap<String, Object> map = new HashMap<String, Object>();\n\t\tmap.put("spring.profiles.active", "specificprofile");\n\t\tmap.put("spring.config.name", "specificfile");\n\t\tMapPropertySource source = new MapPropertySource("map", map);\n\t\tthis.context.getEnvironment().getPropertySources().addFirst(source);\n\t\tthis.initializer.initialize(this.context);\n\t\tString property = this.context.getEnvironment().getProperty("my.property");\n\t\tassertThat(property, equalTo("fromspecificpropertiesfile"));\n\t}\n\n\t@Test\n\tpublic void specificResource() throws Exception {\n\t\tMap<String, Object> map = new HashMap<String, Object>();\n\t\tmap.put("spring.config.location", "classpath:/specificlocation.properties");\n\t\tMapPropertySource source = new MapPropertySource("map", map);\n\t\tthis.context.getEnvironment().getPropertySources().addFirst(source);\n\t\tthis.initializer.initialize(this.context);\n\t\tString property = this.context.getEnvironment().getProperty("my.property");\n\t\tassertThat(property, equalTo("fromspecificlocation"));\n\t}\n\n\t@Test\n\tpublic void propertySourceAnnotation() throws Exception {\n\t\tSpringApplication application = new SpringApplication(WithPropertySource.class);\n\t\tapplication.setWebEnvironment(false);\n\t\tConfigurableApplicationContext context = application.run();\n\t\tString property = context.getEnvironment().getProperty("my.property");\n\t\tassertThat(property, equalTo("fromspecificlocation"));\n\t\tassertNotNull(context.getEnvironment().getPropertySources()\n\t\t\t\t.get("classpath:/specificlocation.properties"));\n\t\tcontext.close();\n\t}\n\n\t@Test\n\tpublic void propertySourceAnnotationWithName() throws Exception {\n\t\tSpringApplication application = new SpringApplication(\n\t\t\t\tWithPropertySourceAndName.class);\n\t\tapplication.setWebEnvironment(false);\n\t\tConfigurableApplicationContext context = application.run();\n\t\tString property = context.getEnvironment().getProperty("my.property");\n\t\tassertThat(property, equalTo("fromspecificlocation"));\n\t\t// In this case "foo" should be the specificlocation.properties source, but Spring\n\t\t// will have shifted it to the back of the line.\n\t\tassertNotNull(context.getEnvironment().getPropertySources().get("boot.foo"));\n\t\tcontext.close();\n\t}\n\n\t@Test\n\tpublic void propertySourceAnnotationInProfile() throws Exception {\n\t\tSpringApplication application = new SpringApplication(\n\t\t\t\tWithPropertySourceInProfile.class);\n\t\tapplication.setWebEnvironment(false);\n\t\tConfigurableApplicationContext context = application\n\t\t\t\t.run("--spring.profiles.active=myprofile");\n\t\tString property = context.getEnvironment().getProperty("my.property");\n\t\tassertThat(property, equalTo("frompropertiesfile"));\n\t\tassertNotNull(context.getEnvironment().getPropertySources()\n\t\t\t\t.get("classpath:/enableprofile.properties"));\n\t\tassertNull(context.getEnvironment().getPropertySources()\n\t\t\t\t.get("classpath:/enableprofile-myprofile.properties"));\n\t\tcontext.close();\n\t}\n\n\t@Test\n\tpublic void propertySourceAnnotationAndProfile() throws Exception {\n\t\tSpringApplication application = new SpringApplication(\n\t\t\t\tWithPropertySourceAndProfile.class);\n\t\tapplication.setWebEnvironment(false);\n\t\tConfigurableApplicationContext context = application.run();\n\t\tString property = context.getEnvironment().getProperty("my.property");\n\t\tassertThat(property, equalTo(null));\n\t\tassertNull(context.getEnvironment().getPropertySources()\n\t\t\t\t.get("classpath:/enableprofile-myprofile.properties"));\n\t\tcontext.close();\n\t}\n\n\t@Test\n\tpublic void propertySourceAnnotationMultipleLocations() throws Exception {\n\t\tSpringApplication application = new SpringApplication(\n\t\t\t\tWithPropertySourceMultipleLocations.class);\n\t\tapplication.setWebEnvironment(false);\n\t\tConfigurableApplicationContext context = application.run();\n\t\tString property = context.getEnvironment().getProperty("my.property");\n\t\tassertThat(property, equalTo("frommorepropertiesfile"));\n\t\tassertNotNull(context.getEnvironment().getPropertySources()\n\t\t\t\t.get("classpath:/specificlocation.properties"));\n\t\tcontext.close();\n\t}\n\n\t@Test\n\tpublic void propertySourceAnnotationMultipleLocationsAndName() throws Exception {\n\t\tSpringApplication application = new SpringApplication(\n\t\t\t\tWithPropertySourceMultipleLocationsAndName.class);\n\t\tapplication.setWebEnvironment(false);\n\t\tConfigurableApplicationContext context = application.run();\n\t\tString property = context.getEnvironment().getProperty("my.property");\n\t\tassertThat(property, equalTo("frommorepropertiesfile"));\n\t\t// foo is there but it is a dead rubber because the individual sources get higher\n\t\t// priority (and are named after the resource locations)\n\t\tassertNotNull(context.getEnvironment().getPropertySources().get("foo"));\n\t\tassertNotNull(context.getEnvironment().getPropertySources()\n\t\t\t\t.get("classpath:/specificlocation.properties"));\n\t\tcontext.close();\n\t}\n\n\t@Test\n\tpublic void defaultApplicationProperties() throws Exception {\n\n\t}\n\n\t@Configuration\n\t@PropertySource("classpath:/specificlocation.properties")\n\tprotected static class WithPropertySource {\n\n\t}\n\n\t@Configuration\n\t@PropertySource(value = "classpath:/specificlocation.properties", name = "foo")\n\tprotected static class WithPropertySourceAndName {\n\n\t}\n\n\t@Configuration\n\t@PropertySource("classpath:/enableprofile.properties")\n\tprotected static class WithPropertySourceInProfile {\n\n\t}\n\n\t@Configuration\n\t@PropertySource("classpath:/enableprofile-myprofile.properties")\n\t@Profile("myprofile")\n\tprotected static class WithPropertySourceAndProfile {\n\n\t}\n\n\t@Configuration\n\t@PropertySource({ "classpath:/specificlocation.properties",\n\t\t\t"classpath:/moreproperties.properties" })\n\tprotected static class WithPropertySourceMultipleLocations {\n\n\t}\n\n\t@Configuration\n\t@PropertySource(value = { "classpath:/specificlocation.properties",\n\t\t\t"classpath:/moreproperties.properties" }, name = "foo")\n\tprotected static class WithPropertySourceMultipleLocationsAndName {\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2010-2012 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.context.initializer;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.junit.After;\nimport org.junit.Test;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.PropertySource;\nimport org.springframework.context.support.StaticApplicationContext;\nimport org.springframework.core.env.MapPropertySource;\nimport org.springframework.core.env.SimpleCommandLinePropertySource;\nimport org.springframework.core.env.StandardEnvironment;\n\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.notNullValue;\nimport static org.hamcrest.Matchers.nullValue;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertThat;\n\n/**\n * Tests for {@link ConfigFileApplicationContextInitializer}.\n * \n * @author Phillip Webb\n * @author Dave Syer\n */\npublic class ConfigFileApplicationContextInitializerTests {\n\n\tprivate StaticApplicationContext context = new StaticApplicationContext();\n\n\tprivate ConfigFileApplicationContextInitializer initializer = new ConfigFileApplicationContextInitializer();\n\n\t@After\n\tpublic void cleanup() {\n\t\tSystem.clearProperty("my.property");\n\t}\n\n\t@Test\n\tpublic void loadPropertiesFile() throws Exception {\n\t\tthis.initializer.setNames("testproperties");\n\t\tthis.initializer.initialize(this.context);\n\t\tString property = this.context.getEnvironment().getProperty("my.property");\n\t\tassertThat(property, equalTo("frompropertiesfile"));\n\t}\n\n\t@Test\n\tpublic void randomValue() throws Exception {\n\t\tStandardEnvironment environment = new StandardEnvironment();\n\t\tthis.initializer.setEnvironment(environment);\n\t\tthis.initializer.initialize(new SpringApplication(), new String[0]);\n\t\tString property = environment.getProperty("random.value");\n\t\tassertThat(property, notNullValue());\n\t}\n\n\t@Test\n\tpublic void loadTwoPropertiesFiles() throws Exception {\n\t\tthis.initializer.setNames("testproperties,moreproperties");\n\t\tthis.initializer.initialize(this.context);\n\t\tString property = this.context.getEnvironment().getProperty("my.property");\n\t\tassertThat(property, equalTo("frommorepropertiesfile"));\n\t}\n\n\t@Test\n\tpublic void loadYamlFile() throws Exception {\n\t\tthis.initializer.setNames("testyaml");\n\t\tthis.initializer.initialize(this.context);\n\t\tString property = this.context.getEnvironment().getProperty("my.property");\n\t\tassertThat(property, equalTo("fromyamlfile"));\n\t\tassertThat(this.context.getEnvironment().getProperty("my.array[0]"), equalTo("1"));\n\t\tassertThat(this.context.getEnvironment().getProperty("my.array"),\n\t\t\t\tnullValue(String.class));\n\t}\n\n\t@Test\n\tpublic void commandLineWins() throws Exception {\n\t\tthis.context\n\t\t\t\t.getEnvironment()\n\t\t\t\t.getPropertySources()\n\t\t\t\t.addFirst(\n\t\t\t\t\t\tnew SimpleCommandLinePropertySource(\n\t\t\t\t\t\t\t\t"--my.property=fromcommandline"));\n\t\tthis.initializer.setNames("testproperties");\n\t\tthis.initializer.initialize(this.context);\n\t\tString property = this.context.getEnvironment().getProperty("my.property");\n\t\tassertThat(property, equalTo("fromcommandline"));\n\t}\n\n\t@Test\n\tpublic void systemPropertyWins() throws Exception {\n\t\tSystem.setProperty("my.property", "fromsystem");\n\t\tthis.initializer.setNames("testproperties");\n\t\tthis.initializer.initialize(this.context);\n\t\tString property = this.context.getEnvironment().getProperty("my.property");\n\t\tassertThat(property, equalTo("fromsystem"));\n\t}\n\n\t@Test\n\tpublic void loadPropertiesThenProfileProperties() throws Exception {\n\t\tthis.initializer.setNames("enableprofile");\n\t\tthis.initializer.initialize(this.context);\n\t\tString property = this.context.getEnvironment().getProperty("my.property");\n\t\tassertThat(property, equalTo("fromprofilepropertiesfile"));\n\t}\n\n\t@Test\n\tpublic void profilePropertiesUsedInPlaceholders() throws Exception {\n\t\tthis.initializer.setNames("enableprofile");\n\t\tthis.initializer.initialize(this.context);\n\t\tString property = this.context.getEnvironment().getProperty("one.more");\n\t\tassertThat(property, equalTo("fromprofilepropertiesfile"));\n\t}\n\n\t@Test\n\tpublic void yamlProfiles() throws Exception {\n\t\tthis.initializer.setNames("testprofiles");\n\t\tthis.context.getEnvironment().setActiveProfiles("dev");\n\t\tthis.initializer.initialize(this.context);\n\t\tString property = this.context.getEnvironment().getProperty("my.property");\n\t\tassertThat(property, equalTo("fromdevprofile"));\n\t\tproperty = this.context.getEnvironment().getProperty("my.other");\n\t\tassertThat(property, equalTo("notempty"));\n\t}\n\n\t@Test\n\tpublic void yamlSetsProfiles() throws Exception {\n\t\tthis.initializer.setNames("testsetprofiles");\n\t\tthis.initializer.initialize(this.context);\n\t\tString property = this.context.getEnvironment().getProperty("my.property");\n\t\tassertThat(property, equalTo("fromdevprofile"));\n\t}\n\n\t@Test\n\tpublic void specificNameAndProfileFromExistingSource() throws Exception {\n\t\tMap<String, Object> map = new HashMap<String, Object>();\n\t\tmap.put("spring.profiles.active", "specificprofile");\n\t\tmap.put("spring.config.name", "specificfile");\n\t\tMapPropertySource source = new MapPropertySource("map", map);\n\t\tthis.context.getEnvironment().getPropertySources().addFirst(source);\n\t\tthis.initializer.initialize(this.context);\n\t\tString property = this.context.getEnvironment().getProperty("my.property");\n\t\tassertThat(property, equalTo("fromspecificpropertiesfile"));\n\t}\n\n\t@Test\n\tpublic void specificResource() throws Exception {\n\t\tMap<String, Object> map = new HashMap<String, Object>();\n\t\tmap.put("spring.config.location", "classpath:/specificlocation.properties");\n\t\tMapPropertySource source = new MapPropertySource("map", map);\n\t\tthis.context.getEnvironment().getPropertySources().addFirst(source);\n\t\tthis.initializer.initialize(this.context);\n\t\tString property = this.context.getEnvironment().getProperty("my.property");\n\t\tassertThat(property, equalTo("fromspecificlocation"));\n\t}\n\n\t@Test\n\tpublic void propertySourceAnnotation() throws Exception {\n\t\tSpringApplication application = new SpringApplication(WithPropertySource.class);\n\t\tapplication.setWebEnvironment(false);\n\t\tConfigurableApplicationContext context = application.run();\n\t\tString property = context.getEnvironment().getProperty("my.property");\n\t\tassertThat(property, equalTo("fromspecificlocation"));\n\t\tassertNotNull(context.getEnvironment().getPropertySources()\n\t\t\t\t.get("classpath:/specificlocation.properties"));\n\t\tcontext.close();\n\t}\n\n\t@Test\n\tpublic void propertySourceAnnotationWithName() throws Exception {\n\t\tSpringApplication application = new SpringApplication(\n\t\t\t\tWithPropertySourceAndName.class);\n\t\tapplication.setWebEnvironment(false);\n\t\tConfigurableApplicationContext context = application.run();\n\t\tString property = context.getEnvironment().getProperty("my.property");\n\t\tassertThat(property, equalTo("fromspecificlocation"));\n\t\t// In this case "foo" should be the specificlocation.properties source, but Spring\n\t\t// will have shifted it to the back of the line.\n\t\tassertNotNull(context.getEnvironment().getPropertySources().get("boot.foo"));\n\t\tcontext.close();\n\t}\n\n\t@Test\n\tpublic void propertySourceAnnotationMultipleLocations() throws Exception {\n\t\tSpringApplication application = new SpringApplication(\n\t\t\t\tWithPropertySourceMultipleLocations.class);\n\t\tapplication.setWebEnvironment(false);\n\t\tConfigurableApplicationContext context = application.run();\n\t\tString property = context.getEnvironment().getProperty("my.property");\n\t\tassertThat(property, equalTo("frommorepropertiesfile"));\n\t\tassertNotNull(context.getEnvironment().getPropertySources()\n\t\t\t\t.get("classpath:/specificlocation.properties"));\n\t\tcontext.close();\n\t}\n\n\t@Test\n\tpublic void propertySourceAnnotationMultipleLocationsAndName() throws Exception {\n\t\tSpringApplication application = new SpringApplication(\n\t\t\t\tWithPropertySourceMultipleLocationsAndName.class);\n\t\tapplication.setWebEnvironment(false);\n\t\tConfigurableApplicationContext context = application.run();\n\t\tString property = context.getEnvironment().getProperty("my.property");\n\t\tassertThat(property, equalTo("frommorepropertiesfile"));\n\t\t// foo is there but it is a dead rubber because the individual sources get higher\n\t\t// priority (and are named after the resource locations)\n\t\tassertNotNull(context.getEnvironment().getPropertySources().get("foo"));\n\t\tassertNotNull(context.getEnvironment().getPropertySources()\n\t\t\t\t.get("classpath:/specificlocation.properties"));\n\t\tcontext.close();\n\t}\n\n\t@Test\n\tpublic void defaultApplicationProperties() throws Exception {\n\n\t}\n\n\t@Configuration\n\t@PropertySource("classpath:/specificlocation.properties")\n\tprotected static class WithPropertySource {\n\n\t}\n\n\t@Configuration\n\t@PropertySource(value = "classpath:/specificlocation.properties", name = "foo")\n\tprotected static class WithPropertySourceAndName {\n\n\t}\n\n\t@Configuration\n\t@PropertySource({ "classpath:/specificlocation.properties",\n\t\t\t"classpath:/moreproperties.properties" })\n\tprotected static class WithPropertySourceMultipleLocations {\n\n\t}\n\n\t@Configuration\n\t@PropertySource(value = { "classpath:/specificlocation.properties",\n\t\t\t"classpath:/moreproperties.properties" }, name = "foo")\n\tprotected static class WithPropertySourceMultipleLocationsAndName {\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
