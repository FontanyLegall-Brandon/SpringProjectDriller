{'_old_path': WindowsPath('spring-boot-samples/spring-boot-sample-property-validation/src/main/java/sample/propertyvalidation/SamplePropertyValidationApplication.java'), '_new_path': WindowsPath('spring-boot-samples/spring-boot-sample-property-validation/src/main/java/sample/propertyvalidation/SamplePropertyValidationApplication.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -18,26 +18,42 @@ package sample.propertyvalidation;\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.CommandLineRunner;\n-import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n-\n+import org.springframework.boot.builder.SpringApplicationBuilder;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+import org.springframework.validation.Validator;\n \n @SpringBootApplication\n @EnableConfigurationProperties\n-public class SamplePropertyValidationApplication implements CommandLineRunner {\n+public class SamplePropertyValidationApplication {\n+\n+\t@Bean\n+\tpublic Validator configurationPropertiesValidator() {\n+\t\treturn new SamplePropertiesValidator();\n+\t}\n+\n+\t@Service\n+\t@Profile("app")\n+\tstatic class Startup implements CommandLineRunner {\n \n-\t@Autowired\n-\tprivate SampleProperties properties;\n+\t\t@Autowired\n+\t\tprivate SampleProperties properties;\n \n-\t@Override\n-\tpublic void run(String... args) {\n-\t\tSystem.out.println("host: " + this.properties.getHost());\n-\t\tSystem.out.println("port:" + this.properties.getPort());\n+\t\t@Override\n+\t\tpublic void run(String... args) {\n+\t\t\tSystem.out.println("=========================================");\n+\t\t\tSystem.out.println("Sample host: " + this.properties.getHost());\n+\t\t\tSystem.out.println("Sample port: " + this.properties.getPort());\n+\t\t\tSystem.out.println("=========================================");\n+\t\t}\n \t}\n \n \tpublic static void main(String[] args) throws Exception {\n-\t\tSpringApplication.run(SamplePropertyValidationApplication.class, args);\n+\t\tnew SpringApplicationBuilder(SamplePropertyValidationApplication.class)\n+\t\t\t\t.profiles("app").run(args);\n \t}\n \n }\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage sample.propertyvalidation;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.builder.SpringApplicationBuilder;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Profile;\nimport org.springframework.stereotype.Service;\nimport org.springframework.validation.Validator;\n\n@SpringBootApplication\n@EnableConfigurationProperties\npublic class SamplePropertyValidationApplication {\n\n\t@Bean\n\tpublic Validator configurationPropertiesValidator() {\n\t\treturn new SamplePropertiesValidator();\n\t}\n\n\t@Service\n\t@Profile("app")\n\tstatic class Startup implements CommandLineRunner {\n\n\t\t@Autowired\n\t\tprivate SampleProperties properties;\n\n\t\t@Override\n\t\tpublic void run(String... args) {\n\t\t\tSystem.out.println("=========================================");\n\t\t\tSystem.out.println("Sample host: " + this.properties.getHost());\n\t\t\tSystem.out.println("Sample port: " + this.properties.getPort());\n\t\t\tSystem.out.println("=========================================");\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tnew SpringApplicationBuilder(SamplePropertyValidationApplication.class)\n\t\t\t\t.profiles("app").run(args);\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage sample.propertyvalidation;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\n\n@SpringBootApplication\n@EnableConfigurationProperties\npublic class SamplePropertyValidationApplication implements CommandLineRunner {\n\n\t@Autowired\n\tprivate SampleProperties properties;\n\n\t@Override\n\tpublic void run(String... args) {\n\t\tSystem.out.println("host: " + this.properties.getHost());\n\t\tSystem.out.println("port:" + this.properties.getPort());\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tSpringApplication.run(SamplePropertyValidationApplication.class, args);\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
