@@ -0,0 +1,98 @@
+
+
+package org.springframework.boot.autoconfigure.kafka;
+
+import java.util.Map;
+
+import org.apache.kafka.streams.StreamsBuilder;
+import org.apache.kafka.streams.StreamsConfig;
+
+import org.springframework.beans.factory.InitializingBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.context.properties.source.InvalidConfigurationPropertyValueException;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.core.env.Environment;
+import org.springframework.kafka.annotation.KafkaStreamsDefaultConfiguration;
+import org.springframework.kafka.config.KafkaStreamsConfiguration;
+import org.springframework.kafka.core.StreamsBuilderFactoryBean;
+
+
+@Configuration
+@ConditionalOnClass(StreamsBuilder.class)
+@ConditionalOnBean(name = KafkaStreamsDefaultConfiguration.DEFAULT_STREAMS_BUILDER_BEAN_NAME)
+class KafkaStreamsAnnotationDrivenConfiguration {
+
+	private final KafkaProperties properties;
+
+	KafkaStreamsAnnotationDrivenConfiguration(KafkaProperties properties) {
+		this.properties = properties;
+	}
+
+	@ConditionalOnMissingBean
+	@Bean(KafkaStreamsDefaultConfiguration.DEFAULT_STREAMS_CONFIG_BEAN_NAME)
+	public KafkaStreamsConfiguration defaultKafkaStreamsConfig(Environment environment) {
+		Map<String, Object> streamsProperties = this.properties.buildStreamsProperties();
+		if (this.properties.getStreams().getApplicationId() == null) {
+			String applicationName = environment.getProperty();
+			if (applicationName != null) {
+				streamsProperties.put(StreamsConfig.APPLICATION_ID_CONFIG,
+						applicationName);
+			}
+			else {
+				throw new InvalidConfigurationPropertyValueException(
+						, null,
+						);
+			}
+		}
+		return new KafkaStreamsConfiguration(streamsProperties);
+	}
+
+	@Bean
+	public KafkaStreamsFactoryBeanConfigurer kafkaStreamsFactoryBeanConfigurer(
+			StreamsBuilderFactoryBean factoryBean) {
+		return new KafkaStreamsFactoryBeanConfigurer(this.properties, factoryBean);
+	}
+
+	
+	static class KafkaStreamsFactoryBeanConfigurer implements InitializingBean {
+
+		private final KafkaProperties properties;
+
+		private final StreamsBuilderFactoryBean factoryBean;
+
+		KafkaStreamsFactoryBeanConfigurer(KafkaProperties properties,
+				StreamsBuilderFactoryBean factoryBean) {
+			this.properties = properties;
+			this.factoryBean = factoryBean;
+		}
+
+		@Override
+		public void afterPropertiesSet() {
+			this.factoryBean.setAutoStartup(this.properties.getStreams().isAutoStartup());
+		}
+
+	}
+
+}

