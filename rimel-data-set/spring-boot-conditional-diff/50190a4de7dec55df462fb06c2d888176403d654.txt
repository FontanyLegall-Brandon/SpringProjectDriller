@@ -156,6 +156,13 @@ public class DataSourceAutoConfiguration implements EnvironmentAware {
 
 	}
 
+	@Conditional(DataSourceAutoConfiguration.HikariDatabaseCondition.class)
+	@ConditionalOnMissingBean(DataSource.class)
+	@Import(HikariDataSourceConfiguration.class)
+	protected static class HikariConfiguration {
+
+	}
+
 	@Conditional(DataSourceAutoConfiguration.BasicDatabaseCondition.class)
 	@ConditionalOnMissingBean(DataSource.class)
 	@Import(CommonsDataSourceConfiguration.class)
@@ -260,6 +267,8 @@ public class DataSourceAutoConfiguration implements EnvironmentAware {
 	 */
 	static class BasicDatabaseCondition extends NonEmbeddedDatabaseCondition {
 
+		private final Condition hikariCondition = new HikariDatabaseCondition();
+
 		private final Condition tomcatCondition = new TomcatDatabaseCondition();
 
 		@Override
@@ -270,7 +279,30 @@ public class DataSourceAutoConfiguration implements EnvironmentAware {
 		@Override
 		public ConditionOutcome getMatchOutcome(ConditionContext context,
 				AnnotatedTypeMetadata metadata) {
-			if (matches(context, metadata, this.tomcatCondition)) {
+			if (anyMatches(context, metadata, this.hikariCondition, this.tomcatCondition)) {
+				return ConditionOutcome.noMatch();
+			}
+			return super.getMatchOutcome(context, metadata);
+		}
+
+	}
+
+	
+	static class HikariDatabaseCondition extends NonEmbeddedDatabaseCondition {
+
+		private final Condition tomcatCondition = new TomcatDatabaseCondition();
+
+		@Override
+		protected String getDataSourceClassName() {
+			return ;
+		}
+
+		@Override
+		public ConditionOutcome getMatchOutcome(ConditionContext context,
+				AnnotatedTypeMetadata metadata) {
+			if (anyMatches(context, metadata, this.tomcatCondition)) {
 				return ConditionOutcome.noMatch();
 			}
 			return super.getMatchOutcome(context, metadata);
@@ -295,6 +327,8 @@ public class DataSourceAutoConfiguration implements EnvironmentAware {
 	 */
 	static class EmbeddedDatabaseCondition extends SpringBootCondition {
 
+		private final SpringBootCondition hikariCondition = new HikariDatabaseCondition();
+
 		private final SpringBootCondition tomcatCondition = new TomcatDatabaseCondition();
 
 		private final SpringBootCondition dbcpCondition = new BasicDatabaseCondition();
@@ -302,7 +336,8 @@ public class DataSourceAutoConfiguration implements EnvironmentAware {
 		@Override
 		public ConditionOutcome getMatchOutcome(ConditionContext context,
 				AnnotatedTypeMetadata metadata) {
-			if (anyMatches(context, metadata, this.tomcatCondition, this.dbcpCondition)) {
+			if (anyMatches(context, metadata, this.hikariCondition, this.tomcatCondition,
+					this.dbcpCondition)) {
 				return ConditionOutcome
 						.noMatch();
 			}
@@ -321,6 +356,8 @@ public class DataSourceAutoConfiguration implements EnvironmentAware {
 	 */
 	static class DatabaseCondition extends SpringBootCondition {
 
+		private final SpringBootCondition hikariCondition = new HikariDatabaseCondition();
+
 		private final SpringBootCondition tomcatCondition = new TomcatDatabaseCondition();
 
 		private final SpringBootCondition dbcpCondition = new BasicDatabaseCondition();
@@ -331,8 +368,8 @@ public class DataSourceAutoConfiguration implements EnvironmentAware {
 		public ConditionOutcome getMatchOutcome(ConditionContext context,
 				AnnotatedTypeMetadata metadata) {
 
-			if (anyMatches(context, metadata, this.tomcatCondition, this.dbcpCondition,
-					this.embeddedCondition)) {
+			if (anyMatches(context, metadata, this.hikariCondition, this.tomcatCondition,
+					this.dbcpCondition, this.embeddedCondition)) {
 				return ConditionOutcome.match();
 			}
 

