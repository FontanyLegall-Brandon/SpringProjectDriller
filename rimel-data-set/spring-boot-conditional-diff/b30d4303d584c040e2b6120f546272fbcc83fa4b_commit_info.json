{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -234,7 +234,8 @@ public class EmbeddedMongoAutoConfiguration {\n \t * {@code embeddedMongoServer} bean.\n \t */\n \t@Configuration\n-\t@ConditionalOnClass({ com.mongodb.reactivestreams.client.MongoClient.class, ReactiveMongoClientFactoryBean.class })\n+\t@ConditionalOnClass({ com.mongodb.reactivestreams.client.MongoClient.class,\n+\t\t\tReactiveMongoClientFactoryBean.class })\n \tprotected static class EmbeddedReactiveMongoDependencyConfiguration extends\n \t\t\tReactiveStreamsMongoClientDependsOnBeanFactoryPostProcessor {\n \n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.mongo.embedded;\n\nimport java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\n\nimport com.mongodb.Mongo;\nimport com.mongodb.MongoClient;\nimport de.flapdoodle.embed.mongo.Command;\nimport de.flapdoodle.embed.mongo.MongodExecutable;\nimport de.flapdoodle.embed.mongo.MongodStarter;\nimport de.flapdoodle.embed.mongo.config.DownloadConfigBuilder;\nimport de.flapdoodle.embed.mongo.config.ExtractedArtifactStoreBuilder;\nimport de.flapdoodle.embed.mongo.config.IMongodConfig;\nimport de.flapdoodle.embed.mongo.config.MongodConfigBuilder;\nimport de.flapdoodle.embed.mongo.config.Net;\nimport de.flapdoodle.embed.mongo.config.RuntimeConfigBuilder;\nimport de.flapdoodle.embed.mongo.config.Storage;\nimport de.flapdoodle.embed.mongo.distribution.Feature;\nimport de.flapdoodle.embed.mongo.distribution.IFeatureAwareVersion;\nimport de.flapdoodle.embed.process.config.IRuntimeConfig;\nimport de.flapdoodle.embed.process.config.io.ProcessOutput;\nimport de.flapdoodle.embed.process.io.Processors;\nimport de.flapdoodle.embed.process.io.Slf4jLevel;\nimport de.flapdoodle.embed.process.io.progress.Slf4jProgressListener;\nimport de.flapdoodle.embed.process.runtime.Network;\nimport de.flapdoodle.embed.process.store.ArtifactStoreBuilder;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.data.mongo.MongoClientDependsOnBeanFactoryPostProcessor;\nimport org.springframework.boot.autoconfigure.data.mongo.ReactiveStreamsMongoClientDependsOnBeanFactoryPostProcessor;\nimport org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration;\nimport org.springframework.boot.autoconfigure.mongo.MongoProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.MapPropertySource;\nimport org.springframework.core.env.MutablePropertySources;\nimport org.springframework.core.env.PropertySource;\nimport org.springframework.data.mongodb.core.MongoClientFactoryBean;\nimport org.springframework.data.mongodb.core.ReactiveMongoClientFactoryBean;\nimport org.springframework.util.Assert;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Embedded Mongo.\n *\n * @author Henryk Konsek\n * @author Andy Wilkinson\n * @author Yogesh Lonkar\n * @author Mark Paluch\n * @since 1.3.0\n */\n@Configuration\n@EnableConfigurationProperties({ MongoProperties.class, EmbeddedMongoProperties.class })\n@AutoConfigureBefore(MongoAutoConfiguration.class)\n@ConditionalOnClass({ Mongo.class, MongodStarter.class })\npublic class EmbeddedMongoAutoConfiguration {\n\n\tprivate static final byte[] IP4_LOOPBACK_ADDRESS = { 127, 0, 0, 1 };\n\n\tprivate static final byte[] IP6_LOOPBACK_ADDRESS = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\t\t\t0, 0, 0, 0, 1 };\n\n\tprivate final MongoProperties properties;\n\n\tprivate final EmbeddedMongoProperties embeddedProperties;\n\n\tprivate final ApplicationContext context;\n\n\tprivate final IRuntimeConfig runtimeConfig;\n\n\tpublic EmbeddedMongoAutoConfiguration(MongoProperties properties,\n\t\t\tEmbeddedMongoProperties embeddedProperties, ApplicationContext context,\n\t\t\tIRuntimeConfig runtimeConfig) {\n\t\tthis.properties = properties;\n\t\tthis.embeddedProperties = embeddedProperties;\n\t\tthis.context = context;\n\t\tthis.runtimeConfig = runtimeConfig;\n\t}\n\n\t@Bean(initMethod = "start", destroyMethod = "stop")\n\t@ConditionalOnMissingBean\n\tpublic MongodExecutable embeddedMongoServer(IMongodConfig mongodConfig)\n\t\t\tthrows IOException {\n\t\tInteger configuredPort = this.properties.getPort();\n\t\tif (configuredPort == null || configuredPort == 0) {\n\t\t\tsetEmbeddedPort(mongodConfig.net().getPort());\n\t\t}\n\t\tMongodStarter mongodStarter = getMongodStarter(this.runtimeConfig);\n\t\treturn mongodStarter.prepare(mongodConfig);\n\t}\n\n\tprivate MongodStarter getMongodStarter(IRuntimeConfig runtimeConfig) {\n\t\tif (runtimeConfig == null) {\n\t\t\treturn MongodStarter.getDefaultInstance();\n\t\t}\n\t\treturn MongodStarter.getInstance(runtimeConfig);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic IMongodConfig embeddedMongoConfiguration() throws IOException {\n\t\tIFeatureAwareVersion featureAwareVersion = new ToStringFriendlyFeatureAwareVersion(\n\t\t\t\tthis.embeddedProperties.getVersion(),\n\t\t\t\tthis.embeddedProperties.getFeatures());\n\t\tMongodConfigBuilder builder = new MongodConfigBuilder()\n\t\t\t\t.version(featureAwareVersion);\n\t\tif (this.embeddedProperties.getStorage() != null) {\n\t\t\tbuilder.replication(\n\t\t\t\t\tnew Storage(this.embeddedProperties.getStorage().getDatabaseDir(),\n\t\t\t\t\t\t\tthis.embeddedProperties.getStorage().getReplSetName(),\n\t\t\t\t\t\t\tthis.embeddedProperties.getStorage().getOplogSize() != null\n\t\t\t\t\t\t\t\t\t? this.embeddedProperties.getStorage().getOplogSize()\n\t\t\t\t\t\t\t\t\t: 0));\n\t\t}\n\t\tInteger configuredPort = this.properties.getPort();\n\t\tif (configuredPort != null && configuredPort > 0) {\n\t\t\tbuilder.net(new Net(getHost().getHostAddress(), configuredPort,\n\t\t\t\t\tNetwork.localhostIsIPv6()));\n\t\t}\n\t\telse {\n\t\t\tbuilder.net(new Net(getHost().getHostAddress(),\n\t\t\t\t\tNetwork.getFreeServerPort(getHost()), Network.localhostIsIPv6()));\n\t\t}\n\t\treturn builder.build();\n\t}\n\n\tprivate InetAddress getHost() throws UnknownHostException {\n\t\tif (this.properties.getHost() == null) {\n\t\t\treturn InetAddress.getByAddress(Network.localhostIsIPv6()\n\t\t\t\t\t? IP6_LOOPBACK_ADDRESS : IP4_LOOPBACK_ADDRESS);\n\t\t}\n\t\treturn InetAddress.getByName(this.properties.getHost());\n\t}\n\n\tprivate void setEmbeddedPort(int port) {\n\t\tthis.properties.setPort(port);\n\t\tsetPortProperty(this.context, port);\n\t}\n\n\tprivate void setPortProperty(ApplicationContext currentContext, int port) {\n\t\tif (currentContext instanceof ConfigurableApplicationContext) {\n\t\t\tMutablePropertySources sources = ((ConfigurableApplicationContext) currentContext)\n\t\t\t\t\t.getEnvironment().getPropertySources();\n\t\t\tgetMongoPorts(sources).put("local.mongo.port", port);\n\t\t}\n\t\tif (currentContext.getParent() != null) {\n\t\t\tsetPortProperty(currentContext.getParent(), port);\n\t\t}\n\t}\n\n\t@SuppressWarnings("unchecked")\n\tprivate Map<String, Object> getMongoPorts(MutablePropertySources sources) {\n\t\tPropertySource<?> propertySource = sources.get("mongo.ports");\n\t\tif (propertySource == null) {\n\t\t\tpropertySource = new MapPropertySource("mongo.ports",\n\t\t\t\t\tnew HashMap<String, Object>());\n\t\t\tsources.addFirst(propertySource);\n\t\t}\n\t\treturn (Map<String, Object>) propertySource.getSource();\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(Logger.class)\n\t@ConditionalOnMissingBean(IRuntimeConfig.class)\n\tstatic class RuntimeConfigConfiguration {\n\n\t\t@Bean\n\t\tpublic IRuntimeConfig embeddedMongoRuntimeConfig() {\n\t\t\tLogger logger = LoggerFactory\n\t\t\t\t\t.getLogger(getClass().getPackage().getName() + ".EmbeddedMongo");\n\t\t\tProcessOutput processOutput = new ProcessOutput(\n\t\t\t\t\tProcessors.logTo(logger, Slf4jLevel.INFO),\n\t\t\t\t\tProcessors.logTo(logger, Slf4jLevel.ERROR), Processors.named(\n\t\t\t\t\t\t\t"[console>]", Processors.logTo(logger, Slf4jLevel.DEBUG)));\n\t\t\treturn new RuntimeConfigBuilder().defaultsWithLogger(Command.MongoD, logger)\n\t\t\t\t\t.processOutput(processOutput).artifactStore(getArtifactStore(logger))\n\t\t\t\t\t.build();\n\t\t}\n\n\t\tprivate ArtifactStoreBuilder getArtifactStore(Logger logger) {\n\t\t\treturn new ExtractedArtifactStoreBuilder().defaults(Command.MongoD)\n\t\t\t\t\t.download(new DownloadConfigBuilder()\n\t\t\t\t\t\t\t.defaultsForCommand(Command.MongoD)\n\t\t\t\t\t\t\t.progressListener(new Slf4jProgressListener(logger)).build());\n\t\t}\n\n\t}\n\n\t/**\n\t * Additional configuration to ensure that {@link MongoClient} beans depend on the\n\t * {@code embeddedMongoServer} bean.\n\t */\n\t@Configuration\n\t@ConditionalOnClass({ MongoClient.class, MongoClientFactoryBean.class })\n\tprotected static class EmbeddedMongoDependencyConfiguration\n\t\t\textends MongoClientDependsOnBeanFactoryPostProcessor {\n\n\t\tpublic EmbeddedMongoDependencyConfiguration() {\n\t\t\tsuper("embeddedMongoServer");\n\t\t}\n\n\t}\n\n\t/**\n\t * Additional configuration to ensure that {@link MongoClient} beans depend on the\n\t * {@code embeddedMongoServer} bean.\n\t */\n\t@Configuration\n\t@ConditionalOnClass({ com.mongodb.reactivestreams.client.MongoClient.class,\n\t\t\tReactiveMongoClientFactoryBean.class })\n\tprotected static class EmbeddedReactiveMongoDependencyConfiguration extends\n\t\t\tReactiveStreamsMongoClientDependsOnBeanFactoryPostProcessor {\n\n\t\tpublic EmbeddedReactiveMongoDependencyConfiguration() {\n\t\t\tsuper("embeddedMongoServer");\n\t\t}\n\n\t}\n\n\t/**\n\t * A workaround for the lack of a {@code toString} implementation on\n\t * {@code GenericFeatureAwareVersion}.\n\t */\n\tprivate final static class ToStringFriendlyFeatureAwareVersion\n\t\t\timplements IFeatureAwareVersion {\n\n\t\tprivate final String version;\n\n\t\tprivate final Set<Feature> features;\n\n\t\tprivate ToStringFriendlyFeatureAwareVersion(String version,\n\t\t\t\tSet<Feature> features) {\n\t\t\tAssert.notNull(version, "version must not be null");\n\t\t\tthis.version = version;\n\t\t\tthis.features = (features == null ? Collections.<Feature>emptySet()\n\t\t\t\t\t: features);\n\t\t}\n\n\t\t@Override\n\t\tpublic String asInDownloadPath() {\n\t\t\treturn this.version;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean enabled(Feature feature) {\n\t\t\treturn this.features.contains(feature);\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn this.version;\n\t\t}\n\n\t\t@Override\n\t\tpublic int hashCode() {\n\t\t\tfinal int prime = 31;\n\t\t\tint result = 1;\n\t\t\tresult = prime * result + this.features.hashCode();\n\t\t\tresult = prime * result + this.version.hashCode();\n\t\t\treturn result;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean equals(Object obj) {\n\t\t\tif (this == obj) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (obj == null) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (getClass() == obj.getClass()) {\n\t\t\t\tToStringFriendlyFeatureAwareVersion other = (ToStringFriendlyFeatureAwareVersion) obj;\n\t\t\t\tboolean equals = true;\n\t\t\t\tequals = equals && this.features.equals(other.features);\n\t\t\t\tequals = equals && this.version.equals(other.version);\n\t\t\t\treturn equals;\n\t\t\t}\n\t\t\treturn super.equals(obj);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.mongo.embedded;\n\nimport java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\n\nimport com.mongodb.Mongo;\nimport com.mongodb.MongoClient;\nimport de.flapdoodle.embed.mongo.Command;\nimport de.flapdoodle.embed.mongo.MongodExecutable;\nimport de.flapdoodle.embed.mongo.MongodStarter;\nimport de.flapdoodle.embed.mongo.config.DownloadConfigBuilder;\nimport de.flapdoodle.embed.mongo.config.ExtractedArtifactStoreBuilder;\nimport de.flapdoodle.embed.mongo.config.IMongodConfig;\nimport de.flapdoodle.embed.mongo.config.MongodConfigBuilder;\nimport de.flapdoodle.embed.mongo.config.Net;\nimport de.flapdoodle.embed.mongo.config.RuntimeConfigBuilder;\nimport de.flapdoodle.embed.mongo.config.Storage;\nimport de.flapdoodle.embed.mongo.distribution.Feature;\nimport de.flapdoodle.embed.mongo.distribution.IFeatureAwareVersion;\nimport de.flapdoodle.embed.process.config.IRuntimeConfig;\nimport de.flapdoodle.embed.process.config.io.ProcessOutput;\nimport de.flapdoodle.embed.process.io.Processors;\nimport de.flapdoodle.embed.process.io.Slf4jLevel;\nimport de.flapdoodle.embed.process.io.progress.Slf4jProgressListener;\nimport de.flapdoodle.embed.process.runtime.Network;\nimport de.flapdoodle.embed.process.store.ArtifactStoreBuilder;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.data.mongo.MongoClientDependsOnBeanFactoryPostProcessor;\nimport org.springframework.boot.autoconfigure.data.mongo.ReactiveStreamsMongoClientDependsOnBeanFactoryPostProcessor;\nimport org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration;\nimport org.springframework.boot.autoconfigure.mongo.MongoProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.MapPropertySource;\nimport org.springframework.core.env.MutablePropertySources;\nimport org.springframework.core.env.PropertySource;\nimport org.springframework.data.mongodb.core.MongoClientFactoryBean;\nimport org.springframework.data.mongodb.core.ReactiveMongoClientFactoryBean;\nimport org.springframework.util.Assert;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Embedded Mongo.\n *\n * @author Henryk Konsek\n * @author Andy Wilkinson\n * @author Yogesh Lonkar\n * @author Mark Paluch\n * @since 1.3.0\n */\n@Configuration\n@EnableConfigurationProperties({ MongoProperties.class, EmbeddedMongoProperties.class })\n@AutoConfigureBefore(MongoAutoConfiguration.class)\n@ConditionalOnClass({ Mongo.class, MongodStarter.class })\npublic class EmbeddedMongoAutoConfiguration {\n\n\tprivate static final byte[] IP4_LOOPBACK_ADDRESS = { 127, 0, 0, 1 };\n\n\tprivate static final byte[] IP6_LOOPBACK_ADDRESS = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\t\t\t0, 0, 0, 0, 1 };\n\n\tprivate final MongoProperties properties;\n\n\tprivate final EmbeddedMongoProperties embeddedProperties;\n\n\tprivate final ApplicationContext context;\n\n\tprivate final IRuntimeConfig runtimeConfig;\n\n\tpublic EmbeddedMongoAutoConfiguration(MongoProperties properties,\n\t\t\tEmbeddedMongoProperties embeddedProperties, ApplicationContext context,\n\t\t\tIRuntimeConfig runtimeConfig) {\n\t\tthis.properties = properties;\n\t\tthis.embeddedProperties = embeddedProperties;\n\t\tthis.context = context;\n\t\tthis.runtimeConfig = runtimeConfig;\n\t}\n\n\t@Bean(initMethod = "start", destroyMethod = "stop")\n\t@ConditionalOnMissingBean\n\tpublic MongodExecutable embeddedMongoServer(IMongodConfig mongodConfig)\n\t\t\tthrows IOException {\n\t\tInteger configuredPort = this.properties.getPort();\n\t\tif (configuredPort == null || configuredPort == 0) {\n\t\t\tsetEmbeddedPort(mongodConfig.net().getPort());\n\t\t}\n\t\tMongodStarter mongodStarter = getMongodStarter(this.runtimeConfig);\n\t\treturn mongodStarter.prepare(mongodConfig);\n\t}\n\n\tprivate MongodStarter getMongodStarter(IRuntimeConfig runtimeConfig) {\n\t\tif (runtimeConfig == null) {\n\t\t\treturn MongodStarter.getDefaultInstance();\n\t\t}\n\t\treturn MongodStarter.getInstance(runtimeConfig);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic IMongodConfig embeddedMongoConfiguration() throws IOException {\n\t\tIFeatureAwareVersion featureAwareVersion = new ToStringFriendlyFeatureAwareVersion(\n\t\t\t\tthis.embeddedProperties.getVersion(),\n\t\t\t\tthis.embeddedProperties.getFeatures());\n\t\tMongodConfigBuilder builder = new MongodConfigBuilder()\n\t\t\t\t.version(featureAwareVersion);\n\t\tif (this.embeddedProperties.getStorage() != null) {\n\t\t\tbuilder.replication(\n\t\t\t\t\tnew Storage(this.embeddedProperties.getStorage().getDatabaseDir(),\n\t\t\t\t\t\t\tthis.embeddedProperties.getStorage().getReplSetName(),\n\t\t\t\t\t\t\tthis.embeddedProperties.getStorage().getOplogSize() != null\n\t\t\t\t\t\t\t\t\t? this.embeddedProperties.getStorage().getOplogSize()\n\t\t\t\t\t\t\t\t\t: 0));\n\t\t}\n\t\tInteger configuredPort = this.properties.getPort();\n\t\tif (configuredPort != null && configuredPort > 0) {\n\t\t\tbuilder.net(new Net(getHost().getHostAddress(), configuredPort,\n\t\t\t\t\tNetwork.localhostIsIPv6()));\n\t\t}\n\t\telse {\n\t\t\tbuilder.net(new Net(getHost().getHostAddress(),\n\t\t\t\t\tNetwork.getFreeServerPort(getHost()), Network.localhostIsIPv6()));\n\t\t}\n\t\treturn builder.build();\n\t}\n\n\tprivate InetAddress getHost() throws UnknownHostException {\n\t\tif (this.properties.getHost() == null) {\n\t\t\treturn InetAddress.getByAddress(Network.localhostIsIPv6()\n\t\t\t\t\t? IP6_LOOPBACK_ADDRESS : IP4_LOOPBACK_ADDRESS);\n\t\t}\n\t\treturn InetAddress.getByName(this.properties.getHost());\n\t}\n\n\tprivate void setEmbeddedPort(int port) {\n\t\tthis.properties.setPort(port);\n\t\tsetPortProperty(this.context, port);\n\t}\n\n\tprivate void setPortProperty(ApplicationContext currentContext, int port) {\n\t\tif (currentContext instanceof ConfigurableApplicationContext) {\n\t\t\tMutablePropertySources sources = ((ConfigurableApplicationContext) currentContext)\n\t\t\t\t\t.getEnvironment().getPropertySources();\n\t\t\tgetMongoPorts(sources).put("local.mongo.port", port);\n\t\t}\n\t\tif (currentContext.getParent() != null) {\n\t\t\tsetPortProperty(currentContext.getParent(), port);\n\t\t}\n\t}\n\n\t@SuppressWarnings("unchecked")\n\tprivate Map<String, Object> getMongoPorts(MutablePropertySources sources) {\n\t\tPropertySource<?> propertySource = sources.get("mongo.ports");\n\t\tif (propertySource == null) {\n\t\t\tpropertySource = new MapPropertySource("mongo.ports",\n\t\t\t\t\tnew HashMap<String, Object>());\n\t\t\tsources.addFirst(propertySource);\n\t\t}\n\t\treturn (Map<String, Object>) propertySource.getSource();\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(Logger.class)\n\t@ConditionalOnMissingBean(IRuntimeConfig.class)\n\tstatic class RuntimeConfigConfiguration {\n\n\t\t@Bean\n\t\tpublic IRuntimeConfig embeddedMongoRuntimeConfig() {\n\t\t\tLogger logger = LoggerFactory\n\t\t\t\t\t.getLogger(getClass().getPackage().getName() + ".EmbeddedMongo");\n\t\t\tProcessOutput processOutput = new ProcessOutput(\n\t\t\t\t\tProcessors.logTo(logger, Slf4jLevel.INFO),\n\t\t\t\t\tProcessors.logTo(logger, Slf4jLevel.ERROR), Processors.named(\n\t\t\t\t\t\t\t"[console>]", Processors.logTo(logger, Slf4jLevel.DEBUG)));\n\t\t\treturn new RuntimeConfigBuilder().defaultsWithLogger(Command.MongoD, logger)\n\t\t\t\t\t.processOutput(processOutput).artifactStore(getArtifactStore(logger))\n\t\t\t\t\t.build();\n\t\t}\n\n\t\tprivate ArtifactStoreBuilder getArtifactStore(Logger logger) {\n\t\t\treturn new ExtractedArtifactStoreBuilder().defaults(Command.MongoD)\n\t\t\t\t\t.download(new DownloadConfigBuilder()\n\t\t\t\t\t\t\t.defaultsForCommand(Command.MongoD)\n\t\t\t\t\t\t\t.progressListener(new Slf4jProgressListener(logger)).build());\n\t\t}\n\n\t}\n\n\t/**\n\t * Additional configuration to ensure that {@link MongoClient} beans depend on the\n\t * {@code embeddedMongoServer} bean.\n\t */\n\t@Configuration\n\t@ConditionalOnClass({ MongoClient.class, MongoClientFactoryBean.class })\n\tprotected static class EmbeddedMongoDependencyConfiguration\n\t\t\textends MongoClientDependsOnBeanFactoryPostProcessor {\n\n\t\tpublic EmbeddedMongoDependencyConfiguration() {\n\t\t\tsuper("embeddedMongoServer");\n\t\t}\n\n\t}\n\n\t/**\n\t * Additional configuration to ensure that {@link MongoClient} beans depend on the\n\t * {@code embeddedMongoServer} bean.\n\t */\n\t@Configuration\n\t@ConditionalOnClass({ com.mongodb.reactivestreams.client.MongoClient.class, ReactiveMongoClientFactoryBean.class })\n\tprotected static class EmbeddedReactiveMongoDependencyConfiguration extends\n\t\t\tReactiveStreamsMongoClientDependsOnBeanFactoryPostProcessor {\n\n\t\tpublic EmbeddedReactiveMongoDependencyConfiguration() {\n\t\t\tsuper("embeddedMongoServer");\n\t\t}\n\n\t}\n\n\t/**\n\t * A workaround for the lack of a {@code toString} implementation on\n\t * {@code GenericFeatureAwareVersion}.\n\t */\n\tprivate final static class ToStringFriendlyFeatureAwareVersion\n\t\t\timplements IFeatureAwareVersion {\n\n\t\tprivate final String version;\n\n\t\tprivate final Set<Feature> features;\n\n\t\tprivate ToStringFriendlyFeatureAwareVersion(String version,\n\t\t\t\tSet<Feature> features) {\n\t\t\tAssert.notNull(version, "version must not be null");\n\t\t\tthis.version = version;\n\t\t\tthis.features = (features == null ? Collections.<Feature>emptySet()\n\t\t\t\t\t: features);\n\t\t}\n\n\t\t@Override\n\t\tpublic String asInDownloadPath() {\n\t\t\treturn this.version;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean enabled(Feature feature) {\n\t\t\treturn this.features.contains(feature);\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn this.version;\n\t\t}\n\n\t\t@Override\n\t\tpublic int hashCode() {\n\t\t\tfinal int prime = 31;\n\t\t\tint result = 1;\n\t\t\tresult = prime * result + this.features.hashCode();\n\t\t\tresult = prime * result + this.version.hashCode();\n\t\t\treturn result;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean equals(Object obj) {\n\t\t\tif (this == obj) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (obj == null) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (getClass() == obj.getClass()) {\n\t\t\t\tToStringFriendlyFeatureAwareVersion other = (ToStringFriendlyFeatureAwareVersion) obj;\n\t\t\t\tboolean equals = true;\n\t\t\t\tequals = equals && this.features.equals(other.features);\n\t\t\t\tequals = equals && this.version.equals(other.version);\n\t\t\t\treturn equals;\n\t\t\t}\n\t\t\treturn super.equals(obj);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
