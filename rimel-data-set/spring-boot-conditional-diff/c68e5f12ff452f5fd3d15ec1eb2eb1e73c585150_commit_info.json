{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/neo4j/Neo4jAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/neo4j/Neo4jAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -45,8 +45,7 @@ import org.springframework.data.neo4j.template.Neo4jTemplate;\n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s Neo4j support.\n  * <p>\n- * Registers a {@link Neo4jTemplate} bean if no other bean of\n- * the same type is configured.\n+ * Registers a {@link Neo4jTemplate} bean if no other bean of the same type is configured.\n  *\n  * @author Michael Hunger\n  * @author Josh Long\n@@ -55,7 +54,7 @@ import org.springframework.data.neo4j.template.Neo4jTemplate;\n  * @since 1.4.0\n  */\n @Configuration\n-@ConditionalOnClass({Neo4jSession.class, Neo4jOperations.class})\n+@ConditionalOnClass({ Neo4jSession.class, Neo4jOperations.class })\n @ConditionalOnMissingBean(Neo4jOperations.class)\n @EnableConfigurationProperties(Neo4jProperties.class)\n public class Neo4jAutoConfiguration {\n@@ -66,7 +65,8 @@ public class Neo4jAutoConfiguration {\n \n \t\tprivate final ObjectProvider<SessionFactoryProvider> sessionFactoryProvider;\n \n-\t\tpublic SpringBootNeo4jConfiguration(ObjectProvider<SessionFactoryProvider> sessionFactoryProvider) {\n+\t\tpublic SpringBootNeo4jConfiguration(\n+\t\t\t\tObjectProvider<SessionFactoryProvider> sessionFactoryProvider) {\n \t\t\tthis.sessionFactoryProvider = sessionFactoryProvider;\n \t\t}\n \n@@ -77,8 +77,7 @@ public class Neo4jAutoConfiguration {\n \t\t}\n \n \t\t@Bean\n-\t\t@Scope(scopeName = "${spring.data.neo4j.session.scope:singleton}",\n-\t\t\t\tproxyMode = ScopedProxyMode.TARGET_CLASS)\n+\t\t@Scope(scopeName = "${spring.data.neo4j.session.scope:singleton}", proxyMode = ScopedProxyMode.TARGET_CLASS)\n \t\t@Override\n \t\tpublic Session getSession() throws Exception {\n \t\t\treturn getSessionFactory().openSession();\n@@ -94,7 +93,8 @@ public class Neo4jAutoConfiguration {\n \n \t\tprivate ConfigurableListableBeanFactory beanFactory;\n \n-\t\tSessionFactoryProviderConfiguration(org.neo4j.ogm.config.Configuration configuration) {\n+\t\tSessionFactoryProviderConfiguration(\n+\t\t\t\torg.neo4j.ogm.config.Configuration configuration) {\n \t\t\tthis.configuration = configuration;\n \t\t}\n \n@@ -114,7 +114,8 @@ public class Neo4jAutoConfiguration {\n \n \t\tprotected String[] getPackagesToScan() {\n \t\t\tif (AutoConfigurationPackages.has(this.beanFactory)) {\n-\t\t\t\tList<String> basePackages = AutoConfigurationPackages.get(this.beanFactory);\n+\t\t\t\tList<String> basePackages = AutoConfigurationPackages\n+\t\t\t\t\t\t.get(this.beanFactory);\n \t\t\t\treturn basePackages.toArray(new String[basePackages.size()]);\n \t\t\t}\n \t\t\treturn new String[0];\n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.neo4j;\n\nimport java.util.List;\n\nimport org.neo4j.ogm.session.Neo4jSession;\nimport org.neo4j.ogm.session.Session;\nimport org.neo4j.ogm.session.SessionFactory;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.boot.autoconfigure.AutoConfigurationPackages;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.neo4j.SessionFactoryProvider;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.context.annotation.ScopedProxyMode;\nimport org.springframework.data.neo4j.config.Neo4jConfiguration;\nimport org.springframework.data.neo4j.template.Neo4jOperations;\nimport org.springframework.data.neo4j.template.Neo4jTemplate;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s Neo4j support.\n * <p>\n * Registers a {@link Neo4jTemplate} bean if no other bean of the same type is configured.\n *\n * @author Michael Hunger\n * @author Josh Long\n * @author Vince Bickers\n * @author Stephane Nicoll\n * @since 1.4.0\n */\n@Configuration\n@ConditionalOnClass({ Neo4jSession.class, Neo4jOperations.class })\n@ConditionalOnMissingBean(Neo4jOperations.class)\n@EnableConfigurationProperties(Neo4jProperties.class)\npublic class Neo4jAutoConfiguration {\n\n\t@Configuration\n\t@Import(SessionFactoryProviderConfiguration.class)\n\tpublic static class SpringBootNeo4jConfiguration extends Neo4jConfiguration {\n\n\t\tprivate final ObjectProvider<SessionFactoryProvider> sessionFactoryProvider;\n\n\t\tpublic SpringBootNeo4jConfiguration(\n\t\t\t\tObjectProvider<SessionFactoryProvider> sessionFactoryProvider) {\n\t\t\tthis.sessionFactoryProvider = sessionFactoryProvider;\n\t\t}\n\n\t\t@Override\n\t\tpublic SessionFactory getSessionFactory() {\n\t\t\tSessionFactoryProvider provider = this.sessionFactoryProvider.getObject();\n\t\t\treturn provider.getSessionFactory();\n\t\t}\n\n\t\t@Bean\n\t\t@Scope(scopeName = "${spring.data.neo4j.session.scope:singleton}", proxyMode = ScopedProxyMode.TARGET_CLASS)\n\t\t@Override\n\t\tpublic Session getSession() throws Exception {\n\t\t\treturn getSessionFactory().openSession();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@Import(Neo4jConfigurationConfiguration.class)\n\tstatic class SessionFactoryProviderConfiguration implements BeanFactoryAware {\n\n\t\tprivate final org.neo4j.ogm.config.Configuration configuration;\n\n\t\tprivate ConfigurableListableBeanFactory beanFactory;\n\n\t\tSessionFactoryProviderConfiguration(\n\t\t\t\torg.neo4j.ogm.config.Configuration configuration) {\n\t\t\tthis.configuration = configuration;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic SessionFactoryProvider sessionFactoryProvider() {\n\t\t\tSessionFactoryProvider provider = new SessionFactoryProvider();\n\t\t\tprovider.setConfiguration(this.configuration);\n\t\t\tprovider.setPackagesToScan(getPackagesToScan());\n\t\t\treturn provider;\n\t\t}\n\n\t\t@Override\n\t\tpublic void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n\t\t\tthis.beanFactory = (ConfigurableListableBeanFactory) beanFactory;\n\t\t}\n\n\t\tprotected String[] getPackagesToScan() {\n\t\t\tif (AutoConfigurationPackages.has(this.beanFactory)) {\n\t\t\t\tList<String> basePackages = AutoConfigurationPackages\n\t\t\t\t\t\t.get(this.beanFactory);\n\t\t\t\treturn basePackages.toArray(new String[basePackages.size()]);\n\t\t\t}\n\t\t\treturn new String[0];\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class Neo4jConfigurationConfiguration {\n\n\t\tprivate final Neo4jProperties properties;\n\n\t\tNeo4jConfigurationConfiguration(Neo4jProperties properties) {\n\t\t\tthis.properties = properties;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic org.neo4j.ogm.config.Configuration configuration() {\n\t\t\treturn this.properties.createConfiguration();\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.neo4j;\n\nimport java.util.List;\n\nimport org.neo4j.ogm.session.Neo4jSession;\nimport org.neo4j.ogm.session.Session;\nimport org.neo4j.ogm.session.SessionFactory;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.boot.autoconfigure.AutoConfigurationPackages;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.neo4j.SessionFactoryProvider;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.context.annotation.ScopedProxyMode;\nimport org.springframework.data.neo4j.config.Neo4jConfiguration;\nimport org.springframework.data.neo4j.template.Neo4jOperations;\nimport org.springframework.data.neo4j.template.Neo4jTemplate;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s Neo4j support.\n * <p>\n * Registers a {@link Neo4jTemplate} bean if no other bean of\n * the same type is configured.\n *\n * @author Michael Hunger\n * @author Josh Long\n * @author Vince Bickers\n * @author Stephane Nicoll\n * @since 1.4.0\n */\n@Configuration\n@ConditionalOnClass({Neo4jSession.class, Neo4jOperations.class})\n@ConditionalOnMissingBean(Neo4jOperations.class)\n@EnableConfigurationProperties(Neo4jProperties.class)\npublic class Neo4jAutoConfiguration {\n\n\t@Configuration\n\t@Import(SessionFactoryProviderConfiguration.class)\n\tpublic static class SpringBootNeo4jConfiguration extends Neo4jConfiguration {\n\n\t\tprivate final ObjectProvider<SessionFactoryProvider> sessionFactoryProvider;\n\n\t\tpublic SpringBootNeo4jConfiguration(ObjectProvider<SessionFactoryProvider> sessionFactoryProvider) {\n\t\t\tthis.sessionFactoryProvider = sessionFactoryProvider;\n\t\t}\n\n\t\t@Override\n\t\tpublic SessionFactory getSessionFactory() {\n\t\t\tSessionFactoryProvider provider = this.sessionFactoryProvider.getObject();\n\t\t\treturn provider.getSessionFactory();\n\t\t}\n\n\t\t@Bean\n\t\t@Scope(scopeName = "${spring.data.neo4j.session.scope:singleton}",\n\t\t\t\tproxyMode = ScopedProxyMode.TARGET_CLASS)\n\t\t@Override\n\t\tpublic Session getSession() throws Exception {\n\t\t\treturn getSessionFactory().openSession();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@Import(Neo4jConfigurationConfiguration.class)\n\tstatic class SessionFactoryProviderConfiguration implements BeanFactoryAware {\n\n\t\tprivate final org.neo4j.ogm.config.Configuration configuration;\n\n\t\tprivate ConfigurableListableBeanFactory beanFactory;\n\n\t\tSessionFactoryProviderConfiguration(org.neo4j.ogm.config.Configuration configuration) {\n\t\t\tthis.configuration = configuration;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic SessionFactoryProvider sessionFactoryProvider() {\n\t\t\tSessionFactoryProvider provider = new SessionFactoryProvider();\n\t\t\tprovider.setConfiguration(this.configuration);\n\t\t\tprovider.setPackagesToScan(getPackagesToScan());\n\t\t\treturn provider;\n\t\t}\n\n\t\t@Override\n\t\tpublic void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n\t\t\tthis.beanFactory = (ConfigurableListableBeanFactory) beanFactory;\n\t\t}\n\n\t\tprotected String[] getPackagesToScan() {\n\t\t\tif (AutoConfigurationPackages.has(this.beanFactory)) {\n\t\t\t\tList<String> basePackages = AutoConfigurationPackages.get(this.beanFactory);\n\t\t\t\treturn basePackages.toArray(new String[basePackages.size()]);\n\t\t\t}\n\t\t\treturn new String[0];\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class Neo4jConfigurationConfiguration {\n\n\t\tprivate final Neo4jProperties properties;\n\n\t\tNeo4jConfigurationConfiguration(Neo4jProperties properties) {\n\t\t\tthis.properties = properties;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic org.neo4j.ogm.config.Configuration configuration() {\n\t\t\treturn this.properties.createConfiguration();\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
