@@ -0,0 +1,79 @@
+
+
+package org.springframework.boot.autoconfigure.websocket;
+
+import java.util.List;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
+import org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.messaging.converter.DefaultContentTypeResolver;
+import org.springframework.messaging.converter.MappingJackson2MessageConverter;
+import org.springframework.messaging.converter.MessageConverter;
+import org.springframework.util.MimeTypeUtils;
+import org.springframework.web.socket.config.annotation.AbstractWebSocketMessageBrokerConfigurer;
+import org.springframework.web.socket.config.annotation.DelegatingWebSocketMessageBrokerConfiguration;
+import org.springframework.web.socket.config.annotation.StompEndpointRegistry;
+import org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+
+
+@ConditionalOnWebApplication
+@ConditionalOnClass(WebSocketMessageBrokerConfigurer.class)
+@AutoConfigureAfter(JacksonAutoConfiguration.class)
+public class WebSocketMessagingAutoConfiguration {
+
+	@Configuration
+	@ConditionalOnBean({ DelegatingWebSocketMessageBrokerConfiguration.class,
+			ObjectMapper.class })
+	@ConditionalOnClass(ObjectMapper.class)
+	static class WebSocketMessageConverterConfiguration extends
+			AbstractWebSocketMessageBrokerConfigurer {
+
+		@Autowired
+		private ObjectMapper objectMapper;
+
+		@Override
+		public void registerStompEndpoints(StompEndpointRegistry registry) {
+			
+		}
+
+		@Override
+		public boolean configureMessageConverters(List<MessageConverter> messageConverters) {
+			MappingJackson2MessageConverter converter = new MappingJackson2MessageConverter();
+			converter.setObjectMapper(this.objectMapper);
+			DefaultContentTypeResolver resolver = new DefaultContentTypeResolver();
+			resolver.setDefaultMimeType(MimeTypeUtils.APPLICATION_JSON);
+			converter.setContentTypeResolver(resolver);
+			messageConverters.add(converter);
+			return true;
+		}
+
+	}
+
+}

