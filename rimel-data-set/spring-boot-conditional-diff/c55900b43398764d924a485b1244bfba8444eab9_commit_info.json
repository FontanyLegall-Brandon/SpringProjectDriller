{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hateoas/HypermediaHttpMessageConverterConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2012-2015 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.hateoas;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.springframework.beans.BeansException;\n+import org.springframework.beans.factory.BeanFactory;\n+import org.springframework.beans.factory.BeanFactoryAware;\n+import org.springframework.beans.factory.ListableBeanFactory;\n+import org.springframework.beans.factory.config.BeanPostProcessor;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.hateoas.MediaTypes;\n+import org.springframework.hateoas.mvc.TypeConstrainedMappingJackson2HttpMessageConverter;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.converter.HttpMessageConverter;\n+import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;\n+\n+/**\n+ * Configuration for {@link HttpMessageConverter HttpMessageConverters} when hypermedia is\n+ * enabled.\n+ *\n+ * @author Andy Wilkinson\n+ */\n+public class HypermediaHttpMessageConverterConfiguration {\n+\n+\t@Bean\n+\t@ConditionalOnProperty(prefix = "spring.hateoas", name = "use-hal-as-default-json-media-type", matchIfMissing = true)\n+\tpublic static HalMessageConverterSupportedMediaTypesCustomizer halMessageConverterSupportedMediaTypeCustomizer() {\n+\t\treturn new HalMessageConverterSupportedMediaTypesCustomizer();\n+\t}\n+\n+\t/**\n+\t * Updates any {@link TypeConstrainedMappingJackson2HttpMessageConverter}s to support\n+\t * {@code application/json} in addition to {@code application/hal+json}. Cannot be a\n+\t * {@link BeanPostProcessor} as processing must be performed after\n+\t * {@code Jackson2ModuleRegisteringBeanPostProcessor} has registered the converter and\n+\t * it is unordered.\n+\t */\n+\tprivate static class HalMessageConverterSupportedMediaTypesCustomizer implements\n+\t\t\tBeanFactoryAware {\n+\n+\t\tprivate volatile BeanFactory beanFactory;\n+\n+\t\t@PostConstruct\n+\t\tpublic void customizedSupportedMediaTypes() {\n+\t\t\tif (this.beanFactory instanceof ListableBeanFactory) {\n+\t\t\t\tMap<String, RequestMappingHandlerAdapter> handlerAdapters = ((ListableBeanFactory) this.beanFactory)\n+\t\t\t\t\t\t.getBeansOfType(RequestMappingHandlerAdapter.class);\n+\t\t\t\tfor (Entry<String, RequestMappingHandlerAdapter> entry : handlerAdapters\n+\t\t\t\t\t\t.entrySet()) {\n+\t\t\t\t\tRequestMappingHandlerAdapter handlerAdapter = entry.getValue();\n+\t\t\t\t\tfor (HttpMessageConverter<?> converter : handlerAdapter\n+\t\t\t\t\t\t\t.getMessageConverters()) {\n+\t\t\t\t\t\tif (converter instanceof TypeConstrainedMappingJackson2HttpMessageConverter) {\n+\t\t\t\t\t\t\t((TypeConstrainedMappingJackson2HttpMessageConverter) converter)\n+\t\t\t\t\t\t\t\t\t.setSupportedMediaTypes(Arrays.asList(\n+\t\t\t\t\t\t\t\t\t\t\tMediaTypes.HAL_JSON,\n+\t\t\t\t\t\t\t\t\t\t\tMediaType.APPLICATION_JSON));\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n+\t\t\tthis.beanFactory = beanFactory;\n+\t\t}\n+\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.hateoas;\n\nimport java.util.Arrays;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\nimport javax.annotation.PostConstruct;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.beans.factory.ListableBeanFactory;\nimport org.springframework.beans.factory.config.BeanPostProcessor;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.hateoas.MediaTypes;\nimport org.springframework.hateoas.mvc.TypeConstrainedMappingJackson2HttpMessageConverter;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;\n\n/**\n * Configuration for {@link HttpMessageConverter HttpMessageConverters} when hypermedia is\n * enabled.\n *\n * @author Andy Wilkinson\n */\npublic class HypermediaHttpMessageConverterConfiguration {\n\n\t@Bean\n\t@ConditionalOnProperty(prefix = "spring.hateoas", name = "use-hal-as-default-json-media-type", matchIfMissing = true)\n\tpublic static HalMessageConverterSupportedMediaTypesCustomizer halMessageConverterSupportedMediaTypeCustomizer() {\n\t\treturn new HalMessageConverterSupportedMediaTypesCustomizer();\n\t}\n\n\t/**\n\t * Updates any {@link TypeConstrainedMappingJackson2HttpMessageConverter}s to support\n\t * {@code application/json} in addition to {@code application/hal+json}. Cannot be a\n\t * {@link BeanPostProcessor} as processing must be performed after\n\t * {@code Jackson2ModuleRegisteringBeanPostProcessor} has registered the converter and\n\t * it is unordered.\n\t */\n\tprivate static class HalMessageConverterSupportedMediaTypesCustomizer implements\n\t\t\tBeanFactoryAware {\n\n\t\tprivate volatile BeanFactory beanFactory;\n\n\t\t@PostConstruct\n\t\tpublic void customizedSupportedMediaTypes() {\n\t\t\tif (this.beanFactory instanceof ListableBeanFactory) {\n\t\t\t\tMap<String, RequestMappingHandlerAdapter> handlerAdapters = ((ListableBeanFactory) this.beanFactory)\n\t\t\t\t\t\t.getBeansOfType(RequestMappingHandlerAdapter.class);\n\t\t\t\tfor (Entry<String, RequestMappingHandlerAdapter> entry : handlerAdapters\n\t\t\t\t\t\t.entrySet()) {\n\t\t\t\t\tRequestMappingHandlerAdapter handlerAdapter = entry.getValue();\n\t\t\t\t\tfor (HttpMessageConverter<?> converter : handlerAdapter\n\t\t\t\t\t\t\t.getMessageConverters()) {\n\t\t\t\t\t\tif (converter instanceof TypeConstrainedMappingJackson2HttpMessageConverter) {\n\t\t\t\t\t\t\t((TypeConstrainedMappingJackson2HttpMessageConverter) converter)\n\t\t\t\t\t\t\t\t\t.setSupportedMediaTypes(Arrays.asList(\n\t\t\t\t\t\t\t\t\t\t\tMediaTypes.HAL_JSON,\n\t\t\t\t\t\t\t\t\t\t\tMediaType.APPLICATION_JSON));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n\t\t\tthis.beanFactory = beanFactory;\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
