{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/influx/InfluxDbAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/influx/InfluxDbAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2018 the original author or authors.\n+ * Copyright 2012-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -46,16 +46,15 @@ public class InfluxDbAutoConfiguration {\n \n \tprivate static final Log logger = LogFactory.getLog(InfluxDbAutoConfiguration.class);\n \n-\tprivate final InfluxDbProperties properties;\n-\n-\tprivate final OkHttpClient.Builder builder;\n-\n-\tpublic InfluxDbAutoConfiguration(InfluxDbProperties properties,\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\t@ConditionalOnProperty("spring.influx.url")\n+\tpublic InfluxDB influxDb(InfluxDbProperties properties,\n \t\t\tObjectProvider<InfluxDbOkHttpClientBuilderProvider> builder,\n \t\t\tObjectProvider<OkHttpClient.Builder> deprecatedBuilder) {\n-\t\tthis.properties = properties;\n-\t\tthis.builder = determineBuilder(builder.getIfAvailable(),\n-\t\t\t\tdeprecatedBuilder.getIfAvailable());\n+\t\treturn new InfluxDBImpl(properties.getUrl(), properties.getUser(),\n+\t\t\t\tproperties.getPassword(), determineBuilder(builder.getIfAvailable(),\n+\t\t\t\t\t\tdeprecatedBuilder.getIfAvailable()));\n \t}\n \n \t@Deprecated\n@@ -75,12 +74,4 @@ public class InfluxDbAutoConfiguration {\n \t\treturn new OkHttpClient.Builder();\n \t}\n \n-\t@Bean\n-\t@ConditionalOnMissingBean\n-\t@ConditionalOnProperty("spring.influx.url")\n-\tpublic InfluxDB influxDb() {\n-\t\treturn new InfluxDBImpl(this.properties.getUrl(), this.properties.getUser(),\n-\t\t\t\tthis.properties.getPassword(), this.builder);\n-\t}\n-\n }\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.influx;\n\nimport okhttp3.OkHttpClient;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.influxdb.InfluxDB;\nimport org.influxdb.impl.InfluxDBImpl;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for InfluxDB.\n *\n * @author Sergey Kuptsov\n * @author Stephane Nicoll\n * @author Eddú Meléndez\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass(InfluxDB.class)\n@EnableConfigurationProperties(InfluxDbProperties.class)\npublic class InfluxDbAutoConfiguration {\n\n\tprivate static final Log logger = LogFactory.getLog(InfluxDbAutoConfiguration.class);\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnProperty("spring.influx.url")\n\tpublic InfluxDB influxDb(InfluxDbProperties properties,\n\t\t\tObjectProvider<InfluxDbOkHttpClientBuilderProvider> builder,\n\t\t\tObjectProvider<OkHttpClient.Builder> deprecatedBuilder) {\n\t\treturn new InfluxDBImpl(properties.getUrl(), properties.getUser(),\n\t\t\t\tproperties.getPassword(), determineBuilder(builder.getIfAvailable(),\n\t\t\t\t\t\tdeprecatedBuilder.getIfAvailable()));\n\t}\n\n\t@Deprecated\n\tprivate static OkHttpClient.Builder determineBuilder(\n\t\t\tInfluxDbOkHttpClientBuilderProvider builder,\n\t\t\tOkHttpClient.Builder deprecatedBuilder) {\n\t\tif (builder != null) {\n\t\t\treturn builder.get();\n\t\t}\n\t\telse if (deprecatedBuilder != null) {\n\t\t\tlogger.warn(\n\t\t\t\t\t"InfluxDB client customizations using a OkHttpClient.Builder is deprecated, register a "\n\t\t\t\t\t\t\t+ InfluxDbOkHttpClientBuilderProvider.class.getSimpleName()\n\t\t\t\t\t\t\t+ " bean instead");\n\t\t\treturn deprecatedBuilder;\n\t\t}\n\t\treturn new OkHttpClient.Builder();\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.influx;\n\nimport okhttp3.OkHttpClient;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.influxdb.InfluxDB;\nimport org.influxdb.impl.InfluxDBImpl;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for InfluxDB.\n *\n * @author Sergey Kuptsov\n * @author Stephane Nicoll\n * @author Eddú Meléndez\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass(InfluxDB.class)\n@EnableConfigurationProperties(InfluxDbProperties.class)\npublic class InfluxDbAutoConfiguration {\n\n\tprivate static final Log logger = LogFactory.getLog(InfluxDbAutoConfiguration.class);\n\n\tprivate final InfluxDbProperties properties;\n\n\tprivate final OkHttpClient.Builder builder;\n\n\tpublic InfluxDbAutoConfiguration(InfluxDbProperties properties,\n\t\t\tObjectProvider<InfluxDbOkHttpClientBuilderProvider> builder,\n\t\t\tObjectProvider<OkHttpClient.Builder> deprecatedBuilder) {\n\t\tthis.properties = properties;\n\t\tthis.builder = determineBuilder(builder.getIfAvailable(),\n\t\t\t\tdeprecatedBuilder.getIfAvailable());\n\t}\n\n\t@Deprecated\n\tprivate static OkHttpClient.Builder determineBuilder(\n\t\t\tInfluxDbOkHttpClientBuilderProvider builder,\n\t\t\tOkHttpClient.Builder deprecatedBuilder) {\n\t\tif (builder != null) {\n\t\t\treturn builder.get();\n\t\t}\n\t\telse if (deprecatedBuilder != null) {\n\t\t\tlogger.warn(\n\t\t\t\t\t"InfluxDB client customizations using a OkHttpClient.Builder is deprecated, register a "\n\t\t\t\t\t\t\t+ InfluxDbOkHttpClientBuilderProvider.class.getSimpleName()\n\t\t\t\t\t\t\t+ " bean instead");\n\t\t\treturn deprecatedBuilder;\n\t\t}\n\t\treturn new OkHttpClient.Builder();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnProperty("spring.influx.url")\n\tpublic InfluxDB influxDb() {\n\t\treturn new InfluxDBImpl(this.properties.getUrl(), this.properties.getUser(),\n\t\t\t\tthis.properties.getPassword(), this.builder);\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
