{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -36,6 +36,9 @@ import org.springframework.boot.actuate.endpoint.web.ExposableWebEndpoint;\n import org.springframework.boot.actuate.endpoint.web.PathMappedEndpoints;\n import org.springframework.boot.actuate.endpoint.web.PathMapper;\n import org.springframework.boot.actuate.endpoint.web.WebEndpointsSupplier;\n+import org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointDiscoverer;\n+import org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointsSupplier;\n+import org.springframework.boot.actuate.endpoint.web.annotation.ExposableControllerEndpoint;\n import org.springframework.boot.actuate.endpoint.web.annotation.WebEndpointDiscoverer;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n@@ -100,6 +103,16 @@ public class WebEndpointAutoConfiguration {\n \t\t\t\tfilters.getIfAvailable(Collections::emptyList));\n \t}\n \n+\t@Bean\n+\t@ConditionalOnMissingBean(ControllerEndpointsSupplier.class)\n+\tpublic ControllerEndpointDiscoverer controllerEndpointDiscoverer(\n+\t\t\tPathMapper webEndpointPathMapper,\n+\t\t\tObjectProvider<Collection<OperationInvokerAdvisor>> invokerAdvisors,\n+\t\t\tObjectProvider<Collection<EndpointFilter<ExposableControllerEndpoint>>> filters) {\n+\t\treturn new ControllerEndpointDiscoverer(this.applicationContext,\n+\t\t\t\twebEndpointPathMapper, filters.getIfAvailable(Collections::emptyList));\n+\t}\n+\n \t@Bean\n \t@ConditionalOnMissingBean\n \tpublic PathMappedEndpoints pathMappedEndpoints(\n@@ -117,4 +130,12 @@ public class WebEndpointAutoConfiguration {\n \t\t\t\texpose, exclude, "info", "health");\n \t}\n \n+\t@Bean\n+\tpublic ExposeExcludePropertyEndpointFilter<ExposableControllerEndpoint> controllerIncludeExcludePropertyEndpointFilter() {\n+\t\tSet<String> expose = this.properties.getExpose();\n+\t\tSet<String> exclude = this.properties.getExclude();\n+\t\treturn new ExposeExcludePropertyEndpointFilter<>(\n+\t\t\t\tExposableControllerEndpoint.class, expose, exclude);\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.endpoint.web;\n\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.actuate.autoconfigure.endpoint.EndpointAutoConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.endpoint.ExposeExcludePropertyEndpointFilter;\nimport org.springframework.boot.actuate.endpoint.EndpointFilter;\nimport org.springframework.boot.actuate.endpoint.EndpointsSupplier;\nimport org.springframework.boot.actuate.endpoint.annotation.Endpoint;\nimport org.springframework.boot.actuate.endpoint.http.ActuatorMediaType;\nimport org.springframework.boot.actuate.endpoint.invoke.OperationInvokerAdvisor;\nimport org.springframework.boot.actuate.endpoint.invoke.ParameterValueMapper;\nimport org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes;\nimport org.springframework.boot.actuate.endpoint.web.ExposableWebEndpoint;\nimport org.springframework.boot.actuate.endpoint.web.PathMappedEndpoints;\nimport org.springframework.boot.actuate.endpoint.web.PathMapper;\nimport org.springframework.boot.actuate.endpoint.web.WebEndpointsSupplier;\nimport org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointDiscoverer;\nimport org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointsSupplier;\nimport org.springframework.boot.actuate.endpoint.web.annotation.ExposableControllerEndpoint;\nimport org.springframework.boot.actuate.endpoint.web.annotation.WebEndpointDiscoverer;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for web {@link Endpoint} support.\n *\n * @author Phillip Webb\n * @author Stephane Nicoll\n * @author Phillip Webb\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnWebApplication\n@AutoConfigureAfter(EndpointAutoConfiguration.class)\n@EnableConfigurationProperties(WebEndpointProperties.class)\n@ConditionalOnProperty(name = "management.endpoints.web.enabled", matchIfMissing = true)\npublic class WebEndpointAutoConfiguration {\n\n\tprivate static final List<String> MEDIA_TYPES = Arrays\n\t\t\t.asList(ActuatorMediaType.V2_JSON, "application/json");\n\n\tprivate final ApplicationContext applicationContext;\n\n\tprivate final WebEndpointProperties properties;\n\n\tpublic WebEndpointAutoConfiguration(ApplicationContext applicationContext,\n\t\t\tWebEndpointProperties properties) {\n\t\tthis.applicationContext = applicationContext;\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic PathMapper webEndpointPathMapper() {\n\t\treturn new MappingWebEndpointPathMapper(this.properties.getPathMapping());\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic EndpointMediaTypes endpointMediaTypes() {\n\t\treturn new EndpointMediaTypes(MEDIA_TYPES, MEDIA_TYPES);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(WebEndpointsSupplier.class)\n\tpublic WebEndpointDiscoverer webEndpointDiscoverer(\n\t\t\tParameterValueMapper parameterValueMapper,\n\t\t\tEndpointMediaTypes endpointMediaTypes, PathMapper webEndpointPathMapper,\n\t\t\tObjectProvider<Collection<OperationInvokerAdvisor>> invokerAdvisors,\n\t\t\tObjectProvider<Collection<EndpointFilter<ExposableWebEndpoint>>> filters) {\n\t\treturn new WebEndpointDiscoverer(this.applicationContext, parameterValueMapper,\n\t\t\t\tendpointMediaTypes, webEndpointPathMapper,\n\t\t\t\tinvokerAdvisors.getIfAvailable(Collections::emptyList),\n\t\t\t\tfilters.getIfAvailable(Collections::emptyList));\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(ControllerEndpointsSupplier.class)\n\tpublic ControllerEndpointDiscoverer controllerEndpointDiscoverer(\n\t\t\tPathMapper webEndpointPathMapper,\n\t\t\tObjectProvider<Collection<OperationInvokerAdvisor>> invokerAdvisors,\n\t\t\tObjectProvider<Collection<EndpointFilter<ExposableControllerEndpoint>>> filters) {\n\t\treturn new ControllerEndpointDiscoverer(this.applicationContext,\n\t\t\t\twebEndpointPathMapper, filters.getIfAvailable(Collections::emptyList));\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic PathMappedEndpoints pathMappedEndpoints(\n\t\t\tCollection<EndpointsSupplier<?>> endpointSuppliers,\n\t\t\tWebEndpointProperties webEndpointProperties) {\n\t\treturn new PathMappedEndpoints(webEndpointProperties.getBasePath(),\n\t\t\t\tendpointSuppliers);\n\t}\n\n\t@Bean\n\tpublic ExposeExcludePropertyEndpointFilter<ExposableWebEndpoint> webIncludeExcludePropertyEndpointFilter() {\n\t\tSet<String> expose = this.properties.getExpose();\n\t\tSet<String> exclude = this.properties.getExclude();\n\t\treturn new ExposeExcludePropertyEndpointFilter<>(ExposableWebEndpoint.class,\n\t\t\t\texpose, exclude, "info", "health");\n\t}\n\n\t@Bean\n\tpublic ExposeExcludePropertyEndpointFilter<ExposableControllerEndpoint> controllerIncludeExcludePropertyEndpointFilter() {\n\t\tSet<String> expose = this.properties.getExpose();\n\t\tSet<String> exclude = this.properties.getExclude();\n\t\treturn new ExposeExcludePropertyEndpointFilter<>(\n\t\t\t\tExposableControllerEndpoint.class, expose, exclude);\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.endpoint.web;\n\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.actuate.autoconfigure.endpoint.EndpointAutoConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.endpoint.ExposeExcludePropertyEndpointFilter;\nimport org.springframework.boot.actuate.endpoint.EndpointFilter;\nimport org.springframework.boot.actuate.endpoint.EndpointsSupplier;\nimport org.springframework.boot.actuate.endpoint.annotation.Endpoint;\nimport org.springframework.boot.actuate.endpoint.http.ActuatorMediaType;\nimport org.springframework.boot.actuate.endpoint.invoke.OperationInvokerAdvisor;\nimport org.springframework.boot.actuate.endpoint.invoke.ParameterValueMapper;\nimport org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes;\nimport org.springframework.boot.actuate.endpoint.web.ExposableWebEndpoint;\nimport org.springframework.boot.actuate.endpoint.web.PathMappedEndpoints;\nimport org.springframework.boot.actuate.endpoint.web.PathMapper;\nimport org.springframework.boot.actuate.endpoint.web.WebEndpointsSupplier;\nimport org.springframework.boot.actuate.endpoint.web.annotation.WebEndpointDiscoverer;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for web {@link Endpoint} support.\n *\n * @author Phillip Webb\n * @author Stephane Nicoll\n * @author Phillip Webb\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnWebApplication\n@AutoConfigureAfter(EndpointAutoConfiguration.class)\n@EnableConfigurationProperties(WebEndpointProperties.class)\n@ConditionalOnProperty(name = "management.endpoints.web.enabled", matchIfMissing = true)\npublic class WebEndpointAutoConfiguration {\n\n\tprivate static final List<String> MEDIA_TYPES = Arrays\n\t\t\t.asList(ActuatorMediaType.V2_JSON, "application/json");\n\n\tprivate final ApplicationContext applicationContext;\n\n\tprivate final WebEndpointProperties properties;\n\n\tpublic WebEndpointAutoConfiguration(ApplicationContext applicationContext,\n\t\t\tWebEndpointProperties properties) {\n\t\tthis.applicationContext = applicationContext;\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic PathMapper webEndpointPathMapper() {\n\t\treturn new MappingWebEndpointPathMapper(this.properties.getPathMapping());\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic EndpointMediaTypes endpointMediaTypes() {\n\t\treturn new EndpointMediaTypes(MEDIA_TYPES, MEDIA_TYPES);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(WebEndpointsSupplier.class)\n\tpublic WebEndpointDiscoverer webEndpointDiscoverer(\n\t\t\tParameterValueMapper parameterValueMapper,\n\t\t\tEndpointMediaTypes endpointMediaTypes, PathMapper webEndpointPathMapper,\n\t\t\tObjectProvider<Collection<OperationInvokerAdvisor>> invokerAdvisors,\n\t\t\tObjectProvider<Collection<EndpointFilter<ExposableWebEndpoint>>> filters) {\n\t\treturn new WebEndpointDiscoverer(this.applicationContext, parameterValueMapper,\n\t\t\t\tendpointMediaTypes, webEndpointPathMapper,\n\t\t\t\tinvokerAdvisors.getIfAvailable(Collections::emptyList),\n\t\t\t\tfilters.getIfAvailable(Collections::emptyList));\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic PathMappedEndpoints pathMappedEndpoints(\n\t\t\tCollection<EndpointsSupplier<?>> endpointSuppliers,\n\t\t\tWebEndpointProperties webEndpointProperties) {\n\t\treturn new PathMappedEndpoints(webEndpointProperties.getBasePath(),\n\t\t\t\tendpointSuppliers);\n\t}\n\n\t@Bean\n\tpublic ExposeExcludePropertyEndpointFilter<ExposableWebEndpoint> webIncludeExcludePropertyEndpointFilter() {\n\t\tSet<String> expose = this.properties.getExpose();\n\t\tSet<String> exclude = this.properties.getExclude();\n\t\treturn new ExposeExcludePropertyEndpointFilter<>(ExposableWebEndpoint.class,\n\t\t\t\texpose, exclude, "info", "health");\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
