{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/simple/SimpleMetricsExportAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/simple/SimpleMetricsExportAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -28,6 +28,7 @@ import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n@@ -46,6 +47,7 @@ import org.springframework.context.annotation.Configuration;\n @ConditionalOnBean(Clock.class)\n @EnableConfigurationProperties(SimpleProperties.class)\n @ConditionalOnMissingBean(MeterRegistry.class)\n+@ConditionalOnProperty(prefix = "management.metrics.export.simple", name = "enabled", havingValue = "true", matchIfMissing = true)\n public class SimpleMetricsExportAutoConfiguration {\n \n \t@Bean\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics.export.simple;\n\nimport io.micrometer.core.instrument.Clock;\nimport io.micrometer.core.instrument.MeterRegistry;\nimport io.micrometer.core.instrument.simple.SimpleConfig;\nimport io.micrometer.core.instrument.simple.SimpleMeterRegistry;\n\nimport org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.MetricsEndpointAutoConfiguration;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for exporting metrics to a\n * {@link SimpleMeterRegistry}. Auto-configured after all other {@link MeterRegistry}\n * beans and only used as a fallback.\n *\n * @author Jon Schneider\n * @since 2.0.0\n */\n@Configuration\n@AutoConfigureAfter(MetricsAutoConfiguration.class)\n@AutoConfigureBefore(MetricsEndpointAutoConfiguration.class)\n@ConditionalOnBean(Clock.class)\n@EnableConfigurationProperties(SimpleProperties.class)\n@ConditionalOnMissingBean(MeterRegistry.class)\n@ConditionalOnProperty(prefix = "management.metrics.export.simple", name = "enabled", havingValue = "true", matchIfMissing = true)\npublic class SimpleMetricsExportAutoConfiguration {\n\n\t@Bean\n\tpublic SimpleMeterRegistry simpleMeterRegistry(SimpleConfig config, Clock clock) {\n\t\treturn new SimpleMeterRegistry(config, clock);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(SimpleConfig.class)\n\tpublic SimpleConfig simpleConfig(SimpleProperties simpleProperties) {\n\t\treturn new SimplePropertiesConfigAdapter(simpleProperties);\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics.export.simple;\n\nimport io.micrometer.core.instrument.Clock;\nimport io.micrometer.core.instrument.MeterRegistry;\nimport io.micrometer.core.instrument.simple.SimpleConfig;\nimport io.micrometer.core.instrument.simple.SimpleMeterRegistry;\n\nimport org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.MetricsEndpointAutoConfiguration;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for exporting metrics to a\n * {@link SimpleMeterRegistry}. Auto-configured after all other {@link MeterRegistry}\n * beans and only used as a fallback.\n *\n * @author Jon Schneider\n * @since 2.0.0\n */\n@Configuration\n@AutoConfigureAfter(MetricsAutoConfiguration.class)\n@AutoConfigureBefore(MetricsEndpointAutoConfiguration.class)\n@ConditionalOnBean(Clock.class)\n@EnableConfigurationProperties(SimpleProperties.class)\n@ConditionalOnMissingBean(MeterRegistry.class)\npublic class SimpleMetricsExportAutoConfiguration {\n\n\t@Bean\n\tpublic SimpleMeterRegistry simpleMeterRegistry(SimpleConfig config, Clock clock) {\n\t\treturn new SimpleMeterRegistry(config, clock);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(SimpleConfig.class)\n\tpublic SimpleConfig simpleConfig(SimpleProperties simpleProperties) {\n\t\treturn new SimplePropertiesConfigAdapter(simpleProperties);\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
