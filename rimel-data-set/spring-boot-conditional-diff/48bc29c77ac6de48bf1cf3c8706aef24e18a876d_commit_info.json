{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2016 the original author or authors.\n+ * Copyright 2012-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -17,25 +17,35 @@\n package org.springframework.boot.autoconfigure.integration;\n \n import javax.management.MBeanServer;\n+import javax.sql.DataSource;\n \n import org.springframework.beans.BeansException;\n import org.springframework.beans.factory.BeanFactory;\n import org.springframework.beans.factory.BeanFactoryAware;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\n import org.springframework.boot.autoconfigure.condition.SearchStrategy;\n import org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration;\n import org.springframework.boot.bind.RelaxedPropertyResolver;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.EnvironmentAware;\n import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Import;\n import org.springframework.core.env.Environment;\n+import org.springframework.core.io.ResourceLoader;\n import org.springframework.integration.config.EnableIntegration;\n import org.springframework.integration.config.EnableIntegrationManagement;\n import org.springframework.integration.gateway.GatewayProxyFactoryBean;\n+import org.springframework.integration.jdbc.lock.DefaultLockRepository;\n+import org.springframework.integration.jdbc.store.JdbcChannelMessageStore;\n+import org.springframework.integration.jdbc.store.JdbcMessageStore;\n import org.springframework.integration.jmx.config.EnableIntegrationMBeanExport;\n import org.springframework.integration.monitor.IntegrationMBeanExporter;\n import org.springframework.integration.support.management.IntegrationManagementConfigurer;\n@@ -48,10 +58,12 @@ import org.springframework.util.StringUtils;\n  * @author Artem Bilan\n  * @author Dave Syer\n  * @author Stephane Nicoll\n+ * @author Vedran Pavic\n  * @since 1.1.0\n  */\n @Configuration\n @ConditionalOnClass(EnableIntegration.class)\n+@EnableConfigurationProperties(IntegrationProperties.class)\n @AutoConfigureAfter(JmxAutoConfiguration.class)\n public class IntegrationAutoConfiguration {\n \n@@ -131,4 +143,47 @@ public class IntegrationAutoConfiguration {\n \n \t}\n \n+\t/**\n+\t * Integration JDBC configuration.\n+\t */\n+\t@Configuration\n+\t@ConditionalOnClass(JdbcMessageStore.class)\n+\t@ConditionalOnSingleCandidate(DataSource.class)\n+\tprotected static class IntegrationJdbcConfiguration {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean\n+\t\t@Conditional(IntegrationSchemaCondition.class)\n+\t\tpublic IntegrationDatabaseInitializer integrationDatabaseInitializer(\n+\t\t\tDataSource dataSource, ResourceLoader resourceLoader,\n+\t\t\tIntegrationProperties properties) {\n+\t\t\treturn new IntegrationDatabaseInitializer(dataSource, resourceLoader,\n+\t\t\t\tproperties);\n+\t\t}\n+\n+\t}\n+\n+\tstatic class IntegrationSchemaCondition extends AnyNestedCondition {\n+\n+\t\tIntegrationSchemaCondition() {\n+\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n+\t\t}\n+\n+\t\t@ConditionalOnBean(JdbcMessageStore.class)\n+\t\tstatic class JdbcMessageStoreUsed {\n+\n+\t\t}\n+\n+\t\t@ConditionalOnBean(JdbcChannelMessageStore.class)\n+\t\tstatic class JdbcChannelMessageStoreUsed {\n+\n+\t\t}\n+\n+\t\t@ConditionalOnBean(DefaultLockRepository.class)\n+\t\tstatic class DefaultLockRepositoryUsed {\n+\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.integration;\n\nimport javax.management.MBeanServer;\nimport javax.sql.DataSource;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration;\nimport org.springframework.boot.bind.RelaxedPropertyResolver;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.EnvironmentAware;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.core.env.Environment;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.integration.config.EnableIntegration;\nimport org.springframework.integration.config.EnableIntegrationManagement;\nimport org.springframework.integration.gateway.GatewayProxyFactoryBean;\nimport org.springframework.integration.jdbc.lock.DefaultLockRepository;\nimport org.springframework.integration.jdbc.store.JdbcChannelMessageStore;\nimport org.springframework.integration.jdbc.store.JdbcMessageStore;\nimport org.springframework.integration.jmx.config.EnableIntegrationMBeanExport;\nimport org.springframework.integration.monitor.IntegrationMBeanExporter;\nimport org.springframework.integration.support.management.IntegrationManagementConfigurer;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link org.springframework.boot.autoconfigure.EnableAutoConfiguration\n * Auto-configuration} for Spring Integration.\n *\n * @author Artem Bilan\n * @author Dave Syer\n * @author Stephane Nicoll\n * @author Vedran Pavic\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass(EnableIntegration.class)\n@EnableConfigurationProperties(IntegrationProperties.class)\n@AutoConfigureAfter(JmxAutoConfiguration.class)\npublic class IntegrationAutoConfiguration {\n\n\t/**\n\t * Basic Spring Integration configuration.\n\t */\n\t@Configuration\n\t@EnableIntegration\n\tprotected static class IntegrationConfiguration {\n\n\t}\n\n\t/**\n\t * Spring Integration JMX configuration.\n\t */\n\t@Configuration\n\t@ConditionalOnClass(EnableIntegrationMBeanExport.class)\n\t@ConditionalOnMissingBean(value = IntegrationMBeanExporter.class, search = SearchStrategy.CURRENT)\n\t@ConditionalOnProperty(prefix = "spring.jmx", name = "enabled", havingValue = "true", matchIfMissing = true)\n\tprotected static class IntegrationJmxConfiguration\n\t\t\timplements EnvironmentAware, BeanFactoryAware {\n\n\t\tprivate BeanFactory beanFactory;\n\n\t\tprivate RelaxedPropertyResolver propertyResolver;\n\n\t\t@Override\n\t\tpublic void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n\t\t\tthis.beanFactory = beanFactory;\n\t\t}\n\n\t\t@Override\n\t\tpublic void setEnvironment(Environment environment) {\n\t\t\tthis.propertyResolver = new RelaxedPropertyResolver(environment,\n\t\t\t\t\t"spring.jmx.");\n\t\t}\n\n\t\t@Bean\n\t\tpublic IntegrationMBeanExporter integrationMbeanExporter() {\n\t\t\tIntegrationMBeanExporter exporter = new IntegrationMBeanExporter();\n\t\t\tString defaultDomain = this.propertyResolver.getProperty("default-domain");\n\t\t\tif (StringUtils.hasLength(defaultDomain)) {\n\t\t\t\texporter.setDefaultDomain(defaultDomain);\n\t\t\t}\n\t\t\tString server = this.propertyResolver.getProperty("server", "mbeanServer");\n\t\t\tif (StringUtils.hasLength(server)) {\n\t\t\t\texporter.setServer(this.beanFactory.getBean(server, MBeanServer.class));\n\t\t\t}\n\t\t\treturn exporter;\n\t\t}\n\n\t}\n\n\t/**\n\t * Integration management configuration.\n\t */\n\t@Configuration\n\t@ConditionalOnClass({ EnableIntegrationManagement.class,\n\t\t\tEnableIntegrationMBeanExport.class })\n\t@ConditionalOnMissingBean(value = IntegrationManagementConfigurer.class, name = IntegrationManagementConfigurer.MANAGEMENT_CONFIGURER_NAME, search = SearchStrategy.CURRENT)\n\t@ConditionalOnProperty(prefix = "spring.jmx", name = "enabled", havingValue = "true", matchIfMissing = true)\n\tprotected static class IntegrationManagementConfiguration {\n\n\t\t@Configuration\n\t\t@EnableIntegrationManagement(defaultCountsEnabled = "true", defaultStatsEnabled = "true")\n\t\tprotected static class EnableIntegrationManagementConfiguration {\n\t\t}\n\n\t}\n\n\t/**\n\t * Integration component scan configuration.\n\t */\n\t@ConditionalOnMissingBean(GatewayProxyFactoryBean.class)\n\t@Import(IntegrationAutoConfigurationScanRegistrar.class)\n\tprotected static class IntegrationComponentScanAutoConfiguration {\n\n\t}\n\n\t/**\n\t * Integration JDBC configuration.\n\t */\n\t@Configuration\n\t@ConditionalOnClass(JdbcMessageStore.class)\n\t@ConditionalOnSingleCandidate(DataSource.class)\n\tprotected static class IntegrationJdbcConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@Conditional(IntegrationSchemaCondition.class)\n\t\tpublic IntegrationDatabaseInitializer integrationDatabaseInitializer(\n\t\t\tDataSource dataSource, ResourceLoader resourceLoader,\n\t\t\tIntegrationProperties properties) {\n\t\t\treturn new IntegrationDatabaseInitializer(dataSource, resourceLoader,\n\t\t\t\tproperties);\n\t\t}\n\n\t}\n\n\tstatic class IntegrationSchemaCondition extends AnyNestedCondition {\n\n\t\tIntegrationSchemaCondition() {\n\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n\t\t}\n\n\t\t@ConditionalOnBean(JdbcMessageStore.class)\n\t\tstatic class JdbcMessageStoreUsed {\n\n\t\t}\n\n\t\t@ConditionalOnBean(JdbcChannelMessageStore.class)\n\t\tstatic class JdbcChannelMessageStoreUsed {\n\n\t\t}\n\n\t\t@ConditionalOnBean(DefaultLockRepository.class)\n\t\tstatic class DefaultLockRepositoryUsed {\n\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.integration;\n\nimport javax.management.MBeanServer;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration;\nimport org.springframework.boot.bind.RelaxedPropertyResolver;\nimport org.springframework.context.EnvironmentAware;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.core.env.Environment;\nimport org.springframework.integration.config.EnableIntegration;\nimport org.springframework.integration.config.EnableIntegrationManagement;\nimport org.springframework.integration.gateway.GatewayProxyFactoryBean;\nimport org.springframework.integration.jmx.config.EnableIntegrationMBeanExport;\nimport org.springframework.integration.monitor.IntegrationMBeanExporter;\nimport org.springframework.integration.support.management.IntegrationManagementConfigurer;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link org.springframework.boot.autoconfigure.EnableAutoConfiguration\n * Auto-configuration} for Spring Integration.\n *\n * @author Artem Bilan\n * @author Dave Syer\n * @author Stephane Nicoll\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass(EnableIntegration.class)\n@AutoConfigureAfter(JmxAutoConfiguration.class)\npublic class IntegrationAutoConfiguration {\n\n\t/**\n\t * Basic Spring Integration configuration.\n\t */\n\t@Configuration\n\t@EnableIntegration\n\tprotected static class IntegrationConfiguration {\n\n\t}\n\n\t/**\n\t * Spring Integration JMX configuration.\n\t */\n\t@Configuration\n\t@ConditionalOnClass(EnableIntegrationMBeanExport.class)\n\t@ConditionalOnMissingBean(value = IntegrationMBeanExporter.class, search = SearchStrategy.CURRENT)\n\t@ConditionalOnProperty(prefix = "spring.jmx", name = "enabled", havingValue = "true", matchIfMissing = true)\n\tprotected static class IntegrationJmxConfiguration\n\t\t\timplements EnvironmentAware, BeanFactoryAware {\n\n\t\tprivate BeanFactory beanFactory;\n\n\t\tprivate RelaxedPropertyResolver propertyResolver;\n\n\t\t@Override\n\t\tpublic void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n\t\t\tthis.beanFactory = beanFactory;\n\t\t}\n\n\t\t@Override\n\t\tpublic void setEnvironment(Environment environment) {\n\t\t\tthis.propertyResolver = new RelaxedPropertyResolver(environment,\n\t\t\t\t\t"spring.jmx.");\n\t\t}\n\n\t\t@Bean\n\t\tpublic IntegrationMBeanExporter integrationMbeanExporter() {\n\t\t\tIntegrationMBeanExporter exporter = new IntegrationMBeanExporter();\n\t\t\tString defaultDomain = this.propertyResolver.getProperty("default-domain");\n\t\t\tif (StringUtils.hasLength(defaultDomain)) {\n\t\t\t\texporter.setDefaultDomain(defaultDomain);\n\t\t\t}\n\t\t\tString server = this.propertyResolver.getProperty("server", "mbeanServer");\n\t\t\tif (StringUtils.hasLength(server)) {\n\t\t\t\texporter.setServer(this.beanFactory.getBean(server, MBeanServer.class));\n\t\t\t}\n\t\t\treturn exporter;\n\t\t}\n\n\t}\n\n\t/**\n\t * Integration management configuration.\n\t */\n\t@Configuration\n\t@ConditionalOnClass({ EnableIntegrationManagement.class,\n\t\t\tEnableIntegrationMBeanExport.class })\n\t@ConditionalOnMissingBean(value = IntegrationManagementConfigurer.class, name = IntegrationManagementConfigurer.MANAGEMENT_CONFIGURER_NAME, search = SearchStrategy.CURRENT)\n\t@ConditionalOnProperty(prefix = "spring.jmx", name = "enabled", havingValue = "true", matchIfMissing = true)\n\tprotected static class IntegrationManagementConfiguration {\n\n\t\t@Configuration\n\t\t@EnableIntegrationManagement(defaultCountsEnabled = "true", defaultStatsEnabled = "true")\n\t\tprotected static class EnableIntegrationManagementConfiguration {\n\t\t}\n\n\t}\n\n\t/**\n\t * Integration component scan configuration.\n\t */\n\t@ConditionalOnMissingBean(GatewayProxyFactoryBean.class)\n\t@Import(IntegrationAutoConfigurationScanRegistrar.class)\n\tprotected static class IntegrationComponentScanAutoConfiguration {\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
