{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2ClientRegistrationRepositoryConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/servlet/OAuth2ClientRegistrationRepositoryConfiguration.java'), 'change_type': <ModificationType.RENAME: 3>, 'diff': '@@ -14,28 +14,19 @@\n  * limitations under the License.\n  */\n \n-package org.springframework.boot.autoconfigure.security.oauth2.client;\n+package org.springframework.boot.autoconfigure.security.oauth2.client.servlet;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n \n-import org.springframework.boot.autoconfigure.condition.ConditionMessage;\n-import org.springframework.boot.autoconfigure.condition.ConditionOutcome;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.boot.autoconfigure.condition.SpringBootCondition;\n-import org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties.Registration;\n+import org.springframework.boot.autoconfigure.security.oauth2.client.ClientsConfiguredCondition;\n+import org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties;\n+import org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n-import org.springframework.boot.context.properties.bind.Bindable;\n-import org.springframework.boot.context.properties.bind.Binder;\n import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.ConditionContext;\n import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.core.env.Environment;\n-import org.springframework.core.type.AnnotatedTypeMetadata;\n import org.springframework.security.oauth2.client.registration.ClientRegistration;\n import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;\n@@ -45,11 +36,10 @@ import org.springframework.security.oauth2.client.registration.InMemoryClientReg\n  * registrations.\n  *\n  * @author Madhura Bhave\n- * @author Phillip Webb\n  */\n @Configuration\n @EnableConfigurationProperties(OAuth2ClientProperties.class)\n-@Conditional(OAuth2ClientRegistrationRepositoryConfiguration.ClientsConfiguredCondition.class)\n+@Conditional(ClientsConfiguredCondition.class)\n class OAuth2ClientRegistrationRepositoryConfiguration {\n \n \tprivate final OAuth2ClientProperties properties;\n@@ -67,38 +57,4 @@ class OAuth2ClientRegistrationRepositoryConfiguration {\n \t\treturn new InMemoryClientRegistrationRepository(registrations);\n \t}\n \n-\t/**\n-\t * Condition that matches if any {@code spring.security.oauth2.client.registration}\n-\t * properties are defined.\n-\t */\n-\tstatic class ClientsConfiguredCondition extends SpringBootCondition {\n-\n-\t\tprivate static final Bindable<Map<String, Registration>> BINDABLE_REGISTRATION = Bindable\n-\t\t\t\t.mapOf(String.class, OAuth2ClientProperties.Registration.class);\n-\n-\t\t@Override\n-\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n-\t\t\t\tAnnotatedTypeMetadata metadata) {\n-\t\t\tConditionMessage.Builder message = ConditionMessage\n-\t\t\t\t\t.forCondition("OAuth2 Clients Configured Condition");\n-\t\t\tMap<String, Registration> registrations = this\n-\t\t\t\t\t.getRegistrations(context.getEnvironment());\n-\t\t\tif (!registrations.isEmpty()) {\n-\t\t\t\treturn ConditionOutcome.match(message.foundExactly(\n-\t\t\t\t\t\t"registered clients " + registrations.values().stream()\n-\t\t\t\t\t\t\t\t.map(OAuth2ClientProperties.Registration::getClientId)\n-\t\t\t\t\t\t\t\t.collect(Collectors.joining(", "))));\n-\t\t\t}\n-\t\t\treturn ConditionOutcome.noMatch(message.notAvailable("registered clients"));\n-\t\t}\n-\n-\t\tprivate Map<String, Registration> getRegistrations(Environment environment) {\n-\t\t\treturn Binder.get(environment)\n-\t\t\t\t\t.bind("spring.security.oauth2.client.registration",\n-\t\t\t\t\t\t\tBINDABLE_REGISTRATION)\n-\t\t\t\t\t.orElse(Collections.emptyMap());\n-\t\t}\n-\n-\t}\n-\n }\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security.oauth2.client.servlet;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.security.oauth2.client.ClientsConfiguredCondition;\nimport org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties;\nimport org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.oauth2.client.registration.ClientRegistration;\nimport org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\nimport org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;\n\n/**\n * {@link Configuration} used to map {@link OAuth2ClientProperties} to client\n * registrations.\n *\n * @author Madhura Bhave\n */\n@Configuration\n@EnableConfigurationProperties(OAuth2ClientProperties.class)\n@Conditional(ClientsConfiguredCondition.class)\nclass OAuth2ClientRegistrationRepositoryConfiguration {\n\n\tprivate final OAuth2ClientProperties properties;\n\n\tOAuth2ClientRegistrationRepositoryConfiguration(OAuth2ClientProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(ClientRegistrationRepository.class)\n\tpublic InMemoryClientRegistrationRepository clientRegistrationRepository() {\n\t\tList<ClientRegistration> registrations = new ArrayList<>(\n\t\t\t\tOAuth2ClientPropertiesRegistrationAdapter\n\t\t\t\t\t\t.getClientRegistrations(this.properties).values());\n\t\treturn new InMemoryClientRegistrationRepository(registrations);\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security.oauth2.client;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionMessage;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties.Registration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.context.properties.bind.Bindable;\nimport org.springframework.boot.context.properties.bind.Binder;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.security.oauth2.client.registration.ClientRegistration;\nimport org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\nimport org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;\n\n/**\n * {@link Configuration} used to map {@link OAuth2ClientProperties} to client\n * registrations.\n *\n * @author Madhura Bhave\n * @author Phillip Webb\n */\n@Configuration\n@EnableConfigurationProperties(OAuth2ClientProperties.class)\n@Conditional(OAuth2ClientRegistrationRepositoryConfiguration.ClientsConfiguredCondition.class)\nclass OAuth2ClientRegistrationRepositoryConfiguration {\n\n\tprivate final OAuth2ClientProperties properties;\n\n\tOAuth2ClientRegistrationRepositoryConfiguration(OAuth2ClientProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(ClientRegistrationRepository.class)\n\tpublic InMemoryClientRegistrationRepository clientRegistrationRepository() {\n\t\tList<ClientRegistration> registrations = new ArrayList<>(\n\t\t\t\tOAuth2ClientPropertiesRegistrationAdapter\n\t\t\t\t\t\t.getClientRegistrations(this.properties).values());\n\t\treturn new InMemoryClientRegistrationRepository(registrations);\n\t}\n\n\t/**\n\t * Condition that matches if any {@code spring.security.oauth2.client.registration}\n\t * properties are defined.\n\t */\n\tstatic class ClientsConfiguredCondition extends SpringBootCondition {\n\n\t\tprivate static final Bindable<Map<String, Registration>> BINDABLE_REGISTRATION = Bindable\n\t\t\t\t.mapOf(String.class, OAuth2ClientProperties.Registration.class);\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tConditionMessage.Builder message = ConditionMessage\n\t\t\t\t\t.forCondition("OAuth2 Clients Configured Condition");\n\t\t\tMap<String, Registration> registrations = this\n\t\t\t\t\t.getRegistrations(context.getEnvironment());\n\t\t\tif (!registrations.isEmpty()) {\n\t\t\t\treturn ConditionOutcome.match(message.foundExactly(\n\t\t\t\t\t\t"registered clients " + registrations.values().stream()\n\t\t\t\t\t\t\t\t.map(OAuth2ClientProperties.Registration::getClientId)\n\t\t\t\t\t\t\t\t.collect(Collectors.joining(", "))));\n\t\t\t}\n\t\t\treturn ConditionOutcome.noMatch(message.notAvailable("registered clients"));\n\t\t}\n\n\t\tprivate Map<String, Registration> getRegistrations(Environment environment) {\n\t\t\treturn Binder.get(environment)\n\t\t\t\t\t.bind("spring.security.oauth2.client.registration",\n\t\t\t\t\t\t\tBINDABLE_REGISTRATION)\n\t\t\t\t\t.orElse(Collections.emptyMap());\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
