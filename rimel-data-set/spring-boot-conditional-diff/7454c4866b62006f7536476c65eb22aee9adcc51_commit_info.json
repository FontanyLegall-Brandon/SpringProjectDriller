{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -30,11 +30,10 @@ import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n-import org.springframework.boot.bind.RelaxedPropertyResolver;\n-import org.springframework.context.EnvironmentAware;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.core.env.Environment;\n+import org.springframework.context.annotation.Primary;\n import org.springframework.orm.jpa.JpaTransactionManager;\n import org.springframework.orm.jpa.JpaVendorAdapter;\n import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n@@ -42,7 +41,6 @@ import org.springframework.orm.jpa.persistenceunit.PersistenceUnitManager;\n import org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter;\n import org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor;\n import org.springframework.orm.jpa.vendor.AbstractJpaVendorAdapter;\n-import org.springframework.orm.jpa.vendor.Database;\n import org.springframework.transaction.PlatformTransactionManager;\n import org.springframework.web.servlet.config.annotation.InterceptorRegistry;\n import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\n@@ -54,19 +52,19 @@ import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter\n  * @author Dave Syer\n  * @author Oliver Gierke\n  */\n-public abstract class JpaBaseConfiguration implements BeanFactoryAware, EnvironmentAware {\n+@EnableConfigurationProperties(JpaProperties.class)\n+public abstract class JpaBaseConfiguration implements BeanFactoryAware {\n \n \tprivate ConfigurableListableBeanFactory beanFactory;\n \n-\tprivate RelaxedPropertyResolver environment;\n+\t@Autowired\n+\tprivate DataSource dataSource;\n \n \t@Autowired(required = false)\n \tprivate PersistenceUnitManager persistenceUnitManager;\n \n-\t@Override\n-\tpublic void setEnvironment(Environment environment) {\n-\t\tthis.environment = new RelaxedPropertyResolver(environment, "spring.jpa.");\n-\t}\n+\t@Autowired\n+\tprivate JpaProperties jpaProperties;\n \n \t@Bean\n \t@ConditionalOnMissingBean(PlatformTransactionManager.class)\n@@ -75,47 +73,35 @@ public abstract class JpaBaseConfiguration implements BeanFactoryAware, Environm\n \t}\n \n \t@Bean\n-\t@ConditionalOnMissingBean(name = "entityManagerFactory")\n-\tpublic LocalContainerEntityManagerFactoryBean entityManagerFactory(\n-\t\t\tJpaVendorAdapter jpaVendorAdapter) {\n-\t\tLocalContainerEntityManagerFactoryBean entityManagerFactoryBean = new LocalContainerEntityManagerFactoryBean();\n-\t\tif (this.persistenceUnitManager != null) {\n-\t\t\tentityManagerFactoryBean\n-\t\t\t\t\t.setPersistenceUnitManager(this.persistenceUnitManager);\n-\t\t}\n-\t\tentityManagerFactoryBean.setJpaVendorAdapter(jpaVendorAdapter);\n-\t\tentityManagerFactoryBean.setDataSource(getDataSource());\n-\t\tentityManagerFactoryBean.setPackagesToScan(getPackagesToScan());\n-\t\tentityManagerFactoryBean.getJpaPropertyMap().putAll(\n-\t\t\t\tthis.environment.getSubProperties("properties."));\n-\t\tconfigure(entityManagerFactoryBean);\n-\t\treturn entityManagerFactoryBean;\n-\t}\n-\n-\t@Bean\n-\t@ConditionalOnMissingBean(JpaVendorAdapter.class)\n+\t@ConditionalOnMissingBean\n \tpublic JpaVendorAdapter jpaVendorAdapter() {\n \t\tAbstractJpaVendorAdapter adapter = createJpaVendorAdapter();\n-\t\tadapter.setShowSql(this.environment.getProperty("show-sql", Boolean.class, true));\n-\t\tadapter.setDatabasePlatform(this.environment.getProperty("database-platform"));\n-\t\tadapter.setDatabase(this.environment.getProperty("database", Database.class,\n-\t\t\t\tDatabase.DEFAULT));\n-\t\tadapter.setGenerateDdl(this.environment.getProperty("generate-ddl",\n-\t\t\t\tBoolean.class, false));\n+\t\tadapter.setShowSql(this.jpaProperties.isShowSql());\n+\t\tadapter.setDatabase(this.jpaProperties.getDatabase());\n+\t\tadapter.setDatabasePlatform(this.jpaProperties.getDatabasePlatform());\n+\t\tadapter.setGenerateDdl(this.jpaProperties.isGenerateDdl());\n \t\treturn adapter;\n \t}\n \n-\tprotected abstract AbstractJpaVendorAdapter createJpaVendorAdapter();\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic EntityManagerFactoryBuilder entityManagerFactoryBuilder(\n+\t\t\tJpaVendorAdapter jpaVendorAdapter) {\n+\t\tEntityManagerFactoryBuilder builder = new EntityManagerFactoryBuilder(\n+\t\t\t\tjpaVendorAdapter, this.jpaProperties, this.persistenceUnitManager);\n+\t\treturn builder;\n+\t}\n \n-\tprotected DataSource getDataSource() {\n-\t\ttry {\n-\t\t\treturn this.beanFactory.getBean("dataSource", DataSource.class);\n-\t\t}\n-\t\tcatch (RuntimeException ex) {\n-\t\t\treturn this.beanFactory.getBean(DataSource.class);\n-\t\t}\n+\t@Bean\n+\t@Primary\n+\t@ConditionalOnMissingBean\n+\tpublic LocalContainerEntityManagerFactoryBean entityManagerFactory(\n+\t\t\tEntityManagerFactoryBuilder factory) {\n+\t\treturn factory.dataSource(this.dataSource).packages(getPackagesToScan()).build();\n \t}\n \n+\tprotected abstract AbstractJpaVendorAdapter createJpaVendorAdapter();\n+\n \tprotected String[] getPackagesToScan() {\n \t\tList<String> basePackages = AutoConfigurationPackages.get(this.beanFactory);\n \t\treturn basePackages.toArray(new String[basePackages.size()]);\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.orm.jpa;\n\nimport java.util.List;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.boot.autoconfigure.AutoConfigurationPackages;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.orm.jpa.JpaTransactionManager;\nimport org.springframework.orm.jpa.JpaVendorAdapter;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.orm.jpa.persistenceunit.PersistenceUnitManager;\nimport org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter;\nimport org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor;\nimport org.springframework.orm.jpa.vendor.AbstractJpaVendorAdapter;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\n\n/**\n * Base {@link EnableAutoConfiguration Auto-configuration} for JPA.\n * \n * @author Phillip Webb\n * @author Dave Syer\n * @author Oliver Gierke\n */\n@EnableConfigurationProperties(JpaProperties.class)\npublic abstract class JpaBaseConfiguration implements BeanFactoryAware {\n\n\tprivate ConfigurableListableBeanFactory beanFactory;\n\n\t@Autowired\n\tprivate DataSource dataSource;\n\n\t@Autowired(required = false)\n\tprivate PersistenceUnitManager persistenceUnitManager;\n\n\t@Autowired\n\tprivate JpaProperties jpaProperties;\n\n\t@Bean\n\t@ConditionalOnMissingBean(PlatformTransactionManager.class)\n\tpublic PlatformTransactionManager transactionManager() {\n\t\treturn new JpaTransactionManager();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic JpaVendorAdapter jpaVendorAdapter() {\n\t\tAbstractJpaVendorAdapter adapter = createJpaVendorAdapter();\n\t\tadapter.setShowSql(this.jpaProperties.isShowSql());\n\t\tadapter.setDatabase(this.jpaProperties.getDatabase());\n\t\tadapter.setDatabasePlatform(this.jpaProperties.getDatabasePlatform());\n\t\tadapter.setGenerateDdl(this.jpaProperties.isGenerateDdl());\n\t\treturn adapter;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic EntityManagerFactoryBuilder entityManagerFactoryBuilder(\n\t\t\tJpaVendorAdapter jpaVendorAdapter) {\n\t\tEntityManagerFactoryBuilder builder = new EntityManagerFactoryBuilder(\n\t\t\t\tjpaVendorAdapter, this.jpaProperties, this.persistenceUnitManager);\n\t\treturn builder;\n\t}\n\n\t@Bean\n\t@Primary\n\t@ConditionalOnMissingBean\n\tpublic LocalContainerEntityManagerFactoryBean entityManagerFactory(\n\t\t\tEntityManagerFactoryBuilder factory) {\n\t\treturn factory.dataSource(this.dataSource).packages(getPackagesToScan()).build();\n\t}\n\n\tprotected abstract AbstractJpaVendorAdapter createJpaVendorAdapter();\n\n\tprotected String[] getPackagesToScan() {\n\t\tList<String> basePackages = AutoConfigurationPackages.get(this.beanFactory);\n\t\treturn basePackages.toArray(new String[basePackages.size()]);\n\t}\n\n\tprotected void configure(\n\t\t\tLocalContainerEntityManagerFactoryBean entityManagerFactoryBean) {\n\t}\n\n\t@Override\n\tpublic void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n\t\tthis.beanFactory = (ConfigurableListableBeanFactory) beanFactory;\n\t}\n\n\t@Configuration\n\t@ConditionalOnWebApplication\n\t@ConditionalOnMissingBean({ OpenEntityManagerInViewInterceptor.class,\n\t\t\tOpenEntityManagerInViewFilter.class })\n\t@ConditionalOnExpression("${spring.jpa.openInView:${spring.jpa.open_in_view:true}}")\n\tprotected static class JpaWebConfiguration extends WebMvcConfigurerAdapter {\n\n\t\t@Override\n\t\tpublic void addInterceptors(InterceptorRegistry registry) {\n\t\t\tregistry.addWebRequestInterceptor(openEntityManagerInViewInterceptor());\n\t\t}\n\n\t\t@Bean\n\t\tpublic OpenEntityManagerInViewInterceptor openEntityManagerInViewInterceptor() {\n\t\t\treturn new OpenEntityManagerInViewInterceptor();\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.orm.jpa;\n\nimport java.util.List;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.boot.autoconfigure.AutoConfigurationPackages;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.bind.RelaxedPropertyResolver;\nimport org.springframework.context.EnvironmentAware;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\nimport org.springframework.orm.jpa.JpaTransactionManager;\nimport org.springframework.orm.jpa.JpaVendorAdapter;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.orm.jpa.persistenceunit.PersistenceUnitManager;\nimport org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter;\nimport org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor;\nimport org.springframework.orm.jpa.vendor.AbstractJpaVendorAdapter;\nimport org.springframework.orm.jpa.vendor.Database;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\n\n/**\n * Base {@link EnableAutoConfiguration Auto-configuration} for JPA.\n * \n * @author Phillip Webb\n * @author Dave Syer\n * @author Oliver Gierke\n */\npublic abstract class JpaBaseConfiguration implements BeanFactoryAware, EnvironmentAware {\n\n\tprivate ConfigurableListableBeanFactory beanFactory;\n\n\tprivate RelaxedPropertyResolver environment;\n\n\t@Autowired(required = false)\n\tprivate PersistenceUnitManager persistenceUnitManager;\n\n\t@Override\n\tpublic void setEnvironment(Environment environment) {\n\t\tthis.environment = new RelaxedPropertyResolver(environment, "spring.jpa.");\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(PlatformTransactionManager.class)\n\tpublic PlatformTransactionManager transactionManager() {\n\t\treturn new JpaTransactionManager();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "entityManagerFactory")\n\tpublic LocalContainerEntityManagerFactoryBean entityManagerFactory(\n\t\t\tJpaVendorAdapter jpaVendorAdapter) {\n\t\tLocalContainerEntityManagerFactoryBean entityManagerFactoryBean = new LocalContainerEntityManagerFactoryBean();\n\t\tif (this.persistenceUnitManager != null) {\n\t\t\tentityManagerFactoryBean\n\t\t\t\t\t.setPersistenceUnitManager(this.persistenceUnitManager);\n\t\t}\n\t\tentityManagerFactoryBean.setJpaVendorAdapter(jpaVendorAdapter);\n\t\tentityManagerFactoryBean.setDataSource(getDataSource());\n\t\tentityManagerFactoryBean.setPackagesToScan(getPackagesToScan());\n\t\tentityManagerFactoryBean.getJpaPropertyMap().putAll(\n\t\t\t\tthis.environment.getSubProperties("properties."));\n\t\tconfigure(entityManagerFactoryBean);\n\t\treturn entityManagerFactoryBean;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(JpaVendorAdapter.class)\n\tpublic JpaVendorAdapter jpaVendorAdapter() {\n\t\tAbstractJpaVendorAdapter adapter = createJpaVendorAdapter();\n\t\tadapter.setShowSql(this.environment.getProperty("show-sql", Boolean.class, true));\n\t\tadapter.setDatabasePlatform(this.environment.getProperty("database-platform"));\n\t\tadapter.setDatabase(this.environment.getProperty("database", Database.class,\n\t\t\t\tDatabase.DEFAULT));\n\t\tadapter.setGenerateDdl(this.environment.getProperty("generate-ddl",\n\t\t\t\tBoolean.class, false));\n\t\treturn adapter;\n\t}\n\n\tprotected abstract AbstractJpaVendorAdapter createJpaVendorAdapter();\n\n\tprotected DataSource getDataSource() {\n\t\ttry {\n\t\t\treturn this.beanFactory.getBean("dataSource", DataSource.class);\n\t\t}\n\t\tcatch (RuntimeException ex) {\n\t\t\treturn this.beanFactory.getBean(DataSource.class);\n\t\t}\n\t}\n\n\tprotected String[] getPackagesToScan() {\n\t\tList<String> basePackages = AutoConfigurationPackages.get(this.beanFactory);\n\t\treturn basePackages.toArray(new String[basePackages.size()]);\n\t}\n\n\tprotected void configure(\n\t\t\tLocalContainerEntityManagerFactoryBean entityManagerFactoryBean) {\n\t}\n\n\t@Override\n\tpublic void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n\t\tthis.beanFactory = (ConfigurableListableBeanFactory) beanFactory;\n\t}\n\n\t@Configuration\n\t@ConditionalOnWebApplication\n\t@ConditionalOnMissingBean({ OpenEntityManagerInViewInterceptor.class,\n\t\t\tOpenEntityManagerInViewFilter.class })\n\t@ConditionalOnExpression("${spring.jpa.openInView:${spring.jpa.open_in_view:true}}")\n\tprotected static class JpaWebConfiguration extends WebMvcConfigurerAdapter {\n\n\t\t@Override\n\t\tpublic void addInterceptors(InterceptorRegistry registry) {\n\t\t\tregistry.addWebRequestInterceptor(openEntityManagerInViewInterceptor());\n\t\t}\n\n\t\t@Bean\n\t\tpublic OpenEntityManagerInViewInterceptor openEntityManagerInViewInterceptor() {\n\t\t\treturn new OpenEntityManagerInViewInterceptor();\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
