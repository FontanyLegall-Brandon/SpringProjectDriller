{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceTransactionManagerAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceTransactionManagerAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -23,7 +23,6 @@ import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.core.Ordered;\n@@ -58,7 +57,7 @@ public class DataSourceTransactionManagerAutoConfiguration implements Ordered {\n \t\treturn new DataSourceTransactionManager(this.dataSource);\n \t}\n \n-\t@ConditionalOnMissingClass(AbstractTransactionManagementConfiguration.class)\n+\t@ConditionalOnMissingBean(AbstractTransactionManagementConfiguration.class)\n \t@Configuration\n \t@EnableTransactionManagement\n \tprotected static class TransactionManagementConfiguration {\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jdbc;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.datasource.DataSourceTransactionManager;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.transaction.annotation.AbstractTransactionManagementConfiguration;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for\n * {@link DataSourceTransactionManager}.\n * \n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnClass({ JdbcTemplate.class, PlatformTransactionManager.class })\npublic class DataSourceTransactionManagerAutoConfiguration implements Ordered {\n\n\t@Override\n\tpublic int getOrder() {\n\t\treturn Integer.MAX_VALUE;\n\t}\n\n\t@Autowired(required = false)\n\tprivate DataSource dataSource;\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "transactionManager")\n\t@ConditionalOnBean(DataSource.class)\n\tpublic PlatformTransactionManager transactionManager() {\n\t\treturn new DataSourceTransactionManager(this.dataSource);\n\t}\n\n\t@ConditionalOnMissingBean(AbstractTransactionManagementConfiguration.class)\n\t@Configuration\n\t@EnableTransactionManagement\n\tprotected static class TransactionManagementConfiguration {\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jdbc;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.datasource.DataSourceTransactionManager;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.transaction.annotation.AbstractTransactionManagementConfiguration;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for\n * {@link DataSourceTransactionManager}.\n * \n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnClass({ JdbcTemplate.class, PlatformTransactionManager.class })\npublic class DataSourceTransactionManagerAutoConfiguration implements Ordered {\n\n\t@Override\n\tpublic int getOrder() {\n\t\treturn Integer.MAX_VALUE;\n\t}\n\n\t@Autowired(required = false)\n\tprivate DataSource dataSource;\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "transactionManager")\n\t@ConditionalOnBean(DataSource.class)\n\tpublic PlatformTransactionManager transactionManager() {\n\t\treturn new DataSourceTransactionManager(this.dataSource);\n\t}\n\n\t@ConditionalOnMissingClass(AbstractTransactionManagementConfiguration.class)\n\t@Configuration\n\t@EnableTransactionManagement\n\tprotected static class TransactionManagementConfiguration {\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
