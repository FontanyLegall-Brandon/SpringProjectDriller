{'_old_path': PosixPath('spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/RemoteDevToolsAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/RemoteDevToolsAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -23,10 +23,13 @@ import javax.servlet.Filter;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n \n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.security.SecurityProperties;\n+import org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration;\n import org.springframework.boot.autoconfigure.web.ServerProperties;\n import org.springframework.boot.autoconfigure.web.ServerProperties.Servlet;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n@@ -45,7 +48,11 @@ import org.springframework.boot.devtools.restart.server.SourceFolderUrlFilter;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.annotation.Order;\n import org.springframework.http.server.ServerHttpRequest;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for remote development support.\n@@ -53,12 +60,14 @@ import org.springframework.http.server.ServerHttpRequest;\n  * @author Phillip Webb\n  * @author Rob Winch\n  * @author Andy Wilkinson\n+ * @author Madhura Bhave\n  * @since 1.3.0\n  */\n @Configuration(proxyBeanMethods = false)\n @Conditional(OnEnabledDevToolsCondition.class)\n @ConditionalOnProperty(prefix = "spring.devtools.remote", name = "secret")\n @ConditionalOnClass({ Filter.class, ServerHttpRequest.class })\n+@AutoConfigureAfter(SecurityAutoConfiguration.class)\n @EnableConfigurationProperties({ ServerProperties.class, DevToolsProperties.class })\n public class RemoteDevToolsAutoConfiguration {\n \n@@ -127,4 +136,25 @@ public class RemoteDevToolsAutoConfiguration {\n \n \t}\n \n+\t@Configuration\n+\t@Order(SecurityProperties.BASIC_AUTH_ORDER - 1)\n+\t@ConditionalOnClass(WebSecurityConfigurerAdapter.class)\n+\tstatic class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n+\n+\t\tprivate final String url;\n+\n+\t\tSecurityConfiguration(DevToolsProperties devToolsProperties, ServerProperties serverProperties) {\n+\t\t\tServlet servlet = serverProperties.getServlet();\n+\t\t\tString servletContextPath = (servlet.getContextPath() != null) ? servlet.getContextPath() : "";\n+\t\t\tthis.url = servletContextPath + devToolsProperties.getRemote().getContextPath() + "/restart";\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected void configure(HttpSecurity http) throws Exception {\n+\t\t\thttp.requestMatcher(new AntPathRequestMatcher(this.url)).authorizeRequests().anyRequest().anonymous().and()\n+\t\t\t\t\t.csrf().disable();\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.devtools.autoconfigure;\n\nimport java.util.Collection;\n\nimport javax.servlet.Filter;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.security.SecurityProperties;\nimport org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.ServerProperties;\nimport org.springframework.boot.autoconfigure.web.ServerProperties.Servlet;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.devtools.remote.server.AccessManager;\nimport org.springframework.boot.devtools.remote.server.Dispatcher;\nimport org.springframework.boot.devtools.remote.server.DispatcherFilter;\nimport org.springframework.boot.devtools.remote.server.Handler;\nimport org.springframework.boot.devtools.remote.server.HandlerMapper;\nimport org.springframework.boot.devtools.remote.server.HttpHeaderAccessManager;\nimport org.springframework.boot.devtools.remote.server.HttpStatusHandler;\nimport org.springframework.boot.devtools.remote.server.UrlHandlerMapper;\nimport org.springframework.boot.devtools.restart.server.DefaultSourceFolderUrlFilter;\nimport org.springframework.boot.devtools.restart.server.HttpRestartServer;\nimport org.springframework.boot.devtools.restart.server.HttpRestartServerHandler;\nimport org.springframework.boot.devtools.restart.server.SourceFolderUrlFilter;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.http.server.ServerHttpRequest;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for remote development support.\n *\n * @author Phillip Webb\n * @author Rob Winch\n * @author Andy Wilkinson\n * @author Madhura Bhave\n * @since 1.3.0\n */\n@Configuration(proxyBeanMethods = false)\n@Conditional(OnEnabledDevToolsCondition.class)\n@ConditionalOnProperty(prefix = "spring.devtools.remote", name = "secret")\n@ConditionalOnClass({ Filter.class, ServerHttpRequest.class })\n@AutoConfigureAfter(SecurityAutoConfiguration.class)\n@EnableConfigurationProperties({ ServerProperties.class, DevToolsProperties.class })\npublic class RemoteDevToolsAutoConfiguration {\n\n\tprivate static final Log logger = LogFactory.getLog(RemoteDevToolsAutoConfiguration.class);\n\n\tprivate final DevToolsProperties properties;\n\n\tpublic RemoteDevToolsAutoConfiguration(DevToolsProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic AccessManager remoteDevToolsAccessManager() {\n\t\tRemoteDevToolsProperties remoteProperties = this.properties.getRemote();\n\t\treturn new HttpHeaderAccessManager(remoteProperties.getSecretHeaderName(), remoteProperties.getSecret());\n\t}\n\n\t@Bean\n\tpublic HandlerMapper remoteDevToolsHealthCheckHandlerMapper(ServerProperties serverProperties) {\n\t\tHandler handler = new HttpStatusHandler();\n\t\tServlet servlet = serverProperties.getServlet();\n\t\tString servletContextPath = (servlet.getContextPath() != null) ? servlet.getContextPath() : "";\n\t\treturn new UrlHandlerMapper(servletContextPath + this.properties.getRemote().getContextPath(), handler);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic DispatcherFilter remoteDevToolsDispatcherFilter(AccessManager accessManager,\n\t\t\tCollection<HandlerMapper> mappers) {\n\t\tDispatcher dispatcher = new Dispatcher(accessManager, mappers);\n\t\treturn new DispatcherFilter(dispatcher);\n\t}\n\n\t/**\n\t * Configuration for remote update and restarts.\n\t */\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnProperty(prefix = "spring.devtools.remote.restart", name = "enabled", matchIfMissing = true)\n\tstatic class RemoteRestartConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tSourceFolderUrlFilter remoteRestartSourceFolderUrlFilter() {\n\t\t\treturn new DefaultSourceFolderUrlFilter();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tHttpRestartServer remoteRestartHttpRestartServer(SourceFolderUrlFilter sourceFolderUrlFilter) {\n\t\t\treturn new HttpRestartServer(sourceFolderUrlFilter);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "remoteRestartHandlerMapper")\n\t\tUrlHandlerMapper remoteRestartHandlerMapper(HttpRestartServer server, ServerProperties serverProperties,\n\t\t\t\tDevToolsProperties properties) {\n\t\t\tServlet servlet = serverProperties.getServlet();\n\t\t\tRemoteDevToolsProperties remote = properties.getRemote();\n\t\t\tString servletContextPath = (servlet.getContextPath() != null) ? servlet.getContextPath() : "";\n\t\t\tString url = servletContextPath + remote.getContextPath() + "/restart";\n\t\t\tlogger.warn("Listening for remote restart updates on " + url);\n\t\t\tHandler handler = new HttpRestartServerHandler(server);\n\t\t\treturn new UrlHandlerMapper(url, handler);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@Order(SecurityProperties.BASIC_AUTH_ORDER - 1)\n\t@ConditionalOnClass(WebSecurityConfigurerAdapter.class)\n\tstatic class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n\n\t\tprivate final String url;\n\n\t\tSecurityConfiguration(DevToolsProperties devToolsProperties, ServerProperties serverProperties) {\n\t\t\tServlet servlet = serverProperties.getServlet();\n\t\t\tString servletContextPath = (servlet.getContextPath() != null) ? servlet.getContextPath() : "";\n\t\t\tthis.url = servletContextPath + devToolsProperties.getRemote().getContextPath() + "/restart";\n\t\t}\n\n\t\t@Override\n\t\tprotected void configure(HttpSecurity http) throws Exception {\n\t\t\thttp.requestMatcher(new AntPathRequestMatcher(this.url)).authorizeRequests().anyRequest().anonymous().and()\n\t\t\t\t\t.csrf().disable();\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.devtools.autoconfigure;\n\nimport java.util.Collection;\n\nimport javax.servlet.Filter;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.web.ServerProperties;\nimport org.springframework.boot.autoconfigure.web.ServerProperties.Servlet;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.devtools.remote.server.AccessManager;\nimport org.springframework.boot.devtools.remote.server.Dispatcher;\nimport org.springframework.boot.devtools.remote.server.DispatcherFilter;\nimport org.springframework.boot.devtools.remote.server.Handler;\nimport org.springframework.boot.devtools.remote.server.HandlerMapper;\nimport org.springframework.boot.devtools.remote.server.HttpHeaderAccessManager;\nimport org.springframework.boot.devtools.remote.server.HttpStatusHandler;\nimport org.springframework.boot.devtools.remote.server.UrlHandlerMapper;\nimport org.springframework.boot.devtools.restart.server.DefaultSourceFolderUrlFilter;\nimport org.springframework.boot.devtools.restart.server.HttpRestartServer;\nimport org.springframework.boot.devtools.restart.server.HttpRestartServerHandler;\nimport org.springframework.boot.devtools.restart.server.SourceFolderUrlFilter;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.server.ServerHttpRequest;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for remote development support.\n *\n * @author Phillip Webb\n * @author Rob Winch\n * @author Andy Wilkinson\n * @since 1.3.0\n */\n@Configuration(proxyBeanMethods = false)\n@Conditional(OnEnabledDevToolsCondition.class)\n@ConditionalOnProperty(prefix = "spring.devtools.remote", name = "secret")\n@ConditionalOnClass({ Filter.class, ServerHttpRequest.class })\n@EnableConfigurationProperties({ ServerProperties.class, DevToolsProperties.class })\npublic class RemoteDevToolsAutoConfiguration {\n\n\tprivate static final Log logger = LogFactory.getLog(RemoteDevToolsAutoConfiguration.class);\n\n\tprivate final DevToolsProperties properties;\n\n\tpublic RemoteDevToolsAutoConfiguration(DevToolsProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic AccessManager remoteDevToolsAccessManager() {\n\t\tRemoteDevToolsProperties remoteProperties = this.properties.getRemote();\n\t\treturn new HttpHeaderAccessManager(remoteProperties.getSecretHeaderName(), remoteProperties.getSecret());\n\t}\n\n\t@Bean\n\tpublic HandlerMapper remoteDevToolsHealthCheckHandlerMapper(ServerProperties serverProperties) {\n\t\tHandler handler = new HttpStatusHandler();\n\t\tServlet servlet = serverProperties.getServlet();\n\t\tString servletContextPath = (servlet.getContextPath() != null) ? servlet.getContextPath() : "";\n\t\treturn new UrlHandlerMapper(servletContextPath + this.properties.getRemote().getContextPath(), handler);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic DispatcherFilter remoteDevToolsDispatcherFilter(AccessManager accessManager,\n\t\t\tCollection<HandlerMapper> mappers) {\n\t\tDispatcher dispatcher = new Dispatcher(accessManager, mappers);\n\t\treturn new DispatcherFilter(dispatcher);\n\t}\n\n\t/**\n\t * Configuration for remote update and restarts.\n\t */\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnProperty(prefix = "spring.devtools.remote.restart", name = "enabled", matchIfMissing = true)\n\tstatic class RemoteRestartConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tSourceFolderUrlFilter remoteRestartSourceFolderUrlFilter() {\n\t\t\treturn new DefaultSourceFolderUrlFilter();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tHttpRestartServer remoteRestartHttpRestartServer(SourceFolderUrlFilter sourceFolderUrlFilter) {\n\t\t\treturn new HttpRestartServer(sourceFolderUrlFilter);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "remoteRestartHandlerMapper")\n\t\tUrlHandlerMapper remoteRestartHandlerMapper(HttpRestartServer server, ServerProperties serverProperties,\n\t\t\t\tDevToolsProperties properties) {\n\t\t\tServlet servlet = serverProperties.getServlet();\n\t\t\tRemoteDevToolsProperties remote = properties.getRemote();\n\t\t\tString servletContextPath = (servlet.getContextPath() != null) ? servlet.getContextPath() : "";\n\t\t\tString url = servletContextPath + remote.getContextPath() + "/restart";\n\t\t\tlogger.warn("Listening for remote restart updates on " + url);\n\t\t\tHandler handler = new HttpRestartServerHandler(server);\n\t\t\treturn new UrlHandlerMapper(url, handler);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
