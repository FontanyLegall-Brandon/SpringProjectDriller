{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/FallbackWebSecurityAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/WebSecurityEnablerConfiguration.java'), 'change_type': <ModificationType.RENAME: 3>, 'diff': '@@ -16,33 +16,27 @@\n \n package org.springframework.boot.autoconfigure.security;\n \n-import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\n import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n import org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;\n import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n \n /**\n- * If the user explicitly disables the basic security features and forgets to\n- * {@code @EnableWebSecurity}, and yet still wants a bean of type\n- * WebSecurityConfigurerAdapter, he is trying to use a custom security setup. The app\n- * would fail in a confusing way without this shim configuration, which just helpfully\n- * defines an empty {@code @EnableWebSecurity}.\n+ * If there is a bean of type WebSecurityConfigurerAdapter,\n+ * this adds the {@code @EnableWebSecurity} annotation if it is not already specified.\n+ * This will make sure that the annotation is present with default security autoconfiguration\n+ * and also if the user adds custom security and forgets to add the annotation.\n  *\n- * @author Dave Syer\n+ * @author Madhura Bhave\n  */\n-@ConditionalOnProperty(prefix = "security.basic", name = "enabled", havingValue = "false")\n @ConditionalOnBean(WebSecurityConfigurerAdapter.class)\n @ConditionalOnClass(EnableWebSecurity.class)\n @ConditionalOnMissingBean(WebSecurityConfiguration.class)\n-@ConditionalOnWebApplication(type = Type.SERVLET)\n-@AutoConfigureAfter(SecurityAutoConfiguration.class)\n+@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n @EnableWebSecurity\n-public class FallbackWebSecurityAutoConfiguration {\n-\n+public class WebSecurityEnablerConfiguration {\n }\n+\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\n/**\n * If there is a bean of type WebSecurityConfigurerAdapter,\n * this adds the {@code @EnableWebSecurity} annotation if it is not already specified.\n * This will make sure that the annotation is present with default security autoconfiguration\n * and also if the user adds custom security and forgets to add the annotation.\n *\n * @author Madhura Bhave\n */\n@ConditionalOnBean(WebSecurityConfigurerAdapter.class)\n@ConditionalOnClass(EnableWebSecurity.class)\n@ConditionalOnMissingBean(WebSecurityConfiguration.class)\n@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n@EnableWebSecurity\npublic class WebSecurityEnablerConfiguration {\n}\n\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\n/**\n * If the user explicitly disables the basic security features and forgets to\n * {@code @EnableWebSecurity}, and yet still wants a bean of type\n * WebSecurityConfigurerAdapter, he is trying to use a custom security setup. The app\n * would fail in a confusing way without this shim configuration, which just helpfully\n * defines an empty {@code @EnableWebSecurity}.\n *\n * @author Dave Syer\n */\n@ConditionalOnProperty(prefix = "security.basic", name = "enabled", havingValue = "false")\n@ConditionalOnBean(WebSecurityConfigurerAdapter.class)\n@ConditionalOnClass(EnableWebSecurity.class)\n@ConditionalOnMissingBean(WebSecurityConfiguration.class)\n@ConditionalOnWebApplication(type = Type.SERVLET)\n@AutoConfigureAfter(SecurityAutoConfiguration.class)\n@EnableWebSecurity\npublic class FallbackWebSecurityAutoConfiguration {\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
