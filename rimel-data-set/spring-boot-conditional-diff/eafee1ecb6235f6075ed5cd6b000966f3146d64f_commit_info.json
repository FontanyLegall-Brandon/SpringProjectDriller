{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailSenderValidatorAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2012-2015 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.mail;\n+\n+import javax.annotation.PostConstruct;\n+import javax.mail.MessagingException;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.mail.javamail.JavaMailSenderImpl;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto configuration} for testing mail service\n+ * connectivity on startup.\n+ *\n+ * @author Eddú Meléndez\n+ * @author Stephane Nicoll\n+ * @since 1.3.0\n+ */\n+@Configuration\n+@AutoConfigureAfter(MailSenderAutoConfiguration.class)\n+@ConditionalOnProperty(prefix = "spring.mail", value = "test-connection")\n+@ConditionalOnSingleCandidate(JavaMailSenderImpl.class)\n+public class MailSenderValidatorAutoConfiguration {\n+\n+\t@Autowired\n+\tprivate JavaMailSenderImpl mailSender;\n+\n+\t@PostConstruct\n+\tpublic void validateConnection() {\n+\t\ttry {\n+\t\t\tthis.mailSender.testConnection();\n+\t\t}\n+\t\tcatch (MessagingException ex) {\n+\t\t\tthrow new IllegalStateException("Mail server is not unavailable", ex);\n+\t\t}\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.mail;\n\nimport javax.annotation.PostConstruct;\nimport javax.mail.MessagingException;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.mail.javamail.JavaMailSenderImpl;\n\n/**\n * {@link EnableAutoConfiguration Auto configuration} for testing mail service\n * connectivity on startup.\n *\n * @author Eddú Meléndez\n * @author Stephane Nicoll\n * @since 1.3.0\n */\n@Configuration\n@AutoConfigureAfter(MailSenderAutoConfiguration.class)\n@ConditionalOnProperty(prefix = "spring.mail", value = "test-connection")\n@ConditionalOnSingleCandidate(JavaMailSenderImpl.class)\npublic class MailSenderValidatorAutoConfiguration {\n\n\t@Autowired\n\tprivate JavaMailSenderImpl mailSender;\n\n\t@PostConstruct\n\tpublic void validateConnection() {\n\t\ttry {\n\t\t\tthis.mailSender.testConnection();\n\t\t}\n\t\tcatch (MessagingException ex) {\n\t\t\tthrow new IllegalStateException("Mail server is not unavailable", ex);\n\t\t}\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
