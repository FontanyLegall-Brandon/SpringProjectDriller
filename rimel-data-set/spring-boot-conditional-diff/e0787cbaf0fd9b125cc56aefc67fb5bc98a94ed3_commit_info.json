{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/admin/SpringApplicationAdminJmxAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/admin/SpringApplicationAdminJmxAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -30,8 +30,8 @@ import org.springframework.core.env.Environment;\n import org.springframework.jmx.export.MBeanExporter;\n \n /**\n- * Register a JMX component that allows to manage the lifecycle of the current\n- * application. Intended for internal use only.\n+ * Register a JMX component that allows to administer the current application. Intended\n+ * for internal use only.\n  *\n  * @author Stephane Nicoll\n  * @since 1.3.0\n@@ -39,19 +39,19 @@ import org.springframework.jmx.export.MBeanExporter;\n  */\n @Configuration\n @AutoConfigureAfter(JmxAutoConfiguration.class)\n-@ConditionalOnProperty(value = "spring.context.lifecycle.enabled", havingValue = "true", matchIfMissing = false)\n+@ConditionalOnProperty(prefix = "spring.application.admin", value = "enabled", havingValue = "true", matchIfMissing = false)\n public class SpringApplicationAdminJmxAutoConfiguration {\n \n \t/**\n \t * The property to use to customize the {@code ObjectName} of the application\n-\t * lifecycle mbean.\n+\t * admin mbean.\n \t */\n \tprivate static final String JMX_NAME_PROPERTY = "spring.application.admin.jmx-name";\n \n \t/**\n-\t * The default {@code ObjectName} of the application lifecycle mbean.\n+\t * The default {@code ObjectName} of the application admin mbean.\n \t */\n-\tprivate static final String DEFAULT_JMX_NAME = "org.springframework.boot:type=SpringApplicationAdmin,name=springApplicationAdmin";\n+\tprivate static final String DEFAULT_JMX_NAME = "org.springframework.boot:type=Admin,name=SpringApplication";\n \n \t@Autowired(required = false)\n \tprivate MBeanExporter mbeanExporter;\n@@ -60,7 +60,7 @@ public class SpringApplicationAdminJmxAutoConfiguration {\n \tprivate Environment environment;\n \n \t@Bean\n-\tpublic SpringApplicationAdminMXBeanRegistrar springApplicationLifecycleRegistrar()\n+\tpublic SpringApplicationAdminMXBeanRegistrar springApplicationAdminRegistrar()\n \t\t\tthrows MalformedObjectNameException {\n \t\tString jmxName = this.environment\n \t\t\t\t.getProperty(JMX_NAME_PROPERTY, DEFAULT_JMX_NAME);\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.admin;\n\nimport javax.management.MalformedObjectNameException;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.admin.SpringApplicationAdminMXBean;\nimport org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\nimport org.springframework.jmx.export.MBeanExporter;\n\n/**\n * Register a JMX component that allows to administer the current application. Intended\n * for internal use only.\n *\n * @author Stephane Nicoll\n * @since 1.3.0\n * @see SpringApplicationAdminMXBean\n */\n@Configuration\n@AutoConfigureAfter(JmxAutoConfiguration.class)\n@ConditionalOnProperty(prefix = "spring.application.admin", value = "enabled", havingValue = "true", matchIfMissing = false)\npublic class SpringApplicationAdminJmxAutoConfiguration {\n\n\t/**\n\t * The property to use to customize the {@code ObjectName} of the application\n\t * admin mbean.\n\t */\n\tprivate static final String JMX_NAME_PROPERTY = "spring.application.admin.jmx-name";\n\n\t/**\n\t * The default {@code ObjectName} of the application admin mbean.\n\t */\n\tprivate static final String DEFAULT_JMX_NAME = "org.springframework.boot:type=Admin,name=SpringApplication";\n\n\t@Autowired(required = false)\n\tprivate MBeanExporter mbeanExporter;\n\n\t@Autowired\n\tprivate Environment environment;\n\n\t@Bean\n\tpublic SpringApplicationAdminMXBeanRegistrar springApplicationAdminRegistrar()\n\t\t\tthrows MalformedObjectNameException {\n\t\tString jmxName = this.environment\n\t\t\t\t.getProperty(JMX_NAME_PROPERTY, DEFAULT_JMX_NAME);\n\t\tif (this.mbeanExporter != null) { // Make sure to not register that MBean twice\n\t\t\tthis.mbeanExporter.addExcludedBean(jmxName);\n\t\t}\n\t\treturn new SpringApplicationAdminMXBeanRegistrar(jmxName);\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.admin;\n\nimport javax.management.MalformedObjectNameException;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.admin.SpringApplicationAdminMXBean;\nimport org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\nimport org.springframework.jmx.export.MBeanExporter;\n\n/**\n * Register a JMX component that allows to manage the lifecycle of the current\n * application. Intended for internal use only.\n *\n * @author Stephane Nicoll\n * @since 1.3.0\n * @see SpringApplicationAdminMXBean\n */\n@Configuration\n@AutoConfigureAfter(JmxAutoConfiguration.class)\n@ConditionalOnProperty(value = "spring.context.lifecycle.enabled", havingValue = "true", matchIfMissing = false)\npublic class SpringApplicationAdminJmxAutoConfiguration {\n\n\t/**\n\t * The property to use to customize the {@code ObjectName} of the application\n\t * lifecycle mbean.\n\t */\n\tprivate static final String JMX_NAME_PROPERTY = "spring.application.admin.jmx-name";\n\n\t/**\n\t * The default {@code ObjectName} of the application lifecycle mbean.\n\t */\n\tprivate static final String DEFAULT_JMX_NAME = "org.springframework.boot:type=SpringApplicationAdmin,name=springApplicationAdmin";\n\n\t@Autowired(required = false)\n\tprivate MBeanExporter mbeanExporter;\n\n\t@Autowired\n\tprivate Environment environment;\n\n\t@Bean\n\tpublic SpringApplicationAdminMXBeanRegistrar springApplicationLifecycleRegistrar()\n\t\t\tthrows MalformedObjectNameException {\n\t\tString jmxName = this.environment\n\t\t\t\t.getProperty(JMX_NAME_PROPERTY, DEFAULT_JMX_NAME);\n\t\tif (this.mbeanExporter != null) { // Make sure to not register that MBean twice\n\t\t\tthis.mbeanExporter.addExcludedBean(jmxName);\n\t\t}\n\t\treturn new SpringApplicationAdminMXBeanRegistrar(jmxName);\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
