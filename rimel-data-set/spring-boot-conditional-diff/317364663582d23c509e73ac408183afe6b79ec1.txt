@@ -16,9 +16,13 @@
 
 package org.springframework.boot.autoconfigure.web;
 
+import javax.servlet.MultipartConfigElement;
+import javax.servlet.Servlet;
+
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.context.embedded.EmbeddedWebApplicationContext;
 import org.springframework.boot.context.embedded.MultipartConfigFactory;
@@ -28,58 +32,55 @@ import org.springframework.context.annotation.Configuration;
 import org.springframework.util.StringUtils;
 import org.springframework.web.multipart.support.StandardServletMultipartResolver;
 
-import javax.servlet.MultipartConfigElement;
-import javax.servlet.Servlet;
-
 
 @Configuration
-@ConditionalOnClass({Servlet.class, StandardServletMultipartResolver.class})
+@ConditionalOnClass({ Servlet.class, StandardServletMultipartResolver.class })
+@ConditionalOnExpression()
 @EnableConfigurationProperties(MultipartProperties.class)
 public class MultipartAutoConfiguration {
 
-    @Autowired
-    private MultipartProperties multipartProperties = new MultipartProperties();
-
-    @Bean
-    @ConditionalOnMissingBean
-    public MultipartConfigElement multipartConfigElement() {
-        MultipartConfigFactory factory = new MultipartConfigFactory();
+	@Autowired
+	private MultipartProperties multipartProperties = new MultipartProperties();
 
-        if (StringUtils.hasText(this.multipartProperties.getFileSizeThreshold())) {
-            factory.setFileSizeThreshold(this.multipartProperties.getFileSizeThreshold());
-        }
+	@Bean
+	@ConditionalOnMissingBean
+	public MultipartConfigElement multipartConfigElement() {
+		MultipartConfigFactory factory = new MultipartConfigFactory();
 
-        if (StringUtils.hasText(this.multipartProperties.getLocation())) {
-            factory.setLocation(this.multipartProperties.getLocation());
-        }
+		if (StringUtils.hasText(this.multipartProperties.getFileSizeThreshold())) {
+			factory.setFileSizeThreshold(this.multipartProperties.getFileSizeThreshold());
+		}
 
-        if (StringUtils.hasText(this.multipartProperties.getMaxRequestSize())) {
-            factory.setMaxRequestSize(this.multipartProperties.getMaxRequestSize());
-        }
+		if (StringUtils.hasText(this.multipartProperties.getLocation())) {
+			factory.setLocation(this.multipartProperties.getLocation());
+		}
 
-        if (StringUtils.hasText(this.multipartProperties.getMaxFileSize())) {
-            factory.setMaxFileSize(this.multipartProperties.getMaxFileSize());
-        }
+		if (StringUtils.hasText(this.multipartProperties.getMaxRequestSize())) {
+			factory.setMaxRequestSize(this.multipartProperties.getMaxRequestSize());
+		}
 
-        return factory.createMultipartConfig();
-    }
+		if (StringUtils.hasText(this.multipartProperties.getMaxFileSize())) {
+			factory.setMaxFileSize(this.multipartProperties.getMaxFileSize());
+		}
 
+		return factory.createMultipartConfig();
+	}
 
-    @Bean
-    @ConditionalOnMissingBean
-    public StandardServletMultipartResolver multipartResolver() {
-        return new StandardServletMultipartResolver();
-    }
+	@Bean
+	@ConditionalOnMissingBean
+	public StandardServletMultipartResolver multipartResolver() {
+		return new StandardServletMultipartResolver();
+	}
 }

