{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/EmbeddedWebServerFactoryCustomizerAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/EmbeddedWebServerFactoryCustomizerAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -23,6 +23,7 @@ import org.eclipse.jetty.server.Server;\n import org.eclipse.jetty.util.Loader;\n import org.eclipse.jetty.webapp.WebAppContext;\n import org.xnio.SslClientAuthMode;\n+import reactor.netty.http.server.HttpServer;\n \n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n@@ -84,4 +85,19 @@ public class EmbeddedWebServerFactoryCustomizerAutoConfiguration {\n \n \t}\n \n+\t/**\n+\t * Nested configuration if Netty is being used.\n+\t */\n+\t@Configuration\n+\t@ConditionalOnClass(HttpServer.class)\n+\tpublic static class NettyWebServerFactoryCustomizerConfiguration {\n+\n+\t\t@Bean\n+\t\tpublic NettyWebServerFactoryCustomizer nettyWebServerFactoryCustomizer(\n+\t\t\t\tEnvironment environment, ServerProperties serverProperties) {\n+\t\t\treturn new NettyWebServerFactoryCustomizer(environment, serverProperties);\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web.embedded;\n\nimport io.undertow.Undertow;\nimport org.apache.catalina.startup.Tomcat;\nimport org.apache.coyote.UpgradeProtocol;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.util.Loader;\nimport org.eclipse.jetty.webapp.WebAppContext;\nimport org.xnio.SslClientAuthMode;\nimport reactor.netty.http.server.HttpServer;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.web.ServerProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for embedded servlet and reactive\n * web servers customizations.\n *\n * @author Phillip Webb\n * @since 2.0.0\n */\n@Configuration\n@EnableConfigurationProperties(ServerProperties.class)\npublic class EmbeddedWebServerFactoryCustomizerAutoConfiguration {\n\n\t@ConditionalOnClass({ Tomcat.class, UpgradeProtocol.class })\n\tpublic static class TomcatWebServerFactoryCustomizerConfiguration {\n\n\t\t@Bean\n\t\tpublic TomcatWebServerFactoryCustomizer tomcatWebServerFactoryCustomizer(\n\t\t\t\tEnvironment environment, ServerProperties serverProperties) {\n\t\t\treturn new TomcatWebServerFactoryCustomizer(environment, serverProperties);\n\t\t}\n\n\t}\n\n\t/**\n\t * Nested configuration if Jetty is being used.\n\t */\n\t@Configuration\n\t@ConditionalOnClass({ Server.class, Loader.class, WebAppContext.class })\n\tpublic static class JettyWebServerFactoryCustomizerConfiguration {\n\n\t\t@Bean\n\t\tpublic JettyWebServerFactoryCustomizer jettyWebServerFactoryCustomizer(\n\t\t\t\tEnvironment environment, ServerProperties serverProperties) {\n\t\t\treturn new JettyWebServerFactoryCustomizer(environment, serverProperties);\n\t\t}\n\n\t}\n\n\t/**\n\t * Nested configuration if Undertow is being used.\n\t */\n\t@Configuration\n\t@ConditionalOnClass({ Undertow.class, SslClientAuthMode.class })\n\tpublic static class UndertowWebServerFactoryCustomizerConfiguration {\n\n\t\t@Bean\n\t\tpublic UndertowWebServerFactoryCustomizer undertowWebServerFactoryCustomizer(\n\t\t\t\tEnvironment environment, ServerProperties serverProperties) {\n\t\t\treturn new UndertowWebServerFactoryCustomizer(environment, serverProperties);\n\t\t}\n\n\t}\n\n\t/**\n\t * Nested configuration if Netty is being used.\n\t */\n\t@Configuration\n\t@ConditionalOnClass(HttpServer.class)\n\tpublic static class NettyWebServerFactoryCustomizerConfiguration {\n\n\t\t@Bean\n\t\tpublic NettyWebServerFactoryCustomizer nettyWebServerFactoryCustomizer(\n\t\t\t\tEnvironment environment, ServerProperties serverProperties) {\n\t\t\treturn new NettyWebServerFactoryCustomizer(environment, serverProperties);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web.embedded;\n\nimport io.undertow.Undertow;\nimport org.apache.catalina.startup.Tomcat;\nimport org.apache.coyote.UpgradeProtocol;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.util.Loader;\nimport org.eclipse.jetty.webapp.WebAppContext;\nimport org.xnio.SslClientAuthMode;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.web.ServerProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for embedded servlet and reactive\n * web servers customizations.\n *\n * @author Phillip Webb\n * @since 2.0.0\n */\n@Configuration\n@EnableConfigurationProperties(ServerProperties.class)\npublic class EmbeddedWebServerFactoryCustomizerAutoConfiguration {\n\n\t@ConditionalOnClass({ Tomcat.class, UpgradeProtocol.class })\n\tpublic static class TomcatWebServerFactoryCustomizerConfiguration {\n\n\t\t@Bean\n\t\tpublic TomcatWebServerFactoryCustomizer tomcatWebServerFactoryCustomizer(\n\t\t\t\tEnvironment environment, ServerProperties serverProperties) {\n\t\t\treturn new TomcatWebServerFactoryCustomizer(environment, serverProperties);\n\t\t}\n\n\t}\n\n\t/**\n\t * Nested configuration if Jetty is being used.\n\t */\n\t@Configuration\n\t@ConditionalOnClass({ Server.class, Loader.class, WebAppContext.class })\n\tpublic static class JettyWebServerFactoryCustomizerConfiguration {\n\n\t\t@Bean\n\t\tpublic JettyWebServerFactoryCustomizer jettyWebServerFactoryCustomizer(\n\t\t\t\tEnvironment environment, ServerProperties serverProperties) {\n\t\t\treturn new JettyWebServerFactoryCustomizer(environment, serverProperties);\n\t\t}\n\n\t}\n\n\t/**\n\t * Nested configuration if Undertow is being used.\n\t */\n\t@Configuration\n\t@ConditionalOnClass({ Undertow.class, SslClientAuthMode.class })\n\tpublic static class UndertowWebServerFactoryCustomizerConfiguration {\n\n\t\t@Bean\n\t\tpublic UndertowWebServerFactoryCustomizer undertowWebServerFactoryCustomizer(\n\t\t\t\tEnvironment environment, ServerProperties serverProperties) {\n\t\t\treturn new UndertowWebServerFactoryCustomizer(environment, serverProperties);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
