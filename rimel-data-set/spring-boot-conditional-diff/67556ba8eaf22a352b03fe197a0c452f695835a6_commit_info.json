{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/EmbeddedServletContainerAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServletWebServerFactoryAutoConfiguration.java'), 'change_type': <ModificationType.RENAME: 3>, 'diff': '@@ -38,14 +38,14 @@ import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\n import org.springframework.boot.autoconfigure.condition.SearchStrategy;\n-import org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration.BeanPostProcessorsRegistrar;\n-import org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizerBeanPostProcessor;\n-import org.springframework.boot.context.embedded.EmbeddedServletContainerFactory;\n-import org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainerFactory;\n-import org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;\n-import org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory;\n+import org.springframework.boot.autoconfigure.web.ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n-import org.springframework.boot.web.servlet.ErrorPageRegistrarBeanPostProcessor;\n+import org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactory;\n+import org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;\n+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;\n+import org.springframework.boot.web.server.ErrorPageRegistrarBeanPostProcessor;\n+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;\n+import org.springframework.boot.web.servlet.server.ServletWebServerFactoryCustomizerBeanPostProcessor;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Import;\n@@ -55,7 +55,7 @@ import org.springframework.core.type.AnnotationMetadata;\n import org.springframework.util.ObjectUtils;\n \n /**\n- * {@link EnableAutoConfiguration Auto-configuration} for an embedded servlet containers.\n+ * {@link EnableAutoConfiguration Auto-configuration} for servlet web servers.\n  *\n  * @author Phillip Webb\n  * @author Dave Syer\n@@ -68,13 +68,13 @@ import org.springframework.util.ObjectUtils;\n @ConditionalOnWebApplication(type = Type.SERVLET)\n @EnableConfigurationProperties(ServerProperties.class)\n @Import(BeanPostProcessorsRegistrar.class)\n-public class EmbeddedServletContainerAutoConfiguration {\n+public class ServletWebServerFactoryAutoConfiguration {\n \n \t@Bean\n \t@ConditionalOnMissingBean\n-\tpublic DefaultServletContainerCustomizer serverPropertiesServletContainerCustomizer(\n+\tpublic DefaultServletWebServerFactoryCustomizer serverPropertiesWebServerFactoryCustomizer(\n \t\t\tServerProperties serverProperties) {\n-\t\treturn new DefaultServletContainerCustomizer(serverProperties);\n+\t\treturn new DefaultServletWebServerFactoryCustomizer(serverProperties);\n \t}\n \n \t/**\n@@ -82,12 +82,12 @@ public class EmbeddedServletContainerAutoConfiguration {\n \t */\n \t@Configuration\n \t@ConditionalOnClass({ Servlet.class, Tomcat.class })\n-\t@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)\n+\t@ConditionalOnMissingBean(value = ServletWebServerFactory.class, search = SearchStrategy.CURRENT)\n \tpublic static class EmbeddedTomcat {\n \n \t\t@Bean\n-\t\tpublic TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() {\n-\t\t\treturn new TomcatEmbeddedServletContainerFactory();\n+\t\tpublic TomcatServletWebServerFactory tomcatServletWebServerFactory() {\n+\t\t\treturn new TomcatServletWebServerFactory();\n \t\t}\n \n \t}\n@@ -98,12 +98,12 @@ public class EmbeddedServletContainerAutoConfiguration {\n \t@Configuration\n \t@ConditionalOnClass({ Servlet.class, Server.class, Loader.class,\n \t\t\tWebAppContext.class })\n-\t@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)\n+\t@ConditionalOnMissingBean(value = ServletWebServerFactory.class, search = SearchStrategy.CURRENT)\n \tpublic static class EmbeddedJetty {\n \n \t\t@Bean\n-\t\tpublic JettyEmbeddedServletContainerFactory jettyEmbeddedServletContainerFactory() {\n-\t\t\treturn new JettyEmbeddedServletContainerFactory();\n+\t\tpublic JettyServletWebServerFactory JettyServletWebServerFactory() {\n+\t\t\treturn new JettyServletWebServerFactory();\n \t\t}\n \n \t}\n@@ -113,18 +113,18 @@ public class EmbeddedServletContainerAutoConfiguration {\n \t */\n \t@Configuration\n \t@ConditionalOnClass({ Servlet.class, Undertow.class, SslClientAuthMode.class })\n-\t@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)\n+\t@ConditionalOnMissingBean(value = ServletWebServerFactory.class, search = SearchStrategy.CURRENT)\n \tpublic static class EmbeddedUndertow {\n \n \t\t@Bean\n-\t\tpublic UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory() {\n-\t\t\treturn new UndertowEmbeddedServletContainerFactory();\n+\t\tpublic UndertowServletWebServerFactory undertowServletWebServerFactory() {\n+\t\t\treturn new UndertowServletWebServerFactory();\n \t\t}\n \n \t}\n \n \t/**\n-\t * Registers a {@link EmbeddedServletContainerCustomizerBeanPostProcessor}. Registered\n+\t * Registers a {@link ServletWebServerFactoryCustomizerBeanPostProcessor}. Registered\n \t * via {@link ImportBeanDefinitionRegistrar} for early registration.\n \t */\n \tpublic static class BeanPostProcessorsRegistrar\n@@ -146,8 +146,8 @@ public class EmbeddedServletContainerAutoConfiguration {\n \t\t\t\treturn;\n \t\t\t}\n \t\t\tregisterSyntheticBeanIfMissing(registry,\n-\t\t\t\t\t"embeddedServletContainerCustomizerBeanPostProcessor",\n-\t\t\t\t\tEmbeddedServletContainerCustomizerBeanPostProcessor.class);\n+\t\t\t\t\t"ServletWebServerCustomizerBeanPostProcessor",\n+\t\t\t\t\tServletWebServerFactoryCustomizerBeanPostProcessor.class);\n \t\t\tregisterSyntheticBeanIfMissing(registry,\n \t\t\t\t\t"errorPageRegistrarBeanPostProcessor",\n \t\t\t\t\tErrorPageRegistrarBeanPostProcessor.class);\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web;\n\nimport javax.servlet.Servlet;\n\nimport io.undertow.Undertow;\nimport org.apache.catalina.startup.Tomcat;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.util.Loader;\nimport org.eclipse.jetty.webapp.WebAppContext;\nimport org.xnio.SslClientAuthMode;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistry;\nimport org.springframework.beans.factory.support.RootBeanDefinition;\nimport org.springframework.boot.autoconfigure.AutoConfigureOrder;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.boot.autoconfigure.web.ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactory;\nimport org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;\nimport org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;\nimport org.springframework.boot.web.server.ErrorPageRegistrarBeanPostProcessor;\nimport org.springframework.boot.web.servlet.server.ServletWebServerFactory;\nimport org.springframework.boot.web.servlet.server.ServletWebServerFactoryCustomizerBeanPostProcessor;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.ImportBeanDefinitionRegistrar;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.type.AnnotationMetadata;\nimport org.springframework.util.ObjectUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for servlet web servers.\n *\n * @author Phillip Webb\n * @author Dave Syer\n * @author Ivan Sopov\n * @author Brian Clozel\n * @author Stephane Nicoll\n */\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)\n@Configuration\n@ConditionalOnWebApplication(type = Type.SERVLET)\n@EnableConfigurationProperties(ServerProperties.class)\n@Import(BeanPostProcessorsRegistrar.class)\npublic class ServletWebServerFactoryAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic DefaultServletWebServerFactoryCustomizer serverPropertiesWebServerFactoryCustomizer(\n\t\t\tServerProperties serverProperties) {\n\t\treturn new DefaultServletWebServerFactoryCustomizer(serverProperties);\n\t}\n\n\t/**\n\t * Nested configuration if Tomcat is being used.\n\t */\n\t@Configuration\n\t@ConditionalOnClass({ Servlet.class, Tomcat.class })\n\t@ConditionalOnMissingBean(value = ServletWebServerFactory.class, search = SearchStrategy.CURRENT)\n\tpublic static class EmbeddedTomcat {\n\n\t\t@Bean\n\t\tpublic TomcatServletWebServerFactory tomcatServletWebServerFactory() {\n\t\t\treturn new TomcatServletWebServerFactory();\n\t\t}\n\n\t}\n\n\t/**\n\t * Nested configuration if Jetty is being used.\n\t */\n\t@Configuration\n\t@ConditionalOnClass({ Servlet.class, Server.class, Loader.class,\n\t\t\tWebAppContext.class })\n\t@ConditionalOnMissingBean(value = ServletWebServerFactory.class, search = SearchStrategy.CURRENT)\n\tpublic static class EmbeddedJetty {\n\n\t\t@Bean\n\t\tpublic JettyServletWebServerFactory JettyServletWebServerFactory() {\n\t\t\treturn new JettyServletWebServerFactory();\n\t\t}\n\n\t}\n\n\t/**\n\t * Nested configuration if Undertow is being used.\n\t */\n\t@Configuration\n\t@ConditionalOnClass({ Servlet.class, Undertow.class, SslClientAuthMode.class })\n\t@ConditionalOnMissingBean(value = ServletWebServerFactory.class, search = SearchStrategy.CURRENT)\n\tpublic static class EmbeddedUndertow {\n\n\t\t@Bean\n\t\tpublic UndertowServletWebServerFactory undertowServletWebServerFactory() {\n\t\t\treturn new UndertowServletWebServerFactory();\n\t\t}\n\n\t}\n\n\t/**\n\t * Registers a {@link ServletWebServerFactoryCustomizerBeanPostProcessor}. Registered\n\t * via {@link ImportBeanDefinitionRegistrar} for early registration.\n\t */\n\tpublic static class BeanPostProcessorsRegistrar\n\t\t\timplements ImportBeanDefinitionRegistrar, BeanFactoryAware {\n\n\t\tprivate ConfigurableListableBeanFactory beanFactory;\n\n\t\t@Override\n\t\tpublic void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n\t\t\tif (beanFactory instanceof ConfigurableListableBeanFactory) {\n\t\t\t\tthis.beanFactory = (ConfigurableListableBeanFactory) beanFactory;\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void registerBeanDefinitions(AnnotationMetadata importingClassMetadata,\n\t\t\t\tBeanDefinitionRegistry registry) {\n\t\t\tif (this.beanFactory == null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tregisterSyntheticBeanIfMissing(registry,\n\t\t\t\t\t"ServletWebServerCustomizerBeanPostProcessor",\n\t\t\t\t\tServletWebServerFactoryCustomizerBeanPostProcessor.class);\n\t\t\tregisterSyntheticBeanIfMissing(registry,\n\t\t\t\t\t"errorPageRegistrarBeanPostProcessor",\n\t\t\t\t\tErrorPageRegistrarBeanPostProcessor.class);\n\t\t}\n\n\t\tprivate void registerSyntheticBeanIfMissing(BeanDefinitionRegistry registry,\n\t\t\t\tString name, Class<?> beanClass) {\n\t\t\tif (ObjectUtils.isEmpty(\n\t\t\t\t\tthis.beanFactory.getBeanNamesForType(beanClass, true, false))) {\n\t\t\t\tRootBeanDefinition beanDefinition = new RootBeanDefinition(beanClass);\n\t\t\t\tbeanDefinition.setSynthetic(true);\n\t\t\t\tregistry.registerBeanDefinition(name, beanDefinition);\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web;\n\nimport javax.servlet.Servlet;\n\nimport io.undertow.Undertow;\nimport org.apache.catalina.startup.Tomcat;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.util.Loader;\nimport org.eclipse.jetty.webapp.WebAppContext;\nimport org.xnio.SslClientAuthMode;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistry;\nimport org.springframework.beans.factory.support.RootBeanDefinition;\nimport org.springframework.boot.autoconfigure.AutoConfigureOrder;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration.BeanPostProcessorsRegistrar;\nimport org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizerBeanPostProcessor;\nimport org.springframework.boot.context.embedded.EmbeddedServletContainerFactory;\nimport org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainerFactory;\nimport org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;\nimport org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.web.servlet.ErrorPageRegistrarBeanPostProcessor;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.ImportBeanDefinitionRegistrar;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.type.AnnotationMetadata;\nimport org.springframework.util.ObjectUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for an embedded servlet containers.\n *\n * @author Phillip Webb\n * @author Dave Syer\n * @author Ivan Sopov\n * @author Brian Clozel\n * @author Stephane Nicoll\n */\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)\n@Configuration\n@ConditionalOnWebApplication(type = Type.SERVLET)\n@EnableConfigurationProperties(ServerProperties.class)\n@Import(BeanPostProcessorsRegistrar.class)\npublic class EmbeddedServletContainerAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic DefaultServletContainerCustomizer serverPropertiesServletContainerCustomizer(\n\t\t\tServerProperties serverProperties) {\n\t\treturn new DefaultServletContainerCustomizer(serverProperties);\n\t}\n\n\t/**\n\t * Nested configuration if Tomcat is being used.\n\t */\n\t@Configuration\n\t@ConditionalOnClass({ Servlet.class, Tomcat.class })\n\t@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)\n\tpublic static class EmbeddedTomcat {\n\n\t\t@Bean\n\t\tpublic TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() {\n\t\t\treturn new TomcatEmbeddedServletContainerFactory();\n\t\t}\n\n\t}\n\n\t/**\n\t * Nested configuration if Jetty is being used.\n\t */\n\t@Configuration\n\t@ConditionalOnClass({ Servlet.class, Server.class, Loader.class,\n\t\t\tWebAppContext.class })\n\t@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)\n\tpublic static class EmbeddedJetty {\n\n\t\t@Bean\n\t\tpublic JettyEmbeddedServletContainerFactory jettyEmbeddedServletContainerFactory() {\n\t\t\treturn new JettyEmbeddedServletContainerFactory();\n\t\t}\n\n\t}\n\n\t/**\n\t * Nested configuration if Undertow is being used.\n\t */\n\t@Configuration\n\t@ConditionalOnClass({ Servlet.class, Undertow.class, SslClientAuthMode.class })\n\t@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)\n\tpublic static class EmbeddedUndertow {\n\n\t\t@Bean\n\t\tpublic UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory() {\n\t\t\treturn new UndertowEmbeddedServletContainerFactory();\n\t\t}\n\n\t}\n\n\t/**\n\t * Registers a {@link EmbeddedServletContainerCustomizerBeanPostProcessor}. Registered\n\t * via {@link ImportBeanDefinitionRegistrar} for early registration.\n\t */\n\tpublic static class BeanPostProcessorsRegistrar\n\t\t\timplements ImportBeanDefinitionRegistrar, BeanFactoryAware {\n\n\t\tprivate ConfigurableListableBeanFactory beanFactory;\n\n\t\t@Override\n\t\tpublic void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n\t\t\tif (beanFactory instanceof ConfigurableListableBeanFactory) {\n\t\t\t\tthis.beanFactory = (ConfigurableListableBeanFactory) beanFactory;\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void registerBeanDefinitions(AnnotationMetadata importingClassMetadata,\n\t\t\t\tBeanDefinitionRegistry registry) {\n\t\t\tif (this.beanFactory == null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tregisterSyntheticBeanIfMissing(registry,\n\t\t\t\t\t"embeddedServletContainerCustomizerBeanPostProcessor",\n\t\t\t\t\tEmbeddedServletContainerCustomizerBeanPostProcessor.class);\n\t\t\tregisterSyntheticBeanIfMissing(registry,\n\t\t\t\t\t"errorPageRegistrarBeanPostProcessor",\n\t\t\t\t\tErrorPageRegistrarBeanPostProcessor.class);\n\t\t}\n\n\t\tprivate void registerSyntheticBeanIfMissing(BeanDefinitionRegistry registry,\n\t\t\t\tString name, Class<?> beanClass) {\n\t\t\tif (ObjectUtils.isEmpty(\n\t\t\t\t\tthis.beanFactory.getBeanNamesForType(beanClass, true, false))) {\n\t\t\t\tRootBeanDefinition beanDefinition = new RootBeanDefinition(beanClass);\n\t\t\t\tbeanDefinition.setSynthetic(true);\n\t\t\t\tregistry.registerBeanDefinition(name, beanDefinition);\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
