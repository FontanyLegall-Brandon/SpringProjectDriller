{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/GsonHttpMessageConvertersConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/GsonHttpMessageConvertersConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -68,16 +68,16 @@ class GsonHttpMessageConvertersConfiguration {\n \n \t\t}\n \n-\t\t@Conditional(JacksonAndJsonbUnavailable.class)\n+\t\t@Conditional(JacksonAndJsonbUnavailableCondition.class)\n \t\tstatic class JacksonJsonbUnavailable {\n \n \t\t}\n \n \t}\n \n-\tprivate static class JacksonAndJsonbUnavailable extends NoneNestedConditions {\n+\tprivate static class JacksonAndJsonbUnavailableCondition extends NoneNestedConditions {\n \n-\t\tJacksonAndJsonbUnavailable() {\n+\t\tJacksonAndJsonbUnavailableCondition() {\n \t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n \t\t}\n \n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.http;\n\nimport com.google.gson.Gson;\n\nimport org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.NoneNestedConditions;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.converter.json.GsonHttpMessageConverter;\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\n\n/**\n * Configuration for HTTP Message converters that use Gson.\n *\n * @author Andy Wilkinson\n * @author Eddú Meléndez\n * @since 1.2.2\n */\n@Configuration\n@ConditionalOnClass(Gson.class)\nclass GsonHttpMessageConvertersConfiguration {\n\n\t@Configuration\n\t@ConditionalOnBean(Gson.class)\n\t@Conditional(PreferGsonOrJacksonAndJsonbUnavailableCondition.class)\n\tprotected static class GsonHttpMessageConverterConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic GsonHttpMessageConverter gsonHttpMessageConverter(Gson gson) {\n\t\t\tGsonHttpMessageConverter converter = new GsonHttpMessageConverter();\n\t\t\tconverter.setGson(gson);\n\t\t\treturn converter;\n\t\t}\n\n\t}\n\n\tprivate static class PreferGsonOrJacksonAndJsonbUnavailableCondition\n\t\t\textends AnyNestedCondition {\n\n\t\tPreferGsonOrJacksonAndJsonbUnavailableCondition() {\n\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n\t\t}\n\n\t\t@ConditionalOnProperty(name = HttpMessageConvertersAutoConfiguration.PREFERRED_MAPPER_PROPERTY, havingValue = "gson")\n\t\tstatic class GsonPreferred {\n\n\t\t}\n\n\t\t@Conditional(JacksonAndJsonbUnavailableCondition.class)\n\t\tstatic class JacksonJsonbUnavailable {\n\n\t\t}\n\n\t}\n\n\tprivate static class JacksonAndJsonbUnavailableCondition extends NoneNestedConditions {\n\n\t\tJacksonAndJsonbUnavailableCondition() {\n\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n\t\t}\n\n\t\t@ConditionalOnBean(MappingJackson2HttpMessageConverter.class)\n\t\tstatic class JacksonAvailable {\n\n\t\t}\n\n\t\t@ConditionalOnProperty(name = HttpMessageConvertersAutoConfiguration.PREFERRED_MAPPER_PROPERTY, havingValue = "jsonb")\n\t\tstatic class JsonbPreferred {\n\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.http;\n\nimport com.google.gson.Gson;\n\nimport org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.NoneNestedConditions;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.converter.json.GsonHttpMessageConverter;\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\n\n/**\n * Configuration for HTTP Message converters that use Gson.\n *\n * @author Andy Wilkinson\n * @author Eddú Meléndez\n * @since 1.2.2\n */\n@Configuration\n@ConditionalOnClass(Gson.class)\nclass GsonHttpMessageConvertersConfiguration {\n\n\t@Configuration\n\t@ConditionalOnBean(Gson.class)\n\t@Conditional(PreferGsonOrJacksonAndJsonbUnavailableCondition.class)\n\tprotected static class GsonHttpMessageConverterConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic GsonHttpMessageConverter gsonHttpMessageConverter(Gson gson) {\n\t\t\tGsonHttpMessageConverter converter = new GsonHttpMessageConverter();\n\t\t\tconverter.setGson(gson);\n\t\t\treturn converter;\n\t\t}\n\n\t}\n\n\tprivate static class PreferGsonOrJacksonAndJsonbUnavailableCondition\n\t\t\textends AnyNestedCondition {\n\n\t\tPreferGsonOrJacksonAndJsonbUnavailableCondition() {\n\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n\t\t}\n\n\t\t@ConditionalOnProperty(name = HttpMessageConvertersAutoConfiguration.PREFERRED_MAPPER_PROPERTY, havingValue = "gson")\n\t\tstatic class GsonPreferred {\n\n\t\t}\n\n\t\t@Conditional(JacksonAndJsonbUnavailable.class)\n\t\tstatic class JacksonJsonbUnavailable {\n\n\t\t}\n\n\t}\n\n\tprivate static class JacksonAndJsonbUnavailable extends NoneNestedConditions {\n\n\t\tJacksonAndJsonbUnavailable() {\n\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n\t\t}\n\n\t\t@ConditionalOnBean(MappingJackson2HttpMessageConverter.class)\n\t\tstatic class JacksonAvailable {\n\n\t\t}\n\n\t\t@ConditionalOnProperty(name = HttpMessageConvertersAutoConfiguration.PREFERRED_MAPPER_PROPERTY, havingValue = "jsonb")\n\t\tstatic class JsonbPreferred {\n\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
