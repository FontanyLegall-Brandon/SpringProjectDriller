{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,7 +16,11 @@\n \n package org.springframework.boot.autoconfigure;\n \n+import static org.springframework.util.StringUtils.commaDelimitedListToStringArray;\n+import static org.springframework.util.StringUtils.trimAllWhitespace;\n+\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.SearchStrategy;\n import org.springframework.boot.bind.RelaxedPropertyResolver;\n import org.springframework.context.EnvironmentAware;\n import org.springframework.context.MessageSource;\n@@ -28,16 +32,13 @@ import org.springframework.core.annotation.Order;\n import org.springframework.core.env.Environment;\n import org.springframework.util.StringUtils;\n \n-import static org.springframework.util.StringUtils.commaDelimitedListToStringArray;\n-import static org.springframework.util.StringUtils.trimAllWhitespace;\n-\n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for {@link MessageSource}.\n- * \n+ *\n  * @author Dave Syer\n  */\n @Configuration\n-@ConditionalOnMissingBean(MessageSource.class)\n+@ConditionalOnMissingBean(value=MessageSource.class, search=SearchStrategy.CURRENT)\n @Order(Ordered.HIGHEST_PRECEDENCE)\n public class MessageSourceAutoConfiguration implements EnvironmentAware {\n \n@@ -54,7 +55,7 @@ public class MessageSourceAutoConfiguration implements EnvironmentAware {\n \t\tString basename = this.environment.getProperty("basename", "messages");\n \t\tif (StringUtils.hasText(basename)) {\n \t\t\tmessageSource\n-\t\t\t\t\t.setBasenames(commaDelimitedListToStringArray(trimAllWhitespace(basename)));\n+\t\t\t.setBasenames(commaDelimitedListToStringArray(trimAllWhitespace(basename)));\n \t\t}\n \t\tString encoding = this.environment.getProperty("encoding", "utf-8");\n \t\tmessageSource.setDefaultEncoding(encoding);\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure;\n\nimport static org.springframework.util.StringUtils.commaDelimitedListToStringArray;\nimport static org.springframework.util.StringUtils.trimAllWhitespace;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.boot.bind.RelaxedPropertyResolver;\nimport org.springframework.context.EnvironmentAware;\nimport org.springframework.context.MessageSource;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.support.ResourceBundleMessageSource;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.env.Environment;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link MessageSource}.\n *\n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnMissingBean(value=MessageSource.class, search=SearchStrategy.CURRENT)\n@Order(Ordered.HIGHEST_PRECEDENCE)\npublic class MessageSourceAutoConfiguration implements EnvironmentAware {\n\n\tprivate RelaxedPropertyResolver environment;\n\n\t@Override\n\tpublic void setEnvironment(Environment environment) {\n\t\tthis.environment = new RelaxedPropertyResolver(environment, "spring.messages.");\n\t}\n\n\t@Bean\n\tpublic MessageSource messageSource() {\n\t\tResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\n\t\tString basename = this.environment.getProperty("basename", "messages");\n\t\tif (StringUtils.hasText(basename)) {\n\t\t\tmessageSource\n\t\t\t.setBasenames(commaDelimitedListToStringArray(trimAllWhitespace(basename)));\n\t\t}\n\t\tString encoding = this.environment.getProperty("encoding", "utf-8");\n\t\tmessageSource.setDefaultEncoding(encoding);\n\t\tmessageSource.setCacheSeconds(this.environment.getProperty("cacheSeconds",\n\t\t\t\tInteger.class, -1));\n\t\treturn messageSource;\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.bind.RelaxedPropertyResolver;\nimport org.springframework.context.EnvironmentAware;\nimport org.springframework.context.MessageSource;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.support.ResourceBundleMessageSource;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.env.Environment;\nimport org.springframework.util.StringUtils;\n\nimport static org.springframework.util.StringUtils.commaDelimitedListToStringArray;\nimport static org.springframework.util.StringUtils.trimAllWhitespace;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link MessageSource}.\n * \n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnMissingBean(MessageSource.class)\n@Order(Ordered.HIGHEST_PRECEDENCE)\npublic class MessageSourceAutoConfiguration implements EnvironmentAware {\n\n\tprivate RelaxedPropertyResolver environment;\n\n\t@Override\n\tpublic void setEnvironment(Environment environment) {\n\t\tthis.environment = new RelaxedPropertyResolver(environment, "spring.messages.");\n\t}\n\n\t@Bean\n\tpublic MessageSource messageSource() {\n\t\tResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\n\t\tString basename = this.environment.getProperty("basename", "messages");\n\t\tif (StringUtils.hasText(basename)) {\n\t\t\tmessageSource\n\t\t\t\t\t.setBasenames(commaDelimitedListToStringArray(trimAllWhitespace(basename)));\n\t\t}\n\t\tString encoding = this.environment.getProperty("encoding", "utf-8");\n\t\tmessageSource.setDefaultEncoding(encoding);\n\t\tmessageSource.setCacheSeconds(this.environment.getProperty("cacheSeconds",\n\t\t\t\tInteger.class, -1));\n\t\treturn messageSource;\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
