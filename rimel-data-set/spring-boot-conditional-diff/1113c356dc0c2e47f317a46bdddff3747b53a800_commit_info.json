{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/reactive/ReactiveOAuth2ClientAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/reactive/ReactiveOAuth2ClientAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -25,6 +25,8 @@ import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.autoconfigure.condition.NoneNestedConditions;\n import org.springframework.boot.autoconfigure.security.oauth2.client.ClientsConfiguredCondition;\n import org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties;\n import org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter;\n@@ -52,6 +54,7 @@ import org.springframework.security.oauth2.client.web.server.ServerOAuth2Authori\n @Configuration\n @AutoConfigureBefore(ReactiveSecurityAutoConfiguration.class)\n @EnableConfigurationProperties(OAuth2ClientProperties.class)\n+@Conditional(ReactiveOAuth2ClientAutoConfiguration.NonServletApplicationCondition.class)\n @ConditionalOnClass({ Flux.class, EnableWebFluxSecurity.class, ClientRegistration.class })\n public class ReactiveOAuth2ClientAutoConfiguration {\n \n@@ -89,4 +92,17 @@ public class ReactiveOAuth2ClientAutoConfiguration {\n \t\t\t\tauthorizedClientService);\n \t}\n \n+\tstatic class NonServletApplicationCondition extends NoneNestedConditions {\n+\n+\t\tNonServletApplicationCondition() {\n+\t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION);\n+\t\t}\n+\n+\t\t@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n+\t\tstatic class ServletApplicationCondition {\n+\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.boot.autoconfigure.security.oauth2.client.reactive;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport reactor.core.publisher.Flux;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.NoneNestedConditions;\nimport org.springframework.boot.autoconfigure.security.oauth2.client.ClientsConfiguredCondition;\nimport org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties;\nimport org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter;\nimport org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;\nimport org.springframework.security.oauth2.client.InMemoryReactiveOAuth2AuthorizedClientService;\nimport org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientService;\nimport org.springframework.security.oauth2.client.registration.ClientRegistration;\nimport org.springframework.security.oauth2.client.registration.InMemoryReactiveClientRegistrationRepository;\nimport org.springframework.security.oauth2.client.registration.ReactiveClientRegistrationRepository;\nimport org.springframework.security.oauth2.client.web.server.AuthenticatedPrincipalServerOAuth2AuthorizedClientRepository;\nimport org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizedClientRepository;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Security\'s Reactive\n * OAuth2 client.\n *\n * @author Madhura Bhave\n * @since 2.1.0\n */\n@Configuration\n@AutoConfigureBefore(ReactiveSecurityAutoConfiguration.class)\n@EnableConfigurationProperties(OAuth2ClientProperties.class)\n@Conditional(ReactiveOAuth2ClientAutoConfiguration.NonServletApplicationCondition.class)\n@ConditionalOnClass({ Flux.class, EnableWebFluxSecurity.class, ClientRegistration.class })\npublic class ReactiveOAuth2ClientAutoConfiguration {\n\n\tprivate final OAuth2ClientProperties properties;\n\n\tpublic ReactiveOAuth2ClientAutoConfiguration(OAuth2ClientProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@Conditional(ClientsConfiguredCondition.class)\n\t@ConditionalOnMissingBean(ReactiveClientRegistrationRepository.class)\n\tpublic InMemoryReactiveClientRegistrationRepository clientRegistrationRepository() {\n\t\tList<ClientRegistration> registrations = new ArrayList<>(\n\t\t\t\tOAuth2ClientPropertiesRegistrationAdapter\n\t\t\t\t\t\t.getClientRegistrations(this.properties).values());\n\t\treturn new InMemoryReactiveClientRegistrationRepository(registrations);\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(ReactiveClientRegistrationRepository.class)\n\t@ConditionalOnMissingBean\n\tpublic ReactiveOAuth2AuthorizedClientService authorizedClientService(\n\t\t\tReactiveClientRegistrationRepository clientRegistrationRepository) {\n\t\treturn new InMemoryReactiveOAuth2AuthorizedClientService(\n\t\t\t\tclientRegistrationRepository);\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(ReactiveOAuth2AuthorizedClientService.class)\n\t@ConditionalOnMissingBean\n\tpublic ServerOAuth2AuthorizedClientRepository authorizedClientRepository(\n\t\t\tReactiveOAuth2AuthorizedClientService authorizedClientService) {\n\t\treturn new AuthenticatedPrincipalServerOAuth2AuthorizedClientRepository(\n\t\t\t\tauthorizedClientService);\n\t}\n\n\tstatic class NonServletApplicationCondition extends NoneNestedConditions {\n\n\t\tNonServletApplicationCondition() {\n\t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION);\n\t\t}\n\n\t\t@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n\t\tstatic class ServletApplicationCondition {\n\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.boot.autoconfigure.security.oauth2.client.reactive;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport reactor.core.publisher.Flux;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.security.oauth2.client.ClientsConfiguredCondition;\nimport org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties;\nimport org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter;\nimport org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;\nimport org.springframework.security.oauth2.client.InMemoryReactiveOAuth2AuthorizedClientService;\nimport org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientService;\nimport org.springframework.security.oauth2.client.registration.ClientRegistration;\nimport org.springframework.security.oauth2.client.registration.InMemoryReactiveClientRegistrationRepository;\nimport org.springframework.security.oauth2.client.registration.ReactiveClientRegistrationRepository;\nimport org.springframework.security.oauth2.client.web.server.AuthenticatedPrincipalServerOAuth2AuthorizedClientRepository;\nimport org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizedClientRepository;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Security\'s Reactive\n * OAuth2 client.\n *\n * @author Madhura Bhave\n * @since 2.1.0\n */\n@Configuration\n@AutoConfigureBefore(ReactiveSecurityAutoConfiguration.class)\n@EnableConfigurationProperties(OAuth2ClientProperties.class)\n@ConditionalOnClass({ Flux.class, EnableWebFluxSecurity.class, ClientRegistration.class })\npublic class ReactiveOAuth2ClientAutoConfiguration {\n\n\tprivate final OAuth2ClientProperties properties;\n\n\tpublic ReactiveOAuth2ClientAutoConfiguration(OAuth2ClientProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@Conditional(ClientsConfiguredCondition.class)\n\t@ConditionalOnMissingBean(ReactiveClientRegistrationRepository.class)\n\tpublic InMemoryReactiveClientRegistrationRepository clientRegistrationRepository() {\n\t\tList<ClientRegistration> registrations = new ArrayList<>(\n\t\t\t\tOAuth2ClientPropertiesRegistrationAdapter\n\t\t\t\t\t\t.getClientRegistrations(this.properties).values());\n\t\treturn new InMemoryReactiveClientRegistrationRepository(registrations);\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(ReactiveClientRegistrationRepository.class)\n\t@ConditionalOnMissingBean\n\tpublic ReactiveOAuth2AuthorizedClientService authorizedClientService(\n\t\t\tReactiveClientRegistrationRepository clientRegistrationRepository) {\n\t\treturn new InMemoryReactiveOAuth2AuthorizedClientService(\n\t\t\t\tclientRegistrationRepository);\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(ReactiveOAuth2AuthorizedClientService.class)\n\t@ConditionalOnMissingBean\n\tpublic ServerOAuth2AuthorizedClientRepository authorizedClientRepository(\n\t\t\tReactiveOAuth2AuthorizedClientService authorizedClientService) {\n\t\treturn new AuthenticatedPrincipalServerOAuth2AuthorizedClientRepository(\n\t\t\t\tauthorizedClientService);\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
