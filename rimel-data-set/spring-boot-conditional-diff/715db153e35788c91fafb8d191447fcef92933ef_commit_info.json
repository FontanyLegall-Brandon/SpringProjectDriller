{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/SystemMetricsAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/SystemMetricsAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2018 the original author or authors.\n+ * Copyright 2012-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -26,7 +26,6 @@ import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n@@ -43,21 +42,18 @@ import org.springframework.context.annotation.Configuration;\n public class SystemMetricsAutoConfiguration {\n \n \t@Bean\n-\t@ConditionalOnProperty(value = "management.metrics.binders.uptime.enabled", matchIfMissing = true)\n \t@ConditionalOnMissingBean\n \tpublic UptimeMetrics uptimeMetrics() {\n \t\treturn new UptimeMetrics();\n \t}\n \n \t@Bean\n-\t@ConditionalOnProperty(value = "management.metrics.binders.processor.enabled", matchIfMissing = true)\n \t@ConditionalOnMissingBean\n \tpublic ProcessorMetrics processorMetrics() {\n \t\treturn new ProcessorMetrics();\n \t}\n \n \t@Bean\n-\t@ConditionalOnProperty(name = "management.metrics.binders.files.enabled", matchIfMissing = true)\n \t@ConditionalOnMissingBean\n \tpublic FileDescriptorMetrics fileDescriptorMetrics() {\n \t\treturn new FileDescriptorMetrics();\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics;\n\nimport io.micrometer.core.instrument.MeterRegistry;\nimport io.micrometer.core.instrument.binder.system.FileDescriptorMetrics;\nimport io.micrometer.core.instrument.binder.system.ProcessorMetrics;\nimport io.micrometer.core.instrument.binder.system.UptimeMetrics;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for system metrics.\n *\n * @author Stephane Nicoll\n * @since 2.1.0\n */\n@Configuration\n@AutoConfigureAfter(MetricsAutoConfiguration.class)\n@ConditionalOnClass(MeterRegistry.class)\n@ConditionalOnBean(MeterRegistry.class)\npublic class SystemMetricsAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic UptimeMetrics uptimeMetrics() {\n\t\treturn new UptimeMetrics();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic ProcessorMetrics processorMetrics() {\n\t\treturn new ProcessorMetrics();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic FileDescriptorMetrics fileDescriptorMetrics() {\n\t\treturn new FileDescriptorMetrics();\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics;\n\nimport io.micrometer.core.instrument.MeterRegistry;\nimport io.micrometer.core.instrument.binder.system.FileDescriptorMetrics;\nimport io.micrometer.core.instrument.binder.system.ProcessorMetrics;\nimport io.micrometer.core.instrument.binder.system.UptimeMetrics;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for system metrics.\n *\n * @author Stephane Nicoll\n * @since 2.1.0\n */\n@Configuration\n@AutoConfigureAfter(MetricsAutoConfiguration.class)\n@ConditionalOnClass(MeterRegistry.class)\n@ConditionalOnBean(MeterRegistry.class)\npublic class SystemMetricsAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnProperty(value = "management.metrics.binders.uptime.enabled", matchIfMissing = true)\n\t@ConditionalOnMissingBean\n\tpublic UptimeMetrics uptimeMetrics() {\n\t\treturn new UptimeMetrics();\n\t}\n\n\t@Bean\n\t@ConditionalOnProperty(value = "management.metrics.binders.processor.enabled", matchIfMissing = true)\n\t@ConditionalOnMissingBean\n\tpublic ProcessorMetrics processorMetrics() {\n\t\treturn new ProcessorMetrics();\n\t}\n\n\t@Bean\n\t@ConditionalOnProperty(name = "management.metrics.binders.files.enabled", matchIfMissing = true)\n\t@ConditionalOnMissingBean\n\tpublic FileDescriptorMetrics fileDescriptorMetrics() {\n\t\treturn new FileDescriptorMetrics();\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
