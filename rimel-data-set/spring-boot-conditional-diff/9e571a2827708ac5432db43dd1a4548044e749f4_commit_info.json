{'_old_path': None, '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/AbstractNestedConditionTest.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2012-2018 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.condition;\n+\n+import org.junit.Test;\n+\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Conditional;\n+import org.springframework.context.annotation.Configuration;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+/**\n+ * Tests for {@link AbstractNestedCondition}.\n+ *\n+ * @author Razib Shahriar\n+ */\n+public class AbstractNestedConditionTest {\n+\n+\tprivate final ApplicationContextRunner contextRunner = new ApplicationContextRunner();\n+\n+\t@Test\n+\tpublic void validMemberPhaseEvaluatesCorrectly() {\n+\t\tthis.contextRunner.withUserConfiguration(ValidConfig.class)\n+\t\t\t\t.run((context) -> assertThat(context).hasBean("myBean"));\n+\t}\n+\n+\t@Test\n+\tpublic void invalidMemberPhaseThrowsIllegalState() {\n+\t\tthis.contextRunner.withUserConfiguration(InvalidConfig.class).run((context) -> {\n+\t\t\tassertThat(context).hasFailed();\n+\t\t\tassertThat(context.getStartupFailure().getCause())\n+\t\t\t\t\t.isInstanceOf(IllegalStateException.class)\n+\t\t\t\t\t.hasMessageContaining("Nested condition "\n+\t\t\t\t\t\t\t+ InvalidNestedCondition.class.getName()\n+\t\t\t\t\t\t\t+ " uses a configuration phase that is inappropriate for class "\n+\t\t\t\t\t\t\t+ OnBeanCondition.class.getName());\n+\t\t});\n+\t}\n+\n+\t@Test\n+\tpublic void invalidNestedMemberPhaseThrowsIllegalState() {\n+\t\tthis.contextRunner.withUserConfiguration(DoubleNestedConfig.class)\n+\t\t\t\t.run((context) -> {\n+\t\t\t\t\tassertThat(context).hasFailed();\n+\t\t\t\t\tassertThat(context.getStartupFailure().getCause())\n+\t\t\t\t\t\t\t.isInstanceOf(IllegalStateException.class)\n+\t\t\t\t\t\t\t.hasMessageContaining("Nested condition "\n+\t\t\t\t\t\t\t\t\t+ DoubleNestedCondition.class.getName()\n+\t\t\t\t\t\t\t\t\t+ " uses a configuration phase that is inappropriate for class "\n+\t\t\t\t\t\t\t\t\t+ ValidNestedCondition.class.getName());\n+\t\t\t\t});\n+\t}\n+\n+\tprivate AnnotationConfigApplicationContext load(Class<?> config) {\n+\t\tAnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n+\t\tcontext.register(config);\n+\t\tcontext.refresh();\n+\t\treturn context;\n+\t}\n+\n+\t@Configuration\n+\t@Conditional(ValidNestedCondition.class)\n+\tpublic static class ValidConfig {\n+\n+\t\t@Bean\n+\t\tpublic String myBean() {\n+\t\t\treturn "myBean";\n+\t\t}\n+\n+\t}\n+\n+\tstatic class ValidNestedCondition extends AbstractNestedCondition {\n+\n+\t\tValidNestedCondition() {\n+\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected ConditionOutcome getFinalMatchOutcome(\n+\t\t\t\tMemberMatchOutcomes memberOutcomes) {\n+\t\t\treturn ConditionOutcome.match();\n+\t\t}\n+\n+\t\t@ConditionalOnMissingBean(name = "myBean")\n+\t\tstatic class MissingMyBean {\n+\n+\t\t}\n+\n+\t}\n+\n+\t@Configuration\n+\t@Conditional(InvalidNestedCondition.class)\n+\tpublic static class InvalidConfig {\n+\n+\t\t@Bean\n+\t\tpublic String myBean() {\n+\t\t\treturn "myBean";\n+\t\t}\n+\n+\t}\n+\n+\tstatic class InvalidNestedCondition extends AbstractNestedCondition {\n+\n+\t\tInvalidNestedCondition() {\n+\t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION);\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected ConditionOutcome getFinalMatchOutcome(\n+\t\t\t\tMemberMatchOutcomes memberOutcomes) {\n+\t\t\treturn ConditionOutcome.match();\n+\t\t}\n+\n+\t\t@ConditionalOnMissingBean(name = "myBean")\n+\t\tstatic class MissingMyBean {\n+\n+\t\t}\n+\n+\t}\n+\n+\t@Configuration\n+\t@Conditional(DoubleNestedCondition.class)\n+\tpublic static class DoubleNestedConfig {\n+\n+\t}\n+\n+\tstatic class DoubleNestedCondition extends AbstractNestedCondition {\n+\n+\t\tDoubleNestedCondition() {\n+\t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION);\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected ConditionOutcome getFinalMatchOutcome(\n+\t\t\t\tMemberMatchOutcomes memberOutcomes) {\n+\t\t\treturn ConditionOutcome.match();\n+\t\t}\n+\n+\t\t@Conditional(ValidNestedCondition.class)\n+\t\tstatic class NestedConditionThatIsValid {\n+\n+\t\t}\n+\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport org.junit.Test;\n\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link AbstractNestedCondition}.\n *\n * @author Razib Shahriar\n */\npublic class AbstractNestedConditionTest {\n\n\tprivate final ApplicationContextRunner contextRunner = new ApplicationContextRunner();\n\n\t@Test\n\tpublic void validMemberPhaseEvaluatesCorrectly() {\n\t\tthis.contextRunner.withUserConfiguration(ValidConfig.class)\n\t\t\t\t.run((context) -> assertThat(context).hasBean("myBean"));\n\t}\n\n\t@Test\n\tpublic void invalidMemberPhaseThrowsIllegalState() {\n\t\tthis.contextRunner.withUserConfiguration(InvalidConfig.class).run((context) -> {\n\t\t\tassertThat(context).hasFailed();\n\t\t\tassertThat(context.getStartupFailure().getCause())\n\t\t\t\t\t.isInstanceOf(IllegalStateException.class)\n\t\t\t\t\t.hasMessageContaining("Nested condition "\n\t\t\t\t\t\t\t+ InvalidNestedCondition.class.getName()\n\t\t\t\t\t\t\t+ " uses a configuration phase that is inappropriate for class "\n\t\t\t\t\t\t\t+ OnBeanCondition.class.getName());\n\t\t});\n\t}\n\n\t@Test\n\tpublic void invalidNestedMemberPhaseThrowsIllegalState() {\n\t\tthis.contextRunner.withUserConfiguration(DoubleNestedConfig.class)\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tassertThat(context).hasFailed();\n\t\t\t\t\tassertThat(context.getStartupFailure().getCause())\n\t\t\t\t\t\t\t.isInstanceOf(IllegalStateException.class)\n\t\t\t\t\t\t\t.hasMessageContaining("Nested condition "\n\t\t\t\t\t\t\t\t\t+ DoubleNestedCondition.class.getName()\n\t\t\t\t\t\t\t\t\t+ " uses a configuration phase that is inappropriate for class "\n\t\t\t\t\t\t\t\t\t+ ValidNestedCondition.class.getName());\n\t\t\t\t});\n\t}\n\n\tprivate AnnotationConfigApplicationContext load(Class<?> config) {\n\t\tAnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n\t\tcontext.register(config);\n\t\tcontext.refresh();\n\t\treturn context;\n\t}\n\n\t@Configuration\n\t@Conditional(ValidNestedCondition.class)\n\tpublic static class ValidConfig {\n\n\t\t@Bean\n\t\tpublic String myBean() {\n\t\t\treturn "myBean";\n\t\t}\n\n\t}\n\n\tstatic class ValidNestedCondition extends AbstractNestedCondition {\n\n\t\tValidNestedCondition() {\n\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n\t\t}\n\n\t\t@Override\n\t\tprotected ConditionOutcome getFinalMatchOutcome(\n\t\t\t\tMemberMatchOutcomes memberOutcomes) {\n\t\t\treturn ConditionOutcome.match();\n\t\t}\n\n\t\t@ConditionalOnMissingBean(name = "myBean")\n\t\tstatic class MissingMyBean {\n\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@Conditional(InvalidNestedCondition.class)\n\tpublic static class InvalidConfig {\n\n\t\t@Bean\n\t\tpublic String myBean() {\n\t\t\treturn "myBean";\n\t\t}\n\n\t}\n\n\tstatic class InvalidNestedCondition extends AbstractNestedCondition {\n\n\t\tInvalidNestedCondition() {\n\t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION);\n\t\t}\n\n\t\t@Override\n\t\tprotected ConditionOutcome getFinalMatchOutcome(\n\t\t\t\tMemberMatchOutcomes memberOutcomes) {\n\t\t\treturn ConditionOutcome.match();\n\t\t}\n\n\t\t@ConditionalOnMissingBean(name = "myBean")\n\t\tstatic class MissingMyBean {\n\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@Conditional(DoubleNestedCondition.class)\n\tpublic static class DoubleNestedConfig {\n\n\t}\n\n\tstatic class DoubleNestedCondition extends AbstractNestedCondition {\n\n\t\tDoubleNestedCondition() {\n\t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION);\n\t\t}\n\n\t\t@Override\n\t\tprotected ConditionOutcome getFinalMatchOutcome(\n\t\t\t\tMemberMatchOutcomes memberOutcomes) {\n\t\t\treturn ConditionOutcome.match();\n\t\t}\n\n\t\t@Conditional(ValidNestedCondition.class)\n\t\tstatic class NestedConditionThatIsValid {\n\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
