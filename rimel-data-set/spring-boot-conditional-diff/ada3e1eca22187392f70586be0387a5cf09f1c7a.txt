@@ -0,0 +1,70 @@
+
+
+package org.springframework.boot.developertools.autoconfigure;
+
+import java.util.Collection;
+
+import javax.servlet.Filter;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
+import org.springframework.boot.context.properties.EnableConfigurationProperties;
+import org.springframework.boot.developertools.remote.server.AccessManager;
+import org.springframework.boot.developertools.remote.server.Dispatcher;
+import org.springframework.boot.developertools.remote.server.DispatcherFilter;
+import org.springframework.boot.developertools.remote.server.Handler;
+import org.springframework.boot.developertools.remote.server.HandlerMapper;
+import org.springframework.boot.developertools.remote.server.HttpStatusHandler;
+import org.springframework.boot.developertools.remote.server.UrlHandlerMapper;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.http.server.ServerHttpRequest;
+
+
+@Configuration
+@ConditionalOnProperty(prefix = , name = )
+@ConditionalOnClass({ Filter.class, ServerHttpRequest.class })
+@EnableConfigurationProperties(DeveloperToolsProperties.class)
+public class RemoteDeveloperToolsAutoConfiguration {
+
+	@Autowired
+	private DeveloperToolsProperties properties;
+
+	@Bean
+	public HandlerMapper remoteDeveloperToolsHealthCheckHandlerMapper() {
+		Handler handler = new HttpStatusHandler();
+		return new UrlHandlerMapper(this.properties.getRemote().getContextPath(), handler);
+	}
+
+	@Bean
+	@ConditionalOnMissingBean
+	public DispatcherFilter remoteDeveloperToolsDispatcherFilter(
+			Collection<HandlerMapper> mappers) {
+		Dispatcher dispatcher = new Dispatcher(AccessManager.PERMIT_ALL, mappers);
+		return new DispatcherFilter(dispatcher);
+	}
+
+}

