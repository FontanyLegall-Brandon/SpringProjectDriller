{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,34 +16,18 @@\n \n package org.springframework.boot.autoconfigure.data.elasticsearch;\n \n-import java.io.Closeable;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.LinkedHashMap;\n-import java.util.LinkedHashSet;\n-import java.util.Map;\n import java.util.Properties;\n-import java.util.Set;\n \n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n import org.elasticsearch.client.Client;\n import org.elasticsearch.client.transport.TransportClient;\n-import org.elasticsearch.common.settings.Settings;\n-import org.elasticsearch.node.InternalSettingsPreparer;\n-import org.elasticsearch.node.Node;\n-import org.elasticsearch.plugins.Plugin;\n \n-import org.springframework.beans.factory.DisposableBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.data.elasticsearch.client.NodeClientFactoryBean;\n import org.springframework.data.elasticsearch.client.TransportClientFactoryBean;\n-import org.springframework.util.ClassUtils;\n-import org.springframework.util.StringUtils;\n \n /**\n  * {@link org.springframework.boot.autoconfigure.EnableAutoConfiguration\n@@ -55,101 +39,25 @@ import org.springframework.util.StringUtils;\n  * @since 1.1.0\n  */\n @Configuration\n-@ConditionalOnClass({ Client.class, TransportClientFactoryBean.class,\n-\t\tNodeClientFactoryBean.class })\n+@ConditionalOnClass({ Client.class, TransportClientFactoryBean.class })\n+@ConditionalOnProperty(prefix = "spring.data.elasticsearch", name = "cluster-nodes", matchIfMissing = false)\n @EnableConfigurationProperties(ElasticsearchProperties.class)\n-public class ElasticsearchAutoConfiguration implements DisposableBean {\n-\n-\tprivate static final Map<String, String> DEFAULTS;\n-\n-\tstatic {\n-\t\tMap<String, String> defaults = new LinkedHashMap<>();\n-\t\tdefaults.put("http.enabled", String.valueOf(false));\n-\t\tdefaults.put("transport.type", "local");\n-\t\tdefaults.put("path.home", System.getProperty("user.dir"));\n-\t\tDEFAULTS = Collections.unmodifiableMap(defaults);\n-\t}\n-\n-\tprivate static final Set<String> TRANSPORT_PLUGINS;\n-\n-\tstatic {\n-\t\tSet<String> plugins = new LinkedHashSet<>();\n-\t\tplugins.add("org.elasticsearch.transport.Netty4Plugin");\n-\t\tplugins.add("org.elasticsearch.transport.Netty3Plugin");\n-\t\tTRANSPORT_PLUGINS = Collections.unmodifiableSet(plugins);\n-\t}\n-\n-\tprivate static final Log logger = LogFactory\n-\t\t\t.getLog(ElasticsearchAutoConfiguration.class);\n+public class ElasticsearchAutoConfiguration {\n \n \tprivate final ElasticsearchProperties properties;\n \n-\tprivate Closeable closeable;\n-\n \tpublic ElasticsearchAutoConfiguration(ElasticsearchProperties properties) {\n \t\tthis.properties = properties;\n \t}\n \n \t@Bean\n \t@ConditionalOnMissingBean\n-\tpublic Client elasticsearchClient() {\n-\t\ttry {\n-\t\t\treturn createClient();\n-\t\t}\n-\t\tcatch (Exception ex) {\n-\t\t\tthrow new IllegalStateException(ex);\n-\t\t}\n-\t}\n-\n-\tprivate Client createClient() throws Exception {\n-\t\tif (StringUtils.hasLength(this.properties.getClusterNodes())) {\n-\t\t\treturn createTransportClient();\n-\t\t}\n-\t\treturn createNodeClient();\n-\t}\n-\n-\tprivate Client createNodeClient() throws Exception {\n-\t\tSettings.Builder settings = Settings.builder();\n-\t\tfor (Map.Entry<String, String> entry : DEFAULTS.entrySet()) {\n-\t\t\tif (!this.properties.getProperties().containsKey(entry.getKey())) {\n-\t\t\t\tsettings.put(entry.getKey(), entry.getValue());\n-\t\t\t}\n-\t\t}\n-\t\tsettings.put(this.properties.getProperties());\n-\t\tsettings.put("cluster.name", this.properties.getClusterName());\n-\t\tNode node = createNode(settings.build());\n-\t\tthis.closeable = node;\n-\t\tnode.start();\n-\t\treturn node.client();\n-\t}\n-\n-\tprivate Node createNode(Settings settings) {\n-\t\tCollection<Class<? extends Plugin>> plugins = findPlugins();\n-\t\tif (plugins.isEmpty()) {\n-\t\t\treturn new Node(settings);\n-\t\t}\n-\t\treturn new PluggableNode(settings, plugins);\n-\t}\n-\n-\t@SuppressWarnings("unchecked")\n-\tprivate Collection<Class<? extends Plugin>> findPlugins() {\n-\t\tfor (String candidate : TRANSPORT_PLUGINS) {\n-\t\t\tif (ClassUtils.isPresent(candidate, null)) {\n-\t\t\t\tClass<? extends Plugin> pluginClass = (Class<? extends Plugin>) ClassUtils\n-\t\t\t\t\t\t.resolveClassName(candidate, null);\n-\t\t\t\treturn Collections.singleton(pluginClass);\n-\t\t\t}\n-\t\t}\n-\t\treturn Collections.emptySet();\n-\t}\n-\n-\tprivate Client createTransportClient() throws Exception {\n+\tpublic TransportClient elasticsearchClient() throws Exception {\n \t\tTransportClientFactoryBean factory = new TransportClientFactoryBean();\n \t\tfactory.setClusterNodes(this.properties.getClusterNodes());\n \t\tfactory.setProperties(createProperties());\n \t\tfactory.afterPropertiesSet();\n \t\tTransportClient client = factory.getObject();\n-\t\tthis.closeable = client;\n \t\treturn client;\n \t}\n \n@@ -160,34 +68,4 @@ public class ElasticsearchAutoConfiguration implements DisposableBean {\n \t\treturn properties;\n \t}\n \n-\t@Override\n-\tpublic void destroy() throws Exception {\n-\t\tif (this.closeable != null) {\n-\t\t\ttry {\n-\t\t\t\tif (logger.isInfoEnabled()) {\n-\t\t\t\t\tlogger.info("Closing Elasticsearch client");\n-\t\t\t\t}\n-\t\t\t\tthis.closeable.close();\n-\t\t\t}\n-\t\t\tcatch (final Exception ex) {\n-\t\t\t\tif (logger.isErrorEnabled()) {\n-\t\t\t\t\tlogger.error("Error closing Elasticsearch client: ", ex);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * {@link Node} subclass to support {@link Plugin Plugins}.\n-\t */\n-\tprivate static class PluggableNode extends Node {\n-\n-\t\tPluggableNode(Settings preparedSettings,\n-\t\t\t\tCollection<Class<? extends Plugin>> classpathPlugins) {\n-\t\t\tsuper(InternalSettingsPreparer.prepareEnvironment(preparedSettings, null),\n-\t\t\t\t\tclasspathPlugins);\n-\t\t}\n-\n-\t}\n-\n }\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.elasticsearch;\n\nimport java.util.Properties;\n\nimport org.elasticsearch.client.Client;\nimport org.elasticsearch.client.transport.TransportClient;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.elasticsearch.client.TransportClientFactoryBean;\n\n/**\n * {@link org.springframework.boot.autoconfigure.EnableAutoConfiguration\n * Auto-configuration} for Elasticsearch.\n *\n * @author Artur Konczak\n * @author Mohsin Husen\n * @author Andy Wilkinson\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass({ Client.class, TransportClientFactoryBean.class })\n@ConditionalOnProperty(prefix = "spring.data.elasticsearch", name = "cluster-nodes", matchIfMissing = false)\n@EnableConfigurationProperties(ElasticsearchProperties.class)\npublic class ElasticsearchAutoConfiguration {\n\n\tprivate final ElasticsearchProperties properties;\n\n\tpublic ElasticsearchAutoConfiguration(ElasticsearchProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic TransportClient elasticsearchClient() throws Exception {\n\t\tTransportClientFactoryBean factory = new TransportClientFactoryBean();\n\t\tfactory.setClusterNodes(this.properties.getClusterNodes());\n\t\tfactory.setProperties(createProperties());\n\t\tfactory.afterPropertiesSet();\n\t\tTransportClient client = factory.getObject();\n\t\treturn client;\n\t}\n\n\tprivate Properties createProperties() {\n\t\tProperties properties = new Properties();\n\t\tproperties.put("cluster.name", this.properties.getClusterName());\n\t\tproperties.putAll(this.properties.getProperties());\n\t\treturn properties;\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.elasticsearch;\n\nimport java.io.Closeable;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedHashSet;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.Set;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.elasticsearch.client.Client;\nimport org.elasticsearch.client.transport.TransportClient;\nimport org.elasticsearch.common.settings.Settings;\nimport org.elasticsearch.node.InternalSettingsPreparer;\nimport org.elasticsearch.node.Node;\nimport org.elasticsearch.plugins.Plugin;\n\nimport org.springframework.beans.factory.DisposableBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.elasticsearch.client.NodeClientFactoryBean;\nimport org.springframework.data.elasticsearch.client.TransportClientFactoryBean;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link org.springframework.boot.autoconfigure.EnableAutoConfiguration\n * Auto-configuration} for Elasticsearch.\n *\n * @author Artur Konczak\n * @author Mohsin Husen\n * @author Andy Wilkinson\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass({ Client.class, TransportClientFactoryBean.class,\n\t\tNodeClientFactoryBean.class })\n@EnableConfigurationProperties(ElasticsearchProperties.class)\npublic class ElasticsearchAutoConfiguration implements DisposableBean {\n\n\tprivate static final Map<String, String> DEFAULTS;\n\n\tstatic {\n\t\tMap<String, String> defaults = new LinkedHashMap<>();\n\t\tdefaults.put("http.enabled", String.valueOf(false));\n\t\tdefaults.put("transport.type", "local");\n\t\tdefaults.put("path.home", System.getProperty("user.dir"));\n\t\tDEFAULTS = Collections.unmodifiableMap(defaults);\n\t}\n\n\tprivate static final Set<String> TRANSPORT_PLUGINS;\n\n\tstatic {\n\t\tSet<String> plugins = new LinkedHashSet<>();\n\t\tplugins.add("org.elasticsearch.transport.Netty4Plugin");\n\t\tplugins.add("org.elasticsearch.transport.Netty3Plugin");\n\t\tTRANSPORT_PLUGINS = Collections.unmodifiableSet(plugins);\n\t}\n\n\tprivate static final Log logger = LogFactory\n\t\t\t.getLog(ElasticsearchAutoConfiguration.class);\n\n\tprivate final ElasticsearchProperties properties;\n\n\tprivate Closeable closeable;\n\n\tpublic ElasticsearchAutoConfiguration(ElasticsearchProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic Client elasticsearchClient() {\n\t\ttry {\n\t\t\treturn createClient();\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthrow new IllegalStateException(ex);\n\t\t}\n\t}\n\n\tprivate Client createClient() throws Exception {\n\t\tif (StringUtils.hasLength(this.properties.getClusterNodes())) {\n\t\t\treturn createTransportClient();\n\t\t}\n\t\treturn createNodeClient();\n\t}\n\n\tprivate Client createNodeClient() throws Exception {\n\t\tSettings.Builder settings = Settings.builder();\n\t\tfor (Map.Entry<String, String> entry : DEFAULTS.entrySet()) {\n\t\t\tif (!this.properties.getProperties().containsKey(entry.getKey())) {\n\t\t\t\tsettings.put(entry.getKey(), entry.getValue());\n\t\t\t}\n\t\t}\n\t\tsettings.put(this.properties.getProperties());\n\t\tsettings.put("cluster.name", this.properties.getClusterName());\n\t\tNode node = createNode(settings.build());\n\t\tthis.closeable = node;\n\t\tnode.start();\n\t\treturn node.client();\n\t}\n\n\tprivate Node createNode(Settings settings) {\n\t\tCollection<Class<? extends Plugin>> plugins = findPlugins();\n\t\tif (plugins.isEmpty()) {\n\t\t\treturn new Node(settings);\n\t\t}\n\t\treturn new PluggableNode(settings, plugins);\n\t}\n\n\t@SuppressWarnings("unchecked")\n\tprivate Collection<Class<? extends Plugin>> findPlugins() {\n\t\tfor (String candidate : TRANSPORT_PLUGINS) {\n\t\t\tif (ClassUtils.isPresent(candidate, null)) {\n\t\t\t\tClass<? extends Plugin> pluginClass = (Class<? extends Plugin>) ClassUtils\n\t\t\t\t\t\t.resolveClassName(candidate, null);\n\t\t\t\treturn Collections.singleton(pluginClass);\n\t\t\t}\n\t\t}\n\t\treturn Collections.emptySet();\n\t}\n\n\tprivate Client createTransportClient() throws Exception {\n\t\tTransportClientFactoryBean factory = new TransportClientFactoryBean();\n\t\tfactory.setClusterNodes(this.properties.getClusterNodes());\n\t\tfactory.setProperties(createProperties());\n\t\tfactory.afterPropertiesSet();\n\t\tTransportClient client = factory.getObject();\n\t\tthis.closeable = client;\n\t\treturn client;\n\t}\n\n\tprivate Properties createProperties() {\n\t\tProperties properties = new Properties();\n\t\tproperties.put("cluster.name", this.properties.getClusterName());\n\t\tproperties.putAll(this.properties.getProperties());\n\t\treturn properties;\n\t}\n\n\t@Override\n\tpublic void destroy() throws Exception {\n\t\tif (this.closeable != null) {\n\t\t\ttry {\n\t\t\t\tif (logger.isInfoEnabled()) {\n\t\t\t\t\tlogger.info("Closing Elasticsearch client");\n\t\t\t\t}\n\t\t\t\tthis.closeable.close();\n\t\t\t}\n\t\t\tcatch (final Exception ex) {\n\t\t\t\tif (logger.isErrorEnabled()) {\n\t\t\t\t\tlogger.error("Error closing Elasticsearch client: ", ex);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * {@link Node} subclass to support {@link Plugin Plugins}.\n\t */\n\tprivate static class PluggableNode extends Node {\n\n\t\tPluggableNode(Settings preparedSettings,\n\t\t\t\tCollection<Class<? extends Plugin>> classpathPlugins) {\n\t\t\tsuper(InternalSettingsPreparer.prepareEnvironment(preparedSettings, null),\n\t\t\t\t\tclasspathPlugins);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
