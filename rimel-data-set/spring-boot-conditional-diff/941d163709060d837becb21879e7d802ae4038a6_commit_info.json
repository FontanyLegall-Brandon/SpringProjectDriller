{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitTemplateAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2012-2013 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.amqp;\n+\n+import org.springframework.amqp.core.AmqpAdmin;\n+import org.springframework.amqp.rabbit.connection.CachingConnectionFactory;\n+import org.springframework.amqp.rabbit.core.RabbitAdmin;\n+import org.springframework.amqp.rabbit.core.RabbitTemplate;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for {@link RabbitTemplate}.\n+ *\n+ * @author Greg Turnquist\n+ */\n+@Configuration\n+@ConditionalOnClass({ RabbitTemplate.class })\n+@EnableConfigurationProperties\n+public class RabbitTemplateAutoConfiguration {\n+\n+    @Bean\n+    @ConditionalOnExpression("${spring.rabbitmq.dynamic:true}")\n+    @ConditionalOnMissingBean(AmqpAdmin.class)\n+    public AmqpAdmin amqpAdmin(CachingConnectionFactory connectionFactory) {\n+        return new RabbitAdmin(connectionFactory);\n+    }\n+\n+    @Configuration\n+    @ConditionalOnMissingBean(RabbitTemplate.class)\n+    protected static class RabbitTemplateCreator {\n+\n+        @Autowired\n+        CachingConnectionFactory connectionFactory;\n+\n+        @Bean\n+        public RabbitTemplate rabbitTemplate() {\n+            return new RabbitTemplate(this.connectionFactory);\n+        }\n+\n+    }\n+\n+    @Configuration\n+    @ConditionalOnMissingBean(CachingConnectionFactory.class)\n+    @EnableConfigurationProperties(RabbitConnectionFactoryProperties.class)\n+    protected static class RabbitConnectionFactoryCreator {\n+\n+        @Autowired\n+        private RabbitConnectionFactoryProperties config;\n+\n+        @Bean\n+        public CachingConnectionFactory connectionFactory() {\n+            CachingConnectionFactory connectionFactory = new CachingConnectionFactory(this.config.getHost());\n+            connectionFactory.setPort(this.config.getPort());\n+            if (this.config.getUsername() != null) {\n+                connectionFactory.setUsername(this.config.getUsername());\n+            }\n+            if (this.config.getPassword() != null) {\n+                connectionFactory.setPassword(this.config.getPassword());\n+            }\n+            return connectionFactory;\n+        }\n+    }\n+\n+    @ConfigurationProperties(name = "spring.rabbitmq")\n+    public static class RabbitConnectionFactoryProperties {\n+\n+        private String host = "localhost";\n+\n+        private int port = 5672;\n+\n+        private String username;\n+\n+        private String password;\n+\n+        private boolean dynamic = true;\n+\n+        public String getHost() {\n+            return host;\n+        }\n+\n+        public void setHost(String host) {\n+            this.host = host;\n+        }\n+\n+        public int getPort() {\n+            return port;\n+        }\n+\n+        public void setPort(int port) {\n+            this.port = port;\n+        }\n+\n+        public String getUsername() {\n+            return username;\n+        }\n+\n+        public void setUsername(String username) {\n+            this.username = username;\n+        }\n+\n+        public String getPassword() {\n+            return password;\n+        }\n+\n+        public void setPassword(String password) {\n+            this.password = password;\n+        }\n+\n+        public boolean isDynamic() {\n+            return dynamic;\n+        }\n+\n+        public void setDynamic(boolean dynamic) {\n+            this.dynamic = dynamic;\n+        }\n+\n+    }\n+}\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.amqp;\n\nimport org.springframework.amqp.core.AmqpAdmin;\nimport org.springframework.amqp.rabbit.connection.CachingConnectionFactory;\nimport org.springframework.amqp.rabbit.core.RabbitAdmin;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link RabbitTemplate}.\n *\n * @author Greg Turnquist\n */\n@Configuration\n@ConditionalOnClass({ RabbitTemplate.class })\n@EnableConfigurationProperties\npublic class RabbitTemplateAutoConfiguration {\n\n    @Bean\n    @ConditionalOnExpression("${spring.rabbitmq.dynamic:true}")\n    @ConditionalOnMissingBean(AmqpAdmin.class)\n    public AmqpAdmin amqpAdmin(CachingConnectionFactory connectionFactory) {\n        return new RabbitAdmin(connectionFactory);\n    }\n\n    @Configuration\n    @ConditionalOnMissingBean(RabbitTemplate.class)\n    protected static class RabbitTemplateCreator {\n\n        @Autowired\n        CachingConnectionFactory connectionFactory;\n\n        @Bean\n        public RabbitTemplate rabbitTemplate() {\n            return new RabbitTemplate(this.connectionFactory);\n        }\n\n    }\n\n    @Configuration\n    @ConditionalOnMissingBean(CachingConnectionFactory.class)\n    @EnableConfigurationProperties(RabbitConnectionFactoryProperties.class)\n    protected static class RabbitConnectionFactoryCreator {\n\n        @Autowired\n        private RabbitConnectionFactoryProperties config;\n\n        @Bean\n        public CachingConnectionFactory connectionFactory() {\n            CachingConnectionFactory connectionFactory = new CachingConnectionFactory(this.config.getHost());\n            connectionFactory.setPort(this.config.getPort());\n            if (this.config.getUsername() != null) {\n                connectionFactory.setUsername(this.config.getUsername());\n            }\n            if (this.config.getPassword() != null) {\n                connectionFactory.setPassword(this.config.getPassword());\n            }\n            return connectionFactory;\n        }\n    }\n\n    @ConfigurationProperties(name = "spring.rabbitmq")\n    public static class RabbitConnectionFactoryProperties {\n\n        private String host = "localhost";\n\n        private int port = 5672;\n\n        private String username;\n\n        private String password;\n\n        private boolean dynamic = true;\n\n        public String getHost() {\n            return host;\n        }\n\n        public void setHost(String host) {\n            this.host = host;\n        }\n\n        public int getPort() {\n            return port;\n        }\n\n        public void setPort(int port) {\n            this.port = port;\n        }\n\n        public String getUsername() {\n            return username;\n        }\n\n        public void setUsername(String username) {\n            this.username = username;\n        }\n\n        public String getPassword() {\n            return password;\n        }\n\n        public void setPassword(String password) {\n            this.password = password;\n        }\n\n        public boolean isDynamic() {\n            return dynamic;\n        }\n\n        public void setDynamic(boolean dynamic) {\n            this.dynamic = dynamic;\n        }\n\n    }\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
