{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsTemplateAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsTemplateAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -18,25 +18,24 @@ package org.springframework.boot.autoconfigure.jms;\n \n import javax.jms.ConnectionFactory;\n \n-import org.apache.activemq.ActiveMQConnectionFactory;\n-import org.apache.activemq.pool.PooledConnectionFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.jms.core.JmsTemplate;\n-import org.springframework.util.StringUtils;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for {@link JmsTemplate}.\n- * \n+ *\n  * @author Greg Turnquist\n  */\n @Configuration\n-@ConditionalOnClass({ JmsTemplate.class, ConnectionFactory.class })\n+@ConditionalOnClass(JmsTemplate.class)\n+@ConditionalOnBean(ConnectionFactory.class)\n @EnableConfigurationProperties(JmsTemplateProperties.class)\n public class JmsTemplateAutoConfiguration {\n \n@@ -54,34 +53,4 @@ public class JmsTemplateAutoConfiguration {\n \t\treturn jmsTemplate;\n \t}\n \n-\t@Configuration\n-\t@ConditionalOnClass(ActiveMQConnectionFactory.class)\n-\t@ConditionalOnMissingBean(ConnectionFactory.class)\n-\t@EnableConfigurationProperties(ActiveMQProperties.class)\n-\tprotected static class ActiveMQConnectionFactoryCreator {\n-\n-\t\t@Autowired\n-\t\tprivate ActiveMQProperties config;\n-\n-\t\t@Bean\n-\t\tpublic ConnectionFactory jmsConnectionFactory() {\n-\t\t\tConnectionFactory connectionFactory = getActiveMQConnectionFactory();\n-\t\t\tif (this.config.isPooled()) {\n-\t\t\t\tPooledConnectionFactory pool = new PooledConnectionFactory();\n-\t\t\t\tpool.setConnectionFactory(connectionFactory);\n-\t\t\t\treturn pool;\n-\t\t\t}\n-\t\t\treturn connectionFactory;\n-\t\t}\n-\n-\t\tprivate ConnectionFactory getActiveMQConnectionFactory() {\n-\t\t\tif (StringUtils.hasLength(this.config.getUser())\n-\t\t\t\t\t&& StringUtils.hasLength(this.config.getPassword())) {\n-\t\t\t\treturn new ActiveMQConnectionFactory(this.config.getUser(),\n-\t\t\t\t\t\tthis.config.getPassword(), this.config.getBrokerUrl());\n-\t\t\t}\n-\t\t\treturn new ActiveMQConnectionFactory(this.config.getBrokerUrl());\n-\t\t}\n-\t}\n-\n }\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jms;\n\nimport javax.jms.ConnectionFactory;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jms.core.JmsTemplate;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link JmsTemplate}.\n *\n * @author Greg Turnquist\n */\n@Configuration\n@ConditionalOnClass(JmsTemplate.class)\n@ConditionalOnBean(ConnectionFactory.class)\n@EnableConfigurationProperties(JmsTemplateProperties.class)\npublic class JmsTemplateAutoConfiguration {\n\n\t@Autowired\n\tprivate JmsTemplateProperties properties;\n\n\t@Autowired\n\tprivate ConnectionFactory connectionFactory;\n\n\t@Bean\n\t@ConditionalOnMissingBean(JmsTemplate.class)\n\tpublic JmsTemplate jmsTemplate() {\n\t\tJmsTemplate jmsTemplate = new JmsTemplate(this.connectionFactory);\n\t\tjmsTemplate.setPubSubDomain(this.properties.isPubSubDomain());\n\t\treturn jmsTemplate;\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jms;\n\nimport javax.jms.ConnectionFactory;\n\nimport org.apache.activemq.ActiveMQConnectionFactory;\nimport org.apache.activemq.pool.PooledConnectionFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jms.core.JmsTemplate;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link JmsTemplate}.\n * \n * @author Greg Turnquist\n */\n@Configuration\n@ConditionalOnClass({ JmsTemplate.class, ConnectionFactory.class })\n@EnableConfigurationProperties(JmsTemplateProperties.class)\npublic class JmsTemplateAutoConfiguration {\n\n\t@Autowired\n\tprivate JmsTemplateProperties properties;\n\n\t@Autowired\n\tprivate ConnectionFactory connectionFactory;\n\n\t@Bean\n\t@ConditionalOnMissingBean(JmsTemplate.class)\n\tpublic JmsTemplate jmsTemplate() {\n\t\tJmsTemplate jmsTemplate = new JmsTemplate(this.connectionFactory);\n\t\tjmsTemplate.setPubSubDomain(this.properties.isPubSubDomain());\n\t\treturn jmsTemplate;\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(ActiveMQConnectionFactory.class)\n\t@ConditionalOnMissingBean(ConnectionFactory.class)\n\t@EnableConfigurationProperties(ActiveMQProperties.class)\n\tprotected static class ActiveMQConnectionFactoryCreator {\n\n\t\t@Autowired\n\t\tprivate ActiveMQProperties config;\n\n\t\t@Bean\n\t\tpublic ConnectionFactory jmsConnectionFactory() {\n\t\t\tConnectionFactory connectionFactory = getActiveMQConnectionFactory();\n\t\t\tif (this.config.isPooled()) {\n\t\t\t\tPooledConnectionFactory pool = new PooledConnectionFactory();\n\t\t\t\tpool.setConnectionFactory(connectionFactory);\n\t\t\t\treturn pool;\n\t\t\t}\n\t\t\treturn connectionFactory;\n\t\t}\n\n\t\tprivate ConnectionFactory getActiveMQConnectionFactory() {\n\t\t\tif (StringUtils.hasLength(this.config.getUser())\n\t\t\t\t\t&& StringUtils.hasLength(this.config.getPassword())) {\n\t\t\t\treturn new ActiveMQConnectionFactory(this.config.getUser(),\n\t\t\t\t\t\tthis.config.getPassword(), this.config.getBrokerUrl());\n\t\t\t}\n\t\t\treturn new ActiveMQConnectionFactory(this.config.getBrokerUrl());\n\t\t}\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
