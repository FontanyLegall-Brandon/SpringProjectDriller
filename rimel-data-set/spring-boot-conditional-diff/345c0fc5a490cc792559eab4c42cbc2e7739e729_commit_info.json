{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DispatcherServletAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DispatcherServletAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -21,9 +21,11 @@ import java.util.Arrays;\n import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n import org.springframework.boot.autoconfigure.condition.SpringBootCondition;\n+import org.springframework.boot.context.embedded.EmbeddedServletContainerFactory;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.ConditionContext;\n import org.springframework.context.annotation.Conditional;\n@@ -34,8 +36,8 @@ import org.springframework.core.type.AnnotatedTypeMetadata;\n import org.springframework.web.servlet.DispatcherServlet;\n \n /**\n- * {@link EnableAutoConfiguration Auto-configuration} for an the Spring\n- * {@link DispatcherServlet} servlet containers.\n+ * {@link EnableAutoConfiguration Auto-configuration} for the Spring\n+ * {@link DispatcherServlet} where an embedded servlet container is already present.\n  * \n  * @author Phillip Webb\n  * @author Dave Syer\n@@ -44,6 +46,7 @@ import org.springframework.web.servlet.DispatcherServlet;\n @Configuration\n @ConditionalOnWebApplication\n @ConditionalOnClass(DispatcherServlet.class)\n+@ConditionalOnBean(EmbeddedServletContainerFactory.class)\n @AutoConfigureAfter(EmbeddedServletContainerAutoConfiguration.class)\n public class DispatcherServletAutoConfiguration {\n \n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web;\n\nimport java.util.Arrays;\n\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.context.embedded.EmbeddedServletContainerFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.web.servlet.DispatcherServlet;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for the Spring\n * {@link DispatcherServlet} where an embedded servlet container is already present.\n * \n * @author Phillip Webb\n * @author Dave Syer\n */\n@Order(Ordered.HIGHEST_PRECEDENCE)\n@Configuration\n@ConditionalOnWebApplication\n@ConditionalOnClass(DispatcherServlet.class)\n@ConditionalOnBean(EmbeddedServletContainerFactory.class)\n@AutoConfigureAfter(EmbeddedServletContainerAutoConfiguration.class)\npublic class DispatcherServletAutoConfiguration {\n\n\t/*\n\t * The bean name for a DispatcherServlet that will be mapped to the root URL "/"\n\t */\n\tpublic static final String DEFAULT_DISPATCHER_SERVLET_BEAN_NAME = "dispatcherServlet";\n\n\t@Bean(name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)\n\t@Conditional(DefaultDispatcherServletCondition.class)\n\tpublic DispatcherServlet dispatcherServlet() {\n\t\treturn new DispatcherServlet();\n\t}\n\n\tprivate static class DefaultDispatcherServletCondition extends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic Outcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\n\t\t\tConfigurableListableBeanFactory beanFactory = context.getBeanFactory();\n\t\t\tString[] beans = beanFactory.getBeanNamesForType(DispatcherServlet.class,\n\t\t\t\t\tfalse, false);\n\t\t\tif (beans.length == 0) {\n\t\t\t\treturn Outcome.match("no DispatcherServlet found");\n\t\t\t}\n\t\t\tif (Arrays.asList(beans).contains(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)) {\n\t\t\t\treturn Outcome.noMatch("found DispatcherServlet named "\n\t\t\t\t\t\t+ DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);\n\t\t\t}\n\t\t\treturn Outcome\n\t\t\t\t\t.match("one or more DispatcherServlets found and none is named "\n\t\t\t\t\t\t\t+ DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);\n\t\t}\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web;\n\nimport java.util.Arrays;\n\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.web.servlet.DispatcherServlet;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for an the Spring\n * {@link DispatcherServlet} servlet containers.\n * \n * @author Phillip Webb\n * @author Dave Syer\n */\n@Order(Ordered.HIGHEST_PRECEDENCE)\n@Configuration\n@ConditionalOnWebApplication\n@ConditionalOnClass(DispatcherServlet.class)\n@AutoConfigureAfter(EmbeddedServletContainerAutoConfiguration.class)\npublic class DispatcherServletAutoConfiguration {\n\n\t/*\n\t * The bean name for a DispatcherServlet that will be mapped to the root URL "/"\n\t */\n\tpublic static final String DEFAULT_DISPATCHER_SERVLET_BEAN_NAME = "dispatcherServlet";\n\n\t@Bean(name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)\n\t@Conditional(DefaultDispatcherServletCondition.class)\n\tpublic DispatcherServlet dispatcherServlet() {\n\t\treturn new DispatcherServlet();\n\t}\n\n\tprivate static class DefaultDispatcherServletCondition extends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic Outcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\n\t\t\tConfigurableListableBeanFactory beanFactory = context.getBeanFactory();\n\t\t\tString[] beans = beanFactory.getBeanNamesForType(DispatcherServlet.class,\n\t\t\t\t\tfalse, false);\n\t\t\tif (beans.length == 0) {\n\t\t\t\treturn Outcome.match("no DispatcherServlet found");\n\t\t\t}\n\t\t\tif (Arrays.asList(beans).contains(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)) {\n\t\t\t\treturn Outcome.noMatch("found DispatcherServlet named "\n\t\t\t\t\t\t+ DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);\n\t\t\t}\n\t\t\treturn Outcome\n\t\t\t\t\t.match("one or more DispatcherServlets found and none is named "\n\t\t\t\t\t\t\t+ DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);\n\t\t}\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
