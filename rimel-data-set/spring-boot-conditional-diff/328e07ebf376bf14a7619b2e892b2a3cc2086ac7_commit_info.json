{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailSenderAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailSenderAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -17,10 +17,9 @@\n package org.springframework.boot.autoconfigure.mail;\n \n import java.util.Properties;\n-\n import javax.activation.MimeType;\n-import javax.mail.internet.MimeMessage;\n import javax.mail.Session;\n+import javax.mail.internet.MimeMessage;\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n@@ -28,11 +27,12 @@ import org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n-import org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration.PropertiesCondition;\n+import org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration.MailSenderCondition;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n import org.springframework.mail.MailSender;\n import org.springframework.mail.javamail.JavaMailSenderImpl;\n \n@@ -47,8 +47,9 @@ import org.springframework.mail.javamail.JavaMailSenderImpl;\n @Configuration\n @ConditionalOnClass({ MimeMessage.class, MimeType.class })\n @ConditionalOnMissingBean(MailSender.class)\n-@Conditional(PropertiesCondition.class)\n+@Conditional(MailSenderCondition.class)\n @EnableConfigurationProperties(MailProperties.class)\n+@Import(JndiSessionConfiguration.class)\n public class MailSenderAutoConfiguration {\n \n \t@Autowired(required = false)\n@@ -62,7 +63,8 @@ public class MailSenderAutoConfiguration {\n \t\tJavaMailSenderImpl sender = new JavaMailSenderImpl();\n \t\tif (this.session != null) {\n \t\t\tsender.setSession(this.session);\n-\t\t} else {\n+\t\t}\n+\t\telse {\n \t\t\tsender.setHost(this.properties.getHost());\n \t\t\tif (this.properties.getPort() != null) {\n \t\t\t\tsender.setPort(this.properties.getPort());\n@@ -80,22 +82,23 @@ public class MailSenderAutoConfiguration {\n \t}\n \n \t/**\n-\t * Condition for jndi-name or host property\n+\t * Condition to trigger the creation of a {@link JavaMailSenderImpl}. This kicks in\n+\t * if either the host or jndi name property is set.\n \t */\n-\tstatic class PropertiesCondition extends AnyNestedCondition {\n+\tstatic class MailSenderCondition extends AnyNestedCondition {\n \n-\t\tpublic PropertiesCondition() {\n+\t\tpublic MailSenderCondition() {\n \t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION);\n \t\t}\n \n-\t\t@ConditionalOnProperty(prefix = "spring.mail", name = "jndi-name")\n-\t\tstatic class JndiNameProperty {\n-\t\t}\n-\n \t\t@ConditionalOnProperty(prefix = "spring.mail", name = "host")\n \t\tstatic class HostProperty {\n \t\t}\n \n+\t\t@ConditionalOnProperty(prefix = "spring.mail", name = "jndi-name")\n+\t\tstatic class JndiNameProperty {\n+\t\t}\n+\n \t}\n \n }\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.mail;\n\nimport java.util.Properties;\nimport javax.activation.MimeType;\nimport javax.mail.Session;\nimport javax.mail.internet.MimeMessage;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration.MailSenderCondition;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.mail.MailSender;\nimport org.springframework.mail.javamail.JavaMailSenderImpl;\n\n/**\n * {@link EnableAutoConfiguration Auto configuration} for email support.\n *\n * @author Oliver Gierke\n * @author Stephane Nicoll\n * @author Eddú Meléndez\n * @since 1.2.0\n */\n@Configuration\n@ConditionalOnClass({ MimeMessage.class, MimeType.class })\n@ConditionalOnMissingBean(MailSender.class)\n@Conditional(MailSenderCondition.class)\n@EnableConfigurationProperties(MailProperties.class)\n@Import(JndiSessionConfiguration.class)\npublic class MailSenderAutoConfiguration {\n\n\t@Autowired(required = false)\n\tprivate Session session;\n\n\t@Autowired\n\tprivate MailProperties properties;\n\n\t@Bean\n\tpublic JavaMailSenderImpl mailSender() {\n\t\tJavaMailSenderImpl sender = new JavaMailSenderImpl();\n\t\tif (this.session != null) {\n\t\t\tsender.setSession(this.session);\n\t\t}\n\t\telse {\n\t\t\tsender.setHost(this.properties.getHost());\n\t\t\tif (this.properties.getPort() != null) {\n\t\t\t\tsender.setPort(this.properties.getPort());\n\t\t\t}\n\t\t\tsender.setUsername(this.properties.getUsername());\n\t\t\tsender.setPassword(this.properties.getPassword());\n\t\t\tsender.setDefaultEncoding(this.properties.getDefaultEncoding());\n\t\t\tif (!this.properties.getProperties().isEmpty()) {\n\t\t\t\tProperties properties = new Properties();\n\t\t\t\tproperties.putAll(this.properties.getProperties());\n\t\t\t\tsender.setJavaMailProperties(properties);\n\t\t\t}\n\t\t}\n\t\treturn sender;\n\t}\n\n\t/**\n\t * Condition to trigger the creation of a {@link JavaMailSenderImpl}. This kicks in\n\t * if either the host or jndi name property is set.\n\t */\n\tstatic class MailSenderCondition extends AnyNestedCondition {\n\n\t\tpublic MailSenderCondition() {\n\t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION);\n\t\t}\n\n\t\t@ConditionalOnProperty(prefix = "spring.mail", name = "host")\n\t\tstatic class HostProperty {\n\t\t}\n\n\t\t@ConditionalOnProperty(prefix = "spring.mail", name = "jndi-name")\n\t\tstatic class JndiNameProperty {\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.mail;\n\nimport java.util.Properties;\n\nimport javax.activation.MimeType;\nimport javax.mail.internet.MimeMessage;\nimport javax.mail.Session;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration.PropertiesCondition;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.mail.MailSender;\nimport org.springframework.mail.javamail.JavaMailSenderImpl;\n\n/**\n * {@link EnableAutoConfiguration Auto configuration} for email support.\n *\n * @author Oliver Gierke\n * @author Stephane Nicoll\n * @author Eddú Meléndez\n * @since 1.2.0\n */\n@Configuration\n@ConditionalOnClass({ MimeMessage.class, MimeType.class })\n@ConditionalOnMissingBean(MailSender.class)\n@Conditional(PropertiesCondition.class)\n@EnableConfigurationProperties(MailProperties.class)\npublic class MailSenderAutoConfiguration {\n\n\t@Autowired(required = false)\n\tprivate Session session;\n\n\t@Autowired\n\tprivate MailProperties properties;\n\n\t@Bean\n\tpublic JavaMailSenderImpl mailSender() {\n\t\tJavaMailSenderImpl sender = new JavaMailSenderImpl();\n\t\tif (this.session != null) {\n\t\t\tsender.setSession(this.session);\n\t\t} else {\n\t\t\tsender.setHost(this.properties.getHost());\n\t\t\tif (this.properties.getPort() != null) {\n\t\t\t\tsender.setPort(this.properties.getPort());\n\t\t\t}\n\t\t\tsender.setUsername(this.properties.getUsername());\n\t\t\tsender.setPassword(this.properties.getPassword());\n\t\t\tsender.setDefaultEncoding(this.properties.getDefaultEncoding());\n\t\t\tif (!this.properties.getProperties().isEmpty()) {\n\t\t\t\tProperties properties = new Properties();\n\t\t\t\tproperties.putAll(this.properties.getProperties());\n\t\t\t\tsender.setJavaMailProperties(properties);\n\t\t\t}\n\t\t}\n\t\treturn sender;\n\t}\n\n\t/**\n\t * Condition for jndi-name or host property\n\t */\n\tstatic class PropertiesCondition extends AnyNestedCondition {\n\n\t\tpublic PropertiesCondition() {\n\t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION);\n\t\t}\n\n\t\t@ConditionalOnProperty(prefix = "spring.mail", name = "jndi-name")\n\t\tstatic class JndiNameProperty {\n\t\t}\n\n\t\t@ConditionalOnProperty(prefix = "spring.mail", name = "host")\n\t\tstatic class HostProperty {\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
