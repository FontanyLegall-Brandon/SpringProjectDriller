{'_old_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnBeanTests.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnBeanTests.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -76,6 +76,14 @@ public class ConditionalOnBeanTests {\n \t\tassertEquals("bar", this.context.getBean("bar"));\n \t}\n \n+\t@Test\n+\tpublic void testClassOnBeanClassNameCondition() {\n+\t\tthis.context.register(FooConfiguration.class, OnBeanClassNameConfiguration.class);\n+\t\tthis.context.refresh();\n+\t\tassertTrue(this.context.containsBean("bar"));\n+\t\tassertEquals("bar", this.context.getBean("bar"));\n+\t}\n+\n \t@Test\n \tpublic void testOnBeanConditionWithXml() {\n \t\tthis.context.register(XmlConfiguration.class, OnBeanNameConfiguration.class);\n@@ -100,6 +108,14 @@ public class ConditionalOnBeanTests {\n \t\tassertEquals("bar", this.context.getBean("bar"));\n \t}\n \n+\t@Test\n+\tpublic void testOnMissingBeanType() throws Exception {\n+\t\tthis.context.register(FooConfiguration.class,\n+\t\t\t\tOnBeanMissingClassConfiguration.class);\n+\t\tthis.context.refresh();\n+\t\tassertFalse(this.context.containsBean("bar"));\n+\t}\n+\n \t@Configuration\n \t@ConditionalOnBean(name = "foo")\n \tprotected static class OnBeanNameConfiguration {\n@@ -136,6 +152,24 @@ public class ConditionalOnBeanTests {\n \t\t}\n \t}\n \n+\t@Configuration\n+\t@ConditionalOnBean(type = "java.lang.String")\n+\tprotected static class OnBeanClassNameConfiguration {\n+\t\t@Bean\n+\t\tpublic String bar() {\n+\t\t\treturn "bar";\n+\t\t}\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnBean(type = "some.type.Missing")\n+\tprotected static class OnBeanMissingClassConfiguration {\n+\t\t@Bean\n+\t\tpublic String bar() {\n+\t\t\treturn "bar";\n+\t\t}\n+\t}\n+\n \t@Configuration\n \t@EnableScheduling\n \tprotected static class FooConfiguration {\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport java.util.Date;\n\nimport org.junit.Test;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.ImportResource;\nimport org.springframework.scheduling.annotation.EnableScheduling;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\n/**\n * Tests for {@link ConditionalOnBean}.\n *\n * @author Dave Syer\n */\npublic class ConditionalOnBeanTests {\n\n\tprivate final AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n\n\t@Test\n\tpublic void testNameOnBeanCondition() {\n\t\tthis.context.register(FooConfiguration.class, OnBeanNameConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertTrue(this.context.containsBean("bar"));\n\t\tassertEquals("bar", this.context.getBean("bar"));\n\t}\n\n\t@Test\n\tpublic void testNameAndTypeOnBeanCondition() {\n\t\tthis.context.register(FooConfiguration.class,\n\t\t\t\tOnBeanNameAndTypeConfiguration.class);\n\t\tthis.context.refresh();\n\t\t/*\n\t\t * Arguably this should be true, but as things are implemented the conditions\n\t\t * specified in the different attributes of @ConditionalOnBean are combined with\n\t\t * logical OR (not AND) so if any of them match the condition is true.\n\t\t */\n\t\tassertFalse(this.context.containsBean("bar"));\n\t}\n\n\t@Test\n\tpublic void testNameOnBeanConditionReverseOrder() {\n\t\tthis.context.register(OnBeanNameConfiguration.class, FooConfiguration.class);\n\t\tthis.context.refresh();\n\t\t// Ideally this should be true\n\t\tassertFalse(this.context.containsBean("bar"));\n\t}\n\n\t@Test\n\tpublic void testClassOnBeanCondition() {\n\t\tthis.context.register(FooConfiguration.class, OnBeanClassConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertTrue(this.context.containsBean("bar"));\n\t\tassertEquals("bar", this.context.getBean("bar"));\n\t}\n\n\t@Test\n\tpublic void testClassOnBeanClassNameCondition() {\n\t\tthis.context.register(FooConfiguration.class, OnBeanClassNameConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertTrue(this.context.containsBean("bar"));\n\t\tassertEquals("bar", this.context.getBean("bar"));\n\t}\n\n\t@Test\n\tpublic void testOnBeanConditionWithXml() {\n\t\tthis.context.register(XmlConfiguration.class, OnBeanNameConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertTrue(this.context.containsBean("bar"));\n\t\tassertEquals("bar", this.context.getBean("bar"));\n\t}\n\n\t@Test\n\tpublic void testOnBeanConditionWithCombinedXml() {\n\t\tthis.context.register(CombinedXmlConfiguration.class);\n\t\tthis.context.refresh();\n\t\t// Ideally this should be true\n\t\tassertFalse(this.context.containsBean("bar"));\n\t}\n\n\t@Test\n\tpublic void testAnnotationOnBeanCondition() {\n\t\tthis.context.register(FooConfiguration.class, OnAnnotationConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertTrue(this.context.containsBean("bar"));\n\t\tassertEquals("bar", this.context.getBean("bar"));\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanType() throws Exception {\n\t\tthis.context.register(FooConfiguration.class,\n\t\t\t\tOnBeanMissingClassConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertFalse(this.context.containsBean("bar"));\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(name = "foo")\n\tprotected static class OnBeanNameConfiguration {\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(name = "foo", value = Date.class)\n\tprotected static class OnBeanNameAndTypeConfiguration {\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(annotation = EnableScheduling.class)\n\tprotected static class OnAnnotationConfiguration {\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(String.class)\n\tprotected static class OnBeanClassConfiguration {\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(type = "java.lang.String")\n\tprotected static class OnBeanClassNameConfiguration {\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(type = "some.type.Missing")\n\tprotected static class OnBeanMissingClassConfiguration {\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\t}\n\n\t@Configuration\n\t@EnableScheduling\n\tprotected static class FooConfiguration {\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\t}\n\n\t@Configuration\n\t@ImportResource("org/springframework/boot/autoconfigure/condition/foo.xml")\n\tprotected static class XmlConfiguration {\n\t}\n\n\t@Configuration\n\t@ImportResource("org/springframework/boot/autoconfigure/condition/foo.xml")\n\t@Import(OnBeanNameConfiguration.class)\n\tprotected static class CombinedXmlConfiguration {\n\t}\n}\n', 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport java.util.Date;\n\nimport org.junit.Test;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.ImportResource;\nimport org.springframework.scheduling.annotation.EnableScheduling;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\n/**\n * Tests for {@link ConditionalOnBean}.\n *\n * @author Dave Syer\n */\npublic class ConditionalOnBeanTests {\n\n\tprivate final AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n\n\t@Test\n\tpublic void testNameOnBeanCondition() {\n\t\tthis.context.register(FooConfiguration.class, OnBeanNameConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertTrue(this.context.containsBean("bar"));\n\t\tassertEquals("bar", this.context.getBean("bar"));\n\t}\n\n\t@Test\n\tpublic void testNameAndTypeOnBeanCondition() {\n\t\tthis.context.register(FooConfiguration.class,\n\t\t\t\tOnBeanNameAndTypeConfiguration.class);\n\t\tthis.context.refresh();\n\t\t/*\n\t\t * Arguably this should be true, but as things are implemented the conditions\n\t\t * specified in the different attributes of @ConditionalOnBean are combined with\n\t\t * logical OR (not AND) so if any of them match the condition is true.\n\t\t */\n\t\tassertFalse(this.context.containsBean("bar"));\n\t}\n\n\t@Test\n\tpublic void testNameOnBeanConditionReverseOrder() {\n\t\tthis.context.register(OnBeanNameConfiguration.class, FooConfiguration.class);\n\t\tthis.context.refresh();\n\t\t// Ideally this should be true\n\t\tassertFalse(this.context.containsBean("bar"));\n\t}\n\n\t@Test\n\tpublic void testClassOnBeanCondition() {\n\t\tthis.context.register(FooConfiguration.class, OnBeanClassConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertTrue(this.context.containsBean("bar"));\n\t\tassertEquals("bar", this.context.getBean("bar"));\n\t}\n\n\t@Test\n\tpublic void testOnBeanConditionWithXml() {\n\t\tthis.context.register(XmlConfiguration.class, OnBeanNameConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertTrue(this.context.containsBean("bar"));\n\t\tassertEquals("bar", this.context.getBean("bar"));\n\t}\n\n\t@Test\n\tpublic void testOnBeanConditionWithCombinedXml() {\n\t\tthis.context.register(CombinedXmlConfiguration.class);\n\t\tthis.context.refresh();\n\t\t// Ideally this should be true\n\t\tassertFalse(this.context.containsBean("bar"));\n\t}\n\n\t@Test\n\tpublic void testAnnotationOnBeanCondition() {\n\t\tthis.context.register(FooConfiguration.class, OnAnnotationConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertTrue(this.context.containsBean("bar"));\n\t\tassertEquals("bar", this.context.getBean("bar"));\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(name = "foo")\n\tprotected static class OnBeanNameConfiguration {\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(name = "foo", value = Date.class)\n\tprotected static class OnBeanNameAndTypeConfiguration {\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(annotation = EnableScheduling.class)\n\tprotected static class OnAnnotationConfiguration {\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(String.class)\n\tprotected static class OnBeanClassConfiguration {\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\t}\n\n\t@Configuration\n\t@EnableScheduling\n\tprotected static class FooConfiguration {\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\t}\n\n\t@Configuration\n\t@ImportResource("org/springframework/boot/autoconfigure/condition/foo.xml")\n\tprotected static class XmlConfiguration {\n\t}\n\n\t@Configuration\n\t@ImportResource("org/springframework/boot/autoconfigure/condition/foo.xml")\n\t@Import(OnBeanNameConfiguration.class)\n\tprotected static class CombinedXmlConfiguration {\n\t}\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
