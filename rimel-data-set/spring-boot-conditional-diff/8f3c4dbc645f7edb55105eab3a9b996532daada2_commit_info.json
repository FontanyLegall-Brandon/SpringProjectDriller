{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/client/RestTemplateMetricsConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/client/RestTemplateMetricsConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -22,8 +22,10 @@ import org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties;\n import org.springframework.boot.actuate.metrics.web.client.DefaultRestTemplateExchangeTagsProvider;\n import org.springframework.boot.actuate.metrics.web.client.MetricsRestTemplateCustomizer;\n import org.springframework.boot.actuate.metrics.web.client.RestTemplateExchangeTagsProvider;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.web.client.RestTemplateBuilder;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.web.client.RestTemplate;\n@@ -33,9 +35,11 @@ import org.springframework.web.client.RestTemplate;\n  *\n  * @author Jon Schneider\n  * @author Phillip Webb\n+ * @author raheela.aslam\n  */\n @Configuration\n @ConditionalOnClass(RestTemplate.class)\n+@ConditionalOnBean(RestTemplateBuilder.class)\n class RestTemplateMetricsConfiguration {\n \n \tprivate final MetricsProperties properties;\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics.web.client;\n\nimport io.micrometer.core.instrument.MeterRegistry;\n\nimport org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties;\nimport org.springframework.boot.actuate.metrics.web.client.DefaultRestTemplateExchangeTagsProvider;\nimport org.springframework.boot.actuate.metrics.web.client.MetricsRestTemplateCustomizer;\nimport org.springframework.boot.actuate.metrics.web.client.RestTemplateExchangeTagsProvider;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.web.client.RestTemplateBuilder;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.client.RestTemplate;\n\n/**\n * Configure the instrumentation of {@link RestTemplate}.\n *\n * @author Jon Schneider\n * @author Phillip Webb\n * @author raheela.aslam\n */\n@Configuration\n@ConditionalOnClass(RestTemplate.class)\n@ConditionalOnBean(RestTemplateBuilder.class)\nclass RestTemplateMetricsConfiguration {\n\n\tprivate final MetricsProperties properties;\n\n\tRestTemplateMetricsConfiguration(MetricsProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(RestTemplateExchangeTagsProvider.class)\n\tpublic DefaultRestTemplateExchangeTagsProvider restTemplateExchangeTagsProvider() {\n\t\treturn new DefaultRestTemplateExchangeTagsProvider();\n\t}\n\n\t@Bean\n\tpublic MetricsRestTemplateCustomizer metricsRestTemplateCustomizer(\n\t\t\tMeterRegistry meterRegistry,\n\t\t\tRestTemplateExchangeTagsProvider restTemplateExchangeTagsProvider) {\n\t\treturn new MetricsRestTemplateCustomizer(meterRegistry,\n\t\t\t\trestTemplateExchangeTagsProvider,\n\t\t\t\tthis.properties.getWeb().getClient().getRequestsMetricName());\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics.web.client;\n\nimport io.micrometer.core.instrument.MeterRegistry;\n\nimport org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties;\nimport org.springframework.boot.actuate.metrics.web.client.DefaultRestTemplateExchangeTagsProvider;\nimport org.springframework.boot.actuate.metrics.web.client.MetricsRestTemplateCustomizer;\nimport org.springframework.boot.actuate.metrics.web.client.RestTemplateExchangeTagsProvider;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.client.RestTemplate;\n\n/**\n * Configure the instrumentation of {@link RestTemplate}.\n *\n * @author Jon Schneider\n * @author Phillip Webb\n */\n@Configuration\n@ConditionalOnClass(RestTemplate.class)\nclass RestTemplateMetricsConfiguration {\n\n\tprivate final MetricsProperties properties;\n\n\tRestTemplateMetricsConfiguration(MetricsProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(RestTemplateExchangeTagsProvider.class)\n\tpublic DefaultRestTemplateExchangeTagsProvider restTemplateExchangeTagsProvider() {\n\t\treturn new DefaultRestTemplateExchangeTagsProvider();\n\t}\n\n\t@Bean\n\tpublic MetricsRestTemplateCustomizer metricsRestTemplateCustomizer(\n\t\t\tMeterRegistry meterRegistry,\n\t\t\tRestTemplateExchangeTagsProvider restTemplateExchangeTagsProvider) {\n\t\treturn new MetricsRestTemplateCustomizer(meterRegistry,\n\t\t\t\trestTemplateExchangeTagsProvider,\n\t\t\t\tthis.properties.getWeb().getClient().getRequestsMetricName());\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
