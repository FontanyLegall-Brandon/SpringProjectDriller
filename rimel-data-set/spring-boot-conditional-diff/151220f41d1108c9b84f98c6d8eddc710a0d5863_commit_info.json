{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/SimpleCacheConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2012-2015 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.cache;\n+\n+import java.util.List;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.cache.CacheManager;\n+import org.springframework.cache.concurrent.ConcurrentMapCacheManager;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Conditional;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Simplest cache configuration, usually used as a fallback.\n+ *\n+ * @author Stephane Nicoll\n+ * @since 1.3.0\n+ */\n+@Configuration\n+@ConditionalOnMissingBean(CacheManager.class)\n+@Conditional(CacheCondition.class)\n+class SimpleCacheConfiguration {\n+\n+\t@Autowired\n+\tprivate CacheProperties cacheProperties;\n+\n+\t@Bean\n+\tpublic ConcurrentMapCacheManager cacheManager() {\n+\t\tConcurrentMapCacheManager cacheManager = new ConcurrentMapCacheManager();\n+\t\tList<String> cacheNames = this.cacheProperties.getCacheNames();\n+\t\tif (!cacheNames.isEmpty()) {\n+\t\t\tcacheManager.setCacheNames(cacheNames);\n+\t\t}\n+\t\treturn cacheManager;\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.cache;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.cache.CacheManager;\nimport org.springframework.cache.concurrent.ConcurrentMapCacheManager;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Simplest cache configuration, usually used as a fallback.\n *\n * @author Stephane Nicoll\n * @since 1.3.0\n */\n@Configuration\n@ConditionalOnMissingBean(CacheManager.class)\n@Conditional(CacheCondition.class)\nclass SimpleCacheConfiguration {\n\n\t@Autowired\n\tprivate CacheProperties cacheProperties;\n\n\t@Bean\n\tpublic ConcurrentMapCacheManager cacheManager() {\n\t\tConcurrentMapCacheManager cacheManager = new ConcurrentMapCacheManager();\n\t\tList<String> cacheNames = this.cacheProperties.getCacheNames();\n\t\tif (!cacheNames.isEmpty()) {\n\t\t\tcacheManager.setCacheNames(cacheNames);\n\t\t}\n\t\treturn cacheManager;\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
