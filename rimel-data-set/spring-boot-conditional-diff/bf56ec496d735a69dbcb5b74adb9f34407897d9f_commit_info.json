{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/jdbc/DataSourcePoolMetricsAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/jdbc/DataSourcePoolMetricsAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -50,6 +50,7 @@ import org.springframework.util.StringUtils;\n @Configuration\n @AutoConfigureAfter({ MetricsAutoConfiguration.class, DataSourceAutoConfiguration.class,\n \t\tSimpleMetricsExportAutoConfiguration.class })\n+@ConditionalOnClass({ DataSource.class, MeterRegistry.class })\n @ConditionalOnBean({ DataSource.class, MeterRegistry.class })\n public class DataSourcePoolMetricsAutoConfiguration {\n \n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics.jdbc;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Map;\n\nimport javax.sql.DataSource;\n\nimport com.zaxxer.hikari.HikariDataSource;\nimport io.micrometer.core.instrument.MeterRegistry;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration;\nimport org.springframework.boot.actuate.metrics.jdbc.DataSourcePoolMetrics;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.jdbc.metadata.DataSourcePoolMetadataProvider;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for metrics on all available\n * {@link DataSource datasources}.\n *\n * @author Stephane Nicoll\n * @since 2.0.0\n */\n@Configuration\n@AutoConfigureAfter({ MetricsAutoConfiguration.class, DataSourceAutoConfiguration.class,\n\t\tSimpleMetricsExportAutoConfiguration.class })\n@ConditionalOnClass({ DataSource.class, MeterRegistry.class })\n@ConditionalOnBean({ DataSource.class, MeterRegistry.class })\npublic class DataSourcePoolMetricsAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnBean(DataSourcePoolMetadataProvider.class)\n\tstatic class DataSourcePoolMetadataMetricsConfiguration {\n\n\t\tprivate static final String DATASOURCE_SUFFIX = "dataSource";\n\n\t\tprivate final MeterRegistry registry;\n\n\t\tprivate final Collection<DataSourcePoolMetadataProvider> metadataProviders;\n\n\t\tDataSourcePoolMetadataMetricsConfiguration(MeterRegistry registry,\n\t\t\t\tCollection<DataSourcePoolMetadataProvider> metadataProviders) {\n\t\t\tthis.registry = registry;\n\t\t\tthis.metadataProviders = metadataProviders;\n\t\t}\n\n\t\t@Autowired\n\t\tpublic void bindDataSourcesToRegistry(Map<String, DataSource> dataSources) {\n\t\t\tdataSources.forEach(this::bindDataSourceToRegistry);\n\t\t}\n\n\t\tprivate void bindDataSourceToRegistry(String beanName, DataSource dataSource) {\n\t\t\tString dataSourceName = getDataSourceName(beanName);\n\t\t\tnew DataSourcePoolMetrics(dataSource, this.metadataProviders, dataSourceName,\n\t\t\t\t\tCollections.emptyList()).bindTo(this.registry);\n\t\t}\n\n\t\t/**\n\t\t * Get the name of a DataSource based on its {@code beanName}.\n\t\t * @param beanName the name of the data source bean\n\t\t * @return a name for the given data source\n\t\t */\n\t\tprivate String getDataSourceName(String beanName) {\n\t\t\tif (beanName.length() > DATASOURCE_SUFFIX.length()\n\t\t\t\t\t&& StringUtils.endsWithIgnoreCase(beanName, DATASOURCE_SUFFIX)) {\n\t\t\t\treturn beanName.substring(0,\n\t\t\t\t\t\tbeanName.length() - DATASOURCE_SUFFIX.length());\n\t\t\t}\n\t\t\treturn beanName;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(HikariDataSource.class)\n\tstatic class HikariDataSourceMetricsConfiguration {\n\n\t\t@Bean\n\t\tpublic static HikariDataSourceMetricsPostProcessor hikariDataSourceMetricsPostProcessor(\n\t\t\t\tApplicationContext applicationContext) {\n\t\t\treturn new HikariDataSourceMetricsPostProcessor(applicationContext);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics.jdbc;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Map;\n\nimport javax.sql.DataSource;\n\nimport com.zaxxer.hikari.HikariDataSource;\nimport io.micrometer.core.instrument.MeterRegistry;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration;\nimport org.springframework.boot.actuate.metrics.jdbc.DataSourcePoolMetrics;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.jdbc.metadata.DataSourcePoolMetadataProvider;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for metrics on all available\n * {@link DataSource datasources}.\n *\n * @author Stephane Nicoll\n * @since 2.0.0\n */\n@Configuration\n@AutoConfigureAfter({ MetricsAutoConfiguration.class, DataSourceAutoConfiguration.class,\n\t\tSimpleMetricsExportAutoConfiguration.class })\n@ConditionalOnBean({ DataSource.class, MeterRegistry.class })\npublic class DataSourcePoolMetricsAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnBean(DataSourcePoolMetadataProvider.class)\n\tstatic class DataSourcePoolMetadataMetricsConfiguration {\n\n\t\tprivate static final String DATASOURCE_SUFFIX = "dataSource";\n\n\t\tprivate final MeterRegistry registry;\n\n\t\tprivate final Collection<DataSourcePoolMetadataProvider> metadataProviders;\n\n\t\tDataSourcePoolMetadataMetricsConfiguration(MeterRegistry registry,\n\t\t\t\tCollection<DataSourcePoolMetadataProvider> metadataProviders) {\n\t\t\tthis.registry = registry;\n\t\t\tthis.metadataProviders = metadataProviders;\n\t\t}\n\n\t\t@Autowired\n\t\tpublic void bindDataSourcesToRegistry(Map<String, DataSource> dataSources) {\n\t\t\tdataSources.forEach(this::bindDataSourceToRegistry);\n\t\t}\n\n\t\tprivate void bindDataSourceToRegistry(String beanName, DataSource dataSource) {\n\t\t\tString dataSourceName = getDataSourceName(beanName);\n\t\t\tnew DataSourcePoolMetrics(dataSource, this.metadataProviders, dataSourceName,\n\t\t\t\t\tCollections.emptyList()).bindTo(this.registry);\n\t\t}\n\n\t\t/**\n\t\t * Get the name of a DataSource based on its {@code beanName}.\n\t\t * @param beanName the name of the data source bean\n\t\t * @return a name for the given data source\n\t\t */\n\t\tprivate String getDataSourceName(String beanName) {\n\t\t\tif (beanName.length() > DATASOURCE_SUFFIX.length()\n\t\t\t\t\t&& StringUtils.endsWithIgnoreCase(beanName, DATASOURCE_SUFFIX)) {\n\t\t\t\treturn beanName.substring(0,\n\t\t\t\t\t\tbeanName.length() - DATASOURCE_SUFFIX.length());\n\t\t\t}\n\t\t\treturn beanName;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(HikariDataSource.class)\n\tstatic class HikariDataSourceMetricsConfiguration {\n\n\t\t@Bean\n\t\tpublic static HikariDataSourceMetricsPostProcessor hikariDataSourceMetricsPostProcessor(\n\t\t\t\tApplicationContext applicationContext) {\n\t\t\treturn new HikariDataSourceMetricsPostProcessor(applicationContext);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
