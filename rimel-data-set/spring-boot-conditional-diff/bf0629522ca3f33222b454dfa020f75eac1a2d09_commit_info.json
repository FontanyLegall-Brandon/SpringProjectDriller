{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/HttpMessageConvertersAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/HttpMessageConvertersAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -24,6 +24,7 @@ import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n@@ -113,6 +114,7 @@ public class HttpMessageConvertersAutoConfiguration {\n \n \t@Configuration\n \t@ConditionalOnClass(Gson.class)\n+\t@ConditionalOnMissingClass(name = "com.fasterxml.jackson.core.JsonGenerator")\n \t@ConditionalOnBean(Gson.class)\n \tprotected static class GsonHttpMessageConverterConfiguration {\n \n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web;\n\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.http.converter.StringHttpMessageConverter;\nimport org.springframework.http.converter.json.GsonHttpMessageConverter;\nimport org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\nimport org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.dataformat.xml.XmlMapper;\nimport com.google.gson.Gson;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link HttpMessageConverter}s.\n *\n * @author Dave Syer\n * @author Christian Dupuis\n * @author Piotr Maj\n * @author Oliver Gierke\n * @author David Liu\n * @author Andy Wilkinson\n * @author Sebastien Deleuze\n * @author Stephane Nicoll\n */\n@Configuration\n@ConditionalOnClass(HttpMessageConverter.class)\npublic class HttpMessageConvertersAutoConfiguration {\n\n\t@Autowired(required = false)\n\tprivate final List<HttpMessageConverter<?>> converters = Collections.emptyList();\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic HttpMessageConverters messageConverters() {\n\t\treturn new HttpMessageConverters(this.converters);\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(ObjectMapper.class)\n\t@ConditionalOnBean(ObjectMapper.class)\n\t@EnableConfigurationProperties(HttpMapperProperties.class)\n\t@SuppressWarnings("deprecation")\n\tprotected static class MappingJackson2HttpMessageConverterConfiguration {\n\n\t\t@Autowired\n\t\tprivate HttpMapperProperties properties = new HttpMapperProperties();\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter(\n\t\t\t\tObjectMapper objectMapper) {\n\t\t\tMappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();\n\t\t\tconverter.setObjectMapper(objectMapper);\n\t\t\tif (this.properties.isJsonPrettyPrint() != null) {\n\t\t\t\tconverter.setPrettyPrint(this.properties.isJsonPrettyPrint());\n\t\t\t}\n\t\t\treturn converter;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(XmlMapper.class)\n\t@ConditionalOnBean(Jackson2ObjectMapperBuilder.class)\n\t@EnableConfigurationProperties(HttpMapperProperties.class)\n\t@SuppressWarnings("deprecation")\n\tprotected static class XmlMappers {\n\n\t\t@Autowired\n\t\tprivate HttpMapperProperties properties = new HttpMapperProperties();\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic MappingJackson2XmlHttpMessageConverter mappingJackson2XmlHttpMessageConverter(\n\t\t\t\tJackson2ObjectMapperBuilder builder) {\n\t\t\tMappingJackson2XmlHttpMessageConverter converter = new MappingJackson2XmlHttpMessageConverter();\n\t\t\tconverter.setObjectMapper(builder.createXmlMapper(true).build());\n\t\t\tif (this.properties.isJsonPrettyPrint() != null) {\n\t\t\t\tconverter.setPrettyPrint(this.properties.isJsonPrettyPrint());\n\t\t\t}\n\t\t\treturn converter;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(Gson.class)\n\t@ConditionalOnMissingClass(name = "com.fasterxml.jackson.core.JsonGenerator")\n\t@ConditionalOnBean(Gson.class)\n\tprotected static class GsonHttpMessageConverterConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic GsonHttpMessageConverter gsonHttpMessageConverter(Gson gson) {\n\t\t\tGsonHttpMessageConverter converter = new GsonHttpMessageConverter();\n\t\t\tconverter.setGson(gson);\n\t\t\treturn converter;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(StringHttpMessageConverter.class)\n\t@EnableConfigurationProperties(HttpEncodingProperties.class)\n\tprotected static class StringHttpMessageConverterConfiguration {\n\n\t\t@Autowired\n\t\tprivate HttpEncodingProperties encodingProperties;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic StringHttpMessageConverter stringHttpMessageConverter() {\n\t\t\treturn new StringHttpMessageConverter(this.encodingProperties.getCharset());\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web;\n\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.http.converter.StringHttpMessageConverter;\nimport org.springframework.http.converter.json.GsonHttpMessageConverter;\nimport org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\nimport org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.dataformat.xml.XmlMapper;\nimport com.google.gson.Gson;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link HttpMessageConverter}s.\n *\n * @author Dave Syer\n * @author Christian Dupuis\n * @author Piotr Maj\n * @author Oliver Gierke\n * @author David Liu\n * @author Andy Wilkinson\n * @author Sebastien Deleuze\n * @author Stephane Nicoll\n */\n@Configuration\n@ConditionalOnClass(HttpMessageConverter.class)\npublic class HttpMessageConvertersAutoConfiguration {\n\n\t@Autowired(required = false)\n\tprivate final List<HttpMessageConverter<?>> converters = Collections.emptyList();\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic HttpMessageConverters messageConverters() {\n\t\treturn new HttpMessageConverters(this.converters);\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(ObjectMapper.class)\n\t@ConditionalOnBean(ObjectMapper.class)\n\t@EnableConfigurationProperties(HttpMapperProperties.class)\n\t@SuppressWarnings("deprecation")\n\tprotected static class MappingJackson2HttpMessageConverterConfiguration {\n\n\t\t@Autowired\n\t\tprivate HttpMapperProperties properties = new HttpMapperProperties();\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter(\n\t\t\t\tObjectMapper objectMapper) {\n\t\t\tMappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();\n\t\t\tconverter.setObjectMapper(objectMapper);\n\t\t\tif (this.properties.isJsonPrettyPrint() != null) {\n\t\t\t\tconverter.setPrettyPrint(this.properties.isJsonPrettyPrint());\n\t\t\t}\n\t\t\treturn converter;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(XmlMapper.class)\n\t@ConditionalOnBean(Jackson2ObjectMapperBuilder.class)\n\t@EnableConfigurationProperties(HttpMapperProperties.class)\n\t@SuppressWarnings("deprecation")\n\tprotected static class XmlMappers {\n\n\t\t@Autowired\n\t\tprivate HttpMapperProperties properties = new HttpMapperProperties();\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic MappingJackson2XmlHttpMessageConverter mappingJackson2XmlHttpMessageConverter(\n\t\t\t\tJackson2ObjectMapperBuilder builder) {\n\t\t\tMappingJackson2XmlHttpMessageConverter converter = new MappingJackson2XmlHttpMessageConverter();\n\t\t\tconverter.setObjectMapper(builder.createXmlMapper(true).build());\n\t\t\tif (this.properties.isJsonPrettyPrint() != null) {\n\t\t\t\tconverter.setPrettyPrint(this.properties.isJsonPrettyPrint());\n\t\t\t}\n\t\t\treturn converter;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(Gson.class)\n\t@ConditionalOnBean(Gson.class)\n\tprotected static class GsonHttpMessageConverterConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic GsonHttpMessageConverter gsonHttpMessageConverter(Gson gson) {\n\t\t\tGsonHttpMessageConverter converter = new GsonHttpMessageConverter();\n\t\t\tconverter.setGson(gson);\n\t\t\treturn converter;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(StringHttpMessageConverter.class)\n\t@EnableConfigurationProperties(HttpEncodingProperties.class)\n\tprotected static class StringHttpMessageConverterConfiguration {\n\n\t\t@Autowired\n\t\tprivate HttpEncodingProperties encodingProperties;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic StringHttpMessageConverter stringHttpMessageConverter() {\n\t\t\treturn new StringHttpMessageConverter(this.encodingProperties.getCharset());\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
