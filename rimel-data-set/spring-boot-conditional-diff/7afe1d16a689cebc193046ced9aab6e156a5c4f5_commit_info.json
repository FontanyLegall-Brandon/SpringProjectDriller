{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jest/JestAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2012-2016 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.jest;\n+\n+import com.google.gson.Gson;\n+import io.searchbox.client.JestClient;\n+import io.searchbox.client.JestClientFactory;\n+import io.searchbox.client.config.HttpClientConfig;\n+\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-Configuration} for Jest.\n+ *\n+ * @author Stephane Nicoll\n+ * @since 1.4.0\n+ */\n+@Configuration\n+@ConditionalOnClass(JestClient.class)\n+@EnableConfigurationProperties(JestProperties.class)\n+@AutoConfigureAfter(GsonAutoConfiguration.class)\n+public class JestAutoConfiguration {\n+\n+\tprivate final JestProperties properties;\n+\n+\tprivate final ObjectProvider<Gson> gsonProvider;\n+\n+\tpublic JestAutoConfiguration(JestProperties properties, ObjectProvider<Gson> gsonProvider) {\n+\t\tthis.properties = properties;\n+\t\tthis.gsonProvider = gsonProvider;\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic JestClient jestClient() {\n+\t\tJestClientFactory factory = new JestClientFactory();\n+\t\tfactory.setHttpClientConfig(createHttpClientConfig());\n+\t\treturn factory.getObject();\n+\t}\n+\n+\tprotected HttpClientConfig createHttpClientConfig() {\n+\t\tHttpClientConfig.Builder builder = new HttpClientConfig\n+\t\t\t\t.Builder(this.properties.getUris());\n+\t\tif (StringUtils.hasText(this.properties.getUsername())) {\n+\t\t\tbuilder.defaultCredentials(this.properties.getUsername(),\n+\t\t\t\t\tthis.properties.getPassword());\n+\t\t}\n+\t\tGson gson = this.gsonProvider.getIfUnique();\n+\t\tif (gson != null) {\n+\t\t\tbuilder.gson(gson);\n+\t\t}\n+\t\treturn builder.connTimeout(this.properties.getConnectionTimeout())\n+\t\t\t\t.readTimeout(this.properties.getReadTimeout())\n+\t\t\t\t.build();\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jest;\n\nimport com.google.gson.Gson;\nimport io.searchbox.client.JestClient;\nimport io.searchbox.client.JestClientFactory;\nimport io.searchbox.client.config.HttpClientConfig;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-Configuration} for Jest.\n *\n * @author Stephane Nicoll\n * @since 1.4.0\n */\n@Configuration\n@ConditionalOnClass(JestClient.class)\n@EnableConfigurationProperties(JestProperties.class)\n@AutoConfigureAfter(GsonAutoConfiguration.class)\npublic class JestAutoConfiguration {\n\n\tprivate final JestProperties properties;\n\n\tprivate final ObjectProvider<Gson> gsonProvider;\n\n\tpublic JestAutoConfiguration(JestProperties properties, ObjectProvider<Gson> gsonProvider) {\n\t\tthis.properties = properties;\n\t\tthis.gsonProvider = gsonProvider;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic JestClient jestClient() {\n\t\tJestClientFactory factory = new JestClientFactory();\n\t\tfactory.setHttpClientConfig(createHttpClientConfig());\n\t\treturn factory.getObject();\n\t}\n\n\tprotected HttpClientConfig createHttpClientConfig() {\n\t\tHttpClientConfig.Builder builder = new HttpClientConfig\n\t\t\t\t.Builder(this.properties.getUris());\n\t\tif (StringUtils.hasText(this.properties.getUsername())) {\n\t\t\tbuilder.defaultCredentials(this.properties.getUsername(),\n\t\t\t\t\tthis.properties.getPassword());\n\t\t}\n\t\tGson gson = this.gsonProvider.getIfUnique();\n\t\tif (gson != null) {\n\t\t\tbuilder.gson(gson);\n\t\t}\n\t\treturn builder.connTimeout(this.properties.getConnectionTimeout())\n\t\t\t\t.readTimeout(this.properties.getReadTimeout())\n\t\t\t\t.build();\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
