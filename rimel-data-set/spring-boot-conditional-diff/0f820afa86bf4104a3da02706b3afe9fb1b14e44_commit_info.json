{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/info/ProjectInfoAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2012-2016 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.info;\n+\n+import java.util.Properties;\n+\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionOutcome;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.SpringBootCondition;\n+import org.springframework.boot.bind.PropertiesConfigurationFactory;\n+import org.springframework.boot.bind.RelaxedPropertyResolver;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.ConditionContext;\n+import org.springframework.context.annotation.Conditional;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.PropertyResolver;\n+import org.springframework.core.io.DefaultResourceLoader;\n+import org.springframework.core.io.ResourceLoader;\n+import org.springframework.core.io.support.PropertiesLoaderUtils;\n+import org.springframework.core.type.AnnotatedTypeMetadata;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for various project information.\n+ *\n+ * @author Stephane Nicoll\n+ * @since 1.4.0\n+ */\n+@Configuration\n+@EnableConfigurationProperties(ProjectInfoProperties.class)\n+public class ProjectInfoAutoConfiguration {\n+\n+\t@Configuration\n+\t@Conditional(GitResourceAvailableCondition.class)\n+\tprotected static class GitInfoAutoConfiguration {\n+\n+\t\t@ConditionalOnMissingBean\n+\t\t@Bean\n+\t\tpublic GitInfo gitInfo(ProjectInfoProperties properties) throws Exception {\n+\t\t\tPropertiesConfigurationFactory<GitInfo> factory = new PropertiesConfigurationFactory<GitInfo>(\n+\t\t\t\t\tnew GitInfo());\n+\t\t\tfactory.setTargetName("git");\n+\t\t\tProperties gitInfoProperties = PropertiesLoaderUtils\n+\t\t\t\t\t.loadProperties(properties.getGit().getLocation());\n+\t\t\tfactory.setProperties(gitInfoProperties);\n+\t\t\treturn factory.getObject();\n+\t\t}\n+\n+\t}\n+\n+\n+\tstatic class GitResourceAvailableCondition extends SpringBootCondition {\n+\n+\t\tprivate final ResourceLoader defaultResourceLoader = new DefaultResourceLoader();\n+\n+\t\t@Override\n+\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata metadata) {\n+\t\t\tResourceLoader loader = context.getResourceLoader() == null\n+\t\t\t\t\t? this.defaultResourceLoader : context.getResourceLoader();\n+\t\t\tPropertyResolver propertyResolver = context.getEnvironment();\n+\t\t\tRelaxedPropertyResolver resolver = new RelaxedPropertyResolver(propertyResolver, "spring.info.git.");\n+\t\t\tString location = resolver.getProperty("location");\n+\t\t\tif (location == null) {\n+\t\t\t\tresolver = new RelaxedPropertyResolver(propertyResolver, "spring.git.");\n+\t\t\t\tlocation = resolver.getProperty("properties");\n+\t\t\t\tif (location == null) {\n+\t\t\t\t\tlocation = "classpath:git.properties";\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tboolean match = loader.getResource(location).exists();\n+\t\t\treturn new ConditionOutcome(match, "Git info " + (match ? "found" : "not found") + " at " + location);\n+\t\t}\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.info;\n\nimport java.util.Properties;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.bind.PropertiesConfigurationFactory;\nimport org.springframework.boot.bind.RelaxedPropertyResolver;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.PropertyResolver;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.core.io.support.PropertiesLoaderUtils;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for various project information.\n *\n * @author Stephane Nicoll\n * @since 1.4.0\n */\n@Configuration\n@EnableConfigurationProperties(ProjectInfoProperties.class)\npublic class ProjectInfoAutoConfiguration {\n\n\t@Configuration\n\t@Conditional(GitResourceAvailableCondition.class)\n\tprotected static class GitInfoAutoConfiguration {\n\n\t\t@ConditionalOnMissingBean\n\t\t@Bean\n\t\tpublic GitInfo gitInfo(ProjectInfoProperties properties) throws Exception {\n\t\t\tPropertiesConfigurationFactory<GitInfo> factory = new PropertiesConfigurationFactory<GitInfo>(\n\t\t\t\t\tnew GitInfo());\n\t\t\tfactory.setTargetName("git");\n\t\t\tProperties gitInfoProperties = PropertiesLoaderUtils\n\t\t\t\t\t.loadProperties(properties.getGit().getLocation());\n\t\t\tfactory.setProperties(gitInfoProperties);\n\t\t\treturn factory.getObject();\n\t\t}\n\n\t}\n\n\n\tstatic class GitResourceAvailableCondition extends SpringBootCondition {\n\n\t\tprivate final ResourceLoader defaultResourceLoader = new DefaultResourceLoader();\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata metadata) {\n\t\t\tResourceLoader loader = context.getResourceLoader() == null\n\t\t\t\t\t? this.defaultResourceLoader : context.getResourceLoader();\n\t\t\tPropertyResolver propertyResolver = context.getEnvironment();\n\t\t\tRelaxedPropertyResolver resolver = new RelaxedPropertyResolver(propertyResolver, "spring.info.git.");\n\t\t\tString location = resolver.getProperty("location");\n\t\t\tif (location == null) {\n\t\t\t\tresolver = new RelaxedPropertyResolver(propertyResolver, "spring.git.");\n\t\t\t\tlocation = resolver.getProperty("properties");\n\t\t\t\tif (location == null) {\n\t\t\t\t\tlocation = "classpath:git.properties";\n\t\t\t\t}\n\t\t\t}\n\t\t\tboolean match = loader.getResource(location).exists();\n\t\t\treturn new ConditionOutcome(match, "Git info " + (match ? "found" : "not found") + " at " + location);\n\t\t}\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
