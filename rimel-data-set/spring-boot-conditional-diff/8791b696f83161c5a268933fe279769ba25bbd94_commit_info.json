{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/TransactionAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/TransactionAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -33,8 +33,11 @@ import org.springframework.boot.context.properties.EnableConfigurationProperties\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.transaction.PlatformTransactionManager;\n+import org.springframework.transaction.ReactiveTransactionManager;\n+import org.springframework.transaction.TransactionManager;\n import org.springframework.transaction.annotation.AbstractTransactionManagementConfiguration;\n import org.springframework.transaction.annotation.EnableTransactionManagement;\n+import org.springframework.transaction.reactive.TransactionalOperator;\n import org.springframework.transaction.support.TransactionOperations;\n import org.springframework.transaction.support.TransactionTemplate;\n \n@@ -59,6 +62,13 @@ public class TransactionAutoConfiguration {\n \t\treturn new TransactionManagerCustomizers(customizers.orderedStream().collect(Collectors.toList()));\n \t}\n \n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\t@ConditionalOnSingleCandidate(ReactiveTransactionManager.class)\n+\tpublic TransactionalOperator transactionalOperator(ReactiveTransactionManager transactionManager) {\n+\t\treturn TransactionalOperator.create(transactionManager);\n+\t}\n+\n \t@Configuration(proxyBeanMethods = false)\n \t@ConditionalOnSingleCandidate(PlatformTransactionManager.class)\n \tpublic static class TransactionTemplateConfiguration {\n@@ -72,7 +82,7 @@ public class TransactionAutoConfiguration {\n \t}\n \n \t@Configuration(proxyBeanMethods = false)\n-\t@ConditionalOnBean(PlatformTransactionManager.class)\n+\t@ConditionalOnBean(TransactionManager.class)\n \t@ConditionalOnMissingBean(AbstractTransactionManagementConfiguration.class)\n \tpublic static class EnableTransactionManagementConfiguration {\n \n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.transaction;\n\nimport java.util.stream.Collectors;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\nimport org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration;\nimport org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;\nimport org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.transaction.ReactiveTransactionManager;\nimport org.springframework.transaction.TransactionManager;\nimport org.springframework.transaction.annotation.AbstractTransactionManagementConfiguration;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\nimport org.springframework.transaction.reactive.TransactionalOperator;\nimport org.springframework.transaction.support.TransactionOperations;\nimport org.springframework.transaction.support.TransactionTemplate;\n\n/**\n * {@link org.springframework.boot.autoconfigure.EnableAutoConfiguration\n * Auto-configuration} for Spring transaction.\n *\n * @author Stephane Nicoll\n * @since 1.3.0\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass(PlatformTransactionManager.class)\n@AutoConfigureAfter({ JtaAutoConfiguration.class, HibernateJpaAutoConfiguration.class,\n\t\tDataSourceTransactionManagerAutoConfiguration.class, Neo4jDataAutoConfiguration.class })\n@EnableConfigurationProperties(TransactionProperties.class)\npublic class TransactionAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic TransactionManagerCustomizers platformTransactionManagerCustomizers(\n\t\t\tObjectProvider<PlatformTransactionManagerCustomizer<?>> customizers) {\n\t\treturn new TransactionManagerCustomizers(customizers.orderedStream().collect(Collectors.toList()));\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnSingleCandidate(ReactiveTransactionManager.class)\n\tpublic TransactionalOperator transactionalOperator(ReactiveTransactionManager transactionManager) {\n\t\treturn TransactionalOperator.create(transactionManager);\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnSingleCandidate(PlatformTransactionManager.class)\n\tpublic static class TransactionTemplateConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(TransactionOperations.class)\n\t\tpublic TransactionTemplate transactionTemplate(PlatformTransactionManager transactionManager) {\n\t\t\treturn new TransactionTemplate(transactionManager);\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnBean(TransactionManager.class)\n\t@ConditionalOnMissingBean(AbstractTransactionManagementConfiguration.class)\n\tpublic static class EnableTransactionManagementConfiguration {\n\n\t\t@Configuration(proxyBeanMethods = false)\n\t\t@EnableTransactionManagement(proxyTargetClass = false)\n\t\t@ConditionalOnProperty(prefix = "spring.aop", name = "proxy-target-class", havingValue = "false",\n\t\t\t\tmatchIfMissing = false)\n\t\tpublic static class JdkDynamicAutoProxyConfiguration {\n\n\t\t}\n\n\t\t@Configuration(proxyBeanMethods = false)\n\t\t@EnableTransactionManagement(proxyTargetClass = true)\n\t\t@ConditionalOnProperty(prefix = "spring.aop", name = "proxy-target-class", havingValue = "true",\n\t\t\t\tmatchIfMissing = true)\n\t\tpublic static class CglibAutoProxyConfiguration {\n\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.transaction;\n\nimport java.util.stream.Collectors;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\nimport org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration;\nimport org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;\nimport org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.transaction.annotation.AbstractTransactionManagementConfiguration;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\nimport org.springframework.transaction.support.TransactionOperations;\nimport org.springframework.transaction.support.TransactionTemplate;\n\n/**\n * {@link org.springframework.boot.autoconfigure.EnableAutoConfiguration\n * Auto-configuration} for Spring transaction.\n *\n * @author Stephane Nicoll\n * @since 1.3.0\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass(PlatformTransactionManager.class)\n@AutoConfigureAfter({ JtaAutoConfiguration.class, HibernateJpaAutoConfiguration.class,\n\t\tDataSourceTransactionManagerAutoConfiguration.class, Neo4jDataAutoConfiguration.class })\n@EnableConfigurationProperties(TransactionProperties.class)\npublic class TransactionAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic TransactionManagerCustomizers platformTransactionManagerCustomizers(\n\t\t\tObjectProvider<PlatformTransactionManagerCustomizer<?>> customizers) {\n\t\treturn new TransactionManagerCustomizers(customizers.orderedStream().collect(Collectors.toList()));\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnSingleCandidate(PlatformTransactionManager.class)\n\tpublic static class TransactionTemplateConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(TransactionOperations.class)\n\t\tpublic TransactionTemplate transactionTemplate(PlatformTransactionManager transactionManager) {\n\t\t\treturn new TransactionTemplate(transactionManager);\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnBean(PlatformTransactionManager.class)\n\t@ConditionalOnMissingBean(AbstractTransactionManagementConfiguration.class)\n\tpublic static class EnableTransactionManagementConfiguration {\n\n\t\t@Configuration(proxyBeanMethods = false)\n\t\t@EnableTransactionManagement(proxyTargetClass = false)\n\t\t@ConditionalOnProperty(prefix = "spring.aop", name = "proxy-target-class", havingValue = "false",\n\t\t\t\tmatchIfMissing = false)\n\t\tpublic static class JdkDynamicAutoProxyConfiguration {\n\n\t\t}\n\n\t\t@Configuration(proxyBeanMethods = false)\n\t\t@EnableTransactionManagement(proxyTargetClass = true)\n\t\t@ConditionalOnProperty(prefix = "spring.aop", name = "proxy-target-class", havingValue = "true",\n\t\t\t\tmatchIfMissing = true)\n\t\tpublic static class CglibAutoProxyConfiguration {\n\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
