{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -106,7 +106,6 @@ public class BatchAutoConfiguration {\n \n \t\t@Bean\n \t\t@ConditionalOnMissingBean\n-\t\t@ConditionalOnBean(DataSource.class)\n \t\tBatchDataSourceInitializer batchDataSourceInitializer(DataSource dataSource,\n \t\t\t\t@BatchDataSource ObjectProvider<DataSource> batchDataSource, ResourceLoader resourceLoader,\n \t\t\t\tBatchProperties properties) {\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.batch;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.batch.core.configuration.ListableJobLocator;\nimport org.springframework.batch.core.converter.JobParametersConverter;\nimport org.springframework.batch.core.explore.JobExplorer;\nimport org.springframework.batch.core.launch.JobLauncher;\nimport org.springframework.batch.core.launch.JobOperator;\nimport org.springframework.batch.core.launch.support.SimpleJobOperator;\nimport org.springframework.batch.core.repository.JobRepository;\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.ExitCodeGenerator;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.jdbc.datasource.init.DatabasePopulator;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Batch. By default a\n * Runner will be created and all jobs in the context will be executed on startup.\n * <p>\n * Disable this behavior with {@literal spring.batch.job.enabled=false}).\n * <p>\n * Alternatively, discrete Job names to execute on startup can be supplied by the User\n * with a comma-delimited list: {@literal spring.batch.job.names=job1,job2}. In this case\n * the Runner will first find jobs registered as Beans, then those in the existing\n * JobRegistry.\n *\n * @author Dave Syer\n * @author Eddú Meléndez\n * @author Kazuki Shimizu\n * @author Mahmoud Ben Hassine\n * @since 1.0.0\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass({ JobLauncher.class, DataSource.class })\n@AutoConfigureAfter(HibernateJpaAutoConfiguration.class)\n@ConditionalOnBean(JobLauncher.class)\n@EnableConfigurationProperties(BatchProperties.class)\n@Import(BatchConfigurerConfiguration.class)\npublic class BatchAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnProperty(prefix = "spring.batch.job", name = "enabled", havingValue = "true", matchIfMissing = true)\n\tpublic JobLauncherCommandLineRunner jobLauncherCommandLineRunner(JobLauncher jobLauncher, JobExplorer jobExplorer,\n\t\t\tJobRepository jobRepository, BatchProperties properties) {\n\t\tJobLauncherCommandLineRunner runner = new JobLauncherCommandLineRunner(jobLauncher, jobExplorer, jobRepository);\n\t\tString jobNames = properties.getJob().getNames();\n\t\tif (StringUtils.hasText(jobNames)) {\n\t\t\trunner.setJobNames(jobNames);\n\t\t}\n\t\treturn runner;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(ExitCodeGenerator.class)\n\tpublic JobExecutionExitCodeGenerator jobExecutionExitCodeGenerator() {\n\t\treturn new JobExecutionExitCodeGenerator();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(JobOperator.class)\n\tpublic SimpleJobOperator jobOperator(ObjectProvider<JobParametersConverter> jobParametersConverter,\n\t\t\tJobExplorer jobExplorer, JobLauncher jobLauncher, ListableJobLocator jobRegistry,\n\t\t\tJobRepository jobRepository) throws Exception {\n\t\tSimpleJobOperator factory = new SimpleJobOperator();\n\t\tfactory.setJobExplorer(jobExplorer);\n\t\tfactory.setJobLauncher(jobLauncher);\n\t\tfactory.setJobRegistry(jobRegistry);\n\t\tfactory.setJobRepository(jobRepository);\n\t\tjobParametersConverter.ifAvailable(factory::setJobParametersConverter);\n\t\treturn factory;\n\t}\n\n\t@ConditionalOnBean(DataSource.class)\n\t@ConditionalOnClass(DatabasePopulator.class)\n\tstatic class DataSourceInitializerConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tBatchDataSourceInitializer batchDataSourceInitializer(DataSource dataSource,\n\t\t\t\t@BatchDataSource ObjectProvider<DataSource> batchDataSource, ResourceLoader resourceLoader,\n\t\t\t\tBatchProperties properties) {\n\t\t\treturn new BatchDataSourceInitializer(batchDataSource.getIfAvailable(() -> dataSource), resourceLoader,\n\t\t\t\t\tproperties);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.batch;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.batch.core.configuration.ListableJobLocator;\nimport org.springframework.batch.core.converter.JobParametersConverter;\nimport org.springframework.batch.core.explore.JobExplorer;\nimport org.springframework.batch.core.launch.JobLauncher;\nimport org.springframework.batch.core.launch.JobOperator;\nimport org.springframework.batch.core.launch.support.SimpleJobOperator;\nimport org.springframework.batch.core.repository.JobRepository;\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.ExitCodeGenerator;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.jdbc.datasource.init.DatabasePopulator;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Batch. By default a\n * Runner will be created and all jobs in the context will be executed on startup.\n * <p>\n * Disable this behavior with {@literal spring.batch.job.enabled=false}).\n * <p>\n * Alternatively, discrete Job names to execute on startup can be supplied by the User\n * with a comma-delimited list: {@literal spring.batch.job.names=job1,job2}. In this case\n * the Runner will first find jobs registered as Beans, then those in the existing\n * JobRegistry.\n *\n * @author Dave Syer\n * @author Eddú Meléndez\n * @author Kazuki Shimizu\n * @author Mahmoud Ben Hassine\n * @since 1.0.0\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass({ JobLauncher.class, DataSource.class })\n@AutoConfigureAfter(HibernateJpaAutoConfiguration.class)\n@ConditionalOnBean(JobLauncher.class)\n@EnableConfigurationProperties(BatchProperties.class)\n@Import(BatchConfigurerConfiguration.class)\npublic class BatchAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnProperty(prefix = "spring.batch.job", name = "enabled", havingValue = "true", matchIfMissing = true)\n\tpublic JobLauncherCommandLineRunner jobLauncherCommandLineRunner(JobLauncher jobLauncher, JobExplorer jobExplorer,\n\t\t\tJobRepository jobRepository, BatchProperties properties) {\n\t\tJobLauncherCommandLineRunner runner = new JobLauncherCommandLineRunner(jobLauncher, jobExplorer, jobRepository);\n\t\tString jobNames = properties.getJob().getNames();\n\t\tif (StringUtils.hasText(jobNames)) {\n\t\t\trunner.setJobNames(jobNames);\n\t\t}\n\t\treturn runner;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(ExitCodeGenerator.class)\n\tpublic JobExecutionExitCodeGenerator jobExecutionExitCodeGenerator() {\n\t\treturn new JobExecutionExitCodeGenerator();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(JobOperator.class)\n\tpublic SimpleJobOperator jobOperator(ObjectProvider<JobParametersConverter> jobParametersConverter,\n\t\t\tJobExplorer jobExplorer, JobLauncher jobLauncher, ListableJobLocator jobRegistry,\n\t\t\tJobRepository jobRepository) throws Exception {\n\t\tSimpleJobOperator factory = new SimpleJobOperator();\n\t\tfactory.setJobExplorer(jobExplorer);\n\t\tfactory.setJobLauncher(jobLauncher);\n\t\tfactory.setJobRegistry(jobRegistry);\n\t\tfactory.setJobRepository(jobRepository);\n\t\tjobParametersConverter.ifAvailable(factory::setJobParametersConverter);\n\t\treturn factory;\n\t}\n\n\t@ConditionalOnBean(DataSource.class)\n\t@ConditionalOnClass(DatabasePopulator.class)\n\tstatic class DataSourceInitializerConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnBean(DataSource.class)\n\t\tBatchDataSourceInitializer batchDataSourceInitializer(DataSource dataSource,\n\t\t\t\t@BatchDataSource ObjectProvider<DataSource> batchDataSource, ResourceLoader resourceLoader,\n\t\t\t\tBatchProperties properties) {\n\t\t\treturn new BatchDataSourceInitializer(batchDataSource.getIfAvailable(() -> dataSource), resourceLoader,\n\t\t\t\t\tproperties);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
