{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/webflux/WebFluxFunctionalAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2012-2017 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.webflux;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.AutoConfigureOrder;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.Ordered;\n+import org.springframework.core.annotation.AnnotationAwareOrderComparator;\n+import org.springframework.http.codec.HttpMessageReader;\n+import org.springframework.http.codec.HttpMessageWriter;\n+import org.springframework.http.server.reactive.HttpHandler;\n+import org.springframework.web.reactive.DispatcherHandler;\n+import org.springframework.web.reactive.function.server.HandlerStrategies;\n+import org.springframework.web.reactive.function.server.RouterFunction;\n+import org.springframework.web.reactive.function.server.RouterFunctions;\n+import org.springframework.web.reactive.result.view.ViewResolver;\n+import org.springframework.web.server.WebFilter;\n+import org.springframework.web.server.WebHandler;\n+import org.springframework.web.server.adapter.WebHttpHandlerBuilder;\n+import org.springframework.web.server.session.WebSessionManager;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for Functional WebFlux.\n+ *\n+ * @author Brian Clozel\n+ */\n+@Configuration\n+@ConditionalOnClass({DispatcherHandler.class, HttpHandler.class})\n+@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)\n+@ConditionalOnBean(RouterFunction.class)\n+@ConditionalOnMissingBean(HttpHandler.class)\n+@AutoConfigureAfter({ReactiveWebServerAutoConfiguration.class})\n+@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)\n+public class WebFluxFunctionalAutoConfiguration {\n+\n+\t@Configuration\n+\tpublic static class WebFluxFunctionalConfig {\n+\n+\t\tprivate final List<WebFilter> webFilters;\n+\n+\t\tprivate final WebSessionManager webSessionManager;\n+\n+\t\tprivate final List<HttpMessageReader> messageReaders;\n+\n+\t\tprivate final List<HttpMessageWriter> messageWriters;\n+\n+\t\tprivate final List<ViewResolver> viewResolvers;\n+\n+\t\tpublic WebFluxFunctionalConfig(ObjectProvider<List<WebFilter>> webFilters,\n+\t\t\t\tObjectProvider<WebSessionManager> webSessionManager,\n+\t\t\t\tObjectProvider<List<HttpMessageReader>> messageReaders,\n+\t\t\t\tObjectProvider<List<HttpMessageWriter>> messageWriters,\n+\t\t\t\tObjectProvider<List<ViewResolver>> viewResolvers) {\n+\t\t\tthis.webFilters = webFilters.getIfAvailable();\n+\t\t\tif (this.webFilters != null) {\n+\t\t\t\tAnnotationAwareOrderComparator.sort(this.webFilters);\n+\t\t\t}\n+\t\t\tthis.webSessionManager = webSessionManager.getIfAvailable();\n+\t\t\tthis.messageReaders = messageReaders.getIfAvailable();\n+\t\t\tthis.messageWriters = messageWriters.getIfAvailable();\n+\t\t\tthis.viewResolvers = viewResolvers.getIfAvailable();\n+\t\t}\n+\n+\t\t@Bean\n+\t\tpublic HttpHandler httpHandler(List<RouterFunction> routerFunctions) {\n+\t\t\tCollections.sort(routerFunctions, new AnnotationAwareOrderComparator());\n+\t\t\tRouterFunction routerFunction = routerFunctions.stream().reduce(RouterFunction::and).get();\n+\t\t\tHandlerStrategies.Builder strategiesBuilder = HandlerStrategies.builder();\n+\t\t\tif (this.messageReaders != null) {\n+\t\t\t\tthis.messageReaders.forEach(reader -> strategiesBuilder.messageReader(reader));\n+\t\t\t}\n+\t\t\tif (this.messageWriters != null) {\n+\t\t\t\tthis.messageWriters.forEach(writer -> strategiesBuilder.messageWriter(writer));\n+\t\t\t}\n+\t\t\tif (this.viewResolvers != null) {\n+\t\t\t\tthis.viewResolvers.forEach(viewResolver -> strategiesBuilder.viewResolver(viewResolver));\n+\t\t\t}\n+\t\t\tWebHandler webHandler = RouterFunctions.toHttpHandler(routerFunction, strategiesBuilder.build());\n+\t\t\tWebHttpHandlerBuilder builder = WebHttpHandlerBuilder\n+\t\t\t\t\t.webHandler(webHandler)\n+\t\t\t\t\t.sessionManager(this.webSessionManager);\n+\t\t\tif (this.webFilters != null) {\n+\t\t\t\tbuilder.filters(this.webFilters.toArray(new WebFilter[this.webFilters.size()]));\n+\t\t\t}\n+\t\t\treturn builder.build();\n+\t\t}\n+\t}\n+}\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.webflux;\n\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureOrder;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.AnnotationAwareOrderComparator;\nimport org.springframework.http.codec.HttpMessageReader;\nimport org.springframework.http.codec.HttpMessageWriter;\nimport org.springframework.http.server.reactive.HttpHandler;\nimport org.springframework.web.reactive.DispatcherHandler;\nimport org.springframework.web.reactive.function.server.HandlerStrategies;\nimport org.springframework.web.reactive.function.server.RouterFunction;\nimport org.springframework.web.reactive.function.server.RouterFunctions;\nimport org.springframework.web.reactive.result.view.ViewResolver;\nimport org.springframework.web.server.WebFilter;\nimport org.springframework.web.server.WebHandler;\nimport org.springframework.web.server.adapter.WebHttpHandlerBuilder;\nimport org.springframework.web.server.session.WebSessionManager;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Functional WebFlux.\n *\n * @author Brian Clozel\n */\n@Configuration\n@ConditionalOnClass({DispatcherHandler.class, HttpHandler.class})\n@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)\n@ConditionalOnBean(RouterFunction.class)\n@ConditionalOnMissingBean(HttpHandler.class)\n@AutoConfigureAfter({ReactiveWebServerAutoConfiguration.class})\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)\npublic class WebFluxFunctionalAutoConfiguration {\n\n\t@Configuration\n\tpublic static class WebFluxFunctionalConfig {\n\n\t\tprivate final List<WebFilter> webFilters;\n\n\t\tprivate final WebSessionManager webSessionManager;\n\n\t\tprivate final List<HttpMessageReader> messageReaders;\n\n\t\tprivate final List<HttpMessageWriter> messageWriters;\n\n\t\tprivate final List<ViewResolver> viewResolvers;\n\n\t\tpublic WebFluxFunctionalConfig(ObjectProvider<List<WebFilter>> webFilters,\n\t\t\t\tObjectProvider<WebSessionManager> webSessionManager,\n\t\t\t\tObjectProvider<List<HttpMessageReader>> messageReaders,\n\t\t\t\tObjectProvider<List<HttpMessageWriter>> messageWriters,\n\t\t\t\tObjectProvider<List<ViewResolver>> viewResolvers) {\n\t\t\tthis.webFilters = webFilters.getIfAvailable();\n\t\t\tif (this.webFilters != null) {\n\t\t\t\tAnnotationAwareOrderComparator.sort(this.webFilters);\n\t\t\t}\n\t\t\tthis.webSessionManager = webSessionManager.getIfAvailable();\n\t\t\tthis.messageReaders = messageReaders.getIfAvailable();\n\t\t\tthis.messageWriters = messageWriters.getIfAvailable();\n\t\t\tthis.viewResolvers = viewResolvers.getIfAvailable();\n\t\t}\n\n\t\t@Bean\n\t\tpublic HttpHandler httpHandler(List<RouterFunction> routerFunctions) {\n\t\t\tCollections.sort(routerFunctions, new AnnotationAwareOrderComparator());\n\t\t\tRouterFunction routerFunction = routerFunctions.stream().reduce(RouterFunction::and).get();\n\t\t\tHandlerStrategies.Builder strategiesBuilder = HandlerStrategies.builder();\n\t\t\tif (this.messageReaders != null) {\n\t\t\t\tthis.messageReaders.forEach(reader -> strategiesBuilder.messageReader(reader));\n\t\t\t}\n\t\t\tif (this.messageWriters != null) {\n\t\t\t\tthis.messageWriters.forEach(writer -> strategiesBuilder.messageWriter(writer));\n\t\t\t}\n\t\t\tif (this.viewResolvers != null) {\n\t\t\t\tthis.viewResolvers.forEach(viewResolver -> strategiesBuilder.viewResolver(viewResolver));\n\t\t\t}\n\t\t\tWebHandler webHandler = RouterFunctions.toHttpHandler(routerFunction, strategiesBuilder.build());\n\t\t\tWebHttpHandlerBuilder builder = WebHttpHandlerBuilder\n\t\t\t\t\t.webHandler(webHandler)\n\t\t\t\t\t.sessionManager(this.webSessionManager);\n\t\t\tif (this.webFilters != null) {\n\t\t\t\tbuilder.filters(this.webFilters.toArray(new WebFilter[this.webFilters.size()]));\n\t\t\t}\n\t\t\treturn builder.build();\n\t\t}\n\t}\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
