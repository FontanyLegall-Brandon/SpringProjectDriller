{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2WebSecurityConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2WebSecurityConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -34,7 +34,6 @@ import org.springframework.security.oauth2.client.registration.ClientRegistratio\n  * @since 2.0.0\n  */\n @Configuration\n-@ConditionalOnMissingBean(WebSecurityConfigurerAdapter.class)\n @ConditionalOnBean(ClientRegistrationRepository.class)\n class OAuth2WebSecurityConfiguration {\n \n@@ -46,7 +45,8 @@ class OAuth2WebSecurityConfiguration {\n \t}\n \n \t@Configuration\n-\tstatic class OAuth2WebSecurityConfigurationAdapter\n+\t@ConditionalOnMissingBean(WebSecurityConfigurerAdapter.class)\n+\tstatic class OAuth2WebSecurityConfigurerAdapter\n \t\t\textends WebSecurityConfigurerAdapter {\n \n \t\t@Override\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security.oauth2.client;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService;\nimport org.springframework.security.oauth2.client.OAuth2AuthorizedClientService;\nimport org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n\n/**\n * {@link WebSecurityConfigurerAdapter} to add OAuth client support.\n *\n * @author Madhura Bhave\n * @author Phillip Webb\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnBean(ClientRegistrationRepository.class)\nclass OAuth2WebSecurityConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic OAuth2AuthorizedClientService authorizedClientService(\n\t\t\tClientRegistrationRepository clientRegistrationRepository) {\n\t\treturn new InMemoryOAuth2AuthorizedClientService(clientRegistrationRepository);\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(WebSecurityConfigurerAdapter.class)\n\tstatic class OAuth2WebSecurityConfigurerAdapter\n\t\t\textends WebSecurityConfigurerAdapter {\n\n\t\t@Override\n\t\tprotected void configure(HttpSecurity http) throws Exception {\n\t\t\thttp.authorizeRequests().anyRequest().authenticated().and().oauth2Login();\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security.oauth2.client;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService;\nimport org.springframework.security.oauth2.client.OAuth2AuthorizedClientService;\nimport org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n\n/**\n * {@link WebSecurityConfigurerAdapter} to add OAuth client support.\n *\n * @author Madhura Bhave\n * @author Phillip Webb\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnMissingBean(WebSecurityConfigurerAdapter.class)\n@ConditionalOnBean(ClientRegistrationRepository.class)\nclass OAuth2WebSecurityConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic OAuth2AuthorizedClientService authorizedClientService(\n\t\t\tClientRegistrationRepository clientRegistrationRepository) {\n\t\treturn new InMemoryOAuth2AuthorizedClientService(clientRegistrationRepository);\n\t}\n\n\t@Configuration\n\tstatic class OAuth2WebSecurityConfigurationAdapter\n\t\t\textends WebSecurityConfigurerAdapter {\n\n\t\t@Override\n\t\tprotected void configure(HttpSecurity http) throws Exception {\n\t\t\thttp.authorizeRequests().anyRequest().authenticated().and().oauth2Login();\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
