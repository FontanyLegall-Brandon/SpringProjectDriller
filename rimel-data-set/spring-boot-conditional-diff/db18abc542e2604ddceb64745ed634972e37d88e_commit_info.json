{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchDataAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchDataAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2015 the original author or authors.\n+ * Copyright 2012-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -20,6 +20,7 @@ import org.elasticsearch.client.Client;\n \n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n@@ -49,6 +50,7 @@ public class ElasticsearchDataAutoConfiguration {\n \n \t@Bean\n \t@ConditionalOnMissingBean\n+\t@ConditionalOnBean(Client.class)\n \tpublic ElasticsearchTemplate elasticsearchTemplate(Client client,\n \t\t\tElasticsearchConverter converter) {\n \t\ttry {\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.elasticsearch;\n\nimport org.elasticsearch.client.Client;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.elasticsearch.core.ElasticsearchTemplate;\nimport org.springframework.data.elasticsearch.core.convert.ElasticsearchConverter;\nimport org.springframework.data.elasticsearch.core.convert.MappingElasticsearchConverter;\nimport org.springframework.data.elasticsearch.core.mapping.SimpleElasticsearchMappingContext;\nimport org.springframework.data.elasticsearch.repository.config.EnableElasticsearchRepositories;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s Elasticsearch\n * support.\n * <p>\n * Registers a {@link ElasticsearchTemplate} if no other bean of the same type is\n * configured.\n *\n * @author Artur Konczak\n * @author Mohsin Husen\n * @see EnableElasticsearchRepositories\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass({ Client.class, ElasticsearchTemplate.class })\n@AutoConfigureAfter(ElasticsearchAutoConfiguration.class)\npublic class ElasticsearchDataAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnBean(Client.class)\n\tpublic ElasticsearchTemplate elasticsearchTemplate(Client client,\n\t\t\tElasticsearchConverter converter) {\n\t\ttry {\n\t\t\treturn new ElasticsearchTemplate(client, converter);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthrow new IllegalStateException(ex);\n\t\t}\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic ElasticsearchConverter elasticsearchConverter(\n\t\t\tSimpleElasticsearchMappingContext mappingContext) {\n\t\treturn new MappingElasticsearchConverter(mappingContext);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic SimpleElasticsearchMappingContext mappingContext() {\n\t\treturn new SimpleElasticsearchMappingContext();\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.elasticsearch;\n\nimport org.elasticsearch.client.Client;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.elasticsearch.core.ElasticsearchTemplate;\nimport org.springframework.data.elasticsearch.core.convert.ElasticsearchConverter;\nimport org.springframework.data.elasticsearch.core.convert.MappingElasticsearchConverter;\nimport org.springframework.data.elasticsearch.core.mapping.SimpleElasticsearchMappingContext;\nimport org.springframework.data.elasticsearch.repository.config.EnableElasticsearchRepositories;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s Elasticsearch\n * support.\n * <p>\n * Registers a {@link ElasticsearchTemplate} if no other bean of the same type is\n * configured.\n *\n * @author Artur Konczak\n * @author Mohsin Husen\n * @see EnableElasticsearchRepositories\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass({ Client.class, ElasticsearchTemplate.class })\n@AutoConfigureAfter(ElasticsearchAutoConfiguration.class)\npublic class ElasticsearchDataAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic ElasticsearchTemplate elasticsearchTemplate(Client client,\n\t\t\tElasticsearchConverter converter) {\n\t\ttry {\n\t\t\treturn new ElasticsearchTemplate(client, converter);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthrow new IllegalStateException(ex);\n\t\t}\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic ElasticsearchConverter elasticsearchConverter(\n\t\t\tSimpleElasticsearchMappingContext mappingContext) {\n\t\treturn new MappingElasticsearchConverter(mappingContext);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic SimpleElasticsearchMappingContext mappingContext() {\n\t\treturn new SimpleElasticsearchMappingContext();\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
