{'_old_path': None, '_new_path': PosixPath('spring-bootstrap/src/test/java/org/springframework/bootstrap/autoconfigure/web/WebMvcAutoConfigurationTests.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2012-2013 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.bootstrap.autoconfigure.web;\n+\n+import javax.servlet.Servlet;\n+\n+import org.junit.Test;\n+import org.springframework.beans.BeansException;\n+import org.springframework.beans.factory.config.BeanPostProcessor;\n+import org.springframework.bootstrap.context.annotation.ConditionalOnExpression;\n+import org.springframework.bootstrap.context.embedded.AnnotationConfigEmbeddedWebApplicationContext;\n+import org.springframework.bootstrap.context.embedded.ConfigurableEmbeddedServletContainerFactory;\n+import org.springframework.bootstrap.context.embedded.EmbeddedServletContainerCustomizer;\n+import org.springframework.bootstrap.context.embedded.EmbeddedServletContainerFactory;\n+import org.springframework.bootstrap.context.embedded.MockEmbeddedServletContainerFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.stereotype.Component;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * @author Dave Syer\n+ */\n+public class WebMvcAutoConfigurationTests {\n+\n+\tprivate AnnotationConfigEmbeddedWebApplicationContext context;\n+\n+\t@Test\n+\tpublic void createFromConfigClass() throws Exception {\n+\t\tthis.context = new AnnotationConfigEmbeddedWebApplicationContext(\n+\t\t\t\tWebMvcAutoConfiguration.class, EmbeddedContainerConfiguration.class);\n+\t\tverifyContext();\n+\t}\n+\n+\t@Test\n+\tpublic void containerHasNoServletContext() throws Exception {\n+\t\tthis.context = new AnnotationConfigEmbeddedWebApplicationContext(\n+\t\t\t\tWebMvcAutoConfiguration.class, EmbeddedContainerConfiguration.class,\n+\t\t\t\tEnsureContainerHasNoServletContext.class);\n+\t\tverifyContext();\n+\t}\n+\n+\t@Test\n+\tpublic void customizeContainerThroughCallback() throws Exception {\n+\t\tthis.context = new AnnotationConfigEmbeddedWebApplicationContext(\n+\t\t\t\tWebMvcAutoConfiguration.class, EmbeddedContainerConfiguration.class,\n+\t\t\t\tEmbeddedContainerCustomizerConfiguration.class,\n+\t\t\t\tCallbackEmbeddedContainerCustomizer.class);\n+\t\tverifyContext();\n+\t\tassertEquals(9000, getContainerFactory().getPort());\n+\t}\n+\n+\tprivate void verifyContext() {\n+\t\tMockEmbeddedServletContainerFactory containerFactory = getContainerFactory();\n+\t\tServlet servlet = this.context.getBean(Servlet.class);\n+\t\tverify(containerFactory.getServletContext()).addServlet("dispatcherServlet",\n+\t\t\t\tservlet);\n+\t}\n+\n+\tprivate MockEmbeddedServletContainerFactory getContainerFactory() {\n+\t\treturn this.context.getBean(MockEmbeddedServletContainerFactory.class);\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnExpression("true")\n+\tpublic static class EmbeddedContainerConfiguration {\n+\n+\t\t@Bean\n+\t\tpublic EmbeddedServletContainerFactory containerFactory() {\n+\t\t\treturn new MockEmbeddedServletContainerFactory();\n+\t\t}\n+\n+\t}\n+\n+\t@Component\n+\tpublic static class EnsureContainerHasNoServletContext implements BeanPostProcessor {\n+\n+\t\t@Override\n+\t\tpublic Object postProcessBeforeInitialization(Object bean, String beanName)\n+\t\t\t\tthrows BeansException {\n+\t\t\tif (bean instanceof ConfigurableEmbeddedServletContainerFactory) {\n+\t\t\t\tMockEmbeddedServletContainerFactory containerFactory = (MockEmbeddedServletContainerFactory) bean;\n+\t\t\t\tassertNull(containerFactory.getServletContext());\n+\t\t\t}\n+\t\t\treturn bean;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Object postProcessAfterInitialization(Object bean, String beanName) {\n+\t\t\treturn bean;\n+\t\t}\n+\n+\t}\n+\n+\t@Component\n+\tpublic static class CallbackEmbeddedContainerCustomizer implements\n+\t\t\tEmbeddedServletContainerCustomizer {\n+\t\t@Override\n+\t\tpublic void customize(ConfigurableEmbeddedServletContainerFactory factory) {\n+\t\t\tfactory.setPort(9000);\n+\t\t}\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.bootstrap.autoconfigure.web;\n\nimport javax.servlet.Servlet;\n\nimport org.junit.Test;\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.config.BeanPostProcessor;\nimport org.springframework.bootstrap.context.annotation.ConditionalOnExpression;\nimport org.springframework.bootstrap.context.embedded.AnnotationConfigEmbeddedWebApplicationContext;\nimport org.springframework.bootstrap.context.embedded.ConfigurableEmbeddedServletContainerFactory;\nimport org.springframework.bootstrap.context.embedded.EmbeddedServletContainerCustomizer;\nimport org.springframework.bootstrap.context.embedded.EmbeddedServletContainerFactory;\nimport org.springframework.bootstrap.context.embedded.MockEmbeddedServletContainerFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.stereotype.Component;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNull;\nimport static org.mockito.Mockito.verify;\n\n/**\n * @author Dave Syer\n */\npublic class WebMvcAutoConfigurationTests {\n\n\tprivate AnnotationConfigEmbeddedWebApplicationContext context;\n\n\t@Test\n\tpublic void createFromConfigClass() throws Exception {\n\t\tthis.context = new AnnotationConfigEmbeddedWebApplicationContext(\n\t\t\t\tWebMvcAutoConfiguration.class, EmbeddedContainerConfiguration.class);\n\t\tverifyContext();\n\t}\n\n\t@Test\n\tpublic void containerHasNoServletContext() throws Exception {\n\t\tthis.context = new AnnotationConfigEmbeddedWebApplicationContext(\n\t\t\t\tWebMvcAutoConfiguration.class, EmbeddedContainerConfiguration.class,\n\t\t\t\tEnsureContainerHasNoServletContext.class);\n\t\tverifyContext();\n\t}\n\n\t@Test\n\tpublic void customizeContainerThroughCallback() throws Exception {\n\t\tthis.context = new AnnotationConfigEmbeddedWebApplicationContext(\n\t\t\t\tWebMvcAutoConfiguration.class, EmbeddedContainerConfiguration.class,\n\t\t\t\tEmbeddedContainerCustomizerConfiguration.class,\n\t\t\t\tCallbackEmbeddedContainerCustomizer.class);\n\t\tverifyContext();\n\t\tassertEquals(9000, getContainerFactory().getPort());\n\t}\n\n\tprivate void verifyContext() {\n\t\tMockEmbeddedServletContainerFactory containerFactory = getContainerFactory();\n\t\tServlet servlet = this.context.getBean(Servlet.class);\n\t\tverify(containerFactory.getServletContext()).addServlet("dispatcherServlet",\n\t\t\t\tservlet);\n\t}\n\n\tprivate MockEmbeddedServletContainerFactory getContainerFactory() {\n\t\treturn this.context.getBean(MockEmbeddedServletContainerFactory.class);\n\t}\n\n\t@Configuration\n\t@ConditionalOnExpression("true")\n\tpublic static class EmbeddedContainerConfiguration {\n\n\t\t@Bean\n\t\tpublic EmbeddedServletContainerFactory containerFactory() {\n\t\t\treturn new MockEmbeddedServletContainerFactory();\n\t\t}\n\n\t}\n\n\t@Component\n\tpublic static class EnsureContainerHasNoServletContext implements BeanPostProcessor {\n\n\t\t@Override\n\t\tpublic Object postProcessBeforeInitialization(Object bean, String beanName)\n\t\t\t\tthrows BeansException {\n\t\t\tif (bean instanceof ConfigurableEmbeddedServletContainerFactory) {\n\t\t\t\tMockEmbeddedServletContainerFactory containerFactory = (MockEmbeddedServletContainerFactory) bean;\n\t\t\t\tassertNull(containerFactory.getServletContext());\n\t\t\t}\n\t\t\treturn bean;\n\t\t}\n\n\t\t@Override\n\t\tpublic Object postProcessAfterInitialization(Object bean, String beanName) {\n\t\t\treturn bean;\n\t\t}\n\n\t}\n\n\t@Component\n\tpublic static class CallbackEmbeddedContainerCustomizer implements\n\t\t\tEmbeddedServletContainerCustomizer {\n\t\t@Override\n\t\tpublic void customize(ConfigurableEmbeddedServletContainerFactory factory) {\n\t\t\tfactory.setPort(9000);\n\t\t}\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
