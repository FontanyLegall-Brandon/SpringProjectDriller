@@ -21,11 +21,14 @@ import java.util.concurrent.Executor;
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Qualifier;
+import org.springframework.boot.actuate.endpoint.PublicMetrics;
+import org.springframework.boot.actuate.endpoint.RichGaugeReaderPublicMetrics;
 import org.springframework.boot.actuate.metrics.CounterService;
 import org.springframework.boot.actuate.metrics.GaugeService;
 import org.springframework.boot.actuate.metrics.export.Exporter;
 import org.springframework.boot.actuate.metrics.repository.InMemoryMetricRepository;
 import org.springframework.boot.actuate.metrics.repository.MetricRepository;
+import org.springframework.boot.actuate.metrics.rich.RichGaugeReader;
 import org.springframework.boot.actuate.metrics.writer.CodahaleMetricWriter;
 import org.springframework.boot.actuate.metrics.writer.CompositeMetricWriter;
 import org.springframework.boot.actuate.metrics.writer.DefaultCounterService;
@@ -34,6 +37,7 @@ import org.springframework.boot.actuate.metrics.writer.MessageChannelMetricWrite
 import org.springframework.boot.actuate.metrics.writer.MetricWriter;
 import org.springframework.boot.actuate.metrics.writer.MetricWriterMessageHandler;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;
@@ -69,7 +73,8 @@ import com.codahale.metrics.MetricRegistry;
  * In addition if Codahale's metrics library is on the classpath a {@link MetricRegistry}
  * will be created and wired up to the counter and gauge services in addition to the basic
  * repository. Users can create Codahale metrics by prefixing their metric names with the
- * appropriate type (e.g. , ).
+ * appropriate type (e.g. , ) and sending them to the standard 
+ * <code>GaugeService</code> or <code>CounterService</code>.
  * </p>
  * <p>
  * By default all metric updates go to all {@link MetricWriter} instances in the
@@ -117,6 +122,12 @@ public class MetricRepositoryAutoConfiguration {
 
 	}
 
+	@Bean
+	@ConditionalOnBean(RichGaugeReader.class)
+	public PublicMetrics richGaugePublicMetrics(RichGaugeReader richGaugeReader) {
+		return new RichGaugeReaderPublicMetrics(richGaugeReader);
+	}
+
 	@Configuration
 	@ConditionalOnClass(MessageChannel.class)
 	static class MetricsChannelConfiguration {

