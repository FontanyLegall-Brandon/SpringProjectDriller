{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/jdbc/JdbcRepositoriesAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/jdbc/JdbcRepositoriesAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -22,6 +22,7 @@ import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration;\n import org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Import;\n@@ -30,6 +31,7 @@ import org.springframework.data.jdbc.repository.config.EnableJdbcRepositories;\n import org.springframework.data.jdbc.repository.config.JdbcConfiguration;\n import org.springframework.data.jdbc.repository.config.JdbcRepositoryConfigExtension;\n import org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations;\n+import org.springframework.transaction.PlatformTransactionManager;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s JDBC Repositories.\n@@ -39,16 +41,17 @@ import org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations;\n  * providing an {@link AbstractJdbcConfiguration} subclass.\n  *\n  * @author Andy Wilkinson\n+ * @author Stephane Nicoll\n  * @since 2.1.0\n  * @see EnableJdbcRepositories\n  */\n @SuppressWarnings("deprecation")\n @Configuration(proxyBeanMethods = false)\n-@ConditionalOnBean(NamedParameterJdbcOperations.class)\n+@ConditionalOnBean({ NamedParameterJdbcOperations.class, PlatformTransactionManager.class })\n @ConditionalOnClass({ NamedParameterJdbcOperations.class, AbstractJdbcConfiguration.class })\n @ConditionalOnProperty(prefix = "spring.data.jdbc.repositories", name = "enabled", havingValue = "true",\n \t\tmatchIfMissing = true)\n-@AutoConfigureAfter(JdbcTemplateAutoConfiguration.class)\n+@AutoConfigureAfter({ JdbcTemplateAutoConfiguration.class, DataSourceTransactionManagerAutoConfiguration.class })\n public class JdbcRepositoriesAutoConfiguration {\n \n \t@Configuration(proxyBeanMethods = false)\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.jdbc;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.data.jdbc.repository.config.AbstractJdbcConfiguration;\nimport org.springframework.data.jdbc.repository.config.EnableJdbcRepositories;\nimport org.springframework.data.jdbc.repository.config.JdbcConfiguration;\nimport org.springframework.data.jdbc.repository.config.JdbcRepositoryConfigExtension;\nimport org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations;\nimport org.springframework.transaction.PlatformTransactionManager;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s JDBC Repositories.\n * <p>\n * Once in effect, the auto-configuration is the equivalent of enabling JDBC repositories\n * using the {@link EnableJdbcRepositories @EnableJdbcRepositories} annotation and\n * providing an {@link AbstractJdbcConfiguration} subclass.\n *\n * @author Andy Wilkinson\n * @author Stephane Nicoll\n * @since 2.1.0\n * @see EnableJdbcRepositories\n */\n@SuppressWarnings("deprecation")\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnBean({ NamedParameterJdbcOperations.class, PlatformTransactionManager.class })\n@ConditionalOnClass({ NamedParameterJdbcOperations.class, AbstractJdbcConfiguration.class })\n@ConditionalOnProperty(prefix = "spring.data.jdbc.repositories", name = "enabled", havingValue = "true",\n\t\tmatchIfMissing = true)\n@AutoConfigureAfter({ JdbcTemplateAutoConfiguration.class, DataSourceTransactionManagerAutoConfiguration.class })\npublic class JdbcRepositoriesAutoConfiguration {\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnMissingBean(JdbcRepositoryConfigExtension.class)\n\t@Import(JdbcRepositoriesRegistrar.class)\n\tstatic class JdbcRepositoriesConfiguration {\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean({ AbstractJdbcConfiguration.class, JdbcConfiguration.class })\n\tstatic class SpringBootJdbcConfiguration extends AbstractJdbcConfiguration {\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.jdbc;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.data.jdbc.repository.config.AbstractJdbcConfiguration;\nimport org.springframework.data.jdbc.repository.config.EnableJdbcRepositories;\nimport org.springframework.data.jdbc.repository.config.JdbcConfiguration;\nimport org.springframework.data.jdbc.repository.config.JdbcRepositoryConfigExtension;\nimport org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s JDBC Repositories.\n * <p>\n * Once in effect, the auto-configuration is the equivalent of enabling JDBC repositories\n * using the {@link EnableJdbcRepositories @EnableJdbcRepositories} annotation and\n * providing an {@link AbstractJdbcConfiguration} subclass.\n *\n * @author Andy Wilkinson\n * @since 2.1.0\n * @see EnableJdbcRepositories\n */\n@SuppressWarnings("deprecation")\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnBean(NamedParameterJdbcOperations.class)\n@ConditionalOnClass({ NamedParameterJdbcOperations.class, AbstractJdbcConfiguration.class })\n@ConditionalOnProperty(prefix = "spring.data.jdbc.repositories", name = "enabled", havingValue = "true",\n\t\tmatchIfMissing = true)\n@AutoConfigureAfter(JdbcTemplateAutoConfiguration.class)\npublic class JdbcRepositoriesAutoConfiguration {\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnMissingBean(JdbcRepositoryConfigExtension.class)\n\t@Import(JdbcRepositoriesRegistrar.class)\n\tstatic class JdbcRepositoriesConfiguration {\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean({ AbstractJdbcConfiguration.class, JdbcConfiguration.class })\n\tstatic class SpringBootJdbcConfiguration extends AbstractJdbcConfiguration {\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
