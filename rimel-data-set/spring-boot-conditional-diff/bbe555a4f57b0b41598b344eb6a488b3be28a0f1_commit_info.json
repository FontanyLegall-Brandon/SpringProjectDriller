{'_old_path': None, '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/jersey/JerseySameManagementContextConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2012-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.boot.actuate.autoconfigure.web.jersey;\n+\n+import org.glassfish.jersey.server.ResourceConfig;\n+\n+import org.springframework.boot.actuate.autoconfigure.web.ManagementContextConfiguration;\n+import org.springframework.boot.actuate.autoconfigure.web.ManagementContextType;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.autoconfigure.jersey.JerseyProperties;\n+import org.springframework.boot.autoconfigure.web.servlet.DefaultJerseyApplicationPath;\n+import org.springframework.boot.autoconfigure.web.servlet.JerseyApplicationPath;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Import;\n+\n+/**\n+ * {@link ManagementContextConfiguration} for Jersey infrastructure when the management\n+ * context is the same as the main application context.\n+ *\n+ * @author Madhura Bhave\n+ */\n+@ManagementContextConfiguration(ManagementContextType.SAME)\n+@ConditionalOnMissingBean(ResourceConfig.class)\n+@Import(JerseyManagementContextConfiguration.class)\n+@EnableConfigurationProperties(JerseyProperties.class)\n+@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n+@ConditionalOnClass(ResourceConfig.class)\n+@ConditionalOnMissingClass("org.springframework.web.servlet.DispatcherServlet")\n+public class JerseySameManagementContextConfiguration {\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean(JerseyApplicationPath.class)\n+\tpublic JerseyApplicationPath jerseyApplicationPath(JerseyProperties properties,\n+\t\t\tResourceConfig config) {\n+\t\treturn new DefaultJerseyApplicationPath(properties.getApplicationPath(), config);\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.boot.actuate.autoconfigure.web.jersey;\n\nimport org.glassfish.jersey.server.ResourceConfig;\n\nimport org.springframework.boot.actuate.autoconfigure.web.ManagementContextConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.web.ManagementContextType;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.jersey.JerseyProperties;\nimport org.springframework.boot.autoconfigure.web.servlet.DefaultJerseyApplicationPath;\nimport org.springframework.boot.autoconfigure.web.servlet.JerseyApplicationPath;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Import;\n\n/**\n * {@link ManagementContextConfiguration} for Jersey infrastructure when the management\n * context is the same as the main application context.\n *\n * @author Madhura Bhave\n */\n@ManagementContextConfiguration(ManagementContextType.SAME)\n@ConditionalOnMissingBean(ResourceConfig.class)\n@Import(JerseyManagementContextConfiguration.class)\n@EnableConfigurationProperties(JerseyProperties.class)\n@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n@ConditionalOnClass(ResourceConfig.class)\n@ConditionalOnMissingClass("org.springframework.web.servlet.DispatcherServlet")\npublic class JerseySameManagementContextConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean(JerseyApplicationPath.class)\n\tpublic JerseyApplicationPath jerseyApplicationPath(JerseyProperties properties,\n\t\t\tResourceConfig config) {\n\t\treturn new DefaultJerseyApplicationPath(properties.getApplicationPath(), config);\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
