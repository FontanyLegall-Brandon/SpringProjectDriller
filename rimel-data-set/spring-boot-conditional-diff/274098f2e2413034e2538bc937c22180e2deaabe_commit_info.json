{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jDataAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jDataAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -53,29 +53,15 @@ import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n  * @author Vince Bickers\n  * @author Stephane Nicoll\n  * @author Kazuki Shimizu\n+ * @author Michael Simons\n  * @since 1.4.0\n  */\n @Configuration\n @ConditionalOnClass({ SessionFactory.class, Neo4jTransactionManager.class, PlatformTransactionManager.class })\n-@ConditionalOnMissingBean(SessionFactory.class)\n @EnableConfigurationProperties(Neo4jProperties.class)\n @Import(Neo4jBookmarkManagementConfiguration.class)\n public class Neo4jDataAutoConfiguration {\n \n-\t@Bean\n-\t@ConditionalOnMissingBean\n-\tpublic org.neo4j.ogm.config.Configuration configuration(Neo4jProperties properties) {\n-\t\treturn properties.createConfiguration();\n-\t}\n-\n-\t@Bean\n-\tpublic SessionFactory sessionFactory(org.neo4j.ogm.config.Configuration configuration,\n-\t\t\tApplicationContext applicationContext, ObjectProvider<EventListener> eventListeners) {\n-\t\tSessionFactory sessionFactory = new SessionFactory(configuration, getPackagesToScan(applicationContext));\n-\t\teventListeners.stream().forEach(sessionFactory::register);\n-\t\treturn sessionFactory;\n-\t}\n-\n \t@Bean\n \t@ConditionalOnMissingBean(PlatformTransactionManager.class)\n \tpublic Neo4jTransactionManager transactionManager(SessionFactory sessionFactory, Neo4jProperties properties,\n@@ -91,12 +77,32 @@ public class Neo4jDataAutoConfiguration {\n \t\treturn transactionManager;\n \t}\n \n-\tprivate String[] getPackagesToScan(ApplicationContext applicationContext) {\n-\t\tList<String> packages = EntityScanPackages.get(applicationContext).getPackageNames();\n-\t\tif (packages.isEmpty() && AutoConfigurationPackages.has(applicationContext)) {\n-\t\t\tpackages = AutoConfigurationPackages.get(applicationContext);\n+\t@Configuration\n+\t@ConditionalOnMissingBean(SessionFactory.class)\n+\tprotected static class Neo4jOgmSessionFactoryConfiguration {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean\n+\t\tpublic org.neo4j.ogm.config.Configuration configuration(Neo4jProperties properties) {\n+\t\t\treturn properties.createConfiguration();\n+\t\t}\n+\n+\t\t@Bean\n+\t\tpublic SessionFactory sessionFactory(org.neo4j.ogm.config.Configuration configuration,\n+\t\t\t\tApplicationContext applicationContext, ObjectProvider<EventListener> eventListeners) {\n+\t\t\tSessionFactory sessionFactory = new SessionFactory(configuration, getPackagesToScan(applicationContext));\n+\t\t\teventListeners.stream().forEach(sessionFactory::register);\n+\t\t\treturn sessionFactory;\n \t\t}\n-\t\treturn StringUtils.toStringArray(packages);\n+\n+\t\tprivate String[] getPackagesToScan(ApplicationContext applicationContext) {\n+\t\t\tList<String> packages = EntityScanPackages.get(applicationContext).getPackageNames();\n+\t\t\tif (packages.isEmpty() && AutoConfigurationPackages.has(applicationContext)) {\n+\t\t\t\tpackages = AutoConfigurationPackages.get(applicationContext);\n+\t\t\t}\n+\t\t\treturn StringUtils.toStringArray(packages);\n+\t\t}\n+\n \t}\n \n \t@Configuration\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.neo4j;\n\nimport java.util.List;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.neo4j.ogm.session.SessionFactory;\nimport org.neo4j.ogm.session.event.EventListener;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigurationPackages;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.autoconfigure.domain.EntityScanPackages;\nimport org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.data.neo4j.transaction.Neo4jTransactionManager;\nimport org.springframework.data.neo4j.web.support.OpenSessionInViewInterceptor;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data Neo4j.\n *\n * @author Michael Hunger\n * @author Josh Long\n * @author Vince Bickers\n * @author Stephane Nicoll\n * @author Kazuki Shimizu\n * @author Michael Simons\n * @since 1.4.0\n */\n@Configuration\n@ConditionalOnClass({ SessionFactory.class, Neo4jTransactionManager.class, PlatformTransactionManager.class })\n@EnableConfigurationProperties(Neo4jProperties.class)\n@Import(Neo4jBookmarkManagementConfiguration.class)\npublic class Neo4jDataAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean(PlatformTransactionManager.class)\n\tpublic Neo4jTransactionManager transactionManager(SessionFactory sessionFactory, Neo4jProperties properties,\n\t\t\tObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers) {\n\t\treturn customize(new Neo4jTransactionManager(sessionFactory), transactionManagerCustomizers.getIfAvailable());\n\t}\n\n\tprivate Neo4jTransactionManager customize(Neo4jTransactionManager transactionManager,\n\t\t\tTransactionManagerCustomizers customizers) {\n\t\tif (customizers != null) {\n\t\t\tcustomizers.customize(transactionManager);\n\t\t}\n\t\treturn transactionManager;\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(SessionFactory.class)\n\tprotected static class Neo4jOgmSessionFactoryConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic org.neo4j.ogm.config.Configuration configuration(Neo4jProperties properties) {\n\t\t\treturn properties.createConfiguration();\n\t\t}\n\n\t\t@Bean\n\t\tpublic SessionFactory sessionFactory(org.neo4j.ogm.config.Configuration configuration,\n\t\t\t\tApplicationContext applicationContext, ObjectProvider<EventListener> eventListeners) {\n\t\t\tSessionFactory sessionFactory = new SessionFactory(configuration, getPackagesToScan(applicationContext));\n\t\t\teventListeners.stream().forEach(sessionFactory::register);\n\t\t\treturn sessionFactory;\n\t\t}\n\n\t\tprivate String[] getPackagesToScan(ApplicationContext applicationContext) {\n\t\t\tList<String> packages = EntityScanPackages.get(applicationContext).getPackageNames();\n\t\t\tif (packages.isEmpty() && AutoConfigurationPackages.has(applicationContext)) {\n\t\t\t\tpackages = AutoConfigurationPackages.get(applicationContext);\n\t\t\t}\n\t\t\treturn StringUtils.toStringArray(packages);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnWebApplication(type = Type.SERVLET)\n\t@ConditionalOnClass({ WebMvcConfigurer.class, OpenSessionInViewInterceptor.class })\n\t@ConditionalOnMissingBean(OpenSessionInViewInterceptor.class)\n\t@ConditionalOnProperty(prefix = "spring.data.neo4j", name = "open-in-view", havingValue = "true",\n\t\t\tmatchIfMissing = true)\n\tprotected static class Neo4jWebConfiguration {\n\n\t\t@Configuration\n\t\tprotected static class Neo4jWebMvcConfiguration implements WebMvcConfigurer {\n\n\t\t\tprivate static final Log logger = LogFactory.getLog(Neo4jWebMvcConfiguration.class);\n\n\t\t\tprivate final Neo4jProperties neo4jProperties;\n\n\t\t\tprotected Neo4jWebMvcConfiguration(Neo4jProperties neo4jProperties) {\n\t\t\t\tthis.neo4jProperties = neo4jProperties;\n\t\t\t}\n\n\t\t\t@Bean\n\t\t\tpublic OpenSessionInViewInterceptor neo4jOpenSessionInViewInterceptor() {\n\t\t\t\tif (this.neo4jProperties.getOpenInView() == null) {\n\t\t\t\t\tlogger.warn("spring.data.neo4j.open-in-view is enabled by default."\n\t\t\t\t\t\t\t+ "Therefore, database queries may be performed during view "\n\t\t\t\t\t\t\t+ "rendering. Explicitly configure "\n\t\t\t\t\t\t\t+ "spring.data.neo4j.open-in-view to disable this warning");\n\t\t\t\t}\n\t\t\t\treturn new OpenSessionInViewInterceptor();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void addInterceptors(InterceptorRegistry registry) {\n\t\t\t\tregistry.addWebRequestInterceptor(neo4jOpenSessionInViewInterceptor());\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.neo4j;\n\nimport java.util.List;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.neo4j.ogm.session.SessionFactory;\nimport org.neo4j.ogm.session.event.EventListener;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigurationPackages;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.autoconfigure.domain.EntityScanPackages;\nimport org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.data.neo4j.transaction.Neo4jTransactionManager;\nimport org.springframework.data.neo4j.web.support.OpenSessionInViewInterceptor;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data Neo4j.\n *\n * @author Michael Hunger\n * @author Josh Long\n * @author Vince Bickers\n * @author Stephane Nicoll\n * @author Kazuki Shimizu\n * @since 1.4.0\n */\n@Configuration\n@ConditionalOnClass({ SessionFactory.class, Neo4jTransactionManager.class, PlatformTransactionManager.class })\n@ConditionalOnMissingBean(SessionFactory.class)\n@EnableConfigurationProperties(Neo4jProperties.class)\n@Import(Neo4jBookmarkManagementConfiguration.class)\npublic class Neo4jDataAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic org.neo4j.ogm.config.Configuration configuration(Neo4jProperties properties) {\n\t\treturn properties.createConfiguration();\n\t}\n\n\t@Bean\n\tpublic SessionFactory sessionFactory(org.neo4j.ogm.config.Configuration configuration,\n\t\t\tApplicationContext applicationContext, ObjectProvider<EventListener> eventListeners) {\n\t\tSessionFactory sessionFactory = new SessionFactory(configuration, getPackagesToScan(applicationContext));\n\t\teventListeners.stream().forEach(sessionFactory::register);\n\t\treturn sessionFactory;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(PlatformTransactionManager.class)\n\tpublic Neo4jTransactionManager transactionManager(SessionFactory sessionFactory, Neo4jProperties properties,\n\t\t\tObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers) {\n\t\treturn customize(new Neo4jTransactionManager(sessionFactory), transactionManagerCustomizers.getIfAvailable());\n\t}\n\n\tprivate Neo4jTransactionManager customize(Neo4jTransactionManager transactionManager,\n\t\t\tTransactionManagerCustomizers customizers) {\n\t\tif (customizers != null) {\n\t\t\tcustomizers.customize(transactionManager);\n\t\t}\n\t\treturn transactionManager;\n\t}\n\n\tprivate String[] getPackagesToScan(ApplicationContext applicationContext) {\n\t\tList<String> packages = EntityScanPackages.get(applicationContext).getPackageNames();\n\t\tif (packages.isEmpty() && AutoConfigurationPackages.has(applicationContext)) {\n\t\t\tpackages = AutoConfigurationPackages.get(applicationContext);\n\t\t}\n\t\treturn StringUtils.toStringArray(packages);\n\t}\n\n\t@Configuration\n\t@ConditionalOnWebApplication(type = Type.SERVLET)\n\t@ConditionalOnClass({ WebMvcConfigurer.class, OpenSessionInViewInterceptor.class })\n\t@ConditionalOnMissingBean(OpenSessionInViewInterceptor.class)\n\t@ConditionalOnProperty(prefix = "spring.data.neo4j", name = "open-in-view", havingValue = "true",\n\t\t\tmatchIfMissing = true)\n\tprotected static class Neo4jWebConfiguration {\n\n\t\t@Configuration\n\t\tprotected static class Neo4jWebMvcConfiguration implements WebMvcConfigurer {\n\n\t\t\tprivate static final Log logger = LogFactory.getLog(Neo4jWebMvcConfiguration.class);\n\n\t\t\tprivate final Neo4jProperties neo4jProperties;\n\n\t\t\tprotected Neo4jWebMvcConfiguration(Neo4jProperties neo4jProperties) {\n\t\t\t\tthis.neo4jProperties = neo4jProperties;\n\t\t\t}\n\n\t\t\t@Bean\n\t\t\tpublic OpenSessionInViewInterceptor neo4jOpenSessionInViewInterceptor() {\n\t\t\t\tif (this.neo4jProperties.getOpenInView() == null) {\n\t\t\t\t\tlogger.warn("spring.data.neo4j.open-in-view is enabled by default."\n\t\t\t\t\t\t\t+ "Therefore, database queries may be performed during view "\n\t\t\t\t\t\t\t+ "rendering. Explicitly configure "\n\t\t\t\t\t\t\t+ "spring.data.neo4j.open-in-view to disable this warning");\n\t\t\t\t}\n\t\t\t\treturn new OpenSessionInViewInterceptor();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void addInterceptors(InterceptorRegistry registry) {\n\t\t\t\tregistry.addWebRequestInterceptor(neo4jOpenSessionInViewInterceptor());\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
