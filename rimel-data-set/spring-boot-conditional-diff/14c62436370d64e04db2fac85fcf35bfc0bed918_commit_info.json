{'_old_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,9 +16,11 @@\n \n package org.springframework.boot.actuate.autoconfigure;\n \n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n import java.util.LinkedHashMap;\n+import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n \n@@ -32,13 +34,13 @@ import org.springframework.boot.actuate.endpoint.Endpoint;\n import org.springframework.boot.actuate.endpoint.EnvironmentEndpoint;\n import org.springframework.boot.actuate.endpoint.HealthEndpoint;\n import org.springframework.boot.actuate.endpoint.InfoEndpoint;\n+import org.springframework.boot.actuate.endpoint.MetricReaderPublicMetrics;\n import org.springframework.boot.actuate.endpoint.MetricsEndpoint;\n import org.springframework.boot.actuate.endpoint.PublicMetrics;\n import org.springframework.boot.actuate.endpoint.RequestMappingEndpoint;\n import org.springframework.boot.actuate.endpoint.ShutdownEndpoint;\n import org.springframework.boot.actuate.endpoint.SystemPublicMetrics;\n import org.springframework.boot.actuate.endpoint.TraceEndpoint;\n-import org.springframework.boot.actuate.endpoint.VanillaPublicMetrics;\n import org.springframework.boot.actuate.health.HealthAggregator;\n import org.springframework.boot.actuate.health.HealthIndicator;\n import org.springframework.boot.actuate.health.OrderedHealthAggregator;\n@@ -85,10 +87,10 @@ public class EndpointAutoConfiguration {\n \tMap<String, HealthIndicator> healthIndicators = new HashMap<String, HealthIndicator>();\n \n \t@Autowired(required = false)\n-\tprivate MetricReader metricRepository = new InMemoryMetricRepository();\n+\tprivate MetricReader metricReader = new InMemoryMetricRepository();\n \n \t@Autowired(required = false)\n-\tprivate Collection<PublicMetrics> allMetrics;\n+\tprivate Collection<PublicMetrics> publicMetrics;\n \n \t@Autowired(required = false)\n \tprivate TraceRepository traceRepository = new InMemoryTraceRepository();\n@@ -129,8 +131,13 @@ public class EndpointAutoConfiguration {\n \t@Bean\n \t@ConditionalOnMissingBean\n \tpublic MetricsEndpoint metricsEndpoint() {\n-\t\tPublicMetrics metrics = new VanillaPublicMetrics(this.metricRepository, this.allMetrics);\n-\t\treturn new MetricsEndpoint(metrics);\n+\t\tList<PublicMetrics> publicMetrics = new ArrayList<PublicMetrics>();\n+\t\tpublicMetrics.add(new SystemPublicMetrics());\n+\t\tpublicMetrics.add(new MetricReaderPublicMetrics(this.metricReader));\n+\t\tif (this.publicMetrics != null) {\n+\t\t\tpublicMetrics.addAll(this.publicMetrics);\n+\t\t}\n+\t\treturn new MetricsEndpoint(publicMetrics);\n \t}\n \n \t@Bean\n@@ -158,19 +165,6 @@ public class EndpointAutoConfiguration {\n \t\treturn new ShutdownEndpoint();\n \t}\n \n-\t@Configuration\n-\t@ConditionalOnClass(AbstractHandlerMethodMapping.class)\n-\tprotected static class RequestMappingEndpointConfiguration {\n-\n-\t\t@Bean\n-\t\t@ConditionalOnMissingBean\n-\t\tpublic RequestMappingEndpoint requestMappingEndpoint() {\n-\t\t\tRequestMappingEndpoint endpoint = new RequestMappingEndpoint();\n-\t\t\treturn endpoint;\n-\t\t}\n-\n-\t}\n-\n \t@Bean\n \t@ConditionalOnMissingBean\n \tpublic ConfigurationPropertiesReportEndpoint configurationPropertiesReportEndpoint() {\n@@ -180,11 +174,14 @@ public class EndpointAutoConfiguration {\n \t}\n \n \t@Configuration\n-\tprotected static class CorePublicMetrics {\n+\t@ConditionalOnClass(AbstractHandlerMethodMapping.class)\n+\tprotected static class RequestMappingEndpointConfiguration {\n \n \t\t@Bean\n-\t\tSystemPublicMetrics systemPublicMetrics() {\n-\t\t\treturn new SystemPublicMetrics();\n+\t\t@ConditionalOnMissingBean\n+\t\tpublic RequestMappingEndpoint requestMappingEndpoint() {\n+\t\t\tRequestMappingEndpoint endpoint = new RequestMappingEndpoint();\n+\t\t\treturn endpoint;\n \t\t}\n \n \t}\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Properties;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.actuate.endpoint.AutoConfigurationReportEndpoint;\nimport org.springframework.boot.actuate.endpoint.BeansEndpoint;\nimport org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpoint;\nimport org.springframework.boot.actuate.endpoint.DumpEndpoint;\nimport org.springframework.boot.actuate.endpoint.Endpoint;\nimport org.springframework.boot.actuate.endpoint.EnvironmentEndpoint;\nimport org.springframework.boot.actuate.endpoint.HealthEndpoint;\nimport org.springframework.boot.actuate.endpoint.InfoEndpoint;\nimport org.springframework.boot.actuate.endpoint.MetricReaderPublicMetrics;\nimport org.springframework.boot.actuate.endpoint.MetricsEndpoint;\nimport org.springframework.boot.actuate.endpoint.PublicMetrics;\nimport org.springframework.boot.actuate.endpoint.RequestMappingEndpoint;\nimport org.springframework.boot.actuate.endpoint.ShutdownEndpoint;\nimport org.springframework.boot.actuate.endpoint.SystemPublicMetrics;\nimport org.springframework.boot.actuate.endpoint.TraceEndpoint;\nimport org.springframework.boot.actuate.health.HealthAggregator;\nimport org.springframework.boot.actuate.health.HealthIndicator;\nimport org.springframework.boot.actuate.health.OrderedHealthAggregator;\nimport org.springframework.boot.actuate.metrics.reader.MetricReader;\nimport org.springframework.boot.actuate.metrics.repository.InMemoryMetricRepository;\nimport org.springframework.boot.actuate.trace.InMemoryTraceRepository;\nimport org.springframework.boot.actuate.trace.TraceRepository;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.boot.bind.PropertiesConfigurationFactory;\nimport org.springframework.boot.context.properties.ConfigurationBeanFactoryMetaData;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.ConfigurableEnvironment;\nimport org.springframework.core.env.StandardEnvironment;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.support.PropertiesLoaderUtils;\nimport org.springframework.web.servlet.handler.AbstractHandlerMethodMapping;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for common management\n * {@link Endpoint}s.\n *\n * @author Dave Syer\n * @author Phillip Webb\n * @author Greg Turnquist\n * @author Christian Dupuis\n * @author Stephane Nicoll\n */\n@Configuration\npublic class EndpointAutoConfiguration {\n\n\t@Autowired\n\tprivate InfoPropertiesConfiguration properties;\n\n\t@Autowired(required = false)\n\tprivate HealthAggregator healthAggregator = new OrderedHealthAggregator();\n\n\t@Autowired(required = false)\n\tMap<String, HealthIndicator> healthIndicators = new HashMap<String, HealthIndicator>();\n\n\t@Autowired(required = false)\n\tprivate MetricReader metricReader = new InMemoryMetricRepository();\n\n\t@Autowired(required = false)\n\tprivate Collection<PublicMetrics> publicMetrics;\n\n\t@Autowired(required = false)\n\tprivate TraceRepository traceRepository = new InMemoryTraceRepository();\n\n\t@Autowired(required = false)\n\tprivate ConfigurationBeanFactoryMetaData beanFactoryMetaData;\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic EnvironmentEndpoint environmentEndpoint() {\n\t\treturn new EnvironmentEndpoint();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic HealthEndpoint healthEndpoint() {\n\t\treturn new HealthEndpoint(this.healthAggregator, this.healthIndicators);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic BeansEndpoint beansEndpoint() {\n\t\treturn new BeansEndpoint();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic InfoEndpoint infoEndpoint() throws Exception {\n\t\tLinkedHashMap<String, Object> info = new LinkedHashMap<String, Object>();\n\t\tinfo.putAll(this.properties.infoMap());\n\t\tGitInfo gitInfo = this.properties.gitInfo();\n\t\tif (gitInfo.getBranch() != null) {\n\t\t\tinfo.put("git", gitInfo);\n\t\t}\n\t\treturn new InfoEndpoint(info);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic MetricsEndpoint metricsEndpoint() {\n\t\tList<PublicMetrics> publicMetrics = new ArrayList<PublicMetrics>();\n\t\tpublicMetrics.add(new SystemPublicMetrics());\n\t\tpublicMetrics.add(new MetricReaderPublicMetrics(this.metricReader));\n\t\tif (this.publicMetrics != null) {\n\t\t\tpublicMetrics.addAll(this.publicMetrics);\n\t\t}\n\t\treturn new MetricsEndpoint(publicMetrics);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic TraceEndpoint traceEndpoint() {\n\t\treturn new TraceEndpoint(this.traceRepository);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic DumpEndpoint dumpEndpoint() {\n\t\treturn new DumpEndpoint();\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(ConditionEvaluationReport.class)\n\t@ConditionalOnMissingBean(search = SearchStrategy.CURRENT)\n\tpublic AutoConfigurationReportEndpoint autoConfigurationAuditEndpoint() {\n\t\treturn new AutoConfigurationReportEndpoint();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic ShutdownEndpoint shutdownEndpoint() {\n\t\treturn new ShutdownEndpoint();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic ConfigurationPropertiesReportEndpoint configurationPropertiesReportEndpoint() {\n\t\tConfigurationPropertiesReportEndpoint endpoint = new ConfigurationPropertiesReportEndpoint();\n\t\tendpoint.setConfigurationBeanFactoryMetaData(this.beanFactoryMetaData);\n\t\treturn endpoint;\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(AbstractHandlerMethodMapping.class)\n\tprotected static class RequestMappingEndpointConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic RequestMappingEndpoint requestMappingEndpoint() {\n\t\t\tRequestMappingEndpoint endpoint = new RequestMappingEndpoint();\n\t\t\treturn endpoint;\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class InfoPropertiesConfiguration {\n\n\t\t@Autowired\n\t\tprivate final ConfigurableEnvironment environment = new StandardEnvironment();\n\n\t\t@Value("${spring.git.properties:classpath:git.properties}")\n\t\tprivate Resource gitProperties;\n\n\t\tpublic GitInfo gitInfo() throws Exception {\n\t\t\tPropertiesConfigurationFactory<GitInfo> factory = new PropertiesConfigurationFactory<GitInfo>(\n\t\t\t\t\tnew GitInfo());\n\t\t\tfactory.setTargetName("git");\n\t\t\tProperties properties = new Properties();\n\t\t\tif (this.gitProperties.exists()) {\n\t\t\t\tproperties = PropertiesLoaderUtils.loadProperties(this.gitProperties);\n\t\t\t}\n\t\t\tfactory.setProperties(properties);\n\t\t\treturn factory.getObject();\n\t\t}\n\n\t\tpublic Map<String, Object> infoMap() throws Exception {\n\t\t\tPropertiesConfigurationFactory<Map<String, Object>> factory = new PropertiesConfigurationFactory<Map<String, Object>>(\n\t\t\t\t\tnew LinkedHashMap<String, Object>());\n\t\t\tfactory.setTargetName("info");\n\t\t\tfactory.setPropertySources(this.environment.getPropertySources());\n\t\t\treturn factory.getObject();\n\t\t}\n\n\t}\n\n\tpublic static class GitInfo {\n\n\t\tprivate String branch;\n\n\t\tprivate final Commit commit = new Commit();\n\n\t\tpublic String getBranch() {\n\t\t\treturn this.branch;\n\t\t}\n\n\t\tpublic void setBranch(String branch) {\n\t\t\tthis.branch = branch;\n\t\t}\n\n\t\tpublic Commit getCommit() {\n\t\t\treturn this.commit;\n\t\t}\n\n\t\tpublic static class Commit {\n\n\t\t\tprivate String id;\n\n\t\t\tprivate String time;\n\n\t\t\tpublic String getId() {\n\t\t\t\treturn this.id == null ? "" : (this.id.length() > 7 ? this.id.substring(\n\t\t\t\t\t\t0, 7) : this.id);\n\t\t\t}\n\n\t\t\tpublic void setId(String id) {\n\t\t\t\tthis.id = id;\n\t\t\t}\n\n\t\t\tpublic String getTime() {\n\t\t\t\treturn this.time;\n\t\t\t}\n\n\t\t\tpublic void setTime(String time) {\n\t\t\t\tthis.time = time;\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport java.util.Properties;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.actuate.endpoint.AutoConfigurationReportEndpoint;\nimport org.springframework.boot.actuate.endpoint.BeansEndpoint;\nimport org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpoint;\nimport org.springframework.boot.actuate.endpoint.DumpEndpoint;\nimport org.springframework.boot.actuate.endpoint.Endpoint;\nimport org.springframework.boot.actuate.endpoint.EnvironmentEndpoint;\nimport org.springframework.boot.actuate.endpoint.HealthEndpoint;\nimport org.springframework.boot.actuate.endpoint.InfoEndpoint;\nimport org.springframework.boot.actuate.endpoint.MetricsEndpoint;\nimport org.springframework.boot.actuate.endpoint.PublicMetrics;\nimport org.springframework.boot.actuate.endpoint.RequestMappingEndpoint;\nimport org.springframework.boot.actuate.endpoint.ShutdownEndpoint;\nimport org.springframework.boot.actuate.endpoint.SystemPublicMetrics;\nimport org.springframework.boot.actuate.endpoint.TraceEndpoint;\nimport org.springframework.boot.actuate.endpoint.VanillaPublicMetrics;\nimport org.springframework.boot.actuate.health.HealthAggregator;\nimport org.springframework.boot.actuate.health.HealthIndicator;\nimport org.springframework.boot.actuate.health.OrderedHealthAggregator;\nimport org.springframework.boot.actuate.metrics.reader.MetricReader;\nimport org.springframework.boot.actuate.metrics.repository.InMemoryMetricRepository;\nimport org.springframework.boot.actuate.trace.InMemoryTraceRepository;\nimport org.springframework.boot.actuate.trace.TraceRepository;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.boot.bind.PropertiesConfigurationFactory;\nimport org.springframework.boot.context.properties.ConfigurationBeanFactoryMetaData;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.ConfigurableEnvironment;\nimport org.springframework.core.env.StandardEnvironment;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.support.PropertiesLoaderUtils;\nimport org.springframework.web.servlet.handler.AbstractHandlerMethodMapping;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for common management\n * {@link Endpoint}s.\n *\n * @author Dave Syer\n * @author Phillip Webb\n * @author Greg Turnquist\n * @author Christian Dupuis\n * @author Stephane Nicoll\n */\n@Configuration\npublic class EndpointAutoConfiguration {\n\n\t@Autowired\n\tprivate InfoPropertiesConfiguration properties;\n\n\t@Autowired(required = false)\n\tprivate HealthAggregator healthAggregator = new OrderedHealthAggregator();\n\n\t@Autowired(required = false)\n\tMap<String, HealthIndicator> healthIndicators = new HashMap<String, HealthIndicator>();\n\n\t@Autowired(required = false)\n\tprivate MetricReader metricRepository = new InMemoryMetricRepository();\n\n\t@Autowired(required = false)\n\tprivate Collection<PublicMetrics> allMetrics;\n\n\t@Autowired(required = false)\n\tprivate TraceRepository traceRepository = new InMemoryTraceRepository();\n\n\t@Autowired(required = false)\n\tprivate ConfigurationBeanFactoryMetaData beanFactoryMetaData;\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic EnvironmentEndpoint environmentEndpoint() {\n\t\treturn new EnvironmentEndpoint();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic HealthEndpoint healthEndpoint() {\n\t\treturn new HealthEndpoint(this.healthAggregator, this.healthIndicators);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic BeansEndpoint beansEndpoint() {\n\t\treturn new BeansEndpoint();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic InfoEndpoint infoEndpoint() throws Exception {\n\t\tLinkedHashMap<String, Object> info = new LinkedHashMap<String, Object>();\n\t\tinfo.putAll(this.properties.infoMap());\n\t\tGitInfo gitInfo = this.properties.gitInfo();\n\t\tif (gitInfo.getBranch() != null) {\n\t\t\tinfo.put("git", gitInfo);\n\t\t}\n\t\treturn new InfoEndpoint(info);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic MetricsEndpoint metricsEndpoint() {\n\t\tPublicMetrics metrics = new VanillaPublicMetrics(this.metricRepository, this.allMetrics);\n\t\treturn new MetricsEndpoint(metrics);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic TraceEndpoint traceEndpoint() {\n\t\treturn new TraceEndpoint(this.traceRepository);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic DumpEndpoint dumpEndpoint() {\n\t\treturn new DumpEndpoint();\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(ConditionEvaluationReport.class)\n\t@ConditionalOnMissingBean(search = SearchStrategy.CURRENT)\n\tpublic AutoConfigurationReportEndpoint autoConfigurationAuditEndpoint() {\n\t\treturn new AutoConfigurationReportEndpoint();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic ShutdownEndpoint shutdownEndpoint() {\n\t\treturn new ShutdownEndpoint();\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(AbstractHandlerMethodMapping.class)\n\tprotected static class RequestMappingEndpointConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic RequestMappingEndpoint requestMappingEndpoint() {\n\t\t\tRequestMappingEndpoint endpoint = new RequestMappingEndpoint();\n\t\t\treturn endpoint;\n\t\t}\n\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic ConfigurationPropertiesReportEndpoint configurationPropertiesReportEndpoint() {\n\t\tConfigurationPropertiesReportEndpoint endpoint = new ConfigurationPropertiesReportEndpoint();\n\t\tendpoint.setConfigurationBeanFactoryMetaData(this.beanFactoryMetaData);\n\t\treturn endpoint;\n\t}\n\n\t@Configuration\n\tprotected static class CorePublicMetrics {\n\n\t\t@Bean\n\t\tSystemPublicMetrics systemPublicMetrics() {\n\t\t\treturn new SystemPublicMetrics();\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class InfoPropertiesConfiguration {\n\n\t\t@Autowired\n\t\tprivate final ConfigurableEnvironment environment = new StandardEnvironment();\n\n\t\t@Value("${spring.git.properties:classpath:git.properties}")\n\t\tprivate Resource gitProperties;\n\n\t\tpublic GitInfo gitInfo() throws Exception {\n\t\t\tPropertiesConfigurationFactory<GitInfo> factory = new PropertiesConfigurationFactory<GitInfo>(\n\t\t\t\t\tnew GitInfo());\n\t\t\tfactory.setTargetName("git");\n\t\t\tProperties properties = new Properties();\n\t\t\tif (this.gitProperties.exists()) {\n\t\t\t\tproperties = PropertiesLoaderUtils.loadProperties(this.gitProperties);\n\t\t\t}\n\t\t\tfactory.setProperties(properties);\n\t\t\treturn factory.getObject();\n\t\t}\n\n\t\tpublic Map<String, Object> infoMap() throws Exception {\n\t\t\tPropertiesConfigurationFactory<Map<String, Object>> factory = new PropertiesConfigurationFactory<Map<String, Object>>(\n\t\t\t\t\tnew LinkedHashMap<String, Object>());\n\t\t\tfactory.setTargetName("info");\n\t\t\tfactory.setPropertySources(this.environment.getPropertySources());\n\t\t\treturn factory.getObject();\n\t\t}\n\n\t}\n\n\tpublic static class GitInfo {\n\n\t\tprivate String branch;\n\n\t\tprivate final Commit commit = new Commit();\n\n\t\tpublic String getBranch() {\n\t\t\treturn this.branch;\n\t\t}\n\n\t\tpublic void setBranch(String branch) {\n\t\t\tthis.branch = branch;\n\t\t}\n\n\t\tpublic Commit getCommit() {\n\t\t\treturn this.commit;\n\t\t}\n\n\t\tpublic static class Commit {\n\n\t\t\tprivate String id;\n\n\t\t\tprivate String time;\n\n\t\t\tpublic String getId() {\n\t\t\t\treturn this.id == null ? "" : (this.id.length() > 7 ? this.id.substring(\n\t\t\t\t\t\t0, 7) : this.id);\n\t\t\t}\n\n\t\t\tpublic void setId(String id) {\n\t\t\t\tthis.id = id;\n\t\t\t}\n\n\t\t\tpublic String getTime() {\n\t\t\t\treturn this.time;\n\t\t\t}\n\n\t\t\tpublic void setTime(String time) {\n\t\t\t\tthis.time = time;\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
