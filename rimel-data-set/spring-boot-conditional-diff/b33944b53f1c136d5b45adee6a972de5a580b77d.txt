@@ -0,0 +1,84 @@
+
+
+package org.springframework.boot.autoconfigure.rsocket;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import io.netty.buffer.PooledByteBufAllocator;
+import io.rsocket.RSocketFactory;
+
+import org.springframework.beans.factory.ObjectProvider;
+import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;
+import org.springframework.boot.rsocket.messaging.RSocketStrategiesCustomizer;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.core.ReactiveAdapterRegistry;
+import org.springframework.core.annotation.Order;
+import org.springframework.core.io.buffer.NettyDataBufferFactory;
+import org.springframework.http.MediaType;
+import org.springframework.http.codec.json.Jackson2JsonDecoder;
+import org.springframework.http.codec.json.Jackson2JsonEncoder;
+import org.springframework.messaging.rsocket.RSocketStrategies;
+
+
+@Configuration(proxyBeanMethods = false)
+@ConditionalOnClass({ RSocketFactory.class, RSocketStrategies.class,
+		PooledByteBufAllocator.class })
+@AutoConfigureAfter(JacksonAutoConfiguration.class)
+public class RSocketStrategiesAutoConfiguration {
+
+	@Bean
+	@ConditionalOnMissingBean
+	public RSocketStrategies rSocketStrategies(
+			ObjectProvider<RSocketStrategiesCustomizer> customizers) {
+		RSocketStrategies.Builder builder = RSocketStrategies.builder();
+		builder.reactiveAdapterStrategy(ReactiveAdapterRegistry.getSharedInstance());
+		customizers.stream().forEach((customizer) -> customizer.customize(builder));
+		builder.dataBufferFactory(
+				new NettyDataBufferFactory(PooledByteBufAllocator.DEFAULT));
+		return builder.build();
+	}
+
+	@Configuration(proxyBeanMethods = false)
+	@ConditionalOnClass(ObjectMapper.class)
+	protected static class JacksonStrategyConfiguration {
+
+		@Bean
+		@Order(0)
+		@ConditionalOnBean(ObjectMapper.class)
+		public RSocketStrategiesCustomizer jacksonStrategyCustomizer(
+				ObjectMapper objectMapper) {
+			return (strategy) -> {
+				MediaType[] supportedTypes = new MediaType[] { MediaType.APPLICATION_JSON,
+						new MediaType(, ) };
+				strategy.decoder(new Jackson2JsonDecoder(objectMapper, supportedTypes));
+				strategy.encoder(new Jackson2JsonEncoder(objectMapper, supportedTypes));
+			};
+		}
+
+	}
+
+}

