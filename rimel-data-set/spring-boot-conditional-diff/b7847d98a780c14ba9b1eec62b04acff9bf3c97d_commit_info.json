{'_old_path': None, '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jBookmarkManagementConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2012-2018 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.data.neo4j;\n+\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnNotWebApplication;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.cache.caffeine.CaffeineCacheManager;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.context.annotation.ScopedProxyMode;\n+import org.springframework.data.neo4j.bookmark.BeanFactoryBookmarkOperationAdvisor;\n+import org.springframework.data.neo4j.bookmark.BookmarkInterceptor;\n+import org.springframework.data.neo4j.bookmark.BookmarkManager;\n+import org.springframework.data.neo4j.bookmark.CaffeineBookmarkManager;\n+import org.springframework.web.context.WebApplicationContext;\n+\n+/**\n+ * Provides a {@link BookmarkManager} for Neo4j\'s bookmark support based on Caffeine if\n+ * available. Depending on the applications kind (web or not) the bookmark manager will be\n+ * bound to the application or the request, as recommend by Spring Data Neo4j.\n+ *\n+ * @author Michael Simons\n+ * @since 2.1\n+ */\n+@Configuration\n+@ConditionalOnClass({ Caffeine.class, CaffeineCacheManager.class })\n+@ConditionalOnMissingBean(BookmarkManager.class)\n+@ConditionalOnBean({ BeanFactoryBookmarkOperationAdvisor.class,\n+\t\tBookmarkInterceptor.class })\n+class Neo4jBookmarkManagementConfiguration {\n+\n+\tstatic final String BOOKMARK_MANAGER_BEAN_NAME = "bookmarkManager";\n+\n+\t@Bean(BOOKMARK_MANAGER_BEAN_NAME)\n+\t@Scope(value = WebApplicationContext.SCOPE_REQUEST, proxyMode = ScopedProxyMode.INTERFACES)\n+\t@ConditionalOnWebApplication\n+\tpublic BookmarkManager requestScopedBookmarkManager() {\n+\t\treturn new CaffeineBookmarkManager();\n+\t}\n+\n+\t@Bean(BOOKMARK_MANAGER_BEAN_NAME)\n+\t@Scope(ConfigurableBeanFactory.SCOPE_SINGLETON)\n+\t@ConditionalOnNotWebApplication\n+\tpublic BookmarkManager singletonScopedBookmarkManager() {\n+\t\treturn new CaffeineBookmarkManager();\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.neo4j;\n\nimport com.github.benmanes.caffeine.cache.Caffeine;\n\nimport org.springframework.beans.factory.config.ConfigurableBeanFactory;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnNotWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.cache.caffeine.CaffeineCacheManager;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.context.annotation.ScopedProxyMode;\nimport org.springframework.data.neo4j.bookmark.BeanFactoryBookmarkOperationAdvisor;\nimport org.springframework.data.neo4j.bookmark.BookmarkInterceptor;\nimport org.springframework.data.neo4j.bookmark.BookmarkManager;\nimport org.springframework.data.neo4j.bookmark.CaffeineBookmarkManager;\nimport org.springframework.web.context.WebApplicationContext;\n\n/**\n * Provides a {@link BookmarkManager} for Neo4j\'s bookmark support based on Caffeine if\n * available. Depending on the applications kind (web or not) the bookmark manager will be\n * bound to the application or the request, as recommend by Spring Data Neo4j.\n *\n * @author Michael Simons\n * @since 2.1\n */\n@Configuration\n@ConditionalOnClass({ Caffeine.class, CaffeineCacheManager.class })\n@ConditionalOnMissingBean(BookmarkManager.class)\n@ConditionalOnBean({ BeanFactoryBookmarkOperationAdvisor.class,\n\t\tBookmarkInterceptor.class })\nclass Neo4jBookmarkManagementConfiguration {\n\n\tstatic final String BOOKMARK_MANAGER_BEAN_NAME = "bookmarkManager";\n\n\t@Bean(BOOKMARK_MANAGER_BEAN_NAME)\n\t@Scope(value = WebApplicationContext.SCOPE_REQUEST, proxyMode = ScopedProxyMode.INTERFACES)\n\t@ConditionalOnWebApplication\n\tpublic BookmarkManager requestScopedBookmarkManager() {\n\t\treturn new CaffeineBookmarkManager();\n\t}\n\n\t@Bean(BOOKMARK_MANAGER_BEAN_NAME)\n\t@Scope(ConfigurableBeanFactory.SCOPE_SINGLETON)\n\t@ConditionalOnNotWebApplication\n\tpublic BookmarkManager singletonScopedBookmarkManager() {\n\t\treturn new CaffeineBookmarkManager();\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
