{'_old_path': PosixPath('spring-bootstrap/src/main/java/org/springframework/bootstrap/context/properties/ConfigurationPropertiesBindingConfiguration.java'), '_new_path': None, 'change_type': <ModificationType.DELETE: 4>, 'diff': '@@ -1,151 +0,0 @@\n-/*\n- * Copyright 2012-2013 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the "License");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an "AS IS" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.bootstrap.context.properties;\n-\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Qualifier;\n-import org.springframework.bootstrap.context.condition.ConditionalOnClass;\n-import org.springframework.bootstrap.context.condition.ConditionalOnMissingBean;\n-import org.springframework.context.ConfigurableApplicationContext;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;\n-import org.springframework.core.convert.ConversionService;\n-import org.springframework.core.env.ConfigurableEnvironment;\n-import org.springframework.core.env.Environment;\n-import org.springframework.core.env.MutablePropertySources;\n-import org.springframework.core.env.PropertySource;\n-import org.springframework.core.env.PropertySources;\n-import org.springframework.validation.Validator;\n-import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;\n-\n-/**\n- * Configuration for binding externalized application properties to\n- * {@link ConfigurationProperties} beans.\n- * \n- * @author Dave Syer\n- */\n-@Configuration\n-public class ConfigurationPropertiesBindingConfiguration {\n-\n-\tpublic final static String VALIDATOR_BEAN_NAME = "configurationPropertiesValidator";\n-\n-\t@Autowired(required = false)\n-\tprivate PropertySourcesPlaceholderConfigurer configurer;\n-\n-\t@Autowired(required = false)\n-\tprivate Environment environment;\n-\n-\t@Autowired(required = false)\n-\t@Qualifier(ConfigurableApplicationContext.CONVERSION_SERVICE_BEAN_NAME)\n-\tprivate ConversionService conversionService;\n-\n-\t@Autowired(required = false)\n-\t@Qualifier(VALIDATOR_BEAN_NAME)\n-\tprivate Validator validator;\n-\n-\t@ConditionalOnMissingBean(name = VALIDATOR_BEAN_NAME)\n-\t@ConditionalOnClass(name = "javax.validation.Validator")\n-\tprotected static class ValidatorConfiguration {\n-\t\t@Bean\n-\t\tprotected Validator configurationPropertiesValidator() {\n-\t\t\treturn new LocalValidatorFactoryBean();\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Lifecycle hook that binds application properties to any bean whose type is\n-\t * decorated with {@link ConfigurationProperties} annotation.\n-\t * \n-\t * @return a bean post processor to bind application properties\n-\t */\n-\t@Bean\n-\tpublic ConfigurationPropertiesBindingPostProcessor propertySourcesBinder() {\n-\t\tPropertySources propertySources;\n-\n-\t\tif (this.configurer != null) {\n-\t\t\tpropertySources = extractPropertySources(this.configurer);\n-\t\t}\n-\t\telse if (this.environment instanceof ConfigurableEnvironment) {\n-\t\t\tpropertySources = flattenPropertySources(((ConfigurableEnvironment) this.environment)\n-\t\t\t\t\t.getPropertySources());\n-\t\t}\n-\t\telse {\n-\t\t\t// empty, so not very useful, but fulfils the contract\n-\t\t\tpropertySources = new MutablePropertySources();\n-\t\t}\n-\n-\t\tConfigurationPropertiesBindingPostProcessor processor = new ConfigurationPropertiesBindingPostProcessor();\n-\t\tprocessor.setValidator(this.validator);\n-\t\tprocessor.setConversionService(this.conversionService);\n-\t\tprocessor.setPropertySources(propertySources);\n-\t\treturn processor;\n-\t}\n-\n-\t/**\n-\t * Flatten out a tree of property sources.\n-\t * \n-\t * @param propertySources some PropertySources, possibly containing environment\n-\t * properties\n-\t * @return another PropertySources containing the same properties\n-\t */\n-\tprivate PropertySources flattenPropertySources(PropertySources propertySources) {\n-\t\tMutablePropertySources result = new MutablePropertySources();\n-\t\tfor (PropertySource<?> propertySource : propertySources) {\n-\t\t\tflattenPropertySources(propertySource, result);\n-\t\t}\n-\t\treturn result;\n-\t}\n-\n-\t/**\n-\t * Convenience method to allow recursive flattening of property sources.\n-\t * \n-\t * @param propertySource a property source to flatten\n-\t * @param result the cumulative result\n-\t */\n-\tprivate void flattenPropertySources(PropertySource<?> propertySource,\n-\t\t\tMutablePropertySources result) {\n-\t\tObject source = propertySource.getSource();\n-\t\tif (source instanceof ConfigurableEnvironment) {\n-\t\t\tConfigurableEnvironment environment = (ConfigurableEnvironment) source;\n-\t\t\tfor (PropertySource<?> childSource : environment.getPropertySources()) {\n-\t\t\t\tflattenPropertySources(childSource, result);\n-\t\t\t}\n-\t\t}\n-\t\telse {\n-\t\t\tresult.addLast(propertySource);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Convenience method to extract PropertySources from an existing (and already\n-\t * initialized) PropertySourcesPlaceholderConfigurer. As long as this method is\n-\t * executed late enough in the context lifecycle it will come back with data. We can\n-\t * rely on the fact that PropertySourcesPlaceholderConfigurer is a\n-\t * BeanFactoryPostProcessor and is therefore initialized early.\n-\t * \n-\t * @param configurer a PropertySourcesPlaceholderConfigurer\n-\t * @return some PropertySources\n-\t */\n-\tprivate PropertySources extractPropertySources(\n-\t\t\tPropertySourcesPlaceholderConfigurer configurer) {\n-\t\tPropertySources propertySources = configurer.getAppliedPropertySources();\n-\t\t// Flatten the sources into a single list so they can be iterated\n-\t\treturn flattenPropertySources(propertySources);\n-\t}\n-\n-}\n', 'source_code': None, 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.bootstrap.context.properties;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.bootstrap.context.condition.ConditionalOnClass;\nimport org.springframework.bootstrap.context.condition.ConditionalOnMissingBean;\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.support.PropertySourcesPlaceholderConfigurer;\nimport org.springframework.core.convert.ConversionService;\nimport org.springframework.core.env.ConfigurableEnvironment;\nimport org.springframework.core.env.Environment;\nimport org.springframework.core.env.MutablePropertySources;\nimport org.springframework.core.env.PropertySource;\nimport org.springframework.core.env.PropertySources;\nimport org.springframework.validation.Validator;\nimport org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;\n\n/**\n * Configuration for binding externalized application properties to\n * {@link ConfigurationProperties} beans.\n * \n * @author Dave Syer\n */\n@Configuration\npublic class ConfigurationPropertiesBindingConfiguration {\n\n\tpublic final static String VALIDATOR_BEAN_NAME = "configurationPropertiesValidator";\n\n\t@Autowired(required = false)\n\tprivate PropertySourcesPlaceholderConfigurer configurer;\n\n\t@Autowired(required = false)\n\tprivate Environment environment;\n\n\t@Autowired(required = false)\n\t@Qualifier(ConfigurableApplicationContext.CONVERSION_SERVICE_BEAN_NAME)\n\tprivate ConversionService conversionService;\n\n\t@Autowired(required = false)\n\t@Qualifier(VALIDATOR_BEAN_NAME)\n\tprivate Validator validator;\n\n\t@ConditionalOnMissingBean(name = VALIDATOR_BEAN_NAME)\n\t@ConditionalOnClass(name = "javax.validation.Validator")\n\tprotected static class ValidatorConfiguration {\n\t\t@Bean\n\t\tprotected Validator configurationPropertiesValidator() {\n\t\t\treturn new LocalValidatorFactoryBean();\n\t\t}\n\t}\n\n\t/**\n\t * Lifecycle hook that binds application properties to any bean whose type is\n\t * decorated with {@link ConfigurationProperties} annotation.\n\t * \n\t * @return a bean post processor to bind application properties\n\t */\n\t@Bean\n\tpublic ConfigurationPropertiesBindingPostProcessor propertySourcesBinder() {\n\t\tPropertySources propertySources;\n\n\t\tif (this.configurer != null) {\n\t\t\tpropertySources = extractPropertySources(this.configurer);\n\t\t}\n\t\telse if (this.environment instanceof ConfigurableEnvironment) {\n\t\t\tpropertySources = flattenPropertySources(((ConfigurableEnvironment) this.environment)\n\t\t\t\t\t.getPropertySources());\n\t\t}\n\t\telse {\n\t\t\t// empty, so not very useful, but fulfils the contract\n\t\t\tpropertySources = new MutablePropertySources();\n\t\t}\n\n\t\tConfigurationPropertiesBindingPostProcessor processor = new ConfigurationPropertiesBindingPostProcessor();\n\t\tprocessor.setValidator(this.validator);\n\t\tprocessor.setConversionService(this.conversionService);\n\t\tprocessor.setPropertySources(propertySources);\n\t\treturn processor;\n\t}\n\n\t/**\n\t * Flatten out a tree of property sources.\n\t * \n\t * @param propertySources some PropertySources, possibly containing environment\n\t * properties\n\t * @return another PropertySources containing the same properties\n\t */\n\tprivate PropertySources flattenPropertySources(PropertySources propertySources) {\n\t\tMutablePropertySources result = new MutablePropertySources();\n\t\tfor (PropertySource<?> propertySource : propertySources) {\n\t\t\tflattenPropertySources(propertySource, result);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * Convenience method to allow recursive flattening of property sources.\n\t * \n\t * @param propertySource a property source to flatten\n\t * @param result the cumulative result\n\t */\n\tprivate void flattenPropertySources(PropertySource<?> propertySource,\n\t\t\tMutablePropertySources result) {\n\t\tObject source = propertySource.getSource();\n\t\tif (source instanceof ConfigurableEnvironment) {\n\t\t\tConfigurableEnvironment environment = (ConfigurableEnvironment) source;\n\t\t\tfor (PropertySource<?> childSource : environment.getPropertySources()) {\n\t\t\t\tflattenPropertySources(childSource, result);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tresult.addLast(propertySource);\n\t\t}\n\t}\n\n\t/**\n\t * Convenience method to extract PropertySources from an existing (and already\n\t * initialized) PropertySourcesPlaceholderConfigurer. As long as this method is\n\t * executed late enough in the context lifecycle it will come back with data. We can\n\t * rely on the fact that PropertySourcesPlaceholderConfigurer is a\n\t * BeanFactoryPostProcessor and is therefore initialized early.\n\t * \n\t * @param configurer a PropertySourcesPlaceholderConfigurer\n\t * @return some PropertySources\n\t */\n\tprivate PropertySources extractPropertySources(\n\t\t\tPropertySourcesPlaceholderConfigurer configurer) {\n\t\tPropertySources propertySources = configurer.getAppliedPropertySources();\n\t\t// Flatten the sources into a single list so they can be iterated\n\t\treturn flattenPropertySources(propertySources);\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
