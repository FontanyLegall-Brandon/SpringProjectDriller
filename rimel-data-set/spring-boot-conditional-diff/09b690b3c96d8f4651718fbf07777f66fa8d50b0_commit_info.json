{'_old_path': None, '_new_path': PosixPath('spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/RemoteDevtoolsSecurityConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2012-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.devtools.autoconfigure;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.security.SecurityProperties;\n+import org.springframework.boot.autoconfigure.web.ServerProperties;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n+\n+/**\n+ * Spring Security configuration that allows anonymous access to the remote devtools\n+ * endpoint.\n+ *\n+ * @author Madhura Bhave\n+ */\n+@ConditionalOnClass(WebSecurityConfigurerAdapter.class)\n+@Configuration\n+class RemoteDevtoolsSecurityConfiguration {\n+\n+\t@Order(SecurityProperties.BASIC_AUTH_ORDER - 1)\n+\t@Configuration\n+\tstatic class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n+\n+\t\tprivate final String url;\n+\n+\t\tSecurityConfiguration(DevToolsProperties devToolsProperties, ServerProperties serverProperties) {\n+\t\t\tServerProperties.Servlet servlet = serverProperties.getServlet();\n+\t\t\tString servletContextPath = (servlet.getContextPath() != null) ? servlet.getContextPath() : "";\n+\t\t\tthis.url = servletContextPath + devToolsProperties.getRemote().getContextPath() + "/restart";\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected void configure(HttpSecurity http) throws Exception {\n+\t\t\thttp.requestMatcher(new AntPathRequestMatcher(this.url)).authorizeRequests().anyRequest().anonymous().and()\n+\t\t\t\t\t.csrf().disable();\n+\t\t}\n+\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.devtools.autoconfigure;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.security.SecurityProperties;\nimport org.springframework.boot.autoconfigure.web.ServerProperties;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n\n/**\n * Spring Security configuration that allows anonymous access to the remote devtools\n * endpoint.\n *\n * @author Madhura Bhave\n */\n@ConditionalOnClass(WebSecurityConfigurerAdapter.class)\n@Configuration\nclass RemoteDevtoolsSecurityConfiguration {\n\n\t@Order(SecurityProperties.BASIC_AUTH_ORDER - 1)\n\t@Configuration\n\tstatic class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n\n\t\tprivate final String url;\n\n\t\tSecurityConfiguration(DevToolsProperties devToolsProperties, ServerProperties serverProperties) {\n\t\t\tServerProperties.Servlet servlet = serverProperties.getServlet();\n\t\t\tString servletContextPath = (servlet.getContextPath() != null) ? servlet.getContextPath() : "";\n\t\t\tthis.url = servletContextPath + devToolsProperties.getRemote().getContextPath() + "/restart";\n\t\t}\n\n\t\t@Override\n\t\tprotected void configure(HttpSecurity http) throws Exception {\n\t\t\thttp.requestMatcher(new AntPathRequestMatcher(this.url)).authorizeRequests().anyRequest().anonymous().and()\n\t\t\t\t\t.csrf().disable();\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
