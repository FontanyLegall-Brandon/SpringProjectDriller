{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hateoas/HypermediaAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hateoas/HypermediaAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,12 +16,17 @@\n \n package org.springframework.boot.autoconfigure.hateoas;\n \n+import org.springframework.beans.BeansException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.config.BeanPostProcessor;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;\n import org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\n+import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.hateoas.EntityLinks;\n import org.springframework.hateoas.LinkDiscoverers;\n@@ -29,27 +34,63 @@ import org.springframework.hateoas.Resource;\n import org.springframework.hateoas.config.EnableEntityLinks;\n import org.springframework.hateoas.config.EnableHypermediaSupport;\n import org.springframework.hateoas.config.EnableHypermediaSupport.HypermediaType;\n+import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;\n import org.springframework.plugin.core.Plugin;\n import org.springframework.web.bind.annotation.RequestMapping;\n \n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for Spring HATEOAS\'s\n  * {@link EnableHypermediaSupport}.\n  *\n  * @author Roy Clarkson\n  * @author Oliver Gierke\n+ * @author Andy Wilkinson\n  * @since 1.1.0\n  */\n @Configuration\n @ConditionalOnClass({ Resource.class, RequestMapping.class, Plugin.class })\n @ConditionalOnWebApplication\n-@AutoConfigureAfter(WebMvcAutoConfiguration.class)\n+@AutoConfigureAfter({ WebMvcAutoConfiguration.class, JacksonAutoConfiguration.class })\n public class HypermediaAutoConfiguration {\n \n \t@Configuration\n \t@ConditionalOnMissingBean(LinkDiscoverers.class)\n \t@EnableHypermediaSupport(type = HypermediaType.HAL)\n \tprotected static class HypermediaConfiguration {\n+\n+\t\t@ConditionalOnClass({ Jackson2ObjectMapperBuilder.class, ObjectMapper.class })\n+\t\tprotected static class HalObjectMapperConfiguration {\n+\n+\t\t\t@Autowired(required = false)\n+\t\t\tprivate Jackson2ObjectMapperBuilder objectMapperBuilder;\n+\n+\t\t\t@Bean\n+\t\t\tpublic BeanPostProcessor halObjectMapperConfigurer() {\n+\t\t\t\treturn new BeanPostProcessor() {\n+\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic Object postProcessAfterInitialization(Object bean,\n+\t\t\t\t\t\t\tString beanName) throws BeansException {\n+\t\t\t\t\t\tif (HalObjectMapperConfiguration.this.objectMapperBuilder != null\n+\t\t\t\t\t\t\t\t&& bean instanceof ObjectMapper\n+\t\t\t\t\t\t\t\t&& "_halObjectMapper".equals(beanName)) {\n+\t\t\t\t\t\t\tHalObjectMapperConfiguration.this.objectMapperBuilder\n+\t\t\t\t\t\t\t\t\t.configure((ObjectMapper) bean);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\treturn bean;\n+\t\t\t\t\t}\n+\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic Object postProcessBeforeInitialization(Object bean,\n+\t\t\t\t\t\t\tString beanName) throws BeansException {\n+\t\t\t\t\t\treturn bean;\n+\t\t\t\t\t}\n+\n+\t\t\t\t};\n+\t\t\t}\n+\t\t}\n \t}\n \n \t@Configuration\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.hateoas;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.config.BeanPostProcessor;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.hateoas.EntityLinks;\nimport org.springframework.hateoas.LinkDiscoverers;\nimport org.springframework.hateoas.Resource;\nimport org.springframework.hateoas.config.EnableEntityLinks;\nimport org.springframework.hateoas.config.EnableHypermediaSupport;\nimport org.springframework.hateoas.config.EnableHypermediaSupport.HypermediaType;\nimport org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;\nimport org.springframework.plugin.core.Plugin;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring HATEOAS\'s\n * {@link EnableHypermediaSupport}.\n *\n * @author Roy Clarkson\n * @author Oliver Gierke\n * @author Andy Wilkinson\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass({ Resource.class, RequestMapping.class, Plugin.class })\n@ConditionalOnWebApplication\n@AutoConfigureAfter({ WebMvcAutoConfiguration.class, JacksonAutoConfiguration.class })\npublic class HypermediaAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnMissingBean(LinkDiscoverers.class)\n\t@EnableHypermediaSupport(type = HypermediaType.HAL)\n\tprotected static class HypermediaConfiguration {\n\n\t\t@ConditionalOnClass({ Jackson2ObjectMapperBuilder.class, ObjectMapper.class })\n\t\tprotected static class HalObjectMapperConfiguration {\n\n\t\t\t@Autowired(required = false)\n\t\t\tprivate Jackson2ObjectMapperBuilder objectMapperBuilder;\n\n\t\t\t@Bean\n\t\t\tpublic BeanPostProcessor halObjectMapperConfigurer() {\n\t\t\t\treturn new BeanPostProcessor() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object postProcessAfterInitialization(Object bean,\n\t\t\t\t\t\t\tString beanName) throws BeansException {\n\t\t\t\t\t\tif (HalObjectMapperConfiguration.this.objectMapperBuilder != null\n\t\t\t\t\t\t\t\t&& bean instanceof ObjectMapper\n\t\t\t\t\t\t\t\t&& "_halObjectMapper".equals(beanName)) {\n\t\t\t\t\t\t\tHalObjectMapperConfiguration.this.objectMapperBuilder\n\t\t\t\t\t\t\t\t\t.configure((ObjectMapper) bean);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn bean;\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object postProcessBeforeInitialization(Object bean,\n\t\t\t\t\t\t\tString beanName) throws BeansException {\n\t\t\t\t\t\treturn bean;\n\t\t\t\t\t}\n\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(EntityLinks.class)\n\t@EnableEntityLinks\n\tprotected static class EntityLinksConfiguration {\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.hateoas;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.hateoas.EntityLinks;\nimport org.springframework.hateoas.LinkDiscoverers;\nimport org.springframework.hateoas.Resource;\nimport org.springframework.hateoas.config.EnableEntityLinks;\nimport org.springframework.hateoas.config.EnableHypermediaSupport;\nimport org.springframework.hateoas.config.EnableHypermediaSupport.HypermediaType;\nimport org.springframework.plugin.core.Plugin;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring HATEOAS\'s\n * {@link EnableHypermediaSupport}.\n *\n * @author Roy Clarkson\n * @author Oliver Gierke\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass({ Resource.class, RequestMapping.class, Plugin.class })\n@ConditionalOnWebApplication\n@AutoConfigureAfter(WebMvcAutoConfiguration.class)\npublic class HypermediaAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnMissingBean(LinkDiscoverers.class)\n\t@EnableHypermediaSupport(type = HypermediaType.HAL)\n\tprotected static class HypermediaConfiguration {\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(EntityLinks.class)\n\t@EnableEntityLinks\n\tprotected static class EntityLinksConfiguration {\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
