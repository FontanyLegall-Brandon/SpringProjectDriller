{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/validation/ValidationAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/validation/ValidationAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -45,7 +45,7 @@ import org.springframework.validation.beanvalidation.MethodValidationPostProcess\n public class ValidationAutoConfiguration {\n \n \t@Bean\n-\t@ConditionalOnResource(resources = "META-INF/services/javax.validation.spi.ValidationProvider")\n+\t@ConditionalOnResource(resources = "classpath:META-INF/services/javax.validation.spi.ValidationProvider")\n \t@Conditional(OnValidatorAvailableCondition.class)\n \t@ConditionalOnMissingBean\n \tpublic MethodValidationPostProcessor methodValidationPostProcessor() {\n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.validation;\n\nimport javax.validation.Validation;\nimport javax.validation.Validator;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionMessage;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnResource;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.validation.beanvalidation.MethodValidationPostProcessor;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to configure the validation\n * infrastructure.\n *\n * @author Stephane Nicoll\n * @since 1.5.0\n */\n@ConditionalOnClass({ Validator.class })\npublic class ValidationAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnResource(resources = "classpath:META-INF/services/javax.validation.spi.ValidationProvider")\n\t@Conditional(OnValidatorAvailableCondition.class)\n\t@ConditionalOnMissingBean\n\tpublic MethodValidationPostProcessor methodValidationPostProcessor() {\n\t\treturn new MethodValidationPostProcessor();\n\t}\n\n\t@Order(Ordered.LOWEST_PRECEDENCE)\n\tstatic class OnValidatorAvailableCondition extends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tConditionMessage.Builder message = ConditionMessage\n\t\t\t\t\t.forCondition(getClass().getName());\n\t\t\ttry {\n\t\t\t\tValidation.buildDefaultValidatorFactory().getValidator();\n\t\t\t\treturn ConditionOutcome.match(message.available("JSR-303 provider"));\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\treturn ConditionOutcome.noMatch(message.notAvailable("JSR-303 provider"));\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.validation;\n\nimport javax.validation.Validation;\nimport javax.validation.Validator;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionMessage;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnResource;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.validation.beanvalidation.MethodValidationPostProcessor;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to configure the validation\n * infrastructure.\n *\n * @author Stephane Nicoll\n * @since 1.5.0\n */\n@ConditionalOnClass({ Validator.class })\npublic class ValidationAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnResource(resources = "META-INF/services/javax.validation.spi.ValidationProvider")\n\t@Conditional(OnValidatorAvailableCondition.class)\n\t@ConditionalOnMissingBean\n\tpublic MethodValidationPostProcessor methodValidationPostProcessor() {\n\t\treturn new MethodValidationPostProcessor();\n\t}\n\n\t@Order(Ordered.LOWEST_PRECEDENCE)\n\tstatic class OnValidatorAvailableCondition extends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tConditionMessage.Builder message = ConditionMessage\n\t\t\t\t\t.forCondition(getClass().getName());\n\t\t\ttry {\n\t\t\t\tValidation.buildDefaultValidatorFactory().getValidator();\n\t\t\t\treturn ConditionOutcome.match(message.available("JSR-303 provider"));\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\treturn ConditionOutcome.noMatch(message.notAvailable("JSR-303 provider"));\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
