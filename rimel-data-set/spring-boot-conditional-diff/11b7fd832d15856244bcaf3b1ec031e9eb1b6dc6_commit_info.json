{'_old_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/AutoConfigurationReportTests.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionEvaluationReportTests.java'), 'change_type': <ModificationType.RENAME: 3>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2013 the original author or authors.\n+ * Copyright 2012-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -26,16 +26,23 @@ import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mock;\n import org.mockito.MockitoAnnotations;\n-import org.springframework.beans.factory.annotation.Configurable;\n import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n import org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport.ConditionAndOutcome;\n import org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport.ConditionAndOutcomes;\n import org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration;\n import org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\n+import org.springframework.boot.test.EnvironmentTestUtils;\n import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Condition;\n+import org.springframework.context.annotation.ConditionContext;\n+import org.springframework.context.annotation.Conditional;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.ConfigurationCondition;\n import org.springframework.context.annotation.Import;\n+import org.springframework.core.type.AnnotatedTypeMetadata;\n+import org.springframework.util.ClassUtils;\n \n import static org.hamcrest.Matchers.containsString;\n import static org.hamcrest.Matchers.equalTo;\n@@ -51,7 +58,7 @@ import static org.junit.Assert.assertThat;\n  * @author Greg Turnquist\n  * @author Phillip Webb\n  */\n-public class AutoConfigurationReportTests {\n+public class ConditionEvaluationReportTests {\n \n \tprivate DefaultListableBeanFactory beanFactory;\n \n@@ -225,6 +232,23 @@ public class AutoConfigurationReportTests {\n \t\tcontext.close();\n \t}\n \n+\t@Test\n+\tpublic void negativeOuterPositiveInnerBean() throws Exception {\n+\t\tAnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n+\t\tEnvironmentTestUtils.addEnvironment(context, "test.present=true");\n+\t\tcontext.register(NegativeOuterConfig.class);\n+\t\tcontext.refresh();\n+\t\tConditionEvaluationReport report = ConditionEvaluationReport.get(context\n+\t\t\t\t.getBeanFactory());\n+\t\tMap<String, ConditionAndOutcomes> sourceOutcomes = report\n+\t\t\t\t.getConditionAndOutcomesBySource();\n+\t\tassertThat(context.containsBean("negativeOuterPositiveInnerBean"), equalTo(false));\n+\t\tString negativeConfig = NegativeOuterConfig.class.getName();\n+\t\tassertThat(sourceOutcomes.get(negativeConfig).isFullMatch(), equalTo(false));\n+\t\tString positiveConfig = NegativeOuterConfig.PositiveInnerConfig.class.getName();\n+\t\tassertThat(sourceOutcomes.get(positiveConfig).isFullMatch(), equalTo(false));\n+\t}\n+\n \tprivate int getNumberOfOutcomes(ConditionAndOutcomes outcomes) {\n \t\tIterator<ConditionAndOutcome> iterator = outcomes.iterator();\n \t\tint numberOfOutcomesAdded = 0;\n@@ -235,16 +259,89 @@ public class AutoConfigurationReportTests {\n \t\treturn numberOfOutcomesAdded;\n \t}\n \n-\t@Configurable\n+\t@Configuration\n \t@Import(WebMvcAutoConfiguration.class)\n \tstatic class Config {\n \n \t}\n \n-\t@Configurable\n+\t@Configuration\n \t@Import(MultipartAutoConfiguration.class)\n \tstatic class DuplicateConfig {\n \n \t}\n \n+\t@Configuration\n+\t@Conditional({ ConditionEvaluationReportTests.MatchParseCondition.class,\n+\t\t\tConditionEvaluationReportTests.NoMatchBeanCondition.class })\n+\tpublic static class NegativeOuterConfig {\n+\n+\t\t@Configuration\n+\t\t@Conditional({ ConditionEvaluationReportTests.MatchParseCondition.class })\n+\t\tpublic static class PositiveInnerConfig {\n+\n+\t\t\t@Bean\n+\t\t\tpublic String negativeOuterPositiveInnerBean() {\n+\t\t\t\treturn "negativeOuterPositiveInnerBean";\n+\t\t\t}\n+\n+\t\t}\n+\t}\n+\n+\tstatic class TestMatchCondition extends SpringBootCondition implements\n+\t\t\tConfigurationCondition {\n+\n+\t\tprivate final ConfigurationPhase phase;\n+\t\tprivate final boolean match;\n+\n+\t\tpublic TestMatchCondition(ConfigurationPhase phase, boolean match) {\n+\t\t\tthis.phase = phase;\n+\t\t\tthis.match = match;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic ConfigurationPhase getConfigurationPhase() {\n+\t\t\treturn this.phase;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n+\t\t\t\tAnnotatedTypeMetadata metadata) {\n+\t\t\treturn new ConditionOutcome(this.match, ClassUtils.getShortName(getClass()));\n+\t\t}\n+\n+\t}\n+\n+\tstatic class MatchParseCondition extends TestMatchCondition {\n+\n+\t\tpublic MatchParseCondition() {\n+\t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION, true);\n+\t\t}\n+\n+\t}\n+\n+\tstatic class MatchBeanCondition extends TestMatchCondition {\n+\n+\t\tpublic MatchBeanCondition() {\n+\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN, true);\n+\t\t}\n+\n+\t}\n+\n+\tstatic class NoMatchParseCondition extends TestMatchCondition {\n+\n+\t\tpublic NoMatchParseCondition() {\n+\t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION, false);\n+\t\t}\n+\n+\t}\n+\n+\tstatic class NoMatchBeanCondition extends TestMatchCondition {\n+\n+\t\tpublic NoMatchBeanCondition() {\n+\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN, false);\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.hamcrest.Matcher;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.beans.factory.support.DefaultListableBeanFactory;\nimport org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport.ConditionAndOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport.ConditionAndOutcomes;\nimport org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.boot.test.EnvironmentTestUtils;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Condition;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.ConfigurationCondition;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.util.ClassUtils;\n\nimport static org.hamcrest.Matchers.containsString;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.hasItem;\nimport static org.hamcrest.Matchers.not;\nimport static org.hamcrest.Matchers.nullValue;\nimport static org.hamcrest.Matchers.sameInstance;\nimport static org.junit.Assert.assertThat;\n\n/**\n * Tests for {@link ConditionEvaluationReport}.\n *\n * @author Greg Turnquist\n * @author Phillip Webb\n */\npublic class ConditionEvaluationReportTests {\n\n\tprivate DefaultListableBeanFactory beanFactory;\n\n\tprivate ConditionEvaluationReport report;\n\n\t@Mock\n\tprivate Condition condition1;\n\n\t@Mock\n\tprivate Condition condition2;\n\n\t@Mock\n\tprivate Condition condition3;\n\n\tprivate ConditionOutcome outcome1;\n\n\tprivate ConditionOutcome outcome2;\n\n\tprivate ConditionOutcome outcome3;\n\n\t@Before\n\tpublic void setup() {\n\t\tMockitoAnnotations.initMocks(this);\n\t\tthis.beanFactory = new DefaultListableBeanFactory();\n\t\tthis.report = ConditionEvaluationReport.get(this.beanFactory);\n\t}\n\n\t@Test\n\tpublic void get() throws Exception {\n\t\tassertThat(this.report, not(nullValue()));\n\t\tassertThat(this.report,\n\t\t\t\tsameInstance(ConditionEvaluationReport.get(this.beanFactory)));\n\t}\n\n\t@Test\n\tpublic void parent() throws Exception {\n\t\tthis.beanFactory.setParentBeanFactory(new DefaultListableBeanFactory());\n\t\tConditionEvaluationReport.get((ConfigurableListableBeanFactory) this.beanFactory\n\t\t\t\t.getParentBeanFactory());\n\t\tassertThat(this.report,\n\t\t\t\tsameInstance(ConditionEvaluationReport.get(this.beanFactory)));\n\t\tassertThat(this.report, not(nullValue()));\n\t\tassertThat(this.report.getParent(), not(nullValue()));\n\t\tConditionEvaluationReport.get((ConfigurableListableBeanFactory) this.beanFactory\n\t\t\t\t.getParentBeanFactory());\n\t\tassertThat(this.report,\n\t\t\t\tsameInstance(ConditionEvaluationReport.get(this.beanFactory)));\n\t\tassertThat(this.report.getParent(),\n\t\t\t\tsameInstance(ConditionEvaluationReport\n\t\t\t\t\t\t.get((ConfigurableListableBeanFactory) this.beanFactory\n\t\t\t\t\t\t\t\t.getParentBeanFactory())));\n\t}\n\n\t@Test\n\tpublic void parentBottomUp() throws Exception {\n\t\tthis.beanFactory = new DefaultListableBeanFactory(); // NB: overrides setup\n\t\tthis.beanFactory.setParentBeanFactory(new DefaultListableBeanFactory());\n\t\tConditionEvaluationReport.get((ConfigurableListableBeanFactory) this.beanFactory\n\t\t\t\t.getParentBeanFactory());\n\t\tthis.report = ConditionEvaluationReport.get(this.beanFactory);\n\t\tassertThat(this.report, not(nullValue()));\n\t\tassertThat(this.report, not(sameInstance(this.report.getParent())));\n\t\tassertThat(this.report.getParent(), not(nullValue()));\n\t\tassertThat(this.report.getParent().getParent(), nullValue());\n\t}\n\n\t@Test\n\tpublic void recordConditionEvaluations() throws Exception {\n\t\tthis.outcome1 = new ConditionOutcome(false, "m1");\n\t\tthis.outcome2 = new ConditionOutcome(false, "m2");\n\t\tthis.outcome3 = new ConditionOutcome(false, "m3");\n\t\tthis.report.recordConditionEvaluation("a", this.condition1, this.outcome1);\n\t\tthis.report.recordConditionEvaluation("a", this.condition2, this.outcome2);\n\t\tthis.report.recordConditionEvaluation("b", this.condition3, this.outcome3);\n\t\tMap<String, ConditionAndOutcomes> map = this.report\n\t\t\t\t.getConditionAndOutcomesBySource();\n\t\tassertThat(map.size(), equalTo(2));\n\t\tIterator<ConditionAndOutcome> iterator = map.get("a").iterator();\n\n\t\tConditionAndOutcome conditionAndOutcome = iterator.next();\n\t\tassertThat(conditionAndOutcome.getCondition(), equalTo(this.condition1));\n\t\tassertThat(conditionAndOutcome.getOutcome(), equalTo(this.outcome1));\n\n\t\tconditionAndOutcome = iterator.next();\n\t\tassertThat(conditionAndOutcome.getCondition(), equalTo(this.condition2));\n\t\tassertThat(conditionAndOutcome.getOutcome(), equalTo(this.outcome2));\n\t\tassertThat(iterator.hasNext(), equalTo(false));\n\n\t\titerator = map.get("b").iterator();\n\t\tconditionAndOutcome = iterator.next();\n\t\tassertThat(conditionAndOutcome.getCondition(), equalTo(this.condition3));\n\t\tassertThat(conditionAndOutcome.getOutcome(), equalTo(this.outcome3));\n\t\tassertThat(iterator.hasNext(), equalTo(false));\n\t}\n\n\t@Test\n\tpublic void fullMatch() throws Exception {\n\t\tprepareMatches(true, true, true);\n\t\tassertThat(this.report.getConditionAndOutcomesBySource().get("a").isFullMatch(),\n\t\t\t\tequalTo(true));\n\t}\n\n\t@Test\n\tpublic void notFullMatch() throws Exception {\n\t\tprepareMatches(true, false, true);\n\t\tassertThat(this.report.getConditionAndOutcomesBySource().get("a").isFullMatch(),\n\t\t\t\tequalTo(false));\n\t}\n\n\tprivate void prepareMatches(boolean m1, boolean m2, boolean m3) {\n\t\tthis.outcome1 = new ConditionOutcome(m1, "m1");\n\t\tthis.outcome2 = new ConditionOutcome(m2, "m2");\n\t\tthis.outcome3 = new ConditionOutcome(m3, "m3");\n\t\tthis.report.recordConditionEvaluation("a", this.condition1, this.outcome1);\n\t\tthis.report.recordConditionEvaluation("a", this.condition2, this.outcome2);\n\t\tthis.report.recordConditionEvaluation("a", this.condition3, this.outcome3);\n\t}\n\n\t@Test\n\t@SuppressWarnings("resource")\n\tpublic void springBootConditionPopulatesReport() throws Exception {\n\t\tConditionEvaluationReport report = ConditionEvaluationReport\n\t\t\t\t.get(new AnnotationConfigApplicationContext(Config.class)\n\t\t\t\t\t\t.getBeanFactory());\n\t\tassertThat(report.getConditionAndOutcomesBySource().size(), not(equalTo(0)));\n\t}\n\n\t@Test\n\tpublic void testDuplicateConditionAndOutcomes() {\n\t\tConditionAndOutcome outcome1 = new ConditionAndOutcome(this.condition1,\n\t\t\t\tnew ConditionOutcome(true, "Message 1"));\n\t\tConditionAndOutcome outcome2 = new ConditionAndOutcome(this.condition2,\n\t\t\t\tnew ConditionOutcome(true, "Message 2"));\n\t\tConditionAndOutcome outcome3 = new ConditionAndOutcome(this.condition3,\n\t\t\t\tnew ConditionOutcome(true, "Message 2"));\n\n\t\tassertThat(outcome1, equalTo(outcome1));\n\t\tassertThat(outcome1, not(equalTo(outcome2)));\n\t\tassertThat(outcome2, equalTo(outcome3));\n\n\t\tConditionAndOutcomes outcomes = new ConditionAndOutcomes();\n\t\toutcomes.add(this.condition1, new ConditionOutcome(true, "Message 1"));\n\t\toutcomes.add(this.condition2, new ConditionOutcome(true, "Message 2"));\n\t\toutcomes.add(this.condition3, new ConditionOutcome(true, "Message 2"));\n\n\t\tassertThat(getNumberOfOutcomes(outcomes), equalTo(2));\n\t}\n\n\t@Test\n\tpublic void duplicateOutcomes() {\n\t\tAnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(\n\t\t\t\tDuplicateConfig.class);\n\t\tConditionEvaluationReport report = ConditionEvaluationReport.get(context\n\t\t\t\t.getBeanFactory());\n\t\tString autoconfigKey = MultipartAutoConfiguration.class.getName();\n\n\t\tConditionAndOutcomes outcomes = report.getConditionAndOutcomesBySource().get(\n\t\t\t\tautoconfigKey);\n\t\tassertThat(outcomes, not(nullValue()));\n\t\tassertThat(getNumberOfOutcomes(outcomes), equalTo(2));\n\n\t\tList<String> messages = new ArrayList<String>();\n\t\tfor (ConditionAndOutcome outcome : outcomes) {\n\t\t\tmessages.add(outcome.getOutcome().getMessage());\n\t\t\tSystem.out.println(outcome.getOutcome().getMessage());\n\t\t}\n\n\t\tMatcher<String> onClassMessage = containsString("@ConditionalOnClass "\n\t\t\t\t+ "classes found: javax.servlet.Servlet,org.springframework.web.multipart.support.StandardServletMultipartResolver");\n\t\tassertThat(messages, hasItem(onClassMessage));\n\t\tcontext.close();\n\t}\n\n\t@Test\n\tpublic void negativeOuterPositiveInnerBean() throws Exception {\n\t\tAnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n\t\tEnvironmentTestUtils.addEnvironment(context, "test.present=true");\n\t\tcontext.register(NegativeOuterConfig.class);\n\t\tcontext.refresh();\n\t\tConditionEvaluationReport report = ConditionEvaluationReport.get(context\n\t\t\t\t.getBeanFactory());\n\t\tMap<String, ConditionAndOutcomes> sourceOutcomes = report\n\t\t\t\t.getConditionAndOutcomesBySource();\n\t\tassertThat(context.containsBean("negativeOuterPositiveInnerBean"), equalTo(false));\n\t\tString negativeConfig = NegativeOuterConfig.class.getName();\n\t\tassertThat(sourceOutcomes.get(negativeConfig).isFullMatch(), equalTo(false));\n\t\tString positiveConfig = NegativeOuterConfig.PositiveInnerConfig.class.getName();\n\t\tassertThat(sourceOutcomes.get(positiveConfig).isFullMatch(), equalTo(false));\n\t}\n\n\tprivate int getNumberOfOutcomes(ConditionAndOutcomes outcomes) {\n\t\tIterator<ConditionAndOutcome> iterator = outcomes.iterator();\n\t\tint numberOfOutcomesAdded = 0;\n\t\twhile (iterator.hasNext()) {\n\t\t\tnumberOfOutcomesAdded++;\n\t\t\titerator.next();\n\t\t}\n\t\treturn numberOfOutcomesAdded;\n\t}\n\n\t@Configuration\n\t@Import(WebMvcAutoConfiguration.class)\n\tstatic class Config {\n\n\t}\n\n\t@Configuration\n\t@Import(MultipartAutoConfiguration.class)\n\tstatic class DuplicateConfig {\n\n\t}\n\n\t@Configuration\n\t@Conditional({ ConditionEvaluationReportTests.MatchParseCondition.class,\n\t\t\tConditionEvaluationReportTests.NoMatchBeanCondition.class })\n\tpublic static class NegativeOuterConfig {\n\n\t\t@Configuration\n\t\t@Conditional({ ConditionEvaluationReportTests.MatchParseCondition.class })\n\t\tpublic static class PositiveInnerConfig {\n\n\t\t\t@Bean\n\t\t\tpublic String negativeOuterPositiveInnerBean() {\n\t\t\t\treturn "negativeOuterPositiveInnerBean";\n\t\t\t}\n\n\t\t}\n\t}\n\n\tstatic class TestMatchCondition extends SpringBootCondition implements\n\t\t\tConfigurationCondition {\n\n\t\tprivate final ConfigurationPhase phase;\n\t\tprivate final boolean match;\n\n\t\tpublic TestMatchCondition(ConfigurationPhase phase, boolean match) {\n\t\t\tthis.phase = phase;\n\t\t\tthis.match = match;\n\t\t}\n\n\t\t@Override\n\t\tpublic ConfigurationPhase getConfigurationPhase() {\n\t\t\treturn this.phase;\n\t\t}\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\treturn new ConditionOutcome(this.match, ClassUtils.getShortName(getClass()));\n\t\t}\n\n\t}\n\n\tstatic class MatchParseCondition extends TestMatchCondition {\n\n\t\tpublic MatchParseCondition() {\n\t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION, true);\n\t\t}\n\n\t}\n\n\tstatic class MatchBeanCondition extends TestMatchCondition {\n\n\t\tpublic MatchBeanCondition() {\n\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN, true);\n\t\t}\n\n\t}\n\n\tstatic class NoMatchParseCondition extends TestMatchCondition {\n\n\t\tpublic NoMatchParseCondition() {\n\t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION, false);\n\t\t}\n\n\t}\n\n\tstatic class NoMatchBeanCondition extends TestMatchCondition {\n\n\t\tpublic NoMatchBeanCondition() {\n\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN, false);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.hamcrest.Matcher;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.beans.factory.annotation.Configurable;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.beans.factory.support.DefaultListableBeanFactory;\nimport org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport.ConditionAndOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport.ConditionAndOutcomes;\nimport org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Condition;\nimport org.springframework.context.annotation.Import;\n\nimport static org.hamcrest.Matchers.containsString;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.hasItem;\nimport static org.hamcrest.Matchers.not;\nimport static org.hamcrest.Matchers.nullValue;\nimport static org.hamcrest.Matchers.sameInstance;\nimport static org.junit.Assert.assertThat;\n\n/**\n * Tests for {@link ConditionEvaluationReport}.\n *\n * @author Greg Turnquist\n * @author Phillip Webb\n */\npublic class AutoConfigurationReportTests {\n\n\tprivate DefaultListableBeanFactory beanFactory;\n\n\tprivate ConditionEvaluationReport report;\n\n\t@Mock\n\tprivate Condition condition1;\n\n\t@Mock\n\tprivate Condition condition2;\n\n\t@Mock\n\tprivate Condition condition3;\n\n\tprivate ConditionOutcome outcome1;\n\n\tprivate ConditionOutcome outcome2;\n\n\tprivate ConditionOutcome outcome3;\n\n\t@Before\n\tpublic void setup() {\n\t\tMockitoAnnotations.initMocks(this);\n\t\tthis.beanFactory = new DefaultListableBeanFactory();\n\t\tthis.report = ConditionEvaluationReport.get(this.beanFactory);\n\t}\n\n\t@Test\n\tpublic void get() throws Exception {\n\t\tassertThat(this.report, not(nullValue()));\n\t\tassertThat(this.report,\n\t\t\t\tsameInstance(ConditionEvaluationReport.get(this.beanFactory)));\n\t}\n\n\t@Test\n\tpublic void parent() throws Exception {\n\t\tthis.beanFactory.setParentBeanFactory(new DefaultListableBeanFactory());\n\t\tConditionEvaluationReport.get((ConfigurableListableBeanFactory) this.beanFactory\n\t\t\t\t.getParentBeanFactory());\n\t\tassertThat(this.report,\n\t\t\t\tsameInstance(ConditionEvaluationReport.get(this.beanFactory)));\n\t\tassertThat(this.report, not(nullValue()));\n\t\tassertThat(this.report.getParent(), not(nullValue()));\n\t\tConditionEvaluationReport.get((ConfigurableListableBeanFactory) this.beanFactory\n\t\t\t\t.getParentBeanFactory());\n\t\tassertThat(this.report,\n\t\t\t\tsameInstance(ConditionEvaluationReport.get(this.beanFactory)));\n\t\tassertThat(this.report.getParent(),\n\t\t\t\tsameInstance(ConditionEvaluationReport\n\t\t\t\t\t\t.get((ConfigurableListableBeanFactory) this.beanFactory\n\t\t\t\t\t\t\t\t.getParentBeanFactory())));\n\t}\n\n\t@Test\n\tpublic void parentBottomUp() throws Exception {\n\t\tthis.beanFactory = new DefaultListableBeanFactory(); // NB: overrides setup\n\t\tthis.beanFactory.setParentBeanFactory(new DefaultListableBeanFactory());\n\t\tConditionEvaluationReport.get((ConfigurableListableBeanFactory) this.beanFactory\n\t\t\t\t.getParentBeanFactory());\n\t\tthis.report = ConditionEvaluationReport.get(this.beanFactory);\n\t\tassertThat(this.report, not(nullValue()));\n\t\tassertThat(this.report, not(sameInstance(this.report.getParent())));\n\t\tassertThat(this.report.getParent(), not(nullValue()));\n\t\tassertThat(this.report.getParent().getParent(), nullValue());\n\t}\n\n\t@Test\n\tpublic void recordConditionEvaluations() throws Exception {\n\t\tthis.outcome1 = new ConditionOutcome(false, "m1");\n\t\tthis.outcome2 = new ConditionOutcome(false, "m2");\n\t\tthis.outcome3 = new ConditionOutcome(false, "m3");\n\t\tthis.report.recordConditionEvaluation("a", this.condition1, this.outcome1);\n\t\tthis.report.recordConditionEvaluation("a", this.condition2, this.outcome2);\n\t\tthis.report.recordConditionEvaluation("b", this.condition3, this.outcome3);\n\t\tMap<String, ConditionAndOutcomes> map = this.report\n\t\t\t\t.getConditionAndOutcomesBySource();\n\t\tassertThat(map.size(), equalTo(2));\n\t\tIterator<ConditionAndOutcome> iterator = map.get("a").iterator();\n\n\t\tConditionAndOutcome conditionAndOutcome = iterator.next();\n\t\tassertThat(conditionAndOutcome.getCondition(), equalTo(this.condition1));\n\t\tassertThat(conditionAndOutcome.getOutcome(), equalTo(this.outcome1));\n\n\t\tconditionAndOutcome = iterator.next();\n\t\tassertThat(conditionAndOutcome.getCondition(), equalTo(this.condition2));\n\t\tassertThat(conditionAndOutcome.getOutcome(), equalTo(this.outcome2));\n\t\tassertThat(iterator.hasNext(), equalTo(false));\n\n\t\titerator = map.get("b").iterator();\n\t\tconditionAndOutcome = iterator.next();\n\t\tassertThat(conditionAndOutcome.getCondition(), equalTo(this.condition3));\n\t\tassertThat(conditionAndOutcome.getOutcome(), equalTo(this.outcome3));\n\t\tassertThat(iterator.hasNext(), equalTo(false));\n\t}\n\n\t@Test\n\tpublic void fullMatch() throws Exception {\n\t\tprepareMatches(true, true, true);\n\t\tassertThat(this.report.getConditionAndOutcomesBySource().get("a").isFullMatch(),\n\t\t\t\tequalTo(true));\n\t}\n\n\t@Test\n\tpublic void notFullMatch() throws Exception {\n\t\tprepareMatches(true, false, true);\n\t\tassertThat(this.report.getConditionAndOutcomesBySource().get("a").isFullMatch(),\n\t\t\t\tequalTo(false));\n\t}\n\n\tprivate void prepareMatches(boolean m1, boolean m2, boolean m3) {\n\t\tthis.outcome1 = new ConditionOutcome(m1, "m1");\n\t\tthis.outcome2 = new ConditionOutcome(m2, "m2");\n\t\tthis.outcome3 = new ConditionOutcome(m3, "m3");\n\t\tthis.report.recordConditionEvaluation("a", this.condition1, this.outcome1);\n\t\tthis.report.recordConditionEvaluation("a", this.condition2, this.outcome2);\n\t\tthis.report.recordConditionEvaluation("a", this.condition3, this.outcome3);\n\t}\n\n\t@Test\n\t@SuppressWarnings("resource")\n\tpublic void springBootConditionPopulatesReport() throws Exception {\n\t\tConditionEvaluationReport report = ConditionEvaluationReport\n\t\t\t\t.get(new AnnotationConfigApplicationContext(Config.class)\n\t\t\t\t\t\t.getBeanFactory());\n\t\tassertThat(report.getConditionAndOutcomesBySource().size(), not(equalTo(0)));\n\t}\n\n\t@Test\n\tpublic void testDuplicateConditionAndOutcomes() {\n\t\tConditionAndOutcome outcome1 = new ConditionAndOutcome(this.condition1,\n\t\t\t\tnew ConditionOutcome(true, "Message 1"));\n\t\tConditionAndOutcome outcome2 = new ConditionAndOutcome(this.condition2,\n\t\t\t\tnew ConditionOutcome(true, "Message 2"));\n\t\tConditionAndOutcome outcome3 = new ConditionAndOutcome(this.condition3,\n\t\t\t\tnew ConditionOutcome(true, "Message 2"));\n\n\t\tassertThat(outcome1, equalTo(outcome1));\n\t\tassertThat(outcome1, not(equalTo(outcome2)));\n\t\tassertThat(outcome2, equalTo(outcome3));\n\n\t\tConditionAndOutcomes outcomes = new ConditionAndOutcomes();\n\t\toutcomes.add(this.condition1, new ConditionOutcome(true, "Message 1"));\n\t\toutcomes.add(this.condition2, new ConditionOutcome(true, "Message 2"));\n\t\toutcomes.add(this.condition3, new ConditionOutcome(true, "Message 2"));\n\n\t\tassertThat(getNumberOfOutcomes(outcomes), equalTo(2));\n\t}\n\n\t@Test\n\tpublic void duplicateOutcomes() {\n\t\tAnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(\n\t\t\t\tDuplicateConfig.class);\n\t\tConditionEvaluationReport report = ConditionEvaluationReport.get(context\n\t\t\t\t.getBeanFactory());\n\t\tString autoconfigKey = MultipartAutoConfiguration.class.getName();\n\n\t\tConditionAndOutcomes outcomes = report.getConditionAndOutcomesBySource().get(\n\t\t\t\tautoconfigKey);\n\t\tassertThat(outcomes, not(nullValue()));\n\t\tassertThat(getNumberOfOutcomes(outcomes), equalTo(2));\n\n\t\tList<String> messages = new ArrayList<String>();\n\t\tfor (ConditionAndOutcome outcome : outcomes) {\n\t\t\tmessages.add(outcome.getOutcome().getMessage());\n\t\t\tSystem.out.println(outcome.getOutcome().getMessage());\n\t\t}\n\n\t\tMatcher<String> onClassMessage = containsString("@ConditionalOnClass "\n\t\t\t\t+ "classes found: javax.servlet.Servlet,org.springframework.web.multipart.support.StandardServletMultipartResolver");\n\t\tassertThat(messages, hasItem(onClassMessage));\n\t\tcontext.close();\n\t}\n\n\tprivate int getNumberOfOutcomes(ConditionAndOutcomes outcomes) {\n\t\tIterator<ConditionAndOutcome> iterator = outcomes.iterator();\n\t\tint numberOfOutcomesAdded = 0;\n\t\twhile (iterator.hasNext()) {\n\t\t\tnumberOfOutcomesAdded++;\n\t\t\titerator.next();\n\t\t}\n\t\treturn numberOfOutcomesAdded;\n\t}\n\n\t@Configurable\n\t@Import(WebMvcAutoConfiguration.class)\n\tstatic class Config {\n\n\t}\n\n\t@Configurable\n\t@Import(MultipartAutoConfiguration.class)\n\tstatic class DuplicateConfig {\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
