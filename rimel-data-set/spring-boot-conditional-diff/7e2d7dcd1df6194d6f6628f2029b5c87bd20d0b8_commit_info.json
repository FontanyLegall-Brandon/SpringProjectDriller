{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/reactive/ReactiveSecurityAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/reactive/ReactiveSecurityAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': "@@ -24,16 +24,17 @@ import org.springframework.security.config.annotation.web.reactive.EnableWebFlux\n import org.springframework.security.web.reactive.result.method.annotation.AuthenticationPrincipalArgumentResolver;\n \n /**\n- * {@link EnableAutoConfiguration Auto-configuration} for Spring Security in a\n- * reactive application. This auto-configuration adds {@link EnableWebFluxSecurity}\n- * and delegates to Spring Security's content-negotiation mechanism for authentication.\n- * In a webapp this configuration also secures all web endpoints.\n+ * {@link EnableAutoConfiguration Auto-configuration} for Spring Security in a reactive\n+ * application. This auto-configuration adds {@link EnableWebFluxSecurity} and delegates\n+ * to Spring Security's content-negotiation mechanism for authentication. In a webapp this\n+ * configuration also secures all web endpoints.\n  *\n  * @author Madhura Bhave\n  * @since 2.0.0\n  */\n @Configuration\n-@ConditionalOnClass({EnableWebFluxSecurity.class, AuthenticationPrincipalArgumentResolver.class})\n+@ConditionalOnClass({ EnableWebFluxSecurity.class,\n+\t\tAuthenticationPrincipalArgumentResolver.class })\n @Import({ WebfluxSecurityConfiguration.class,\n \t\tReactiveAuthenticationManagerConfiguration.class })\n public class ReactiveSecurityAutoConfiguration {\n", 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security.reactive;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;\nimport org.springframework.security.web.reactive.result.method.annotation.AuthenticationPrincipalArgumentResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Security in a reactive\n * application. This auto-configuration adds {@link EnableWebFluxSecurity} and delegates\n * to Spring Security\'s content-negotiation mechanism for authentication. In a webapp this\n * configuration also secures all web endpoints.\n *\n * @author Madhura Bhave\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass({ EnableWebFluxSecurity.class,\n\t\tAuthenticationPrincipalArgumentResolver.class })\n@Import({ WebfluxSecurityConfiguration.class,\n\t\tReactiveAuthenticationManagerConfiguration.class })\npublic class ReactiveSecurityAutoConfiguration {\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security.reactive;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;\nimport org.springframework.security.web.reactive.result.method.annotation.AuthenticationPrincipalArgumentResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Security in a\n * reactive application. This auto-configuration adds {@link EnableWebFluxSecurity}\n * and delegates to Spring Security\'s content-negotiation mechanism for authentication.\n * In a webapp this configuration also secures all web endpoints.\n *\n * @author Madhura Bhave\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass({EnableWebFluxSecurity.class, AuthenticationPrincipalArgumentResolver.class})\n@Import({ WebfluxSecurityConfiguration.class,\n\t\tReactiveAuthenticationManagerConfiguration.class })\npublic class ReactiveSecurityAutoConfiguration {\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
