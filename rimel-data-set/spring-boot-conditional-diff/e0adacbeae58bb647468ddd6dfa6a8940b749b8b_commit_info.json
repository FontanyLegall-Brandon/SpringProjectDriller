{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceTransactionManagerAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceTransactionManagerAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -20,9 +20,9 @@ import javax.sql.DataSource;\n \n import org.springframework.boot.autoconfigure.AutoConfigureOrder;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.core.Ordered;\n@@ -46,7 +46,7 @@ import org.springframework.transaction.annotation.EnableTransactionManagement;\n public class DataSourceTransactionManagerAutoConfiguration {\n \n \t@Configuration\n-\t@ConditionalOnBean(DataSource.class)\n+\t@ConditionalOnSingleCandidate(DataSource.class)\n \tstatic class DataSourceTransactionManagerConfiguration {\n \n \t\tprivate final DataSource dataSource;\n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jdbc;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureOrder;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.datasource.DataSourceTransactionManager;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.transaction.annotation.AbstractTransactionManagementConfiguration;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for\n * {@link DataSourceTransactionManager}.\n *\n * @author Dave Syer\n * @author Stephane Nicoll\n * @author Andy Wilkinson\n */\n@Configuration\n@ConditionalOnClass({ JdbcTemplate.class, PlatformTransactionManager.class })\n@AutoConfigureOrder(Ordered.LOWEST_PRECEDENCE)\npublic class DataSourceTransactionManagerAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnSingleCandidate(DataSource.class)\n\tstatic class DataSourceTransactionManagerConfiguration {\n\n\t\tprivate final DataSource dataSource;\n\n\t\tDataSourceTransactionManagerConfiguration(DataSource dataSource) {\n\t\t\tthis.dataSource = dataSource;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(PlatformTransactionManager.class)\n\t\tpublic DataSourceTransactionManager transactionManager() {\n\t\t\treturn new DataSourceTransactionManager(this.dataSource);\n\t\t}\n\n\t}\n\n\t@ConditionalOnMissingBean(AbstractTransactionManagementConfiguration.class)\n\t@Configuration\n\t@EnableTransactionManagement(proxyTargetClass = true)\n\tprotected static class TransactionManagementConfiguration {\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jdbc;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureOrder;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.datasource.DataSourceTransactionManager;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.transaction.annotation.AbstractTransactionManagementConfiguration;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for\n * {@link DataSourceTransactionManager}.\n *\n * @author Dave Syer\n * @author Stephane Nicoll\n * @author Andy Wilkinson\n */\n@Configuration\n@ConditionalOnClass({ JdbcTemplate.class, PlatformTransactionManager.class })\n@AutoConfigureOrder(Ordered.LOWEST_PRECEDENCE)\npublic class DataSourceTransactionManagerAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnBean(DataSource.class)\n\tstatic class DataSourceTransactionManagerConfiguration {\n\n\t\tprivate final DataSource dataSource;\n\n\t\tDataSourceTransactionManagerConfiguration(DataSource dataSource) {\n\t\t\tthis.dataSource = dataSource;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(PlatformTransactionManager.class)\n\t\tpublic DataSourceTransactionManager transactionManager() {\n\t\t\treturn new DataSourceTransactionManager(this.dataSource);\n\t\t}\n\n\t}\n\n\t@ConditionalOnMissingBean(AbstractTransactionManagementConfiguration.class)\n\t@Configuration\n\t@EnableTransactionManagement(proxyTargetClass = true)\n\tprotected static class TransactionManagementConfiguration {\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
