@@ -23,7 +23,11 @@ import org.apache.catalina.deploy.ApplicationListener;
 import org.apache.catalina.startup.Tomcat;
 import org.springframework.boot.autoconfigure.AutoConfigureBefore;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration;
+import org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainer;
+import org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;
+import org.springframework.boot.context.embedded.tomcat.TomcatContextCustomizer;
 import org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -47,14 +51,31 @@ public class WebSocketAutoConfiguration {
 			, false);
 
 	@Bean
-	public TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() {
-		TomcatEmbeddedServletContainerFactory factory = new TomcatEmbeddedServletContainerFactory() {
+	@ConditionalOnMissingBean(name = )
+	public EmbeddedServletContainerCustomizer websocketContainerCustomizer() {
+
+		EmbeddedServletContainerCustomizer customizer = new EmbeddedServletContainerCustomizer() {
+
 			@Override
-			protected void postProcessContext(Context context) {
-				context.addApplicationListener(WS_APPLICATION_LISTENER);
+			public void customize(ConfigurableEmbeddedServletContainer container) {
+				if (!(container instanceof TomcatEmbeddedServletContainerFactory)) {
+					throw new IllegalStateException(
+							
+									+ container.getClass() + );
+				}
+				((TomcatEmbeddedServletContainerFactory) container)
+						.addContextCustomizers(new TomcatContextCustomizer() {
+							@Override
+							public void customize(Context context) {
+								context.addApplicationListener(WS_APPLICATION_LISTENER);
+							}
+						});
 			}
+
 		};
-		return factory;
+
+		return customizer;
+
 	}
 
 }

