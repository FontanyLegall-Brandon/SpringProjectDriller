{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/logging/LogFileWebEndpointAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/logging/LogFileWebEndpointAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -17,6 +17,7 @@\n package org.springframework.boot.actuate.autoconfigure.logging;\n \n import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\n+import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnExposedEndpoint;\n import org.springframework.boot.actuate.logging.LogFileWebEndpoint;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionMessage;\n@@ -42,6 +43,7 @@ import org.springframework.util.StringUtils;\n  */\n @Configuration(proxyBeanMethods = false)\n @ConditionalOnEnabledEndpoint(endpoint = LogFileWebEndpoint.class)\n+@ConditionalOnExposedEndpoint(endpoint = LogFileWebEndpoint.class)\n @EnableConfigurationProperties(LogFileWebEndpointProperties.class)\n public class LogFileWebEndpointAutoConfiguration {\n \n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.logging;\n\nimport org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\nimport org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnExposedEndpoint;\nimport org.springframework.boot.actuate.logging.LogFileWebEndpoint;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionMessage;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.logging.LogFile;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link LogFileWebEndpoint}.\n *\n * @author Andy Wilkinson\n * @author Christian Carriere-Tisseur\n * @since 2.0.0\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnEnabledEndpoint(endpoint = LogFileWebEndpoint.class)\n@ConditionalOnExposedEndpoint(endpoint = LogFileWebEndpoint.class)\n@EnableConfigurationProperties(LogFileWebEndpointProperties.class)\npublic class LogFileWebEndpointAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@Conditional(LogFileCondition.class)\n\tpublic LogFileWebEndpoint logFileWebEndpoint(Environment environment,\n\t\t\tLogFileWebEndpointProperties properties) {\n\t\treturn new LogFileWebEndpoint(environment, properties.getExternalFile());\n\t}\n\n\tprivate static class LogFileCondition extends SpringBootCondition {\n\n\t\t@SuppressWarnings("deprecation")\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tEnvironment environment = context.getEnvironment();\n\t\t\tString config = getLogFileConfig(environment, LogFile.FILE_NAME_PROPERTY,\n\t\t\t\t\tLogFile.FILE_PROPERTY);\n\t\t\tConditionMessage.Builder message = ConditionMessage.forCondition("Log File");\n\t\t\tif (StringUtils.hasText(config)) {\n\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t.match(message.found(LogFile.FILE_NAME_PROPERTY).items(config));\n\t\t\t}\n\t\t\tconfig = getLogFileConfig(environment, LogFile.FILE_PATH_PROPERTY,\n\t\t\t\t\tLogFile.PATH_PROPERTY);\n\t\t\tif (StringUtils.hasText(config)) {\n\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t.match(message.found(LogFile.FILE_PATH_PROPERTY).items(config));\n\t\t\t}\n\t\t\tconfig = environment.getProperty("management.endpoint.logfile.external-file");\n\t\t\tif (StringUtils.hasText(config)) {\n\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t.match(message.found("management.endpoint.logfile.external-file")\n\t\t\t\t\t\t\t\t.items(config));\n\t\t\t}\n\t\t\treturn ConditionOutcome.noMatch(message.didNotFind("logging file").atAll());\n\t\t}\n\n\t\tprivate String getLogFileConfig(Environment environment, String configName,\n\t\t\t\tString deprecatedConfigName) {\n\t\t\tString config = environment.resolvePlaceholders("${" + configName + ":}");\n\t\t\tif (StringUtils.hasText(config)) {\n\t\t\t\treturn config;\n\t\t\t}\n\t\t\treturn environment.resolvePlaceholders("${" + deprecatedConfigName + ":}");\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.logging;\n\nimport org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\nimport org.springframework.boot.actuate.logging.LogFileWebEndpoint;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionMessage;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.logging.LogFile;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link LogFileWebEndpoint}.\n *\n * @author Andy Wilkinson\n * @author Christian Carriere-Tisseur\n * @since 2.0.0\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnEnabledEndpoint(endpoint = LogFileWebEndpoint.class)\n@EnableConfigurationProperties(LogFileWebEndpointProperties.class)\npublic class LogFileWebEndpointAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@Conditional(LogFileCondition.class)\n\tpublic LogFileWebEndpoint logFileWebEndpoint(Environment environment,\n\t\t\tLogFileWebEndpointProperties properties) {\n\t\treturn new LogFileWebEndpoint(environment, properties.getExternalFile());\n\t}\n\n\tprivate static class LogFileCondition extends SpringBootCondition {\n\n\t\t@SuppressWarnings("deprecation")\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tEnvironment environment = context.getEnvironment();\n\t\t\tString config = getLogFileConfig(environment, LogFile.FILE_NAME_PROPERTY,\n\t\t\t\t\tLogFile.FILE_PROPERTY);\n\t\t\tConditionMessage.Builder message = ConditionMessage.forCondition("Log File");\n\t\t\tif (StringUtils.hasText(config)) {\n\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t.match(message.found(LogFile.FILE_NAME_PROPERTY).items(config));\n\t\t\t}\n\t\t\tconfig = getLogFileConfig(environment, LogFile.FILE_PATH_PROPERTY,\n\t\t\t\t\tLogFile.PATH_PROPERTY);\n\t\t\tif (StringUtils.hasText(config)) {\n\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t.match(message.found(LogFile.FILE_PATH_PROPERTY).items(config));\n\t\t\t}\n\t\t\tconfig = environment.getProperty("management.endpoint.logfile.external-file");\n\t\t\tif (StringUtils.hasText(config)) {\n\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t.match(message.found("management.endpoint.logfile.external-file")\n\t\t\t\t\t\t\t\t.items(config));\n\t\t\t}\n\t\t\treturn ConditionOutcome.noMatch(message.didNotFind("logging file").atAll());\n\t\t}\n\n\t\tprivate String getLogFileConfig(Environment environment, String configName,\n\t\t\t\tString deprecatedConfigName) {\n\t\t\tString config = environment.resolvePlaceholders("${" + configName + ":}");\n\t\t\tif (StringUtils.hasText(config)) {\n\t\t\t\treturn config;\n\t\t\t}\n\t\t\treturn environment.resolvePlaceholders("${" + deprecatedConfigName + ":}");\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
