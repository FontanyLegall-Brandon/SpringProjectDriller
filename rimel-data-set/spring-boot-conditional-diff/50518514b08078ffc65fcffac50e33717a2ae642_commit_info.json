{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/gson/GsonAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/gson/GsonAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -43,6 +43,7 @@ import org.springframework.core.Ordered;\n public class GsonAutoConfiguration {\n \n \t@Bean\n+\t@ConditionalOnMissingBean(GsonBuilder.class)\n \tpublic GsonBuilder gsonBuilder(List<GsonBuilderCustomizer> customizers) {\n \t\tGsonBuilder builder = new GsonBuilder();\n \t\tcustomizers.forEach(c -> c.customize(builder));\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.gson;\n\nimport java.util.List;\n\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.context.properties.PropertyMapper;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Gson.\n *\n * @author David Liu\n * @author Ivan Golovko\n * @since 1.2.0\n */\n@Configuration\n@ConditionalOnClass(Gson.class)\n@EnableConfigurationProperties(GsonProperties.class)\npublic class GsonAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean(GsonBuilder.class)\n\tpublic GsonBuilder gsonBuilder(List<GsonBuilderCustomizer> customizers) {\n\t\tGsonBuilder builder = new GsonBuilder();\n\t\tcustomizers.forEach(c -> c.customize(builder));\n\t\treturn builder;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(Gson.class)\n\tpublic Gson gson(GsonBuilder gsonBuilder) {\n\t\treturn gsonBuilder.create();\n\t}\n\n\t@Bean\n\tpublic StandardGsonBuilderCustomizer standardGsonBuilderCustomizer(\n\t\t\tGsonProperties gsonProperties) {\n\t\treturn new StandardGsonBuilderCustomizer(gsonProperties);\n\t}\n\n\tprivate static final class StandardGsonBuilderCustomizer\n\t\t\timplements GsonBuilderCustomizer, Ordered {\n\n\t\tprivate final GsonProperties properties;\n\n\t\tStandardGsonBuilderCustomizer(GsonProperties properties) {\n\t\t\tthis.properties = properties;\n\t\t}\n\n\t\t@Override\n\t\tpublic int getOrder() {\n\t\t\treturn 0;\n\t\t}\n\n\t\t@Override\n\t\tpublic void customize(GsonBuilder builder) {\n\t\t\tGsonProperties properties = this.properties;\n\t\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\t\tmap.from(properties::getGenerateNonExecutableJson)\n\t\t\t\t\t.toCall(builder::generateNonExecutableJson);\n\t\t\tmap.from(properties::getExcludeFieldsWithoutExposeAnnotation)\n\t\t\t\t\t.toCall(builder::excludeFieldsWithoutExposeAnnotation);\n\t\t\tmap.from(properties::getSerializeNulls).toCall(builder::serializeNulls);\n\t\t\tmap.from(properties::getEnableComplexMapKeySerialization)\n\t\t\t\t\t.toCall(builder::enableComplexMapKeySerialization);\n\t\t\tmap.from(properties::getDisableInnerClassSerialization)\n\t\t\t\t\t.toCall(builder::disableInnerClassSerialization);\n\t\t\tmap.from(properties::getLongSerializationPolicy)\n\t\t\t\t\t.to(builder::setLongSerializationPolicy);\n\t\t\tmap.from(properties::getFieldNamingPolicy).to(builder::setFieldNamingPolicy);\n\t\t\tmap.from(properties::getPrettyPrinting).toCall(builder::setPrettyPrinting);\n\t\t\tmap.from(properties::getLenient).toCall(builder::setLenient);\n\t\t\tmap.from(properties::getDisableHtmlEscaping)\n\t\t\t\t\t.toCall(builder::disableHtmlEscaping);\n\t\t\tmap.from(properties::getDateFormat).to(builder::setDateFormat);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.gson;\n\nimport java.util.List;\n\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.context.properties.PropertyMapper;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Gson.\n *\n * @author David Liu\n * @author Ivan Golovko\n * @since 1.2.0\n */\n@Configuration\n@ConditionalOnClass(Gson.class)\n@EnableConfigurationProperties(GsonProperties.class)\npublic class GsonAutoConfiguration {\n\n\t@Bean\n\tpublic GsonBuilder gsonBuilder(List<GsonBuilderCustomizer> customizers) {\n\t\tGsonBuilder builder = new GsonBuilder();\n\t\tcustomizers.forEach(c -> c.customize(builder));\n\t\treturn builder;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(Gson.class)\n\tpublic Gson gson(GsonBuilder gsonBuilder) {\n\t\treturn gsonBuilder.create();\n\t}\n\n\t@Bean\n\tpublic StandardGsonBuilderCustomizer standardGsonBuilderCustomizer(\n\t\t\tGsonProperties gsonProperties) {\n\t\treturn new StandardGsonBuilderCustomizer(gsonProperties);\n\t}\n\n\tprivate static final class StandardGsonBuilderCustomizer\n\t\t\timplements GsonBuilderCustomizer, Ordered {\n\n\t\tprivate final GsonProperties properties;\n\n\t\tStandardGsonBuilderCustomizer(GsonProperties properties) {\n\t\t\tthis.properties = properties;\n\t\t}\n\n\t\t@Override\n\t\tpublic int getOrder() {\n\t\t\treturn 0;\n\t\t}\n\n\t\t@Override\n\t\tpublic void customize(GsonBuilder builder) {\n\t\t\tGsonProperties properties = this.properties;\n\t\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\t\tmap.from(properties::getGenerateNonExecutableJson)\n\t\t\t\t\t.toCall(builder::generateNonExecutableJson);\n\t\t\tmap.from(properties::getExcludeFieldsWithoutExposeAnnotation)\n\t\t\t\t\t.toCall(builder::excludeFieldsWithoutExposeAnnotation);\n\t\t\tmap.from(properties::getSerializeNulls).toCall(builder::serializeNulls);\n\t\t\tmap.from(properties::getEnableComplexMapKeySerialization)\n\t\t\t\t\t.toCall(builder::enableComplexMapKeySerialization);\n\t\t\tmap.from(properties::getDisableInnerClassSerialization)\n\t\t\t\t\t.toCall(builder::disableInnerClassSerialization);\n\t\t\tmap.from(properties::getLongSerializationPolicy)\n\t\t\t\t\t.to(builder::setLongSerializationPolicy);\n\t\t\tmap.from(properties::getFieldNamingPolicy).to(builder::setFieldNamingPolicy);\n\t\t\tmap.from(properties::getPrettyPrinting).toCall(builder::setPrettyPrinting);\n\t\t\tmap.from(properties::getLenient).toCall(builder::setLenient);\n\t\t\tmap.from(properties::getDisableHtmlEscaping)\n\t\t\t\t\t.toCall(builder::disableHtmlEscaping);\n\t\t\tmap.from(properties::getDateFormat).to(builder::setDateFormat);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
