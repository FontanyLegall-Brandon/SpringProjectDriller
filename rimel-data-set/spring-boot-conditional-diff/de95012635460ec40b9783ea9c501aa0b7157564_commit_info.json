{'_old_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java'), '_new_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,6 +16,8 @@\n \n package org.springframework.boot.actuate.autoconfigure;\n \n+import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;\n+\n import java.io.IOException;\n import java.lang.reflect.Type;\n import java.util.Map;\n@@ -23,7 +25,11 @@ import java.util.concurrent.ConcurrentHashMap;\n \n import javax.annotation.PostConstruct;\n \n+import org.springframework.beans.factory.ListableBeanFactory;\n+import org.springframework.beans.factory.annotation.AnnotatedBeanDefinition;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.config.BeanDefinition;\n+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n import org.springframework.boot.actuate.endpoint.mvc.ActuatorDocsEndpoint;\n import org.springframework.boot.actuate.endpoint.mvc.HalBrowserEndpoint;\n import org.springframework.boot.actuate.endpoint.mvc.HypermediaDisabled;\n@@ -41,6 +47,7 @@ import org.springframework.boot.autoconfigure.condition.SpringBootCondition;\n import org.springframework.boot.autoconfigure.web.HttpMessageConverters;\n import org.springframework.boot.autoconfigure.web.ResourceProperties;\n import org.springframework.boot.autoconfigure.web.ServerProperties;\n+import org.springframework.boot.bind.RelaxedPropertyResolver;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.ConditionContext;\n@@ -48,7 +55,9 @@ import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.core.MethodParameter;\n import org.springframework.core.annotation.AnnotationUtils;\n+import org.springframework.core.env.Environment;\n import org.springframework.core.type.AnnotatedTypeMetadata;\n+import org.springframework.core.type.MethodMetadata;\n import org.springframework.hateoas.Link;\n import org.springframework.hateoas.Resource;\n import org.springframework.hateoas.ResourceSupport;\n@@ -61,6 +70,7 @@ import org.springframework.http.converter.HttpMessageNotWritableException;\n import org.springframework.http.server.ServerHttpRequest;\n import org.springframework.http.server.ServerHttpResponse;\n import org.springframework.http.server.ServletServerHttpRequest;\n+import org.springframework.util.ClassUtils;\n import org.springframework.util.StringUtils;\n import org.springframework.util.TypeUtils;\n import org.springframework.web.bind.annotation.ControllerAdvice;\n@@ -74,8 +84,6 @@ import com.fasterxml.jackson.annotation.JsonUnwrapped;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n \n-import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;\n-\n /**\n  * Configuration for hypermedia in HTTP endpoints.\n  *\n@@ -128,7 +136,7 @@ public class EndpointWebMvcHypermediaManagementContextConfiguration {\n \t@Configuration("EndpointHypermediaAutoConfiguration.MissingResourceCondition")\n \t@ConditionalOnResource(resources = "classpath:/META-INF/spring-data-rest/hal-browser/index.html")\n \tprotected static class MissingSpringDataRestResourceCondition extends\n-\t\t\tSpringBootCondition {\n+\tSpringBootCondition {\n \n \t\t@Override\n \t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n@@ -149,12 +157,106 @@ public class EndpointWebMvcHypermediaManagementContextConfiguration {\n \t@ConditionalOnProperty(value = "endpoints.links.enabled", matchIfMissing = true)\n \tpublic static class LinksConfiguration {\n \n+\t\t@Autowired\n+\t\tprivate ListableBeanFactory beanFactory;\n+\n+\t\t@Autowired\n+\t\tprivate ManagementServerProperties management;\n+\n \t\t@Bean\n+\t\t@Conditional(NotSpringDataRestHomePageCondition.class)\n \t\tpublic LinksMvcEndpoint linksMvcEndpoint(ResourceProperties resources) {\n-\t\t\tString defaultPath = (resources.getWelcomePage() != null ? "/links" : "");\n+\t\t\tString defaultPath = getDefaultPath(resources);\n \t\t\treturn new LinksMvcEndpoint(defaultPath);\n \t\t}\n \n+\t\tprivate String getDefaultPath(ResourceProperties resources) {\n+\t\t\treturn resources.getWelcomePage() != null ? "/links" : "";\n+\t\t}\n+\n+\t\tprivate static class NotSpringDataRestHomePageCondition extends\n+\t\tSpringBootCondition {\n+\n+\t\t\t@Override\n+\t\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n+\t\t\t\t\tAnnotatedTypeMetadata metadata) {\n+\t\t\t\tif (!ClassUtils\n+\t\t\t\t\t\t.isPresent(\n+\t\t\t\t\t\t\t\t"org.springframework.data.rest.core.config.RepositoryRestConfiguration",\n+\t\t\t\t\t\t\t\tnull)) {\n+\t\t\t\t\treturn ConditionOutcome.match("Spring Data REST is not present");\n+\t\t\t\t}\n+\t\t\t\tClass<?> type = ClassUtils\n+\t\t\t\t\t\t.resolveClassName(\n+\t\t\t\t\t\t\t\t"org.springframework.data.rest.core.config.RepositoryRestConfiguration",\n+\t\t\t\t\t\t\t\tnull);\n+\t\t\t\tConfigurableListableBeanFactory beanFactory = context.getBeanFactory();\n+\t\t\t\tif (beanFactory.getBeanNamesForType(type, true, false).length == 0) {\n+\t\t\t\t\treturn ConditionOutcome.match("Spring Data REST is not configured");\n+\t\t\t\t}\n+\t\t\t\tEnvironment environment = context.getEnvironment();\n+\t\t\t\tString path = getProperty(environment, "management.", "contextPath");\n+\t\t\t\tif (path == null\n+\t\t\t\t\t\t&& hasCustomBeanDefinition(beanFactory,\n+\t\t\t\t\t\t\t\tManagementServerProperties.class,\n+\t\t\t\t\t\t\t\tManagementServerPropertiesAutoConfiguration.class)) {\n+\t\t\t\t\tManagementServerProperties bean = beanFactory\n+\t\t\t\t\t\t\t.getBean(ManagementServerProperties.class);\n+\t\t\t\t\tpath = bean.getContextPath();\n+\t\t\t\t}\n+\t\t\t\tif (isHome(path)) {\n+\t\t\t\t\tpath = getProperty(environment, "endpoints.links.", "path");\n+\t\t\t\t\tif (isHome(path)) {\n+\t\t\t\t\t\treturn ConditionOutcome\n+\t\t\t\t\t\t\t\t.noMatch("Management context path is home and so is links path");\n+\t\t\t\t\t}\n+\t\t\t\t\telse {\n+\t\t\t\t\t\treturn ConditionOutcome\n+\t\t\t\t\t\t\t\t.match("Management context path is home but links path is not: \'"\n+\t\t\t\t\t\t\t\t\t\t+ path + "\'");\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\t// N.B. we don\'t cover the case where the user has Spring Data REST\n+\t\t\t\t\t// but changes *its* home page - you\'d have to instantiate the\n+\t\t\t\t\t// RepositoryRestConfiguration and look at it\'s basePath for that.\n+\t\t\t\t\treturn ConditionOutcome\n+\t\t\t\t\t\t\t.match("Management context path is not home: \'" + path + "\'");\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tprivate static boolean isHome(String path) {\n+\t\t\t\treturn path == null || "".equals(path) || "/".equals(path);\n+\t\t\t}\n+\n+\t\t\tprivate static String getProperty(Environment environment, String prefix,\n+\t\t\t\t\tString name) {\n+\t\t\t\tRelaxedPropertyResolver resolver = new RelaxedPropertyResolver(\n+\t\t\t\t\t\tenvironment, prefix);\n+\t\t\t\treturn resolver.getProperty(name, String.class);\n+\t\t\t}\n+\n+\t\t\tprivate static <T> boolean hasCustomBeanDefinition(\n+\t\t\t\t\tConfigurableListableBeanFactory beanFactory, Class<T> type,\n+\t\t\t\t\tClass<?> configClass) {\n+\t\t\t\tString[] names = beanFactory.getBeanNamesForType(type, true, false);\n+\t\t\t\tif (names == null || names.length != 1) {\n+\t\t\t\t\treturn false;\n+\t\t\t\t}\n+\t\t\t\tBeanDefinition definition = beanFactory.getBeanDefinition(names[0]);\n+\t\t\t\tif (definition instanceof AnnotatedBeanDefinition) {\n+\t\t\t\t\tMethodMetadata factoryMethodMetadata = ((AnnotatedBeanDefinition) definition)\n+\t\t\t\t\t\t\t.getFactoryMethodMetadata();\n+\t\t\t\t\tif (factoryMethodMetadata != null) {\n+\t\t\t\t\t\tString className = factoryMethodMetadata.getDeclaringClassName();\n+\t\t\t\t\t\treturn !configClass.getName().equals(className);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\treturn true;\n+\t\t\t}\n+\n+\t\t}\n+\n \t\t/**\n \t\t * Controller advice that adds links to the home page and/or the management\n \t\t * context path. The home page is enhanced if it is composed already of a\n@@ -166,7 +268,7 @@ public class EndpointWebMvcHypermediaManagementContextConfiguration {\n \t\t\t@Autowired\n \t\t\tprivate MvcEndpoints endpoints;\n \n-\t\t\t@Autowired\n+\t\t\t@Autowired(required = false)\n \t\t\tprivate LinksMvcEndpoint linksEndpoint;\n \n \t\t\t@Autowired\n@@ -200,7 +302,7 @@ public class EndpointWebMvcHypermediaManagementContextConfiguration {\n \t\t\tpublic Object beforeBodyWrite(Object body, MethodParameter returnType,\n \t\t\t\t\tMediaType selectedContentType,\n \t\t\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType,\n-\t\t\t\t\tServerHttpRequest request, ServerHttpResponse response) {\n+\t\t\t\t\t\t\tServerHttpRequest request, ServerHttpResponse response) {\n \t\t\t\tif (request instanceof ServletServerHttpRequest) {\n \t\t\t\t\tbeforeBodyWrite(body, (ServletServerHttpRequest) request);\n \t\t\t\t}\n@@ -217,8 +319,8 @@ public class EndpointWebMvcHypermediaManagementContextConfiguration {\n \t\t\t\t\t\tif (isHomePage(path) && hasManagementPath()) {\n \t\t\t\t\t\t\tString rel = this.management.getContextPath().substring(1);\n \t\t\t\t\t\t\tresource.add(linkTo(\n-\t\t\t\t\t\t\t\t\tEndpointWebMvcHypermediaManagementContextConfiguration.class).slash(\n-\t\t\t\t\t\t\t\t\tthis.management.getContextPath()).withRel(rel));\n+\t\t\t\t\t\t\t\t\tEndpointWebMvcHypermediaManagementContextConfiguration.class)\n+\t\t\t\t\t\t\t\t\t.slash(this.management.getContextPath()).withRel(rel));\n \t\t\t\t\t\t}\n \t\t\t\t\t\telse {\n \t\t\t\t\t\t\tthis.linksEnhancer.addEndpointLinks(resource, "");\n@@ -236,8 +338,9 @@ public class EndpointWebMvcHypermediaManagementContextConfiguration {\n \t\t\t}\n \n \t\t\tprivate boolean isLinksPath(String path) {\n-\t\t\t\treturn (this.management.getContextPath() + this.linksEndpoint.getPath())\n-\t\t\t\t\t\t.equals(path);\n+\t\t\t\treturn this.linksEndpoint != null\n+\t\t\t\t\t\t&& (this.management.getContextPath() + this.linksEndpoint\n+\t\t\t\t\t\t\t\t.getPath()).equals(path);\n \t\t\t}\n \n \t\t\tprivate boolean isHomePage(String path) {\n@@ -280,7 +383,7 @@ public class EndpointWebMvcHypermediaManagementContextConfiguration {\n \t\t\tpublic Object beforeBodyWrite(Object body, MethodParameter returnType,\n \t\t\t\t\tMediaType selectedContentType,\n \t\t\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType,\n-\t\t\t\t\tServerHttpRequest request, ServerHttpResponse response) {\n+\t\t\t\t\t\t\tServerHttpRequest request, ServerHttpResponse response) {\n \t\t\t\tif (request instanceof ServletServerHttpRequest) {\n \t\t\t\t\treturn beforeBodyWrite(body, returnType, selectedContentType,\n \t\t\t\t\t\t\tselectedConverterType, (ServletServerHttpRequest) request,\n@@ -292,7 +395,7 @@ public class EndpointWebMvcHypermediaManagementContextConfiguration {\n \t\t\tprivate Object beforeBodyWrite(Object body, MethodParameter returnType,\n \t\t\t\t\tMediaType selectedContentType,\n \t\t\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType,\n-\t\t\t\t\tServletServerHttpRequest request, ServerHttpResponse response) {\n+\t\t\t\t\t\t\tServletServerHttpRequest request, ServerHttpResponse response) {\n \t\t\t\tif (body == null || body instanceof Resource) {\n \t\t\t\t\t// Assume it already was handled or it already has its links\n \t\t\t\t\treturn body;\n@@ -317,7 +420,7 @@ public class EndpointWebMvcHypermediaManagementContextConfiguration {\n \t\t\t@SuppressWarnings("unchecked")\n \t\t\tprivate HttpMessageConverter<Object> findConverter(\n \t\t\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType,\n-\t\t\t\t\tMediaType mediaType) {\n+\t\t\t\t\t\t\tMediaType mediaType) {\n \t\t\t\tif (this.converterCache.containsKey(mediaType)) {\n \t\t\t\t\treturn (HttpMessageConverter<Object>) this.converterCache\n \t\t\t\t\t\t\t.get(mediaType);\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;\n\nimport java.io.IOException;\nimport java.lang.reflect.Type;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport javax.annotation.PostConstruct;\n\nimport org.springframework.beans.factory.ListableBeanFactory;\nimport org.springframework.beans.factory.annotation.AnnotatedBeanDefinition;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.config.BeanDefinition;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.boot.actuate.endpoint.mvc.ActuatorDocsEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.HalBrowserEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.HypermediaDisabled;\nimport org.springframework.boot.actuate.endpoint.mvc.LinksMvcEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.MvcEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnResource;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.autoconfigure.web.HttpMessageConverters;\nimport org.springframework.boot.autoconfigure.web.ResourceProperties;\nimport org.springframework.boot.autoconfigure.web.ServerProperties;\nimport org.springframework.boot.bind.RelaxedPropertyResolver;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.MethodParameter;\nimport org.springframework.core.annotation.AnnotationUtils;\nimport org.springframework.core.env.Environment;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.core.type.MethodMetadata;\nimport org.springframework.hateoas.Link;\nimport org.springframework.hateoas.Resource;\nimport org.springframework.hateoas.ResourceSupport;\nimport org.springframework.hateoas.UriTemplate;\nimport org.springframework.hateoas.hal.CurieProvider;\nimport org.springframework.hateoas.hal.DefaultCurieProvider;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.http.converter.HttpMessageNotWritableException;\nimport org.springframework.http.server.ServerHttpRequest;\nimport org.springframework.http.server.ServerHttpResponse;\nimport org.springframework.http.server.ServletServerHttpRequest;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.StringUtils;\nimport org.springframework.util.TypeUtils;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.servlet.HandlerMapping;\nimport org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice;\n\nimport com.fasterxml.jackson.annotation.JsonAnyGetter;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.annotation.JsonUnwrapped;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n\n/**\n * Configuration for hypermedia in HTTP endpoints.\n *\n * @author Dave Syer\n * @since 1.3.0\n */\n@ManagementContextConfiguration\n@ConditionalOnClass(Link.class)\n@ConditionalOnWebApplication\n@ConditionalOnBean(HttpMessageConverters.class)\n@ConditionalOnProperty(value = "endpoints.enabled", matchIfMissing = true)\n@EnableConfigurationProperties(ResourceProperties.class)\npublic class EndpointWebMvcHypermediaManagementContextConfiguration {\n\n\t@Bean\n\t@ConditionalOnProperty(value = "endpoints.hal.enabled", matchIfMissing = true)\n\t@ConditionalOnResource(resources = "classpath:/META-INF/resources/webjars/hal-browser/b7669f1-1")\n\t@Conditional(MissingSpringDataRestResourceCondition.class)\n\tpublic HalBrowserEndpoint halBrowserMvcEndpoint(\n\t\t\tManagementServerProperties management, ResourceProperties resources) {\n\t\treturn new HalBrowserEndpoint(management,\n\t\t\t\tresources.getWelcomePage() != null ? "/hal" : "");\n\t}\n\n\t@Bean\n\t@ConditionalOnProperty(value = "endpoints.docs.enabled", matchIfMissing = true)\n\t@ConditionalOnResource(resources = "classpath:/META-INF/resources/spring-boot-actuator/docs/index.html")\n\tpublic ActuatorDocsEndpoint actuatorDocsEndpoint(ManagementServerProperties management) {\n\t\treturn new ActuatorDocsEndpoint(management);\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(ActuatorDocsEndpoint.class)\n\t@ConditionalOnMissingBean(CurieProvider.class)\n\t@ConditionalOnProperty(value = "endpoints.docs.curies.enabled", matchIfMissing = false)\n\tpublic DefaultCurieProvider curieProvider(ServerProperties server,\n\t\t\tManagementServerProperties management, ActuatorDocsEndpoint endpoint) {\n\t\tString path = management.getContextPath() + endpoint.getPath()\n\t\t\t\t+ "/#spring_boot_actuator__{rel}";\n\t\tif (server.getPort() == management.getPort() && management.getPort() != null\n\t\t\t\t&& management.getPort() != 0) {\n\t\t\tpath = server.getPath(path);\n\t\t}\n\t\treturn new DefaultCurieProvider("boot", new UriTemplate(path));\n\t}\n\n\t/**\n\t * {@link SpringBootCondition} to detect the Spring Data REST HAL browser.\n\t */\n\t@Configuration("EndpointHypermediaAutoConfiguration.MissingResourceCondition")\n\t@ConditionalOnResource(resources = "classpath:/META-INF/spring-data-rest/hal-browser/index.html")\n\tprotected static class MissingSpringDataRestResourceCondition extends\n\tSpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tif (context.getRegistry().containsBeanDefinition(\n\t\t\t\t\t"EndpointHypermediaAutoConfiguration.MissingResourceCondition")) {\n\t\t\t\treturn ConditionOutcome.noMatch("Spring Data REST HAL browser found");\n\t\t\t}\n\t\t\treturn ConditionOutcome.match("Spring Data REST HAL browser not found");\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Configuration for Endpoint links.\n\t */\n\t@ConditionalOnProperty(value = "endpoints.links.enabled", matchIfMissing = true)\n\tpublic static class LinksConfiguration {\n\n\t\t@Autowired\n\t\tprivate ListableBeanFactory beanFactory;\n\n\t\t@Autowired\n\t\tprivate ManagementServerProperties management;\n\n\t\t@Bean\n\t\t@Conditional(NotSpringDataRestHomePageCondition.class)\n\t\tpublic LinksMvcEndpoint linksMvcEndpoint(ResourceProperties resources) {\n\t\t\tString defaultPath = getDefaultPath(resources);\n\t\t\treturn new LinksMvcEndpoint(defaultPath);\n\t\t}\n\n\t\tprivate String getDefaultPath(ResourceProperties resources) {\n\t\t\treturn resources.getWelcomePage() != null ? "/links" : "";\n\t\t}\n\n\t\tprivate static class NotSpringDataRestHomePageCondition extends\n\t\tSpringBootCondition {\n\n\t\t\t@Override\n\t\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\t\tif (!ClassUtils\n\t\t\t\t\t\t.isPresent(\n\t\t\t\t\t\t\t\t"org.springframework.data.rest.core.config.RepositoryRestConfiguration",\n\t\t\t\t\t\t\t\tnull)) {\n\t\t\t\t\treturn ConditionOutcome.match("Spring Data REST is not present");\n\t\t\t\t}\n\t\t\t\tClass<?> type = ClassUtils\n\t\t\t\t\t\t.resolveClassName(\n\t\t\t\t\t\t\t\t"org.springframework.data.rest.core.config.RepositoryRestConfiguration",\n\t\t\t\t\t\t\t\tnull);\n\t\t\t\tConfigurableListableBeanFactory beanFactory = context.getBeanFactory();\n\t\t\t\tif (beanFactory.getBeanNamesForType(type, true, false).length == 0) {\n\t\t\t\t\treturn ConditionOutcome.match("Spring Data REST is not configured");\n\t\t\t\t}\n\t\t\t\tEnvironment environment = context.getEnvironment();\n\t\t\t\tString path = getProperty(environment, "management.", "contextPath");\n\t\t\t\tif (path == null\n\t\t\t\t\t\t&& hasCustomBeanDefinition(beanFactory,\n\t\t\t\t\t\t\t\tManagementServerProperties.class,\n\t\t\t\t\t\t\t\tManagementServerPropertiesAutoConfiguration.class)) {\n\t\t\t\t\tManagementServerProperties bean = beanFactory\n\t\t\t\t\t\t\t.getBean(ManagementServerProperties.class);\n\t\t\t\t\tpath = bean.getContextPath();\n\t\t\t\t}\n\t\t\t\tif (isHome(path)) {\n\t\t\t\t\tpath = getProperty(environment, "endpoints.links.", "path");\n\t\t\t\t\tif (isHome(path)) {\n\t\t\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t\t\t.noMatch("Management context path is home and so is links path");\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t\t\t.match("Management context path is home but links path is not: \'"\n\t\t\t\t\t\t\t\t\t\t+ path + "\'");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// N.B. we don\'t cover the case where the user has Spring Data REST\n\t\t\t\t\t// but changes *its* home page - you\'d have to instantiate the\n\t\t\t\t\t// RepositoryRestConfiguration and look at it\'s basePath for that.\n\t\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t\t.match("Management context path is not home: \'" + path + "\'");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprivate static boolean isHome(String path) {\n\t\t\t\treturn path == null || "".equals(path) || "/".equals(path);\n\t\t\t}\n\n\t\t\tprivate static String getProperty(Environment environment, String prefix,\n\t\t\t\t\tString name) {\n\t\t\t\tRelaxedPropertyResolver resolver = new RelaxedPropertyResolver(\n\t\t\t\t\t\tenvironment, prefix);\n\t\t\t\treturn resolver.getProperty(name, String.class);\n\t\t\t}\n\n\t\t\tprivate static <T> boolean hasCustomBeanDefinition(\n\t\t\t\t\tConfigurableListableBeanFactory beanFactory, Class<T> type,\n\t\t\t\t\tClass<?> configClass) {\n\t\t\t\tString[] names = beanFactory.getBeanNamesForType(type, true, false);\n\t\t\t\tif (names == null || names.length != 1) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tBeanDefinition definition = beanFactory.getBeanDefinition(names[0]);\n\t\t\t\tif (definition instanceof AnnotatedBeanDefinition) {\n\t\t\t\t\tMethodMetadata factoryMethodMetadata = ((AnnotatedBeanDefinition) definition)\n\t\t\t\t\t\t\t.getFactoryMethodMetadata();\n\t\t\t\t\tif (factoryMethodMetadata != null) {\n\t\t\t\t\t\tString className = factoryMethodMetadata.getDeclaringClassName();\n\t\t\t\t\t\treturn !configClass.getName().equals(className);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t}\n\n\t\t/**\n\t\t * Controller advice that adds links to the home page and/or the management\n\t\t * context path. The home page is enhanced if it is composed already of a\n\t\t * {@link ResourceSupport} (e.g. when using Spring Data REST).\n\t\t */\n\t\t@ControllerAdvice\n\t\tpublic static class HomePageLinksAdvice implements ResponseBodyAdvice<Object> {\n\n\t\t\t@Autowired\n\t\t\tprivate MvcEndpoints endpoints;\n\n\t\t\t@Autowired(required = false)\n\t\t\tprivate LinksMvcEndpoint linksEndpoint;\n\n\t\t\t@Autowired\n\t\t\tprivate ManagementServerProperties management;\n\n\t\t\tprivate LinksEnhancer linksEnhancer;\n\n\t\t\t@PostConstruct\n\t\t\tpublic void init() {\n\t\t\t\tthis.linksEnhancer = new LinksEnhancer(this.management.getContextPath(),\n\t\t\t\t\t\tthis.endpoints);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic boolean supports(MethodParameter returnType,\n\t\t\t\t\tClass<? extends HttpMessageConverter<?>> converterType) {\n\t\t\t\tClass<?> controllerType = returnType.getDeclaringClass();\n\t\t\t\tif (!LinksMvcEndpoint.class.isAssignableFrom(controllerType)\n\t\t\t\t\t\t&& MvcEndpoint.class.isAssignableFrom(controllerType)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturnType.increaseNestingLevel();\n\t\t\t\tType nestedType = returnType.getNestedGenericParameterType();\n\t\t\t\treturnType.decreaseNestingLevel();\n\t\t\t\treturn ResourceSupport.class.isAssignableFrom(returnType\n\t\t\t\t\t\t.getParameterType())\n\t\t\t\t\t\t|| TypeUtils.isAssignable(ResourceSupport.class, nestedType);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic Object beforeBodyWrite(Object body, MethodParameter returnType,\n\t\t\t\t\tMediaType selectedContentType,\n\t\t\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType,\n\t\t\t\t\t\t\tServerHttpRequest request, ServerHttpResponse response) {\n\t\t\t\tif (request instanceof ServletServerHttpRequest) {\n\t\t\t\t\tbeforeBodyWrite(body, (ServletServerHttpRequest) request);\n\t\t\t\t}\n\t\t\t\treturn body;\n\t\t\t}\n\n\t\t\tprivate void beforeBodyWrite(Object body, ServletServerHttpRequest request) {\n\t\t\t\tObject pattern = request.getServletRequest().getAttribute(\n\t\t\t\t\t\tHandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE);\n\t\t\t\tif (pattern != null) {\n\t\t\t\t\tString path = pattern.toString();\n\t\t\t\t\tif (isHomePage(path) || isManagementPath(path) || isLinksPath(path)) {\n\t\t\t\t\t\tResourceSupport resource = (ResourceSupport) body;\n\t\t\t\t\t\tif (isHomePage(path) && hasManagementPath()) {\n\t\t\t\t\t\t\tString rel = this.management.getContextPath().substring(1);\n\t\t\t\t\t\t\tresource.add(linkTo(\n\t\t\t\t\t\t\t\t\tEndpointWebMvcHypermediaManagementContextConfiguration.class)\n\t\t\t\t\t\t\t\t\t.slash(this.management.getContextPath()).withRel(rel));\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tthis.linksEnhancer.addEndpointLinks(resource, "");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprivate boolean hasManagementPath() {\n\t\t\t\treturn StringUtils.hasText(this.management.getContextPath());\n\t\t\t}\n\n\t\t\tprivate boolean isManagementPath(String path) {\n\t\t\t\treturn this.management.getContextPath().equals(path);\n\t\t\t}\n\n\t\t\tprivate boolean isLinksPath(String path) {\n\t\t\t\treturn this.linksEndpoint != null\n\t\t\t\t\t\t&& (this.management.getContextPath() + this.linksEndpoint\n\t\t\t\t\t\t\t\t.getPath()).equals(path);\n\t\t\t}\n\n\t\t\tprivate boolean isHomePage(String path) {\n\t\t\t\treturn "".equals(path) || "/".equals(path);\n\t\t\t}\n\n\t\t}\n\n\t\t/**\n\t\t * Controller advice that adds links to the existing Actuator endpoints. By\n\t\t * default all the top-level resources are enhanced with a "self" link. Those\n\t\t * resources that could not be enhanced (e.g. "/env/{name}") because their values\n\t\t * are "primitive" are ignored. Those that have values of type Collection (e.g.\n\t\t * /trace) are transformed in to maps, and the original collection value is added\n\t\t * with a key equal to the endpoint name.\n\t\t */\n\t\t@ControllerAdvice(assignableTypes = MvcEndpoint.class)\n\t\tpublic static class MvcEndpointAdvice implements ResponseBodyAdvice<Object> {\n\n\t\t\t@Autowired\n\t\t\tprivate ManagementServerProperties management;\n\n\t\t\t@Autowired\n\t\t\tprivate HttpMessageConverters converters;\n\n\t\t\tprivate Map<MediaType, HttpMessageConverter<?>> converterCache = new ConcurrentHashMap<MediaType, HttpMessageConverter<?>>();\n\n\t\t\t@Autowired\n\t\t\tprivate ObjectMapper mapper;\n\n\t\t\t@Override\n\t\t\tpublic boolean supports(MethodParameter returnType,\n\t\t\t\t\tClass<? extends HttpMessageConverter<?>> converterType) {\n\t\t\t\tClass<?> controllerType = returnType.getDeclaringClass();\n\t\t\t\treturn !LinksMvcEndpoint.class.isAssignableFrom(controllerType)\n\t\t\t\t\t\t&& !HalBrowserEndpoint.class.isAssignableFrom(controllerType);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic Object beforeBodyWrite(Object body, MethodParameter returnType,\n\t\t\t\t\tMediaType selectedContentType,\n\t\t\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType,\n\t\t\t\t\t\t\tServerHttpRequest request, ServerHttpResponse response) {\n\t\t\t\tif (request instanceof ServletServerHttpRequest) {\n\t\t\t\t\treturn beforeBodyWrite(body, returnType, selectedContentType,\n\t\t\t\t\t\t\tselectedConverterType, (ServletServerHttpRequest) request,\n\t\t\t\t\t\t\tresponse);\n\t\t\t\t}\n\t\t\t\treturn body;\n\t\t\t}\n\n\t\t\tprivate Object beforeBodyWrite(Object body, MethodParameter returnType,\n\t\t\t\t\tMediaType selectedContentType,\n\t\t\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType,\n\t\t\t\t\t\t\tServletServerHttpRequest request, ServerHttpResponse response) {\n\t\t\t\tif (body == null || body instanceof Resource) {\n\t\t\t\t\t// Assume it already was handled or it already has its links\n\t\t\t\t\treturn body;\n\t\t\t\t}\n\t\t\t\tHttpMessageConverter<Object> converter = findConverter(\n\t\t\t\t\t\tselectedConverterType, selectedContentType);\n\t\t\t\tif (converter == null || isHypermediaDisabled(returnType)) {\n\t\t\t\t\t// Not a resource that can be enhanced with a link\n\t\t\t\t\treturn body;\n\t\t\t\t}\n\t\t\t\tString path = getPath(request);\n\t\t\t\ttry {\n\t\t\t\t\tconverter.write(new EndpointResource(body, path),\n\t\t\t\t\t\t\tselectedContentType, response);\n\t\t\t\t}\n\t\t\t\tcatch (IOException ex) {\n\t\t\t\t\tthrow new HttpMessageNotWritableException("Cannot write response", ex);\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t@SuppressWarnings("unchecked")\n\t\t\tprivate HttpMessageConverter<Object> findConverter(\n\t\t\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType,\n\t\t\t\t\t\t\tMediaType mediaType) {\n\t\t\t\tif (this.converterCache.containsKey(mediaType)) {\n\t\t\t\t\treturn (HttpMessageConverter<Object>) this.converterCache\n\t\t\t\t\t\t\t.get(mediaType);\n\t\t\t\t}\n\t\t\t\tfor (HttpMessageConverter<?> converter : this.converters) {\n\t\t\t\t\tif (selectedConverterType.isAssignableFrom(converter.getClass())\n\t\t\t\t\t\t\t&& converter.canWrite(EndpointResource.class, mediaType)) {\n\t\t\t\t\t\tthis.converterCache.put(mediaType, converter);\n\t\t\t\t\t\treturn (HttpMessageConverter<Object>) converter;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tprivate boolean isHypermediaDisabled(MethodParameter returnType) {\n\t\t\t\treturn AnnotationUtils.findAnnotation(returnType.getMethod(),\n\t\t\t\t\t\tHypermediaDisabled.class) != null\n\t\t\t\t\t\t|| AnnotationUtils.findAnnotation(returnType.getMethod()\n\t\t\t\t\t\t\t\t.getDeclaringClass(), HypermediaDisabled.class) != null;\n\t\t\t}\n\n\t\t\tprivate String getPath(ServletServerHttpRequest request) {\n\t\t\t\tString path = (String) request.getServletRequest().getAttribute(\n\t\t\t\t\t\tHandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE);\n\t\t\t\treturn (path == null ? "" : path);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t@JsonInclude(content = Include.NON_NULL)\n\t@JacksonXmlRootElement(localName = "resource")\n\tprivate static class EndpointResource extends ResourceSupport {\n\n\t\tprivate Object content;\n\n\t\tprivate Map<String, Object> embedded;\n\n\t\t@SuppressWarnings("unchecked")\n\t\tpublic EndpointResource(Object content, String path) {\n\t\t\tthis.content = content instanceof Map ? null : content;\n\t\t\tthis.embedded = (Map<String, Object>) (this.content == null ? content : null);\n\t\t\tadd(linkTo(Object.class).slash(path).withSelfRel());\n\t\t}\n\n\t\t@JsonUnwrapped\n\t\tpublic Object getContent() {\n\t\t\treturn this.content;\n\t\t}\n\n\t\t@JsonAnyGetter\n\t\tpublic Map<String, Object> getEmbedded() {\n\t\t\treturn this.embedded;\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport java.io.IOException;\nimport java.lang.reflect.Type;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport javax.annotation.PostConstruct;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuate.endpoint.mvc.ActuatorDocsEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.HalBrowserEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.HypermediaDisabled;\nimport org.springframework.boot.actuate.endpoint.mvc.LinksMvcEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.MvcEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnResource;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.autoconfigure.web.HttpMessageConverters;\nimport org.springframework.boot.autoconfigure.web.ResourceProperties;\nimport org.springframework.boot.autoconfigure.web.ServerProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.MethodParameter;\nimport org.springframework.core.annotation.AnnotationUtils;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.hateoas.Link;\nimport org.springframework.hateoas.Resource;\nimport org.springframework.hateoas.ResourceSupport;\nimport org.springframework.hateoas.UriTemplate;\nimport org.springframework.hateoas.hal.CurieProvider;\nimport org.springframework.hateoas.hal.DefaultCurieProvider;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.http.converter.HttpMessageNotWritableException;\nimport org.springframework.http.server.ServerHttpRequest;\nimport org.springframework.http.server.ServerHttpResponse;\nimport org.springframework.http.server.ServletServerHttpRequest;\nimport org.springframework.util.StringUtils;\nimport org.springframework.util.TypeUtils;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.servlet.HandlerMapping;\nimport org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice;\n\nimport com.fasterxml.jackson.annotation.JsonAnyGetter;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.annotation.JsonUnwrapped;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n\nimport static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;\n\n/**\n * Configuration for hypermedia in HTTP endpoints.\n *\n * @author Dave Syer\n * @since 1.3.0\n */\n@ManagementContextConfiguration\n@ConditionalOnClass(Link.class)\n@ConditionalOnWebApplication\n@ConditionalOnBean(HttpMessageConverters.class)\n@ConditionalOnProperty(value = "endpoints.enabled", matchIfMissing = true)\n@EnableConfigurationProperties(ResourceProperties.class)\npublic class EndpointWebMvcHypermediaManagementContextConfiguration {\n\n\t@Bean\n\t@ConditionalOnProperty(value = "endpoints.hal.enabled", matchIfMissing = true)\n\t@ConditionalOnResource(resources = "classpath:/META-INF/resources/webjars/hal-browser/b7669f1-1")\n\t@Conditional(MissingSpringDataRestResourceCondition.class)\n\tpublic HalBrowserEndpoint halBrowserMvcEndpoint(\n\t\t\tManagementServerProperties management, ResourceProperties resources) {\n\t\treturn new HalBrowserEndpoint(management,\n\t\t\t\tresources.getWelcomePage() != null ? "/hal" : "");\n\t}\n\n\t@Bean\n\t@ConditionalOnProperty(value = "endpoints.docs.enabled", matchIfMissing = true)\n\t@ConditionalOnResource(resources = "classpath:/META-INF/resources/spring-boot-actuator/docs/index.html")\n\tpublic ActuatorDocsEndpoint actuatorDocsEndpoint(ManagementServerProperties management) {\n\t\treturn new ActuatorDocsEndpoint(management);\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(ActuatorDocsEndpoint.class)\n\t@ConditionalOnMissingBean(CurieProvider.class)\n\t@ConditionalOnProperty(value = "endpoints.docs.curies.enabled", matchIfMissing = false)\n\tpublic DefaultCurieProvider curieProvider(ServerProperties server,\n\t\t\tManagementServerProperties management, ActuatorDocsEndpoint endpoint) {\n\t\tString path = management.getContextPath() + endpoint.getPath()\n\t\t\t\t+ "/#spring_boot_actuator__{rel}";\n\t\tif (server.getPort() == management.getPort() && management.getPort() != null\n\t\t\t\t&& management.getPort() != 0) {\n\t\t\tpath = server.getPath(path);\n\t\t}\n\t\treturn new DefaultCurieProvider("boot", new UriTemplate(path));\n\t}\n\n\t/**\n\t * {@link SpringBootCondition} to detect the Spring Data REST HAL browser.\n\t */\n\t@Configuration("EndpointHypermediaAutoConfiguration.MissingResourceCondition")\n\t@ConditionalOnResource(resources = "classpath:/META-INF/spring-data-rest/hal-browser/index.html")\n\tprotected static class MissingSpringDataRestResourceCondition extends\n\t\t\tSpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tif (context.getRegistry().containsBeanDefinition(\n\t\t\t\t\t"EndpointHypermediaAutoConfiguration.MissingResourceCondition")) {\n\t\t\t\treturn ConditionOutcome.noMatch("Spring Data REST HAL browser found");\n\t\t\t}\n\t\t\treturn ConditionOutcome.match("Spring Data REST HAL browser not found");\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Configuration for Endpoint links.\n\t */\n\t@ConditionalOnProperty(value = "endpoints.links.enabled", matchIfMissing = true)\n\tpublic static class LinksConfiguration {\n\n\t\t@Bean\n\t\tpublic LinksMvcEndpoint linksMvcEndpoint(ResourceProperties resources) {\n\t\t\tString defaultPath = (resources.getWelcomePage() != null ? "/links" : "");\n\t\t\treturn new LinksMvcEndpoint(defaultPath);\n\t\t}\n\n\t\t/**\n\t\t * Controller advice that adds links to the home page and/or the management\n\t\t * context path. The home page is enhanced if it is composed already of a\n\t\t * {@link ResourceSupport} (e.g. when using Spring Data REST).\n\t\t */\n\t\t@ControllerAdvice\n\t\tpublic static class HomePageLinksAdvice implements ResponseBodyAdvice<Object> {\n\n\t\t\t@Autowired\n\t\t\tprivate MvcEndpoints endpoints;\n\n\t\t\t@Autowired\n\t\t\tprivate LinksMvcEndpoint linksEndpoint;\n\n\t\t\t@Autowired\n\t\t\tprivate ManagementServerProperties management;\n\n\t\t\tprivate LinksEnhancer linksEnhancer;\n\n\t\t\t@PostConstruct\n\t\t\tpublic void init() {\n\t\t\t\tthis.linksEnhancer = new LinksEnhancer(this.management.getContextPath(),\n\t\t\t\t\t\tthis.endpoints);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic boolean supports(MethodParameter returnType,\n\t\t\t\t\tClass<? extends HttpMessageConverter<?>> converterType) {\n\t\t\t\tClass<?> controllerType = returnType.getDeclaringClass();\n\t\t\t\tif (!LinksMvcEndpoint.class.isAssignableFrom(controllerType)\n\t\t\t\t\t\t&& MvcEndpoint.class.isAssignableFrom(controllerType)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturnType.increaseNestingLevel();\n\t\t\t\tType nestedType = returnType.getNestedGenericParameterType();\n\t\t\t\treturnType.decreaseNestingLevel();\n\t\t\t\treturn ResourceSupport.class.isAssignableFrom(returnType\n\t\t\t\t\t\t.getParameterType())\n\t\t\t\t\t\t|| TypeUtils.isAssignable(ResourceSupport.class, nestedType);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic Object beforeBodyWrite(Object body, MethodParameter returnType,\n\t\t\t\t\tMediaType selectedContentType,\n\t\t\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType,\n\t\t\t\t\tServerHttpRequest request, ServerHttpResponse response) {\n\t\t\t\tif (request instanceof ServletServerHttpRequest) {\n\t\t\t\t\tbeforeBodyWrite(body, (ServletServerHttpRequest) request);\n\t\t\t\t}\n\t\t\t\treturn body;\n\t\t\t}\n\n\t\t\tprivate void beforeBodyWrite(Object body, ServletServerHttpRequest request) {\n\t\t\t\tObject pattern = request.getServletRequest().getAttribute(\n\t\t\t\t\t\tHandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE);\n\t\t\t\tif (pattern != null) {\n\t\t\t\t\tString path = pattern.toString();\n\t\t\t\t\tif (isHomePage(path) || isManagementPath(path) || isLinksPath(path)) {\n\t\t\t\t\t\tResourceSupport resource = (ResourceSupport) body;\n\t\t\t\t\t\tif (isHomePage(path) && hasManagementPath()) {\n\t\t\t\t\t\t\tString rel = this.management.getContextPath().substring(1);\n\t\t\t\t\t\t\tresource.add(linkTo(\n\t\t\t\t\t\t\t\t\tEndpointWebMvcHypermediaManagementContextConfiguration.class).slash(\n\t\t\t\t\t\t\t\t\tthis.management.getContextPath()).withRel(rel));\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tthis.linksEnhancer.addEndpointLinks(resource, "");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprivate boolean hasManagementPath() {\n\t\t\t\treturn StringUtils.hasText(this.management.getContextPath());\n\t\t\t}\n\n\t\t\tprivate boolean isManagementPath(String path) {\n\t\t\t\treturn this.management.getContextPath().equals(path);\n\t\t\t}\n\n\t\t\tprivate boolean isLinksPath(String path) {\n\t\t\t\treturn (this.management.getContextPath() + this.linksEndpoint.getPath())\n\t\t\t\t\t\t.equals(path);\n\t\t\t}\n\n\t\t\tprivate boolean isHomePage(String path) {\n\t\t\t\treturn "".equals(path) || "/".equals(path);\n\t\t\t}\n\n\t\t}\n\n\t\t/**\n\t\t * Controller advice that adds links to the existing Actuator endpoints. By\n\t\t * default all the top-level resources are enhanced with a "self" link. Those\n\t\t * resources that could not be enhanced (e.g. "/env/{name}") because their values\n\t\t * are "primitive" are ignored. Those that have values of type Collection (e.g.\n\t\t * /trace) are transformed in to maps, and the original collection value is added\n\t\t * with a key equal to the endpoint name.\n\t\t */\n\t\t@ControllerAdvice(assignableTypes = MvcEndpoint.class)\n\t\tpublic static class MvcEndpointAdvice implements ResponseBodyAdvice<Object> {\n\n\t\t\t@Autowired\n\t\t\tprivate ManagementServerProperties management;\n\n\t\t\t@Autowired\n\t\t\tprivate HttpMessageConverters converters;\n\n\t\t\tprivate Map<MediaType, HttpMessageConverter<?>> converterCache = new ConcurrentHashMap<MediaType, HttpMessageConverter<?>>();\n\n\t\t\t@Autowired\n\t\t\tprivate ObjectMapper mapper;\n\n\t\t\t@Override\n\t\t\tpublic boolean supports(MethodParameter returnType,\n\t\t\t\t\tClass<? extends HttpMessageConverter<?>> converterType) {\n\t\t\t\tClass<?> controllerType = returnType.getDeclaringClass();\n\t\t\t\treturn !LinksMvcEndpoint.class.isAssignableFrom(controllerType)\n\t\t\t\t\t\t&& !HalBrowserEndpoint.class.isAssignableFrom(controllerType);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic Object beforeBodyWrite(Object body, MethodParameter returnType,\n\t\t\t\t\tMediaType selectedContentType,\n\t\t\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType,\n\t\t\t\t\tServerHttpRequest request, ServerHttpResponse response) {\n\t\t\t\tif (request instanceof ServletServerHttpRequest) {\n\t\t\t\t\treturn beforeBodyWrite(body, returnType, selectedContentType,\n\t\t\t\t\t\t\tselectedConverterType, (ServletServerHttpRequest) request,\n\t\t\t\t\t\t\tresponse);\n\t\t\t\t}\n\t\t\t\treturn body;\n\t\t\t}\n\n\t\t\tprivate Object beforeBodyWrite(Object body, MethodParameter returnType,\n\t\t\t\t\tMediaType selectedContentType,\n\t\t\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType,\n\t\t\t\t\tServletServerHttpRequest request, ServerHttpResponse response) {\n\t\t\t\tif (body == null || body instanceof Resource) {\n\t\t\t\t\t// Assume it already was handled or it already has its links\n\t\t\t\t\treturn body;\n\t\t\t\t}\n\t\t\t\tHttpMessageConverter<Object> converter = findConverter(\n\t\t\t\t\t\tselectedConverterType, selectedContentType);\n\t\t\t\tif (converter == null || isHypermediaDisabled(returnType)) {\n\t\t\t\t\t// Not a resource that can be enhanced with a link\n\t\t\t\t\treturn body;\n\t\t\t\t}\n\t\t\t\tString path = getPath(request);\n\t\t\t\ttry {\n\t\t\t\t\tconverter.write(new EndpointResource(body, path),\n\t\t\t\t\t\t\tselectedContentType, response);\n\t\t\t\t}\n\t\t\t\tcatch (IOException ex) {\n\t\t\t\t\tthrow new HttpMessageNotWritableException("Cannot write response", ex);\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t@SuppressWarnings("unchecked")\n\t\t\tprivate HttpMessageConverter<Object> findConverter(\n\t\t\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType,\n\t\t\t\t\tMediaType mediaType) {\n\t\t\t\tif (this.converterCache.containsKey(mediaType)) {\n\t\t\t\t\treturn (HttpMessageConverter<Object>) this.converterCache\n\t\t\t\t\t\t\t.get(mediaType);\n\t\t\t\t}\n\t\t\t\tfor (HttpMessageConverter<?> converter : this.converters) {\n\t\t\t\t\tif (selectedConverterType.isAssignableFrom(converter.getClass())\n\t\t\t\t\t\t\t&& converter.canWrite(EndpointResource.class, mediaType)) {\n\t\t\t\t\t\tthis.converterCache.put(mediaType, converter);\n\t\t\t\t\t\treturn (HttpMessageConverter<Object>) converter;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tprivate boolean isHypermediaDisabled(MethodParameter returnType) {\n\t\t\t\treturn AnnotationUtils.findAnnotation(returnType.getMethod(),\n\t\t\t\t\t\tHypermediaDisabled.class) != null\n\t\t\t\t\t\t|| AnnotationUtils.findAnnotation(returnType.getMethod()\n\t\t\t\t\t\t\t\t.getDeclaringClass(), HypermediaDisabled.class) != null;\n\t\t\t}\n\n\t\t\tprivate String getPath(ServletServerHttpRequest request) {\n\t\t\t\tString path = (String) request.getServletRequest().getAttribute(\n\t\t\t\t\t\tHandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE);\n\t\t\t\treturn (path == null ? "" : path);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t@JsonInclude(content = Include.NON_NULL)\n\t@JacksonXmlRootElement(localName = "resource")\n\tprivate static class EndpointResource extends ResourceSupport {\n\n\t\tprivate Object content;\n\n\t\tprivate Map<String, Object> embedded;\n\n\t\t@SuppressWarnings("unchecked")\n\t\tpublic EndpointResource(Object content, String path) {\n\t\t\tthis.content = content instanceof Map ? null : content;\n\t\t\tthis.embedded = (Map<String, Object>) (this.content == null ? content : null);\n\t\t\tadd(linkTo(Object.class).slash(path).withSelfRel());\n\t\t}\n\n\t\t@JsonUnwrapped\n\t\tpublic Object getContent() {\n\t\t\treturn this.content;\n\t\t}\n\n\t\t@JsonAnyGetter\n\t\tpublic Map<String, Object> getEmbedded() {\n\t\t\treturn this.embedded;\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
