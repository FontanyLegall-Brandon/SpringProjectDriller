{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -93,7 +93,6 @@ public class FreeMarkerAutoConfiguration {\n \t}\n \n \t@Configuration\n-\t@ConditionalOnClass(Servlet.class)\n \t@ConditionalOnNotWebApplication\n \tpublic static class FreeMarkerConfiguration implements EnvironmentAware {\n \n@@ -137,7 +136,7 @@ public class FreeMarkerAutoConfiguration {\n \t\t}\n \n \t\t@Bean\n-\t\t@ConditionalOnBean(FreeMarkerConfig.class)\n+\t\t@ConditionalOnBean(FreeMarkerConfigurer.class)\n \t\t@ConditionalOnMissingBean\n \t\tpublic freemarker.template.Configuration freemarkerConfiguration(\n \t\t\t\tFreeMarkerConfig configurer) {\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.freemarker;\n\nimport java.util.Map;\nimport java.util.Properties;\n\nimport javax.annotation.PostConstruct;\nimport javax.servlet.Servlet;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnNotWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.boot.bind.RelaxedPropertyResolver;\nimport org.springframework.context.EnvironmentAware;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.env.Environment;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean;\nimport org.springframework.util.Assert;\nimport org.springframework.web.servlet.view.freemarker.FreeMarkerConfig;\nimport org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer;\nimport org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for FreeMarker.\n * \n * @author Andy Wilkinson\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass(freemarker.template.Configuration.class)\n@AutoConfigureAfter(WebMvcAutoConfiguration.class)\npublic class FreeMarkerAutoConfiguration {\n\n\tpublic static final String DEFAULT_TEMPLATE_LOADER_PATH = "classpath:/templates/";\n\n\tpublic static final String DEFAULT_PREFIX = "";\n\n\tpublic static final String DEFAULT_SUFFIX = ".ftl";\n\n\t@Configuration\n\tpublic static class FreeMarkerConfigurerConfiguration implements EnvironmentAware {\n\n\t\t@Autowired\n\t\tprivate final ResourceLoader resourceLoader = new DefaultResourceLoader();\n\n\t\tprivate RelaxedPropertyResolver environment;\n\n\t\t@Override\n\t\tpublic void setEnvironment(Environment environment) {\n\t\t\tthis.environment = new RelaxedPropertyResolver(environment,\n\t\t\t\t\t"spring.freeMarker.");\n\t\t}\n\n\t\t@PostConstruct\n\t\tpublic void checkTemplateLocationExists() {\n\t\t\tBoolean checkTemplateLocation = this.environment.getProperty(\n\t\t\t\t\t"checkTemplateLocation", Boolean.class, true);\n\t\t\tif (checkTemplateLocation) {\n\t\t\t\tResource resource = this.resourceLoader.getResource(this.environment\n\t\t\t\t\t\t.getProperty("templateLoaderPath", DEFAULT_TEMPLATE_LOADER_PATH));\n\t\t\t\tAssert.state(resource.exists(), "Cannot find template location: "\n\t\t\t\t\t\t+ resource + " (please add some templates "\n\t\t\t\t\t\t+ "or check your FreeMarker configuration)");\n\t\t\t}\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnNotWebApplication\n\tpublic static class FreeMarkerConfiguration implements EnvironmentAware {\n\n\t\tprivate RelaxedPropertyResolver environment;\n\n\t\t@Override\n\t\tpublic void setEnvironment(Environment environment) {\n\t\t\tthis.environment = new RelaxedPropertyResolver(environment,\n\t\t\t\t\t"spring.freemarker.");\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic FreeMarkerConfigurationFactoryBean freeMarkerConfigurer() {\n\t\t\tFreeMarkerConfigurationFactoryBean freeMarkerConfigurer = new FreeMarkerConfigurationFactoryBean();\n\t\t\tfreeMarkerConfigurer.setTemplateLoaderPath(this.environment.getProperty(\n\t\t\t\t\t"templateLoaderPath", DEFAULT_TEMPLATE_LOADER_PATH));\n\t\t\tfreeMarkerConfigurer.setDefaultEncoding(this.environment.getProperty(\n\t\t\t\t\t"templateEncoding", "UTF-8"));\n\t\t\tMap<String, Object> settingsMap = this.environment\n\t\t\t\t\t.getSubProperties("settings.");\n\t\t\tProperties settings = new Properties();\n\t\t\tsettings.putAll(settingsMap);\n\t\t\tfreeMarkerConfigurer.setFreemarkerSettings(settings);\n\t\t\treturn freeMarkerConfigurer;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(Servlet.class)\n\t@ConditionalOnWebApplication\n\tpublic static class FreeMarkerViewResolverConfiguration implements EnvironmentAware {\n\n\t\tprivate RelaxedPropertyResolver environment;\n\n\t\t@Override\n\t\tpublic void setEnvironment(Environment environment) {\n\t\t\tthis.environment = new RelaxedPropertyResolver(environment,\n\t\t\t\t\t"spring.freemarker.");\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnBean(FreeMarkerConfigurer.class)\n\t\t@ConditionalOnMissingBean\n\t\tpublic freemarker.template.Configuration freemarkerConfiguration(\n\t\t\t\tFreeMarkerConfig configurer) {\n\t\t\treturn configurer.getConfiguration();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic FreeMarkerConfigurer freeMarkerConfigurer() {\n\t\t\tFreeMarkerConfigurer freeMarkerConfigurer = new FreeMarkerConfigurer();\n\t\t\tfreeMarkerConfigurer.setTemplateLoaderPath(this.environment.getProperty(\n\t\t\t\t\t"templateLoaderPath", DEFAULT_TEMPLATE_LOADER_PATH));\n\t\t\tfreeMarkerConfigurer.setDefaultEncoding(this.environment.getProperty(\n\t\t\t\t\t"templateEncoding", "UTF-8"));\n\t\t\tMap<String, Object> settingsMap = this.environment\n\t\t\t\t\t.getSubProperties("settings.");\n\t\t\tProperties settings = new Properties();\n\t\t\tsettings.putAll(settingsMap);\n\t\t\tfreeMarkerConfigurer.setFreemarkerSettings(settings);\n\t\t\treturn freeMarkerConfigurer;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "freeMarkerViewResolver")\n\t\tpublic FreeMarkerViewResolver freeMarkerViewResolver() {\n\t\t\tFreeMarkerViewResolver resolver = new FreeMarkerViewResolver();\n\t\t\tresolver.setPrefix(this.environment.getProperty("prefix", DEFAULT_PREFIX));\n\t\t\tresolver.setSuffix(this.environment.getProperty("suffix", DEFAULT_SUFFIX));\n\t\t\tresolver.setCache(this.environment.getProperty("cache", Boolean.class, true));\n\t\t\tresolver.setContentType(this.environment.getProperty("contentType",\n\t\t\t\t\t"text/html"));\n\t\t\tresolver.setViewNames(this.environment.getProperty("viewNames",\n\t\t\t\t\tString[].class));\n\t\t\tresolver.setExposeRequestAttributes(this.environment.getProperty(\n\t\t\t\t\t"exposeRequestAttributes", Boolean.class, false));\n\t\t\tresolver.setAllowRequestOverride(this.environment.getProperty(\n\t\t\t\t\t"allowRequestOverride", Boolean.class, false));\n\t\t\tresolver.setExposeSessionAttributes(this.environment.getProperty(\n\t\t\t\t\t"exposeSessionAttributes", Boolean.class, false));\n\t\t\tresolver.setAllowSessionOverride(this.environment.getProperty(\n\t\t\t\t\t"allowSessionOverride", Boolean.class, false));\n\t\t\tresolver.setExposeSpringMacroHelpers(this.environment.getProperty(\n\t\t\t\t\t"exposeSpringMacroHelpers", Boolean.class, true));\n\t\t\tresolver.setRequestContextAttribute(this.environment\n\t\t\t\t\t.getProperty("requestContextAttribute"));\n\n\t\t\t// This resolver acts as a fallback resolver (e.g. like a\n\t\t\t// InternalResourceViewResolver) so it needs to have low precedence\n\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 5);\n\n\t\t\treturn resolver;\n\t\t}\n\t}\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.freemarker;\n\nimport java.util.Map;\nimport java.util.Properties;\n\nimport javax.annotation.PostConstruct;\nimport javax.servlet.Servlet;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnNotWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.boot.bind.RelaxedPropertyResolver;\nimport org.springframework.context.EnvironmentAware;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.env.Environment;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean;\nimport org.springframework.util.Assert;\nimport org.springframework.web.servlet.view.freemarker.FreeMarkerConfig;\nimport org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer;\nimport org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for FreeMarker.\n * \n * @author Andy Wilkinson\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass(freemarker.template.Configuration.class)\n@AutoConfigureAfter(WebMvcAutoConfiguration.class)\npublic class FreeMarkerAutoConfiguration {\n\n\tpublic static final String DEFAULT_TEMPLATE_LOADER_PATH = "classpath:/templates/";\n\n\tpublic static final String DEFAULT_PREFIX = "";\n\n\tpublic static final String DEFAULT_SUFFIX = ".ftl";\n\n\t@Configuration\n\tpublic static class FreeMarkerConfigurerConfiguration implements EnvironmentAware {\n\n\t\t@Autowired\n\t\tprivate final ResourceLoader resourceLoader = new DefaultResourceLoader();\n\n\t\tprivate RelaxedPropertyResolver environment;\n\n\t\t@Override\n\t\tpublic void setEnvironment(Environment environment) {\n\t\t\tthis.environment = new RelaxedPropertyResolver(environment,\n\t\t\t\t\t"spring.freeMarker.");\n\t\t}\n\n\t\t@PostConstruct\n\t\tpublic void checkTemplateLocationExists() {\n\t\t\tBoolean checkTemplateLocation = this.environment.getProperty(\n\t\t\t\t\t"checkTemplateLocation", Boolean.class, true);\n\t\t\tif (checkTemplateLocation) {\n\t\t\t\tResource resource = this.resourceLoader.getResource(this.environment\n\t\t\t\t\t\t.getProperty("templateLoaderPath", DEFAULT_TEMPLATE_LOADER_PATH));\n\t\t\t\tAssert.state(resource.exists(), "Cannot find template location: "\n\t\t\t\t\t\t+ resource + " (please add some templates "\n\t\t\t\t\t\t+ "or check your FreeMarker configuration)");\n\t\t\t}\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(Servlet.class)\n\t@ConditionalOnNotWebApplication\n\tpublic static class FreeMarkerConfiguration implements EnvironmentAware {\n\n\t\tprivate RelaxedPropertyResolver environment;\n\n\t\t@Override\n\t\tpublic void setEnvironment(Environment environment) {\n\t\t\tthis.environment = new RelaxedPropertyResolver(environment,\n\t\t\t\t\t"spring.freemarker.");\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic FreeMarkerConfigurationFactoryBean freeMarkerConfigurer() {\n\t\t\tFreeMarkerConfigurationFactoryBean freeMarkerConfigurer = new FreeMarkerConfigurationFactoryBean();\n\t\t\tfreeMarkerConfigurer.setTemplateLoaderPath(this.environment.getProperty(\n\t\t\t\t\t"templateLoaderPath", DEFAULT_TEMPLATE_LOADER_PATH));\n\t\t\tfreeMarkerConfigurer.setDefaultEncoding(this.environment.getProperty(\n\t\t\t\t\t"templateEncoding", "UTF-8"));\n\t\t\tMap<String, Object> settingsMap = this.environment\n\t\t\t\t\t.getSubProperties("settings.");\n\t\t\tProperties settings = new Properties();\n\t\t\tsettings.putAll(settingsMap);\n\t\t\tfreeMarkerConfigurer.setFreemarkerSettings(settings);\n\t\t\treturn freeMarkerConfigurer;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(Servlet.class)\n\t@ConditionalOnWebApplication\n\tpublic static class FreeMarkerViewResolverConfiguration implements EnvironmentAware {\n\n\t\tprivate RelaxedPropertyResolver environment;\n\n\t\t@Override\n\t\tpublic void setEnvironment(Environment environment) {\n\t\t\tthis.environment = new RelaxedPropertyResolver(environment,\n\t\t\t\t\t"spring.freemarker.");\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnBean(FreeMarkerConfig.class)\n\t\t@ConditionalOnMissingBean\n\t\tpublic freemarker.template.Configuration freemarkerConfiguration(\n\t\t\t\tFreeMarkerConfig configurer) {\n\t\t\treturn configurer.getConfiguration();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic FreeMarkerConfigurer freeMarkerConfigurer() {\n\t\t\tFreeMarkerConfigurer freeMarkerConfigurer = new FreeMarkerConfigurer();\n\t\t\tfreeMarkerConfigurer.setTemplateLoaderPath(this.environment.getProperty(\n\t\t\t\t\t"templateLoaderPath", DEFAULT_TEMPLATE_LOADER_PATH));\n\t\t\tfreeMarkerConfigurer.setDefaultEncoding(this.environment.getProperty(\n\t\t\t\t\t"templateEncoding", "UTF-8"));\n\t\t\tMap<String, Object> settingsMap = this.environment\n\t\t\t\t\t.getSubProperties("settings.");\n\t\t\tProperties settings = new Properties();\n\t\t\tsettings.putAll(settingsMap);\n\t\t\tfreeMarkerConfigurer.setFreemarkerSettings(settings);\n\t\t\treturn freeMarkerConfigurer;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "freeMarkerViewResolver")\n\t\tpublic FreeMarkerViewResolver freeMarkerViewResolver() {\n\t\t\tFreeMarkerViewResolver resolver = new FreeMarkerViewResolver();\n\t\t\tresolver.setPrefix(this.environment.getProperty("prefix", DEFAULT_PREFIX));\n\t\t\tresolver.setSuffix(this.environment.getProperty("suffix", DEFAULT_SUFFIX));\n\t\t\tresolver.setCache(this.environment.getProperty("cache", Boolean.class, true));\n\t\t\tresolver.setContentType(this.environment.getProperty("contentType",\n\t\t\t\t\t"text/html"));\n\t\t\tresolver.setViewNames(this.environment.getProperty("viewNames",\n\t\t\t\t\tString[].class));\n\t\t\tresolver.setExposeRequestAttributes(this.environment.getProperty(\n\t\t\t\t\t"exposeRequestAttributes", Boolean.class, false));\n\t\t\tresolver.setAllowRequestOverride(this.environment.getProperty(\n\t\t\t\t\t"allowRequestOverride", Boolean.class, false));\n\t\t\tresolver.setExposeSessionAttributes(this.environment.getProperty(\n\t\t\t\t\t"exposeSessionAttributes", Boolean.class, false));\n\t\t\tresolver.setAllowSessionOverride(this.environment.getProperty(\n\t\t\t\t\t"allowSessionOverride", Boolean.class, false));\n\t\t\tresolver.setExposeSpringMacroHelpers(this.environment.getProperty(\n\t\t\t\t\t"exposeSpringMacroHelpers", Boolean.class, true));\n\t\t\tresolver.setRequestContextAttribute(this.environment\n\t\t\t\t\t.getProperty("requestContextAttribute"));\n\n\t\t\t// This resolver acts as a fallback resolver (e.g. like a\n\t\t\t// InternalResourceViewResolver) so it needs to have low precedence\n\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 5);\n\n\t\t\treturn resolver;\n\t\t}\n\t}\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
