@@ -17,17 +17,22 @@
 package org.springframework.boot.autoconfigure.batch;
 
 import org.springframework.batch.core.launch.JobLauncher;
-import org.springframework.boot.CommandLineRunner;
+import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.ExitCodeGenerator;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.util.StringUtils;
 
 
@@ -35,6 +40,9 @@ import org.springframework.context.annotation.Configuration;
 @ConditionalOnClass({ JobLauncher.class })
 public class BatchAutoConfiguration {
 
+	@Value()
+	private String jobName;
+
 	@Bean
 	@ConditionalOnMissingBean(BatchDatabaseInitializer.class)
 	public BatchDatabaseInitializer batchDatabaseInitializer() {
@@ -42,10 +50,15 @@ public class BatchAutoConfiguration {
 	}
 
 	@Bean
-	@ConditionalOnMissingBean(CommandLineRunner.class)
+	@ConditionalOnMissingBean(JobLauncherCommandLineRunner.class)
 	@ConditionalOnBean(JobLauncher.class)
+	@ConditionalOnExpression()
 	public JobLauncherCommandLineRunner jobLauncherCommandLineRunner() {
-		return new JobLauncherCommandLineRunner();
+		JobLauncherCommandLineRunner runner = new JobLauncherCommandLineRunner();
+		if (StringUtils.hasText(this.jobName)) {
+			runner.setJobName(this.jobName);
+		}
+		return runner;
 	}
 
 	@Bean

