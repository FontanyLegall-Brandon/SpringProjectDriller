{'_old_path': PosixPath('spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -21,9 +21,7 @@ import java.net.URL;\n import java.util.List;\n \n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n@@ -42,7 +40,6 @@ import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.event.ContextRefreshedEvent;\n import org.springframework.context.event.EventListener;\n-import org.springframework.data.redis.core.RedisTemplate;\n import org.springframework.util.StringUtils;\n \n /**\n@@ -164,21 +161,6 @@ public class LocalDevToolsAutoConfiguration {\n \t\t\treturn watcher;\n \t\t}\n \n-\t\t@Configuration\n-\t\t@ConditionalOnBean(name = RedisRestartConfiguration.SESSION_REDIS_TEMPLATE_BEAN_NAME)\n-\t\tstatic class RedisRestartConfiguration {\n-\n-\t\t\tstatic final String SESSION_REDIS_TEMPLATE_BEAN_NAME = "sessionRedisTemplate";\n-\n-\t\t\t@Bean\n-\t\t\tpublic RestartCompatibleRedisSerializerConfigurer restartCompatibleRedisSerializerConfigurer(\n-\t\t\t\t\t@Qualifier(SESSION_REDIS_TEMPLATE_BEAN_NAME) RedisTemplate<?, ?> sessionRedisTemplate) {\n-\t\t\t\treturn new RestartCompatibleRedisSerializerConfigurer(\n-\t\t\t\t\t\tsessionRedisTemplate);\n-\t\t\t}\n-\n-\t\t}\n-\n \t}\n \n }\n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.devtools.autoconfigure;\n\nimport java.io.File;\nimport java.net.URL;\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.devtools.autoconfigure.DevToolsProperties.Restart;\nimport org.springframework.boot.devtools.classpath.ClassPathChangedEvent;\nimport org.springframework.boot.devtools.classpath.ClassPathFileSystemWatcher;\nimport org.springframework.boot.devtools.classpath.ClassPathRestartStrategy;\nimport org.springframework.boot.devtools.classpath.PatternClassPathRestartStrategy;\nimport org.springframework.boot.devtools.filewatch.FileSystemWatcher;\nimport org.springframework.boot.devtools.filewatch.FileSystemWatcherFactory;\nimport org.springframework.boot.devtools.livereload.LiveReloadServer;\nimport org.springframework.boot.devtools.restart.ConditionalOnInitializedRestarter;\nimport org.springframework.boot.devtools.restart.RestartScope;\nimport org.springframework.boot.devtools.restart.Restarter;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.event.ContextRefreshedEvent;\nimport org.springframework.context.event.EventListener;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for local development support.\n *\n * @author Phillip Webb\n * @author Andy Wilkinson\n * @author Vladimir Tsanev\n * @since 1.3.0\n */\n@Configuration\n@ConditionalOnInitializedRestarter\n@EnableConfigurationProperties(DevToolsProperties.class)\npublic class LocalDevToolsAutoConfiguration {\n\n\t/**\n\t * Local LiveReload configuration.\n\t */\n\t@ConditionalOnProperty(prefix = "spring.devtools.livereload", name = "enabled", matchIfMissing = true)\n\tstatic class LiveReloadConfiguration {\n\n\t\t@Autowired\n\t\tprivate DevToolsProperties properties;\n\n\t\t@Autowired(required = false)\n\t\tprivate LiveReloadServer liveReloadServer;\n\n\t\t@Bean\n\t\t@RestartScope\n\t\t@ConditionalOnMissingBean\n\t\tpublic LiveReloadServer liveReloadServer() {\n\t\t\treturn new LiveReloadServer(this.properties.getLivereload().getPort(),\n\t\t\t\t\tRestarter.getInstance().getThreadFactory());\n\t\t}\n\n\t\t@EventListener\n\t\tpublic void onContextRefreshed(ContextRefreshedEvent event) {\n\t\t\toptionalLiveReloadServer().triggerReload();\n\t\t}\n\n\t\t@EventListener\n\t\tpublic void onClassPathChanged(ClassPathChangedEvent event) {\n\t\t\tif (!event.isRestartRequired()) {\n\t\t\t\toptionalLiveReloadServer().triggerReload();\n\t\t\t}\n\t\t}\n\n\t\t@Bean\n\t\tpublic OptionalLiveReloadServer optionalLiveReloadServer() {\n\t\t\treturn new OptionalLiveReloadServer(this.liveReloadServer);\n\t\t}\n\n\t}\n\n\t/**\n\t * Local Restart Configuration.\n\t */\n\t@ConditionalOnProperty(prefix = "spring.devtools.restart", name = "enabled", matchIfMissing = true)\n\tstatic class RestartConfiguration {\n\n\t\t@Autowired\n\t\tprivate DevToolsProperties properties;\n\n\t\t@EventListener\n\t\tpublic void onClassPathChanged(ClassPathChangedEvent event) {\n\t\t\tif (event.isRestartRequired()) {\n\t\t\t\tRestarter.getInstance().restart(\n\t\t\t\t\t\tnew FileWatchingFailureHandler(fileSystemWatcherFactory()));\n\t\t\t}\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic ClassPathFileSystemWatcher classPathFileSystemWatcher() {\n\t\t\tURL[] urls = Restarter.getInstance().getInitialUrls();\n\t\t\tClassPathFileSystemWatcher watcher = new ClassPathFileSystemWatcher(\n\t\t\t\t\tfileSystemWatcherFactory(), classPathRestartStrategy(), urls);\n\t\t\twatcher.setStopWatcherOnRestart(true);\n\t\t\treturn watcher;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic ClassPathRestartStrategy classPathRestartStrategy() {\n\t\t\treturn new PatternClassPathRestartStrategy(\n\t\t\t\t\tthis.properties.getRestart().getAllExclude());\n\t\t}\n\n\t\t@Bean\n\t\tpublic HateoasObjenesisCacheDisabler hateoasObjenesisCacheDisabler() {\n\t\t\treturn new HateoasObjenesisCacheDisabler();\n\t\t}\n\n\t\t@Bean\n\t\tpublic FileSystemWatcherFactory fileSystemWatcherFactory() {\n\t\t\treturn new FileSystemWatcherFactory() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic FileSystemWatcher getFileSystemWatcher() {\n\t\t\t\t\treturn newFileSystemWatcher();\n\t\t\t\t}\n\n\t\t\t};\n\t\t}\n\n\t\tprivate FileSystemWatcher newFileSystemWatcher() {\n\t\t\tRestart restartProperties = this.properties.getRestart();\n\t\t\tFileSystemWatcher watcher = new FileSystemWatcher(true,\n\t\t\t\t\trestartProperties.getPollInterval(),\n\t\t\t\t\trestartProperties.getQuietPeriod());\n\t\t\tString triggerFile = restartProperties.getTriggerFile();\n\t\t\tif (StringUtils.hasLength(triggerFile)) {\n\t\t\t\twatcher.setTriggerFilter(new TriggerFileFilter(triggerFile));\n\t\t\t}\n\t\t\tList<File> additionalPaths = restartProperties.getAdditionalPaths();\n\t\t\tfor (File path : additionalPaths) {\n\t\t\t\twatcher.addSourceFolder(path.getAbsoluteFile());\n\t\t\t}\n\t\t\treturn watcher;\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.devtools.autoconfigure;\n\nimport java.io.File;\nimport java.net.URL;\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.devtools.autoconfigure.DevToolsProperties.Restart;\nimport org.springframework.boot.devtools.classpath.ClassPathChangedEvent;\nimport org.springframework.boot.devtools.classpath.ClassPathFileSystemWatcher;\nimport org.springframework.boot.devtools.classpath.ClassPathRestartStrategy;\nimport org.springframework.boot.devtools.classpath.PatternClassPathRestartStrategy;\nimport org.springframework.boot.devtools.filewatch.FileSystemWatcher;\nimport org.springframework.boot.devtools.filewatch.FileSystemWatcherFactory;\nimport org.springframework.boot.devtools.livereload.LiveReloadServer;\nimport org.springframework.boot.devtools.restart.ConditionalOnInitializedRestarter;\nimport org.springframework.boot.devtools.restart.RestartScope;\nimport org.springframework.boot.devtools.restart.Restarter;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.event.ContextRefreshedEvent;\nimport org.springframework.context.event.EventListener;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for local development support.\n *\n * @author Phillip Webb\n * @author Andy Wilkinson\n * @author Vladimir Tsanev\n * @since 1.3.0\n */\n@Configuration\n@ConditionalOnInitializedRestarter\n@EnableConfigurationProperties(DevToolsProperties.class)\npublic class LocalDevToolsAutoConfiguration {\n\n\t/**\n\t * Local LiveReload configuration.\n\t */\n\t@ConditionalOnProperty(prefix = "spring.devtools.livereload", name = "enabled", matchIfMissing = true)\n\tstatic class LiveReloadConfiguration {\n\n\t\t@Autowired\n\t\tprivate DevToolsProperties properties;\n\n\t\t@Autowired(required = false)\n\t\tprivate LiveReloadServer liveReloadServer;\n\n\t\t@Bean\n\t\t@RestartScope\n\t\t@ConditionalOnMissingBean\n\t\tpublic LiveReloadServer liveReloadServer() {\n\t\t\treturn new LiveReloadServer(this.properties.getLivereload().getPort(),\n\t\t\t\t\tRestarter.getInstance().getThreadFactory());\n\t\t}\n\n\t\t@EventListener\n\t\tpublic void onContextRefreshed(ContextRefreshedEvent event) {\n\t\t\toptionalLiveReloadServer().triggerReload();\n\t\t}\n\n\t\t@EventListener\n\t\tpublic void onClassPathChanged(ClassPathChangedEvent event) {\n\t\t\tif (!event.isRestartRequired()) {\n\t\t\t\toptionalLiveReloadServer().triggerReload();\n\t\t\t}\n\t\t}\n\n\t\t@Bean\n\t\tpublic OptionalLiveReloadServer optionalLiveReloadServer() {\n\t\t\treturn new OptionalLiveReloadServer(this.liveReloadServer);\n\t\t}\n\n\t}\n\n\t/**\n\t * Local Restart Configuration.\n\t */\n\t@ConditionalOnProperty(prefix = "spring.devtools.restart", name = "enabled", matchIfMissing = true)\n\tstatic class RestartConfiguration {\n\n\t\t@Autowired\n\t\tprivate DevToolsProperties properties;\n\n\t\t@EventListener\n\t\tpublic void onClassPathChanged(ClassPathChangedEvent event) {\n\t\t\tif (event.isRestartRequired()) {\n\t\t\t\tRestarter.getInstance().restart(\n\t\t\t\t\t\tnew FileWatchingFailureHandler(fileSystemWatcherFactory()));\n\t\t\t}\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic ClassPathFileSystemWatcher classPathFileSystemWatcher() {\n\t\t\tURL[] urls = Restarter.getInstance().getInitialUrls();\n\t\t\tClassPathFileSystemWatcher watcher = new ClassPathFileSystemWatcher(\n\t\t\t\t\tfileSystemWatcherFactory(), classPathRestartStrategy(), urls);\n\t\t\twatcher.setStopWatcherOnRestart(true);\n\t\t\treturn watcher;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic ClassPathRestartStrategy classPathRestartStrategy() {\n\t\t\treturn new PatternClassPathRestartStrategy(\n\t\t\t\t\tthis.properties.getRestart().getAllExclude());\n\t\t}\n\n\t\t@Bean\n\t\tpublic HateoasObjenesisCacheDisabler hateoasObjenesisCacheDisabler() {\n\t\t\treturn new HateoasObjenesisCacheDisabler();\n\t\t}\n\n\t\t@Bean\n\t\tpublic FileSystemWatcherFactory fileSystemWatcherFactory() {\n\t\t\treturn new FileSystemWatcherFactory() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic FileSystemWatcher getFileSystemWatcher() {\n\t\t\t\t\treturn newFileSystemWatcher();\n\t\t\t\t}\n\n\t\t\t};\n\t\t}\n\n\t\tprivate FileSystemWatcher newFileSystemWatcher() {\n\t\t\tRestart restartProperties = this.properties.getRestart();\n\t\t\tFileSystemWatcher watcher = new FileSystemWatcher(true,\n\t\t\t\t\trestartProperties.getPollInterval(),\n\t\t\t\t\trestartProperties.getQuietPeriod());\n\t\t\tString triggerFile = restartProperties.getTriggerFile();\n\t\t\tif (StringUtils.hasLength(triggerFile)) {\n\t\t\t\twatcher.setTriggerFilter(new TriggerFileFilter(triggerFile));\n\t\t\t}\n\t\t\tList<File> additionalPaths = restartProperties.getAdditionalPaths();\n\t\t\tfor (File path : additionalPaths) {\n\t\t\t\twatcher.addSourceFolder(path.getAbsoluteFile());\n\t\t\t}\n\t\t\treturn watcher;\n\t\t}\n\n\t\t@Configuration\n\t\t@ConditionalOnBean(name = RedisRestartConfiguration.SESSION_REDIS_TEMPLATE_BEAN_NAME)\n\t\tstatic class RedisRestartConfiguration {\n\n\t\t\tstatic final String SESSION_REDIS_TEMPLATE_BEAN_NAME = "sessionRedisTemplate";\n\n\t\t\t@Bean\n\t\t\tpublic RestartCompatibleRedisSerializerConfigurer restartCompatibleRedisSerializerConfigurer(\n\t\t\t\t\t@Qualifier(SESSION_REDIS_TEMPLATE_BEAN_NAME) RedisTemplate<?, ?> sessionRedisTemplate) {\n\t\t\t\treturn new RestartCompatibleRedisSerializerConfigurer(\n\t\t\t\t\t\tsessionRedisTemplate);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
