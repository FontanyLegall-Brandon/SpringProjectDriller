{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -19,13 +19,11 @@ package org.springframework.boot.autoconfigure.orm.jpa;\n import java.util.Map;\n \n import javax.persistence.EntityManager;\n-import javax.sql.DataSource;\n \n import org.springframework.beans.factory.BeanClassLoaderAware;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionOutcome;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.SpringBootCondition;\n import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\n@@ -53,7 +51,6 @@ import org.springframework.util.ClassUtils;\n @ConditionalOnClass({ LocalContainerEntityManagerFactoryBean.class,\n \t\tEnableTransactionManagement.class, EntityManager.class })\n @Conditional(HibernateEntityManagerCondition.class)\n-@ConditionalOnBean(DataSource.class)\n @AutoConfigureAfter(DataSourceAutoConfiguration.class)\n public class HibernateJpaAutoConfiguration extends JpaBaseConfiguration implements\n \t\tBeanClassLoaderAware {\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.orm.jpa;\n\nimport java.util.Map;\n\nimport javax.persistence.EntityManager;\n\nimport org.springframework.beans.factory.BeanClassLoaderAware;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.EmbeddedDatabaseConnection;\nimport org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration.HibernateEntityManagerCondition;\nimport org.springframework.boot.bind.RelaxedPropertyResolver;\nimport org.springframework.boot.orm.jpa.SpringNamingStrategy;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.orm.jpa.vendor.AbstractJpaVendorAdapter;\nimport org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\nimport org.springframework.util.ClassUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Hibernate JPA.\n * \n * @author Phillip Webb\n */\n@Configuration\n@ConditionalOnClass({ LocalContainerEntityManagerFactoryBean.class,\n\t\tEnableTransactionManagement.class, EntityManager.class })\n@Conditional(HibernateEntityManagerCondition.class)\n@AutoConfigureAfter(DataSourceAutoConfiguration.class)\npublic class HibernateJpaAutoConfiguration extends JpaBaseConfiguration implements\n\t\tBeanClassLoaderAware {\n\n\tprivate RelaxedPropertyResolver environment;\n\n\tprivate ClassLoader classLoader;\n\n\tpublic HibernateJpaAutoConfiguration() {\n\t\tthis.environment = null;\n\t}\n\n\t@Override\n\tpublic void setBeanClassLoader(ClassLoader classLoader) {\n\t\tthis.classLoader = classLoader;\n\t}\n\n\t@Override\n\tpublic void setEnvironment(Environment environment) {\n\t\tsuper.setEnvironment(environment);\n\t\tthis.environment = new RelaxedPropertyResolver(environment,\n\t\t\t\t"spring.jpa.hibernate.");\n\t}\n\n\t@Override\n\tprotected AbstractJpaVendorAdapter createJpaVendorAdapter() {\n\t\treturn new HibernateJpaVendorAdapter();\n\t}\n\n\t@Override\n\tprotected void configure(\n\t\t\tLocalContainerEntityManagerFactoryBean entityManagerFactoryBean) {\n\t\tMap<String, Object> properties = entityManagerFactoryBean.getJpaPropertyMap();\n\t\tproperties.put("hibernate.ejb.naming_strategy", this.environment.getProperty(\n\t\t\t\t"naming-strategy", SpringNamingStrategy.class.getName()));\n\t\tString ddlAuto = this.environment.getProperty("ddl-auto", getDefaultDdlAuto());\n\t\tif (!"none".equals(ddlAuto)) {\n\t\t\tproperties.put("hibernate.hbm2ddl.auto", ddlAuto);\n\t\t}\n\t}\n\n\tprivate String getDefaultDdlAuto() {\n\t\tEmbeddedDatabaseConnection embeddedDatabaseConnection = EmbeddedDatabaseConnection\n\t\t\t\t.get(this.classLoader);\n\t\tif (embeddedDatabaseConnection == EmbeddedDatabaseConnection.NONE) {\n\t\t\treturn "none";\n\t\t}\n\t\treturn "create-drop";\n\t}\n\n\tstatic class HibernateEntityManagerCondition extends SpringBootCondition {\n\n\t\tprivate static String[] CLASS_NAMES = {\n\t\t\t\t"org.hibernate.ejb.HibernateEntityManager",\n\t\t\t\t"org.hibernate.jpa.HibernateEntityManager" };\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tfor (String className : CLASS_NAMES) {\n\t\t\t\tif (ClassUtils.isPresent(className, context.getClassLoader())) {\n\t\t\t\t\treturn ConditionOutcome.match("found HibernateEntityManager class");\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn ConditionOutcome.noMatch("did not find HibernateEntityManager class");\n\t\t}\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.orm.jpa;\n\nimport java.util.Map;\n\nimport javax.persistence.EntityManager;\nimport javax.sql.DataSource;\n\nimport org.springframework.beans.factory.BeanClassLoaderAware;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.EmbeddedDatabaseConnection;\nimport org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration.HibernateEntityManagerCondition;\nimport org.springframework.boot.bind.RelaxedPropertyResolver;\nimport org.springframework.boot.orm.jpa.SpringNamingStrategy;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.orm.jpa.vendor.AbstractJpaVendorAdapter;\nimport org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\nimport org.springframework.util.ClassUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Hibernate JPA.\n * \n * @author Phillip Webb\n */\n@Configuration\n@ConditionalOnClass({ LocalContainerEntityManagerFactoryBean.class,\n\t\tEnableTransactionManagement.class, EntityManager.class })\n@Conditional(HibernateEntityManagerCondition.class)\n@ConditionalOnBean(DataSource.class)\n@AutoConfigureAfter(DataSourceAutoConfiguration.class)\npublic class HibernateJpaAutoConfiguration extends JpaBaseConfiguration implements\n\t\tBeanClassLoaderAware {\n\n\tprivate RelaxedPropertyResolver environment;\n\n\tprivate ClassLoader classLoader;\n\n\tpublic HibernateJpaAutoConfiguration() {\n\t\tthis.environment = null;\n\t}\n\n\t@Override\n\tpublic void setBeanClassLoader(ClassLoader classLoader) {\n\t\tthis.classLoader = classLoader;\n\t}\n\n\t@Override\n\tpublic void setEnvironment(Environment environment) {\n\t\tsuper.setEnvironment(environment);\n\t\tthis.environment = new RelaxedPropertyResolver(environment,\n\t\t\t\t"spring.jpa.hibernate.");\n\t}\n\n\t@Override\n\tprotected AbstractJpaVendorAdapter createJpaVendorAdapter() {\n\t\treturn new HibernateJpaVendorAdapter();\n\t}\n\n\t@Override\n\tprotected void configure(\n\t\t\tLocalContainerEntityManagerFactoryBean entityManagerFactoryBean) {\n\t\tMap<String, Object> properties = entityManagerFactoryBean.getJpaPropertyMap();\n\t\tproperties.put("hibernate.ejb.naming_strategy", this.environment.getProperty(\n\t\t\t\t"naming-strategy", SpringNamingStrategy.class.getName()));\n\t\tString ddlAuto = this.environment.getProperty("ddl-auto", getDefaultDdlAuto());\n\t\tif (!"none".equals(ddlAuto)) {\n\t\t\tproperties.put("hibernate.hbm2ddl.auto", ddlAuto);\n\t\t}\n\t}\n\n\tprivate String getDefaultDdlAuto() {\n\t\tEmbeddedDatabaseConnection embeddedDatabaseConnection = EmbeddedDatabaseConnection\n\t\t\t\t.get(this.classLoader);\n\t\tif (embeddedDatabaseConnection == EmbeddedDatabaseConnection.NONE) {\n\t\t\treturn "none";\n\t\t}\n\t\treturn "create-drop";\n\t}\n\n\tstatic class HibernateEntityManagerCondition extends SpringBootCondition {\n\n\t\tprivate static String[] CLASS_NAMES = {\n\t\t\t\t"org.hibernate.ejb.HibernateEntityManager",\n\t\t\t\t"org.hibernate.jpa.HibernateEntityManager" };\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tfor (String className : CLASS_NAMES) {\n\t\t\t\tif (ClassUtils.isPresent(className, context.getClassLoader())) {\n\t\t\t\t\treturn ConditionOutcome.match("found HibernateEntityManager class");\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn ConditionOutcome.noMatch("did not find HibernateEntityManager class");\n\t\t}\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
