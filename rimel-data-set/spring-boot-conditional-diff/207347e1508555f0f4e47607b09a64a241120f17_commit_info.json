{'_old_path': PosixPath('spring-boot-developer-tools/src/main/java/org/springframework/boot/developertools/autoconfigure/RemoteDeveloperToolsAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-developer-tools/src/main/java/org/springframework/boot/developertools/autoconfigure/RemoteDeveloperToolsAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -34,6 +34,7 @@ import org.springframework.boot.developertools.remote.server.Dispatcher;\n import org.springframework.boot.developertools.remote.server.DispatcherFilter;\n import org.springframework.boot.developertools.remote.server.Handler;\n import org.springframework.boot.developertools.remote.server.HandlerMapper;\n+import org.springframework.boot.developertools.remote.server.HttpHeaderAccessManager;\n import org.springframework.boot.developertools.remote.server.HttpStatusHandler;\n import org.springframework.boot.developertools.remote.server.UrlHandlerMapper;\n import org.springframework.boot.developertools.restart.server.DefaultSourceFolderUrlFilter;\n@@ -56,7 +57,7 @@ import org.springframework.http.server.ServerHttpRequest;\n  * @since 1.3.0\n  */\n @Configuration\n-@ConditionalOnProperty(prefix = "spring.developertools.remote", name = "enabled")\n+@ConditionalOnProperty(prefix = "spring.developertools.remote", name = "secret")\n @ConditionalOnClass({ Filter.class, ServerHttpRequest.class })\n @EnableConfigurationProperties(DeveloperToolsProperties.class)\n public class RemoteDeveloperToolsAutoConfiguration {\n@@ -67,6 +68,14 @@ public class RemoteDeveloperToolsAutoConfiguration {\n \t@Autowired\n \tprivate DeveloperToolsProperties properties;\n \n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic AccessManager remoteDeveloperToolsAccessManager() {\n+\t\tRemoteDeveloperToolsProperties remoteProperties = this.properties.getRemote();\n+\t\treturn new HttpHeaderAccessManager(remoteProperties.getSecretHeaderName(),\n+\t\t\t\tremoteProperties.getSecret());\n+\t}\n+\n \t@Bean\n \tpublic HandlerMapper remoteDeveloperToolsHealthCheckHandlerMapper() {\n \t\tHandler handler = new HttpStatusHandler();\n@@ -76,8 +85,8 @@ public class RemoteDeveloperToolsAutoConfiguration {\n \t@Bean\n \t@ConditionalOnMissingBean\n \tpublic DispatcherFilter remoteDeveloperToolsDispatcherFilter(\n-\t\t\tCollection<HandlerMapper> mappers) {\n-\t\tDispatcher dispatcher = new Dispatcher(AccessManager.PERMIT_ALL, mappers);\n+\t\t\tAccessManager accessManager, Collection<HandlerMapper> mappers) {\n+\t\tDispatcher dispatcher = new Dispatcher(accessManager, mappers);\n \t\treturn new DispatcherFilter(dispatcher);\n \t}\n \n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.developertools.autoconfigure;\n\nimport java.util.Collection;\n\nimport javax.servlet.Filter;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.developertools.remote.server.AccessManager;\nimport org.springframework.boot.developertools.remote.server.Dispatcher;\nimport org.springframework.boot.developertools.remote.server.DispatcherFilter;\nimport org.springframework.boot.developertools.remote.server.Handler;\nimport org.springframework.boot.developertools.remote.server.HandlerMapper;\nimport org.springframework.boot.developertools.remote.server.HttpHeaderAccessManager;\nimport org.springframework.boot.developertools.remote.server.HttpStatusHandler;\nimport org.springframework.boot.developertools.remote.server.UrlHandlerMapper;\nimport org.springframework.boot.developertools.restart.server.DefaultSourceFolderUrlFilter;\nimport org.springframework.boot.developertools.restart.server.HttpRestartServer;\nimport org.springframework.boot.developertools.restart.server.HttpRestartServerHandler;\nimport org.springframework.boot.developertools.restart.server.SourceFolderUrlFilter;\nimport org.springframework.boot.developertools.tunnel.server.HttpTunnelServer;\nimport org.springframework.boot.developertools.tunnel.server.HttpTunnelServerHandler;\nimport org.springframework.boot.developertools.tunnel.server.RemoteDebugPortProvider;\nimport org.springframework.boot.developertools.tunnel.server.SocketTargetServerConnection;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.server.ServerHttpRequest;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for remote development support.\n *\n * @author Phillip Webb\n * @author Rob Winch\n * @since 1.3.0\n */\n@Configuration\n@ConditionalOnProperty(prefix = "spring.developertools.remote", name = "secret")\n@ConditionalOnClass({ Filter.class, ServerHttpRequest.class })\n@EnableConfigurationProperties(DeveloperToolsProperties.class)\npublic class RemoteDeveloperToolsAutoConfiguration {\n\n\tprivate static final Log logger = LogFactory\n\t\t\t.getLog(RemoteDeveloperToolsAutoConfiguration.class);\n\n\t@Autowired\n\tprivate DeveloperToolsProperties properties;\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic AccessManager remoteDeveloperToolsAccessManager() {\n\t\tRemoteDeveloperToolsProperties remoteProperties = this.properties.getRemote();\n\t\treturn new HttpHeaderAccessManager(remoteProperties.getSecretHeaderName(),\n\t\t\t\tremoteProperties.getSecret());\n\t}\n\n\t@Bean\n\tpublic HandlerMapper remoteDeveloperToolsHealthCheckHandlerMapper() {\n\t\tHandler handler = new HttpStatusHandler();\n\t\treturn new UrlHandlerMapper(this.properties.getRemote().getContextPath(), handler);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic DispatcherFilter remoteDeveloperToolsDispatcherFilter(\n\t\t\tAccessManager accessManager, Collection<HandlerMapper> mappers) {\n\t\tDispatcher dispatcher = new Dispatcher(accessManager, mappers);\n\t\treturn new DispatcherFilter(dispatcher);\n\t}\n\n\t/**\n\t * Configuration for remote update and restarts.\n\t */\n\t@ConditionalOnProperty(prefix = "spring.developertools.remote.restart", name = "enabled", matchIfMissing = true)\n\tstatic class RemoteRestartConfiguration {\n\n\t\t@Autowired\n\t\tprivate DeveloperToolsProperties properties;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic SourceFolderUrlFilter remoteRestartSourceFolderUrlFilter() {\n\t\t\treturn new DefaultSourceFolderUrlFilter();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic HttpRestartServer remoteRestartHttpRestartServer(\n\t\t\t\tSourceFolderUrlFilter sourceFolderUrlFilter) {\n\t\t\treturn new HttpRestartServer(sourceFolderUrlFilter);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "remoteRestartHanderMapper")\n\t\tpublic UrlHandlerMapper remoteRestartHanderMapper(HttpRestartServer server) {\n\t\t\tString url = this.properties.getRemote().getContextPath() + "/restart";\n\t\t\tlogger.warn("Listening for remote restart updates on " + url);\n\t\t\tHandler handler = new HttpRestartServerHandler(server);\n\t\t\treturn new UrlHandlerMapper(url, handler);\n\t\t}\n\n\t}\n\n\t/**\n\t * Configuration for remote debug HTTP tunneling.\n\t */\n\t@ConditionalOnProperty(prefix = "spring.developertools.remote.debug", name = "enabled", matchIfMissing = true)\n\tstatic class RemoteDebugTunnelConfiguration {\n\n\t\t@Autowired\n\t\tprivate DeveloperToolsProperties properties;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "remoteDebugHanderMapper")\n\t\tpublic UrlHandlerMapper remoteDebugHanderMapper(\n\t\t\t\t@Qualifier("remoteDebugHttpTunnelServer") HttpTunnelServer server) {\n\t\t\tString url = this.properties.getRemote().getContextPath() + "/debug";\n\t\t\tlogger.warn("Listening for remote debug traffic on " + url);\n\t\t\tHandler handler = new HttpTunnelServerHandler(server);\n\t\t\treturn new UrlHandlerMapper(url, handler);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "remoteDebugHttpTunnelServer")\n\t\tpublic HttpTunnelServer remoteDebugHttpTunnelServer() {\n\t\t\treturn new HttpTunnelServer(new SocketTargetServerConnection(\n\t\t\t\t\tnew RemoteDebugPortProvider()));\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.developertools.autoconfigure;\n\nimport java.util.Collection;\n\nimport javax.servlet.Filter;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.developertools.remote.server.AccessManager;\nimport org.springframework.boot.developertools.remote.server.Dispatcher;\nimport org.springframework.boot.developertools.remote.server.DispatcherFilter;\nimport org.springframework.boot.developertools.remote.server.Handler;\nimport org.springframework.boot.developertools.remote.server.HandlerMapper;\nimport org.springframework.boot.developertools.remote.server.HttpStatusHandler;\nimport org.springframework.boot.developertools.remote.server.UrlHandlerMapper;\nimport org.springframework.boot.developertools.restart.server.DefaultSourceFolderUrlFilter;\nimport org.springframework.boot.developertools.restart.server.HttpRestartServer;\nimport org.springframework.boot.developertools.restart.server.HttpRestartServerHandler;\nimport org.springframework.boot.developertools.restart.server.SourceFolderUrlFilter;\nimport org.springframework.boot.developertools.tunnel.server.HttpTunnelServer;\nimport org.springframework.boot.developertools.tunnel.server.HttpTunnelServerHandler;\nimport org.springframework.boot.developertools.tunnel.server.RemoteDebugPortProvider;\nimport org.springframework.boot.developertools.tunnel.server.SocketTargetServerConnection;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.server.ServerHttpRequest;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for remote development support.\n *\n * @author Phillip Webb\n * @author Rob Winch\n * @since 1.3.0\n */\n@Configuration\n@ConditionalOnProperty(prefix = "spring.developertools.remote", name = "enabled")\n@ConditionalOnClass({ Filter.class, ServerHttpRequest.class })\n@EnableConfigurationProperties(DeveloperToolsProperties.class)\npublic class RemoteDeveloperToolsAutoConfiguration {\n\n\tprivate static final Log logger = LogFactory\n\t\t\t.getLog(RemoteDeveloperToolsAutoConfiguration.class);\n\n\t@Autowired\n\tprivate DeveloperToolsProperties properties;\n\n\t@Bean\n\tpublic HandlerMapper remoteDeveloperToolsHealthCheckHandlerMapper() {\n\t\tHandler handler = new HttpStatusHandler();\n\t\treturn new UrlHandlerMapper(this.properties.getRemote().getContextPath(), handler);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic DispatcherFilter remoteDeveloperToolsDispatcherFilter(\n\t\t\tCollection<HandlerMapper> mappers) {\n\t\tDispatcher dispatcher = new Dispatcher(AccessManager.PERMIT_ALL, mappers);\n\t\treturn new DispatcherFilter(dispatcher);\n\t}\n\n\t/**\n\t * Configuration for remote update and restarts.\n\t */\n\t@ConditionalOnProperty(prefix = "spring.developertools.remote.restart", name = "enabled", matchIfMissing = true)\n\tstatic class RemoteRestartConfiguration {\n\n\t\t@Autowired\n\t\tprivate DeveloperToolsProperties properties;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic SourceFolderUrlFilter remoteRestartSourceFolderUrlFilter() {\n\t\t\treturn new DefaultSourceFolderUrlFilter();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic HttpRestartServer remoteRestartHttpRestartServer(\n\t\t\t\tSourceFolderUrlFilter sourceFolderUrlFilter) {\n\t\t\treturn new HttpRestartServer(sourceFolderUrlFilter);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "remoteRestartHanderMapper")\n\t\tpublic UrlHandlerMapper remoteRestartHanderMapper(HttpRestartServer server) {\n\t\t\tString url = this.properties.getRemote().getContextPath() + "/restart";\n\t\t\tlogger.warn("Listening for remote restart updates on " + url);\n\t\t\tHandler handler = new HttpRestartServerHandler(server);\n\t\t\treturn new UrlHandlerMapper(url, handler);\n\t\t}\n\n\t}\n\n\t/**\n\t * Configuration for remote debug HTTP tunneling.\n\t */\n\t@ConditionalOnProperty(prefix = "spring.developertools.remote.debug", name = "enabled", matchIfMissing = true)\n\tstatic class RemoteDebugTunnelConfiguration {\n\n\t\t@Autowired\n\t\tprivate DeveloperToolsProperties properties;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "remoteDebugHanderMapper")\n\t\tpublic UrlHandlerMapper remoteDebugHanderMapper(\n\t\t\t\t@Qualifier("remoteDebugHttpTunnelServer") HttpTunnelServer server) {\n\t\t\tString url = this.properties.getRemote().getContextPath() + "/debug";\n\t\t\tlogger.warn("Listening for remote debug traffic on " + url);\n\t\t\tHandler handler = new HttpTunnelServerHandler(server);\n\t\t\treturn new UrlHandlerMapper(url, handler);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "remoteDebugHttpTunnelServer")\n\t\tpublic HttpTunnelServer remoteDebugHttpTunnelServer() {\n\t\t\treturn new HttpTunnelServer(new SocketTargetServerConnection(\n\t\t\t\t\tnew RemoteDebugPortProvider()));\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
