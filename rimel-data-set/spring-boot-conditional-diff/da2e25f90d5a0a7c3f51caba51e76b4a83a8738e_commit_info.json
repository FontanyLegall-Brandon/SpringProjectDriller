{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/groovy/template/GroovyTemplateAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2012-2013 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.groovy.template;\n+\n+import groovy.text.TemplateEngine;\n+import groovy.text.markup.BaseTemplate;\n+import groovy.text.markup.MarkupTemplateEngine;\n+import groovy.text.markup.TemplateConfiguration;\n+\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+\n+import javax.annotation.PostConstruct;\n+import javax.servlet.Servlet;\n+\n+import org.springframework.beans.factory.BeanClassLoaderAware;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.autoconfigure.groovy.template.web.GroovyTemplateViewResolver;\n+import org.springframework.boot.autoconfigure.groovy.template.web.LocaleAwareTemplate;\n+import org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.i18n.LocaleContextHolder;\n+import org.springframework.core.Ordered;\n+import org.springframework.core.io.DefaultResourceLoader;\n+import org.springframework.core.io.Resource;\n+import org.springframework.core.io.ResourceLoader;\n+import org.springframework.util.Assert;\n+\n+/**\n+ * Autoconfiguration support for Groovy templates in MVC. By default creates a\n+ * {@link MarkupTemplateEngine} configured from {@link GroovyTemplateProperties}, but you\n+ * can override that by providing a {@link TemplateEngine} of a different type.\n+ * \n+ * @author Dave Syer\n+ * @since 1.1.0\n+ */\n+@Configuration\n+@ConditionalOnClass(TemplateEngine.class)\n+@AutoConfigureAfter(WebMvcAutoConfiguration.class)\n+@EnableConfigurationProperties(GroovyTemplateProperties.class)\n+public class GroovyTemplateAutoConfiguration {\n+\n+\t@Autowired\n+\tprivate final ResourceLoader resourceLoader = new DefaultResourceLoader();\n+\n+\t@Autowired\n+\tprivate GroovyTemplateProperties properties;\n+\n+\t@PostConstruct\n+\tpublic void checkTemplateLocationExists() {\n+\t\tif (this.properties.isCheckTemplateLocation()) {\n+\t\t\tResource resource = this.resourceLoader.getResource(this.properties\n+\t\t\t\t\t.getPrefix());\n+\t\t\tAssert.state(resource.exists(), "Cannot find template location: " + resource\n+\t\t\t\t\t+ " (please add some templates "\n+\t\t\t\t\t+ "or check your FreeMarker configuration)");\n+\t\t}\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnClass({ Servlet.class, LocaleContextHolder.class })\n+\t@ConditionalOnWebApplication\n+\tpublic static class GroovyWebConfiguration implements BeanClassLoaderAware {\n+\n+\t\t@Autowired\n+\t\tprivate final ResourceLoader resourceLoader = new DefaultResourceLoader();\n+\n+\t\t@Autowired\n+\t\tprivate GroovyTemplateProperties properties;\n+\n+\t\tprivate ClassLoader classLoader = GroovyWebConfiguration.class.getClassLoader();\n+\n+\t\t@Override\n+\t\tpublic void setBeanClassLoader(ClassLoader classLoader) {\n+\t\t\tthis.classLoader = classLoader;\n+\t\t}\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(TemplateEngine.class)\n+\t\tpublic TemplateEngine groovyTemplateEngine() throws Exception {\n+\t\t\tTemplateConfiguration configuration = this.properties.getConfiguration();\n+\t\t\tif (configuration.getBaseTemplateClass() == BaseTemplate.class) {\n+\t\t\t\t// Enable locale-dependent includes\n+\t\t\t\tconfiguration.setBaseTemplateClass(LocaleAwareTemplate.class);\n+\t\t\t}\n+\t\t\treturn new MarkupTemplateEngine(createParentLoaderForTemplates(),\n+\t\t\t\t\tconfiguration);\n+\t\t}\n+\n+\t\tprivate ClassLoader createParentLoaderForTemplates() throws Exception {\n+\t\t\treturn new URLClassLoader(new URL[] { this.resourceLoader.getResource(\n+\t\t\t\t\tthis.properties.getPrefix()).getURL() }, this.classLoader);\n+\t\t}\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(name = "groovyTemplateViewResolver")\n+\t\tpublic GroovyTemplateViewResolver groovyTemplateViewResolver(TemplateEngine engine) {\n+\t\t\tGroovyTemplateViewResolver resolver = new GroovyTemplateViewResolver();\n+\t\t\tresolver.setPrefix(this.properties.getPrefix());\n+\t\t\tresolver.setSuffix(this.properties.getSuffix());\n+\t\t\tresolver.setCache(this.properties.isCache());\n+\t\t\tresolver.setContentType(this.properties.getContentType());\n+\t\t\tresolver.setCharSet(this.properties.getCharSet());\n+\t\t\tresolver.setViewNames(this.properties.getViewNames());\n+\t\t\tresolver.setTemplateEngine(engine);\n+\n+\t\t\t// This resolver acts as a fallback resolver (e.g. like a\n+\t\t\t// InternalResourceViewResolver) so it needs to have low precedence\n+\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 6);\n+\n+\t\t\treturn resolver;\n+\t\t}\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.groovy.template;\n\nimport groovy.text.TemplateEngine;\nimport groovy.text.markup.BaseTemplate;\nimport groovy.text.markup.MarkupTemplateEngine;\nimport groovy.text.markup.TemplateConfiguration;\n\nimport java.net.URL;\nimport java.net.URLClassLoader;\n\nimport javax.annotation.PostConstruct;\nimport javax.servlet.Servlet;\n\nimport org.springframework.beans.factory.BeanClassLoaderAware;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.groovy.template.web.GroovyTemplateViewResolver;\nimport org.springframework.boot.autoconfigure.groovy.template.web.LocaleAwareTemplate;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.i18n.LocaleContextHolder;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.util.Assert;\n\n/**\n * Autoconfiguration support for Groovy templates in MVC. By default creates a\n * {@link MarkupTemplateEngine} configured from {@link GroovyTemplateProperties}, but you\n * can override that by providing a {@link TemplateEngine} of a different type.\n * \n * @author Dave Syer\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass(TemplateEngine.class)\n@AutoConfigureAfter(WebMvcAutoConfiguration.class)\n@EnableConfigurationProperties(GroovyTemplateProperties.class)\npublic class GroovyTemplateAutoConfiguration {\n\n\t@Autowired\n\tprivate final ResourceLoader resourceLoader = new DefaultResourceLoader();\n\n\t@Autowired\n\tprivate GroovyTemplateProperties properties;\n\n\t@PostConstruct\n\tpublic void checkTemplateLocationExists() {\n\t\tif (this.properties.isCheckTemplateLocation()) {\n\t\t\tResource resource = this.resourceLoader.getResource(this.properties\n\t\t\t\t\t.getPrefix());\n\t\t\tAssert.state(resource.exists(), "Cannot find template location: " + resource\n\t\t\t\t\t+ " (please add some templates "\n\t\t\t\t\t+ "or check your FreeMarker configuration)");\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ Servlet.class, LocaleContextHolder.class })\n\t@ConditionalOnWebApplication\n\tpublic static class GroovyWebConfiguration implements BeanClassLoaderAware {\n\n\t\t@Autowired\n\t\tprivate final ResourceLoader resourceLoader = new DefaultResourceLoader();\n\n\t\t@Autowired\n\t\tprivate GroovyTemplateProperties properties;\n\n\t\tprivate ClassLoader classLoader = GroovyWebConfiguration.class.getClassLoader();\n\n\t\t@Override\n\t\tpublic void setBeanClassLoader(ClassLoader classLoader) {\n\t\t\tthis.classLoader = classLoader;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(TemplateEngine.class)\n\t\tpublic TemplateEngine groovyTemplateEngine() throws Exception {\n\t\t\tTemplateConfiguration configuration = this.properties.getConfiguration();\n\t\t\tif (configuration.getBaseTemplateClass() == BaseTemplate.class) {\n\t\t\t\t// Enable locale-dependent includes\n\t\t\t\tconfiguration.setBaseTemplateClass(LocaleAwareTemplate.class);\n\t\t\t}\n\t\t\treturn new MarkupTemplateEngine(createParentLoaderForTemplates(),\n\t\t\t\t\tconfiguration);\n\t\t}\n\n\t\tprivate ClassLoader createParentLoaderForTemplates() throws Exception {\n\t\t\treturn new URLClassLoader(new URL[] { this.resourceLoader.getResource(\n\t\t\t\t\tthis.properties.getPrefix()).getURL() }, this.classLoader);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "groovyTemplateViewResolver")\n\t\tpublic GroovyTemplateViewResolver groovyTemplateViewResolver(TemplateEngine engine) {\n\t\t\tGroovyTemplateViewResolver resolver = new GroovyTemplateViewResolver();\n\t\t\tresolver.setPrefix(this.properties.getPrefix());\n\t\t\tresolver.setSuffix(this.properties.getSuffix());\n\t\t\tresolver.setCache(this.properties.isCache());\n\t\t\tresolver.setContentType(this.properties.getContentType());\n\t\t\tresolver.setCharSet(this.properties.getCharSet());\n\t\t\tresolver.setViewNames(this.properties.getViewNames());\n\t\t\tresolver.setTemplateEngine(engine);\n\n\t\t\t// This resolver acts as a fallback resolver (e.g. like a\n\t\t\t// InternalResourceViewResolver) so it needs to have low precedence\n\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 6);\n\n\t\t\treturn resolver;\n\t\t}\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
