{'_old_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -52,7 +52,8 @@ import org.springframework.web.util.UrlPathHelper;\n  */\n @Configuration\n @ConditionalOnBean({ CounterService.class, GaugeService.class })\n-@ConditionalOnClass({ Servlet.class, ServletRegistration.class })\n+@ConditionalOnClass({ Servlet.class, ServletRegistration.class,\n+\t\tOncePerRequestFilter.class })\n @AutoConfigureAfter(MetricRepositoryAutoConfiguration.class)\n public class MetricFilterAutoConfiguration {\n \n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport java.io.IOException;\n\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.Servlet;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRegistration;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuate.metrics.CounterService;\nimport org.springframework.boot.actuate.metrics.GaugeService;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.util.StopWatch;\nimport org.springframework.web.filter.OncePerRequestFilter;\nimport org.springframework.web.servlet.HandlerMapping;\nimport org.springframework.web.util.UrlPathHelper;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} that records Servlet interactions\n * with a {@link CounterService} and {@link GaugeService}.\n *\n * @author Dave Syer\n * @author Phillip Webb\n */\n@Configuration\n@ConditionalOnBean({ CounterService.class, GaugeService.class })\n@ConditionalOnClass({ Servlet.class, ServletRegistration.class,\n\t\tOncePerRequestFilter.class })\n@AutoConfigureAfter(MetricRepositoryAutoConfiguration.class)\npublic class MetricFilterAutoConfiguration {\n\n\tprivate static final int UNDEFINED_HTTP_STATUS = 999;\n\n\tprivate static final String UNKNOWN_PATH_SUFFIX = "/unmapped";\n\n\t@Autowired\n\tprivate CounterService counterService;\n\n\t@Autowired\n\tprivate GaugeService gaugeService;\n\n\t@Bean\n\tpublic Filter metricFilter() {\n\t\treturn new MetricsFilter();\n\t}\n\n\t/**\n\t * Filter that counts requests and measures processing times.\n\t */\n\t@Order(Ordered.HIGHEST_PRECEDENCE)\n\tprivate final class MetricsFilter extends OncePerRequestFilter {\n\n\t\t@Override\n\t\tprotected void doFilterInternal(HttpServletRequest request,\n\t\t\t\tHttpServletResponse response, FilterChain chain) throws ServletException,\n\t\t\t\tIOException {\n\t\t\tUrlPathHelper helper = new UrlPathHelper();\n\t\t\tString suffix = helper.getPathWithinApplication(request);\n\t\t\tStopWatch stopWatch = new StopWatch();\n\t\t\tstopWatch.start();\n\t\t\ttry {\n\t\t\t\tchain.doFilter(request, response);\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tstopWatch.stop();\n\t\t\t\tint status = getStatus(response);\n\t\t\t\tObject bestMatchingPattern = request\n\t\t\t\t\t\t.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE);\n\t\t\t\tHttpStatus httpStatus = HttpStatus.OK;\n\t\t\t\ttry {\n\t\t\t\t\thttpStatus = HttpStatus.valueOf(status);\n\t\t\t\t}\n\t\t\t\tcatch (Exception ex) {\n\t\t\t\t\t// not convertible\n\t\t\t\t}\n\t\t\t\tif (bestMatchingPattern != null) {\n\t\t\t\t\tsuffix = fixSpecialCharacters(bestMatchingPattern.toString());\n\t\t\t\t}\n\t\t\t\telse if (httpStatus.is4xxClientError()) {\n\t\t\t\t\tsuffix = UNKNOWN_PATH_SUFFIX;\n\t\t\t\t}\n\t\t\t\tString gaugeKey = getKey("response" + suffix);\n\t\t\t\tMetricFilterAutoConfiguration.this.gaugeService.submit(gaugeKey,\n\t\t\t\t\t\tstopWatch.getTotalTimeMillis());\n\t\t\t\tString counterKey = getKey("status." + status + suffix);\n\t\t\t\tMetricFilterAutoConfiguration.this.counterService.increment(counterKey);\n\t\t\t}\n\t\t}\n\n\t\tprivate String fixSpecialCharacters(String value) {\n\t\t\tString result = value.replaceAll("[{}]", "-");\n\t\t\tresult = result.replace("**", "-star-star-");\n\t\t\tresult = result.replace("*", "-star-");\n\t\t\tresult = result.replace("/-", "/");\n\t\t\tresult = result.replace("-/", "/");\n\t\t\tif (result.endsWith("-")) {\n\t\t\t\tresult = result.substring(0, result.length() - 1);\n\t\t\t}\n\t\t\tif (result.startsWith("-")) {\n\t\t\t\tresult = result.substring(1);\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\n\t\tprivate int getStatus(HttpServletResponse response) {\n\t\t\ttry {\n\t\t\t\treturn response.getStatus();\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\treturn UNDEFINED_HTTP_STATUS;\n\t\t\t}\n\t\t}\n\n\t\tprivate String getKey(String string) {\n\t\t\t// graphite compatible metric names\n\t\t\tString value = string.replace("/", ".");\n\t\t\tvalue = value.replace("..", ".");\n\t\t\tif (value.endsWith(".")) {\n\t\t\t\tvalue = value + "root";\n\t\t\t}\n\t\t\tif (value.startsWith("_")) {\n\t\t\t\tvalue = value.substring(1);\n\t\t\t}\n\t\t\treturn value;\n\t\t}\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport java.io.IOException;\n\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.Servlet;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRegistration;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuate.metrics.CounterService;\nimport org.springframework.boot.actuate.metrics.GaugeService;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.util.StopWatch;\nimport org.springframework.web.filter.OncePerRequestFilter;\nimport org.springframework.web.servlet.HandlerMapping;\nimport org.springframework.web.util.UrlPathHelper;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} that records Servlet interactions\n * with a {@link CounterService} and {@link GaugeService}.\n *\n * @author Dave Syer\n * @author Phillip Webb\n */\n@Configuration\n@ConditionalOnBean({ CounterService.class, GaugeService.class })\n@ConditionalOnClass({ Servlet.class, ServletRegistration.class })\n@AutoConfigureAfter(MetricRepositoryAutoConfiguration.class)\npublic class MetricFilterAutoConfiguration {\n\n\tprivate static final int UNDEFINED_HTTP_STATUS = 999;\n\n\tprivate static final String UNKNOWN_PATH_SUFFIX = "/unmapped";\n\n\t@Autowired\n\tprivate CounterService counterService;\n\n\t@Autowired\n\tprivate GaugeService gaugeService;\n\n\t@Bean\n\tpublic Filter metricFilter() {\n\t\treturn new MetricsFilter();\n\t}\n\n\t/**\n\t * Filter that counts requests and measures processing times.\n\t */\n\t@Order(Ordered.HIGHEST_PRECEDENCE)\n\tprivate final class MetricsFilter extends OncePerRequestFilter {\n\n\t\t@Override\n\t\tprotected void doFilterInternal(HttpServletRequest request,\n\t\t\t\tHttpServletResponse response, FilterChain chain) throws ServletException,\n\t\t\t\tIOException {\n\t\t\tUrlPathHelper helper = new UrlPathHelper();\n\t\t\tString suffix = helper.getPathWithinApplication(request);\n\t\t\tStopWatch stopWatch = new StopWatch();\n\t\t\tstopWatch.start();\n\t\t\ttry {\n\t\t\t\tchain.doFilter(request, response);\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tstopWatch.stop();\n\t\t\t\tint status = getStatus(response);\n\t\t\t\tObject bestMatchingPattern = request\n\t\t\t\t\t\t.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE);\n\t\t\t\tHttpStatus httpStatus = HttpStatus.OK;\n\t\t\t\ttry {\n\t\t\t\t\thttpStatus = HttpStatus.valueOf(status);\n\t\t\t\t}\n\t\t\t\tcatch (Exception ex) {\n\t\t\t\t\t// not convertible\n\t\t\t\t}\n\t\t\t\tif (bestMatchingPattern != null) {\n\t\t\t\t\tsuffix = fixSpecialCharacters(bestMatchingPattern.toString());\n\t\t\t\t}\n\t\t\t\telse if (httpStatus.is4xxClientError()) {\n\t\t\t\t\tsuffix = UNKNOWN_PATH_SUFFIX;\n\t\t\t\t}\n\t\t\t\tString gaugeKey = getKey("response" + suffix);\n\t\t\t\tMetricFilterAutoConfiguration.this.gaugeService.submit(gaugeKey,\n\t\t\t\t\t\tstopWatch.getTotalTimeMillis());\n\t\t\t\tString counterKey = getKey("status." + status + suffix);\n\t\t\t\tMetricFilterAutoConfiguration.this.counterService.increment(counterKey);\n\t\t\t}\n\t\t}\n\n\t\tprivate String fixSpecialCharacters(String value) {\n\t\t\tString result = value.replaceAll("[{}]", "-");\n\t\t\tresult = result.replace("**", "-star-star-");\n\t\t\tresult = result.replace("*", "-star-");\n\t\t\tresult = result.replace("/-", "/");\n\t\t\tresult = result.replace("-/", "/");\n\t\t\tif (result.endsWith("-")) {\n\t\t\t\tresult = result.substring(0, result.length() - 1);\n\t\t\t}\n\t\t\tif (result.startsWith("-")) {\n\t\t\t\tresult = result.substring(1);\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\n\t\tprivate int getStatus(HttpServletResponse response) {\n\t\t\ttry {\n\t\t\t\treturn response.getStatus();\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\treturn UNDEFINED_HTTP_STATUS;\n\t\t\t}\n\t\t}\n\n\t\tprivate String getKey(String string) {\n\t\t\t// graphite compatible metric names\n\t\t\tString value = string.replace("/", ".");\n\t\t\tvalue = value.replace("..", ".");\n\t\t\tif (value.endsWith(".")) {\n\t\t\t\tvalue = value + "root";\n\t\t\t}\n\t\t\tif (value.startsWith("_")) {\n\t\t\t\tvalue = value.substring(1);\n\t\t\t}\n\t\t\treturn value;\n\t\t}\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
