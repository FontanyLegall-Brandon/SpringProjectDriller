{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -30,11 +30,21 @@ import javax.servlet.http.HttpServletRequest;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n \n+import org.springframework.beans.BeansException;\n import org.springframework.beans.factory.BeanFactory;\n+import org.springframework.beans.factory.BeanFactoryUtils;\n+import org.springframework.beans.factory.DisposableBean;\n+import org.springframework.beans.factory.InitializingBean;\n import org.springframework.beans.factory.ListableBeanFactory;\n import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.config.BeanDefinition;\n+import org.springframework.beans.factory.config.BeanFactoryPostProcessor;\n+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n+import org.springframework.beans.factory.support.BeanDefinitionRegistry;\n+import org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;\n+import org.springframework.beans.factory.support.RootBeanDefinition;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.AutoConfigureOrder;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n@@ -43,27 +53,38 @@ import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.autoconfigure.validation.DelegatingValidator;\n import org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration;\n import org.springframework.boot.autoconfigure.web.ResourceProperties.Strategy;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.boot.web.filter.OrderedHiddenHttpMethodFilter;\n import org.springframework.boot.web.filter.OrderedHttpPutFormContentFilter;\n import org.springframework.boot.web.filter.OrderedRequestContextFilter;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ApplicationContextAware;\n import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.ConditionContext;\n+import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.ConfigurationCondition;\n import org.springframework.context.annotation.Import;\n import org.springframework.context.annotation.Primary;\n+import org.springframework.context.annotation.Role;\n import org.springframework.core.Ordered;\n+import org.springframework.core.annotation.Order;\n import org.springframework.core.convert.converter.Converter;\n import org.springframework.core.convert.converter.GenericConverter;\n import org.springframework.core.io.Resource;\n+import org.springframework.core.type.AnnotatedTypeMetadata;\n import org.springframework.format.Formatter;\n import org.springframework.format.FormatterRegistry;\n import org.springframework.format.datetime.DateFormatter;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.MediaType;\n import org.springframework.http.converter.HttpMessageConverter;\n+import org.springframework.util.Assert;\n import org.springframework.util.ClassUtils;\n+import org.springframework.util.ObjectUtils;\n import org.springframework.util.StringUtils;\n import org.springframework.validation.DefaultMessageCodesResolver;\n import org.springframework.validation.MessageCodesResolver;\n@@ -142,6 +163,12 @@ public class WebMvcAutoConfiguration {\n \tpublic static final String SKIP_PATH_EXTENSION_CONTENT_NEGOTIATION_ATTRIBUTE = PathExtensionContentNegotiationStrategy.class\n \t\t\t.getName() + ".SKIP";\n \n+\t@Bean\n+\t@Role(BeanDefinition.ROLE_INFRASTRUCTURE)\n+\tpublic static MvcValidatorPostProcessor mvcValidatorAliasPostProcessor() {\n+\t\treturn new MvcValidatorPostProcessor();\n+\t}\n+\n \t@Bean\n \t@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)\n \tpublic OrderedHiddenHttpMethodFilter hiddenHttpMethodFilter() {\n@@ -367,21 +394,22 @@ public class WebMvcAutoConfiguration {\n \t * Configuration equivalent to {@code @EnableWebMvc}.\n \t */\n \t@Configuration\n-\tpublic static class EnableWebMvcConfiguration extends DelegatingWebMvcConfiguration {\n+\tpublic static class EnableWebMvcConfiguration extends DelegatingWebMvcConfiguration\n+\t\t\timplements InitializingBean {\n \n \t\tprivate final WebMvcProperties mvcProperties;\n \n-\t\tprivate final ListableBeanFactory beanFactory;\n+\t\tprivate final ApplicationContext context;\n \n \t\tprivate final WebMvcRegistrations mvcRegistrations;\n \n \t\tpublic EnableWebMvcConfiguration(\n \t\t\t\tObjectProvider<WebMvcProperties> mvcPropertiesProvider,\n \t\t\t\tObjectProvider<WebMvcRegistrations> mvcRegistrationsProvider,\n-\t\t\t\tListableBeanFactory beanFactory) {\n+\t\t\t\tApplicationContext context) {\n \t\t\tthis.mvcProperties = mvcPropertiesProvider.getIfAvailable();\n \t\t\tthis.mvcRegistrations = mvcRegistrationsProvider.getIfUnique();\n-\t\t\tthis.beanFactory = beanFactory;\n+\t\t\tthis.context = context;\n \t\t}\n \n \t\t@Bean\n@@ -412,12 +440,9 @@ public class WebMvcAutoConfiguration {\n \n \t\t@Bean\n \t\t@Override\n+\t\t@Conditional(DisableMvcValidatorCondition.class)\n \t\tpublic Validator mvcValidator() {\n-\t\t\tif (!ClassUtils.isPresent("javax.validation.Validator",\n-\t\t\t\t\tgetClass().getClassLoader())) {\n-\t\t\t\treturn super.mvcValidator();\n-\t\t\t}\n-\t\t\treturn WebMvcValidator.get(getApplicationContext(), getValidator());\n+\t\t\treturn this.context.getBean("mvcValidator", Validator.class);\n \t\t}\n \n \t\t@Override\n@@ -432,7 +457,7 @@ public class WebMvcAutoConfiguration {\n \t\t@Override\n \t\tprotected ConfigurableWebBindingInitializer getConfigurableWebBindingInitializer() {\n \t\t\ttry {\n-\t\t\t\treturn this.beanFactory.getBean(ConfigurableWebBindingInitializer.class);\n+\t\t\t\treturn this.context.getBean(ConfigurableWebBindingInitializer.class);\n \t\t\t}\n \t\t\tcatch (NoSuchBeanDefinitionException ex) {\n \t\t\t\treturn super.getConfigurableWebBindingInitializer();\n@@ -481,6 +506,15 @@ public class WebMvcAutoConfiguration {\n \t\t\treturn manager;\n \t\t}\n \n+\t\t@Override\n+\t\tpublic void afterPropertiesSet() throws Exception {\n+\t\t\tAssert.state(getValidator() == null,\n+\t\t\t\t\t"Found unexpected validator configuration. A Spring Boot MVC "\n+\t\t\t\t\t\t\t+ "validator should be registered as bean named "\n+\t\t\t\t\t\t\t+ "\'mvcValidator\' and not returned from "\n+\t\t\t\t\t\t\t+ "WebMvcConfigurer.getValidator()");\n+\t\t}\n+\n \t}\n \n \t@Configuration\n@@ -606,4 +640,128 @@ public class WebMvcAutoConfiguration {\n \n \t}\n \n+\t/**\n+\t * Condition used to disable the default MVC validator registration. The\n+\t * {@link MvcValidatorPostProcessor} is used to configure the {@code mvcValidator}\n+\t * bean.\n+\t */\n+\tstatic class DisableMvcValidatorCondition implements ConfigurationCondition {\n+\n+\t\t@Override\n+\t\tpublic ConfigurationPhase getConfigurationPhase() {\n+\t\t\treturn ConfigurationPhase.REGISTER_BEAN;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t}\n+\n+\t/**\n+\t * {@link BeanFactoryPostProcessor} to deal with the MVC validator bean registration.\n+\t * Applies the following rules:\n+\t * <ul>\n+\t * <li>With no validators - Uses standard\n+\t * {@link WebMvcConfigurationSupport#mvcValidator()} logic.</li>\n+\t * <li>With a single validator - Uses an alias.</li>\n+\t * <li>With multiple validators - Registers a mvcValidator bean if not already\n+\t * defined.</li>\n+\t * </ul>\n+\t */\n+\t@Order(Ordered.LOWEST_PRECEDENCE)\n+\tstatic class MvcValidatorPostProcessor\n+\t\t\timplements BeanDefinitionRegistryPostProcessor {\n+\n+\t\tprivate static final String JSR303_VALIDATOR_CLASS = "javax.validation.Validator";\n+\n+\t\t@Override\n+\t\tpublic void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry)\n+\t\t\t\tthrows BeansException {\n+\t\t\tif (registry instanceof ListableBeanFactory) {\n+\t\t\t\tpostProcess(registry, (ListableBeanFactory) registry);\n+\t\t\t}\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)\n+\t\t\t\tthrows BeansException {\n+\t\t}\n+\n+\t\tprivate void postProcess(BeanDefinitionRegistry registry,\n+\t\t\t\tListableBeanFactory beanFactory) {\n+\t\t\tString[] validatorBeans = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(\n+\t\t\t\t\tbeanFactory, Validator.class, false, false);\n+\t\t\tif (validatorBeans.length == 0) {\n+\t\t\t\tregisterMvcValidator(registry, beanFactory);\n+\t\t\t}\n+\t\t\telse if (validatorBeans.length == 1) {\n+\t\t\t\tregistry.registerAlias(validatorBeans[0], "mvcValidator");\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tif (!ObjectUtils.containsElement(validatorBeans, "mvcValidator")) {\n+\t\t\t\t\tregisterMvcValidator(registry, beanFactory);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\tprivate void registerMvcValidator(BeanDefinitionRegistry registry,\n+\t\t\t\tListableBeanFactory beanFactory) {\n+\t\t\tRootBeanDefinition definition = new RootBeanDefinition();\n+\t\t\tdefinition.setBeanClass(getClass());\n+\t\t\tdefinition.setFactoryMethodName("mvcValidator");\n+\t\t\tregistry.registerBeanDefinition("mvcValidator", definition);\n+\t\t}\n+\n+\t\tstatic Validator mvcValidator() {\n+\t\t\tValidator validator = new WebMvcConfigurationSupport().mvcValidator();\n+\t\t\ttry {\n+\t\t\t\tif (ClassUtils.forName(JSR303_VALIDATOR_CLASS, null)\n+\t\t\t\t\t\t.isInstance(validator)) {\n+\t\t\t\t\treturn new DelegatingWebMvcValidator(validator);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t}\n+\t\t\treturn validator;\n+\t\t}\n+\n+\t}\n+\n+\t/**\n+\t * {@link DelegatingValidator} for the MVC validator.\n+\t */\n+\tstatic class DelegatingWebMvcValidator extends DelegatingValidator\n+\t\t\timplements ApplicationContextAware, InitializingBean, DisposableBean {\n+\n+\t\tpublic DelegatingWebMvcValidator(Validator targetValidator) {\n+\t\t\tsuper(targetValidator);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void setApplicationContext(ApplicationContext applicationContext)\n+\t\t\t\tthrows BeansException {\n+\t\t\tif (getDelegate() instanceof ApplicationContextAware) {\n+\t\t\t\t((ApplicationContextAware) getDelegate())\n+\t\t\t\t\t\t.setApplicationContext(applicationContext);\n+\t\t\t}\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void afterPropertiesSet() throws Exception {\n+\t\t\tif (getDelegate() instanceof InitializingBean) {\n+\t\t\t\t((InitializingBean) getDelegate()).afterPropertiesSet();\n+\t\t\t}\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void destroy() throws Exception {\n+\t\t\tif (getDelegate() instanceof DisposableBean) {\n+\t\t\t\t((DisposableBean) getDelegate()).destroy();\n+\t\t\t}\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\nimport javax.servlet.Servlet;\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryUtils;\nimport org.springframework.beans.factory.DisposableBean;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.beans.factory.ListableBeanFactory;\nimport org.springframework.beans.factory.NoSuchBeanDefinitionException;\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.config.BeanDefinition;\nimport org.springframework.beans.factory.config.BeanFactoryPostProcessor;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistry;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;\nimport org.springframework.beans.factory.support.RootBeanDefinition;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureOrder;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.validation.DelegatingValidator;\nimport org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.ResourceProperties.Strategy;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.web.filter.OrderedHiddenHttpMethodFilter;\nimport org.springframework.boot.web.filter.OrderedHttpPutFormContentFilter;\nimport org.springframework.boot.web.filter.OrderedRequestContextFilter;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.ConfigurationCondition;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.context.annotation.Role;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.core.convert.converter.GenericConverter;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.format.Formatter;\nimport org.springframework.format.FormatterRegistry;\nimport org.springframework.format.datetime.DateFormatter;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.util.Assert;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.ObjectUtils;\nimport org.springframework.util.StringUtils;\nimport org.springframework.validation.DefaultMessageCodesResolver;\nimport org.springframework.validation.MessageCodesResolver;\nimport org.springframework.validation.Validator;\nimport org.springframework.web.HttpMediaTypeNotAcceptableException;\nimport org.springframework.web.accept.ContentNegotiationManager;\nimport org.springframework.web.accept.ContentNegotiationStrategy;\nimport org.springframework.web.accept.PathExtensionContentNegotiationStrategy;\nimport org.springframework.web.bind.support.ConfigurableWebBindingInitializer;\nimport org.springframework.web.context.request.NativeWebRequest;\nimport org.springframework.web.context.request.RequestAttributes;\nimport org.springframework.web.context.request.RequestContextListener;\nimport org.springframework.web.filter.HiddenHttpMethodFilter;\nimport org.springframework.web.filter.HttpPutFormContentFilter;\nimport org.springframework.web.filter.RequestContextFilter;\nimport org.springframework.web.servlet.DispatcherServlet;\nimport org.springframework.web.servlet.HandlerExceptionResolver;\nimport org.springframework.web.servlet.LocaleResolver;\nimport org.springframework.web.servlet.View;\nimport org.springframework.web.servlet.ViewResolver;\nimport org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer;\nimport org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer;\nimport org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\nimport org.springframework.web.servlet.config.annotation.ResourceChainRegistration;\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration;\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\nimport org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver;\nimport org.springframework.web.servlet.handler.AbstractUrlHandlerMapping;\nimport org.springframework.web.servlet.handler.SimpleUrlHandlerMapping;\nimport org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver;\nimport org.springframework.web.servlet.i18n.FixedLocaleResolver;\nimport org.springframework.web.servlet.mvc.ParameterizableViewController;\nimport org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver;\nimport org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;\nimport org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;\nimport org.springframework.web.servlet.resource.AppCacheManifestTransformer;\nimport org.springframework.web.servlet.resource.GzipResourceResolver;\nimport org.springframework.web.servlet.resource.ResourceHttpRequestHandler;\nimport org.springframework.web.servlet.resource.ResourceResolver;\nimport org.springframework.web.servlet.resource.VersionResourceResolver;\nimport org.springframework.web.servlet.view.BeanNameViewResolver;\nimport org.springframework.web.servlet.view.ContentNegotiatingViewResolver;\nimport org.springframework.web.servlet.view.InternalResourceViewResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link EnableWebMvc Web MVC}.\n *\n * @author Phillip Webb\n * @author Dave Syer\n * @author Andy Wilkinson\n * @author Sébastien Deleuze\n * @author Eddú Meléndez\n * @author Stephane Nicoll\n */\n@Configuration\n@ConditionalOnWebApplication\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class,\n\t\tWebMvcConfigurerAdapter.class })\n@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)\n@AutoConfigureAfter({ DispatcherServletAutoConfiguration.class,\n\t\tValidationAutoConfiguration.class })\npublic class WebMvcAutoConfiguration {\n\n\tpublic static final String DEFAULT_PREFIX = "";\n\n\tpublic static final String DEFAULT_SUFFIX = "";\n\n\t/**\n\t * Attribute that can be added to the web request when the\n\t * {@link PathExtensionContentNegotiationStrategy} should be be skipped.\n\t */\n\tpublic static final String SKIP_PATH_EXTENSION_CONTENT_NEGOTIATION_ATTRIBUTE = PathExtensionContentNegotiationStrategy.class\n\t\t\t.getName() + ".SKIP";\n\n\t@Bean\n\t@Role(BeanDefinition.ROLE_INFRASTRUCTURE)\n\tpublic static MvcValidatorPostProcessor mvcValidatorAliasPostProcessor() {\n\t\treturn new MvcValidatorPostProcessor();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)\n\tpublic OrderedHiddenHttpMethodFilter hiddenHttpMethodFilter() {\n\t\treturn new OrderedHiddenHttpMethodFilter();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(HttpPutFormContentFilter.class)\n\t@ConditionalOnProperty(prefix = "spring.mvc.formcontent.putfilter", name = "enabled", matchIfMissing = true)\n\tpublic OrderedHttpPutFormContentFilter httpPutFormContentFilter() {\n\t\treturn new OrderedHttpPutFormContentFilter();\n\t}\n\n\t// Defined as a nested config to ensure WebMvcConfigurerAdapter is not read when not\n\t// on the classpath\n\t@Configuration\n\t@Import(EnableWebMvcConfiguration.class)\n\t@EnableConfigurationProperties({ WebMvcProperties.class, ResourceProperties.class })\n\tpublic static class WebMvcAutoConfigurationAdapter extends WebMvcConfigurerAdapter {\n\n\t\tprivate static final Log logger = LogFactory\n\t\t\t\t.getLog(WebMvcConfigurerAdapter.class);\n\n\t\tprivate final ResourceProperties resourceProperties;\n\n\t\tprivate final WebMvcProperties mvcProperties;\n\n\t\tprivate final ListableBeanFactory beanFactory;\n\n\t\tprivate final HttpMessageConverters messageConverters;\n\n\t\tfinal ResourceHandlerRegistrationCustomizer resourceHandlerRegistrationCustomizer;\n\n\t\tpublic WebMvcAutoConfigurationAdapter(ResourceProperties resourceProperties,\n\t\t\t\tWebMvcProperties mvcProperties, ListableBeanFactory beanFactory,\n\t\t\t\tHttpMessageConverters messageConverters,\n\t\t\t\tObjectProvider<ResourceHandlerRegistrationCustomizer> resourceHandlerRegistrationCustomizerProvider) {\n\t\t\tthis.resourceProperties = resourceProperties;\n\t\t\tthis.mvcProperties = mvcProperties;\n\t\t\tthis.beanFactory = beanFactory;\n\t\t\tthis.messageConverters = messageConverters;\n\t\t\tthis.resourceHandlerRegistrationCustomizer = resourceHandlerRegistrationCustomizerProvider\n\t\t\t\t\t.getIfAvailable();\n\t\t}\n\n\t\t@Override\n\t\tpublic void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n\t\t\tconverters.addAll(this.messageConverters.getConverters());\n\t\t}\n\n\t\t@Override\n\t\tpublic void configureAsyncSupport(AsyncSupportConfigurer configurer) {\n\t\t\tLong timeout = this.mvcProperties.getAsync().getRequestTimeout();\n\t\t\tif (timeout != null) {\n\t\t\t\tconfigurer.setDefaultTimeout(timeout);\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void configureContentNegotiation(ContentNegotiationConfigurer configurer) {\n\t\t\tMap<String, MediaType> mediaTypes = this.mvcProperties.getMediaTypes();\n\t\t\tfor (Entry<String, MediaType> mediaType : mediaTypes.entrySet()) {\n\t\t\t\tconfigurer.mediaType(mediaType.getKey(), mediaType.getValue());\n\t\t\t}\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic InternalResourceViewResolver defaultViewResolver() {\n\t\t\tInternalResourceViewResolver resolver = new InternalResourceViewResolver();\n\t\t\tresolver.setPrefix(this.mvcProperties.getView().getPrefix());\n\t\t\tresolver.setSuffix(this.mvcProperties.getView().getSuffix());\n\t\t\treturn resolver;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnBean(View.class)\n\t\t@ConditionalOnMissingBean\n\t\tpublic BeanNameViewResolver beanNameViewResolver() {\n\t\t\tBeanNameViewResolver resolver = new BeanNameViewResolver();\n\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 10);\n\t\t\treturn resolver;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnBean(ViewResolver.class)\n\t\t@ConditionalOnMissingBean(name = "viewResolver", value = ContentNegotiatingViewResolver.class)\n\t\tpublic ContentNegotiatingViewResolver viewResolver(BeanFactory beanFactory) {\n\t\t\tContentNegotiatingViewResolver resolver = new ContentNegotiatingViewResolver();\n\t\t\tresolver.setContentNegotiationManager(\n\t\t\t\t\tbeanFactory.getBean(ContentNegotiationManager.class));\n\t\t\t// ContentNegotiatingViewResolver uses all the other view resolvers to locate\n\t\t\t// a view so it should have a high precedence\n\t\t\tresolver.setOrder(Ordered.HIGHEST_PRECEDENCE);\n\t\t\treturn resolver;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnProperty(prefix = "spring.mvc", name = "locale")\n\t\tpublic LocaleResolver localeResolver() {\n\t\t\tif (this.mvcProperties\n\t\t\t\t\t.getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) {\n\t\t\t\treturn new FixedLocaleResolver(this.mvcProperties.getLocale());\n\t\t\t}\n\t\t\tAcceptHeaderLocaleResolver localeResolver = new AcceptHeaderLocaleResolver();\n\t\t\tlocaleResolver.setDefaultLocale(this.mvcProperties.getLocale());\n\t\t\treturn localeResolver;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnProperty(prefix = "spring.mvc", name = "date-format")\n\t\tpublic Formatter<Date> dateFormatter() {\n\t\t\treturn new DateFormatter(this.mvcProperties.getDateFormat());\n\t\t}\n\n\t\t@Override\n\t\tpublic MessageCodesResolver getMessageCodesResolver() {\n\t\t\tif (this.mvcProperties.getMessageCodesResolverFormat() != null) {\n\t\t\t\tDefaultMessageCodesResolver resolver = new DefaultMessageCodesResolver();\n\t\t\t\tresolver.setMessageCodeFormatter(\n\t\t\t\t\t\tthis.mvcProperties.getMessageCodesResolverFormat());\n\t\t\t\treturn resolver;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t@Override\n\t\tpublic void addFormatters(FormatterRegistry registry) {\n\t\t\tfor (Converter<?, ?> converter : getBeansOfType(Converter.class)) {\n\t\t\t\tregistry.addConverter(converter);\n\t\t\t}\n\t\t\tfor (GenericConverter converter : getBeansOfType(GenericConverter.class)) {\n\t\t\t\tregistry.addConverter(converter);\n\t\t\t}\n\t\t\tfor (Formatter<?> formatter : getBeansOfType(Formatter.class)) {\n\t\t\t\tregistry.addFormatter(formatter);\n\t\t\t}\n\t\t}\n\n\t\tprivate <T> Collection<T> getBeansOfType(Class<T> type) {\n\t\t\treturn this.beanFactory.getBeansOfType(type).values();\n\t\t}\n\n\t\t@Override\n\t\tpublic void addResourceHandlers(ResourceHandlerRegistry registry) {\n\t\t\tif (!this.resourceProperties.isAddMappings()) {\n\t\t\t\tlogger.debug("Default resource handling disabled");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tInteger cachePeriod = this.resourceProperties.getCachePeriod();\n\t\t\tif (!registry.hasMappingForPattern("/webjars/**")) {\n\t\t\t\tcustomizeResourceHandlerRegistration(\n\t\t\t\t\t\tregistry.addResourceHandler("/webjars/**")\n\t\t\t\t\t\t\t\t.addResourceLocations(\n\t\t\t\t\t\t\t\t\t\t"classpath:/META-INF/resources/webjars/")\n\t\t\t\t\t\t.setCachePeriod(cachePeriod));\n\t\t\t}\n\t\t\tString staticPathPattern = this.mvcProperties.getStaticPathPattern();\n\t\t\tif (!registry.hasMappingForPattern(staticPathPattern)) {\n\t\t\t\tcustomizeResourceHandlerRegistration(\n\t\t\t\t\t\tregistry.addResourceHandler(staticPathPattern)\n\t\t\t\t\t\t\t\t.addResourceLocations(\n\t\t\t\t\t\t\t\t\t\tthis.resourceProperties.getStaticLocations())\n\t\t\t\t\t\t.setCachePeriod(cachePeriod));\n\t\t\t}\n\t\t}\n\n\t\t@Bean\n\t\tpublic WelcomePageHandlerMapping welcomePageHandlerMapping(\n\t\t\t\tResourceProperties resourceProperties) {\n\t\t\treturn new WelcomePageHandlerMapping(resourceProperties.getWelcomePage(),\n\t\t\t\t\tthis.mvcProperties.getStaticPathPattern());\n\t\t}\n\n\t\tprivate void customizeResourceHandlerRegistration(\n\t\t\t\tResourceHandlerRegistration registration) {\n\t\t\tif (this.resourceHandlerRegistrationCustomizer != null) {\n\t\t\t\tthis.resourceHandlerRegistrationCustomizer.customize(registration);\n\t\t\t}\n\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean({ RequestContextListener.class,\n\t\t\t\tRequestContextFilter.class })\n\t\tpublic static RequestContextFilter requestContextFilter() {\n\t\t\treturn new OrderedRequestContextFilter();\n\t\t}\n\n\t\t@Configuration\n\t\t@ConditionalOnProperty(value = "spring.mvc.favicon.enabled", matchIfMissing = true)\n\t\tpublic static class FaviconConfiguration {\n\n\t\t\tprivate final ResourceProperties resourceProperties;\n\n\t\t\tpublic FaviconConfiguration(ResourceProperties resourceProperties) {\n\t\t\t\tthis.resourceProperties = resourceProperties;\n\t\t\t}\n\n\t\t\t@Bean\n\t\t\tpublic SimpleUrlHandlerMapping faviconHandlerMapping() {\n\t\t\t\tSimpleUrlHandlerMapping mapping = new SimpleUrlHandlerMapping();\n\t\t\t\tmapping.setOrder(Ordered.HIGHEST_PRECEDENCE + 1);\n\t\t\t\tmapping.setUrlMap(Collections.singletonMap("**/favicon.ico",\n\t\t\t\t\t\tfaviconRequestHandler()));\n\t\t\t\treturn mapping;\n\t\t\t}\n\n\t\t\t@Bean\n\t\t\tpublic ResourceHttpRequestHandler faviconRequestHandler() {\n\t\t\t\tResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler();\n\t\t\t\trequestHandler\n\t\t\t\t\t\t.setLocations(this.resourceProperties.getFaviconLocations());\n\t\t\t\treturn requestHandler;\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Configuration equivalent to {@code @EnableWebMvc}.\n\t */\n\t@Configuration\n\tpublic static class EnableWebMvcConfiguration extends DelegatingWebMvcConfiguration\n\t\t\timplements InitializingBean {\n\n\t\tprivate final WebMvcProperties mvcProperties;\n\n\t\tprivate final ApplicationContext context;\n\n\t\tprivate final WebMvcRegistrations mvcRegistrations;\n\n\t\tpublic EnableWebMvcConfiguration(\n\t\t\t\tObjectProvider<WebMvcProperties> mvcPropertiesProvider,\n\t\t\t\tObjectProvider<WebMvcRegistrations> mvcRegistrationsProvider,\n\t\t\t\tApplicationContext context) {\n\t\t\tthis.mvcProperties = mvcPropertiesProvider.getIfAvailable();\n\t\t\tthis.mvcRegistrations = mvcRegistrationsProvider.getIfUnique();\n\t\t\tthis.context = context;\n\t\t}\n\n\t\t@Bean\n\t\t@Override\n\t\tpublic RequestMappingHandlerAdapter requestMappingHandlerAdapter() {\n\t\t\tRequestMappingHandlerAdapter adapter = super.requestMappingHandlerAdapter();\n\t\t\tadapter.setIgnoreDefaultModelOnRedirect(this.mvcProperties == null ? true\n\t\t\t\t\t: this.mvcProperties.isIgnoreDefaultModelOnRedirect());\n\t\t\treturn adapter;\n\t\t}\n\n\t\t@Override\n\t\tprotected RequestMappingHandlerAdapter createRequestMappingHandlerAdapter() {\n\t\t\tif (this.mvcRegistrations != null\n\t\t\t\t\t&& this.mvcRegistrations.getRequestMappingHandlerAdapter() != null) {\n\t\t\t\treturn this.mvcRegistrations.getRequestMappingHandlerAdapter();\n\t\t\t}\n\t\t\treturn super.createRequestMappingHandlerAdapter();\n\t\t}\n\n\t\t@Bean\n\t\t@Primary\n\t\t@Override\n\t\tpublic RequestMappingHandlerMapping requestMappingHandlerMapping() {\n\t\t\t// Must be @Primary for MvcUriComponentsBuilder to work\n\t\t\treturn super.requestMappingHandlerMapping();\n\t\t}\n\n\t\t@Bean\n\t\t@Override\n\t\t@Conditional(DisableMvcValidatorCondition.class)\n\t\tpublic Validator mvcValidator() {\n\t\t\treturn this.context.getBean("mvcValidator", Validator.class);\n\t\t}\n\n\t\t@Override\n\t\tprotected RequestMappingHandlerMapping createRequestMappingHandlerMapping() {\n\t\t\tif (this.mvcRegistrations != null\n\t\t\t\t\t&& this.mvcRegistrations.getRequestMappingHandlerMapping() != null) {\n\t\t\t\treturn this.mvcRegistrations.getRequestMappingHandlerMapping();\n\t\t\t}\n\t\t\treturn super.createRequestMappingHandlerMapping();\n\t\t}\n\n\t\t@Override\n\t\tprotected ConfigurableWebBindingInitializer getConfigurableWebBindingInitializer() {\n\t\t\ttry {\n\t\t\t\treturn this.context.getBean(ConfigurableWebBindingInitializer.class);\n\t\t\t}\n\t\t\tcatch (NoSuchBeanDefinitionException ex) {\n\t\t\t\treturn super.getConfigurableWebBindingInitializer();\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tprotected ExceptionHandlerExceptionResolver createExceptionHandlerExceptionResolver() {\n\t\t\tif (this.mvcRegistrations != null && this.mvcRegistrations\n\t\t\t\t\t.getExceptionHandlerExceptionResolver() != null) {\n\t\t\t\treturn this.mvcRegistrations.getExceptionHandlerExceptionResolver();\n\t\t\t}\n\t\t\treturn super.createExceptionHandlerExceptionResolver();\n\t\t}\n\n\t\t@Override\n\t\tprotected void configureHandlerExceptionResolvers(\n\t\t\t\tList<HandlerExceptionResolver> exceptionResolvers) {\n\t\t\tsuper.configureHandlerExceptionResolvers(exceptionResolvers);\n\t\t\tif (exceptionResolvers.isEmpty()) {\n\t\t\t\taddDefaultHandlerExceptionResolvers(exceptionResolvers);\n\t\t\t}\n\t\t\tif (this.mvcProperties.isLogResolvedException()) {\n\t\t\t\tfor (HandlerExceptionResolver resolver : exceptionResolvers) {\n\t\t\t\t\tif (resolver instanceof AbstractHandlerExceptionResolver) {\n\t\t\t\t\t\t((AbstractHandlerExceptionResolver) resolver)\n\t\t\t\t\t\t\t\t.setWarnLogCategory(resolver.getClass().getName());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t@Bean\n\t\t@Override\n\t\tpublic ContentNegotiationManager mvcContentNegotiationManager() {\n\t\t\tContentNegotiationManager manager = super.mvcContentNegotiationManager();\n\t\t\tList<ContentNegotiationStrategy> strategies = manager.getStrategies();\n\t\t\tListIterator<ContentNegotiationStrategy> iterator = strategies.listIterator();\n\t\t\twhile (iterator.hasNext()) {\n\t\t\t\tContentNegotiationStrategy strategy = iterator.next();\n\t\t\t\tif (strategy instanceof PathExtensionContentNegotiationStrategy) {\n\t\t\t\t\titerator.set(new OptionalPathExtensionContentNegotiationStrategy(\n\t\t\t\t\t\t\tstrategy));\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn manager;\n\t\t}\n\n\t\t@Override\n\t\tpublic void afterPropertiesSet() throws Exception {\n\t\t\tAssert.state(getValidator() == null,\n\t\t\t\t\t"Found unexpected validator configuration. A Spring Boot MVC "\n\t\t\t\t\t\t\t+ "validator should be registered as bean named "\n\t\t\t\t\t\t\t+ "\'mvcValidator\' and not returned from "\n\t\t\t\t\t\t\t+ "WebMvcConfigurer.getValidator()");\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnEnabledResourceChain\n\tstatic class ResourceChainCustomizerConfiguration {\n\n\t\t@Bean\n\t\tpublic ResourceChainResourceHandlerRegistrationCustomizer resourceHandlerRegistrationCustomizer() {\n\t\t\treturn new ResourceChainResourceHandlerRegistrationCustomizer();\n\t\t}\n\n\t}\n\n\tinterface ResourceHandlerRegistrationCustomizer {\n\n\t\tvoid customize(ResourceHandlerRegistration registration);\n\n\t}\n\n\tprivate static class ResourceChainResourceHandlerRegistrationCustomizer\n\t\t\timplements ResourceHandlerRegistrationCustomizer {\n\n\t\t@Autowired\n\t\tprivate ResourceProperties resourceProperties = new ResourceProperties();\n\n\t\t@Override\n\t\tpublic void customize(ResourceHandlerRegistration registration) {\n\t\t\tResourceProperties.Chain properties = this.resourceProperties.getChain();\n\t\t\tconfigureResourceChain(properties,\n\t\t\t\t\tregistration.resourceChain(properties.isCache()));\n\t\t}\n\n\t\tprivate void configureResourceChain(ResourceProperties.Chain properties,\n\t\t\t\tResourceChainRegistration chain) {\n\t\t\tStrategy strategy = properties.getStrategy();\n\t\t\tif (strategy.getFixed().isEnabled() || strategy.getContent().isEnabled()) {\n\t\t\t\tchain.addResolver(getVersionResourceResolver(strategy));\n\t\t\t}\n\t\t\tif (properties.isGzipped()) {\n\t\t\t\tchain.addResolver(new GzipResourceResolver());\n\t\t\t}\n\t\t\tif (properties.isHtmlApplicationCache()) {\n\t\t\t\tchain.addTransformer(new AppCacheManifestTransformer());\n\t\t\t}\n\t\t}\n\n\t\tprivate ResourceResolver getVersionResourceResolver(\n\t\t\t\tResourceProperties.Strategy properties) {\n\t\t\tVersionResourceResolver resolver = new VersionResourceResolver();\n\t\t\tif (properties.getFixed().isEnabled()) {\n\t\t\t\tString version = properties.getFixed().getVersion();\n\t\t\t\tString[] paths = properties.getFixed().getPaths();\n\t\t\t\tresolver.addFixedVersionStrategy(version, paths);\n\t\t\t}\n\t\t\tif (properties.getContent().isEnabled()) {\n\t\t\t\tString[] paths = properties.getContent().getPaths();\n\t\t\t\tresolver.addContentVersionStrategy(paths);\n\t\t\t}\n\t\t\treturn resolver;\n\t\t}\n\n\t}\n\n\tstatic final class WelcomePageHandlerMapping extends AbstractUrlHandlerMapping {\n\n\t\tprivate static final Log logger = LogFactory\n\t\t\t\t.getLog(WelcomePageHandlerMapping.class);\n\n\t\tprivate WelcomePageHandlerMapping(Resource welcomePage,\n\t\t\t\tString staticPathPattern) {\n\t\t\tif (welcomePage != null && "/**".equals(staticPathPattern)) {\n\t\t\t\tlogger.info("Adding welcome page: " + welcomePage);\n\t\t\t\tParameterizableViewController controller = new ParameterizableViewController();\n\t\t\t\tcontroller.setViewName("forward:index.html");\n\t\t\t\tsetRootHandler(controller);\n\t\t\t\tsetOrder(0);\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic Object getHandlerInternal(HttpServletRequest request) throws Exception {\n\t\t\tfor (MediaType mediaType : getAcceptedMediaTypes(request)) {\n\t\t\t\tif (mediaType.includes(MediaType.TEXT_HTML)) {\n\t\t\t\t\treturn super.getHandlerInternal(request);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\tprivate List<MediaType> getAcceptedMediaTypes(HttpServletRequest request) {\n\t\t\tString acceptHeader = request.getHeader(HttpHeaders.ACCEPT);\n\t\t\treturn MediaType.parseMediaTypes(\n\t\t\t\t\tStringUtils.hasText(acceptHeader) ? acceptHeader : "*/*");\n\t\t}\n\n\t}\n\n\t/**\n\t * Decorator to make {@link PathExtensionContentNegotiationStrategy} optional\n\t * depending on a request attribute.\n\t */\n\tstatic class OptionalPathExtensionContentNegotiationStrategy\n\t\t\timplements ContentNegotiationStrategy {\n\n\t\tprivate final ContentNegotiationStrategy delegate;\n\n\t\tOptionalPathExtensionContentNegotiationStrategy(\n\t\t\t\tContentNegotiationStrategy delegate) {\n\t\t\tthis.delegate = delegate;\n\t\t}\n\n\t\t@Override\n\t\tpublic List<MediaType> resolveMediaTypes(NativeWebRequest webRequest)\n\t\t\t\tthrows HttpMediaTypeNotAcceptableException {\n\t\t\tObject skip = webRequest.getAttribute(\n\t\t\t\t\tSKIP_PATH_EXTENSION_CONTENT_NEGOTIATION_ATTRIBUTE,\n\t\t\t\t\tRequestAttributes.SCOPE_REQUEST);\n\t\t\tif (skip != null && Boolean.parseBoolean(skip.toString())) {\n\t\t\t\treturn Collections.emptyList();\n\t\t\t}\n\t\t\treturn this.delegate.resolveMediaTypes(webRequest);\n\t\t}\n\n\t}\n\n\t/**\n\t * Condition used to disable the default MVC validator registration. The\n\t * {@link MvcValidatorPostProcessor} is used to configure the {@code mvcValidator}\n\t * bean.\n\t */\n\tstatic class DisableMvcValidatorCondition implements ConfigurationCondition {\n\n\t\t@Override\n\t\tpublic ConfigurationPhase getConfigurationPhase() {\n\t\t\treturn ConfigurationPhase.REGISTER_BEAN;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n\t\t\treturn false;\n\t\t}\n\n\t}\n\n\t/**\n\t * {@link BeanFactoryPostProcessor} to deal with the MVC validator bean registration.\n\t * Applies the following rules:\n\t * <ul>\n\t * <li>With no validators - Uses standard\n\t * {@link WebMvcConfigurationSupport#mvcValidator()} logic.</li>\n\t * <li>With a single validator - Uses an alias.</li>\n\t * <li>With multiple validators - Registers a mvcValidator bean if not already\n\t * defined.</li>\n\t * </ul>\n\t */\n\t@Order(Ordered.LOWEST_PRECEDENCE)\n\tstatic class MvcValidatorPostProcessor\n\t\t\timplements BeanDefinitionRegistryPostProcessor {\n\n\t\tprivate static final String JSR303_VALIDATOR_CLASS = "javax.validation.Validator";\n\n\t\t@Override\n\t\tpublic void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry)\n\t\t\t\tthrows BeansException {\n\t\t\tif (registry instanceof ListableBeanFactory) {\n\t\t\t\tpostProcess(registry, (ListableBeanFactory) registry);\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)\n\t\t\t\tthrows BeansException {\n\t\t}\n\n\t\tprivate void postProcess(BeanDefinitionRegistry registry,\n\t\t\t\tListableBeanFactory beanFactory) {\n\t\t\tString[] validatorBeans = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(\n\t\t\t\t\tbeanFactory, Validator.class, false, false);\n\t\t\tif (validatorBeans.length == 0) {\n\t\t\t\tregisterMvcValidator(registry, beanFactory);\n\t\t\t}\n\t\t\telse if (validatorBeans.length == 1) {\n\t\t\t\tregistry.registerAlias(validatorBeans[0], "mvcValidator");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (!ObjectUtils.containsElement(validatorBeans, "mvcValidator")) {\n\t\t\t\t\tregisterMvcValidator(registry, beanFactory);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tprivate void registerMvcValidator(BeanDefinitionRegistry registry,\n\t\t\t\tListableBeanFactory beanFactory) {\n\t\t\tRootBeanDefinition definition = new RootBeanDefinition();\n\t\t\tdefinition.setBeanClass(getClass());\n\t\t\tdefinition.setFactoryMethodName("mvcValidator");\n\t\t\tregistry.registerBeanDefinition("mvcValidator", definition);\n\t\t}\n\n\t\tstatic Validator mvcValidator() {\n\t\t\tValidator validator = new WebMvcConfigurationSupport().mvcValidator();\n\t\t\ttry {\n\t\t\t\tif (ClassUtils.forName(JSR303_VALIDATOR_CLASS, null)\n\t\t\t\t\t\t.isInstance(validator)) {\n\t\t\t\t\treturn new DelegatingWebMvcValidator(validator);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t}\n\t\t\treturn validator;\n\t\t}\n\n\t}\n\n\t/**\n\t * {@link DelegatingValidator} for the MVC validator.\n\t */\n\tstatic class DelegatingWebMvcValidator extends DelegatingValidator\n\t\t\timplements ApplicationContextAware, InitializingBean, DisposableBean {\n\n\t\tpublic DelegatingWebMvcValidator(Validator targetValidator) {\n\t\t\tsuper(targetValidator);\n\t\t}\n\n\t\t@Override\n\t\tpublic void setApplicationContext(ApplicationContext applicationContext)\n\t\t\t\tthrows BeansException {\n\t\t\tif (getDelegate() instanceof ApplicationContextAware) {\n\t\t\t\t((ApplicationContextAware) getDelegate())\n\t\t\t\t\t\t.setApplicationContext(applicationContext);\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void afterPropertiesSet() throws Exception {\n\t\t\tif (getDelegate() instanceof InitializingBean) {\n\t\t\t\t((InitializingBean) getDelegate()).afterPropertiesSet();\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void destroy() throws Exception {\n\t\t\tif (getDelegate() instanceof DisposableBean) {\n\t\t\t\t((DisposableBean) getDelegate()).destroy();\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\nimport javax.servlet.Servlet;\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.ListableBeanFactory;\nimport org.springframework.beans.factory.NoSuchBeanDefinitionException;\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureOrder;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.ResourceProperties.Strategy;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.web.filter.OrderedHiddenHttpMethodFilter;\nimport org.springframework.boot.web.filter.OrderedHttpPutFormContentFilter;\nimport org.springframework.boot.web.filter.OrderedRequestContextFilter;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.core.convert.converter.GenericConverter;\nimport org.springframework.core.io.Resource;\nimport org.springframework.format.Formatter;\nimport org.springframework.format.FormatterRegistry;\nimport org.springframework.format.datetime.DateFormatter;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.StringUtils;\nimport org.springframework.validation.DefaultMessageCodesResolver;\nimport org.springframework.validation.MessageCodesResolver;\nimport org.springframework.validation.Validator;\nimport org.springframework.web.HttpMediaTypeNotAcceptableException;\nimport org.springframework.web.accept.ContentNegotiationManager;\nimport org.springframework.web.accept.ContentNegotiationStrategy;\nimport org.springframework.web.accept.PathExtensionContentNegotiationStrategy;\nimport org.springframework.web.bind.support.ConfigurableWebBindingInitializer;\nimport org.springframework.web.context.request.NativeWebRequest;\nimport org.springframework.web.context.request.RequestAttributes;\nimport org.springframework.web.context.request.RequestContextListener;\nimport org.springframework.web.filter.HiddenHttpMethodFilter;\nimport org.springframework.web.filter.HttpPutFormContentFilter;\nimport org.springframework.web.filter.RequestContextFilter;\nimport org.springframework.web.servlet.DispatcherServlet;\nimport org.springframework.web.servlet.HandlerExceptionResolver;\nimport org.springframework.web.servlet.LocaleResolver;\nimport org.springframework.web.servlet.View;\nimport org.springframework.web.servlet.ViewResolver;\nimport org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer;\nimport org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer;\nimport org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\nimport org.springframework.web.servlet.config.annotation.ResourceChainRegistration;\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration;\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\nimport org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver;\nimport org.springframework.web.servlet.handler.AbstractUrlHandlerMapping;\nimport org.springframework.web.servlet.handler.SimpleUrlHandlerMapping;\nimport org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver;\nimport org.springframework.web.servlet.i18n.FixedLocaleResolver;\nimport org.springframework.web.servlet.mvc.ParameterizableViewController;\nimport org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver;\nimport org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;\nimport org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;\nimport org.springframework.web.servlet.resource.AppCacheManifestTransformer;\nimport org.springframework.web.servlet.resource.GzipResourceResolver;\nimport org.springframework.web.servlet.resource.ResourceHttpRequestHandler;\nimport org.springframework.web.servlet.resource.ResourceResolver;\nimport org.springframework.web.servlet.resource.VersionResourceResolver;\nimport org.springframework.web.servlet.view.BeanNameViewResolver;\nimport org.springframework.web.servlet.view.ContentNegotiatingViewResolver;\nimport org.springframework.web.servlet.view.InternalResourceViewResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link EnableWebMvc Web MVC}.\n *\n * @author Phillip Webb\n * @author Dave Syer\n * @author Andy Wilkinson\n * @author Sébastien Deleuze\n * @author Eddú Meléndez\n * @author Stephane Nicoll\n */\n@Configuration\n@ConditionalOnWebApplication\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class,\n\t\tWebMvcConfigurerAdapter.class })\n@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)\n@AutoConfigureAfter({ DispatcherServletAutoConfiguration.class,\n\t\tValidationAutoConfiguration.class })\npublic class WebMvcAutoConfiguration {\n\n\tpublic static final String DEFAULT_PREFIX = "";\n\n\tpublic static final String DEFAULT_SUFFIX = "";\n\n\t/**\n\t * Attribute that can be added to the web request when the\n\t * {@link PathExtensionContentNegotiationStrategy} should be be skipped.\n\t */\n\tpublic static final String SKIP_PATH_EXTENSION_CONTENT_NEGOTIATION_ATTRIBUTE = PathExtensionContentNegotiationStrategy.class\n\t\t\t.getName() + ".SKIP";\n\n\t@Bean\n\t@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)\n\tpublic OrderedHiddenHttpMethodFilter hiddenHttpMethodFilter() {\n\t\treturn new OrderedHiddenHttpMethodFilter();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(HttpPutFormContentFilter.class)\n\t@ConditionalOnProperty(prefix = "spring.mvc.formcontent.putfilter", name = "enabled", matchIfMissing = true)\n\tpublic OrderedHttpPutFormContentFilter httpPutFormContentFilter() {\n\t\treturn new OrderedHttpPutFormContentFilter();\n\t}\n\n\t// Defined as a nested config to ensure WebMvcConfigurerAdapter is not read when not\n\t// on the classpath\n\t@Configuration\n\t@Import(EnableWebMvcConfiguration.class)\n\t@EnableConfigurationProperties({ WebMvcProperties.class, ResourceProperties.class })\n\tpublic static class WebMvcAutoConfigurationAdapter extends WebMvcConfigurerAdapter {\n\n\t\tprivate static final Log logger = LogFactory\n\t\t\t\t.getLog(WebMvcConfigurerAdapter.class);\n\n\t\tprivate final ResourceProperties resourceProperties;\n\n\t\tprivate final WebMvcProperties mvcProperties;\n\n\t\tprivate final ListableBeanFactory beanFactory;\n\n\t\tprivate final HttpMessageConverters messageConverters;\n\n\t\tfinal ResourceHandlerRegistrationCustomizer resourceHandlerRegistrationCustomizer;\n\n\t\tpublic WebMvcAutoConfigurationAdapter(ResourceProperties resourceProperties,\n\t\t\t\tWebMvcProperties mvcProperties, ListableBeanFactory beanFactory,\n\t\t\t\tHttpMessageConverters messageConverters,\n\t\t\t\tObjectProvider<ResourceHandlerRegistrationCustomizer> resourceHandlerRegistrationCustomizerProvider) {\n\t\t\tthis.resourceProperties = resourceProperties;\n\t\t\tthis.mvcProperties = mvcProperties;\n\t\t\tthis.beanFactory = beanFactory;\n\t\t\tthis.messageConverters = messageConverters;\n\t\t\tthis.resourceHandlerRegistrationCustomizer = resourceHandlerRegistrationCustomizerProvider\n\t\t\t\t\t.getIfAvailable();\n\t\t}\n\n\t\t@Override\n\t\tpublic void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n\t\t\tconverters.addAll(this.messageConverters.getConverters());\n\t\t}\n\n\t\t@Override\n\t\tpublic void configureAsyncSupport(AsyncSupportConfigurer configurer) {\n\t\t\tLong timeout = this.mvcProperties.getAsync().getRequestTimeout();\n\t\t\tif (timeout != null) {\n\t\t\t\tconfigurer.setDefaultTimeout(timeout);\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void configureContentNegotiation(ContentNegotiationConfigurer configurer) {\n\t\t\tMap<String, MediaType> mediaTypes = this.mvcProperties.getMediaTypes();\n\t\t\tfor (Entry<String, MediaType> mediaType : mediaTypes.entrySet()) {\n\t\t\t\tconfigurer.mediaType(mediaType.getKey(), mediaType.getValue());\n\t\t\t}\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic InternalResourceViewResolver defaultViewResolver() {\n\t\t\tInternalResourceViewResolver resolver = new InternalResourceViewResolver();\n\t\t\tresolver.setPrefix(this.mvcProperties.getView().getPrefix());\n\t\t\tresolver.setSuffix(this.mvcProperties.getView().getSuffix());\n\t\t\treturn resolver;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnBean(View.class)\n\t\t@ConditionalOnMissingBean\n\t\tpublic BeanNameViewResolver beanNameViewResolver() {\n\t\t\tBeanNameViewResolver resolver = new BeanNameViewResolver();\n\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 10);\n\t\t\treturn resolver;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnBean(ViewResolver.class)\n\t\t@ConditionalOnMissingBean(name = "viewResolver", value = ContentNegotiatingViewResolver.class)\n\t\tpublic ContentNegotiatingViewResolver viewResolver(BeanFactory beanFactory) {\n\t\t\tContentNegotiatingViewResolver resolver = new ContentNegotiatingViewResolver();\n\t\t\tresolver.setContentNegotiationManager(\n\t\t\t\t\tbeanFactory.getBean(ContentNegotiationManager.class));\n\t\t\t// ContentNegotiatingViewResolver uses all the other view resolvers to locate\n\t\t\t// a view so it should have a high precedence\n\t\t\tresolver.setOrder(Ordered.HIGHEST_PRECEDENCE);\n\t\t\treturn resolver;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnProperty(prefix = "spring.mvc", name = "locale")\n\t\tpublic LocaleResolver localeResolver() {\n\t\t\tif (this.mvcProperties\n\t\t\t\t\t.getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) {\n\t\t\t\treturn new FixedLocaleResolver(this.mvcProperties.getLocale());\n\t\t\t}\n\t\t\tAcceptHeaderLocaleResolver localeResolver = new AcceptHeaderLocaleResolver();\n\t\t\tlocaleResolver.setDefaultLocale(this.mvcProperties.getLocale());\n\t\t\treturn localeResolver;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnProperty(prefix = "spring.mvc", name = "date-format")\n\t\tpublic Formatter<Date> dateFormatter() {\n\t\t\treturn new DateFormatter(this.mvcProperties.getDateFormat());\n\t\t}\n\n\t\t@Override\n\t\tpublic MessageCodesResolver getMessageCodesResolver() {\n\t\t\tif (this.mvcProperties.getMessageCodesResolverFormat() != null) {\n\t\t\t\tDefaultMessageCodesResolver resolver = new DefaultMessageCodesResolver();\n\t\t\t\tresolver.setMessageCodeFormatter(\n\t\t\t\t\t\tthis.mvcProperties.getMessageCodesResolverFormat());\n\t\t\t\treturn resolver;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t@Override\n\t\tpublic void addFormatters(FormatterRegistry registry) {\n\t\t\tfor (Converter<?, ?> converter : getBeansOfType(Converter.class)) {\n\t\t\t\tregistry.addConverter(converter);\n\t\t\t}\n\t\t\tfor (GenericConverter converter : getBeansOfType(GenericConverter.class)) {\n\t\t\t\tregistry.addConverter(converter);\n\t\t\t}\n\t\t\tfor (Formatter<?> formatter : getBeansOfType(Formatter.class)) {\n\t\t\t\tregistry.addFormatter(formatter);\n\t\t\t}\n\t\t}\n\n\t\tprivate <T> Collection<T> getBeansOfType(Class<T> type) {\n\t\t\treturn this.beanFactory.getBeansOfType(type).values();\n\t\t}\n\n\t\t@Override\n\t\tpublic void addResourceHandlers(ResourceHandlerRegistry registry) {\n\t\t\tif (!this.resourceProperties.isAddMappings()) {\n\t\t\t\tlogger.debug("Default resource handling disabled");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tInteger cachePeriod = this.resourceProperties.getCachePeriod();\n\t\t\tif (!registry.hasMappingForPattern("/webjars/**")) {\n\t\t\t\tcustomizeResourceHandlerRegistration(\n\t\t\t\t\t\tregistry.addResourceHandler("/webjars/**")\n\t\t\t\t\t\t\t\t.addResourceLocations(\n\t\t\t\t\t\t\t\t\t\t"classpath:/META-INF/resources/webjars/")\n\t\t\t\t\t\t.setCachePeriod(cachePeriod));\n\t\t\t}\n\t\t\tString staticPathPattern = this.mvcProperties.getStaticPathPattern();\n\t\t\tif (!registry.hasMappingForPattern(staticPathPattern)) {\n\t\t\t\tcustomizeResourceHandlerRegistration(\n\t\t\t\t\t\tregistry.addResourceHandler(staticPathPattern)\n\t\t\t\t\t\t\t\t.addResourceLocations(\n\t\t\t\t\t\t\t\t\t\tthis.resourceProperties.getStaticLocations())\n\t\t\t\t\t\t.setCachePeriod(cachePeriod));\n\t\t\t}\n\t\t}\n\n\t\t@Bean\n\t\tpublic WelcomePageHandlerMapping welcomePageHandlerMapping(\n\t\t\t\tResourceProperties resourceProperties) {\n\t\t\treturn new WelcomePageHandlerMapping(resourceProperties.getWelcomePage(),\n\t\t\t\t\tthis.mvcProperties.getStaticPathPattern());\n\t\t}\n\n\t\tprivate void customizeResourceHandlerRegistration(\n\t\t\t\tResourceHandlerRegistration registration) {\n\t\t\tif (this.resourceHandlerRegistrationCustomizer != null) {\n\t\t\t\tthis.resourceHandlerRegistrationCustomizer.customize(registration);\n\t\t\t}\n\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean({ RequestContextListener.class,\n\t\t\t\tRequestContextFilter.class })\n\t\tpublic static RequestContextFilter requestContextFilter() {\n\t\t\treturn new OrderedRequestContextFilter();\n\t\t}\n\n\t\t@Configuration\n\t\t@ConditionalOnProperty(value = "spring.mvc.favicon.enabled", matchIfMissing = true)\n\t\tpublic static class FaviconConfiguration {\n\n\t\t\tprivate final ResourceProperties resourceProperties;\n\n\t\t\tpublic FaviconConfiguration(ResourceProperties resourceProperties) {\n\t\t\t\tthis.resourceProperties = resourceProperties;\n\t\t\t}\n\n\t\t\t@Bean\n\t\t\tpublic SimpleUrlHandlerMapping faviconHandlerMapping() {\n\t\t\t\tSimpleUrlHandlerMapping mapping = new SimpleUrlHandlerMapping();\n\t\t\t\tmapping.setOrder(Ordered.HIGHEST_PRECEDENCE + 1);\n\t\t\t\tmapping.setUrlMap(Collections.singletonMap("**/favicon.ico",\n\t\t\t\t\t\tfaviconRequestHandler()));\n\t\t\t\treturn mapping;\n\t\t\t}\n\n\t\t\t@Bean\n\t\t\tpublic ResourceHttpRequestHandler faviconRequestHandler() {\n\t\t\t\tResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler();\n\t\t\t\trequestHandler\n\t\t\t\t\t\t.setLocations(this.resourceProperties.getFaviconLocations());\n\t\t\t\treturn requestHandler;\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Configuration equivalent to {@code @EnableWebMvc}.\n\t */\n\t@Configuration\n\tpublic static class EnableWebMvcConfiguration extends DelegatingWebMvcConfiguration {\n\n\t\tprivate final WebMvcProperties mvcProperties;\n\n\t\tprivate final ListableBeanFactory beanFactory;\n\n\t\tprivate final WebMvcRegistrations mvcRegistrations;\n\n\t\tpublic EnableWebMvcConfiguration(\n\t\t\t\tObjectProvider<WebMvcProperties> mvcPropertiesProvider,\n\t\t\t\tObjectProvider<WebMvcRegistrations> mvcRegistrationsProvider,\n\t\t\t\tListableBeanFactory beanFactory) {\n\t\t\tthis.mvcProperties = mvcPropertiesProvider.getIfAvailable();\n\t\t\tthis.mvcRegistrations = mvcRegistrationsProvider.getIfUnique();\n\t\t\tthis.beanFactory = beanFactory;\n\t\t}\n\n\t\t@Bean\n\t\t@Override\n\t\tpublic RequestMappingHandlerAdapter requestMappingHandlerAdapter() {\n\t\t\tRequestMappingHandlerAdapter adapter = super.requestMappingHandlerAdapter();\n\t\t\tadapter.setIgnoreDefaultModelOnRedirect(this.mvcProperties == null ? true\n\t\t\t\t\t: this.mvcProperties.isIgnoreDefaultModelOnRedirect());\n\t\t\treturn adapter;\n\t\t}\n\n\t\t@Override\n\t\tprotected RequestMappingHandlerAdapter createRequestMappingHandlerAdapter() {\n\t\t\tif (this.mvcRegistrations != null\n\t\t\t\t\t&& this.mvcRegistrations.getRequestMappingHandlerAdapter() != null) {\n\t\t\t\treturn this.mvcRegistrations.getRequestMappingHandlerAdapter();\n\t\t\t}\n\t\t\treturn super.createRequestMappingHandlerAdapter();\n\t\t}\n\n\t\t@Bean\n\t\t@Primary\n\t\t@Override\n\t\tpublic RequestMappingHandlerMapping requestMappingHandlerMapping() {\n\t\t\t// Must be @Primary for MvcUriComponentsBuilder to work\n\t\t\treturn super.requestMappingHandlerMapping();\n\t\t}\n\n\t\t@Bean\n\t\t@Override\n\t\tpublic Validator mvcValidator() {\n\t\t\tif (!ClassUtils.isPresent("javax.validation.Validator",\n\t\t\t\t\tgetClass().getClassLoader())) {\n\t\t\t\treturn super.mvcValidator();\n\t\t\t}\n\t\t\treturn WebMvcValidator.get(getApplicationContext(), getValidator());\n\t\t}\n\n\t\t@Override\n\t\tprotected RequestMappingHandlerMapping createRequestMappingHandlerMapping() {\n\t\t\tif (this.mvcRegistrations != null\n\t\t\t\t\t&& this.mvcRegistrations.getRequestMappingHandlerMapping() != null) {\n\t\t\t\treturn this.mvcRegistrations.getRequestMappingHandlerMapping();\n\t\t\t}\n\t\t\treturn super.createRequestMappingHandlerMapping();\n\t\t}\n\n\t\t@Override\n\t\tprotected ConfigurableWebBindingInitializer getConfigurableWebBindingInitializer() {\n\t\t\ttry {\n\t\t\t\treturn this.beanFactory.getBean(ConfigurableWebBindingInitializer.class);\n\t\t\t}\n\t\t\tcatch (NoSuchBeanDefinitionException ex) {\n\t\t\t\treturn super.getConfigurableWebBindingInitializer();\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tprotected ExceptionHandlerExceptionResolver createExceptionHandlerExceptionResolver() {\n\t\t\tif (this.mvcRegistrations != null && this.mvcRegistrations\n\t\t\t\t\t.getExceptionHandlerExceptionResolver() != null) {\n\t\t\t\treturn this.mvcRegistrations.getExceptionHandlerExceptionResolver();\n\t\t\t}\n\t\t\treturn super.createExceptionHandlerExceptionResolver();\n\t\t}\n\n\t\t@Override\n\t\tprotected void configureHandlerExceptionResolvers(\n\t\t\t\tList<HandlerExceptionResolver> exceptionResolvers) {\n\t\t\tsuper.configureHandlerExceptionResolvers(exceptionResolvers);\n\t\t\tif (exceptionResolvers.isEmpty()) {\n\t\t\t\taddDefaultHandlerExceptionResolvers(exceptionResolvers);\n\t\t\t}\n\t\t\tif (this.mvcProperties.isLogResolvedException()) {\n\t\t\t\tfor (HandlerExceptionResolver resolver : exceptionResolvers) {\n\t\t\t\t\tif (resolver instanceof AbstractHandlerExceptionResolver) {\n\t\t\t\t\t\t((AbstractHandlerExceptionResolver) resolver)\n\t\t\t\t\t\t\t\t.setWarnLogCategory(resolver.getClass().getName());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t@Bean\n\t\t@Override\n\t\tpublic ContentNegotiationManager mvcContentNegotiationManager() {\n\t\t\tContentNegotiationManager manager = super.mvcContentNegotiationManager();\n\t\t\tList<ContentNegotiationStrategy> strategies = manager.getStrategies();\n\t\t\tListIterator<ContentNegotiationStrategy> iterator = strategies.listIterator();\n\t\t\twhile (iterator.hasNext()) {\n\t\t\t\tContentNegotiationStrategy strategy = iterator.next();\n\t\t\t\tif (strategy instanceof PathExtensionContentNegotiationStrategy) {\n\t\t\t\t\titerator.set(new OptionalPathExtensionContentNegotiationStrategy(\n\t\t\t\t\t\t\tstrategy));\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn manager;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnEnabledResourceChain\n\tstatic class ResourceChainCustomizerConfiguration {\n\n\t\t@Bean\n\t\tpublic ResourceChainResourceHandlerRegistrationCustomizer resourceHandlerRegistrationCustomizer() {\n\t\t\treturn new ResourceChainResourceHandlerRegistrationCustomizer();\n\t\t}\n\n\t}\n\n\tinterface ResourceHandlerRegistrationCustomizer {\n\n\t\tvoid customize(ResourceHandlerRegistration registration);\n\n\t}\n\n\tprivate static class ResourceChainResourceHandlerRegistrationCustomizer\n\t\t\timplements ResourceHandlerRegistrationCustomizer {\n\n\t\t@Autowired\n\t\tprivate ResourceProperties resourceProperties = new ResourceProperties();\n\n\t\t@Override\n\t\tpublic void customize(ResourceHandlerRegistration registration) {\n\t\t\tResourceProperties.Chain properties = this.resourceProperties.getChain();\n\t\t\tconfigureResourceChain(properties,\n\t\t\t\t\tregistration.resourceChain(properties.isCache()));\n\t\t}\n\n\t\tprivate void configureResourceChain(ResourceProperties.Chain properties,\n\t\t\t\tResourceChainRegistration chain) {\n\t\t\tStrategy strategy = properties.getStrategy();\n\t\t\tif (strategy.getFixed().isEnabled() || strategy.getContent().isEnabled()) {\n\t\t\t\tchain.addResolver(getVersionResourceResolver(strategy));\n\t\t\t}\n\t\t\tif (properties.isGzipped()) {\n\t\t\t\tchain.addResolver(new GzipResourceResolver());\n\t\t\t}\n\t\t\tif (properties.isHtmlApplicationCache()) {\n\t\t\t\tchain.addTransformer(new AppCacheManifestTransformer());\n\t\t\t}\n\t\t}\n\n\t\tprivate ResourceResolver getVersionResourceResolver(\n\t\t\t\tResourceProperties.Strategy properties) {\n\t\t\tVersionResourceResolver resolver = new VersionResourceResolver();\n\t\t\tif (properties.getFixed().isEnabled()) {\n\t\t\t\tString version = properties.getFixed().getVersion();\n\t\t\t\tString[] paths = properties.getFixed().getPaths();\n\t\t\t\tresolver.addFixedVersionStrategy(version, paths);\n\t\t\t}\n\t\t\tif (properties.getContent().isEnabled()) {\n\t\t\t\tString[] paths = properties.getContent().getPaths();\n\t\t\t\tresolver.addContentVersionStrategy(paths);\n\t\t\t}\n\t\t\treturn resolver;\n\t\t}\n\n\t}\n\n\tstatic final class WelcomePageHandlerMapping extends AbstractUrlHandlerMapping {\n\n\t\tprivate static final Log logger = LogFactory\n\t\t\t\t.getLog(WelcomePageHandlerMapping.class);\n\n\t\tprivate WelcomePageHandlerMapping(Resource welcomePage,\n\t\t\t\tString staticPathPattern) {\n\t\t\tif (welcomePage != null && "/**".equals(staticPathPattern)) {\n\t\t\t\tlogger.info("Adding welcome page: " + welcomePage);\n\t\t\t\tParameterizableViewController controller = new ParameterizableViewController();\n\t\t\t\tcontroller.setViewName("forward:index.html");\n\t\t\t\tsetRootHandler(controller);\n\t\t\t\tsetOrder(0);\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic Object getHandlerInternal(HttpServletRequest request) throws Exception {\n\t\t\tfor (MediaType mediaType : getAcceptedMediaTypes(request)) {\n\t\t\t\tif (mediaType.includes(MediaType.TEXT_HTML)) {\n\t\t\t\t\treturn super.getHandlerInternal(request);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\tprivate List<MediaType> getAcceptedMediaTypes(HttpServletRequest request) {\n\t\t\tString acceptHeader = request.getHeader(HttpHeaders.ACCEPT);\n\t\t\treturn MediaType.parseMediaTypes(\n\t\t\t\t\tStringUtils.hasText(acceptHeader) ? acceptHeader : "*/*");\n\t\t}\n\n\t}\n\n\t/**\n\t * Decorator to make {@link PathExtensionContentNegotiationStrategy} optional\n\t * depending on a request attribute.\n\t */\n\tstatic class OptionalPathExtensionContentNegotiationStrategy\n\t\t\timplements ContentNegotiationStrategy {\n\n\t\tprivate final ContentNegotiationStrategy delegate;\n\n\t\tOptionalPathExtensionContentNegotiationStrategy(\n\t\t\t\tContentNegotiationStrategy delegate) {\n\t\t\tthis.delegate = delegate;\n\t\t}\n\n\t\t@Override\n\t\tpublic List<MediaType> resolveMediaTypes(NativeWebRequest webRequest)\n\t\t\t\tthrows HttpMediaTypeNotAcceptableException {\n\t\t\tObject skip = webRequest.getAttribute(\n\t\t\t\t\tSKIP_PATH_EXTENSION_CONTENT_NEGOTIATION_ATTRIBUTE,\n\t\t\t\t\tRequestAttributes.SCOPE_REQUEST);\n\t\t\tif (skip != null && Boolean.parseBoolean(skip.toString())) {\n\t\t\t\treturn Collections.emptyList();\n\t\t\t}\n\t\t\treturn this.delegate.resolveMediaTypes(webRequest);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
