{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/embedded/EmbeddedLdapAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/embedded/EmbeddedLdapAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,9 +16,6 @@\n \n package org.springframework.boot.autoconfigure.ldap.embedded;\n \n-import java.io.File;\n-import java.io.FileOutputStream;\n-import java.io.IOException;\n import java.io.InputStream;\n import java.util.HashMap;\n import java.util.Map;\n@@ -30,14 +27,15 @@ import com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;\n import com.unboundid.ldap.listener.InMemoryListenerConfig;\n import com.unboundid.ldap.sdk.LDAPException;\n import com.unboundid.ldif.LDIFReader;\n-import org.apache.commons.io.IOUtils;\n \n import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration;\n import org.springframework.boot.autoconfigure.ldap.LdapProperties;\n+import org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties.Credential;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.ConfigurableApplicationContext;\n@@ -63,22 +61,24 @@ import org.springframework.util.StringUtils;\n @EnableConfigurationProperties({ LdapProperties.class, EmbeddedLdapProperties.class })\n @AutoConfigureBefore(LdapAutoConfiguration.class)\n @ConditionalOnClass(InMemoryDirectoryServer.class)\n+@ConditionalOnProperty(prefix = "spring.ldap.embedded", name = "base-dn")\n public class EmbeddedLdapAutoConfiguration {\n \n-\tprivate InMemoryDirectoryServer server;\n+\tprivate static final String PROPERTY_SOURCE_NAME = "ldap.ports";\n+\n+\tprivate final EmbeddedLdapProperties embeddedProperties;\n \n-\tprivate EmbeddedLdapProperties embeddedProperties;\n+\tprivate final LdapProperties properties;\n \n-\tprivate LdapProperties properties;\n+\tprivate final ConfigurableApplicationContext applicationContext;\n \n-\tprivate ConfigurableApplicationContext applicationContext;\n+\tprivate final Environment environment;\n \n-\tprivate Environment environment;\n+\tprivate InMemoryDirectoryServer server;\n \n \tpublic EmbeddedLdapAutoConfiguration(EmbeddedLdapProperties embeddedProperties,\n-\t\tLdapProperties properties,\n-\t\tConfigurableApplicationContext applicationContext,\n-\t\tEnvironment environment) {\n+\t\t\tLdapProperties properties, ConfigurableApplicationContext applicationContext,\n+\t\t\tEnvironment environment) {\n \t\tthis.embeddedProperties = embeddedProperties;\n \t\tthis.properties = properties;\n \t\tthis.applicationContext = applicationContext;\n@@ -88,100 +88,83 @@ public class EmbeddedLdapAutoConfiguration {\n \t@Bean\n \t@DependsOn("directoryServer")\n \t@ConditionalOnMissingBean\n-\tpublic ContextSource contextSource() {\n-\t\tLdapContextSource contextSource = new LdapContextSource();\n-\n-\t\tEmbeddedLdapProperties.Credential credential = this.embeddedProperties\n-\t\t\t\t.getCredential();\n-\t\tif (StringUtils.hasText(credential.getUsername()) &&\n-\t\t\t\tStringUtils.hasText(credential.getPassword())) {\n-\t\t\tcontextSource.setUserDn(credential.getUsername());\n-\t\t\tcontextSource.setPassword(credential.getPassword());\n+\tpublic ContextSource ldapContextSource() {\n+\t\tLdapContextSource source = new LdapContextSource();\n+\t\tif (hasCredentials(this.embeddedProperties.getCredential())) {\n+\t\t\tsource.setUserDn(this.embeddedProperties.getCredential().getUsername());\n+\t\t\tsource.setPassword(this.embeddedProperties.getCredential().getPassword());\n \t\t}\n-\t\tcontextSource.setUrls(this.properties.determineUrls(this.environment));\n-\t\treturn contextSource;\n+\t\tsource.setUrls(this.properties.determineUrls(this.environment));\n+\t\treturn source;\n \t}\n \n \t@Bean\n \tpublic InMemoryDirectoryServer directoryServer() throws LDAPException {\n-\t\tInMemoryDirectoryServerConfig config =\n-\t\t\t\tnew InMemoryDirectoryServerConfig(this.embeddedProperties\n-\t\t\t\t\t\t.getPartitionSuffix());\n-\n-\t\tEmbeddedLdapProperties.Credential credential = this.embeddedProperties\n-\t\t\t\t.getCredential();\n-\t\tif (StringUtils.hasText(credential.getUsername()) &&\n-\t\t\t\tStringUtils.hasText(credential.getPassword())) {\n-\t\t\tconfig.addAdditionalBindCredentials(credential\n-\t\t\t\t\t.getUsername(), credential.getPassword());\n+\t\tInMemoryDirectoryServerConfig config = new InMemoryDirectoryServerConfig(\n+\t\t\t\tthis.embeddedProperties.getBaseDn());\n+\t\tif (hasCredentials(this.embeddedProperties.getCredential())) {\n+\t\t\tconfig.addAdditionalBindCredentials(\n+\t\t\t\t\tthis.embeddedProperties.getCredential().getUsername(),\n+\t\t\t\t\tthis.embeddedProperties.getCredential().getPassword());\n \t\t}\n-\n-\t\tconfig.setListenerConfigs(InMemoryListenerConfig.createLDAPConfig("LDAP",\n-\t\t\t\tthis.embeddedProperties.getPort()));\n-\n+\t\tInMemoryListenerConfig listenerConfig = InMemoryListenerConfig\n+\t\t\t\t.createLDAPConfig("LDAP", this.embeddedProperties.getPort());\n+\t\tconfig.setListenerConfigs(listenerConfig);\n \t\tthis.server = new InMemoryDirectoryServer(config);\n-\n-\t\tpopulateDirectoryServer();\n-\n+\t\timportLdif();\n \t\tthis.server.startListening();\n-\t\tpublishPortInfo(this.server.getListenPort());\n+\t\tsetPortProperty(this.applicationContext, this.server.getListenPort());\n \t\treturn this.server;\n \t}\n \n-\tprivate void publishPortInfo(int port) {\n-\t\tsetPortProperty(this.applicationContext, port);\n-\t}\n-\n-\tprivate void setPortProperty(ApplicationContext currentContext,\n-\t\tint port) {\n-\t\tif (currentContext instanceof ConfigurableApplicationContext) {\n-\t\t\tMutablePropertySources sources = ((ConfigurableApplicationContext)\n-\t\t\t\t\tcurrentContext).getEnvironment().getPropertySources();\n-\t\t\tgetLdapPorts(sources).put("local.ldap.port", port);\n-\t\t}\n-\t\tif (currentContext.getParent() != null) {\n-\t\t\tsetPortProperty(currentContext.getParent(), port);\n-\t\t}\n-\t}\n-\n-\tprivate Map<String, Object> getLdapPorts(MutablePropertySources sources) {\n-\t\tPropertySource<?> propertySource = sources.get("ldap.ports");\n-\t\tif (propertySource == null) {\n-\t\t\tpropertySource = new MapPropertySource("ldap.ports",\n-\t\t\t\t\tnew HashMap<String, Object>());\n-\t\t\tsources.addFirst(propertySource);\n-\t\t}\n-\t\treturn (Map<String, Object>) propertySource.getSource();\n+\tprivate boolean hasCredentials(Credential credential) {\n+\t\treturn StringUtils.hasText(credential.getUsername())\n+\t\t\t\t&& StringUtils.hasText(credential.getPassword());\n \t}\n \n-\tprivate void populateDirectoryServer() throws LDAPException {\n+\tprivate void importLdif() throws LDAPException {\n \t\tString location = this.embeddedProperties.getLdif();\n \t\tif (StringUtils.hasText(location)) {\n \t\t\ttry {\n-\t\t\t\tResource resource = this.applicationContext.getResource(\n-\t\t\t\t\t\tthis.embeddedProperties.getLdif());\n+\t\t\t\tResource resource = this.applicationContext.getResource(location);\n \t\t\t\tif (resource.exists()) {\n-\t\t\t\t\tFile tempFile = File.createTempFile("ldap_test_data", ".ldif");\n+\t\t\t\t\tInputStream inputStream = resource.getInputStream();\n \t\t\t\t\ttry {\n-\t\t\t\t\t\tInputStream inputStream = resource.getInputStream();\n-\t\t\t\t\t\tIOUtils.copy(inputStream, new FileOutputStream(tempFile));\n-\t\t\t\t\t\tthis.server.importFromLDIF(true, new LDIFReader(tempFile));\n-\t\t\t\t\t}\n-\t\t\t\t\tcatch (LDAPException e) {\n-\t\t\t\t\t\te.printStackTrace();\n+\t\t\t\t\t\tthis.server.importFromLDIF(true, new LDIFReader(inputStream));\n \t\t\t\t\t}\n \t\t\t\t\tfinally {\n-\t\t\t\t\t\ttempFile.delete();\n+\t\t\t\t\t\tinputStream.close();\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n-\t\t\tcatch (IOException ex) {\n-\t\t\t\tthrow new IllegalStateException(\n-\t\t\t\t\t\t"Unable to load resource from " + location, ex);\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\tthrow new IllegalStateException("Unable to load LDIF " + location, ex);\n \t\t\t}\n \t\t}\n \t}\n \n+\tprivate void setPortProperty(ApplicationContext context, int port) {\n+\t\tif (context instanceof ConfigurableApplicationContext) {\n+\t\t\tMutablePropertySources sources = ((ConfigurableApplicationContext) context)\n+\t\t\t\t\t.getEnvironment().getPropertySources();\n+\t\t\tgetLdapPorts(sources).put("local.ldap.port", port);\n+\t\t}\n+\t\tif (context.getParent() != null) {\n+\t\t\tsetPortProperty(context.getParent(), port);\n+\t\t}\n+\t}\n+\n+\t@SuppressWarnings("unchecked")\n+\tprivate Map<String, Object> getLdapPorts(MutablePropertySources sources) {\n+\t\tPropertySource<?> propertySource = sources.get(PROPERTY_SOURCE_NAME);\n+\t\tif (propertySource == null) {\n+\t\t\tpropertySource = new MapPropertySource(PROPERTY_SOURCE_NAME,\n+\t\t\t\t\tnew HashMap<String, Object>());\n+\t\t\tsources.addFirst(propertySource);\n+\t\t}\n+\t\treturn (Map<String, Object>) propertySource.getSource();\n+\t}\n+\n \t@PreDestroy\n \tpublic void close() {\n \t\tif (this.server != null) {\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.ldap.embedded;\n\nimport java.io.InputStream;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport javax.annotation.PreDestroy;\n\nimport com.unboundid.ldap.listener.InMemoryDirectoryServer;\nimport com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;\nimport com.unboundid.ldap.listener.InMemoryListenerConfig;\nimport com.unboundid.ldap.sdk.LDAPException;\nimport com.unboundid.ldif.LDIFReader;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration;\nimport org.springframework.boot.autoconfigure.ldap.LdapProperties;\nimport org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties.Credential;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.DependsOn;\nimport org.springframework.core.env.Environment;\nimport org.springframework.core.env.MapPropertySource;\nimport org.springframework.core.env.MutablePropertySources;\nimport org.springframework.core.env.PropertySource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.ldap.core.ContextSource;\nimport org.springframework.ldap.core.support.LdapContextSource;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Embedded LDAP.\n *\n * @author Eddú Meléndez\n * @since 1.5.0\n */\n@Configuration\n@EnableConfigurationProperties({ LdapProperties.class, EmbeddedLdapProperties.class })\n@AutoConfigureBefore(LdapAutoConfiguration.class)\n@ConditionalOnClass(InMemoryDirectoryServer.class)\n@ConditionalOnProperty(prefix = "spring.ldap.embedded", name = "base-dn")\npublic class EmbeddedLdapAutoConfiguration {\n\n\tprivate static final String PROPERTY_SOURCE_NAME = "ldap.ports";\n\n\tprivate final EmbeddedLdapProperties embeddedProperties;\n\n\tprivate final LdapProperties properties;\n\n\tprivate final ConfigurableApplicationContext applicationContext;\n\n\tprivate final Environment environment;\n\n\tprivate InMemoryDirectoryServer server;\n\n\tpublic EmbeddedLdapAutoConfiguration(EmbeddedLdapProperties embeddedProperties,\n\t\t\tLdapProperties properties, ConfigurableApplicationContext applicationContext,\n\t\t\tEnvironment environment) {\n\t\tthis.embeddedProperties = embeddedProperties;\n\t\tthis.properties = properties;\n\t\tthis.applicationContext = applicationContext;\n\t\tthis.environment = environment;\n\t}\n\n\t@Bean\n\t@DependsOn("directoryServer")\n\t@ConditionalOnMissingBean\n\tpublic ContextSource ldapContextSource() {\n\t\tLdapContextSource source = new LdapContextSource();\n\t\tif (hasCredentials(this.embeddedProperties.getCredential())) {\n\t\t\tsource.setUserDn(this.embeddedProperties.getCredential().getUsername());\n\t\t\tsource.setPassword(this.embeddedProperties.getCredential().getPassword());\n\t\t}\n\t\tsource.setUrls(this.properties.determineUrls(this.environment));\n\t\treturn source;\n\t}\n\n\t@Bean\n\tpublic InMemoryDirectoryServer directoryServer() throws LDAPException {\n\t\tInMemoryDirectoryServerConfig config = new InMemoryDirectoryServerConfig(\n\t\t\t\tthis.embeddedProperties.getBaseDn());\n\t\tif (hasCredentials(this.embeddedProperties.getCredential())) {\n\t\t\tconfig.addAdditionalBindCredentials(\n\t\t\t\t\tthis.embeddedProperties.getCredential().getUsername(),\n\t\t\t\t\tthis.embeddedProperties.getCredential().getPassword());\n\t\t}\n\t\tInMemoryListenerConfig listenerConfig = InMemoryListenerConfig\n\t\t\t\t.createLDAPConfig("LDAP", this.embeddedProperties.getPort());\n\t\tconfig.setListenerConfigs(listenerConfig);\n\t\tthis.server = new InMemoryDirectoryServer(config);\n\t\timportLdif();\n\t\tthis.server.startListening();\n\t\tsetPortProperty(this.applicationContext, this.server.getListenPort());\n\t\treturn this.server;\n\t}\n\n\tprivate boolean hasCredentials(Credential credential) {\n\t\treturn StringUtils.hasText(credential.getUsername())\n\t\t\t\t&& StringUtils.hasText(credential.getPassword());\n\t}\n\n\tprivate void importLdif() throws LDAPException {\n\t\tString location = this.embeddedProperties.getLdif();\n\t\tif (StringUtils.hasText(location)) {\n\t\t\ttry {\n\t\t\t\tResource resource = this.applicationContext.getResource(location);\n\t\t\t\tif (resource.exists()) {\n\t\t\t\t\tInputStream inputStream = resource.getInputStream();\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthis.server.importFromLDIF(true, new LDIFReader(inputStream));\n\t\t\t\t\t}\n\t\t\t\t\tfinally {\n\t\t\t\t\t\tinputStream.close();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tthrow new IllegalStateException("Unable to load LDIF " + location, ex);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void setPortProperty(ApplicationContext context, int port) {\n\t\tif (context instanceof ConfigurableApplicationContext) {\n\t\t\tMutablePropertySources sources = ((ConfigurableApplicationContext) context)\n\t\t\t\t\t.getEnvironment().getPropertySources();\n\t\t\tgetLdapPorts(sources).put("local.ldap.port", port);\n\t\t}\n\t\tif (context.getParent() != null) {\n\t\t\tsetPortProperty(context.getParent(), port);\n\t\t}\n\t}\n\n\t@SuppressWarnings("unchecked")\n\tprivate Map<String, Object> getLdapPorts(MutablePropertySources sources) {\n\t\tPropertySource<?> propertySource = sources.get(PROPERTY_SOURCE_NAME);\n\t\tif (propertySource == null) {\n\t\t\tpropertySource = new MapPropertySource(PROPERTY_SOURCE_NAME,\n\t\t\t\t\tnew HashMap<String, Object>());\n\t\t\tsources.addFirst(propertySource);\n\t\t}\n\t\treturn (Map<String, Object>) propertySource.getSource();\n\t}\n\n\t@PreDestroy\n\tpublic void close() {\n\t\tif (this.server != null) {\n\t\t\tthis.server.shutDown(true);\n\t\t}\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.ldap.embedded;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport javax.annotation.PreDestroy;\n\nimport com.unboundid.ldap.listener.InMemoryDirectoryServer;\nimport com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;\nimport com.unboundid.ldap.listener.InMemoryListenerConfig;\nimport com.unboundid.ldap.sdk.LDAPException;\nimport com.unboundid.ldif.LDIFReader;\nimport org.apache.commons.io.IOUtils;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration;\nimport org.springframework.boot.autoconfigure.ldap.LdapProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.DependsOn;\nimport org.springframework.core.env.Environment;\nimport org.springframework.core.env.MapPropertySource;\nimport org.springframework.core.env.MutablePropertySources;\nimport org.springframework.core.env.PropertySource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.ldap.core.ContextSource;\nimport org.springframework.ldap.core.support.LdapContextSource;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Embedded LDAP.\n *\n * @author Eddú Meléndez\n * @since 1.5.0\n */\n@Configuration\n@EnableConfigurationProperties({ LdapProperties.class, EmbeddedLdapProperties.class })\n@AutoConfigureBefore(LdapAutoConfiguration.class)\n@ConditionalOnClass(InMemoryDirectoryServer.class)\npublic class EmbeddedLdapAutoConfiguration {\n\n\tprivate InMemoryDirectoryServer server;\n\n\tprivate EmbeddedLdapProperties embeddedProperties;\n\n\tprivate LdapProperties properties;\n\n\tprivate ConfigurableApplicationContext applicationContext;\n\n\tprivate Environment environment;\n\n\tpublic EmbeddedLdapAutoConfiguration(EmbeddedLdapProperties embeddedProperties,\n\t\tLdapProperties properties,\n\t\tConfigurableApplicationContext applicationContext,\n\t\tEnvironment environment) {\n\t\tthis.embeddedProperties = embeddedProperties;\n\t\tthis.properties = properties;\n\t\tthis.applicationContext = applicationContext;\n\t\tthis.environment = environment;\n\t}\n\n\t@Bean\n\t@DependsOn("directoryServer")\n\t@ConditionalOnMissingBean\n\tpublic ContextSource contextSource() {\n\t\tLdapContextSource contextSource = new LdapContextSource();\n\n\t\tEmbeddedLdapProperties.Credential credential = this.embeddedProperties\n\t\t\t\t.getCredential();\n\t\tif (StringUtils.hasText(credential.getUsername()) &&\n\t\t\t\tStringUtils.hasText(credential.getPassword())) {\n\t\t\tcontextSource.setUserDn(credential.getUsername());\n\t\t\tcontextSource.setPassword(credential.getPassword());\n\t\t}\n\t\tcontextSource.setUrls(this.properties.determineUrls(this.environment));\n\t\treturn contextSource;\n\t}\n\n\t@Bean\n\tpublic InMemoryDirectoryServer directoryServer() throws LDAPException {\n\t\tInMemoryDirectoryServerConfig config =\n\t\t\t\tnew InMemoryDirectoryServerConfig(this.embeddedProperties\n\t\t\t\t\t\t.getPartitionSuffix());\n\n\t\tEmbeddedLdapProperties.Credential credential = this.embeddedProperties\n\t\t\t\t.getCredential();\n\t\tif (StringUtils.hasText(credential.getUsername()) &&\n\t\t\t\tStringUtils.hasText(credential.getPassword())) {\n\t\t\tconfig.addAdditionalBindCredentials(credential\n\t\t\t\t\t.getUsername(), credential.getPassword());\n\t\t}\n\n\t\tconfig.setListenerConfigs(InMemoryListenerConfig.createLDAPConfig("LDAP",\n\t\t\t\tthis.embeddedProperties.getPort()));\n\n\t\tthis.server = new InMemoryDirectoryServer(config);\n\n\t\tpopulateDirectoryServer();\n\n\t\tthis.server.startListening();\n\t\tpublishPortInfo(this.server.getListenPort());\n\t\treturn this.server;\n\t}\n\n\tprivate void publishPortInfo(int port) {\n\t\tsetPortProperty(this.applicationContext, port);\n\t}\n\n\tprivate void setPortProperty(ApplicationContext currentContext,\n\t\tint port) {\n\t\tif (currentContext instanceof ConfigurableApplicationContext) {\n\t\t\tMutablePropertySources sources = ((ConfigurableApplicationContext)\n\t\t\t\t\tcurrentContext).getEnvironment().getPropertySources();\n\t\t\tgetLdapPorts(sources).put("local.ldap.port", port);\n\t\t}\n\t\tif (currentContext.getParent() != null) {\n\t\t\tsetPortProperty(currentContext.getParent(), port);\n\t\t}\n\t}\n\n\tprivate Map<String, Object> getLdapPorts(MutablePropertySources sources) {\n\t\tPropertySource<?> propertySource = sources.get("ldap.ports");\n\t\tif (propertySource == null) {\n\t\t\tpropertySource = new MapPropertySource("ldap.ports",\n\t\t\t\t\tnew HashMap<String, Object>());\n\t\t\tsources.addFirst(propertySource);\n\t\t}\n\t\treturn (Map<String, Object>) propertySource.getSource();\n\t}\n\n\tprivate void populateDirectoryServer() throws LDAPException {\n\t\tString location = this.embeddedProperties.getLdif();\n\t\tif (StringUtils.hasText(location)) {\n\t\t\ttry {\n\t\t\t\tResource resource = this.applicationContext.getResource(\n\t\t\t\t\t\tthis.embeddedProperties.getLdif());\n\t\t\t\tif (resource.exists()) {\n\t\t\t\t\tFile tempFile = File.createTempFile("ldap_test_data", ".ldif");\n\t\t\t\t\ttry {\n\t\t\t\t\t\tInputStream inputStream = resource.getInputStream();\n\t\t\t\t\t\tIOUtils.copy(inputStream, new FileOutputStream(tempFile));\n\t\t\t\t\t\tthis.server.importFromLDIF(true, new LDIFReader(tempFile));\n\t\t\t\t\t}\n\t\t\t\t\tcatch (LDAPException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t\tfinally {\n\t\t\t\t\t\ttempFile.delete();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (IOException ex) {\n\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t"Unable to load resource from " + location, ex);\n\t\t\t}\n\t\t}\n\t}\n\n\t@PreDestroy\n\tpublic void close() {\n\t\tif (this.server != null) {\n\t\t\tthis.server.shutDown(true);\n\t\t}\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
