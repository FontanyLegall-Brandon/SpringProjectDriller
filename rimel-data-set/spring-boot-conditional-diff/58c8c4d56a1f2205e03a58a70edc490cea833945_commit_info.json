{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -19,12 +19,15 @@ package org.springframework.boot.actuate.autoconfigure.metrics;\n import java.util.Collection;\n import java.util.Collections;\n \n+import com.rabbitmq.client.Channel;\n import io.micrometer.core.annotation.Timed;\n import io.micrometer.core.instrument.MeterRegistry;\n import io.micrometer.core.instrument.Metrics;\n import io.micrometer.core.instrument.binder.MeterBinder;\n import io.micrometer.core.instrument.composite.CompositeMeterRegistry;\n \n+import org.springframework.amqp.rabbit.connection.AbstractConnectionFactory;\n+import org.springframework.amqp.rabbit.core.RabbitTemplate;\n import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\n import org.springframework.boot.actuate.autoconfigure.metrics.cache.CacheMetricsConfiguration;\n@@ -43,13 +46,16 @@ import org.springframework.boot.actuate.autoconfigure.metrics.reactive.server.We\n import org.springframework.boot.actuate.autoconfigure.metrics.web.client.RestTemplateMetricsConfiguration;\n import org.springframework.boot.actuate.autoconfigure.metrics.web.servlet.WebMvcMetricsConfiguration;\n import org.springframework.boot.actuate.metrics.MetricsEndpoint;\n+import org.springframework.boot.actuate.metrics.amqp.RabbitMetrics;\n import org.springframework.boot.actuate.metrics.integration.SpringIntegrationMetrics;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration;\n+import org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.autoconfigure.condition.SearchStrategy;\n import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\n import org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration;\n@@ -66,6 +72,7 @@ import org.springframework.integration.support.management.IntegrationManagementC\n  * @since 2.0.0\n  * @author Jon Schneider\n  * @author Stephane Nicoll\n+ * @author Arnaud Cogoluègnes\n  */\n @Configuration\n @ConditionalOnClass(Timed.class)\n@@ -132,6 +139,19 @@ public class MetricsAutoConfiguration {\n \n \t}\n \n+\t@Configuration\n+\t@ConditionalOnClass({ RabbitTemplate.class, Channel.class })\n+\t@ConditionalOnBean(AbstractConnectionFactory.class)\n+\t@ConditionalOnProperty(prefix = "spring.rabbitmq", name = "metrics", matchIfMissing = true)\n+\tstatic class MetricsRabbitConfiguration {\n+\n+\t\t@Bean\n+\t\tpublic RabbitMetrics rabbitMetrics(AbstractConnectionFactory connectionFactory) {\n+\t\t\treturn new RabbitMetrics(connectionFactory.getRabbitConnectionFactory());\n+\t\t}\n+\n+\t}\n+\n \t@Configuration\n \tstatic class MeterRegistryConfigurationSupport {\n \n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics;\n\nimport java.util.Collection;\nimport java.util.Collections;\n\nimport com.rabbitmq.client.Channel;\nimport io.micrometer.core.annotation.Timed;\nimport io.micrometer.core.instrument.MeterRegistry;\nimport io.micrometer.core.instrument.Metrics;\nimport io.micrometer.core.instrument.binder.MeterBinder;\nimport io.micrometer.core.instrument.composite.CompositeMeterRegistry;\n\nimport org.springframework.amqp.rabbit.connection.AbstractConnectionFactory;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\nimport org.springframework.boot.actuate.autoconfigure.metrics.cache.CacheMetricsConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.MetricsExporter;\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.atlas.AtlasExportConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.datadog.DatadogExportConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.ganglia.GangliaExportConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.graphite.GraphiteExportConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.influx.InfluxExportConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.jmx.JmxExportConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.prometheus.PrometheusExportConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleExportConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.statsd.StatsdExportConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.reactive.server.WebFluxMetricsConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.web.client.RestTemplateMetricsConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.web.servlet.WebMvcMetricsConfiguration;\nimport org.springframework.boot.actuate.metrics.MetricsEndpoint;\nimport org.springframework.boot.actuate.metrics.amqp.RabbitMetrics;\nimport org.springframework.boot.actuate.metrics.integration.SpringIntegrationMetrics;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration;\nimport org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.integration.config.EnableIntegrationManagement;\nimport org.springframework.integration.support.management.IntegrationManagementConfigurer;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Micrometer-based metrics.\n *\n * @since 2.0.0\n * @author Jon Schneider\n * @author Stephane Nicoll\n * @author Arnaud Cogoluègnes\n */\n@Configuration\n@ConditionalOnClass(Timed.class)\n@EnableConfigurationProperties(MetricsProperties.class)\n@Import({ MeterBindersConfiguration.class, WebMvcMetricsConfiguration.class,\n\t\tWebFluxMetricsConfiguration.class, RestTemplateMetricsConfiguration.class,\n\t\tCacheMetricsConfiguration.class, DataSourcePoolMetricsConfiguration.class,\n\t\tAtlasExportConfiguration.class, DatadogExportConfiguration.class,\n\t\tGangliaExportConfiguration.class, GraphiteExportConfiguration.class,\n\t\tInfluxExportConfiguration.class, JmxExportConfiguration.class,\n\t\tPrometheusExportConfiguration.class, SimpleExportConfiguration.class,\n\t\tStatsdExportConfiguration.class })\n@AutoConfigureAfter({ CacheAutoConfiguration.class, DataSourceAutoConfiguration.class,\n\t\tRestTemplateAutoConfiguration.class })\npublic class MetricsAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean(MeterRegistry.class)\n\tpublic CompositeMeterRegistry compositeMeterRegistry(\n\t\t\tMetricsProperties metricsProperties,\n\t\t\tObjectProvider<Collection<MetricsExporter>> exporters,\n\t\t\tObjectProvider<Collection<MeterRegistryConfigurer>> configurers) {\n\t\tCompositeMeterRegistry composite = metricsProperties.isUseGlobalRegistry()\n\t\t\t\t? Metrics.globalRegistry : new CompositeMeterRegistry();\n\t\tconfigurers.getIfAvailable(Collections::emptyList)\n\t\t\t\t.forEach((configurer) -> configurer.configureRegistry(composite));\n\t\texporters.getIfAvailable(Collections::emptyList).forEach((exporter) -> {\n\t\t\tMeterRegistry childRegistry = exporter.registry();\n\t\t\tif (composite == childRegistry) {\n\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t"cannot add a CompositeMeterRegistry to itself");\n\t\t\t}\n\t\t\tcomposite.add(childRegistry);\n\t\t});\n\t\treturn composite;\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(MeterRegistry.class)\n\t@ConditionalOnMissingBean\n\t@ConditionalOnEnabledEndpoint\n\tpublic MetricsEndpoint metricsEndpoint(MeterRegistry registry) {\n\t\treturn new MetricsEndpoint(registry);\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(EnableIntegrationManagement.class)\n\tstatic class MetricsIntegrationConfiguration {\n\n\t\t@Bean(name = IntegrationManagementConfigurer.MANAGEMENT_CONFIGURER_NAME)\n\t\t@ConditionalOnMissingBean(value = IntegrationManagementConfigurer.class, name = IntegrationManagementConfigurer.MANAGEMENT_CONFIGURER_NAME, search = SearchStrategy.CURRENT)\n\t\tpublic IntegrationManagementConfigurer integrationManagementConfigurer() {\n\t\t\tIntegrationManagementConfigurer configurer = new IntegrationManagementConfigurer();\n\t\t\tconfigurer.setDefaultCountsEnabled(true);\n\t\t\tconfigurer.setDefaultStatsEnabled(true);\n\t\t\treturn configurer;\n\t\t}\n\n\t\t@Bean\n\t\tpublic SpringIntegrationMetrics springIntegrationMetrics(\n\t\t\t\tIntegrationManagementConfigurer configurer) {\n\t\t\treturn new SpringIntegrationMetrics(configurer);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ RabbitTemplate.class, Channel.class })\n\t@ConditionalOnBean(AbstractConnectionFactory.class)\n\t@ConditionalOnProperty(prefix = "spring.rabbitmq", name = "metrics", matchIfMissing = true)\n\tstatic class MetricsRabbitConfiguration {\n\n\t\t@Bean\n\t\tpublic RabbitMetrics rabbitMetrics(AbstractConnectionFactory connectionFactory) {\n\t\t\treturn new RabbitMetrics(connectionFactory.getRabbitConnectionFactory());\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class MeterRegistryConfigurationSupport {\n\n\t\tMeterRegistryConfigurationSupport(MeterRegistry registry,\n\t\t\t\tMetricsProperties config,\n\t\t\t\tObjectProvider<Collection<MeterBinder>> binders) {\n\t\t\tbinders.getIfAvailable(Collections::emptyList)\n\t\t\t\t\t.forEach((binder) -> binder.bindTo(registry));\n\t\t\tif (config.isUseGlobalRegistry() && registry != Metrics.globalRegistry) {\n\t\t\t\tMetrics.addRegistry(registry);\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics;\n\nimport java.util.Collection;\nimport java.util.Collections;\n\nimport io.micrometer.core.annotation.Timed;\nimport io.micrometer.core.instrument.MeterRegistry;\nimport io.micrometer.core.instrument.Metrics;\nimport io.micrometer.core.instrument.binder.MeterBinder;\nimport io.micrometer.core.instrument.composite.CompositeMeterRegistry;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\nimport org.springframework.boot.actuate.autoconfigure.metrics.cache.CacheMetricsConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.MetricsExporter;\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.atlas.AtlasExportConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.datadog.DatadogExportConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.ganglia.GangliaExportConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.graphite.GraphiteExportConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.influx.InfluxExportConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.jmx.JmxExportConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.prometheus.PrometheusExportConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleExportConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.statsd.StatsdExportConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.reactive.server.WebFluxMetricsConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.web.client.RestTemplateMetricsConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.web.servlet.WebMvcMetricsConfiguration;\nimport org.springframework.boot.actuate.metrics.MetricsEndpoint;\nimport org.springframework.boot.actuate.metrics.integration.SpringIntegrationMetrics;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.integration.config.EnableIntegrationManagement;\nimport org.springframework.integration.support.management.IntegrationManagementConfigurer;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Micrometer-based metrics.\n *\n * @since 2.0.0\n * @author Jon Schneider\n * @author Stephane Nicoll\n */\n@Configuration\n@ConditionalOnClass(Timed.class)\n@EnableConfigurationProperties(MetricsProperties.class)\n@Import({ MeterBindersConfiguration.class, WebMvcMetricsConfiguration.class,\n\t\tWebFluxMetricsConfiguration.class, RestTemplateMetricsConfiguration.class,\n\t\tCacheMetricsConfiguration.class, DataSourcePoolMetricsConfiguration.class,\n\t\tAtlasExportConfiguration.class, DatadogExportConfiguration.class,\n\t\tGangliaExportConfiguration.class, GraphiteExportConfiguration.class,\n\t\tInfluxExportConfiguration.class, JmxExportConfiguration.class,\n\t\tPrometheusExportConfiguration.class, SimpleExportConfiguration.class,\n\t\tStatsdExportConfiguration.class })\n@AutoConfigureAfter({ CacheAutoConfiguration.class, DataSourceAutoConfiguration.class,\n\t\tRestTemplateAutoConfiguration.class })\npublic class MetricsAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean(MeterRegistry.class)\n\tpublic CompositeMeterRegistry compositeMeterRegistry(\n\t\t\tMetricsProperties metricsProperties,\n\t\t\tObjectProvider<Collection<MetricsExporter>> exporters,\n\t\t\tObjectProvider<Collection<MeterRegistryConfigurer>> configurers) {\n\t\tCompositeMeterRegistry composite = metricsProperties.isUseGlobalRegistry()\n\t\t\t\t? Metrics.globalRegistry : new CompositeMeterRegistry();\n\t\tconfigurers.getIfAvailable(Collections::emptyList)\n\t\t\t\t.forEach((configurer) -> configurer.configureRegistry(composite));\n\t\texporters.getIfAvailable(Collections::emptyList).forEach((exporter) -> {\n\t\t\tMeterRegistry childRegistry = exporter.registry();\n\t\t\tif (composite == childRegistry) {\n\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t"cannot add a CompositeMeterRegistry to itself");\n\t\t\t}\n\t\t\tcomposite.add(childRegistry);\n\t\t});\n\t\treturn composite;\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(MeterRegistry.class)\n\t@ConditionalOnMissingBean\n\t@ConditionalOnEnabledEndpoint\n\tpublic MetricsEndpoint metricsEndpoint(MeterRegistry registry) {\n\t\treturn new MetricsEndpoint(registry);\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(EnableIntegrationManagement.class)\n\tstatic class MetricsIntegrationConfiguration {\n\n\t\t@Bean(name = IntegrationManagementConfigurer.MANAGEMENT_CONFIGURER_NAME)\n\t\t@ConditionalOnMissingBean(value = IntegrationManagementConfigurer.class, name = IntegrationManagementConfigurer.MANAGEMENT_CONFIGURER_NAME, search = SearchStrategy.CURRENT)\n\t\tpublic IntegrationManagementConfigurer integrationManagementConfigurer() {\n\t\t\tIntegrationManagementConfigurer configurer = new IntegrationManagementConfigurer();\n\t\t\tconfigurer.setDefaultCountsEnabled(true);\n\t\t\tconfigurer.setDefaultStatsEnabled(true);\n\t\t\treturn configurer;\n\t\t}\n\n\t\t@Bean\n\t\tpublic SpringIntegrationMetrics springIntegrationMetrics(\n\t\t\t\tIntegrationManagementConfigurer configurer) {\n\t\t\treturn new SpringIntegrationMetrics(configurer);\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class MeterRegistryConfigurationSupport {\n\n\t\tMeterRegistryConfigurationSupport(MeterRegistry registry,\n\t\t\t\tMetricsProperties config,\n\t\t\t\tObjectProvider<Collection<MeterBinder>> binders) {\n\t\t\tbinders.getIfAvailable(Collections::emptyList)\n\t\t\t\t\t.forEach((binder) -> binder.bindTo(registry));\n\t\t\tif (config.isUseGlobalRegistry() && registry != Metrics.globalRegistry) {\n\t\t\t\tMetrics.addRegistry(registry);\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
