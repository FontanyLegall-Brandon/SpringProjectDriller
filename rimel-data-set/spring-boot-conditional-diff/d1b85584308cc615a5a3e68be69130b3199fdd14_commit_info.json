{'_old_path': None, '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/ManagementWebSecurityAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2012-2018 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.boot.actuate.autoconfigure.security.servlet;\n+\n+import org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration;\n+import org.springframework.boot.actuate.autoconfigure.health.HealthEndpointAutoConfiguration;\n+import org.springframework.boot.actuate.autoconfigure.info.InfoEndpointAutoConfiguration;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration;\n+import org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration;\n+import org.springframework.boot.autoconfigure.security.servlet.WebSecurityEnablerConfiguration;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for Spring Security when actuator is\n+ * on the classpath. Specifically, it permits access to the health and info endpoints\n+ * while securing everything else.\n+ *\n+ * @author Madhura Bhave\n+ * @since 2.1.0\n+ */\n+@Configuration\n+@ConditionalOnClass(WebSecurityConfigurerAdapter.class)\n+@ConditionalOnMissingBean(WebSecurityConfigurerAdapter.class)\n+@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n+@AutoConfigureBefore(SecurityAutoConfiguration.class)\n+@AutoConfigureAfter({ HealthEndpointAutoConfiguration.class,\n+\t\tInfoEndpointAutoConfiguration.class, WebEndpointAutoConfiguration.class,\n+\t\tOAuth2ClientAutoConfiguration.class })\n+@Import({ ManagementWebSecurityConfigurerAdapter.class,\n+\t\tWebSecurityEnablerConfiguration.class })\n+public class ManagementWebSecurityAutoConfiguration {\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.boot.actuate.autoconfigure.security.servlet;\n\nimport org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.health.HealthEndpointAutoConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.info.InfoEndpointAutoConfiguration;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration;\nimport org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration;\nimport org.springframework.boot.autoconfigure.security.servlet.WebSecurityEnablerConfiguration;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Security when actuator is\n * on the classpath. Specifically, it permits access to the health and info endpoints\n * while securing everything else.\n *\n * @author Madhura Bhave\n * @since 2.1.0\n */\n@Configuration\n@ConditionalOnClass(WebSecurityConfigurerAdapter.class)\n@ConditionalOnMissingBean(WebSecurityConfigurerAdapter.class)\n@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n@AutoConfigureBefore(SecurityAutoConfiguration.class)\n@AutoConfigureAfter({ HealthEndpointAutoConfiguration.class,\n\t\tInfoEndpointAutoConfiguration.class, WebEndpointAutoConfiguration.class,\n\t\tOAuth2ClientAutoConfiguration.class })\n@Import({ ManagementWebSecurityConfigurerAdapter.class,\n\t\tWebSecurityEnablerConfiguration.class })\npublic class ManagementWebSecurityAutoConfiguration {\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
