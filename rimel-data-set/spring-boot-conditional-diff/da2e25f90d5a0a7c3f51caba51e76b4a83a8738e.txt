@@ -0,0 +1,135 @@
+
+
+package org.springframework.boot.autoconfigure.groovy.template;
+
+import groovy.text.TemplateEngine;
+import groovy.text.markup.BaseTemplate;
+import groovy.text.markup.MarkupTemplateEngine;
+import groovy.text.markup.TemplateConfiguration;
+
+import java.net.URL;
+import java.net.URLClassLoader;
+
+import javax.annotation.PostConstruct;
+import javax.servlet.Servlet;
+
+import org.springframework.beans.factory.BeanClassLoaderAware;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
+import org.springframework.boot.autoconfigure.groovy.template.web.GroovyTemplateViewResolver;
+import org.springframework.boot.autoconfigure.groovy.template.web.LocaleAwareTemplate;
+import org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;
+import org.springframework.boot.context.properties.EnableConfigurationProperties;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.context.i18n.LocaleContextHolder;
+import org.springframework.core.Ordered;
+import org.springframework.core.io.DefaultResourceLoader;
+import org.springframework.core.io.Resource;
+import org.springframework.core.io.ResourceLoader;
+import org.springframework.util.Assert;
+
+
+@Configuration
+@ConditionalOnClass(TemplateEngine.class)
+@AutoConfigureAfter(WebMvcAutoConfiguration.class)
+@EnableConfigurationProperties(GroovyTemplateProperties.class)
+public class GroovyTemplateAutoConfiguration {
+
+	@Autowired
+	private final ResourceLoader resourceLoader = new DefaultResourceLoader();
+
+	@Autowired
+	private GroovyTemplateProperties properties;
+
+	@PostConstruct
+	public void checkTemplateLocationExists() {
+		if (this.properties.isCheckTemplateLocation()) {
+			Resource resource = this.resourceLoader.getResource(this.properties
+					.getPrefix());
+			Assert.state(resource.exists(),  + resource
+					+ 
+					+ );
+		}
+	}
+
+	@Configuration
+	@ConditionalOnClass({ Servlet.class, LocaleContextHolder.class })
+	@ConditionalOnWebApplication
+	public static class GroovyWebConfiguration implements BeanClassLoaderAware {
+
+		@Autowired
+		private final ResourceLoader resourceLoader = new DefaultResourceLoader();
+
+		@Autowired
+		private GroovyTemplateProperties properties;
+
+		private ClassLoader classLoader = GroovyWebConfiguration.class.getClassLoader();
+
+		@Override
+		public void setBeanClassLoader(ClassLoader classLoader) {
+			this.classLoader = classLoader;
+		}
+
+		@Bean
+		@ConditionalOnMissingBean(TemplateEngine.class)
+		public TemplateEngine groovyTemplateEngine() throws Exception {
+			TemplateConfiguration configuration = this.properties.getConfiguration();
+			if (configuration.getBaseTemplateClass() == BaseTemplate.class) {
+				
+				configuration.setBaseTemplateClass(LocaleAwareTemplate.class);
+			}
+			return new MarkupTemplateEngine(createParentLoaderForTemplates(),
+					configuration);
+		}
+
+		private ClassLoader createParentLoaderForTemplates() throws Exception {
+			return new URLClassLoader(new URL[] { this.resourceLoader.getResource(
+					this.properties.getPrefix()).getURL() }, this.classLoader);
+		}
+
+		@Bean
+		@ConditionalOnMissingBean(name = )
+		public GroovyTemplateViewResolver groovyTemplateViewResolver(TemplateEngine engine) {
+			GroovyTemplateViewResolver resolver = new GroovyTemplateViewResolver();
+			resolver.setPrefix(this.properties.getPrefix());
+			resolver.setSuffix(this.properties.getSuffix());
+			resolver.setCache(this.properties.isCache());
+			resolver.setContentType(this.properties.getContentType());
+			resolver.setCharSet(this.properties.getCharSet());
+			resolver.setViewNames(this.properties.getViewNames());
+			resolver.setTemplateEngine(engine);
+
+			
+			
+			resolver.setOrder(Ordered.LOWEST_PRECEDENCE - 6);
+
+			return resolver;
+		}
+	}
+
+}

