@@ -30,11 +30,21 @@ import javax.servlet.http.HttpServletRequest;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
+import org.springframework.beans.BeansException;
 import org.springframework.beans.factory.BeanFactory;
+import org.springframework.beans.factory.BeanFactoryUtils;
+import org.springframework.beans.factory.DisposableBean;
+import org.springframework.beans.factory.InitializingBean;
 import org.springframework.beans.factory.ListableBeanFactory;
 import org.springframework.beans.factory.NoSuchBeanDefinitionException;
 import org.springframework.beans.factory.ObjectProvider;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.config.BeanDefinition;
+import org.springframework.beans.factory.config.BeanFactoryPostProcessor;
+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
+import org.springframework.beans.factory.support.BeanDefinitionRegistry;
+import org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;
+import org.springframework.beans.factory.support.RootBeanDefinition;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.AutoConfigureOrder;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
@@ -43,27 +53,38 @@ import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
+import org.springframework.boot.autoconfigure.validation.DelegatingValidator;
 import org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration;
 import org.springframework.boot.autoconfigure.web.ResourceProperties.Strategy;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.boot.web.filter.OrderedHiddenHttpMethodFilter;
 import org.springframework.boot.web.filter.OrderedHttpPutFormContentFilter;
 import org.springframework.boot.web.filter.OrderedRequestContextFilter;
+import org.springframework.context.ApplicationContext;
+import org.springframework.context.ApplicationContextAware;
 import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.ConditionContext;
+import org.springframework.context.annotation.Conditional;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.ConfigurationCondition;
 import org.springframework.context.annotation.Import;
 import org.springframework.context.annotation.Primary;
+import org.springframework.context.annotation.Role;
 import org.springframework.core.Ordered;
+import org.springframework.core.annotation.Order;
 import org.springframework.core.convert.converter.Converter;
 import org.springframework.core.convert.converter.GenericConverter;
 import org.springframework.core.io.Resource;
+import org.springframework.core.type.AnnotatedTypeMetadata;
 import org.springframework.format.Formatter;
 import org.springframework.format.FormatterRegistry;
 import org.springframework.format.datetime.DateFormatter;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.MediaType;
 import org.springframework.http.converter.HttpMessageConverter;
+import org.springframework.util.Assert;
 import org.springframework.util.ClassUtils;
+import org.springframework.util.ObjectUtils;
 import org.springframework.util.StringUtils;
 import org.springframework.validation.DefaultMessageCodesResolver;
 import org.springframework.validation.MessageCodesResolver;
@@ -142,6 +163,12 @@ public class WebMvcAutoConfiguration {
 	public static final String SKIP_PATH_EXTENSION_CONTENT_NEGOTIATION_ATTRIBUTE = PathExtensionContentNegotiationStrategy.class
 			.getName() + ;
 
+	@Bean
+	@Role(BeanDefinition.ROLE_INFRASTRUCTURE)
+	public static MvcValidatorPostProcessor mvcValidatorAliasPostProcessor() {
+		return new MvcValidatorPostProcessor();
+	}
+
 	@Bean
 	@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)
 	public OrderedHiddenHttpMethodFilter hiddenHttpMethodFilter() {
@@ -367,21 +394,22 @@ public class WebMvcAutoConfiguration {
 	 * Configuration equivalent to {@code @EnableWebMvc}.
 	 */
 	@Configuration
-	public static class EnableWebMvcConfiguration extends DelegatingWebMvcConfiguration {
+	public static class EnableWebMvcConfiguration extends DelegatingWebMvcConfiguration
+			implements InitializingBean {
 
 		private final WebMvcProperties mvcProperties;
 
-		private final ListableBeanFactory beanFactory;
+		private final ApplicationContext context;
 
 		private final WebMvcRegistrations mvcRegistrations;
 
 		public EnableWebMvcConfiguration(
 				ObjectProvider<WebMvcProperties> mvcPropertiesProvider,
 				ObjectProvider<WebMvcRegistrations> mvcRegistrationsProvider,
-				ListableBeanFactory beanFactory) {
+				ApplicationContext context) {
 			this.mvcProperties = mvcPropertiesProvider.getIfAvailable();
 			this.mvcRegistrations = mvcRegistrationsProvider.getIfUnique();
-			this.beanFactory = beanFactory;
+			this.context = context;
 		}
 
 		@Bean
@@ -412,12 +440,9 @@ public class WebMvcAutoConfiguration {
 
 		@Bean
 		@Override
+		@Conditional(DisableMvcValidatorCondition.class)
 		public Validator mvcValidator() {
-			if (!ClassUtils.isPresent(,
-					getClass().getClassLoader())) {
-				return super.mvcValidator();
-			}
-			return WebMvcValidator.get(getApplicationContext(), getValidator());
+			return this.context.getBean(, Validator.class);
 		}
 
 		@Override
@@ -432,7 +457,7 @@ public class WebMvcAutoConfiguration {
 		@Override
 		protected ConfigurableWebBindingInitializer getConfigurableWebBindingInitializer() {
 			try {
-				return this.beanFactory.getBean(ConfigurableWebBindingInitializer.class);
+				return this.context.getBean(ConfigurableWebBindingInitializer.class);
 			}
 			catch (NoSuchBeanDefinitionException ex) {
 				return super.getConfigurableWebBindingInitializer();
@@ -481,6 +506,15 @@ public class WebMvcAutoConfiguration {
 			return manager;
 		}
 
+		@Override
+		public void afterPropertiesSet() throws Exception {
+			Assert.state(getValidator() == null,
+					
+							+ 
+							+ 
+							+ );
+		}
+
 	}
 
 	@Configuration
@@ -606,4 +640,128 @@ public class WebMvcAutoConfiguration {
 
 	}
 
+	
+	static class DisableMvcValidatorCondition implements ConfigurationCondition {
+
+		@Override
+		public ConfigurationPhase getConfigurationPhase() {
+			return ConfigurationPhase.REGISTER_BEAN;
+		}
+
+		@Override
+		public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {
+			return false;
+		}
+
+	}
+
+	
+	@Order(Ordered.LOWEST_PRECEDENCE)
+	static class MvcValidatorPostProcessor
+			implements BeanDefinitionRegistryPostProcessor {
+
+		private static final String JSR303_VALIDATOR_CLASS = ;
+
+		@Override
+		public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry)
+				throws BeansException {
+			if (registry instanceof ListableBeanFactory) {
+				postProcess(registry, (ListableBeanFactory) registry);
+			}
+		}
+
+		@Override
+		public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)
+				throws BeansException {
+		}
+
+		private void postProcess(BeanDefinitionRegistry registry,
+				ListableBeanFactory beanFactory) {
+			String[] validatorBeans = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(
+					beanFactory, Validator.class, false, false);
+			if (validatorBeans.length == 0) {
+				registerMvcValidator(registry, beanFactory);
+			}
+			else if (validatorBeans.length == 1) {
+				registry.registerAlias(validatorBeans[0], );
+			}
+			else {
+				if (!ObjectUtils.containsElement(validatorBeans, )) {
+					registerMvcValidator(registry, beanFactory);
+				}
+			}
+		}
+
+		private void registerMvcValidator(BeanDefinitionRegistry registry,
+				ListableBeanFactory beanFactory) {
+			RootBeanDefinition definition = new RootBeanDefinition();
+			definition.setBeanClass(getClass());
+			definition.setFactoryMethodName();
+			registry.registerBeanDefinition(, definition);
+		}
+
+		static Validator mvcValidator() {
+			Validator validator = new WebMvcConfigurationSupport().mvcValidator();
+			try {
+				if (ClassUtils.forName(JSR303_VALIDATOR_CLASS, null)
+						.isInstance(validator)) {
+					return new DelegatingWebMvcValidator(validator);
+				}
+			}
+			catch (Exception ex) {
+			}
+			return validator;
+		}
+
+	}
+
+	
+	static class DelegatingWebMvcValidator extends DelegatingValidator
+			implements ApplicationContextAware, InitializingBean, DisposableBean {
+
+		public DelegatingWebMvcValidator(Validator targetValidator) {
+			super(targetValidator);
+		}
+
+		@Override
+		public void setApplicationContext(ApplicationContext applicationContext)
+				throws BeansException {
+			if (getDelegate() instanceof ApplicationContextAware) {
+				((ApplicationContextAware) getDelegate())
+						.setApplicationContext(applicationContext);
+			}
+		}
+
+		@Override
+		public void afterPropertiesSet() throws Exception {
+			if (getDelegate() instanceof InitializingBean) {
+				((InitializingBean) getDelegate()).afterPropertiesSet();
+			}
+		}
+
+		@Override
+		public void destroy() throws Exception {
+			if (getDelegate() instanceof DisposableBean) {
+				((DisposableBean) getDelegate()).destroy();
+			}
+		}
+
+	}
+
 }

