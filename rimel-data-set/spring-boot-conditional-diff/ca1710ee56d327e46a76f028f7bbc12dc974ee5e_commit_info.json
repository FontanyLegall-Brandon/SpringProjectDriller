{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraRepositoriesAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraRepositoriesAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2019 the original author or authors.\n+ * Copyright 2012-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -16,7 +16,7 @@\n \n package org.springframework.boot.autoconfigure.data.cassandra;\n \n-import com.datastax.driver.core.Session;\n+import com.datastax.oss.driver.api.core.CqlSession;\n \n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n@@ -38,7 +38,7 @@ import org.springframework.data.cassandra.repository.support.CassandraRepository\n  * @since 1.3.0\n  */\n @Configuration(proxyBeanMethods = false)\n-@ConditionalOnClass({ Session.class, CassandraRepository.class })\n+@ConditionalOnClass({ CqlSession.class, CassandraRepository.class })\n @ConditionalOnRepositoryType(store = "cassandra", type = RepositoryType.IMPERATIVE)\n @ConditionalOnMissingBean(CassandraRepositoryFactoryBean.class)\n @Import(CassandraRepositoriesRegistrar.class)\n', 'source_code': '/*\n * Copyright 2012-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.cassandra;\n\nimport com.datastax.oss.driver.api.core.CqlSession;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.data.ConditionalOnRepositoryType;\nimport org.springframework.boot.autoconfigure.data.RepositoryType;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.data.cassandra.repository.CassandraRepository;\nimport org.springframework.data.cassandra.repository.config.EnableCassandraRepositories;\nimport org.springframework.data.cassandra.repository.support.CassandraRepositoryFactoryBean;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s Cassandra\n * Repositories.\n *\n * @author Eddú Meléndez\n * @see EnableCassandraRepositories\n * @since 1.3.0\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass({ CqlSession.class, CassandraRepository.class })\n@ConditionalOnRepositoryType(store = "cassandra", type = RepositoryType.IMPERATIVE)\n@ConditionalOnMissingBean(CassandraRepositoryFactoryBean.class)\n@Import(CassandraRepositoriesRegistrar.class)\npublic class CassandraRepositoriesAutoConfiguration {\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.cassandra;\n\nimport com.datastax.driver.core.Session;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.data.ConditionalOnRepositoryType;\nimport org.springframework.boot.autoconfigure.data.RepositoryType;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.data.cassandra.repository.CassandraRepository;\nimport org.springframework.data.cassandra.repository.config.EnableCassandraRepositories;\nimport org.springframework.data.cassandra.repository.support.CassandraRepositoryFactoryBean;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s Cassandra\n * Repositories.\n *\n * @author Eddú Meléndez\n * @see EnableCassandraRepositories\n * @since 1.3.0\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass({ Session.class, CassandraRepository.class })\n@ConditionalOnRepositoryType(store = "cassandra", type = RepositoryType.IMPERATIVE)\n@ConditionalOnMissingBean(CassandraRepositoryFactoryBean.class)\n@Import(CassandraRepositoriesRegistrar.class)\npublic class CassandraRepositoriesAutoConfiguration {\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
