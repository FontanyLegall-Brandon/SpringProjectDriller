{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/saml2/Saml2LoginConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/saml2/Saml2LoginConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -17,6 +17,7 @@\n package org.springframework.boot.autoconfigure.security.saml2;\n \n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n@@ -33,6 +34,7 @@ import org.springframework.security.saml2.provider.service.registration.RelyingP\n class Saml2LoginConfiguration {\n \n \t@Configuration(proxyBeanMethods = false)\n+\t@ConditionalOnMissingBean(WebSecurityConfigurerAdapter.class)\n \tstatic class Saml2LoginConfigurerAdapter extends WebSecurityConfigurerAdapter {\n \n \t\t@Override\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security.saml2;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistrationRepository;\n\n/**\n * {@link WebSecurityConfigurerAdapter} configuration for Spring Security\'s relying party\n * SAML support.\n *\n * @author Madhura Bhave\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnBean(RelyingPartyRegistrationRepository.class)\nclass Saml2LoginConfiguration {\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnMissingBean(WebSecurityConfigurerAdapter.class)\n\tstatic class Saml2LoginConfigurerAdapter extends WebSecurityConfigurerAdapter {\n\n\t\t@Override\n\t\tprotected void configure(HttpSecurity http) throws Exception {\n\t\t\thttp.authorizeRequests((requests) -> requests.anyRequest().authenticated()).saml2Login();\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security.saml2;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistrationRepository;\n\n/**\n * {@link WebSecurityConfigurerAdapter} configuration for Spring Security\'s relying party\n * SAML support.\n *\n * @author Madhura Bhave\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnBean(RelyingPartyRegistrationRepository.class)\nclass Saml2LoginConfiguration {\n\n\t@Configuration(proxyBeanMethods = false)\n\tstatic class Saml2LoginConfigurerAdapter extends WebSecurityConfigurerAdapter {\n\n\t\t@Override\n\t\tprotected void configure(HttpSecurity http) throws Exception {\n\t\t\thttp.authorizeRequests((requests) -> requests.anyRequest().authenticated()).saml2Login();\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
