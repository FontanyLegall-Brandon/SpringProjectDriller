{'_old_path': PosixPath('spring-boot-project/spring-boot-test/src/test/java/org/springframework/boot/test/context/runner/AbstractApplicationContextRunnerTests.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-test/src/test/java/org/springframework/boot/test/context/runner/AbstractApplicationContextRunnerTests.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -30,8 +30,12 @@ import org.springframework.boot.test.context.FilteredClassLoader;\n import org.springframework.boot.test.context.assertj.ApplicationContextAssertProvider;\n import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Condition;\n+import org.springframework.context.annotation.ConditionContext;\n+import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.core.env.Environment;\n+import org.springframework.core.type.AnnotatedTypeMetadata;\n import org.springframework.util.ClassUtils;\n \n import static org.assertj.core.api.Assertions.assertThat;\n@@ -150,7 +154,7 @@ public abstract class AbstractApplicationContextRunnerTests<T extends AbstractAp\n \t}\n \n \t@Test\n-\tpublic void runWithClassLoaderShouldSetClassLoader() {\n+\tpublic void runWithClassLoaderShouldSetClassLoaderOnContext() {\n \t\tget().withClassLoader(new FilteredClassLoader(Gson.class.getPackage().getName()))\n \t\t\t\t.run((context) -> {\n \t\t\t\t\ttry {\n@@ -164,6 +168,14 @@ public abstract class AbstractApplicationContextRunnerTests<T extends AbstractAp\n \t\t\t\t});\n \t}\n \n+\t@Test\n+\tpublic void runWithClassLoaderShouldSetClassLoaderOnConditionContext() {\n+\t\tget().withClassLoader(new FilteredClassLoader(Gson.class.getPackage().getName()))\n+\t\t\t\t.withUserConfiguration(ConditionalConfig.class)\n+\t\t\t\t.run((context) -> assertThat(context)\n+\t\t\t\t\t\t.hasSingleBean(ConditionalConfig.class));\n+\t}\n+\n \t@Test\n \tpublic void thrownRuleWorksWithCheckedException() {\n \t\tget().run((context) -> {\n@@ -209,4 +221,19 @@ public abstract class AbstractApplicationContextRunnerTests<T extends AbstractAp\n \n \t}\n \n+\t@Configuration\n+\t@Conditional(FilteredClassLoaderCondition.class)\n+\tstatic class ConditionalConfig {\n+\n+\t}\n+\n+\tstatic class FilteredClassLoaderCondition implements Condition {\n+\n+\t\t@Override\n+\t\tpublic boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n+\t\t\treturn context.getClassLoader() instanceof FilteredClassLoader;\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.test.context.runner;\n\nimport java.io.IOException;\nimport java.util.UUID;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\nimport com.google.gson.Gson;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExpectedException;\n\nimport org.springframework.boot.context.annotation.UserConfigurations;\nimport org.springframework.boot.test.context.FilteredClassLoader;\nimport org.springframework.boot.test.context.assertj.ApplicationContextAssertProvider;\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Condition;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.util.ClassUtils;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.Assert.fail;\n\n/**\n * Abstract tests for {@link AbstractApplicationContextRunner} implementations.\n *\n * @param <T> The runner type\n * @param <C> the context type\n * @param <A> the assertable context type\n * @author Stephane Nicoll\n * @author Phillip Webb\n */\npublic abstract class AbstractApplicationContextRunnerTests<T extends AbstractApplicationContextRunner<T, C, A>, C extends ConfigurableApplicationContext, A extends ApplicationContextAssertProvider<C>> {\n\n\t@Rule\n\tpublic ExpectedException thrown = ExpectedException.none();\n\n\t@Test\n\tpublic void runWithInitializerShouldInitialize() {\n\t\tAtomicBoolean called = new AtomicBoolean();\n\t\tget().withInitializer((context) -> called.set(true)).run((context) -> {\n\t\t});\n\t\tassertThat(called).isTrue();\n\t}\n\n\t@Test\n\tpublic void runWithSystemPropertiesShouldSetAndRemoveProperties() {\n\t\tString key = "test." + UUID.randomUUID();\n\t\tassertThat(System.getProperties().containsKey(key)).isFalse();\n\t\tget().withSystemProperties(key + "=value")\n\t\t\t\t.run((context) -> assertThat(System.getProperties()).containsEntry(key,\n\t\t\t\t\t\t"value"));\n\t\tassertThat(System.getProperties().containsKey(key)).isFalse();\n\t}\n\n\t@Test\n\tpublic void runWithSystemPropertiesWhenContextFailsShouldRemoveProperties() {\n\t\tString key = "test." + UUID.randomUUID();\n\t\tassertThat(System.getProperties().containsKey(key)).isFalse();\n\t\tget().withSystemProperties(key + "=value")\n\t\t\t\t.withUserConfiguration(FailingConfig.class)\n\t\t\t\t.run((context) -> assertThat(context).hasFailed());\n\t\tassertThat(System.getProperties().containsKey(key)).isFalse();\n\t}\n\n\t@Test\n\tpublic void runWithSystemPropertiesShouldRestoreOriginalProperties() {\n\t\tString key = "test." + UUID.randomUUID();\n\t\tSystem.setProperty(key, "value");\n\t\ttry {\n\t\t\tassertThat(System.getProperties().getProperty(key)).isEqualTo("value");\n\t\t\tget().withSystemProperties(key + "=newValue")\n\t\t\t\t\t.run((context) -> assertThat(System.getProperties())\n\t\t\t\t\t\t\t.containsEntry(key, "newValue"));\n\t\t\tassertThat(System.getProperties().getProperty(key)).isEqualTo("value");\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(key);\n\t\t}\n\t}\n\n\t@Test\n\tpublic void runWithSystemPropertiesWhenValueIsNullShouldRemoveProperty() {\n\t\tString key = "test." + UUID.randomUUID();\n\t\tSystem.setProperty(key, "value");\n\t\ttry {\n\t\t\tassertThat(System.getProperties().getProperty(key)).isEqualTo("value");\n\t\t\tget().withSystemProperties(key + "=")\n\t\t\t\t\t.run((context) -> assertThat(System.getProperties())\n\t\t\t\t\t\t\t.doesNotContainKey(key));\n\t\t\tassertThat(System.getProperties().getProperty(key)).isEqualTo("value");\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(key);\n\t\t}\n\t}\n\n\t@Test\n\tpublic void runWithMultiplePropertyValuesShouldAllAllValues() {\n\t\tget().withPropertyValues("test.foo=1").withPropertyValues("test.bar=2")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tEnvironment environment = context.getEnvironment();\n\t\t\t\t\tassertThat(environment.getProperty("test.foo")).isEqualTo("1");\n\t\t\t\t\tassertThat(environment.getProperty("test.bar")).isEqualTo("2");\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void runWithPropertyValuesWhenHasExistingShouldReplaceValue() {\n\t\tget().withPropertyValues("test.foo=1").withPropertyValues("test.foo=2")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tEnvironment environment = context.getEnvironment();\n\t\t\t\t\tassertThat(environment.getProperty("test.foo")).isEqualTo("2");\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void runWithConfigurationsShouldRegisterConfigurations() {\n\t\tget().withUserConfiguration(FooConfig.class)\n\t\t\t\t.run((context) -> assertThat(context).hasBean("foo"));\n\t}\n\n\t@Test\n\tpublic void runWithMultipleConfigurationsShouldRegisterAllConfigurations() {\n\t\tget().withUserConfiguration(FooConfig.class)\n\t\t\t\t.withConfiguration(UserConfigurations.of(BarConfig.class))\n\t\t\t\t.run((context) -> assertThat(context).hasBean("foo").hasBean("bar"));\n\t}\n\n\t@Test\n\tpublic void runWithFailedContextShouldReturnFailedAssertableContext() {\n\t\tget().withUserConfiguration(FailingConfig.class)\n\t\t\t\t.run((context) -> assertThat(context).hasFailed());\n\t}\n\n\t@Test\n\tpublic void runWithClassLoaderShouldSetClassLoaderOnContext() {\n\t\tget().withClassLoader(new FilteredClassLoader(Gson.class.getPackage().getName()))\n\t\t\t\t.run((context) -> {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tClassUtils.forName(Gson.class.getName(),\n\t\t\t\t\t\t\t\tcontext.getClassLoader());\n\t\t\t\t\t\tfail("Should have thrown a ClassNotFoundException");\n\t\t\t\t\t}\n\t\t\t\t\tcatch (ClassNotFoundException ex) {\n\t\t\t\t\t\t// expected\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void runWithClassLoaderShouldSetClassLoaderOnConditionContext() {\n\t\tget().withClassLoader(new FilteredClassLoader(Gson.class.getPackage().getName()))\n\t\t\t\t.withUserConfiguration(ConditionalConfig.class)\n\t\t\t\t.run((context) -> assertThat(context)\n\t\t\t\t\t\t.hasSingleBean(ConditionalConfig.class));\n\t}\n\n\t@Test\n\tpublic void thrownRuleWorksWithCheckedException() {\n\t\tget().run((context) -> {\n\t\t\tthis.thrown.expect(IOException.class);\n\t\t\tthis.thrown.expectMessage("Expected message");\n\t\t\tthrowCheckedException("Expected message");\n\t\t});\n\t}\n\n\tprotected abstract T get();\n\n\tprivate static void throwCheckedException(String message) throws IOException {\n\t\tthrow new IOException(message);\n\t}\n\n\t@Configuration\n\tstatic class FailingConfig {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\tthrow new IllegalStateException("Failed");\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class FooConfig {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class BarConfig {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@Conditional(FilteredClassLoaderCondition.class)\n\tstatic class ConditionalConfig {\n\n\t}\n\n\tstatic class FilteredClassLoaderCondition implements Condition {\n\n\t\t@Override\n\t\tpublic boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n\t\t\treturn context.getClassLoader() instanceof FilteredClassLoader;\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.test.context.runner;\n\nimport java.io.IOException;\nimport java.util.UUID;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\nimport com.google.gson.Gson;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExpectedException;\n\nimport org.springframework.boot.context.annotation.UserConfigurations;\nimport org.springframework.boot.test.context.FilteredClassLoader;\nimport org.springframework.boot.test.context.assertj.ApplicationContextAssertProvider;\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\nimport org.springframework.util.ClassUtils;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.Assert.fail;\n\n/**\n * Abstract tests for {@link AbstractApplicationContextRunner} implementations.\n *\n * @param <T> The runner type\n * @param <C> the context type\n * @param <A> the assertable context type\n * @author Stephane Nicoll\n * @author Phillip Webb\n */\npublic abstract class AbstractApplicationContextRunnerTests<T extends AbstractApplicationContextRunner<T, C, A>, C extends ConfigurableApplicationContext, A extends ApplicationContextAssertProvider<C>> {\n\n\t@Rule\n\tpublic ExpectedException thrown = ExpectedException.none();\n\n\t@Test\n\tpublic void runWithInitializerShouldInitialize() {\n\t\tAtomicBoolean called = new AtomicBoolean();\n\t\tget().withInitializer((context) -> called.set(true)).run((context) -> {\n\t\t});\n\t\tassertThat(called).isTrue();\n\t}\n\n\t@Test\n\tpublic void runWithSystemPropertiesShouldSetAndRemoveProperties() {\n\t\tString key = "test." + UUID.randomUUID();\n\t\tassertThat(System.getProperties().containsKey(key)).isFalse();\n\t\tget().withSystemProperties(key + "=value")\n\t\t\t\t.run((context) -> assertThat(System.getProperties()).containsEntry(key,\n\t\t\t\t\t\t"value"));\n\t\tassertThat(System.getProperties().containsKey(key)).isFalse();\n\t}\n\n\t@Test\n\tpublic void runWithSystemPropertiesWhenContextFailsShouldRemoveProperties() {\n\t\tString key = "test." + UUID.randomUUID();\n\t\tassertThat(System.getProperties().containsKey(key)).isFalse();\n\t\tget().withSystemProperties(key + "=value")\n\t\t\t\t.withUserConfiguration(FailingConfig.class)\n\t\t\t\t.run((context) -> assertThat(context).hasFailed());\n\t\tassertThat(System.getProperties().containsKey(key)).isFalse();\n\t}\n\n\t@Test\n\tpublic void runWithSystemPropertiesShouldRestoreOriginalProperties() {\n\t\tString key = "test." + UUID.randomUUID();\n\t\tSystem.setProperty(key, "value");\n\t\ttry {\n\t\t\tassertThat(System.getProperties().getProperty(key)).isEqualTo("value");\n\t\t\tget().withSystemProperties(key + "=newValue")\n\t\t\t\t\t.run((context) -> assertThat(System.getProperties())\n\t\t\t\t\t\t\t.containsEntry(key, "newValue"));\n\t\t\tassertThat(System.getProperties().getProperty(key)).isEqualTo("value");\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(key);\n\t\t}\n\t}\n\n\t@Test\n\tpublic void runWithSystemPropertiesWhenValueIsNullShouldRemoveProperty() {\n\t\tString key = "test." + UUID.randomUUID();\n\t\tSystem.setProperty(key, "value");\n\t\ttry {\n\t\t\tassertThat(System.getProperties().getProperty(key)).isEqualTo("value");\n\t\t\tget().withSystemProperties(key + "=")\n\t\t\t\t\t.run((context) -> assertThat(System.getProperties())\n\t\t\t\t\t\t\t.doesNotContainKey(key));\n\t\t\tassertThat(System.getProperties().getProperty(key)).isEqualTo("value");\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(key);\n\t\t}\n\t}\n\n\t@Test\n\tpublic void runWithMultiplePropertyValuesShouldAllAllValues() {\n\t\tget().withPropertyValues("test.foo=1").withPropertyValues("test.bar=2")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tEnvironment environment = context.getEnvironment();\n\t\t\t\t\tassertThat(environment.getProperty("test.foo")).isEqualTo("1");\n\t\t\t\t\tassertThat(environment.getProperty("test.bar")).isEqualTo("2");\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void runWithPropertyValuesWhenHasExistingShouldReplaceValue() {\n\t\tget().withPropertyValues("test.foo=1").withPropertyValues("test.foo=2")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tEnvironment environment = context.getEnvironment();\n\t\t\t\t\tassertThat(environment.getProperty("test.foo")).isEqualTo("2");\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void runWithConfigurationsShouldRegisterConfigurations() {\n\t\tget().withUserConfiguration(FooConfig.class)\n\t\t\t\t.run((context) -> assertThat(context).hasBean("foo"));\n\t}\n\n\t@Test\n\tpublic void runWithMultipleConfigurationsShouldRegisterAllConfigurations() {\n\t\tget().withUserConfiguration(FooConfig.class)\n\t\t\t\t.withConfiguration(UserConfigurations.of(BarConfig.class))\n\t\t\t\t.run((context) -> assertThat(context).hasBean("foo").hasBean("bar"));\n\t}\n\n\t@Test\n\tpublic void runWithFailedContextShouldReturnFailedAssertableContext() {\n\t\tget().withUserConfiguration(FailingConfig.class)\n\t\t\t\t.run((context) -> assertThat(context).hasFailed());\n\t}\n\n\t@Test\n\tpublic void runWithClassLoaderShouldSetClassLoader() {\n\t\tget().withClassLoader(new FilteredClassLoader(Gson.class.getPackage().getName()))\n\t\t\t\t.run((context) -> {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tClassUtils.forName(Gson.class.getName(),\n\t\t\t\t\t\t\t\tcontext.getClassLoader());\n\t\t\t\t\t\tfail("Should have thrown a ClassNotFoundException");\n\t\t\t\t\t}\n\t\t\t\t\tcatch (ClassNotFoundException ex) {\n\t\t\t\t\t\t// expected\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void thrownRuleWorksWithCheckedException() {\n\t\tget().run((context) -> {\n\t\t\tthis.thrown.expect(IOException.class);\n\t\t\tthis.thrown.expectMessage("Expected message");\n\t\t\tthrowCheckedException("Expected message");\n\t\t});\n\t}\n\n\tprotected abstract T get();\n\n\tprivate static void throwCheckedException(String message) throws IOException {\n\t\tthrow new IOException(message);\n\t}\n\n\t@Configuration\n\tstatic class FailingConfig {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\tthrow new IllegalStateException("Failed");\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class FooConfig {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class BarConfig {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
