{'_old_path': None, '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/jersey2/server/JerseyServerMetricsAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2012-2018 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.autoconfigure.metrics.jersey2.server;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.AnnotatedElement;\n+\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.jersey2.server.AnnotationFinder;\n+import io.micrometer.jersey2.server.DefaultJerseyTagsProvider;\n+import io.micrometer.jersey2.server.JerseyTagsProvider;\n+import io.micrometer.jersey2.server.MetricsApplicationEventListener;\n+import org.glassfish.jersey.server.ResourceConfig;\n+\n+import org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration;\n+import org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.autoconfigure.jersey.ResourceConfigCustomizer;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.annotation.AnnotationUtils;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for Jersey server instrumentation.\n+ *\n+ * @author Michael Weirauch\n+ * @author Michael Simons\n+ * @since 2.1.0\n+ */\n+@Configuration\n+@AutoConfigureAfter({ MetricsAutoConfiguration.class,\n+\t\tSimpleMetricsExportAutoConfiguration.class })\n+@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n+@ConditionalOnClass({ ResourceConfig.class, MetricsApplicationEventListener.class })\n+@ConditionalOnBean({ MeterRegistry.class, ResourceConfig.class })\n+@EnableConfigurationProperties(JerseyServerMetricsProperties.class)\n+public class JerseyServerMetricsAutoConfiguration {\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean(JerseyTagsProvider.class)\n+\tpublic DefaultJerseyTagsProvider jerseyTagsProvider() {\n+\t\treturn new DefaultJerseyTagsProvider();\n+\t}\n+\n+\t@Bean\n+\tpublic ResourceConfigCustomizer jerseyServerMetricsResourceConfigCustomizer(\n+\t\t\tMeterRegistry meterRegistry, JerseyServerMetricsProperties properties,\n+\t\t\tJerseyTagsProvider tagsProvider) {\n+\t\treturn (config) -> config.register(new MetricsApplicationEventListener(\n+\t\t\t\tmeterRegistry, tagsProvider, properties.getRequestsMetricName(),\n+\t\t\t\tproperties.isAutoTimeRequests(), new AnnotationFinder() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic <A extends Annotation> A findAnnotation(\n+\t\t\t\t\t\t\tAnnotatedElement annotatedElement, Class<A> annotationType) {\n+\t\t\t\t\t\treturn AnnotationUtils.findAnnotation(annotatedElement,\n+\t\t\t\t\t\t\t\tannotationType);\n+\t\t\t\t\t}\n+\t\t\t\t}));\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics.jersey2.server;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.AnnotatedElement;\n\nimport io.micrometer.core.instrument.MeterRegistry;\nimport io.micrometer.jersey2.server.AnnotationFinder;\nimport io.micrometer.jersey2.server.DefaultJerseyTagsProvider;\nimport io.micrometer.jersey2.server.JerseyTagsProvider;\nimport io.micrometer.jersey2.server.MetricsApplicationEventListener;\nimport org.glassfish.jersey.server.ResourceConfig;\n\nimport org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.jersey.ResourceConfigCustomizer;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.AnnotationUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Jersey server instrumentation.\n *\n * @author Michael Weirauch\n * @author Michael Simons\n * @since 2.1.0\n */\n@Configuration\n@AutoConfigureAfter({ MetricsAutoConfiguration.class,\n\t\tSimpleMetricsExportAutoConfiguration.class })\n@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n@ConditionalOnClass({ ResourceConfig.class, MetricsApplicationEventListener.class })\n@ConditionalOnBean({ MeterRegistry.class, ResourceConfig.class })\n@EnableConfigurationProperties(JerseyServerMetricsProperties.class)\npublic class JerseyServerMetricsAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean(JerseyTagsProvider.class)\n\tpublic DefaultJerseyTagsProvider jerseyTagsProvider() {\n\t\treturn new DefaultJerseyTagsProvider();\n\t}\n\n\t@Bean\n\tpublic ResourceConfigCustomizer jerseyServerMetricsResourceConfigCustomizer(\n\t\t\tMeterRegistry meterRegistry, JerseyServerMetricsProperties properties,\n\t\t\tJerseyTagsProvider tagsProvider) {\n\t\treturn (config) -> config.register(new MetricsApplicationEventListener(\n\t\t\t\tmeterRegistry, tagsProvider, properties.getRequestsMetricName(),\n\t\t\t\tproperties.isAutoTimeRequests(), new AnnotationFinder() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic <A extends Annotation> A findAnnotation(\n\t\t\t\t\t\t\tAnnotatedElement annotatedElement, Class<A> annotationType) {\n\t\t\t\t\t\treturn AnnotationUtils.findAnnotation(annotatedElement,\n\t\t\t\t\t\t\t\tannotationType);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
