{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/HealthEndpointWebIntegrationTests.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/HealthEndpointWebIntegrationTests.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2018 the original author or authors.\n+ * Copyright 2012-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -17,13 +17,20 @@\n package org.springframework.boot.actuate.health;\n \n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.function.Consumer;\n \n import org.junit.Test;\n import org.junit.runner.RunWith;\n+import reactor.core.publisher.Mono;\n \n+import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n import org.springframework.boot.actuate.endpoint.web.test.WebEndpointRunners;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\n import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n@@ -51,23 +58,87 @@ public class HealthEndpointWebIntegrationTests {\n \t}\n \n \t@Test\n-\tpublic void whenHealthIsDown503ResponseIsReturned() {\n+\tpublic void whenHealthIsDown503ResponseIsReturned() throws Exception {\n+\t\twithHealthIndicator("charlie", () -> Health.down().build(),\n+\t\t\t\t() -> Mono.just(Health.down().build()), () -> {\n+\t\t\t\t\tclient.get().uri("/actuator/health").exchange().expectStatus()\n+\t\t\t\t\t\t\t.isEqualTo(HttpStatus.SERVICE_UNAVAILABLE).expectBody()\n+\t\t\t\t\t\t\t.jsonPath("status").isEqualTo("DOWN")\n+\t\t\t\t\t\t\t.jsonPath("details.alpha.status").isEqualTo("UP")\n+\t\t\t\t\t\t\t.jsonPath("details.bravo.status").isEqualTo("UP")\n+\t\t\t\t\t\t\t.jsonPath("details.charlie.status").isEqualTo("DOWN");\n+\t\t\t\t\treturn null;\n+\t\t\t\t});\n+\t}\n+\n+\t@Test\n+\tpublic void whenComponentHealthIsDown503ResponseIsReturned() throws Exception {\n+\t\twithHealthIndicator("charlie", () -> Health.down().build(),\n+\t\t\t\t() -> Mono.just(Health.down().build()), () -> {\n+\t\t\t\t\tclient.get().uri("/actuator/health/charlie").exchange().expectStatus()\n+\t\t\t\t\t\t\t.isEqualTo(HttpStatus.SERVICE_UNAVAILABLE).expectBody()\n+\t\t\t\t\t\t\t.jsonPath("status").isEqualTo("DOWN");\n+\t\t\t\t\treturn null;\n+\t\t\t\t});\n+\t}\n+\n+\t@Test\n+\tpublic void whenComponentInstanceHealthIsDown503ResponseIsReturned()\n+\t\t\tthrows Exception {\n+\t\tCompositeHealthIndicator composite = new CompositeHealthIndicator(\n+\t\t\t\tnew OrderedHealthAggregator(),\n+\t\t\t\tCollections.singletonMap("one", () -> Health.down().build()));\n+\t\tCompositeReactiveHealthIndicator reactiveComposite = new CompositeReactiveHealthIndicator(\n+\t\t\t\tnew OrderedHealthAggregator(),\n+\t\t\t\tnew DefaultReactiveHealthIndicatorRegistry(Collections.singletonMap("one",\n+\t\t\t\t\t\t() -> Mono.just(Health.down().build()))));\n+\t\twithHealthIndicator("charlie", composite, reactiveComposite, () -> {\n+\t\t\tclient.get().uri("/actuator/health/charlie/one").exchange().expectStatus()\n+\t\t\t\t\t.isEqualTo(HttpStatus.SERVICE_UNAVAILABLE).expectBody()\n+\t\t\t\t\t.jsonPath("status").isEqualTo("DOWN");\n+\t\t\treturn null;\n+\t\t});\n+\t}\n+\n+\tprivate void withHealthIndicator(String name, HealthIndicator healthIndicator,\n+\t\t\tReactiveHealthIndicator reactiveHealthIndicator, Callable<Void> action)\n+\t\t\tthrows Exception {\n+\t\tConsumer<String> unregister;\n+\t\tConsumer<String> reactiveUnregister;\n+\t\ttry {\n+\t\t\tReactiveHealthIndicatorRegistry registry = context\n+\t\t\t\t\t.getBean(ReactiveHealthIndicatorRegistry.class);\n+\t\t\tregistry.register(name, reactiveHealthIndicator);\n+\t\t\treactiveUnregister = registry::unregister;\n+\t\t}\n+\t\tcatch (NoSuchBeanDefinitionException ex) {\n+\t\t\treactiveUnregister = (indicatorName) -> {\n+\t\t\t};\n+\t\t\t// Continue\n+\t\t}\n \t\tHealthIndicatorRegistry registry = context.getBean(HealthIndicatorRegistry.class);\n-\t\tregistry.register("charlie", () -> Health.down().build());\n+\t\tregistry.register(name, healthIndicator);\n+\t\tunregister = reactiveUnregister.andThen(registry::unregister);\n \t\ttry {\n-\t\t\tclient.get().uri("/actuator/health").exchange().expectStatus()\n-\t\t\t\t\t.isEqualTo(HttpStatus.SERVICE_UNAVAILABLE).expectBody()\n-\t\t\t\t\t.jsonPath("status").isEqualTo("DOWN").jsonPath("details.alpha.status")\n-\t\t\t\t\t.isEqualTo("UP").jsonPath("details.bravo.status").isEqualTo("UP")\n-\t\t\t\t\t.jsonPath("details.charlie.status").isEqualTo("DOWN");\n+\t\t\taction.call();\n \t\t}\n \t\tfinally {\n-\t\t\tregistry.unregister("charlie");\n+\t\t\tunregister.accept("charlie");\n \t\t}\n \t}\n \n \t@Test\n \tpublic void whenHealthIndicatorIsRemovedResponseIsAltered() {\n+\t\tConsumer<String> reactiveRegister = null;\n+\t\ttry {\n+\t\t\tReactiveHealthIndicatorRegistry registry = context\n+\t\t\t\t\t.getBean(ReactiveHealthIndicatorRegistry.class);\n+\t\t\tReactiveHealthIndicator unregistered = registry.unregister("bravo");\n+\t\t\treactiveRegister = (name) -> registry.register(name, unregistered);\n+\t\t}\n+\t\tcatch (NoSuchBeanDefinitionException ex) {\n+\t\t\t// Continue\n+\t\t}\n \t\tHealthIndicatorRegistry registry = context.getBean(HealthIndicatorRegistry.class);\n \t\tHealthIndicator bravo = registry.unregister("bravo");\n \t\ttry {\n@@ -78,6 +149,9 @@ public class HealthEndpointWebIntegrationTests {\n \t\t}\n \t\tfinally {\n \t\t\tregistry.register("bravo", bravo);\n+\t\t\tif (reactiveRegister != null) {\n+\t\t\t\treactiveRegister.accept("bravo");\n+\t\t\t}\n \t\t}\n \t}\n \n@@ -91,6 +165,16 @@ public class HealthEndpointWebIntegrationTests {\n \t\t\t\t\t.createHealthIndicatorRegistry(healthIndicators);\n \t\t}\n \n+\t\t@Bean\n+\t\t@ConditionalOnWebApplication(type = Type.REACTIVE)\n+\t\tpublic ReactiveHealthIndicatorRegistry reactiveHealthIndicatorRegistry(\n+\t\t\t\tMap<String, ReactiveHealthIndicator> reactiveHealthIndicators,\n+\t\t\t\tMap<String, HealthIndicator> healthIndicators) {\n+\t\t\treturn new ReactiveHealthIndicatorRegistryFactory()\n+\t\t\t\t\t.createReactiveHealthIndicatorRegistry(reactiveHealthIndicators,\n+\t\t\t\t\t\t\thealthIndicators);\n+\t\t}\n+\n \t\t@Bean\n \t\tpublic HealthEndpoint healthEndpoint(HealthIndicatorRegistry registry) {\n \t\t\treturn new HealthEndpoint(new CompositeHealthIndicator(\n@@ -98,6 +182,7 @@ public class HealthEndpointWebIntegrationTests {\n \t\t}\n \n \t\t@Bean\n+\t\t@ConditionalOnWebApplication(type = Type.SERVLET)\n \t\tpublic HealthEndpointWebExtension healthWebEndpointExtension(\n \t\t\t\tHealthEndpoint healthEndpoint) {\n \t\t\treturn new HealthEndpointWebExtension(healthEndpoint,\n@@ -106,6 +191,18 @@ public class HealthEndpointWebIntegrationTests {\n \t\t\t\t\t\t\tnew HashSet<>(Arrays.asList("ACTUATOR"))));\n \t\t}\n \n+\t\t@Bean\n+\t\t@ConditionalOnWebApplication(type = Type.REACTIVE)\n+\t\tpublic ReactiveHealthEndpointWebExtension reactiveHealthWebEndpointExtension(\n+\t\t\t\tReactiveHealthIndicatorRegistry registry, HealthEndpoint healthEndpoint) {\n+\t\t\treturn new ReactiveHealthEndpointWebExtension(\n+\t\t\t\t\tnew CompositeReactiveHealthIndicator(new OrderedHealthAggregator(),\n+\t\t\t\t\t\t\tregistry),\n+\t\t\t\t\tnew HealthWebEndpointResponseMapper(new HealthStatusHttpMapper(),\n+\t\t\t\t\t\t\tShowDetails.ALWAYS,\n+\t\t\t\t\t\t\tnew HashSet<>(Arrays.asList("ACTUATOR"))));\n+\t\t}\n+\n \t\t@Bean\n \t\tpublic HealthIndicator alphaHealthIndicator() {\n \t\t\treturn () -> Health.up().build();\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.health;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\nimport java.util.function.Consumer;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport reactor.core.publisher.Mono;\n\nimport org.springframework.beans.factory.NoSuchBeanDefinitionException;\nimport org.springframework.boot.actuate.endpoint.web.test.WebEndpointRunners;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.test.web.reactive.server.WebTestClient;\n\n/**\n * Integration tests for {@link HealthEndpoint} and {@link HealthEndpointWebExtension}\n * exposed by Jersey, Spring MVC, and WebFlux.\n *\n * @author Andy Wilkinson\n */\n@RunWith(WebEndpointRunners.class)\npublic class HealthEndpointWebIntegrationTests {\n\n\tprivate static WebTestClient client;\n\n\tprivate static ConfigurableApplicationContext context;\n\n\t@Test\n\tpublic void whenHealthIsUp200ResponseIsReturned() {\n\t\tclient.get().uri("/actuator/health").exchange().expectStatus().isOk().expectBody()\n\t\t\t\t.jsonPath("status").isEqualTo("UP").jsonPath("details.alpha.status")\n\t\t\t\t.isEqualTo("UP").jsonPath("details.bravo.status").isEqualTo("UP");\n\t}\n\n\t@Test\n\tpublic void whenHealthIsDown503ResponseIsReturned() throws Exception {\n\t\twithHealthIndicator("charlie", () -> Health.down().build(),\n\t\t\t\t() -> Mono.just(Health.down().build()), () -> {\n\t\t\t\t\tclient.get().uri("/actuator/health").exchange().expectStatus()\n\t\t\t\t\t\t\t.isEqualTo(HttpStatus.SERVICE_UNAVAILABLE).expectBody()\n\t\t\t\t\t\t\t.jsonPath("status").isEqualTo("DOWN")\n\t\t\t\t\t\t\t.jsonPath("details.alpha.status").isEqualTo("UP")\n\t\t\t\t\t\t\t.jsonPath("details.bravo.status").isEqualTo("UP")\n\t\t\t\t\t\t\t.jsonPath("details.charlie.status").isEqualTo("DOWN");\n\t\t\t\t\treturn null;\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void whenComponentHealthIsDown503ResponseIsReturned() throws Exception {\n\t\twithHealthIndicator("charlie", () -> Health.down().build(),\n\t\t\t\t() -> Mono.just(Health.down().build()), () -> {\n\t\t\t\t\tclient.get().uri("/actuator/health/charlie").exchange().expectStatus()\n\t\t\t\t\t\t\t.isEqualTo(HttpStatus.SERVICE_UNAVAILABLE).expectBody()\n\t\t\t\t\t\t\t.jsonPath("status").isEqualTo("DOWN");\n\t\t\t\t\treturn null;\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void whenComponentInstanceHealthIsDown503ResponseIsReturned()\n\t\t\tthrows Exception {\n\t\tCompositeHealthIndicator composite = new CompositeHealthIndicator(\n\t\t\t\tnew OrderedHealthAggregator(),\n\t\t\t\tCollections.singletonMap("one", () -> Health.down().build()));\n\t\tCompositeReactiveHealthIndicator reactiveComposite = new CompositeReactiveHealthIndicator(\n\t\t\t\tnew OrderedHealthAggregator(),\n\t\t\t\tnew DefaultReactiveHealthIndicatorRegistry(Collections.singletonMap("one",\n\t\t\t\t\t\t() -> Mono.just(Health.down().build()))));\n\t\twithHealthIndicator("charlie", composite, reactiveComposite, () -> {\n\t\t\tclient.get().uri("/actuator/health/charlie/one").exchange().expectStatus()\n\t\t\t\t\t.isEqualTo(HttpStatus.SERVICE_UNAVAILABLE).expectBody()\n\t\t\t\t\t.jsonPath("status").isEqualTo("DOWN");\n\t\t\treturn null;\n\t\t});\n\t}\n\n\tprivate void withHealthIndicator(String name, HealthIndicator healthIndicator,\n\t\t\tReactiveHealthIndicator reactiveHealthIndicator, Callable<Void> action)\n\t\t\tthrows Exception {\n\t\tConsumer<String> unregister;\n\t\tConsumer<String> reactiveUnregister;\n\t\ttry {\n\t\t\tReactiveHealthIndicatorRegistry registry = context\n\t\t\t\t\t.getBean(ReactiveHealthIndicatorRegistry.class);\n\t\t\tregistry.register(name, reactiveHealthIndicator);\n\t\t\treactiveUnregister = registry::unregister;\n\t\t}\n\t\tcatch (NoSuchBeanDefinitionException ex) {\n\t\t\treactiveUnregister = (indicatorName) -> {\n\t\t\t};\n\t\t\t// Continue\n\t\t}\n\t\tHealthIndicatorRegistry registry = context.getBean(HealthIndicatorRegistry.class);\n\t\tregistry.register(name, healthIndicator);\n\t\tunregister = reactiveUnregister.andThen(registry::unregister);\n\t\ttry {\n\t\t\taction.call();\n\t\t}\n\t\tfinally {\n\t\t\tunregister.accept("charlie");\n\t\t}\n\t}\n\n\t@Test\n\tpublic void whenHealthIndicatorIsRemovedResponseIsAltered() {\n\t\tConsumer<String> reactiveRegister = null;\n\t\ttry {\n\t\t\tReactiveHealthIndicatorRegistry registry = context\n\t\t\t\t\t.getBean(ReactiveHealthIndicatorRegistry.class);\n\t\t\tReactiveHealthIndicator unregistered = registry.unregister("bravo");\n\t\t\treactiveRegister = (name) -> registry.register(name, unregistered);\n\t\t}\n\t\tcatch (NoSuchBeanDefinitionException ex) {\n\t\t\t// Continue\n\t\t}\n\t\tHealthIndicatorRegistry registry = context.getBean(HealthIndicatorRegistry.class);\n\t\tHealthIndicator bravo = registry.unregister("bravo");\n\t\ttry {\n\t\t\tclient.get().uri("/actuator/health").exchange().expectStatus().isOk()\n\t\t\t\t\t.expectBody().jsonPath("status").isEqualTo("UP")\n\t\t\t\t\t.jsonPath("details.alpha.status").isEqualTo("UP")\n\t\t\t\t\t.jsonPath("details.bravo.status").doesNotExist();\n\t\t}\n\t\tfinally {\n\t\t\tregistry.register("bravo", bravo);\n\t\t\tif (reactiveRegister != null) {\n\t\t\t\treactiveRegister.accept("bravo");\n\t\t\t}\n\t\t}\n\t}\n\n\t@Configuration\n\tpublic static class TestConfiguration {\n\n\t\t@Bean\n\t\tpublic HealthIndicatorRegistry healthIndicatorFactory(\n\t\t\t\tMap<String, HealthIndicator> healthIndicators) {\n\t\t\treturn new HealthIndicatorRegistryFactory()\n\t\t\t\t\t.createHealthIndicatorRegistry(healthIndicators);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnWebApplication(type = Type.REACTIVE)\n\t\tpublic ReactiveHealthIndicatorRegistry reactiveHealthIndicatorRegistry(\n\t\t\t\tMap<String, ReactiveHealthIndicator> reactiveHealthIndicators,\n\t\t\t\tMap<String, HealthIndicator> healthIndicators) {\n\t\t\treturn new ReactiveHealthIndicatorRegistryFactory()\n\t\t\t\t\t.createReactiveHealthIndicatorRegistry(reactiveHealthIndicators,\n\t\t\t\t\t\t\thealthIndicators);\n\t\t}\n\n\t\t@Bean\n\t\tpublic HealthEndpoint healthEndpoint(HealthIndicatorRegistry registry) {\n\t\t\treturn new HealthEndpoint(new CompositeHealthIndicator(\n\t\t\t\t\tnew OrderedHealthAggregator(), registry));\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnWebApplication(type = Type.SERVLET)\n\t\tpublic HealthEndpointWebExtension healthWebEndpointExtension(\n\t\t\t\tHealthEndpoint healthEndpoint) {\n\t\t\treturn new HealthEndpointWebExtension(healthEndpoint,\n\t\t\t\t\tnew HealthWebEndpointResponseMapper(new HealthStatusHttpMapper(),\n\t\t\t\t\t\t\tShowDetails.ALWAYS,\n\t\t\t\t\t\t\tnew HashSet<>(Arrays.asList("ACTUATOR"))));\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnWebApplication(type = Type.REACTIVE)\n\t\tpublic ReactiveHealthEndpointWebExtension reactiveHealthWebEndpointExtension(\n\t\t\t\tReactiveHealthIndicatorRegistry registry, HealthEndpoint healthEndpoint) {\n\t\t\treturn new ReactiveHealthEndpointWebExtension(\n\t\t\t\t\tnew CompositeReactiveHealthIndicator(new OrderedHealthAggregator(),\n\t\t\t\t\t\t\tregistry),\n\t\t\t\t\tnew HealthWebEndpointResponseMapper(new HealthStatusHttpMapper(),\n\t\t\t\t\t\t\tShowDetails.ALWAYS,\n\t\t\t\t\t\t\tnew HashSet<>(Arrays.asList("ACTUATOR"))));\n\t\t}\n\n\t\t@Bean\n\t\tpublic HealthIndicator alphaHealthIndicator() {\n\t\t\treturn () -> Health.up().build();\n\t\t}\n\n\t\t@Bean\n\t\tpublic HealthIndicator bravoHealthIndicator() {\n\t\t\treturn () -> Health.up().build();\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.health;\n\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Map;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n\nimport org.springframework.boot.actuate.endpoint.web.test.WebEndpointRunners;\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.test.web.reactive.server.WebTestClient;\n\n/**\n * Integration tests for {@link HealthEndpoint} and {@link HealthEndpointWebExtension}\n * exposed by Jersey, Spring MVC, and WebFlux.\n *\n * @author Andy Wilkinson\n */\n@RunWith(WebEndpointRunners.class)\npublic class HealthEndpointWebIntegrationTests {\n\n\tprivate static WebTestClient client;\n\n\tprivate static ConfigurableApplicationContext context;\n\n\t@Test\n\tpublic void whenHealthIsUp200ResponseIsReturned() {\n\t\tclient.get().uri("/actuator/health").exchange().expectStatus().isOk().expectBody()\n\t\t\t\t.jsonPath("status").isEqualTo("UP").jsonPath("details.alpha.status")\n\t\t\t\t.isEqualTo("UP").jsonPath("details.bravo.status").isEqualTo("UP");\n\t}\n\n\t@Test\n\tpublic void whenHealthIsDown503ResponseIsReturned() {\n\t\tHealthIndicatorRegistry registry = context.getBean(HealthIndicatorRegistry.class);\n\t\tregistry.register("charlie", () -> Health.down().build());\n\t\ttry {\n\t\t\tclient.get().uri("/actuator/health").exchange().expectStatus()\n\t\t\t\t\t.isEqualTo(HttpStatus.SERVICE_UNAVAILABLE).expectBody()\n\t\t\t\t\t.jsonPath("status").isEqualTo("DOWN").jsonPath("details.alpha.status")\n\t\t\t\t\t.isEqualTo("UP").jsonPath("details.bravo.status").isEqualTo("UP")\n\t\t\t\t\t.jsonPath("details.charlie.status").isEqualTo("DOWN");\n\t\t}\n\t\tfinally {\n\t\t\tregistry.unregister("charlie");\n\t\t}\n\t}\n\n\t@Test\n\tpublic void whenHealthIndicatorIsRemovedResponseIsAltered() {\n\t\tHealthIndicatorRegistry registry = context.getBean(HealthIndicatorRegistry.class);\n\t\tHealthIndicator bravo = registry.unregister("bravo");\n\t\ttry {\n\t\t\tclient.get().uri("/actuator/health").exchange().expectStatus().isOk()\n\t\t\t\t\t.expectBody().jsonPath("status").isEqualTo("UP")\n\t\t\t\t\t.jsonPath("details.alpha.status").isEqualTo("UP")\n\t\t\t\t\t.jsonPath("details.bravo.status").doesNotExist();\n\t\t}\n\t\tfinally {\n\t\t\tregistry.register("bravo", bravo);\n\t\t}\n\t}\n\n\t@Configuration\n\tpublic static class TestConfiguration {\n\n\t\t@Bean\n\t\tpublic HealthIndicatorRegistry healthIndicatorFactory(\n\t\t\t\tMap<String, HealthIndicator> healthIndicators) {\n\t\t\treturn new HealthIndicatorRegistryFactory()\n\t\t\t\t\t.createHealthIndicatorRegistry(healthIndicators);\n\t\t}\n\n\t\t@Bean\n\t\tpublic HealthEndpoint healthEndpoint(HealthIndicatorRegistry registry) {\n\t\t\treturn new HealthEndpoint(new CompositeHealthIndicator(\n\t\t\t\t\tnew OrderedHealthAggregator(), registry));\n\t\t}\n\n\t\t@Bean\n\t\tpublic HealthEndpointWebExtension healthWebEndpointExtension(\n\t\t\t\tHealthEndpoint healthEndpoint) {\n\t\t\treturn new HealthEndpointWebExtension(healthEndpoint,\n\t\t\t\t\tnew HealthWebEndpointResponseMapper(new HealthStatusHttpMapper(),\n\t\t\t\t\t\t\tShowDetails.ALWAYS,\n\t\t\t\t\t\t\tnew HashSet<>(Arrays.asList("ACTUATOR"))));\n\t\t}\n\n\t\t@Bean\n\t\tpublic HealthIndicator alphaHealthIndicator() {\n\t\t\treturn () -> Health.up().build();\n\t\t}\n\n\t\t@Bean\n\t\tpublic HealthIndicator bravoHealthIndicator() {\n\t\t\treturn () -> Health.up().build();\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
