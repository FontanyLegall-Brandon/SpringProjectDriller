{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/websocket/WebSocketAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/websocket/WebSocketAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,122 +16,45 @@\n \n package org.springframework.boot.autoconfigure.websocket;\n \n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import javax.servlet.ServletContainerInitializer;\n+import javax.servlet.Servlet;\n \n import org.apache.catalina.Context;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n-import org.springframework.beans.BeanUtils;\n-import org.springframework.beans.BeansException;\n-import org.springframework.beans.factory.BeanFactory;\n-import org.springframework.beans.factory.BeanFactoryAware;\n-import org.springframework.beans.factory.ListableBeanFactory;\n-import org.springframework.beans.factory.config.BeanPostProcessor;\n+import org.apache.catalina.deploy.ApplicationListener;\n+import org.apache.catalina.startup.Tomcat;\n import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration;\n import org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.util.ClassUtils;\n import org.springframework.web.socket.WebSocketHandler;\n-import org.springframework.web.socket.config.annotation.EnableWebSocket;\n-import org.springframework.web.socket.config.annotation.WebSocketConfigurer;\n-import org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;\n-import org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsService;\n \n /**\n- * Auto configuration for websocket server (and sockjs in particular). Users should be\n- * able to just define beans of type {@link WebSocketHandler}. If\n- * <code>spring-websocket</code> is detected on the classpath then we add a\n- * {@link DefaultSockJsService} and an MVC handler mapping to\n- * <code>/&lt;beanName&gt;/**</code> for all of the <code>WebSocketHandler</code> beans\n- * that have a bean name beginning with "/".\n+ * Auto configuration for websocket server in embedded Tomcat. If\n+ * <code>spring-websocket</code> is detected on the classpath then we add a listener that\n+ * installs the Tomcat Websocket initializer. In a non-embedded container it should\n+ * already be there.\n  * \n  * @author Dave Syer\n  */\n @Configuration\n-@ConditionalOnClass({ WebSocketHandler.class })\n+@ConditionalOnClass(name = "org.apache.tomcat.websocket.server.WsSci", value = {\n+\t\tServlet.class, Tomcat.class, WebSocketHandler.class })\n @AutoConfigureBefore(EmbeddedServletContainerAutoConfiguration.class)\n-@ConditionalOnMissingBean(WebSocketConfigurer.class)\n-@EnableWebSocket\n public class WebSocketAutoConfiguration {\n \n-\tprivate static Log logger = LogFactory.getLog(WebSocketAutoConfiguration.class);\n-\n-\t// Nested class to avoid having to load WebSocketConfigurer before conditions are\n-\t// evaluated\n-\t@Configuration\n-\tprotected static class WebSocketRegistrationConfiguration implements\n-\t\t\tBeanPostProcessor, BeanFactoryAware, WebSocketConfigurer {\n-\n-\t\tprivate final Map<String, WebSocketHandler> prefixes = new HashMap<String, WebSocketHandler>();\n-\n-\t\tprivate ListableBeanFactory beanFactory;\n+\tprivate static final ApplicationListener WS_APPLICATION_LISTENER = new ApplicationListener(\n+\t\t\t"org.apache.tomcat.websocket.server.WsContextListener", false);\n \n-\t\t@Override\n-\t\tpublic void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n-\t\t\tthis.beanFactory = (ListableBeanFactory) beanFactory;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic Object postProcessBeforeInitialization(Object bean, String beanName)\n-\t\t\t\tthrows BeansException {\n-\t\t\treturn bean;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic Object postProcessAfterInitialization(Object bean, String beanName)\n-\t\t\t\tthrows BeansException {\n-\t\t\tif (bean instanceof WebSocketHandler && beanName.startsWith("/")) {\n-\t\t\t\tthis.prefixes.put(beanName, (WebSocketHandler) bean);\n+\t@Bean\n+\tpublic TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() {\n+\t\tTomcatEmbeddedServletContainerFactory factory = new TomcatEmbeddedServletContainerFactory() {\n+\t\t\t@Override\n+\t\t\tprotected void postProcessContext(Context context) {\n+\t\t\t\tcontext.addApplicationListener(WS_APPLICATION_LISTENER);\n \t\t\t}\n-\t\t\treturn bean;\n-\t\t}\n-\n-\t\tprivate WebSocketHandler getHandler(String prefix) {\n-\t\t\treturn this.prefixes.get(prefix);\n-\t\t}\n-\n-\t\tprivate String[] getPrefixes() {\n-\t\t\treturn this.prefixes.keySet().toArray(new String[this.prefixes.size()]);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {\n-\t\t\t// Force initialization of WebSocketHandler beans\n-\t\t\tthis.beanFactory.getBeansOfType(WebSocketHandler.class);\n-\t\t\tfor (String prefix : getPrefixes()) {\n-\t\t\t\tlogger.info("Adding SockJS handler: " + prefix);\n-\t\t\t\tregistry.addHandler(getHandler(prefix), prefix).withSockJS();\n-\t\t\t}\n-\t\t}\n-\n-\t}\n-\n-\t@Configuration\n-\t@ConditionalOnClass(name = "org.apache.tomcat.websocket.server.WsSci")\n-\tprotected static class TomcatWebSocketConfiguration {\n-\n-\t\t@Bean\n-\t\tpublic TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() {\n-\t\t\tTomcatEmbeddedServletContainerFactory factory = new TomcatEmbeddedServletContainerFactory() {\n-\t\t\t\t@Override\n-\t\t\t\tprotected void postProcessContext(Context context) {\n-\t\t\t\t\tcontext.addServletContainerInitializer(\n-\t\t\t\t\t\t\t(ServletContainerInitializer) BeanUtils\n-\t\t\t\t\t\t\t\t\t.instantiate(ClassUtils.resolveClassName(\n-\t\t\t\t\t\t\t\t\t\t\t"org.apache.tomcat.websocket.server.WsSci",\n-\t\t\t\t\t\t\t\t\t\t\tnull)), null);\n-\t\t\t\t}\n-\t\t\t};\n-\t\t\treturn factory;\n-\t\t}\n-\n+\t\t};\n+\t\treturn factory;\n \t}\n \n }\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.websocket;\n\nimport javax.servlet.Servlet;\n\nimport org.apache.catalina.Context;\nimport org.apache.catalina.deploy.ApplicationListener;\nimport org.apache.catalina.startup.Tomcat;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration;\nimport org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.socket.WebSocketHandler;\n\n/**\n * Auto configuration for websocket server in embedded Tomcat. If\n * <code>spring-websocket</code> is detected on the classpath then we add a listener that\n * installs the Tomcat Websocket initializer. In a non-embedded container it should\n * already be there.\n * \n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnClass(name = "org.apache.tomcat.websocket.server.WsSci", value = {\n\t\tServlet.class, Tomcat.class, WebSocketHandler.class })\n@AutoConfigureBefore(EmbeddedServletContainerAutoConfiguration.class)\npublic class WebSocketAutoConfiguration {\n\n\tprivate static final ApplicationListener WS_APPLICATION_LISTENER = new ApplicationListener(\n\t\t\t"org.apache.tomcat.websocket.server.WsContextListener", false);\n\n\t@Bean\n\tpublic TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() {\n\t\tTomcatEmbeddedServletContainerFactory factory = new TomcatEmbeddedServletContainerFactory() {\n\t\t\t@Override\n\t\t\tprotected void postProcessContext(Context context) {\n\t\t\t\tcontext.addApplicationListener(WS_APPLICATION_LISTENER);\n\t\t\t}\n\t\t};\n\t\treturn factory;\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.websocket;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport javax.servlet.ServletContainerInitializer;\n\nimport org.apache.catalina.Context;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.beans.factory.ListableBeanFactory;\nimport org.springframework.beans.factory.config.BeanPostProcessor;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration;\nimport org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.web.socket.WebSocketHandler;\nimport org.springframework.web.socket.config.annotation.EnableWebSocket;\nimport org.springframework.web.socket.config.annotation.WebSocketConfigurer;\nimport org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;\nimport org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsService;\n\n/**\n * Auto configuration for websocket server (and sockjs in particular). Users should be\n * able to just define beans of type {@link WebSocketHandler}. If\n * <code>spring-websocket</code> is detected on the classpath then we add a\n * {@link DefaultSockJsService} and an MVC handler mapping to\n * <code>/&lt;beanName&gt;/**</code> for all of the <code>WebSocketHandler</code> beans\n * that have a bean name beginning with "/".\n * \n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnClass({ WebSocketHandler.class })\n@AutoConfigureBefore(EmbeddedServletContainerAutoConfiguration.class)\n@ConditionalOnMissingBean(WebSocketConfigurer.class)\n@EnableWebSocket\npublic class WebSocketAutoConfiguration {\n\n\tprivate static Log logger = LogFactory.getLog(WebSocketAutoConfiguration.class);\n\n\t// Nested class to avoid having to load WebSocketConfigurer before conditions are\n\t// evaluated\n\t@Configuration\n\tprotected static class WebSocketRegistrationConfiguration implements\n\t\t\tBeanPostProcessor, BeanFactoryAware, WebSocketConfigurer {\n\n\t\tprivate final Map<String, WebSocketHandler> prefixes = new HashMap<String, WebSocketHandler>();\n\n\t\tprivate ListableBeanFactory beanFactory;\n\n\t\t@Override\n\t\tpublic void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n\t\t\tthis.beanFactory = (ListableBeanFactory) beanFactory;\n\t\t}\n\n\t\t@Override\n\t\tpublic Object postProcessBeforeInitialization(Object bean, String beanName)\n\t\t\t\tthrows BeansException {\n\t\t\treturn bean;\n\t\t}\n\n\t\t@Override\n\t\tpublic Object postProcessAfterInitialization(Object bean, String beanName)\n\t\t\t\tthrows BeansException {\n\t\t\tif (bean instanceof WebSocketHandler && beanName.startsWith("/")) {\n\t\t\t\tthis.prefixes.put(beanName, (WebSocketHandler) bean);\n\t\t\t}\n\t\t\treturn bean;\n\t\t}\n\n\t\tprivate WebSocketHandler getHandler(String prefix) {\n\t\t\treturn this.prefixes.get(prefix);\n\t\t}\n\n\t\tprivate String[] getPrefixes() {\n\t\t\treturn this.prefixes.keySet().toArray(new String[this.prefixes.size()]);\n\t\t}\n\n\t\t@Override\n\t\tpublic void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {\n\t\t\t// Force initialization of WebSocketHandler beans\n\t\t\tthis.beanFactory.getBeansOfType(WebSocketHandler.class);\n\t\t\tfor (String prefix : getPrefixes()) {\n\t\t\t\tlogger.info("Adding SockJS handler: " + prefix);\n\t\t\t\tregistry.addHandler(getHandler(prefix), prefix).withSockJS();\n\t\t\t}\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(name = "org.apache.tomcat.websocket.server.WsSci")\n\tprotected static class TomcatWebSocketConfiguration {\n\n\t\t@Bean\n\t\tpublic TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() {\n\t\t\tTomcatEmbeddedServletContainerFactory factory = new TomcatEmbeddedServletContainerFactory() {\n\t\t\t\t@Override\n\t\t\t\tprotected void postProcessContext(Context context) {\n\t\t\t\t\tcontext.addServletContainerInitializer(\n\t\t\t\t\t\t\t(ServletContainerInitializer) BeanUtils\n\t\t\t\t\t\t\t\t\t.instantiate(ClassUtils.resolveClassName(\n\t\t\t\t\t\t\t\t\t\t\t"org.apache.tomcat.websocket.server.WsSci",\n\t\t\t\t\t\t\t\t\t\t\tnull)), null);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn factory;\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
