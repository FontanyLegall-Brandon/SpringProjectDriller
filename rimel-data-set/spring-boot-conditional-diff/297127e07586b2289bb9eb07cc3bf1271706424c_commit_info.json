{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/influx/InfluxDBAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/influx/InfluxDbAutoConfiguration.java'), 'change_type': <ModificationType.RENAME: 3>, 'diff': '@@ -23,6 +23,7 @@ import org.influxdb.InfluxDBFactory;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n@@ -31,32 +32,32 @@ import org.springframework.context.annotation.Configuration;\n  * {@link EnableAutoConfiguration Auto-configuration} for InfluxDB.\n  *\n  * @author Sergey Kuptsov\n+ * @author Stephane Nicoll\n+ * @since 2.0.0\n  */\n @Configuration\n @ConditionalOnClass(InfluxDB.class)\n-@EnableConfigurationProperties(InfluxDBProperties.class)\n-public class InfluxDBAutoConfiguration {\n+@EnableConfigurationProperties(InfluxDbProperties.class)\n+public class InfluxDbAutoConfiguration {\n \n-\tprivate final InfluxDBProperties properties;\n+\tprivate final InfluxDbProperties properties;\n \n-\tpublic InfluxDBAutoConfiguration(InfluxDBProperties properties) {\n+\tpublic InfluxDbAutoConfiguration(InfluxDbProperties properties) {\n \t\tthis.properties = properties;\n \t}\n \n \t@Bean\n \t@ConditionalOnMissingBean\n-\tpublic InfluxDB influxDB() {\n-\t\tif (Strings.isNullOrEmpty(this.properties.getUser())) {\n-\t\t\treturn InfluxDBFactory.connect(\n-\t\t\t\t\tthis.properties.getUrl()\n-\t\t\t);\n+\t@ConditionalOnProperty("spring.influx.client.url")\n+\tpublic InfluxDB influxDb() {\n+\t\tInfluxDbProperties.Client client = this.properties.getClient();\n+\t\tif (Strings.isNullOrEmpty(client.getUser())) {\n+\t\t\treturn InfluxDBFactory.connect(client.getUrl());\n \t\t}\n \t\telse {\n-\t\t\treturn InfluxDBFactory.connect(\n-\t\t\t\t\tthis.properties.getUrl(),\n-\t\t\t\t\tthis.properties.getUser(),\n-\t\t\t\t\tthis.properties.getPassword()\n-\t\t\t);\n+\t\t\treturn InfluxDBFactory.connect(client.getUrl(), client.getUser(),\n+\t\t\t\t\tclient.getPassword());\n \t\t}\n \t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.influx;\n\nimport com.google.common.base.Strings;\nimport org.influxdb.InfluxDB;\nimport org.influxdb.InfluxDBFactory;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for InfluxDB.\n *\n * @author Sergey Kuptsov\n * @author Stephane Nicoll\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass(InfluxDB.class)\n@EnableConfigurationProperties(InfluxDbProperties.class)\npublic class InfluxDbAutoConfiguration {\n\n\tprivate final InfluxDbProperties properties;\n\n\tpublic InfluxDbAutoConfiguration(InfluxDbProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnProperty("spring.influx.client.url")\n\tpublic InfluxDB influxDb() {\n\t\tInfluxDbProperties.Client client = this.properties.getClient();\n\t\tif (Strings.isNullOrEmpty(client.getUser())) {\n\t\t\treturn InfluxDBFactory.connect(client.getUrl());\n\t\t}\n\t\telse {\n\t\t\treturn InfluxDBFactory.connect(client.getUrl(), client.getUser(),\n\t\t\t\t\tclient.getPassword());\n\t\t}\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.influx;\n\nimport com.google.common.base.Strings;\nimport org.influxdb.InfluxDB;\nimport org.influxdb.InfluxDBFactory;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for InfluxDB.\n *\n * @author Sergey Kuptsov\n */\n@Configuration\n@ConditionalOnClass(InfluxDB.class)\n@EnableConfigurationProperties(InfluxDBProperties.class)\npublic class InfluxDBAutoConfiguration {\n\n\tprivate final InfluxDBProperties properties;\n\n\tpublic InfluxDBAutoConfiguration(InfluxDBProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic InfluxDB influxDB() {\n\t\tif (Strings.isNullOrEmpty(this.properties.getUser())) {\n\t\t\treturn InfluxDBFactory.connect(\n\t\t\t\t\tthis.properties.getUrl()\n\t\t\t);\n\t\t}\n\t\telse {\n\t\t\treturn InfluxDBFactory.connect(\n\t\t\t\t\tthis.properties.getUrl(),\n\t\t\t\t\tthis.properties.getUser(),\n\t\t\t\t\tthis.properties.getPassword()\n\t\t\t);\n\t\t}\n\t}\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
