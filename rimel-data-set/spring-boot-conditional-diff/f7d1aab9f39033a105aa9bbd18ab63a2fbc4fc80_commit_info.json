{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/ElasticsearchAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/ElasticsearchAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -25,17 +25,22 @@ import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.data.elasticsearch.client.NodeClientFactoryBean;\n+import org.springframework.data.elasticsearch.client.TransportClientFactoryBean;\n+import org.springframework.util.StringUtils;\n \n /**\n  * {@link org.springframework.boot.autoconfigure.EnableAutoConfiguration\n  * Auto-configuration} for Elasticsearch.\n- * \n+ *\n  * @author Artur Konczak\n  * @author Mohsin Husen\n+ * @author Andy Wilkinson\n  * @since 1.1.0\n  */\n @Configuration\n-@ConditionalOnClass(Client.class)\n+@ConditionalOnClass({ Client.class, TransportClientFactoryBean.class,\n+\t\tNodeClientFactoryBean.class })\n @EnableConfigurationProperties(ElasticsearchProperties.class)\n public class ElasticsearchAutoConfiguration implements DisposableBean {\n \n@@ -48,10 +53,35 @@ public class ElasticsearchAutoConfiguration implements DisposableBean {\n \n \t@Bean\n \tpublic Client elasticsearchClient() {\n-\t\tthis.client = this.properties.createClient();\n+\t\ttry {\n+\t\t\tif (StringUtils.hasLength(this.properties.getClusterNodes())) {\n+\t\t\t\tthis.client = createTransportClient();\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tthis.client = createNodeClient();\n+\t\t\t}\n+\t\t}\n+\t\tcatch (Exception ex) {\n+\t\t\tthrow new IllegalStateException(ex);\n+\t\t}\n \t\treturn this.client;\n \t}\n \n+\tprivate Client createNodeClient() throws Exception {\n+\t\tNodeClientFactoryBean factory = new NodeClientFactoryBean(true);\n+\t\tfactory.setClusterName(this.properties.getClusterName());\n+\t\tfactory.afterPropertiesSet();\n+\t\treturn factory.getObject();\n+\t}\n+\n+\tprivate Client createTransportClient() throws Exception {\n+\t\tTransportClientFactoryBean factory = new TransportClientFactoryBean();\n+\t\tfactory.setClusterName(this.properties.getClusterName());\n+\t\tfactory.setClusterNodes(this.properties.getClusterNodes());\n+\t\tfactory.afterPropertiesSet();\n+\t\treturn factory.getObject();\n+\t}\n+\n \t@Override\n \tpublic void destroy() throws Exception {\n \t\tif (this.client != null) {\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.elasticsearch;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.elasticsearch.client.Client;\nimport org.springframework.beans.factory.DisposableBean;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.elasticsearch.client.NodeClientFactoryBean;\nimport org.springframework.data.elasticsearch.client.TransportClientFactoryBean;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link org.springframework.boot.autoconfigure.EnableAutoConfiguration\n * Auto-configuration} for Elasticsearch.\n *\n * @author Artur Konczak\n * @author Mohsin Husen\n * @author Andy Wilkinson\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass({ Client.class, TransportClientFactoryBean.class,\n\t\tNodeClientFactoryBean.class })\n@EnableConfigurationProperties(ElasticsearchProperties.class)\npublic class ElasticsearchAutoConfiguration implements DisposableBean {\n\n\tprivate static Log logger = LogFactory.getLog(ElasticsearchAutoConfiguration.class);\n\n\t@Autowired\n\tprivate ElasticsearchProperties properties;\n\n\tprivate Client client;\n\n\t@Bean\n\tpublic Client elasticsearchClient() {\n\t\ttry {\n\t\t\tif (StringUtils.hasLength(this.properties.getClusterNodes())) {\n\t\t\t\tthis.client = createTransportClient();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.client = createNodeClient();\n\t\t\t}\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthrow new IllegalStateException(ex);\n\t\t}\n\t\treturn this.client;\n\t}\n\n\tprivate Client createNodeClient() throws Exception {\n\t\tNodeClientFactoryBean factory = new NodeClientFactoryBean(true);\n\t\tfactory.setClusterName(this.properties.getClusterName());\n\t\tfactory.afterPropertiesSet();\n\t\treturn factory.getObject();\n\t}\n\n\tprivate Client createTransportClient() throws Exception {\n\t\tTransportClientFactoryBean factory = new TransportClientFactoryBean();\n\t\tfactory.setClusterName(this.properties.getClusterName());\n\t\tfactory.setClusterNodes(this.properties.getClusterNodes());\n\t\tfactory.afterPropertiesSet();\n\t\treturn factory.getObject();\n\t}\n\n\t@Override\n\tpublic void destroy() throws Exception {\n\t\tif (this.client != null) {\n\t\t\ttry {\n\t\t\t\tif (logger.isInfoEnabled()) {\n\t\t\t\t\tlogger.info("Closing Elasticsearch client");\n\t\t\t\t}\n\t\t\t\tif (this.client != null) {\n\t\t\t\t\tthis.client.close();\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (final Exception ex) {\n\t\t\t\tif (logger.isErrorEnabled()) {\n\t\t\t\t\tlogger.error("Error closing Elasticsearch client: ", ex);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.elasticsearch;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.elasticsearch.client.Client;\nimport org.springframework.beans.factory.DisposableBean;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link org.springframework.boot.autoconfigure.EnableAutoConfiguration\n * Auto-configuration} for Elasticsearch.\n * \n * @author Artur Konczak\n * @author Mohsin Husen\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass(Client.class)\n@EnableConfigurationProperties(ElasticsearchProperties.class)\npublic class ElasticsearchAutoConfiguration implements DisposableBean {\n\n\tprivate static Log logger = LogFactory.getLog(ElasticsearchAutoConfiguration.class);\n\n\t@Autowired\n\tprivate ElasticsearchProperties properties;\n\n\tprivate Client client;\n\n\t@Bean\n\tpublic Client elasticsearchClient() {\n\t\tthis.client = this.properties.createClient();\n\t\treturn this.client;\n\t}\n\n\t@Override\n\tpublic void destroy() throws Exception {\n\t\tif (this.client != null) {\n\t\t\ttry {\n\t\t\t\tif (logger.isInfoEnabled()) {\n\t\t\t\t\tlogger.info("Closing Elasticsearch client");\n\t\t\t\t}\n\t\t\t\tif (this.client != null) {\n\t\t\t\t\tthis.client.close();\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (final Exception ex) {\n\t\t\t\tif (logger.isErrorEnabled()) {\n\t\t\t\t\tlogger.error("Error closing Elasticsearch client: ", ex);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
