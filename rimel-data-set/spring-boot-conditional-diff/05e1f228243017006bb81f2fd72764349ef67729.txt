@@ -0,0 +1,70 @@
+
+
+package org.springframework.boot.actuate.autoconfigure.metrics.jdbc;
+
+import java.util.Collection;
+
+import javax.sql.DataSource;
+
+import com.zaxxer.hikari.HikariDataSource;
+import com.zaxxer.hikari.metrics.micrometer.MicrometerMetricsTrackerFactory;
+import io.micrometer.core.instrument.MeterRegistry;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration;
+import org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration;
+import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;
+import org.springframework.context.annotation.Configuration;
+
+
+@Configuration
+@AutoConfigureAfter({ MetricsAutoConfiguration.class, DataSourceAutoConfiguration.class,
+		SimpleMetricsExportAutoConfiguration.class })
+@ConditionalOnClass(HikariDataSource.class)
+@ConditionalOnBean({ DataSource.class, MeterRegistry.class })
+public class HikariDataSourceMetricsAutoConfiguration {
+
+	private final MeterRegistry registry;
+
+	public HikariDataSourceMetricsAutoConfiguration(MeterRegistry registry) {
+		this.registry = registry;
+	}
+
+	@Autowired
+	public void bindMetricsRegistryToHikariDataSources(
+			Collection<DataSource> dataSources) {
+		dataSources.stream().filter(HikariDataSource.class::isInstance)
+				.map(HikariDataSource.class::cast)
+				.forEach(this::bindMetricsRegistryToHikariDataSource);
+	}
+
+	private void bindMetricsRegistryToHikariDataSource(HikariDataSource hikari) {
+		hikari.setMetricsTrackerFactory(
+				new MicrometerMetricsTrackerFactory(this.registry));
+	}
+
+}

