{'_old_path': None, '_new_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/health/ReactiveHealthIndicatorsConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2012-2017 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.autoconfigure.health;\n+\n+import java.util.Map;\n+\n+import reactor.core.publisher.Flux;\n+\n+import org.springframework.boot.actuate.health.ReactiveHealthIndicator;\n+import org.springframework.boot.actuate.health.RedisReactiveHealthIndicator;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.data.redis.connection.ReactiveRedisConnectionFactory;\n+\n+/**\n+ * Configuration for available {@link ReactiveHealthIndicator reactive health indicators}.\n+ *\n+ * @author Stephane Nicoll\n+ * @since 2.0.0\n+ */\n+@Configuration\n+@ConditionalOnClass(Flux.class)\n+public class ReactiveHealthIndicatorsConfiguration {\n+\n+\t@Configuration\n+\t@ConditionalOnBean(ReactiveRedisConnectionFactory.class)\n+\t@ConditionalOnEnabledHealthIndicator("redis")\n+\tstatic class RedisHealthIndicatorConfiguration extends\n+\t\t\tCompositeReactiveHealthIndicatorConfiguration<RedisReactiveHealthIndicator,\n+\t\t\t\t\tReactiveRedisConnectionFactory> {\n+\n+\t\tprivate final Map<String, ReactiveRedisConnectionFactory> redisConnectionFactories;\n+\n+\t\tRedisHealthIndicatorConfiguration(\n+\t\t\t\tMap<String, ReactiveRedisConnectionFactory> redisConnectionFactories) {\n+\t\t\tthis.redisConnectionFactories = redisConnectionFactories;\n+\t\t}\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(name = "redisHealthIndicator")\n+\t\tpublic ReactiveHealthIndicator redisHealthIndicator() {\n+\t\t\treturn createHealthIndicator(this.redisConnectionFactories);\n+\t\t}\n+\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.health;\n\nimport java.util.Map;\n\nimport reactor.core.publisher.Flux;\n\nimport org.springframework.boot.actuate.health.ReactiveHealthIndicator;\nimport org.springframework.boot.actuate.health.RedisReactiveHealthIndicator;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.ReactiveRedisConnectionFactory;\n\n/**\n * Configuration for available {@link ReactiveHealthIndicator reactive health indicators}.\n *\n * @author Stephane Nicoll\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass(Flux.class)\npublic class ReactiveHealthIndicatorsConfiguration {\n\n\t@Configuration\n\t@ConditionalOnBean(ReactiveRedisConnectionFactory.class)\n\t@ConditionalOnEnabledHealthIndicator("redis")\n\tstatic class RedisHealthIndicatorConfiguration extends\n\t\t\tCompositeReactiveHealthIndicatorConfiguration<RedisReactiveHealthIndicator,\n\t\t\t\t\tReactiveRedisConnectionFactory> {\n\n\t\tprivate final Map<String, ReactiveRedisConnectionFactory> redisConnectionFactories;\n\n\t\tRedisHealthIndicatorConfiguration(\n\t\t\t\tMap<String, ReactiveRedisConnectionFactory> redisConnectionFactories) {\n\t\t\tthis.redisConnectionFactories = redisConnectionFactories;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "redisHealthIndicator")\n\t\tpublic ReactiveHealthIndicator redisHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.redisConnectionFactories);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
