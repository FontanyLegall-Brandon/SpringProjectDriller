{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,29 +16,18 @@\n \n package org.springframework.boot.autoconfigure.orm.jpa;\n \n-import java.util.Arrays;\n-\n import javax.persistence.EntityManager;\n \n+import org.hibernate.engine.spi.SessionImplementor;\n+\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n-import org.springframework.boot.autoconfigure.condition.ConditionMessage;\n-import org.springframework.boot.autoconfigure.condition.ConditionMessage.Style;\n-import org.springframework.boot.autoconfigure.condition.ConditionOutcome;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n-import org.springframework.boot.autoconfigure.condition.SpringBootCondition;\n import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\n-import org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration.HibernateEntityManagerCondition;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n-import org.springframework.context.annotation.ConditionContext;\n-import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Import;\n-import org.springframework.core.Ordered;\n-import org.springframework.core.annotation.Order;\n-import org.springframework.core.type.AnnotatedTypeMetadata;\n import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n-import org.springframework.util.ClassUtils;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for Hibernate JPA.\n@@ -49,31 +38,10 @@ import org.springframework.util.ClassUtils;\n  * @author Andy Wilkinson\n  */\n @Configuration\n-@ConditionalOnClass({ LocalContainerEntityManagerFactoryBean.class, EntityManager.class })\n-@Conditional(HibernateEntityManagerCondition.class)\n+@ConditionalOnClass({ LocalContainerEntityManagerFactoryBean.class, EntityManager.class, SessionImplementor.class })\n @EnableConfigurationProperties(JpaProperties.class)\n @AutoConfigureAfter({ DataSourceAutoConfiguration.class })\n @Import(HibernateJpaConfiguration.class)\n public class HibernateJpaAutoConfiguration {\n \n-\t@Order(Ordered.HIGHEST_PRECEDENCE + 20)\n-\tstatic class HibernateEntityManagerCondition extends SpringBootCondition {\n-\n-\t\tprivate static final String[] CLASS_NAMES = { "org.hibernate.ejb.HibernateEntityManager",\n-\t\t\t\t"org.hibernate.jpa.HibernateEntityManager" };\n-\n-\t\t@Override\n-\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata metadata) {\n-\t\t\tConditionMessage.Builder message = ConditionMessage.forCondition("HibernateEntityManager");\n-\t\t\tfor (String className : CLASS_NAMES) {\n-\t\t\t\tif (ClassUtils.isPresent(className, context.getClassLoader())) {\n-\t\t\t\t\treturn ConditionOutcome.match(message.found("class").items(Style.QUOTE, className));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn ConditionOutcome\n-\t\t\t\t\t.noMatch(message.didNotFind("class", "classes").items(Style.QUOTE, Arrays.asList(CLASS_NAMES)));\n-\t\t}\n-\n-\t}\n-\n }\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.orm.jpa;\n\nimport javax.persistence.EntityManager;\n\nimport org.hibernate.engine.spi.SessionImplementor;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Hibernate JPA.\n *\n * @author Phillip Webb\n * @author Josh Long\n * @author Manuel Doninger\n * @author Andy Wilkinson\n */\n@Configuration\n@ConditionalOnClass({ LocalContainerEntityManagerFactoryBean.class, EntityManager.class, SessionImplementor.class })\n@EnableConfigurationProperties(JpaProperties.class)\n@AutoConfigureAfter({ DataSourceAutoConfiguration.class })\n@Import(HibernateJpaConfiguration.class)\npublic class HibernateJpaAutoConfiguration {\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.orm.jpa;\n\nimport java.util.Arrays;\n\nimport javax.persistence.EntityManager;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionMessage;\nimport org.springframework.boot.autoconfigure.condition.ConditionMessage.Style;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration.HibernateEntityManagerCondition;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.util.ClassUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Hibernate JPA.\n *\n * @author Phillip Webb\n * @author Josh Long\n * @author Manuel Doninger\n * @author Andy Wilkinson\n */\n@Configuration\n@ConditionalOnClass({ LocalContainerEntityManagerFactoryBean.class, EntityManager.class })\n@Conditional(HibernateEntityManagerCondition.class)\n@EnableConfigurationProperties(JpaProperties.class)\n@AutoConfigureAfter({ DataSourceAutoConfiguration.class })\n@Import(HibernateJpaConfiguration.class)\npublic class HibernateJpaAutoConfiguration {\n\n\t@Order(Ordered.HIGHEST_PRECEDENCE + 20)\n\tstatic class HibernateEntityManagerCondition extends SpringBootCondition {\n\n\t\tprivate static final String[] CLASS_NAMES = { "org.hibernate.ejb.HibernateEntityManager",\n\t\t\t\t"org.hibernate.jpa.HibernateEntityManager" };\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata metadata) {\n\t\t\tConditionMessage.Builder message = ConditionMessage.forCondition("HibernateEntityManager");\n\t\t\tfor (String className : CLASS_NAMES) {\n\t\t\t\tif (ClassUtils.isPresent(className, context.getClassLoader())) {\n\t\t\t\t\treturn ConditionOutcome.match(message.found("class").items(Style.QUOTE, className));\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn ConditionOutcome\n\t\t\t\t\t.noMatch(message.didNotFind("class", "classes").items(Style.QUOTE, Arrays.asList(CLASS_NAMES)));\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
