{'_old_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfiguration.java'), '_new_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -31,6 +31,7 @@ import org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping;\n import org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingCustomizer;\n import org.springframework.boot.actuate.endpoint.mvc.EnvironmentMvcEndpoint;\n import org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint;\n+import org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpoint;\n import org.springframework.boot.actuate.endpoint.mvc.LogFileMvcEndpoint;\n import org.springframework.boot.actuate.endpoint.mvc.MetricsMvcEndpoint;\n import org.springframework.boot.actuate.endpoint.mvc.MvcEndpoint;\n@@ -132,6 +133,13 @@ public class EndpointWebMvcManagementContextConfiguration {\n \t\treturn new EnvironmentMvcEndpoint(delegate);\n \t}\n \n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\t@ConditionalOnEnabledEndpoint("heapdump")\n+\tpublic HeapdumpMvcEndpoint heapdumpMvcEndpoint() {\n+\t\treturn new HeapdumpMvcEndpoint();\n+\t}\n+\n \t@Bean\n \t@ConditionalOnBean(HealthEndpoint.class)\n \t@ConditionalOnEnabledEndpoint("health")\n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport java.util.List;\nimport java.util.Set;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuate.autoconfigure.ManagementServerProperties.Security;\nimport org.springframework.boot.actuate.condition.ConditionalOnEnabledEndpoint;\nimport org.springframework.boot.actuate.endpoint.Endpoint;\nimport org.springframework.boot.actuate.endpoint.EnvironmentEndpoint;\nimport org.springframework.boot.actuate.endpoint.HealthEndpoint;\nimport org.springframework.boot.actuate.endpoint.MetricsEndpoint;\nimport org.springframework.boot.actuate.endpoint.ShutdownEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping;\nimport org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingCustomizer;\nimport org.springframework.boot.actuate.endpoint.mvc.EnvironmentMvcEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.LogFileMvcEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.MetricsMvcEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.MvcEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints;\nimport org.springframework.boot.actuate.endpoint.mvc.ShutdownMvcEndpoint;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.bind.RelaxedPropertyResolver;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.core.env.Environment;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.cors.CorsConfiguration;\n\n/**\n * Configuration to expose {@link Endpoint} instances over Spring MVC.\n *\n * @author Dave Syer\n * @since 1.3.0\n */\n@ManagementContextConfiguration\n@EnableConfigurationProperties({ HealthMvcEndpointProperties.class,\n\t\tEndpointCorsProperties.class })\npublic class EndpointWebMvcManagementContextConfiguration {\n\n\t@Autowired\n\tprivate HealthMvcEndpointProperties healthMvcEndpointProperties;\n\n\t@Autowired\n\tprivate ManagementServerProperties managementServerProperties;\n\n\t@Autowired\n\tprivate EndpointCorsProperties corsProperties;\n\n\t@Autowired(required = false)\n\tprivate List<EndpointHandlerMappingCustomizer> mappingCustomizers;\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic EndpointHandlerMapping endpointHandlerMapping() {\n\t\tSet<? extends MvcEndpoint> endpoints = mvcEndpoints().getEndpoints();\n\t\tCorsConfiguration corsConfiguration = getCorsConfiguration(this.corsProperties);\n\t\tEndpointHandlerMapping mapping = new EndpointHandlerMapping(endpoints,\n\t\t\t\tcorsConfiguration);\n\t\tboolean disabled = this.managementServerProperties.getPort() != null\n\t\t\t\t&& this.managementServerProperties.getPort() == -1;\n\t\tmapping.setDisabled(disabled);\n\t\tif (!disabled) {\n\t\t\tmapping.setPrefix(this.managementServerProperties.getContextPath());\n\t\t}\n\t\tif (this.mappingCustomizers != null) {\n\t\t\tfor (EndpointHandlerMappingCustomizer customizer : this.mappingCustomizers) {\n\t\t\t\tcustomizer.customize(mapping);\n\t\t\t}\n\t\t}\n\t\treturn mapping;\n\t}\n\n\tprivate CorsConfiguration getCorsConfiguration(EndpointCorsProperties properties) {\n\t\tif (CollectionUtils.isEmpty(properties.getAllowedOrigins())) {\n\t\t\treturn null;\n\t\t}\n\t\tCorsConfiguration configuration = new CorsConfiguration();\n\t\tconfiguration.setAllowedOrigins(properties.getAllowedOrigins());\n\t\tif (!CollectionUtils.isEmpty(properties.getAllowedHeaders())) {\n\t\t\tconfiguration.setAllowedHeaders(properties.getAllowedHeaders());\n\t\t}\n\t\tif (!CollectionUtils.isEmpty(properties.getAllowedMethods())) {\n\t\t\tconfiguration.setAllowedMethods(properties.getAllowedMethods());\n\t\t}\n\t\tif (!CollectionUtils.isEmpty(properties.getExposedHeaders())) {\n\t\t\tconfiguration.setExposedHeaders(properties.getExposedHeaders());\n\t\t}\n\t\tif (properties.getMaxAge() != null) {\n\t\t\tconfiguration.setMaxAge(properties.getMaxAge());\n\t\t}\n\t\tif (properties.getAllowCredentials() != null) {\n\t\t\tconfiguration.setAllowCredentials(properties.getAllowCredentials());\n\t\t}\n\t\treturn configuration;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic MvcEndpoints mvcEndpoints() {\n\t\treturn new MvcEndpoints();\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(EnvironmentEndpoint.class)\n\t@ConditionalOnEnabledEndpoint("env")\n\tpublic EnvironmentMvcEndpoint environmentMvcEndpoint(EnvironmentEndpoint delegate) {\n\t\treturn new EnvironmentMvcEndpoint(delegate);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnEnabledEndpoint("heapdump")\n\tpublic HeapdumpMvcEndpoint heapdumpMvcEndpoint() {\n\t\treturn new HeapdumpMvcEndpoint();\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(HealthEndpoint.class)\n\t@ConditionalOnEnabledEndpoint("health")\n\tpublic HealthMvcEndpoint healthMvcEndpoint(HealthEndpoint delegate) {\n\t\tSecurity security = this.managementServerProperties.getSecurity();\n\t\tboolean secure = (security != null && security.isEnabled());\n\t\tHealthMvcEndpoint healthMvcEndpoint = new HealthMvcEndpoint(delegate, secure);\n\t\tif (this.healthMvcEndpointProperties.getMapping() != null) {\n\t\t\thealthMvcEndpoint\n\t\t\t\t\t.addStatusMapping(this.healthMvcEndpointProperties.getMapping());\n\t\t}\n\t\treturn healthMvcEndpoint;\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(MetricsEndpoint.class)\n\t@ConditionalOnEnabledEndpoint("metrics")\n\tpublic MetricsMvcEndpoint metricsMvcEndpoint(MetricsEndpoint delegate) {\n\t\treturn new MetricsMvcEndpoint(delegate);\n\t}\n\n\t@Bean\n\t@ConditionalOnEnabledEndpoint("logfile")\n\t@Conditional(LogFileCondition.class)\n\tpublic LogFileMvcEndpoint logfileMvcEndpoint() {\n\t\treturn new LogFileMvcEndpoint();\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(ShutdownEndpoint.class)\n\t@ConditionalOnEnabledEndpoint(value = "shutdown", enabledByDefault = false)\n\tpublic ShutdownMvcEndpoint shutdownMvcEndpoint(ShutdownEndpoint delegate) {\n\t\treturn new ShutdownMvcEndpoint(delegate);\n\t}\n\n\tprivate static class LogFileCondition extends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tEnvironment environment = context.getEnvironment();\n\t\t\tString config = environment.resolvePlaceholders("${logging.file:}");\n\t\t\tif (StringUtils.hasText(config)) {\n\t\t\t\treturn ConditionOutcome.match("Found logging.file: " + config);\n\t\t\t}\n\t\t\tconfig = environment.resolvePlaceholders("${logging.path:}");\n\t\t\tif (StringUtils.hasText(config)) {\n\t\t\t\treturn ConditionOutcome.match("Found logging.path: " + config);\n\t\t\t}\n\t\t\tconfig = new RelaxedPropertyResolver(environment, "endpoints.logfile.")\n\t\t\t\t\t.getProperty("external-file");\n\t\t\tif (StringUtils.hasText(config)) {\n\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t.match("Found endpoints.logfile.external-file: " + config);\n\t\t\t}\n\t\t\treturn ConditionOutcome.noMatch("Found no log file configuration");\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport java.util.List;\nimport java.util.Set;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuate.autoconfigure.ManagementServerProperties.Security;\nimport org.springframework.boot.actuate.condition.ConditionalOnEnabledEndpoint;\nimport org.springframework.boot.actuate.endpoint.Endpoint;\nimport org.springframework.boot.actuate.endpoint.EnvironmentEndpoint;\nimport org.springframework.boot.actuate.endpoint.HealthEndpoint;\nimport org.springframework.boot.actuate.endpoint.MetricsEndpoint;\nimport org.springframework.boot.actuate.endpoint.ShutdownEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping;\nimport org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingCustomizer;\nimport org.springframework.boot.actuate.endpoint.mvc.EnvironmentMvcEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.LogFileMvcEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.MetricsMvcEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.MvcEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints;\nimport org.springframework.boot.actuate.endpoint.mvc.ShutdownMvcEndpoint;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.bind.RelaxedPropertyResolver;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.core.env.Environment;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.cors.CorsConfiguration;\n\n/**\n * Configuration to expose {@link Endpoint} instances over Spring MVC.\n *\n * @author Dave Syer\n * @since 1.3.0\n */\n@ManagementContextConfiguration\n@EnableConfigurationProperties({ HealthMvcEndpointProperties.class,\n\t\tEndpointCorsProperties.class })\npublic class EndpointWebMvcManagementContextConfiguration {\n\n\t@Autowired\n\tprivate HealthMvcEndpointProperties healthMvcEndpointProperties;\n\n\t@Autowired\n\tprivate ManagementServerProperties managementServerProperties;\n\n\t@Autowired\n\tprivate EndpointCorsProperties corsProperties;\n\n\t@Autowired(required = false)\n\tprivate List<EndpointHandlerMappingCustomizer> mappingCustomizers;\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic EndpointHandlerMapping endpointHandlerMapping() {\n\t\tSet<? extends MvcEndpoint> endpoints = mvcEndpoints().getEndpoints();\n\t\tCorsConfiguration corsConfiguration = getCorsConfiguration(this.corsProperties);\n\t\tEndpointHandlerMapping mapping = new EndpointHandlerMapping(endpoints,\n\t\t\t\tcorsConfiguration);\n\t\tboolean disabled = this.managementServerProperties.getPort() != null\n\t\t\t\t&& this.managementServerProperties.getPort() == -1;\n\t\tmapping.setDisabled(disabled);\n\t\tif (!disabled) {\n\t\t\tmapping.setPrefix(this.managementServerProperties.getContextPath());\n\t\t}\n\t\tif (this.mappingCustomizers != null) {\n\t\t\tfor (EndpointHandlerMappingCustomizer customizer : this.mappingCustomizers) {\n\t\t\t\tcustomizer.customize(mapping);\n\t\t\t}\n\t\t}\n\t\treturn mapping;\n\t}\n\n\tprivate CorsConfiguration getCorsConfiguration(EndpointCorsProperties properties) {\n\t\tif (CollectionUtils.isEmpty(properties.getAllowedOrigins())) {\n\t\t\treturn null;\n\t\t}\n\t\tCorsConfiguration configuration = new CorsConfiguration();\n\t\tconfiguration.setAllowedOrigins(properties.getAllowedOrigins());\n\t\tif (!CollectionUtils.isEmpty(properties.getAllowedHeaders())) {\n\t\t\tconfiguration.setAllowedHeaders(properties.getAllowedHeaders());\n\t\t}\n\t\tif (!CollectionUtils.isEmpty(properties.getAllowedMethods())) {\n\t\t\tconfiguration.setAllowedMethods(properties.getAllowedMethods());\n\t\t}\n\t\tif (!CollectionUtils.isEmpty(properties.getExposedHeaders())) {\n\t\t\tconfiguration.setExposedHeaders(properties.getExposedHeaders());\n\t\t}\n\t\tif (properties.getMaxAge() != null) {\n\t\t\tconfiguration.setMaxAge(properties.getMaxAge());\n\t\t}\n\t\tif (properties.getAllowCredentials() != null) {\n\t\t\tconfiguration.setAllowCredentials(properties.getAllowCredentials());\n\t\t}\n\t\treturn configuration;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic MvcEndpoints mvcEndpoints() {\n\t\treturn new MvcEndpoints();\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(EnvironmentEndpoint.class)\n\t@ConditionalOnEnabledEndpoint("env")\n\tpublic EnvironmentMvcEndpoint environmentMvcEndpoint(EnvironmentEndpoint delegate) {\n\t\treturn new EnvironmentMvcEndpoint(delegate);\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(HealthEndpoint.class)\n\t@ConditionalOnEnabledEndpoint("health")\n\tpublic HealthMvcEndpoint healthMvcEndpoint(HealthEndpoint delegate) {\n\t\tSecurity security = this.managementServerProperties.getSecurity();\n\t\tboolean secure = (security != null && security.isEnabled());\n\t\tHealthMvcEndpoint healthMvcEndpoint = new HealthMvcEndpoint(delegate, secure);\n\t\tif (this.healthMvcEndpointProperties.getMapping() != null) {\n\t\t\thealthMvcEndpoint\n\t\t\t\t\t.addStatusMapping(this.healthMvcEndpointProperties.getMapping());\n\t\t}\n\t\treturn healthMvcEndpoint;\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(MetricsEndpoint.class)\n\t@ConditionalOnEnabledEndpoint("metrics")\n\tpublic MetricsMvcEndpoint metricsMvcEndpoint(MetricsEndpoint delegate) {\n\t\treturn new MetricsMvcEndpoint(delegate);\n\t}\n\n\t@Bean\n\t@ConditionalOnEnabledEndpoint("logfile")\n\t@Conditional(LogFileCondition.class)\n\tpublic LogFileMvcEndpoint logfileMvcEndpoint() {\n\t\treturn new LogFileMvcEndpoint();\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(ShutdownEndpoint.class)\n\t@ConditionalOnEnabledEndpoint(value = "shutdown", enabledByDefault = false)\n\tpublic ShutdownMvcEndpoint shutdownMvcEndpoint(ShutdownEndpoint delegate) {\n\t\treturn new ShutdownMvcEndpoint(delegate);\n\t}\n\n\tprivate static class LogFileCondition extends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tEnvironment environment = context.getEnvironment();\n\t\t\tString config = environment.resolvePlaceholders("${logging.file:}");\n\t\t\tif (StringUtils.hasText(config)) {\n\t\t\t\treturn ConditionOutcome.match("Found logging.file: " + config);\n\t\t\t}\n\t\t\tconfig = environment.resolvePlaceholders("${logging.path:}");\n\t\t\tif (StringUtils.hasText(config)) {\n\t\t\t\treturn ConditionOutcome.match("Found logging.path: " + config);\n\t\t\t}\n\t\t\tconfig = new RelaxedPropertyResolver(environment, "endpoints.logfile.")\n\t\t\t\t\t.getProperty("external-file");\n\t\t\tif (StringUtils.hasText(config)) {\n\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t.match("Found endpoints.logfile.external-file: " + config);\n\t\t\t}\n\t\t\treturn ConditionOutcome.noMatch("Found no log file configuration");\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
