@@ -0,0 +1,65 @@
+
+
+package org.springframework.boot.autoconfigure.web.reactive.function.client;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.springframework.beans.factory.ObjectProvider;
+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.web.reactive.function.client.WebClientCustomizer;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Scope;
+import org.springframework.core.annotation.AnnotationAwareOrderComparator;
+import org.springframework.util.CollectionUtils;
+import org.springframework.web.reactive.function.client.WebClient;
+
+
+@Configuration
+@ConditionalOnClass(WebClient.class)
+public class WebClientAutoConfiguration {
+
+	private final WebClient.Builder webClientBuilder;
+
+
+	public WebClientAutoConfiguration(ObjectProvider<List<WebClientCustomizer>> customizerProvider) {
+		this.webClientBuilder = WebClient.builder();
+		List<WebClientCustomizer> customizers = customizerProvider.getIfAvailable();
+		if (!CollectionUtils.isEmpty(customizers)) {
+			customizers = new ArrayList<>(customizers);
+			AnnotationAwareOrderComparator.sort(customizers);
+			customizers.forEach(customizer -> customizer.customize(this.webClientBuilder));
+		}
+	}
+
+	@Bean
+	@Scope()
+	@ConditionalOnMissingBean
+	public WebClient.Builder webClientBuilder(List<WebClientCustomizer> customizers) {
+		return this.webClientBuilder.clone();
+	}
+}

