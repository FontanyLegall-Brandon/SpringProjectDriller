@@ -0,0 +1,64 @@
+
+
+package org.springframework.boot.actuate.autoconfigure.health;
+
+import java.util.Map;
+
+import reactor.core.publisher.Flux;
+
+import org.springframework.boot.actuate.health.ReactiveHealthIndicator;
+import org.springframework.boot.actuate.health.RedisReactiveHealthIndicator;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.data.redis.connection.ReactiveRedisConnectionFactory;
+
+
+@Configuration
+@ConditionalOnClass(Flux.class)
+public class ReactiveHealthIndicatorsConfiguration {
+
+	@Configuration
+	@ConditionalOnBean(ReactiveRedisConnectionFactory.class)
+	@ConditionalOnEnabledHealthIndicator()
+	static class RedisHealthIndicatorConfiguration extends
+			CompositeReactiveHealthIndicatorConfiguration<RedisReactiveHealthIndicator,
+					ReactiveRedisConnectionFactory> {
+
+		private final Map<String, ReactiveRedisConnectionFactory> redisConnectionFactories;
+
+		RedisHealthIndicatorConfiguration(
+				Map<String, ReactiveRedisConnectionFactory> redisConnectionFactories) {
+			this.redisConnectionFactories = redisConnectionFactories;
+		}
+
+		@Bean
+		@ConditionalOnMissingBean(name = )
+		public ReactiveHealthIndicator redisHealthIndicator() {
+			return createHealthIndicator(this.redisConnectionFactories);
+		}
+
+	}
+
+}

