{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/DeviceDelegatingViewResolverAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/DeviceDelegatingViewResolverAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -36,7 +36,6 @@ import org.springframework.core.Ordered;\n import org.springframework.core.env.Environment;\n import org.springframework.mobile.device.view.LiteDeviceDelegatingViewResolver;\n import org.springframework.web.servlet.ViewResolver;\n-import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\n import org.springframework.web.servlet.view.InternalResourceViewResolver;\n import org.thymeleaf.spring4.view.ThymeleafViewResolver;\n \n@@ -52,10 +51,10 @@ import org.thymeleaf.spring4.view.ThymeleafViewResolver;\n @Configuration\n @ConditionalOnWebApplication\n @ConditionalOnClass(LiteDeviceDelegatingViewResolver.class)\n-@AutoConfigureAfter(WebMvcAutoConfiguration.class)\n+@AutoConfigureAfter({ WebMvcAutoConfiguration.class, ThymeleafAutoConfiguration.class })\n public class DeviceDelegatingViewResolverAutoConfiguration {\n \n-\tprivate static Log logger = LogFactory.getLog(WebMvcConfigurerAdapter.class);\n+\tprivate static Log logger = LogFactory.getLog(DeviceDelegatingViewResolverAutoConfiguration.class);\n \n \tprivate static abstract class AbstractDelegateConfiguration implements\n \t\t\tEnvironmentAware {\n@@ -103,8 +102,7 @@ public class DeviceDelegatingViewResolverAutoConfiguration {\n \tprotected static class DeviceDelegatingViewResolverConfiguration {\n \n \t\t@Configuration\n-\t\t@ConditionalOnBean(ThymeleafViewResolver.class)\n-\t\t@AutoConfigureAfter(ThymeleafAutoConfiguration.class)\n+\t\t@ConditionalOnBean(name = "thymeleafViewResolver")\n \t\tprotected static class ThymeleafViewResolverViewResolverDelegateConfiguration\n \t\t\t\textends AbstractDelegateConfiguration {\n \n@@ -124,7 +122,7 @@ public class DeviceDelegatingViewResolverAutoConfiguration {\n \t\t}\n \n \t\t@Configuration\n-\t\t@ConditionalOnMissingBean(ThymeleafViewResolver.class)\n+\t\t@ConditionalOnMissingBean(name = "thymeleafViewResolver")\n \t\t@ConditionalOnBean(InternalResourceViewResolver.class)\n \t\tprotected static class InternalResourceViewResolverDelegateConfiguration extends\n \t\t\t\tAbstractDelegateConfiguration {\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.mobile;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.boot.bind.RelaxedPropertyResolver;\nimport org.springframework.context.EnvironmentAware;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.env.Environment;\nimport org.springframework.mobile.device.view.LiteDeviceDelegatingViewResolver;\nimport org.springframework.web.servlet.ViewResolver;\nimport org.springframework.web.servlet.view.InternalResourceViewResolver;\nimport org.thymeleaf.spring4.view.ThymeleafViewResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Mobile\'s\n * {@link LiteDeviceDelegatingViewResolver}. If {@link ThymeleafViewResolver} is available\n * it is configured as the delegate view resolver. Otherwise,\n * {@link InternalResourceViewResolver} is used as a fallback.\n * \n * @author Roy Clarkson\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnWebApplication\n@ConditionalOnClass(LiteDeviceDelegatingViewResolver.class)\n@AutoConfigureAfter({ WebMvcAutoConfiguration.class, ThymeleafAutoConfiguration.class })\npublic class DeviceDelegatingViewResolverAutoConfiguration {\n\n\tprivate static Log logger = LogFactory.getLog(DeviceDelegatingViewResolverAutoConfiguration.class);\n\n\tprivate static abstract class AbstractDelegateConfiguration implements\n\t\t\tEnvironmentAware {\n\n\t\tprivate RelaxedPropertyResolver environment;\n\n\t\t@Override\n\t\tpublic void setEnvironment(Environment environment) {\n\t\t\tthis.environment = new RelaxedPropertyResolver(environment,\n\t\t\t\t\t"spring.mobile.devicedelegatingviewresolver.");\n\t\t}\n\n\t\tprotected LiteDeviceDelegatingViewResolver getConfiguredViewResolver(\n\t\t\t\tViewResolver delegate, int delegateOrder) {\n\t\t\tLiteDeviceDelegatingViewResolver resolver = new LiteDeviceDelegatingViewResolver(\n\t\t\t\t\tdelegate);\n\t\t\tresolver.setNormalPrefix(getProperty("normal-prefix", ""));\n\t\t\tresolver.setNormalSuffix(getProperty("normal-suffix", ""));\n\t\t\tresolver.setMobilePrefix(getProperty("mobile-prefix", "mobile/"));\n\t\t\tresolver.setMobileSuffix(getProperty("mobile-suffix", ""));\n\t\t\tresolver.setTabletPrefix(getProperty("tablet-prefix", "tablet/"));\n\t\t\tresolver.setTabletSuffix(getProperty("tablet-suffix", ""));\n\t\t\tresolver.setOrder(getAdjustedOrder(delegateOrder));\n\t\t\treturn resolver;\n\t\t}\n\n\t\tprivate String getProperty(String key, String defaultValue) {\n\t\t\treturn this.environment.getProperty(key, defaultValue);\n\t\t}\n\n\t\tprivate int getAdjustedOrder(int order) {\n\t\t\tif (order == Ordered.HIGHEST_PRECEDENCE) {\n\t\t\t\treturn Ordered.HIGHEST_PRECEDENCE;\n\t\t\t}\n\t\t\t// The view resolver must be ordered higher than the delegate view\n\t\t\t// resolver, otherwise the view names will not be adjusted\n\t\t\treturn order - 1;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(name = "deviceDelegatingViewResolver")\n\t@ConditionalOnExpression("${spring.mobile.devicedelegatingviewresolver.enabled:false}")\n\tprotected static class DeviceDelegatingViewResolverConfiguration {\n\n\t\t@Configuration\n\t\t@ConditionalOnBean(name = "thymeleafViewResolver")\n\t\tprotected static class ThymeleafViewResolverViewResolverDelegateConfiguration\n\t\t\t\textends AbstractDelegateConfiguration {\n\n\t\t\t@Autowired\n\t\t\tprivate ThymeleafViewResolver viewResolver;\n\n\t\t\t@Bean\n\t\t\tpublic LiteDeviceDelegatingViewResolver deviceDelegatingViewResolver() {\n\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug("LiteDeviceDelegatingViewResolver delegates to "\n\t\t\t\t\t\t\t+ "ThymeleafViewResolver");\n\t\t\t\t}\n\t\t\t\treturn getConfiguredViewResolver(this.viewResolver,\n\t\t\t\t\t\tthis.viewResolver.getOrder());\n\t\t\t}\n\n\t\t}\n\n\t\t@Configuration\n\t\t@ConditionalOnMissingBean(name = "thymeleafViewResolver")\n\t\t@ConditionalOnBean(InternalResourceViewResolver.class)\n\t\tprotected static class InternalResourceViewResolverDelegateConfiguration extends\n\t\t\t\tAbstractDelegateConfiguration {\n\n\t\t\t@Autowired\n\t\t\tprivate InternalResourceViewResolver viewResolver;\n\n\t\t\t@Bean\n\t\t\tpublic LiteDeviceDelegatingViewResolver deviceDelegatingViewResolver() {\n\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug("LiteDeviceDelegatingViewResolver delegates to "\n\t\t\t\t\t\t\t+ "InternalResourceViewResolver");\n\t\t\t\t}\n\t\t\t\treturn getConfiguredViewResolver(this.viewResolver,\n\t\t\t\t\t\tthis.viewResolver.getOrder());\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.mobile;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.boot.bind.RelaxedPropertyResolver;\nimport org.springframework.context.EnvironmentAware;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.env.Environment;\nimport org.springframework.mobile.device.view.LiteDeviceDelegatingViewResolver;\nimport org.springframework.web.servlet.ViewResolver;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\nimport org.springframework.web.servlet.view.InternalResourceViewResolver;\nimport org.thymeleaf.spring4.view.ThymeleafViewResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Mobile\'s\n * {@link LiteDeviceDelegatingViewResolver}. If {@link ThymeleafViewResolver} is available\n * it is configured as the delegate view resolver. Otherwise,\n * {@link InternalResourceViewResolver} is used as a fallback.\n * \n * @author Roy Clarkson\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnWebApplication\n@ConditionalOnClass(LiteDeviceDelegatingViewResolver.class)\n@AutoConfigureAfter(WebMvcAutoConfiguration.class)\npublic class DeviceDelegatingViewResolverAutoConfiguration {\n\n\tprivate static Log logger = LogFactory.getLog(WebMvcConfigurerAdapter.class);\n\n\tprivate static abstract class AbstractDelegateConfiguration implements\n\t\t\tEnvironmentAware {\n\n\t\tprivate RelaxedPropertyResolver environment;\n\n\t\t@Override\n\t\tpublic void setEnvironment(Environment environment) {\n\t\t\tthis.environment = new RelaxedPropertyResolver(environment,\n\t\t\t\t\t"spring.mobile.devicedelegatingviewresolver.");\n\t\t}\n\n\t\tprotected LiteDeviceDelegatingViewResolver getConfiguredViewResolver(\n\t\t\t\tViewResolver delegate, int delegateOrder) {\n\t\t\tLiteDeviceDelegatingViewResolver resolver = new LiteDeviceDelegatingViewResolver(\n\t\t\t\t\tdelegate);\n\t\t\tresolver.setNormalPrefix(getProperty("normal-prefix", ""));\n\t\t\tresolver.setNormalSuffix(getProperty("normal-suffix", ""));\n\t\t\tresolver.setMobilePrefix(getProperty("mobile-prefix", "mobile/"));\n\t\t\tresolver.setMobileSuffix(getProperty("mobile-suffix", ""));\n\t\t\tresolver.setTabletPrefix(getProperty("tablet-prefix", "tablet/"));\n\t\t\tresolver.setTabletSuffix(getProperty("tablet-suffix", ""));\n\t\t\tresolver.setOrder(getAdjustedOrder(delegateOrder));\n\t\t\treturn resolver;\n\t\t}\n\n\t\tprivate String getProperty(String key, String defaultValue) {\n\t\t\treturn this.environment.getProperty(key, defaultValue);\n\t\t}\n\n\t\tprivate int getAdjustedOrder(int order) {\n\t\t\tif (order == Ordered.HIGHEST_PRECEDENCE) {\n\t\t\t\treturn Ordered.HIGHEST_PRECEDENCE;\n\t\t\t}\n\t\t\t// The view resolver must be ordered higher than the delegate view\n\t\t\t// resolver, otherwise the view names will not be adjusted\n\t\t\treturn order - 1;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(name = "deviceDelegatingViewResolver")\n\t@ConditionalOnExpression("${spring.mobile.devicedelegatingviewresolver.enabled:false}")\n\tprotected static class DeviceDelegatingViewResolverConfiguration {\n\n\t\t@Configuration\n\t\t@ConditionalOnBean(ThymeleafViewResolver.class)\n\t\t@AutoConfigureAfter(ThymeleafAutoConfiguration.class)\n\t\tprotected static class ThymeleafViewResolverViewResolverDelegateConfiguration\n\t\t\t\textends AbstractDelegateConfiguration {\n\n\t\t\t@Autowired\n\t\t\tprivate ThymeleafViewResolver viewResolver;\n\n\t\t\t@Bean\n\t\t\tpublic LiteDeviceDelegatingViewResolver deviceDelegatingViewResolver() {\n\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug("LiteDeviceDelegatingViewResolver delegates to "\n\t\t\t\t\t\t\t+ "ThymeleafViewResolver");\n\t\t\t\t}\n\t\t\t\treturn getConfiguredViewResolver(this.viewResolver,\n\t\t\t\t\t\tthis.viewResolver.getOrder());\n\t\t\t}\n\n\t\t}\n\n\t\t@Configuration\n\t\t@ConditionalOnMissingBean(ThymeleafViewResolver.class)\n\t\t@ConditionalOnBean(InternalResourceViewResolver.class)\n\t\tprotected static class InternalResourceViewResolverDelegateConfiguration extends\n\t\t\t\tAbstractDelegateConfiguration {\n\n\t\t\t@Autowired\n\t\t\tprivate InternalResourceViewResolver viewResolver;\n\n\t\t\t@Bean\n\t\t\tpublic LiteDeviceDelegatingViewResolver deviceDelegatingViewResolver() {\n\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug("LiteDeviceDelegatingViewResolver delegates to "\n\t\t\t\t\t\t\t+ "InternalResourceViewResolver");\n\t\t\t\t}\n\t\t\t\treturn getConfiguredViewResolver(this.viewResolver,\n\t\t\t\t\t\tthis.viewResolver.getOrder());\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
