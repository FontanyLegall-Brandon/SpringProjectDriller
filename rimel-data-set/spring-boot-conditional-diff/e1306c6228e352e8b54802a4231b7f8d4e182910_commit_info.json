{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterBindersConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterBindersConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -37,7 +37,7 @@ import org.springframework.context.annotation.Configuration;\n class MeterBindersConfiguration {\n \n \t@Bean\n-\t@ConditionalOnProperty(value = "spring.metrics.binders.jvmmemory.enabled", havingValue = "true", matchIfMissing = true)\n+\t@ConditionalOnProperty(value = "spring.metrics.binders.jvmmemory.enabled", matchIfMissing = true)\n \t@ConditionalOnMissingBean(JvmMemoryMetrics.class)\n \tpublic JvmMemoryMetrics jvmMemoryMetrics() {\n \t\treturn new JvmMemoryMetrics();\n@@ -45,21 +45,21 @@ class MeterBindersConfiguration {\n \n \t@Bean\n \t@ConditionalOnMissingBean(LogbackMetrics.class)\n-\t@ConditionalOnProperty(value = "spring.metrics.binders.logback.enabled", havingValue = "true", matchIfMissing = true)\n+\t@ConditionalOnProperty(value = "spring.metrics.binders.logback.enabled", matchIfMissing = true)\n \t@ConditionalOnClass(name = "ch.qos.logback.classic.Logger")\n \tpublic LogbackMetrics logbackMetrics() {\n \t\treturn new LogbackMetrics();\n \t}\n \n \t@Bean\n-\t@ConditionalOnProperty(value = "spring.metrics.binders.uptime.enabled", havingValue = "true", matchIfMissing = true)\n+\t@ConditionalOnProperty(value = "spring.metrics.binders.uptime.enabled", matchIfMissing = true)\n \t@ConditionalOnMissingBean(UptimeMetrics.class)\n \tpublic UptimeMetrics uptimeMetrics() {\n \t\treturn new UptimeMetrics();\n \t}\n \n \t@Bean\n-\t@ConditionalOnProperty(value = "spring.metrics.binders.processor.enabled", havingValue = "true", matchIfMissing = true)\n+\t@ConditionalOnProperty(value = "spring.metrics.binders.processor.enabled", matchIfMissing = true)\n \t@ConditionalOnMissingBean(ProcessorMetrics.class)\n \tpublic ProcessorMetrics processorMetrics() {\n \t\treturn new ProcessorMetrics();\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics;\n\nimport io.micrometer.core.instrument.binder.MeterBinder;\nimport io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics;\nimport io.micrometer.core.instrument.binder.logging.LogbackMetrics;\nimport io.micrometer.core.instrument.binder.system.ProcessorMetrics;\nimport io.micrometer.core.instrument.binder.system.UptimeMetrics;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Configuration for various {@link MeterBinder MeterBinders}.\n *\n * @author Jon Schneider\n */\n@Configuration\nclass MeterBindersConfiguration {\n\n\t@Bean\n\t@ConditionalOnProperty(value = "spring.metrics.binders.jvmmemory.enabled", matchIfMissing = true)\n\t@ConditionalOnMissingBean(JvmMemoryMetrics.class)\n\tpublic JvmMemoryMetrics jvmMemoryMetrics() {\n\t\treturn new JvmMemoryMetrics();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(LogbackMetrics.class)\n\t@ConditionalOnProperty(value = "spring.metrics.binders.logback.enabled", matchIfMissing = true)\n\t@ConditionalOnClass(name = "ch.qos.logback.classic.Logger")\n\tpublic LogbackMetrics logbackMetrics() {\n\t\treturn new LogbackMetrics();\n\t}\n\n\t@Bean\n\t@ConditionalOnProperty(value = "spring.metrics.binders.uptime.enabled", matchIfMissing = true)\n\t@ConditionalOnMissingBean(UptimeMetrics.class)\n\tpublic UptimeMetrics uptimeMetrics() {\n\t\treturn new UptimeMetrics();\n\t}\n\n\t@Bean\n\t@ConditionalOnProperty(value = "spring.metrics.binders.processor.enabled", matchIfMissing = true)\n\t@ConditionalOnMissingBean(ProcessorMetrics.class)\n\tpublic ProcessorMetrics processorMetrics() {\n\t\treturn new ProcessorMetrics();\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics;\n\nimport io.micrometer.core.instrument.binder.MeterBinder;\nimport io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics;\nimport io.micrometer.core.instrument.binder.logging.LogbackMetrics;\nimport io.micrometer.core.instrument.binder.system.ProcessorMetrics;\nimport io.micrometer.core.instrument.binder.system.UptimeMetrics;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Configuration for various {@link MeterBinder MeterBinders}.\n *\n * @author Jon Schneider\n */\n@Configuration\nclass MeterBindersConfiguration {\n\n\t@Bean\n\t@ConditionalOnProperty(value = "spring.metrics.binders.jvmmemory.enabled", havingValue = "true", matchIfMissing = true)\n\t@ConditionalOnMissingBean(JvmMemoryMetrics.class)\n\tpublic JvmMemoryMetrics jvmMemoryMetrics() {\n\t\treturn new JvmMemoryMetrics();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(LogbackMetrics.class)\n\t@ConditionalOnProperty(value = "spring.metrics.binders.logback.enabled", havingValue = "true", matchIfMissing = true)\n\t@ConditionalOnClass(name = "ch.qos.logback.classic.Logger")\n\tpublic LogbackMetrics logbackMetrics() {\n\t\treturn new LogbackMetrics();\n\t}\n\n\t@Bean\n\t@ConditionalOnProperty(value = "spring.metrics.binders.uptime.enabled", havingValue = "true", matchIfMissing = true)\n\t@ConditionalOnMissingBean(UptimeMetrics.class)\n\tpublic UptimeMetrics uptimeMetrics() {\n\t\treturn new UptimeMetrics();\n\t}\n\n\t@Bean\n\t@ConditionalOnProperty(value = "spring.metrics.binders.processor.enabled", havingValue = "true", matchIfMissing = true)\n\t@ConditionalOnMissingBean(ProcessorMetrics.class)\n\tpublic ProcessorMetrics processorMetrics() {\n\t\treturn new ProcessorMetrics();\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
