@@ -0,0 +1,103 @@
+
+
+package org.springframework.boot.actuate.autoconfigure;
+
+import java.util.Map;
+
+import org.jolokia.http.AgentServlet;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.actuate.endpoint.JolokiaEndpoint;
+import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.AutoConfigureBefore;
+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
+import org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration;
+import org.springframework.boot.bind.RelaxedPropertyResolver;
+import org.springframework.boot.context.embedded.EmbeddedServletContainerFactory;
+import org.springframework.boot.context.embedded.ServletRegistrationBean;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.core.env.Environment;
+
+
+@Configuration
+@ConditionalOnWebApplication
+@ConditionalOnClass({ AgentServlet.class })
+@ConditionalOnBean(EmbeddedServletContainerFactory.class)
+@AutoConfigureBefore(ManagementSecurityAutoConfiguration.class)
+@AutoConfigureAfter(EmbeddedServletContainerAutoConfiguration.class)
+@ConditionalOnExpression()
+public class JolokiaAutoConfiguration {
+
+	private RelaxedPropertyResolver environment;
+
+	@Autowired
+	public void setEnvironment(Environment environment) {
+		this.environment = new RelaxedPropertyResolver(environment);
+	}
+
+	@Bean
+	@ConditionalOnMissingBean({ AgentServlet.class })
+	public AgentServlet jolokiaServlet() {
+		return new AgentServlet();
+	}
+
+	@Bean
+	@ConditionalOnMissingBean()
+	public ServletRegistrationBean jolokiaServletRegistration() {
+		ServletRegistrationBean registrationBean = new ServletRegistrationBean(
+				jolokiaServlet(), this.environment.getProperty(,
+						) + );
+		addInitParameters(registrationBean);
+		return registrationBean;
+	}
+
+	@Bean
+	@ConditionalOnMissingBean
+	public JolokiaEndpoint jolokiaEndpoint() {
+		return new JolokiaEndpoint();
+	}
+
+	protected void addInitParameters(ServletRegistrationBean registrationBean) {
+		Map<String, Object> configParameters = this.environment
+				.getSubProperties();
+		for (Map.Entry<String, Object> configParameter : configParameters.entrySet()) {
+			registrationBean.addInitParameter(configParameter.getKey(), configParameter
+					.getValue().toString());
+		}
+	}
+}

