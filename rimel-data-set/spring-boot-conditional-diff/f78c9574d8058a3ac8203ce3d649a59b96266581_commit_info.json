{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/RedisSessionConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/RedisSessionConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -29,7 +29,7 @@ import org.springframework.context.annotation.Configuration;\n import org.springframework.data.redis.connection.RedisConnectionFactory;\n import org.springframework.data.redis.core.RedisTemplate;\n import org.springframework.session.SessionRepository;\n-import org.springframework.session.data.redis.RedisOperationsSessionRepository;\n+import org.springframework.session.data.redis.RedisIndexedSessionRepository;\n import org.springframework.session.data.redis.config.ConfigureNotifyKeyspaceEventsAction;\n import org.springframework.session.data.redis.config.ConfigureRedisAction;\n import org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration;\n@@ -44,7 +44,7 @@ import org.springframework.session.data.redis.config.annotation.web.http.RedisHt\n  * @author Vedran Pavic\n  */\n @Configuration(proxyBeanMethods = false)\n-@ConditionalOnClass({ RedisTemplate.class, RedisOperationsSessionRepository.class })\n+@ConditionalOnClass({ RedisTemplate.class, RedisIndexedSessionRepository.class })\n @ConditionalOnMissingBean(SessionRepository.class)\n @ConditionalOnBean(RedisConnectionFactory.class)\n @Conditional(ServletSessionCondition.class)\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.session;\n\nimport java.time.Duration;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.session.SessionRepository;\nimport org.springframework.session.data.redis.RedisIndexedSessionRepository;\nimport org.springframework.session.data.redis.config.ConfigureNotifyKeyspaceEventsAction;\nimport org.springframework.session.data.redis.config.ConfigureRedisAction;\nimport org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration;\n\n/**\n * Redis backed session configuration.\n *\n * @author Andy Wilkinson\n * @author Tommy Ludwig\n * @author Eddú Meléndez\n * @author Stephane Nicoll\n * @author Vedran Pavic\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass({ RedisTemplate.class, RedisIndexedSessionRepository.class })\n@ConditionalOnMissingBean(SessionRepository.class)\n@ConditionalOnBean(RedisConnectionFactory.class)\n@Conditional(ServletSessionCondition.class)\n@EnableConfigurationProperties(RedisSessionProperties.class)\nclass RedisSessionConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tConfigureRedisAction configureRedisAction(RedisSessionProperties redisSessionProperties) {\n\t\tswitch (redisSessionProperties.getConfigureAction()) {\n\t\tcase NOTIFY_KEYSPACE_EVENTS:\n\t\t\treturn new ConfigureNotifyKeyspaceEventsAction();\n\t\tcase NONE:\n\t\t\treturn ConfigureRedisAction.NO_OP;\n\t\t}\n\t\tthrow new IllegalStateException(\n\t\t\t\t"Unsupported redis configure action \'" + redisSessionProperties.getConfigureAction() + "\'.");\n\t}\n\n\t@Configuration\n\tpublic static class SpringBootRedisHttpSessionConfiguration extends RedisHttpSessionConfiguration {\n\n\t\t@Autowired\n\t\tpublic void customize(SessionProperties sessionProperties, RedisSessionProperties redisSessionProperties) {\n\t\t\tDuration timeout = sessionProperties.getTimeout();\n\t\t\tif (timeout != null) {\n\t\t\t\tsetMaxInactiveIntervalInSeconds((int) timeout.getSeconds());\n\t\t\t}\n\t\t\tsetRedisNamespace(redisSessionProperties.getNamespace());\n\t\t\tsetFlushMode(redisSessionProperties.getFlushMode());\n\t\t\tsetSaveMode(redisSessionProperties.getSaveMode());\n\t\t\tsetCleanupCron(redisSessionProperties.getCleanupCron());\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.session;\n\nimport java.time.Duration;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.session.SessionRepository;\nimport org.springframework.session.data.redis.RedisOperationsSessionRepository;\nimport org.springframework.session.data.redis.config.ConfigureNotifyKeyspaceEventsAction;\nimport org.springframework.session.data.redis.config.ConfigureRedisAction;\nimport org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration;\n\n/**\n * Redis backed session configuration.\n *\n * @author Andy Wilkinson\n * @author Tommy Ludwig\n * @author Eddú Meléndez\n * @author Stephane Nicoll\n * @author Vedran Pavic\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass({ RedisTemplate.class, RedisOperationsSessionRepository.class })\n@ConditionalOnMissingBean(SessionRepository.class)\n@ConditionalOnBean(RedisConnectionFactory.class)\n@Conditional(ServletSessionCondition.class)\n@EnableConfigurationProperties(RedisSessionProperties.class)\nclass RedisSessionConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tConfigureRedisAction configureRedisAction(RedisSessionProperties redisSessionProperties) {\n\t\tswitch (redisSessionProperties.getConfigureAction()) {\n\t\tcase NOTIFY_KEYSPACE_EVENTS:\n\t\t\treturn new ConfigureNotifyKeyspaceEventsAction();\n\t\tcase NONE:\n\t\t\treturn ConfigureRedisAction.NO_OP;\n\t\t}\n\t\tthrow new IllegalStateException(\n\t\t\t\t"Unsupported redis configure action \'" + redisSessionProperties.getConfigureAction() + "\'.");\n\t}\n\n\t@Configuration\n\tpublic static class SpringBootRedisHttpSessionConfiguration extends RedisHttpSessionConfiguration {\n\n\t\t@Autowired\n\t\tpublic void customize(SessionProperties sessionProperties, RedisSessionProperties redisSessionProperties) {\n\t\t\tDuration timeout = sessionProperties.getTimeout();\n\t\t\tif (timeout != null) {\n\t\t\t\tsetMaxInactiveIntervalInSeconds((int) timeout.getSeconds());\n\t\t\t}\n\t\t\tsetRedisNamespace(redisSessionProperties.getNamespace());\n\t\t\tsetFlushMode(redisSessionProperties.getFlushMode());\n\t\t\tsetSaveMode(redisSessionProperties.getSaveMode());\n\t\t\tsetCleanupCron(redisSessionProperties.getCleanupCron());\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
