{'_old_path': None, '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskExecutorAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2012-2018 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.task;\n+\n+import java.util.concurrent.Executor;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.task.TaskExecutorBuilder;\n+import org.springframework.boot.task.TaskExecutorCustomizer;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.task.TaskDecorator;\n+import org.springframework.core.task.TaskExecutor;\n+import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for {@link TaskExecutor}.\n+ *\n+ * @author Stephane Nicoll\n+ * @since 2.1.0\n+ */\n+@ConditionalOnClass(ThreadPoolTaskExecutor.class)\n+@Configuration\n+@EnableConfigurationProperties(TaskProperties.class)\n+public class TaskExecutorAutoConfiguration {\n+\n+\t/**\n+\t * Bean name of the application {@link TaskExecutor}.\n+\t */\n+\tpublic static final String APPLICATION_TASK_EXECUTOR_BEAN_NAME = "applicationTaskExecutor";\n+\n+\tprivate final TaskProperties properties;\n+\n+\tprivate final ObjectProvider<TaskExecutorCustomizer> taskExecutorCustomizers;\n+\n+\tprivate final ObjectProvider<TaskDecorator> taskDecorator;\n+\n+\tpublic TaskExecutorAutoConfiguration(TaskProperties properties,\n+\t\t\tObjectProvider<TaskExecutorCustomizer> taskExecutorCustomizers,\n+\t\t\tObjectProvider<TaskDecorator> taskDecorator) {\n+\t\tthis.properties = properties;\n+\t\tthis.taskExecutorCustomizers = taskExecutorCustomizers;\n+\t\tthis.taskDecorator = taskDecorator;\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic TaskExecutorBuilder taskExecutorBuilder() {\n+\t\tTaskExecutorBuilder builder = new TaskExecutorBuilder();\n+\t\tTaskProperties.Pool pool = this.properties.getPool();\n+\t\tbuilder = builder.queueCapacity(pool.getQueueCapacity())\n+\t\t\t\t.corePoolSize(pool.getCoreSize()).maxPoolSize(pool.getMaxSize())\n+\t\t\t\t.allowCoreThreadTimeOut(pool.isAllowCoreThreadTimeout())\n+\t\t\t\t.keepAlive(pool.getKeepAlive());\n+\t\tbuilder = builder.threadNamePrefix(this.properties.getThreadNamePrefix());\n+\t\tbuilder = builder.customizers(\n+\t\t\t\tthis.taskExecutorCustomizers.stream().collect(Collectors.toList()));\n+\t\tTaskDecorator taskDecorator = this.taskDecorator.getIfUnique();\n+\t\tif (taskDecorator != null) {\n+\t\t\tbuilder = builder.taskDecorator(taskDecorator);\n+\t\t}\n+\t\treturn builder;\n+\t}\n+\n+\t@Bean(name = APPLICATION_TASK_EXECUTOR_BEAN_NAME)\n+\t@ConditionalOnMissingBean(Executor.class)\n+\tpublic ThreadPoolTaskExecutor applicationTaskExecutor(TaskExecutorBuilder builder) {\n+\t\treturn builder.build();\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.task;\n\nimport java.util.concurrent.Executor;\nimport java.util.stream.Collectors;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.task.TaskExecutorBuilder;\nimport org.springframework.boot.task.TaskExecutorCustomizer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.task.TaskDecorator;\nimport org.springframework.core.task.TaskExecutor;\nimport org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link TaskExecutor}.\n *\n * @author Stephane Nicoll\n * @since 2.1.0\n */\n@ConditionalOnClass(ThreadPoolTaskExecutor.class)\n@Configuration\n@EnableConfigurationProperties(TaskProperties.class)\npublic class TaskExecutorAutoConfiguration {\n\n\t/**\n\t * Bean name of the application {@link TaskExecutor}.\n\t */\n\tpublic static final String APPLICATION_TASK_EXECUTOR_BEAN_NAME = "applicationTaskExecutor";\n\n\tprivate final TaskProperties properties;\n\n\tprivate final ObjectProvider<TaskExecutorCustomizer> taskExecutorCustomizers;\n\n\tprivate final ObjectProvider<TaskDecorator> taskDecorator;\n\n\tpublic TaskExecutorAutoConfiguration(TaskProperties properties,\n\t\t\tObjectProvider<TaskExecutorCustomizer> taskExecutorCustomizers,\n\t\t\tObjectProvider<TaskDecorator> taskDecorator) {\n\t\tthis.properties = properties;\n\t\tthis.taskExecutorCustomizers = taskExecutorCustomizers;\n\t\tthis.taskDecorator = taskDecorator;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic TaskExecutorBuilder taskExecutorBuilder() {\n\t\tTaskExecutorBuilder builder = new TaskExecutorBuilder();\n\t\tTaskProperties.Pool pool = this.properties.getPool();\n\t\tbuilder = builder.queueCapacity(pool.getQueueCapacity())\n\t\t\t\t.corePoolSize(pool.getCoreSize()).maxPoolSize(pool.getMaxSize())\n\t\t\t\t.allowCoreThreadTimeOut(pool.isAllowCoreThreadTimeout())\n\t\t\t\t.keepAlive(pool.getKeepAlive());\n\t\tbuilder = builder.threadNamePrefix(this.properties.getThreadNamePrefix());\n\t\tbuilder = builder.customizers(\n\t\t\t\tthis.taskExecutorCustomizers.stream().collect(Collectors.toList()));\n\t\tTaskDecorator taskDecorator = this.taskDecorator.getIfUnique();\n\t\tif (taskDecorator != null) {\n\t\t\tbuilder = builder.taskDecorator(taskDecorator);\n\t\t}\n\t\treturn builder;\n\t}\n\n\t@Bean(name = APPLICATION_TASK_EXECUTOR_BEAN_NAME)\n\t@ConditionalOnMissingBean(Executor.class)\n\tpublic ThreadPoolTaskExecutor applicationTaskExecutor(TaskExecutorBuilder builder) {\n\t\treturn builder.build();\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
