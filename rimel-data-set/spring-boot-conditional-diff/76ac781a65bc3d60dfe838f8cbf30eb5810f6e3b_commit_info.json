{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/InfinispanCacheConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2012-2015 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.cache;\n+\n+import org.infinispan.manager.DefaultCacheManager;\n+import org.infinispan.spring.provider.SpringEmbeddedCacheManager;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.cache.CacheManager;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Conditional;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.io.Resource;\n+import org.springframework.util.CollectionUtils;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/**\n+ * Infinispan cache configuration.\n+ *\n+ * @author Eddú Meléndez\n+ * @since 1.3.0\n+ */\n+@Configuration\n+@ConditionalOnClass(SpringEmbeddedCacheManager.class)\n+@ConditionalOnMissingBean(CacheManager.class)\n+@Conditional(CacheCondition.class)\n+public class InfinispanCacheConfiguration {\n+\n+\t@Autowired\n+\tprivate CacheProperties cacheProperties;\n+\n+\t@Bean\n+\tpublic CacheManager cacheManager() throws IOException {\n+\t\tDefaultCacheManager defaultCacheManager = createCacheManager();\n+\t\tList<String> cacheNames = this.cacheProperties.getCacheNames();\n+\t\tif (!CollectionUtils.isEmpty(cacheNames)) {\n+\t\t\tfor (String cacheName : cacheNames) {\n+\t\t\t\tdefaultCacheManager.startCache(cacheName);\n+\t\t\t}\n+\t\t}\n+\t\treturn new SpringEmbeddedCacheManager(defaultCacheManager);\n+\t}\n+\n+\tprivate DefaultCacheManager createCacheManager() throws IOException {\n+\t\tResource location = this.cacheProperties.resolveConfigLocation();\n+\t\tif (location != null) {\n+\t\t\treturn new DefaultCacheManager(this.cacheProperties.getConfig().getInputStream());\n+\t\t}\n+\t\treturn new DefaultCacheManager();\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.cache;\n\nimport org.infinispan.manager.DefaultCacheManager;\nimport org.infinispan.spring.provider.SpringEmbeddedCacheManager;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.cache.CacheManager;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.Resource;\nimport org.springframework.util.CollectionUtils;\n\nimport java.io.IOException;\nimport java.util.List;\n\n/**\n * Infinispan cache configuration.\n *\n * @author Eddú Meléndez\n * @since 1.3.0\n */\n@Configuration\n@ConditionalOnClass(SpringEmbeddedCacheManager.class)\n@ConditionalOnMissingBean(CacheManager.class)\n@Conditional(CacheCondition.class)\npublic class InfinispanCacheConfiguration {\n\n\t@Autowired\n\tprivate CacheProperties cacheProperties;\n\n\t@Bean\n\tpublic CacheManager cacheManager() throws IOException {\n\t\tDefaultCacheManager defaultCacheManager = createCacheManager();\n\t\tList<String> cacheNames = this.cacheProperties.getCacheNames();\n\t\tif (!CollectionUtils.isEmpty(cacheNames)) {\n\t\t\tfor (String cacheName : cacheNames) {\n\t\t\t\tdefaultCacheManager.startCache(cacheName);\n\t\t\t}\n\t\t}\n\t\treturn new SpringEmbeddedCacheManager(defaultCacheManager);\n\t}\n\n\tprivate DefaultCacheManager createCacheManager() throws IOException {\n\t\tResource location = this.cacheProperties.resolveConfigLocation();\n\t\tif (location != null) {\n\t\t\treturn new DefaultCacheManager(this.cacheProperties.getConfig().getInputStream());\n\t\t}\n\t\treturn new DefaultCacheManager();\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
