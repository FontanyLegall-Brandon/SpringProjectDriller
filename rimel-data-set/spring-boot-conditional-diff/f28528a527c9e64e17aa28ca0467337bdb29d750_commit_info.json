{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/jpa/JpaRepositoriesAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/jpa/JpaRepositoriesAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -18,15 +18,22 @@ package org.springframework.boot.autoconfigure.data.jpa;\n \n import javax.sql.DataSource;\n \n+import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.orm.jpa.EntityManagerFactoryBuilderCustomizer;\n import org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;\n+import org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Import;\n+import org.springframework.core.task.AsyncTaskExecutor;\n import org.springframework.data.jpa.repository.JpaRepository;\n import org.springframework.data.jpa.repository.config.EnableJpaRepositories;\n import org.springframework.data.jpa.repository.config.JpaRepositoryConfigExtension;\n@@ -58,7 +65,33 @@ import org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean;\n \t\tJpaRepositoryConfigExtension.class })\n @ConditionalOnProperty(prefix = "spring.data.jpa.repositories", name = "enabled", havingValue = "true", matchIfMissing = true)\n @Import(JpaRepositoriesAutoConfigureRegistrar.class)\n-@AutoConfigureAfter(HibernateJpaAutoConfiguration.class)\n+@AutoConfigureAfter({ HibernateJpaAutoConfiguration.class,\n+\t\tTaskExecutionAutoConfiguration.class })\n public class JpaRepositoriesAutoConfiguration {\n \n+\t@Bean\n+\t@Conditional(BootstrapExecutorCondition.class)\n+\tpublic EntityManagerFactoryBuilderCustomizer entityManagerFactoryBoostrapExecutorCustomizer(\n+\t\t\tObjectProvider<AsyncTaskExecutor> taskExecutor) {\n+\t\treturn (builder) -> builder.setBootstrapExecutor(taskExecutor.getIfAvailable());\n+\t}\n+\n+\tprivate static final class BootstrapExecutorCondition extends AnyNestedCondition {\n+\n+\t\tBootstrapExecutorCondition() {\n+\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n+\t\t}\n+\n+\t\t@ConditionalOnProperty(prefix = "spring.data.jpa.repositories", name = "bootstrap-mode", havingValue = "deferred", matchIfMissing = false)\n+\t\tstatic class DeferredBootstrapMode {\n+\n+\t\t}\n+\n+\t\t@ConditionalOnProperty(prefix = "spring.data.jpa.repositories", name = "bootstrap-mode", havingValue = "lazy", matchIfMissing = false)\n+\t\tstatic class LazyBootstrapMode {\n+\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.jpa;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.orm.jpa.EntityManagerFactoryBuilderCustomizer;\nimport org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;\nimport org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.core.task.AsyncTaskExecutor;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.config.EnableJpaRepositories;\nimport org.springframework.data.jpa.repository.config.JpaRepositoryConfigExtension;\nimport org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s JPA Repositories.\n * <p>\n * Activates when there is a bean of type {@link javax.sql.DataSource} configured in the\n * context, the Spring Data JPA\n * {@link org.springframework.data.jpa.repository.JpaRepository} type is on the classpath,\n * and there is no other, existing\n * {@link org.springframework.data.jpa.repository.JpaRepository} configured.\n * <p>\n * Once in effect, the auto-configuration is the equivalent of enabling JPA repositories\n * using the {@link org.springframework.data.jpa.repository.config.EnableJpaRepositories}\n * annotation.\n * <p>\n * This configuration class will activate <em>after</em> the Hibernate auto-configuration.\n *\n * @author Phillip Webb\n * @author Josh Long\n * @see EnableJpaRepositories\n */\n@Configuration\n@ConditionalOnBean(DataSource.class)\n@ConditionalOnClass(JpaRepository.class)\n@ConditionalOnMissingBean({ JpaRepositoryFactoryBean.class,\n\t\tJpaRepositoryConfigExtension.class })\n@ConditionalOnProperty(prefix = "spring.data.jpa.repositories", name = "enabled", havingValue = "true", matchIfMissing = true)\n@Import(JpaRepositoriesAutoConfigureRegistrar.class)\n@AutoConfigureAfter({ HibernateJpaAutoConfiguration.class,\n\t\tTaskExecutionAutoConfiguration.class })\npublic class JpaRepositoriesAutoConfiguration {\n\n\t@Bean\n\t@Conditional(BootstrapExecutorCondition.class)\n\tpublic EntityManagerFactoryBuilderCustomizer entityManagerFactoryBoostrapExecutorCustomizer(\n\t\t\tObjectProvider<AsyncTaskExecutor> taskExecutor) {\n\t\treturn (builder) -> builder.setBootstrapExecutor(taskExecutor.getIfAvailable());\n\t}\n\n\tprivate static final class BootstrapExecutorCondition extends AnyNestedCondition {\n\n\t\tBootstrapExecutorCondition() {\n\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n\t\t}\n\n\t\t@ConditionalOnProperty(prefix = "spring.data.jpa.repositories", name = "bootstrap-mode", havingValue = "deferred", matchIfMissing = false)\n\t\tstatic class DeferredBootstrapMode {\n\n\t\t}\n\n\t\t@ConditionalOnProperty(prefix = "spring.data.jpa.repositories", name = "bootstrap-mode", havingValue = "lazy", matchIfMissing = false)\n\t\tstatic class LazyBootstrapMode {\n\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.jpa;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.config.EnableJpaRepositories;\nimport org.springframework.data.jpa.repository.config.JpaRepositoryConfigExtension;\nimport org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s JPA Repositories.\n * <p>\n * Activates when there is a bean of type {@link javax.sql.DataSource} configured in the\n * context, the Spring Data JPA\n * {@link org.springframework.data.jpa.repository.JpaRepository} type is on the classpath,\n * and there is no other, existing\n * {@link org.springframework.data.jpa.repository.JpaRepository} configured.\n * <p>\n * Once in effect, the auto-configuration is the equivalent of enabling JPA repositories\n * using the {@link org.springframework.data.jpa.repository.config.EnableJpaRepositories}\n * annotation.\n * <p>\n * This configuration class will activate <em>after</em> the Hibernate auto-configuration.\n *\n * @author Phillip Webb\n * @author Josh Long\n * @see EnableJpaRepositories\n */\n@Configuration\n@ConditionalOnBean(DataSource.class)\n@ConditionalOnClass(JpaRepository.class)\n@ConditionalOnMissingBean({ JpaRepositoryFactoryBean.class,\n\t\tJpaRepositoryConfigExtension.class })\n@ConditionalOnProperty(prefix = "spring.data.jpa.repositories", name = "enabled", havingValue = "true", matchIfMissing = true)\n@Import(JpaRepositoriesAutoConfigureRegistrar.class)\n@AutoConfigureAfter(HibernateJpaAutoConfiguration.class)\npublic class JpaRepositoriesAutoConfiguration {\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
