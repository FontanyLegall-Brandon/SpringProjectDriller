@@ -0,0 +1,92 @@
+
+
+package org.springframework.boot.actuate.metrics.jdbc;
+
+import javax.sql.DataSource;
+
+import com.zaxxer.hikari.HikariDataSource;
+import org.apache.commons.dbcp.BasicDataSource;
+
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+
+@Configuration
+public class DataSourceMetadataProvidersConfiguration {
+
+	@Configuration
+	@ConditionalOnClass(org.apache.tomcat.jdbc.pool.DataSource.class)
+	static class TomcatDataSourceProviderConfiguration {
+
+		@Bean
+		public DataSourceMetadataProvider tomcatDataSourceProvider() {
+			return new DataSourceMetadataProvider() {
+				@Override
+				public DataSourceMetadata getDataSourceMetadata(DataSource dataSource) {
+					if (dataSource instanceof org.apache.tomcat.jdbc.pool.DataSource) {
+						return new TomcatDataSourceMetadata((org.apache.tomcat.jdbc.pool.DataSource) dataSource);
+					}
+					return null;
+				}
+			};
+		}
+	}
+
+	@Configuration
+	@ConditionalOnClass(HikariDataSource.class)
+	static class HikariDataSourceProviderConfiguration {
+
+		@Bean
+		public DataSourceMetadataProvider hikariDataSourceProvider() {
+			return new DataSourceMetadataProvider() {
+				@Override
+				public DataSourceMetadata getDataSourceMetadata(DataSource dataSource) {
+					if (dataSource instanceof HikariDataSource) {
+						return new HikariDataSourceMetadata((HikariDataSource) dataSource);
+					}
+					return null;
+				}
+			};
+		}
+	}
+
+	@Configuration
+	@ConditionalOnClass(BasicDataSource.class)
+	static class CommonsDbcpDataSourceProviderConfiguration {
+
+		@Bean
+		public DataSourceMetadataProvider commonsDbcpDataSourceProvider() {
+			return new DataSourceMetadataProvider() {
+				@Override
+				public DataSourceMetadata getDataSourceMetadata(DataSource dataSource) {
+					if (dataSource instanceof BasicDataSource) {
+						return new CommonsDbcpDataSourceMetadata((BasicDataSource) dataSource);
+					}
+					return null;
+				}
+			};
+		}
+	}
+
+}

