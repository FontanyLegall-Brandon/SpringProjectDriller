{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/EhCacheCacheConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/EhCacheCacheConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,6 +16,8 @@\n \n package org.springframework.boot.autoconfigure.cache;\n \n+import net.sf.ehcache.Cache;\n+\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n@@ -35,7 +37,7 @@ import org.springframework.core.io.Resource;\n  * @since 1.3.0\n  */\n @Configuration\n-@ConditionalOnClass(EhCacheCacheManager.class)\n+@ConditionalOnClass({Cache.class, EhCacheCacheManager.class})\n @ConditionalOnMissingBean(CacheManager.class)\n @Conditional({ CacheCondition.class,\n \t\tEhCacheCacheConfiguration.ConfigAvailableCondition.class })\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.cache;\n\nimport net.sf.ehcache.Cache;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.cache.CacheManager;\nimport org.springframework.cache.ehcache.EhCacheCacheManager;\nimport org.springframework.cache.ehcache.EhCacheManagerUtils;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.Resource;\n\n/**\n * EhCache cache configuration. Only kick in if a configuration file location is set or if\n * a default configuration file exists.\n *\n * @author Eddú Meléndez\n * @since 1.3.0\n */\n@Configuration\n@ConditionalOnClass({Cache.class, EhCacheCacheManager.class})\n@ConditionalOnMissingBean(CacheManager.class)\n@Conditional({ CacheCondition.class,\n\t\tEhCacheCacheConfiguration.ConfigAvailableCondition.class })\nclass EhCacheCacheConfiguration {\n\n\t@Autowired\n\tprivate CacheProperties properties;\n\n\t@Bean\n\tpublic EhCacheCacheManager cacheManager() {\n\t\tResource location = this.properties.resolveConfigLocation();\n\t\tif (location != null) {\n\t\t\treturn new EhCacheCacheManager(\n\t\t\t\t\tEhCacheManagerUtils.buildCacheManager(location));\n\t\t}\n\t\treturn new EhCacheCacheManager(EhCacheManagerUtils.buildCacheManager());\n\t}\n\n\t/**\n\t * Determine if the EhCache configuration is available. This either kick in if a\n\t * default configuration has been found or if property referring to the file to use\n\t * has been set.\n\t */\n\tstatic class ConfigAvailableCondition extends CacheConfigFileCondition {\n\n\t\tpublic ConfigAvailableCondition() {\n\t\t\tsuper("EhCache", "classpath:/ehcache.xml");\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.cache;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.cache.CacheManager;\nimport org.springframework.cache.ehcache.EhCacheCacheManager;\nimport org.springframework.cache.ehcache.EhCacheManagerUtils;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.Resource;\n\n/**\n * EhCache cache configuration. Only kick in if a configuration file location is set or if\n * a default configuration file exists.\n *\n * @author Eddú Meléndez\n * @since 1.3.0\n */\n@Configuration\n@ConditionalOnClass(EhCacheCacheManager.class)\n@ConditionalOnMissingBean(CacheManager.class)\n@Conditional({ CacheCondition.class,\n\t\tEhCacheCacheConfiguration.ConfigAvailableCondition.class })\nclass EhCacheCacheConfiguration {\n\n\t@Autowired\n\tprivate CacheProperties properties;\n\n\t@Bean\n\tpublic EhCacheCacheManager cacheManager() {\n\t\tResource location = this.properties.resolveConfigLocation();\n\t\tif (location != null) {\n\t\t\treturn new EhCacheCacheManager(\n\t\t\t\t\tEhCacheManagerUtils.buildCacheManager(location));\n\t\t}\n\t\treturn new EhCacheCacheManager(EhCacheManagerUtils.buildCacheManager());\n\t}\n\n\t/**\n\t * Determine if the EhCache configuration is available. This either kick in if a\n\t * default configuration has been found or if property referring to the file to use\n\t * has been set.\n\t */\n\tstatic class ConfigAvailableCondition extends CacheConfigFileCondition {\n\n\t\tpublic ConfigAvailableCondition() {\n\t\t\tsuper("EhCache", "classpath:/ehcache.xml");\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
