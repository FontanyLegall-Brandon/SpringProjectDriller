@@ -0,0 +1,58 @@
+
+
+package org.springframework.boot.devtools.autoconfigure;
+
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.security.SecurityProperties;
+import org.springframework.boot.autoconfigure.web.ServerProperties;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.core.annotation.Order;
+import org.springframework.security.config.annotation.web.builders.HttpSecurity;
+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
+import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
+
+
+@ConditionalOnClass(WebSecurityConfigurerAdapter.class)
+@Configuration
+class RemoteDevtoolsSecurityConfiguration {
+
+	@Order(SecurityProperties.BASIC_AUTH_ORDER - 1)
+	@Configuration
+	static class SecurityConfiguration extends WebSecurityConfigurerAdapter {
+
+		private final String url;
+
+		SecurityConfiguration(DevToolsProperties devToolsProperties, ServerProperties serverProperties) {
+			ServerProperties.Servlet servlet = serverProperties.getServlet();
+			String servletContextPath = (servlet.getContextPath() != null) ? servlet.getContextPath() : ;
+			this.url = servletContextPath + devToolsProperties.getRemote().getContextPath() + ;
+		}
+
+		@Override
+		protected void configure(HttpSecurity http) throws Exception {
+			http.requestMatcher(new AntPathRequestMatcher(this.url)).authorizeRequests().anyRequest().anonymous().and()
+					.csrf().disable();
+		}
+
+	}
+
+}

