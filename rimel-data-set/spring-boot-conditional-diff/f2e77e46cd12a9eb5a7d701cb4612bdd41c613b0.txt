@@ -16,12 +16,19 @@
 
 package org.springframework.boot.test.autoconfigure.web.reactive;
 
+import java.util.Collection;
+
+import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration;
+import org.springframework.boot.web.codec.CodecCustomizer;
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.test.web.reactive.server.WebTestClient;
+import org.springframework.util.CollectionUtils;
+import org.springframework.web.reactive.function.client.ExchangeStrategies;
 import org.springframework.web.reactive.function.client.WebClient;
 
 
 @Configuration
-@ConditionalOnClass({ WebClient.class, WebTestClient.class })
+@ConditionalOnClass({WebClient.class, WebTestClient.class})
+@AutoConfigureAfter(CodecsAutoConfiguration.class)
 public class WebTestClientAutoConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean
 	public WebTestClient webTestClient(ApplicationContext applicationContext) {
-		return WebTestClient.bindToApplicationContext(applicationContext).build();
+
+		WebTestClient.Builder clientBuilder = WebTestClient
+				.bindToApplicationContext(applicationContext).configureClient();
+		customizeWebTestClientCodecs(clientBuilder, applicationContext);
+		return clientBuilder.build();
+	}
+
+	private void customizeWebTestClientCodecs(WebTestClient.Builder clientBuilder,
+			ApplicationContext applicationContext) {
+
+		Collection<CodecCustomizer> codecCustomizers = applicationContext
+				.getBeansOfType(CodecCustomizer.class).values();
+		if (!CollectionUtils.isEmpty(codecCustomizers)) {
+			clientBuilder.exchangeStrategies(ExchangeStrategies.builder()
+					.codecs(codecs -> {
+						codecCustomizers.forEach(codecCustomizer -> codecCustomizer.customize(codecs));
+					})
+					.build());
+		}
 	}
 
 }

