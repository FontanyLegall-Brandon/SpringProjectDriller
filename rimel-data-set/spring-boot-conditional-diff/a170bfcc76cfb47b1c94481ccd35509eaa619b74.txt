@@ -0,0 +1,66 @@
+
+
+package org.springframework.boot.actuate.autoconfigure.metrics;
+
+import io.micrometer.core.instrument.MeterRegistry;
+import io.micrometer.core.instrument.binder.system.FileDescriptorMetrics;
+import io.micrometer.core.instrument.binder.system.ProcessorMetrics;
+import io.micrometer.core.instrument.binder.system.UptimeMetrics;
+
+import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+
+@Configuration
+@AutoConfigureAfter(MetricsAutoConfiguration.class)
+@ConditionalOnClass(MeterRegistry.class)
+@ConditionalOnBean(MeterRegistry.class)
+public class SystemMetricsAutoConfiguration {
+
+	@Bean
+	@ConditionalOnProperty(value = , matchIfMissing = true)
+	@ConditionalOnMissingBean
+	public UptimeMetrics uptimeMetrics() {
+		return new UptimeMetrics();
+	}
+
+	@Bean
+	@ConditionalOnProperty(value = , matchIfMissing = true)
+	@ConditionalOnMissingBean
+	public ProcessorMetrics processorMetrics() {
+		return new ProcessorMetrics();
+	}
+
+	@Bean
+	@ConditionalOnProperty(name = , matchIfMissing = true)
+	@ConditionalOnMissingBean
+	public FileDescriptorMetrics fileDescriptorMetrics() {
+		return new FileDescriptorMetrics();
+	}
+
+}

