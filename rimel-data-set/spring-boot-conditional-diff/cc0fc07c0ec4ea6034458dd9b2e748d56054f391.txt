@@ -88,16 +88,17 @@ import org.springframework.util.StringUtils;
  * The default shell authentication method uses a username and password combination. If no
  * configuration is provided the default username is  and the password will be
  * printed to console during application startup. Those default values can be overridden
- * by using {@code shell.auth.simple.username} and {@code shell.auth.simple.password}.
+ * by using {@code management.shell.auth.simple.username} and
+ * {@code management.shell.auth.simple.password}.
  * <p>
  * If a Spring Security {@link AuthenticationManager} is detected, this configuration will
  * create a {@link CRaSHPlugin} to forward shell authentication requests to Spring
- * Security. This authentication method will get enabled if {@code shell.auth} is set to
- * {@code spring} or if no explicit {@code shell.auth} is provided and a
- * {@link AuthenticationManager} is available. In the latter case shell access will be
- * restricted to users having roles that match those configured in
+ * Security. This authentication method will get enabled if {@code management.shell.auth.type}
+ * is set to {@code spring} or if no explicit {@code management.shell.auth} is provided
+ * and a {@link AuthenticationManager} is available. In the latter case shell access will
+ * be restricted to users having roles that match those configured in
  * {@link ManagementServerProperties}. Required roles can be overridden by
- * {@code shell.auth.spring.roles}.
+ * {@code management.shell.auth.spring.roles}.
  * <p>
  * To add customizations to the shell simply define beans of type {@link CRaSHPlugin} in
  * the application context. Those beans will get auto detected during startup and
@@ -109,7 +110,7 @@ import org.springframework.util.StringUtils;
  * <a href=>crashub.org</a>. By default Boot will search for
  * commands using the following classpath scanning pattern {@code classpath*:/commands
 	@Configuration
-	@ConditionalOnProperty(prefix = , name = , havingValue = , matchIfMissing = true)
+	@ConditionalOnProperty(prefix = AUTH_PREFIX, name = , havingValue = , matchIfMissing = true)
 	@ConditionalOnBean(AuthenticationManager.class)
 	public static class AuthenticationManagerAdapterConfiguration {
 
@@ -185,12 +188,12 @@ public class CrshAutoConfiguration {
 		@Bean
 		@ConditionalOnMissingBean(CrshShellAuthenticationProperties.class)
 		public SpringAuthenticationProperties springAuthenticationProperties() {
-			
-			
+			
+			
 			
-			
-			
-			
+			
+			
+			
 			SpringAuthenticationProperties authenticationProperties = new SpringAuthenticationProperties();
 			if (this.management != null) {
 				authenticationProperties.setRoles(

