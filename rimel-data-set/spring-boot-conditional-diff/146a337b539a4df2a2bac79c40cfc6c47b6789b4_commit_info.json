{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoDataAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoDataAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -21,6 +21,7 @@ import java.net.UnknownHostException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n@@ -48,6 +49,7 @@ import com.mongodb.Mongo;\n  */\n @Configuration\n @ConditionalOnClass({ Mongo.class, MongoTemplate.class })\n+@ConditionalOnBean(MongoProperties.class)\n @AutoConfigureAfter(MongoAutoConfiguration.class)\n public class MongoDataAutoConfiguration {\n \n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.mongo;\n\nimport java.net.UnknownHostException;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.mongodb.MongoDbFactory;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.data.mongodb.core.SimpleMongoDbFactory;\nimport org.springframework.data.mongodb.gridfs.GridFsTemplate;\nimport org.springframework.util.StringUtils;\n\nimport com.mongodb.Mongo;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s mongo support.\n * <p>\n * Registers a {@link MongoTemplate} and {@link GridFsTemplate} beans if no other beans of\n * the same type are configured.\n * <P>\n * Honors the {@literal spring.data.mongodb.database} property if set, otherwise connects\n * to the {@literal test} database.\n * \n * @author Dave Syer\n * @author Oliver Gierke\n * @author Josh Long\n */\n@Configuration\n@ConditionalOnClass({ Mongo.class, MongoTemplate.class })\n@ConditionalOnBean(MongoProperties.class)\n@AutoConfigureAfter(MongoAutoConfiguration.class)\npublic class MongoDataAutoConfiguration {\n\n\t@Autowired\n\tprivate MongoProperties properties;\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic MongoDbFactory mongoDbFactory(Mongo mongo) throws Exception {\n\t\tString db = this.properties.getMongoClientDatabase();\n\t\treturn new SimpleMongoDbFactory(mongo, db);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic MongoTemplate mongoTemplate(MongoDbFactory mongoDbFactory)\n\t\t\tthrows UnknownHostException {\n\t\treturn new MongoTemplate(mongoDbFactory);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic GridFsTemplate gridFsTemplate(Mongo mongo, MongoTemplate mongoTemplate) {\n\t\tString db = StringUtils.hasText(this.properties.getGridFsDatabase()) ? this.properties\n\t\t\t\t.getGridFsDatabase() : this.properties.getMongoClientDatabase();\n\t\treturn new GridFsTemplate(new SimpleMongoDbFactory(mongo, db),\n\t\t\t\tmongoTemplate.getConverter());\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.mongo;\n\nimport java.net.UnknownHostException;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.mongodb.MongoDbFactory;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.data.mongodb.core.SimpleMongoDbFactory;\nimport org.springframework.data.mongodb.gridfs.GridFsTemplate;\nimport org.springframework.util.StringUtils;\n\nimport com.mongodb.Mongo;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s mongo support.\n * <p>\n * Registers a {@link MongoTemplate} and {@link GridFsTemplate} beans if no other beans of\n * the same type are configured.\n * <P>\n * Honors the {@literal spring.data.mongodb.database} property if set, otherwise connects\n * to the {@literal test} database.\n * \n * @author Dave Syer\n * @author Oliver Gierke\n * @author Josh Long\n */\n@Configuration\n@ConditionalOnClass({ Mongo.class, MongoTemplate.class })\n@AutoConfigureAfter(MongoAutoConfiguration.class)\npublic class MongoDataAutoConfiguration {\n\n\t@Autowired\n\tprivate MongoProperties properties;\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic MongoDbFactory mongoDbFactory(Mongo mongo) throws Exception {\n\t\tString db = this.properties.getMongoClientDatabase();\n\t\treturn new SimpleMongoDbFactory(mongo, db);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic MongoTemplate mongoTemplate(MongoDbFactory mongoDbFactory)\n\t\t\tthrows UnknownHostException {\n\t\treturn new MongoTemplate(mongoDbFactory);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic GridFsTemplate gridFsTemplate(Mongo mongo, MongoTemplate mongoTemplate) {\n\t\tString db = StringUtils.hasText(this.properties.getGridFsDatabase()) ? this.properties\n\t\t\t\t.getGridFsDatabase() : this.properties.getMongoClientDatabase();\n\t\treturn new GridFsTemplate(new SimpleMongoDbFactory(mongo, db),\n\t\t\t\tmongoTemplate.getConverter());\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
