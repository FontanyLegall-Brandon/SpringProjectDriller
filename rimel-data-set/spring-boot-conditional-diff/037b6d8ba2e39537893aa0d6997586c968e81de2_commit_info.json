{'_old_path': None, '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/signalfx/SignalFxMetricsExportAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2012-2018 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.autoconfigure.metrics.export.signalfx;\n+\n+import io.micrometer.core.instrument.Clock;\n+import io.micrometer.signalfx.SignalFxConfig;\n+import io.micrometer.signalfx.SignalFxMeterRegistry;\n+\n+import org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration;\n+import org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for exporting metrics to SignalFX.\n+ *\n+ * @author Jon Schneider\n+ * @author Andy Wilkinson\n+ * @since 2.0.0\n+ */\n+@Configuration\n+@AutoConfigureBefore(SimpleMetricsExportAutoConfiguration.class)\n+@AutoConfigureAfter(MetricsAutoConfiguration.class)\n+@ConditionalOnBean(Clock.class)\n+@ConditionalOnClass(SignalFxMeterRegistry.class)\n+@EnableConfigurationProperties(SignalFxProperties.class)\n+public class SignalFxMetricsExportAutoConfiguration {\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic SignalFxConfig signalfxConfig(SignalFxProperties props) {\n+\t\treturn new SignalFxPropertiesConfigAdapter(props);\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic SignalFxMeterRegistry signalFxMeterRegistry(SignalFxConfig config,\n+\t\t\tClock clock) {\n+\t\treturn new SignalFxMeterRegistry(config, clock);\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic Clock micrometerClock() {\n+\t\treturn Clock.SYSTEM;\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics.export.signalfx;\n\nimport io.micrometer.core.instrument.Clock;\nimport io.micrometer.signalfx.SignalFxConfig;\nimport io.micrometer.signalfx.SignalFxMeterRegistry;\n\nimport org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for exporting metrics to SignalFX.\n *\n * @author Jon Schneider\n * @author Andy Wilkinson\n * @since 2.0.0\n */\n@Configuration\n@AutoConfigureBefore(SimpleMetricsExportAutoConfiguration.class)\n@AutoConfigureAfter(MetricsAutoConfiguration.class)\n@ConditionalOnBean(Clock.class)\n@ConditionalOnClass(SignalFxMeterRegistry.class)\n@EnableConfigurationProperties(SignalFxProperties.class)\npublic class SignalFxMetricsExportAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic SignalFxConfig signalfxConfig(SignalFxProperties props) {\n\t\treturn new SignalFxPropertiesConfigAdapter(props);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic SignalFxMeterRegistry signalFxMeterRegistry(SignalFxConfig config,\n\t\t\tClock clock) {\n\t\treturn new SignalFxMeterRegistry(config, clock);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic Clock micrometerClock() {\n\t\treturn Clock.SYSTEM;\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
