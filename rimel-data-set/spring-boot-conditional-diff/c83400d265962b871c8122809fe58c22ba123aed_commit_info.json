{'_old_path': PosixPath('spring-boot/src/test/java/org/springframework/boot/context/properties/EnableConfigurationPropertiesTests.java'), '_new_path': PosixPath('spring-boot/src/test/java/org/springframework/boot/context/properties/EnableConfigurationPropertiesTests.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -23,11 +23,8 @@ import java.util.List;\n import javax.annotation.PostConstruct;\n \n import org.junit.Test;\n-import org.springframework.beans.factory.BeanCreationException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.TestUtils;\n-import org.springframework.boot.context.condition.AssertMissingBean;\n-import org.springframework.boot.context.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n@@ -90,30 +87,9 @@ public class EnableConfigurationPropertiesTests {\n \t\tassertEquals("bar", this.context.getBean(TestProperties.class).getName());\n \t}\n \n-\t@Test(expected = BeanCreationException.class)\n-\tpublic void testPropertiesBindingWithDefaultsInBeanMethodReverseOrder() {\n-\t\tthis.context.register(TestBeanConfiguration.class, DefaultConfiguration.class);\n-\t\tthis.context.refresh();\n-\t\tString[] beanNames = this.context.getBeanNamesForType(TestProperties.class);\n-\t\tassertEquals("Wrong beans: " + Arrays.asList(beanNames), 1, beanNames.length);\n-\t\tassertEquals("bar", this.context.getBean(TestProperties.class).getName());\n-\t}\n-\n \t@Test\n \tpublic void testPropertiesBindingWithDefaultsInBeanMethod() {\n-\t\tthis.context.register(DefaultConfiguration.class, TestBeanConfiguration.class);\n-\t\tthis.context.refresh();\n-\t\tString[] beanNames = this.context.getBeanNamesForType(TestProperties.class);\n-\t\tassertEquals("Wrong beans: " + Arrays.asList(beanNames), 1, beanNames.length);\n-\t\tassertEquals("bar", this.context.getBean(TestProperties.class).getName());\n-\t}\n-\n-\t// Maybe we could relax the condition that causes this exception but Spring makes it\n-\t// difficult because it is impossible for DefaultConfiguration to override a bean\n-\t// definition created with a direct registration (as opposed to a @Bean)\n-\t@Test(expected = BeanCreationException.class)\n-\tpublic void testPropertiesBindingWithDefaults() {\n-\t\tthis.context.register(TestConfiguration.class, DefaultConfiguration.class);\n+\t\tthis.context.register(DefaultConfiguration.class);\n \t\tthis.context.refresh();\n \t\tString[] beanNames = this.context.getBeanNamesForType(TestProperties.class);\n \t\tassertEquals("Wrong beans: " + Arrays.asList(beanNames), 1, beanNames.length);\n@@ -204,20 +180,9 @@ public class EnableConfigurationPropertiesTests {\n \tprotected static class TestConfiguration {\n \t}\n \n-\t@Configuration\n-\t@EnableConfigurationProperties\n-\tprotected static class TestBeanConfiguration {\n-\t\t@ConditionalOnMissingBean(TestProperties.class)\n-\t\t@Bean(name = "org.springframework.boot.context.annotation.EnableConfigurationPropertiesTests$TestProperties")\n-\t\tpublic TestProperties testProperties() {\n-\t\t\treturn new TestProperties();\n-\t\t}\n-\t}\n-\n \t@Configuration\n \tprotected static class DefaultConfiguration {\n \t\t@Bean\n-\t\t@AssertMissingBean(TestProperties.class)\n \t\tpublic TestProperties testProperties() {\n \t\t\tTestProperties test = new TestProperties();\n \t\t\ttest.setName("bar");\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.context.properties;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport javax.annotation.PostConstruct;\n\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.TestUtils;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.ImportResource;\nimport org.springframework.stereotype.Component;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\n\n/**\n * Tests for {@link EnableConfigurationProperties}.\n * \n * @author Dave Syer\n */\npublic class EnableConfigurationPropertiesTests {\n\n\tprivate AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n\n\t@Test\n\tpublic void testBasicPropertiesBinding() {\n\t\tthis.context.register(TestConfiguration.class);\n\t\tTestUtils.addEnviroment(this.context, "name:foo");\n\t\tthis.context.refresh();\n\t\tassertEquals(1, this.context.getBeanNamesForType(TestProperties.class).length);\n\t\tassertEquals("foo", this.context.getBean(TestProperties.class).getName());\n\t}\n\n\t@Test\n\tpublic void testArrayPropertiesBinding() {\n\t\tthis.context.register(TestConfiguration.class);\n\t\tTestUtils.addEnviroment(this.context, "name:foo", "array:1,2,3");\n\t\tthis.context.refresh();\n\t\tassertEquals(1, this.context.getBeanNamesForType(TestProperties.class).length);\n\t\tassertEquals(3, this.context.getBean(TestProperties.class).getArray().length);\n\t}\n\n\t@Test\n\tpublic void testCollectionPropertiesBindingFromYamlArray() {\n\t\tthis.context.register(TestConfiguration.class);\n\t\tTestUtils.addEnviroment(this.context, "name:foo", "list[0]:1", "list[1]:2");\n\t\tthis.context.refresh();\n\t\tassertEquals(2, this.context.getBean(TestProperties.class).getList().size());\n\t}\n\n\t@Test\n\tpublic void testPropertiesBindingWithoutAnnotation() {\n\t\tthis.context.register(MoreConfiguration.class);\n\t\tTestUtils.addEnviroment(this.context, "name:foo");\n\t\tthis.context.refresh();\n\t\tassertEquals(1, this.context.getBeanNamesForType(MoreProperties.class).length);\n\t\tassertEquals("foo", this.context.getBean(MoreProperties.class).getName());\n\t}\n\n\t@Test\n\tpublic void testPropertiesBindingWithDefaultsInXml() {\n\t\tthis.context.register(TestConfiguration.class, DefaultXmlConfiguration.class);\n\t\tthis.context.refresh();\n\t\tString[] beanNames = this.context.getBeanNamesForType(TestProperties.class);\n\t\tassertEquals("Wrong beans: " + Arrays.asList(beanNames), 1, beanNames.length);\n\t\tassertEquals("bar", this.context.getBean(TestProperties.class).getName());\n\t}\n\n\t@Test\n\tpublic void testPropertiesBindingWithDefaultsInBeanMethod() {\n\t\tthis.context.register(DefaultConfiguration.class);\n\t\tthis.context.refresh();\n\t\tString[] beanNames = this.context.getBeanNamesForType(TestProperties.class);\n\t\tassertEquals("Wrong beans: " + Arrays.asList(beanNames), 1, beanNames.length);\n\t\tassertEquals("bar", this.context.getBean(TestProperties.class).getName());\n\t}\n\n\t@Test\n\tpublic void testBindingDirectlyToFile() {\n\t\tthis.context.register(ResourceBindingProperties.class, TestConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertEquals(1,\n\t\t\t\tthis.context.getBeanNamesForType(ResourceBindingProperties.class).length);\n\t\tassertEquals("foo", this.context.getBean(ResourceBindingProperties.class)\n\t\t\t\t.getName());\n\t}\n\n\t@Test\n\tpublic void testBindingDirectlyToFileResolvedFromEnvironment() {\n\t\tTestUtils.addEnviroment(this.context, "binding.location:classpath:other.yml");\n\t\tthis.context.register(ResourceBindingProperties.class, TestConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertEquals(1,\n\t\t\t\tthis.context.getBeanNamesForType(ResourceBindingProperties.class).length);\n\t\tassertEquals("other", this.context.getBean(ResourceBindingProperties.class)\n\t\t\t\t.getName());\n\t}\n\n\t@Test\n\tpublic void testBindingDirectlyToFileWithDefaultsWhenProfileNotFound() {\n\t\tthis.context.register(ResourceBindingProperties.class, TestConfiguration.class);\n\t\tthis.context.getEnvironment().addActiveProfile("nonexistent");\n\t\tthis.context.refresh();\n\t\tassertEquals(1,\n\t\t\t\tthis.context.getBeanNamesForType(ResourceBindingProperties.class).length);\n\t\tassertEquals("foo", this.context.getBean(ResourceBindingProperties.class)\n\t\t\t\t.getName());\n\t}\n\n\t@Test\n\tpublic void testBindingDirectlyToFileWithExplicitSpringProfile() {\n\t\tthis.context.register(ResourceBindingProperties.class, TestConfiguration.class);\n\t\tthis.context.getEnvironment().addActiveProfile("super");\n\t\tthis.context.refresh();\n\t\tassertEquals(1,\n\t\t\t\tthis.context.getBeanNamesForType(ResourceBindingProperties.class).length);\n\t\tassertEquals("bar", this.context.getBean(ResourceBindingProperties.class)\n\t\t\t\t.getName());\n\t}\n\n\t@Test\n\tpublic void testBindingWithTwoBeans() {\n\t\tthis.context.register(MoreConfiguration.class, TestConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertEquals(1, this.context.getBeanNamesForType(TestProperties.class).length);\n\t\tassertEquals(1, this.context.getBeanNamesForType(MoreProperties.class).length);\n\t}\n\n\t@Test\n\tpublic void testBindingWithParentContext() {\n\t\tAnnotationConfigApplicationContext parent = new AnnotationConfigApplicationContext();\n\t\tparent.register(TestConfiguration.class);\n\t\tparent.refresh();\n\t\tTestUtils.addEnviroment(this.context, "name:foo");\n\t\tthis.context.setParent(parent);\n\t\tthis.context.register(TestConfiguration.class, TestConsumer.class);\n\t\tthis.context.refresh();\n\t\tassertEquals(1, this.context.getBeanNamesForType(TestProperties.class).length);\n\t\tassertEquals(1, parent.getBeanNamesForType(TestProperties.class).length);\n\t\tassertEquals("foo", this.context.getBean(TestConsumer.class).getName());\n\t}\n\n\t@Test\n\tpublic void testBindingOnlyParentContext() {\n\t\tAnnotationConfigApplicationContext parent = new AnnotationConfigApplicationContext();\n\t\tTestUtils.addEnviroment(parent, "name:foo");\n\t\tparent.register(TestConfiguration.class);\n\t\tparent.refresh();\n\t\tthis.context.setParent(parent);\n\t\tthis.context.register(TestConsumer.class);\n\t\tthis.context.refresh();\n\t\tassertEquals(0, this.context.getBeanNamesForType(TestProperties.class).length);\n\t\tassertEquals(1, parent.getBeanNamesForType(TestProperties.class).length);\n\t\tassertEquals("foo", this.context.getBean(TestConsumer.class).getName());\n\t}\n\n\t@Configuration\n\t@EnableConfigurationProperties(TestProperties.class)\n\tprotected static class TestConfiguration {\n\t}\n\n\t@Configuration\n\tprotected static class DefaultConfiguration {\n\t\t@Bean\n\t\tpublic TestProperties testProperties() {\n\t\t\tTestProperties test = new TestProperties();\n\t\t\ttest.setName("bar");\n\t\t\treturn test;\n\t\t}\n\t}\n\n\t@Configuration\n\t@ImportResource("org/springframework/boot/context/properties/testProperties.xml")\n\tprotected static class DefaultXmlConfiguration {\n\t}\n\n\t@Component\n\tprotected static class TestConsumer {\n\t\t@Autowired\n\t\tprivate TestProperties properties;\n\n\t\t@PostConstruct\n\t\tpublic void init() {\n\t\t\tassertNotNull(this.properties);\n\t\t}\n\n\t\tpublic String getName() {\n\t\t\treturn this.properties.getName();\n\t\t}\n\t}\n\n\t@Configuration\n\t@EnableConfigurationProperties(MoreProperties.class)\n\tprotected static class MoreConfiguration {\n\t}\n\n\t@ConfigurationProperties\n\tprotected static class TestProperties {\n\t\tprivate String name;\n\t\tprivate int[] array;\n\t\tprivate List<Integer> list = new ArrayList<Integer>();\n\n\t\tpublic String getName() {\n\t\t\treturn this.name;\n\t\t}\n\n\t\tpublic void setName(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\n\t\tpublic void setArray(int... values) {\n\t\t\tthis.array = values;\n\t\t}\n\n\t\tpublic int[] getArray() {\n\t\t\treturn this.array;\n\t\t}\n\n\t\tpublic List<Integer> getList() {\n\t\t\treturn this.list;\n\t\t}\n\t}\n\n\tprotected static class MoreProperties {\n\t\tprivate String name;\n\n\t\tpublic String getName() {\n\t\t\treturn this.name;\n\t\t}\n\n\t\tpublic void setName(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\t}\n\n\t@ConfigurationProperties(path = "${binding.location:classpath:name.yml}")\n\tprotected static class ResourceBindingProperties {\n\t\tprivate String name;\n\n\t\tpublic String getName() {\n\t\t\treturn this.name;\n\t\t}\n\n\t\tpublic void setName(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\t}\n}\n', 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.context.properties;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport javax.annotation.PostConstruct;\n\nimport org.junit.Test;\nimport org.springframework.beans.factory.BeanCreationException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.TestUtils;\nimport org.springframework.boot.context.condition.AssertMissingBean;\nimport org.springframework.boot.context.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.ImportResource;\nimport org.springframework.stereotype.Component;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\n\n/**\n * Tests for {@link EnableConfigurationProperties}.\n * \n * @author Dave Syer\n */\npublic class EnableConfigurationPropertiesTests {\n\n\tprivate AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n\n\t@Test\n\tpublic void testBasicPropertiesBinding() {\n\t\tthis.context.register(TestConfiguration.class);\n\t\tTestUtils.addEnviroment(this.context, "name:foo");\n\t\tthis.context.refresh();\n\t\tassertEquals(1, this.context.getBeanNamesForType(TestProperties.class).length);\n\t\tassertEquals("foo", this.context.getBean(TestProperties.class).getName());\n\t}\n\n\t@Test\n\tpublic void testArrayPropertiesBinding() {\n\t\tthis.context.register(TestConfiguration.class);\n\t\tTestUtils.addEnviroment(this.context, "name:foo", "array:1,2,3");\n\t\tthis.context.refresh();\n\t\tassertEquals(1, this.context.getBeanNamesForType(TestProperties.class).length);\n\t\tassertEquals(3, this.context.getBean(TestProperties.class).getArray().length);\n\t}\n\n\t@Test\n\tpublic void testCollectionPropertiesBindingFromYamlArray() {\n\t\tthis.context.register(TestConfiguration.class);\n\t\tTestUtils.addEnviroment(this.context, "name:foo", "list[0]:1", "list[1]:2");\n\t\tthis.context.refresh();\n\t\tassertEquals(2, this.context.getBean(TestProperties.class).getList().size());\n\t}\n\n\t@Test\n\tpublic void testPropertiesBindingWithoutAnnotation() {\n\t\tthis.context.register(MoreConfiguration.class);\n\t\tTestUtils.addEnviroment(this.context, "name:foo");\n\t\tthis.context.refresh();\n\t\tassertEquals(1, this.context.getBeanNamesForType(MoreProperties.class).length);\n\t\tassertEquals("foo", this.context.getBean(MoreProperties.class).getName());\n\t}\n\n\t@Test\n\tpublic void testPropertiesBindingWithDefaultsInXml() {\n\t\tthis.context.register(TestConfiguration.class, DefaultXmlConfiguration.class);\n\t\tthis.context.refresh();\n\t\tString[] beanNames = this.context.getBeanNamesForType(TestProperties.class);\n\t\tassertEquals("Wrong beans: " + Arrays.asList(beanNames), 1, beanNames.length);\n\t\tassertEquals("bar", this.context.getBean(TestProperties.class).getName());\n\t}\n\n\t@Test(expected = BeanCreationException.class)\n\tpublic void testPropertiesBindingWithDefaultsInBeanMethodReverseOrder() {\n\t\tthis.context.register(TestBeanConfiguration.class, DefaultConfiguration.class);\n\t\tthis.context.refresh();\n\t\tString[] beanNames = this.context.getBeanNamesForType(TestProperties.class);\n\t\tassertEquals("Wrong beans: " + Arrays.asList(beanNames), 1, beanNames.length);\n\t\tassertEquals("bar", this.context.getBean(TestProperties.class).getName());\n\t}\n\n\t@Test\n\tpublic void testPropertiesBindingWithDefaultsInBeanMethod() {\n\t\tthis.context.register(DefaultConfiguration.class, TestBeanConfiguration.class);\n\t\tthis.context.refresh();\n\t\tString[] beanNames = this.context.getBeanNamesForType(TestProperties.class);\n\t\tassertEquals("Wrong beans: " + Arrays.asList(beanNames), 1, beanNames.length);\n\t\tassertEquals("bar", this.context.getBean(TestProperties.class).getName());\n\t}\n\n\t// Maybe we could relax the condition that causes this exception but Spring makes it\n\t// difficult because it is impossible for DefaultConfiguration to override a bean\n\t// definition created with a direct registration (as opposed to a @Bean)\n\t@Test(expected = BeanCreationException.class)\n\tpublic void testPropertiesBindingWithDefaults() {\n\t\tthis.context.register(TestConfiguration.class, DefaultConfiguration.class);\n\t\tthis.context.refresh();\n\t\tString[] beanNames = this.context.getBeanNamesForType(TestProperties.class);\n\t\tassertEquals("Wrong beans: " + Arrays.asList(beanNames), 1, beanNames.length);\n\t\tassertEquals("bar", this.context.getBean(TestProperties.class).getName());\n\t}\n\n\t@Test\n\tpublic void testBindingDirectlyToFile() {\n\t\tthis.context.register(ResourceBindingProperties.class, TestConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertEquals(1,\n\t\t\t\tthis.context.getBeanNamesForType(ResourceBindingProperties.class).length);\n\t\tassertEquals("foo", this.context.getBean(ResourceBindingProperties.class)\n\t\t\t\t.getName());\n\t}\n\n\t@Test\n\tpublic void testBindingDirectlyToFileResolvedFromEnvironment() {\n\t\tTestUtils.addEnviroment(this.context, "binding.location:classpath:other.yml");\n\t\tthis.context.register(ResourceBindingProperties.class, TestConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertEquals(1,\n\t\t\t\tthis.context.getBeanNamesForType(ResourceBindingProperties.class).length);\n\t\tassertEquals("other", this.context.getBean(ResourceBindingProperties.class)\n\t\t\t\t.getName());\n\t}\n\n\t@Test\n\tpublic void testBindingDirectlyToFileWithDefaultsWhenProfileNotFound() {\n\t\tthis.context.register(ResourceBindingProperties.class, TestConfiguration.class);\n\t\tthis.context.getEnvironment().addActiveProfile("nonexistent");\n\t\tthis.context.refresh();\n\t\tassertEquals(1,\n\t\t\t\tthis.context.getBeanNamesForType(ResourceBindingProperties.class).length);\n\t\tassertEquals("foo", this.context.getBean(ResourceBindingProperties.class)\n\t\t\t\t.getName());\n\t}\n\n\t@Test\n\tpublic void testBindingDirectlyToFileWithExplicitSpringProfile() {\n\t\tthis.context.register(ResourceBindingProperties.class, TestConfiguration.class);\n\t\tthis.context.getEnvironment().addActiveProfile("super");\n\t\tthis.context.refresh();\n\t\tassertEquals(1,\n\t\t\t\tthis.context.getBeanNamesForType(ResourceBindingProperties.class).length);\n\t\tassertEquals("bar", this.context.getBean(ResourceBindingProperties.class)\n\t\t\t\t.getName());\n\t}\n\n\t@Test\n\tpublic void testBindingWithTwoBeans() {\n\t\tthis.context.register(MoreConfiguration.class, TestConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertEquals(1, this.context.getBeanNamesForType(TestProperties.class).length);\n\t\tassertEquals(1, this.context.getBeanNamesForType(MoreProperties.class).length);\n\t}\n\n\t@Test\n\tpublic void testBindingWithParentContext() {\n\t\tAnnotationConfigApplicationContext parent = new AnnotationConfigApplicationContext();\n\t\tparent.register(TestConfiguration.class);\n\t\tparent.refresh();\n\t\tTestUtils.addEnviroment(this.context, "name:foo");\n\t\tthis.context.setParent(parent);\n\t\tthis.context.register(TestConfiguration.class, TestConsumer.class);\n\t\tthis.context.refresh();\n\t\tassertEquals(1, this.context.getBeanNamesForType(TestProperties.class).length);\n\t\tassertEquals(1, parent.getBeanNamesForType(TestProperties.class).length);\n\t\tassertEquals("foo", this.context.getBean(TestConsumer.class).getName());\n\t}\n\n\t@Test\n\tpublic void testBindingOnlyParentContext() {\n\t\tAnnotationConfigApplicationContext parent = new AnnotationConfigApplicationContext();\n\t\tTestUtils.addEnviroment(parent, "name:foo");\n\t\tparent.register(TestConfiguration.class);\n\t\tparent.refresh();\n\t\tthis.context.setParent(parent);\n\t\tthis.context.register(TestConsumer.class);\n\t\tthis.context.refresh();\n\t\tassertEquals(0, this.context.getBeanNamesForType(TestProperties.class).length);\n\t\tassertEquals(1, parent.getBeanNamesForType(TestProperties.class).length);\n\t\tassertEquals("foo", this.context.getBean(TestConsumer.class).getName());\n\t}\n\n\t@Configuration\n\t@EnableConfigurationProperties(TestProperties.class)\n\tprotected static class TestConfiguration {\n\t}\n\n\t@Configuration\n\t@EnableConfigurationProperties\n\tprotected static class TestBeanConfiguration {\n\t\t@ConditionalOnMissingBean(TestProperties.class)\n\t\t@Bean(name = "org.springframework.boot.context.annotation.EnableConfigurationPropertiesTests$TestProperties")\n\t\tpublic TestProperties testProperties() {\n\t\t\treturn new TestProperties();\n\t\t}\n\t}\n\n\t@Configuration\n\tprotected static class DefaultConfiguration {\n\t\t@Bean\n\t\t@AssertMissingBean(TestProperties.class)\n\t\tpublic TestProperties testProperties() {\n\t\t\tTestProperties test = new TestProperties();\n\t\t\ttest.setName("bar");\n\t\t\treturn test;\n\t\t}\n\t}\n\n\t@Configuration\n\t@ImportResource("org/springframework/boot/context/properties/testProperties.xml")\n\tprotected static class DefaultXmlConfiguration {\n\t}\n\n\t@Component\n\tprotected static class TestConsumer {\n\t\t@Autowired\n\t\tprivate TestProperties properties;\n\n\t\t@PostConstruct\n\t\tpublic void init() {\n\t\t\tassertNotNull(this.properties);\n\t\t}\n\n\t\tpublic String getName() {\n\t\t\treturn this.properties.getName();\n\t\t}\n\t}\n\n\t@Configuration\n\t@EnableConfigurationProperties(MoreProperties.class)\n\tprotected static class MoreConfiguration {\n\t}\n\n\t@ConfigurationProperties\n\tprotected static class TestProperties {\n\t\tprivate String name;\n\t\tprivate int[] array;\n\t\tprivate List<Integer> list = new ArrayList<Integer>();\n\n\t\tpublic String getName() {\n\t\t\treturn this.name;\n\t\t}\n\n\t\tpublic void setName(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\n\t\tpublic void setArray(int... values) {\n\t\t\tthis.array = values;\n\t\t}\n\n\t\tpublic int[] getArray() {\n\t\t\treturn this.array;\n\t\t}\n\n\t\tpublic List<Integer> getList() {\n\t\t\treturn this.list;\n\t\t}\n\t}\n\n\tprotected static class MoreProperties {\n\t\tprivate String name;\n\n\t\tpublic String getName() {\n\t\t\treturn this.name;\n\t\t}\n\n\t\tpublic void setName(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\t}\n\n\t@ConfigurationProperties(path = "${binding.location:classpath:name.yml}")\n\tprotected static class ResourceBindingProperties {\n\t\tprivate String name;\n\n\t\tpublic String getName() {\n\t\t\treturn this.name;\n\t\t}\n\n\t\tpublic void setName(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\t}\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
