{'_old_path': None, '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchDataConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2012-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.data.elasticsearch;\n+\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.client.RestHighLevelClient;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.data.elasticsearch.core.ElasticsearchOperations;\n+import org.springframework.data.elasticsearch.core.ElasticsearchRestTemplate;\n+import org.springframework.data.elasticsearch.core.ElasticsearchTemplate;\n+import org.springframework.data.elasticsearch.core.convert.ElasticsearchConverter;\n+import org.springframework.data.elasticsearch.core.convert.MappingElasticsearchConverter;\n+import org.springframework.data.elasticsearch.core.mapping.SimpleElasticsearchMappingContext;\n+\n+/**\n+ * Configuration classes for Spring Data for Elasticsearch\n+ * <p>\n+ * Those should be {@code @Import} in a regular auto-configuration class to guarantee\n+ * their order of execution.\n+ *\n+ * @author Brian Clozel\n+ */\n+abstract class ElasticsearchDataConfiguration {\n+\n+\t@Configuration(proxyBeanMethods = false)\n+\tstatic class BaseConfiguration {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean\n+\t\tpublic ElasticsearchConverter elasticsearchConverter(\n+\t\t\t\tSimpleElasticsearchMappingContext mappingContext) {\n+\t\t\treturn new MappingElasticsearchConverter(mappingContext);\n+\t\t}\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean\n+\t\tpublic SimpleElasticsearchMappingContext mappingContext() {\n+\t\t\treturn new SimpleElasticsearchMappingContext();\n+\t\t}\n+\n+\t}\n+\n+\t@Configuration(proxyBeanMethods = false)\n+\t@ConditionalOnClass(RestHighLevelClient.class)\n+\tstatic class RestHighLevelClientConfiguration {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(value = ElasticsearchOperations.class,\n+\t\t\t\tname = "elasticsearchTemplate")\n+\t\t@ConditionalOnBean(RestHighLevelClient.class)\n+\t\tpublic ElasticsearchRestTemplate elasticsearchTemplate(RestHighLevelClient client,\n+\t\t\t\tElasticsearchConverter converter) {\n+\t\t\treturn new ElasticsearchRestTemplate(client, converter);\n+\t\t}\n+\n+\t}\n+\n+\t@Configuration(proxyBeanMethods = false)\n+\t@ConditionalOnClass(Client.class)\n+\tstatic class TransportClientConfiguration {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(value = ElasticsearchOperations.class,\n+\t\t\t\tname = "elasticsearchTemplate")\n+\t\t@ConditionalOnBean(Client.class)\n+\t\tpublic ElasticsearchTemplate elasticsearchTemplate(Client client,\n+\t\t\t\tElasticsearchConverter converter) {\n+\t\t\ttry {\n+\t\t\t\treturn new ElasticsearchTemplate(client, converter);\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\tthrow new IllegalStateException(ex);\n+\t\t\t}\n+\t\t}\n+\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.elasticsearch;\n\nimport org.elasticsearch.client.Client;\nimport org.elasticsearch.client.RestHighLevelClient;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.elasticsearch.core.ElasticsearchOperations;\nimport org.springframework.data.elasticsearch.core.ElasticsearchRestTemplate;\nimport org.springframework.data.elasticsearch.core.ElasticsearchTemplate;\nimport org.springframework.data.elasticsearch.core.convert.ElasticsearchConverter;\nimport org.springframework.data.elasticsearch.core.convert.MappingElasticsearchConverter;\nimport org.springframework.data.elasticsearch.core.mapping.SimpleElasticsearchMappingContext;\n\n/**\n * Configuration classes for Spring Data for Elasticsearch\n * <p>\n * Those should be {@code @Import} in a regular auto-configuration class to guarantee\n * their order of execution.\n *\n * @author Brian Clozel\n */\nabstract class ElasticsearchDataConfiguration {\n\n\t@Configuration(proxyBeanMethods = false)\n\tstatic class BaseConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic ElasticsearchConverter elasticsearchConverter(\n\t\t\t\tSimpleElasticsearchMappingContext mappingContext) {\n\t\t\treturn new MappingElasticsearchConverter(mappingContext);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic SimpleElasticsearchMappingContext mappingContext() {\n\t\t\treturn new SimpleElasticsearchMappingContext();\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnClass(RestHighLevelClient.class)\n\tstatic class RestHighLevelClientConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(value = ElasticsearchOperations.class,\n\t\t\t\tname = "elasticsearchTemplate")\n\t\t@ConditionalOnBean(RestHighLevelClient.class)\n\t\tpublic ElasticsearchRestTemplate elasticsearchTemplate(RestHighLevelClient client,\n\t\t\t\tElasticsearchConverter converter) {\n\t\t\treturn new ElasticsearchRestTemplate(client, converter);\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnClass(Client.class)\n\tstatic class TransportClientConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(value = ElasticsearchOperations.class,\n\t\t\t\tname = "elasticsearchTemplate")\n\t\t@ConditionalOnBean(Client.class)\n\t\tpublic ElasticsearchTemplate elasticsearchTemplate(Client client,\n\t\t\t\tElasticsearchConverter converter) {\n\t\t\ttry {\n\t\t\t\treturn new ElasticsearchTemplate(client, converter);\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tthrow new IllegalStateException(ex);\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
