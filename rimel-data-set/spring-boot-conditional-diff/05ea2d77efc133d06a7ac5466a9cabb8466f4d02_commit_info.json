{'_old_path': PosixPath('spring-boot-developer-tools/src/main/java/org/springframework/boot/developertools/remote/client/RemoteClientConfiguration.java'), '_new_path': PosixPath('spring-boot-developer-tools/src/main/java/org/springframework/boot/developertools/remote/client/RemoteClientConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,10 +16,22 @@\n \n package org.springframework.boot.developertools.remote.client;\n \n+import java.net.URL;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.boot.developertools.autoconfigure.DeveloperToolsProperties;\n+import org.springframework.boot.developertools.autoconfigure.RemoteDeveloperToolsProperties;\n+import org.springframework.boot.developertools.classpath.ClassPathFileSystemWatcher;\n+import org.springframework.boot.developertools.classpath.ClassPathRestartStrategy;\n+import org.springframework.boot.developertools.classpath.PatternClassPathRestartStrategy;\n+import org.springframework.boot.developertools.restart.DefaultRestartInitializer;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;\n@@ -37,6 +49,8 @@ import org.springframework.http.client.SimpleClientHttpRequestFactory;\n @EnableConfigurationProperties(DeveloperToolsProperties.class)\n public class RemoteClientConfiguration {\n \n+\tprivate static final Log logger = LogFactory.getLog(RemoteClientConfiguration.class);\n+\n \t@Autowired\n \tprivate DeveloperToolsProperties properties;\n \n@@ -53,4 +67,50 @@ public class RemoteClientConfiguration {\n \t\treturn new SimpleClientHttpRequestFactory();\n \t}\n \n+\t@PostConstruct\n+\tprivate void logWarnings() {\n+\t\tRemoteDeveloperToolsProperties remoteProperties = this.properties.getRemote();\n+\t\tif (!remoteProperties.getRestart().isEnabled()) {\n+\t\t\tlogger.warn("Remote restart is not enabled.");\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Client configuration for remote update and restarts.\n+\t */\n+\t@ConditionalOnProperty(prefix = "spring.developertools.remote.restart", name = "enabled", matchIfMissing = true)\n+\tstatic class RemoteRestartClientConfiguration {\n+\n+\t\t@Autowired\n+\t\tprivate DeveloperToolsProperties properties;\n+\n+\t\t@Value("${remoteUrl}")\n+\t\tprivate String remoteUrl;\n+\n+\t\t@Bean\n+\t\tpublic ClassPathFileSystemWatcher classPathFileSystemWatcher() {\n+\t\t\tDefaultRestartInitializer restartInitializer = new DefaultRestartInitializer();\n+\t\t\tURL[] urls = restartInitializer.getInitialUrls(Thread.currentThread());\n+\t\t\tif (urls == null) {\n+\t\t\t\turls = new URL[0];\n+\t\t\t}\n+\t\t\treturn new ClassPathFileSystemWatcher(classPathRestartStrategy(), urls);\n+\t\t}\n+\n+\t\t@Bean\n+\t\tpublic ClassPathRestartStrategy classPathRestartStrategy() {\n+\t\t\treturn new PatternClassPathRestartStrategy(this.properties.getRestart()\n+\t\t\t\t\t.getExclude());\n+\t\t}\n+\n+\t\t@Bean\n+\t\tpublic ClassPathChangeUploader classPathChangeUploader(\n+\t\t\t\tClientHttpRequestFactory requestFactory) {\n+\t\t\tString url = this.remoteUrl + this.properties.getRemote().getContextPath()\n+\t\t\t\t\t+ "/restart";\n+\t\t\treturn new ClassPathChangeUploader(url, requestFactory);\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.developertools.remote.client;\n\nimport java.net.URL;\n\nimport javax.annotation.PostConstruct;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.developertools.autoconfigure.DeveloperToolsProperties;\nimport org.springframework.boot.developertools.autoconfigure.RemoteDeveloperToolsProperties;\nimport org.springframework.boot.developertools.classpath.ClassPathFileSystemWatcher;\nimport org.springframework.boot.developertools.classpath.ClassPathRestartStrategy;\nimport org.springframework.boot.developertools.classpath.PatternClassPathRestartStrategy;\nimport org.springframework.boot.developertools.restart.DefaultRestartInitializer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.support.PropertySourcesPlaceholderConfigurer;\nimport org.springframework.http.client.ClientHttpRequestFactory;\nimport org.springframework.http.client.SimpleClientHttpRequestFactory;\n\n/**\n * Configuration used to connect to remote Spring Boot applications.\n *\n * @author Phillip Webb\n * @since 1.3.0\n * @see org.springframework.boot.developertools.RemoteSpringApplication\n */\n@Configuration\n@EnableConfigurationProperties(DeveloperToolsProperties.class)\npublic class RemoteClientConfiguration {\n\n\tprivate static final Log logger = LogFactory.getLog(RemoteClientConfiguration.class);\n\n\t@Autowired\n\tprivate DeveloperToolsProperties properties;\n\n\t@Value("${remoteUrl}")\n\tprivate String remoteUrl;\n\n\t@Bean\n\tpublic static PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer() {\n\t\treturn new PropertySourcesPlaceholderConfigurer();\n\t}\n\n\t@Bean\n\tpublic ClientHttpRequestFactory clientHttpRequestFactory() {\n\t\treturn new SimpleClientHttpRequestFactory();\n\t}\n\n\t@PostConstruct\n\tprivate void logWarnings() {\n\t\tRemoteDeveloperToolsProperties remoteProperties = this.properties.getRemote();\n\t\tif (!remoteProperties.getRestart().isEnabled()) {\n\t\t\tlogger.warn("Remote restart is not enabled.");\n\t\t}\n\t}\n\n\t/**\n\t * Client configuration for remote update and restarts.\n\t */\n\t@ConditionalOnProperty(prefix = "spring.developertools.remote.restart", name = "enabled", matchIfMissing = true)\n\tstatic class RemoteRestartClientConfiguration {\n\n\t\t@Autowired\n\t\tprivate DeveloperToolsProperties properties;\n\n\t\t@Value("${remoteUrl}")\n\t\tprivate String remoteUrl;\n\n\t\t@Bean\n\t\tpublic ClassPathFileSystemWatcher classPathFileSystemWatcher() {\n\t\t\tDefaultRestartInitializer restartInitializer = new DefaultRestartInitializer();\n\t\t\tURL[] urls = restartInitializer.getInitialUrls(Thread.currentThread());\n\t\t\tif (urls == null) {\n\t\t\t\turls = new URL[0];\n\t\t\t}\n\t\t\treturn new ClassPathFileSystemWatcher(classPathRestartStrategy(), urls);\n\t\t}\n\n\t\t@Bean\n\t\tpublic ClassPathRestartStrategy classPathRestartStrategy() {\n\t\t\treturn new PatternClassPathRestartStrategy(this.properties.getRestart()\n\t\t\t\t\t.getExclude());\n\t\t}\n\n\t\t@Bean\n\t\tpublic ClassPathChangeUploader classPathChangeUploader(\n\t\t\t\tClientHttpRequestFactory requestFactory) {\n\t\t\tString url = this.remoteUrl + this.properties.getRemote().getContextPath()\n\t\t\t\t\t+ "/restart";\n\t\t\treturn new ClassPathChangeUploader(url, requestFactory);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.developertools.remote.client;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.developertools.autoconfigure.DeveloperToolsProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.support.PropertySourcesPlaceholderConfigurer;\nimport org.springframework.http.client.ClientHttpRequestFactory;\nimport org.springframework.http.client.SimpleClientHttpRequestFactory;\n\n/**\n * Configuration used to connect to remote Spring Boot applications.\n *\n * @author Phillip Webb\n * @since 1.3.0\n * @see org.springframework.boot.developertools.RemoteSpringApplication\n */\n@Configuration\n@EnableConfigurationProperties(DeveloperToolsProperties.class)\npublic class RemoteClientConfiguration {\n\n\t@Autowired\n\tprivate DeveloperToolsProperties properties;\n\n\t@Value("${remoteUrl}")\n\tprivate String remoteUrl;\n\n\t@Bean\n\tpublic static PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer() {\n\t\treturn new PropertySourcesPlaceholderConfigurer();\n\t}\n\n\t@Bean\n\tpublic ClientHttpRequestFactory clientHttpRequestFactory() {\n\t\treturn new SimpleClientHttpRequestFactory();\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
