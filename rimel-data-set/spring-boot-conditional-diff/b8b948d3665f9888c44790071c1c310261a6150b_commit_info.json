{'_old_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/JolokiaAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/JolokiaAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2013 the original author or authors.\n+ * Copyright 2013-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -16,11 +16,13 @@\n \n package org.springframework.boot.actuate.autoconfigure;\n \n+import java.util.HashMap;\n import java.util.Map;\n import java.util.Properties;\n \n import org.jolokia.http.AgentServlet;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.actuate.autoconfigure.JolokiaAutoConfiguration.JolokiaProperties;\n import org.springframework.boot.actuate.endpoint.mvc.JolokiaMvcEndpoint;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n@@ -30,10 +32,10 @@ import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n import org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration;\n-import org.springframework.boot.bind.RelaxedPropertyResolver;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.core.env.Environment;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for embedding Jolokia, a JMX-HTTP\n@@ -56,17 +58,14 @@ import org.springframework.core.env.Environment;\n @Configuration\n @ConditionalOnWebApplication\n @ConditionalOnClass({ AgentServlet.class })\n+@ConditionalOnExpression("${endpoints.jolokia.enabled:true}")\n @AutoConfigureBefore(ManagementSecurityAutoConfiguration.class)\n @AutoConfigureAfter(EmbeddedServletContainerAutoConfiguration.class)\n-@ConditionalOnExpression("${endpoints.jolokia.enabled:true}")\n+@EnableConfigurationProperties(JolokiaProperties.class)\n public class JolokiaAutoConfiguration {\n \n-\tprivate RelaxedPropertyResolver environment;\n-\n \t@Autowired\n-\tpublic void setEnvironment(Environment environment) {\n-\t\tthis.environment = new RelaxedPropertyResolver(environment);\n-\t}\n+\tJolokiaProperties properties = new JolokiaProperties();\n \n \t@Bean\n \t@ConditionalOnMissingBean\n@@ -77,14 +76,23 @@ public class JolokiaAutoConfiguration {\n \t}\n \n \tprivate Properties getInitParameters() {\n-\t\tProperties properties = new Properties();\n-\t\tMap<String, Object> configParameters = this.environment\n-\t\t\t\t.getSubProperties("jolokia.config.");\n-\t\tfor (Map.Entry<String, Object> configParameter : configParameters.entrySet()) {\n-\t\t\tproperties.setProperty(configParameter.getKey(), configParameter.getValue()\n-\t\t\t\t\t.toString());\n+\t\tProperties initParameters = new Properties();\n+\t\tinitParameters.putAll(this.properties.getConfig());\n+\t\treturn initParameters;\n+\t}\n+\n+\t@ConfigurationProperties(name = "jolokia")\n+\tpublic static class JolokiaProperties {\n+\n+\t\tprivate Map<String, String> config = new HashMap<String, String>();\n+\n+\t\tpublic Map<String, String> getConfig() {\n+\t\t\treturn this.config;\n+\t\t}\n+\n+\t\tpublic void setConfig(Map<String, String> config) {\n+\t\t\tthis.config = config;\n \t\t}\n-\t\treturn properties;\n \t}\n \n }\n', 'source_code': '/*\n * Copyright 2013-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Properties;\n\nimport org.jolokia.http.AgentServlet;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuate.autoconfigure.JolokiaAutoConfiguration.JolokiaProperties;\nimport org.springframework.boot.actuate.endpoint.mvc.JolokiaMvcEndpoint;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for embedding Jolokia, a JMX-HTTP\n * bridge giving an alternative to JSR-160 connectors.\n * \n * <p>\n * This configuration will get automatically enabled as soon as the Jolokia\n * {@link AgentServlet} is on the classpath. To disable set\n * <code>endpoints.jolokia.enabled: false</code>.\n * \n * <p>\n * Additional configuration parameters for Jolokia can be provided by specifying\n * <code>jolokia.config. ...</code> properties. See the <a\n * href="http://jolokia.org">http://jolokia.org</a> web site for more information on\n * supported configuration parameters.\n * \n * @author Christian Dupuis\n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnWebApplication\n@ConditionalOnClass({ AgentServlet.class })\n@ConditionalOnExpression("${endpoints.jolokia.enabled:true}")\n@AutoConfigureBefore(ManagementSecurityAutoConfiguration.class)\n@AutoConfigureAfter(EmbeddedServletContainerAutoConfiguration.class)\n@EnableConfigurationProperties(JolokiaProperties.class)\npublic class JolokiaAutoConfiguration {\n\n\t@Autowired\n\tJolokiaProperties properties = new JolokiaProperties();\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic JolokiaMvcEndpoint jolokiaEndpoint() {\n\t\tJolokiaMvcEndpoint endpoint = new JolokiaMvcEndpoint();\n\t\tendpoint.setInitParameters(getInitParameters());\n\t\treturn endpoint;\n\t}\n\n\tprivate Properties getInitParameters() {\n\t\tProperties initParameters = new Properties();\n\t\tinitParameters.putAll(this.properties.getConfig());\n\t\treturn initParameters;\n\t}\n\n\t@ConfigurationProperties(name = "jolokia")\n\tpublic static class JolokiaProperties {\n\n\t\tprivate Map<String, String> config = new HashMap<String, String>();\n\n\t\tpublic Map<String, String> getConfig() {\n\t\t\treturn this.config;\n\t\t}\n\n\t\tpublic void setConfig(Map<String, String> config) {\n\t\t\tthis.config = config;\n\t\t}\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport java.util.Map;\nimport java.util.Properties;\n\nimport org.jolokia.http.AgentServlet;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuate.endpoint.mvc.JolokiaMvcEndpoint;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration;\nimport org.springframework.boot.bind.RelaxedPropertyResolver;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for embedding Jolokia, a JMX-HTTP\n * bridge giving an alternative to JSR-160 connectors.\n * \n * <p>\n * This configuration will get automatically enabled as soon as the Jolokia\n * {@link AgentServlet} is on the classpath. To disable set\n * <code>endpoints.jolokia.enabled: false</code>.\n * \n * <p>\n * Additional configuration parameters for Jolokia can be provided by specifying\n * <code>jolokia.config. ...</code> properties. See the <a\n * href="http://jolokia.org">http://jolokia.org</a> web site for more information on\n * supported configuration parameters.\n * \n * @author Christian Dupuis\n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnWebApplication\n@ConditionalOnClass({ AgentServlet.class })\n@AutoConfigureBefore(ManagementSecurityAutoConfiguration.class)\n@AutoConfigureAfter(EmbeddedServletContainerAutoConfiguration.class)\n@ConditionalOnExpression("${endpoints.jolokia.enabled:true}")\npublic class JolokiaAutoConfiguration {\n\n\tprivate RelaxedPropertyResolver environment;\n\n\t@Autowired\n\tpublic void setEnvironment(Environment environment) {\n\t\tthis.environment = new RelaxedPropertyResolver(environment);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic JolokiaMvcEndpoint jolokiaEndpoint() {\n\t\tJolokiaMvcEndpoint endpoint = new JolokiaMvcEndpoint();\n\t\tendpoint.setInitParameters(getInitParameters());\n\t\treturn endpoint;\n\t}\n\n\tprivate Properties getInitParameters() {\n\t\tProperties properties = new Properties();\n\t\tMap<String, Object> configParameters = this.environment\n\t\t\t\t.getSubProperties("jolokia.config.");\n\t\tfor (Map.Entry<String, Object> configParameter : configParameters.entrySet()) {\n\t\t\tproperties.setProperty(configParameter.getKey(), configParameter.getValue()\n\t\t\t\t\t.toString());\n\t\t}\n\t\treturn properties;\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
