{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -65,7 +65,8 @@ public class MongoAutoConfiguration {\n \t}\n \n \t@Bean\n-\t@ConditionalOnMissingBean\n+\t@ConditionalOnMissingBean(type = { "com.mongodb.MongoClient",\n+\t\t\t"com.mongodb.client.MongoClient" })\n \tpublic MongoClient mongo() {\n \t\tthis.mongo = this.factory.createMongoClient(this.options);\n \t\treturn this.mongo;\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.mongo;\n\nimport javax.annotation.PreDestroy;\n\nimport com.mongodb.MongoClient;\nimport com.mongodb.MongoClientOptions;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Mongo.\n *\n * @author Dave Syer\n * @author Oliver Gierke\n * @author Phillip Webb\n * @author Mark Paluch\n * @author Stephane Nicoll\n */\n@Configuration\n@ConditionalOnClass(MongoClient.class)\n@EnableConfigurationProperties(MongoProperties.class)\n@ConditionalOnMissingBean(type = "org.springframework.data.mongodb.MongoDbFactory")\npublic class MongoAutoConfiguration {\n\n\tprivate final MongoClientOptions options;\n\n\tprivate final MongoClientFactory factory;\n\n\tprivate MongoClient mongo;\n\n\tpublic MongoAutoConfiguration(MongoProperties properties,\n\t\t\tObjectProvider<MongoClientOptions> options, Environment environment) {\n\t\tthis.options = options.getIfAvailable();\n\t\tthis.factory = new MongoClientFactory(properties, environment);\n\t}\n\n\t@PreDestroy\n\tpublic void close() {\n\t\tif (this.mongo != null) {\n\t\t\tthis.mongo.close();\n\t\t}\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(type = { "com.mongodb.MongoClient",\n\t\t\t"com.mongodb.client.MongoClient" })\n\tpublic MongoClient mongo() {\n\t\tthis.mongo = this.factory.createMongoClient(this.options);\n\t\treturn this.mongo;\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.mongo;\n\nimport javax.annotation.PreDestroy;\n\nimport com.mongodb.MongoClient;\nimport com.mongodb.MongoClientOptions;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Mongo.\n *\n * @author Dave Syer\n * @author Oliver Gierke\n * @author Phillip Webb\n * @author Mark Paluch\n * @author Stephane Nicoll\n */\n@Configuration\n@ConditionalOnClass(MongoClient.class)\n@EnableConfigurationProperties(MongoProperties.class)\n@ConditionalOnMissingBean(type = "org.springframework.data.mongodb.MongoDbFactory")\npublic class MongoAutoConfiguration {\n\n\tprivate final MongoClientOptions options;\n\n\tprivate final MongoClientFactory factory;\n\n\tprivate MongoClient mongo;\n\n\tpublic MongoAutoConfiguration(MongoProperties properties,\n\t\t\tObjectProvider<MongoClientOptions> options, Environment environment) {\n\t\tthis.options = options.getIfAvailable();\n\t\tthis.factory = new MongoClientFactory(properties, environment);\n\t}\n\n\t@PreDestroy\n\tpublic void close() {\n\t\tif (this.mongo != null) {\n\t\t\tthis.mongo.close();\n\t\t}\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic MongoClient mongo() {\n\t\tthis.mongo = this.factory.createMongoClient(this.options);\n\t\treturn this.mongo;\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
