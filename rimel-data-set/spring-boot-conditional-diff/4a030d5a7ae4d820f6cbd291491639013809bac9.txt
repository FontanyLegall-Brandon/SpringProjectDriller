@@ -16,34 +16,18 @@
 
 package org.springframework.boot.autoconfigure.data.elasticsearch;
 
-import java.io.Closeable;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.LinkedHashMap;
-import java.util.LinkedHashSet;
-import java.util.Map;
 import java.util.Properties;
-import java.util.Set;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 import org.elasticsearch.client.Client;
 import org.elasticsearch.client.transport.TransportClient;
-import org.elasticsearch.common.settings.Settings;
-import org.elasticsearch.node.InternalSettingsPreparer;
-import org.elasticsearch.node.Node;
-import org.elasticsearch.plugins.Plugin;
 
-import org.springframework.beans.factory.DisposableBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
-import org.springframework.data.elasticsearch.client.NodeClientFactoryBean;
 import org.springframework.data.elasticsearch.client.TransportClientFactoryBean;
-import org.springframework.util.ClassUtils;
-import org.springframework.util.StringUtils;
 
 
 @Configuration
-@ConditionalOnClass({ Client.class, TransportClientFactoryBean.class,
-		NodeClientFactoryBean.class })
+@ConditionalOnClass({ Client.class, TransportClientFactoryBean.class })
+@ConditionalOnProperty(prefix = , name = , matchIfMissing = false)
 @EnableConfigurationProperties(ElasticsearchProperties.class)
-public class ElasticsearchAutoConfiguration implements DisposableBean {
-
-	private static final Map<String, String> DEFAULTS;
-
-	static {
-		Map<String, String> defaults = new LinkedHashMap<>();
-		defaults.put(, String.valueOf(false));
-		defaults.put(, );
-		defaults.put(, System.getProperty());
-		DEFAULTS = Collections.unmodifiableMap(defaults);
-	}
-
-	private static final Set<String> TRANSPORT_PLUGINS;
-
-	static {
-		Set<String> plugins = new LinkedHashSet<>();
-		plugins.add();
-		plugins.add();
-		TRANSPORT_PLUGINS = Collections.unmodifiableSet(plugins);
-	}
-
-	private static final Log logger = LogFactory
-			.getLog(ElasticsearchAutoConfiguration.class);
+public class ElasticsearchAutoConfiguration {
 
 	private final ElasticsearchProperties properties;
 
-	private Closeable closeable;
-
 	public ElasticsearchAutoConfiguration(ElasticsearchProperties properties) {
 		this.properties = properties;
 	}
 
 	@Bean
 	@ConditionalOnMissingBean
-	public Client elasticsearchClient() {
-		try {
-			return createClient();
-		}
-		catch (Exception ex) {
-			throw new IllegalStateException(ex);
-		}
-	}
-
-	private Client createClient() throws Exception {
-		if (StringUtils.hasLength(this.properties.getClusterNodes())) {
-			return createTransportClient();
-		}
-		return createNodeClient();
-	}
-
-	private Client createNodeClient() throws Exception {
-		Settings.Builder settings = Settings.builder();
-		for (Map.Entry<String, String> entry : DEFAULTS.entrySet()) {
-			if (!this.properties.getProperties().containsKey(entry.getKey())) {
-				settings.put(entry.getKey(), entry.getValue());
-			}
-		}
-		settings.put(this.properties.getProperties());
-		settings.put(, this.properties.getClusterName());
-		Node node = createNode(settings.build());
-		this.closeable = node;
-		node.start();
-		return node.client();
-	}
-
-	private Node createNode(Settings settings) {
-		Collection<Class<? extends Plugin>> plugins = findPlugins();
-		if (plugins.isEmpty()) {
-			return new Node(settings);
-		}
-		return new PluggableNode(settings, plugins);
-	}
-
-	@SuppressWarnings()
-	private Collection<Class<? extends Plugin>> findPlugins() {
-		for (String candidate : TRANSPORT_PLUGINS) {
-			if (ClassUtils.isPresent(candidate, null)) {
-				Class<? extends Plugin> pluginClass = (Class<? extends Plugin>) ClassUtils
-						.resolveClassName(candidate, null);
-				return Collections.singleton(pluginClass);
-			}
-		}
-		return Collections.emptySet();
-	}
-
-	private Client createTransportClient() throws Exception {
+	public TransportClient elasticsearchClient() throws Exception {
 		TransportClientFactoryBean factory = new TransportClientFactoryBean();
 		factory.setClusterNodes(this.properties.getClusterNodes());
 		factory.setProperties(createProperties());
 		factory.afterPropertiesSet();
 		TransportClient client = factory.getObject();
-		this.closeable = client;
 		return client;
 	}
 
@@ -160,34 +68,4 @@ public class ElasticsearchAutoConfiguration implements DisposableBean {
 		return properties;
 	}
 
-	@Override
-	public void destroy() throws Exception {
-		if (this.closeable != null) {
-			try {
-				if (logger.isInfoEnabled()) {
-					logger.info();
-				}
-				this.closeable.close();
-			}
-			catch (final Exception ex) {
-				if (logger.isErrorEnabled()) {
-					logger.error(, ex);
-				}
-			}
-		}
-	}
-
-	
-	private static class PluggableNode extends Node {
-
-		PluggableNode(Settings preparedSettings,
-				Collection<Class<? extends Plugin>> classpathPlugins) {
-			super(InternalSettingsPreparer.prepareEnvironment(preparedSettings, null),
-					classpathPlugins);
-		}
-
-	}
-
 }

