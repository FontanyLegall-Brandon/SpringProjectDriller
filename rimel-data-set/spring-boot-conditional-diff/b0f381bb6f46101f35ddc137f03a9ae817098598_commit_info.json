{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/elasticsearch/ElasticsearchHealthIndicatorAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/elasticsearch/ElasticsearchHealthIndicatorAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -32,6 +32,7 @@ import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration;\n import org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration;\n@@ -55,6 +56,7 @@ import org.springframework.context.annotation.Configuration;\n public class ElasticsearchHealthIndicatorAutoConfiguration {\n \n \t@Configuration\n+\t@ConditionalOnClass(Client.class)\n \t@ConditionalOnBean(Client.class)\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tstatic class ElasticsearchClientHealthIndicatorConfiguration extends\n@@ -87,6 +89,7 @@ public class ElasticsearchHealthIndicatorAutoConfiguration {\n \t}\n \n \t@Configuration\n+\t@ConditionalOnClass(JestClient.class)\n \t@ConditionalOnBean(JestClient.class)\n \tstatic class ElasticsearchJestHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchJestHealthIndicator, JestClient> {\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.elasticsearch;\n\nimport java.time.Duration;\nimport java.util.Map;\n\nimport io.searchbox.client.JestClient;\nimport org.elasticsearch.client.Client;\n\nimport org.springframework.boot.actuate.autoconfigure.health.CompositeHealthIndicatorConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.health.ConditionalOnEnabledHealthIndicator;\nimport org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration;\nimport org.springframework.boot.actuate.elasticsearch.ElasticsearchHealthIndicator;\nimport org.springframework.boot.actuate.elasticsearch.ElasticsearchJestHealthIndicator;\nimport org.springframework.boot.actuate.health.HealthIndicator;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration;\nimport org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for\n * {@link ElasticsearchHealthIndicator}.\n *\n * @author Binwei Yang\n * @author Andy Wilkinson\n * @author Stephane Nicoll\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnEnabledHealthIndicator("elasticsearch")\n@AutoConfigureBefore(HealthIndicatorAutoConfiguration.class)\n@AutoConfigureAfter({ ElasticsearchAutoConfiguration.class, JestAutoConfiguration.class })\npublic class ElasticsearchHealthIndicatorAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnClass(Client.class)\n\t@ConditionalOnBean(Client.class)\n\t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n\tstatic class ElasticsearchClientHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {\n\n\t\tprivate final Map<String, Client> clients;\n\n\t\tprivate final ElasticsearchHealthIndicatorProperties properties;\n\n\t\tElasticsearchClientHealthIndicatorConfiguration(Map<String, Client> clients,\n\t\t\t\tElasticsearchHealthIndicatorProperties properties) {\n\t\t\tthis.clients = clients;\n\t\t\tthis.properties = properties;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "elasticsearchHealthIndicator")\n\t\tpublic HealthIndicator elasticsearchHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.clients);\n\t\t}\n\n\t\t@Override\n\t\tprotected ElasticsearchHealthIndicator createHealthIndicator(Client client) {\n\t\t\tDuration responseTimeout = this.properties.getResponseTimeout();\n\t\t\treturn new ElasticsearchHealthIndicator(client,\n\t\t\t\t\tresponseTimeout == null ? 100 : responseTimeout.toMillis(),\n\t\t\t\t\tthis.properties.getIndices());\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(JestClient.class)\n\t@ConditionalOnBean(JestClient.class)\n\tstatic class ElasticsearchJestHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchJestHealthIndicator, JestClient> {\n\n\t\tprivate final Map<String, JestClient> clients;\n\n\t\tElasticsearchJestHealthIndicatorConfiguration(Map<String, JestClient> clients) {\n\t\t\tthis.clients = clients;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "elasticsearchHealthIndicator")\n\t\tpublic HealthIndicator elasticsearchHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.clients);\n\t\t}\n\n\t\t@Override\n\t\tprotected ElasticsearchJestHealthIndicator createHealthIndicator(\n\t\t\t\tJestClient client) {\n\t\t\treturn new ElasticsearchJestHealthIndicator(client);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.elasticsearch;\n\nimport java.time.Duration;\nimport java.util.Map;\n\nimport io.searchbox.client.JestClient;\nimport org.elasticsearch.client.Client;\n\nimport org.springframework.boot.actuate.autoconfigure.health.CompositeHealthIndicatorConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.health.ConditionalOnEnabledHealthIndicator;\nimport org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration;\nimport org.springframework.boot.actuate.elasticsearch.ElasticsearchHealthIndicator;\nimport org.springframework.boot.actuate.elasticsearch.ElasticsearchJestHealthIndicator;\nimport org.springframework.boot.actuate.health.HealthIndicator;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration;\nimport org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for\n * {@link ElasticsearchHealthIndicator}.\n *\n * @author Binwei Yang\n * @author Andy Wilkinson\n * @author Stephane Nicoll\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnEnabledHealthIndicator("elasticsearch")\n@AutoConfigureBefore(HealthIndicatorAutoConfiguration.class)\n@AutoConfigureAfter({ ElasticsearchAutoConfiguration.class, JestAutoConfiguration.class })\npublic class ElasticsearchHealthIndicatorAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnBean(Client.class)\n\t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n\tstatic class ElasticsearchClientHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {\n\n\t\tprivate final Map<String, Client> clients;\n\n\t\tprivate final ElasticsearchHealthIndicatorProperties properties;\n\n\t\tElasticsearchClientHealthIndicatorConfiguration(Map<String, Client> clients,\n\t\t\t\tElasticsearchHealthIndicatorProperties properties) {\n\t\t\tthis.clients = clients;\n\t\t\tthis.properties = properties;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "elasticsearchHealthIndicator")\n\t\tpublic HealthIndicator elasticsearchHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.clients);\n\t\t}\n\n\t\t@Override\n\t\tprotected ElasticsearchHealthIndicator createHealthIndicator(Client client) {\n\t\t\tDuration responseTimeout = this.properties.getResponseTimeout();\n\t\t\treturn new ElasticsearchHealthIndicator(client,\n\t\t\t\t\tresponseTimeout == null ? 100 : responseTimeout.toMillis(),\n\t\t\t\t\tthis.properties.getIndices());\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(JestClient.class)\n\tstatic class ElasticsearchJestHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchJestHealthIndicator, JestClient> {\n\n\t\tprivate final Map<String, JestClient> clients;\n\n\t\tElasticsearchJestHealthIndicatorConfiguration(Map<String, JestClient> clients) {\n\t\t\tthis.clients = clients;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "elasticsearchHealthIndicator")\n\t\tpublic HealthIndicator elasticsearchHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.clients);\n\t\t}\n\n\t\t@Override\n\t\tprotected ElasticsearchJestHealthIndicator createHealthIndicator(\n\t\t\t\tJestClient client) {\n\t\t\treturn new ElasticsearchJestHealthIndicator(client);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
