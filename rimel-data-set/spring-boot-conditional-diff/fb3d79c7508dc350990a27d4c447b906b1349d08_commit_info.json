{'_old_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java'), '_new_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -33,38 +33,28 @@ import com.fasterxml.jackson.annotation.JsonUnwrapped;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n \n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.actuate.autoconfigure.EndpointWebMvcHypermediaManagementContextConfiguration.EndpointHypermediaEnabledCondition;\n import org.springframework.boot.actuate.condition.ConditionalOnEnabledEndpoint;\n import org.springframework.boot.actuate.endpoint.mvc.ActuatorMediaTypes;\n-import org.springframework.boot.actuate.endpoint.mvc.DocsMvcEndpoint;\n import org.springframework.boot.actuate.endpoint.mvc.HalBrowserMvcEndpoint;\n import org.springframework.boot.actuate.endpoint.mvc.HalJsonMvcEndpoint;\n import org.springframework.boot.actuate.endpoint.mvc.HypermediaDisabled;\n import org.springframework.boot.actuate.endpoint.mvc.ManagementServletContext;\n import org.springframework.boot.actuate.endpoint.mvc.MvcEndpoint;\n import org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints;\n-import org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnResource;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n import org.springframework.boot.autoconfigure.http.HttpMessageConverters;\n import org.springframework.boot.autoconfigure.web.ResourceProperties;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Conditional;\n-import org.springframework.context.annotation.Configuration;\n import org.springframework.core.MethodParameter;\n import org.springframework.core.annotation.AnnotationUtils;\n import org.springframework.core.io.ResourceLoader;\n import org.springframework.hateoas.Link;\n import org.springframework.hateoas.Resource;\n import org.springframework.hateoas.ResourceSupport;\n-import org.springframework.hateoas.UriTemplate;\n-import org.springframework.hateoas.hal.CurieProvider;\n-import org.springframework.hateoas.hal.DefaultCurieProvider;\n import org.springframework.hateoas.mvc.TypeConstrainedMappingJackson2HttpMessageConverter;\n import org.springframework.http.MediaType;\n import org.springframework.http.converter.AbstractHttpMessageConverter;\n@@ -93,7 +83,7 @@ import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;\n @ConditionalOnClass(Link.class)\n @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n @ConditionalOnBean(HttpMessageConverters.class)\n-@Conditional(EndpointHypermediaEnabledCondition.class)\n+@ConditionalOnEnabledEndpoint("actuator")\n @EnableConfigurationProperties({ ResourceProperties.class,\n \t\tManagementServerProperties.class })\n public class EndpointWebMvcHypermediaManagementContextConfiguration {\n@@ -104,7 +94,6 @@ public class EndpointWebMvcHypermediaManagementContextConfiguration {\n \t\treturn properties::getContextPath;\n \t}\n \n-\t@ConditionalOnEnabledEndpoint("actuator")\n \t@Bean\n \tpublic HalJsonMvcEndpoint halJsonMvcEndpoint(\n \t\t\tManagementServletContext managementServletContext,\n@@ -115,30 +104,6 @@ public class EndpointWebMvcHypermediaManagementContextConfiguration {\n \t\treturn new HalJsonMvcEndpoint(managementServletContext);\n \t}\n \n-\t@Bean\n-\t@ConditionalOnBean(DocsMvcEndpoint.class)\n-\t@ConditionalOnMissingBean(CurieProvider.class)\n-\t@ConditionalOnProperty(prefix = "endpoints.docs.curies", name = "enabled", matchIfMissing = false)\n-\tpublic DefaultCurieProvider curieProvider(ManagementServerProperties management,\n-\t\t\tDocsMvcEndpoint endpoint) {\n-\t\tString path = management.getContextPath() + endpoint.getPath()\n-\t\t\t\t+ "/#spring_boot_actuator__{rel}";\n-\t\treturn new DefaultCurieProvider("boot", new UriTemplate(path));\n-\t}\n-\n-\t@Configuration\n-\tstatic class DocsMvcEndpointConfiguration {\n-\n-\t\t@Bean\n-\t\t@ConditionalOnEnabledEndpoint("docs")\n-\t\t@ConditionalOnResource(resources = "classpath:/META-INF/resources/spring-boot-actuator/docs/index.html")\n-\t\tpublic DocsMvcEndpoint docsMvcEndpoint(\n-\t\t\t\tManagementServletContext managementServletContext) {\n-\t\t\treturn new DocsMvcEndpoint(managementServletContext);\n-\t\t}\n-\n-\t}\n-\n \t/**\n \t * Controller advice that adds links to the actuator endpoint\'s path.\n \t */\n@@ -363,22 +328,4 @@ public class EndpointWebMvcHypermediaManagementContextConfiguration {\n \n \t}\n \n-\tstatic class EndpointHypermediaEnabledCondition extends AnyNestedCondition {\n-\n-\t\tEndpointHypermediaEnabledCondition() {\n-\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n-\t\t}\n-\n-\t\t@ConditionalOnEnabledEndpoint("actuator")\n-\t\tstatic class ActuatorEndpointEnabled {\n-\n-\t\t}\n-\n-\t\t@ConditionalOnEnabledEndpoint("docs")\n-\t\tstatic class DocsEndpointEnabled {\n-\n-\t\t}\n-\n-\t}\n-\n }\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport java.io.IOException;\nimport java.lang.reflect.Type;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport javax.annotation.PostConstruct;\n\nimport com.fasterxml.jackson.annotation.JsonAnyGetter;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.annotation.JsonUnwrapped;\nimport com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuate.condition.ConditionalOnEnabledEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.ActuatorMediaTypes;\nimport org.springframework.boot.actuate.endpoint.mvc.HalBrowserMvcEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.HalJsonMvcEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.HypermediaDisabled;\nimport org.springframework.boot.actuate.endpoint.mvc.ManagementServletContext;\nimport org.springframework.boot.actuate.endpoint.mvc.MvcEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.http.HttpMessageConverters;\nimport org.springframework.boot.autoconfigure.web.ResourceProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.core.MethodParameter;\nimport org.springframework.core.annotation.AnnotationUtils;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.hateoas.Link;\nimport org.springframework.hateoas.Resource;\nimport org.springframework.hateoas.ResourceSupport;\nimport org.springframework.hateoas.mvc.TypeConstrainedMappingJackson2HttpMessageConverter;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.converter.AbstractHttpMessageConverter;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.http.converter.HttpMessageNotWritableException;\nimport org.springframework.http.server.ServerHttpRequest;\nimport org.springframework.http.server.ServerHttpResponse;\nimport org.springframework.http.server.ServletServerHttpRequest;\nimport org.springframework.util.TypeUtils;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.servlet.HandlerMapping;\nimport org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;\nimport org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice;\n\nimport static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;\n\n/**\n * Configuration for hypermedia in HTTP endpoints.\n *\n * @author Dave Syer\n * @author Phillip Webb\n * @author Andy Wilkinson\n * @since 1.3.0\n */\n@ManagementContextConfiguration\n@ConditionalOnClass(Link.class)\n@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n@ConditionalOnBean(HttpMessageConverters.class)\n@ConditionalOnEnabledEndpoint("actuator")\n@EnableConfigurationProperties({ ResourceProperties.class,\n\t\tManagementServerProperties.class })\npublic class EndpointWebMvcHypermediaManagementContextConfiguration {\n\n\t@Bean\n\tpublic ManagementServletContext managementServletContext(\n\t\t\tfinal ManagementServerProperties properties) {\n\t\treturn properties::getContextPath;\n\t}\n\n\t@Bean\n\tpublic HalJsonMvcEndpoint halJsonMvcEndpoint(\n\t\t\tManagementServletContext managementServletContext,\n\t\t\tResourceProperties resources, ResourceLoader resourceLoader) {\n\t\tif (HalBrowserMvcEndpoint.getHalBrowserLocation(resourceLoader) != null) {\n\t\t\treturn new HalBrowserMvcEndpoint(managementServletContext);\n\t\t}\n\t\treturn new HalJsonMvcEndpoint(managementServletContext);\n\t}\n\n\t/**\n\t * Controller advice that adds links to the actuator endpoint\'s path.\n\t */\n\t@ControllerAdvice\n\tpublic static class ActuatorEndpointLinksAdvice\n\t\t\timplements ResponseBodyAdvice<Object> {\n\n\t\t@Autowired\n\t\tprivate MvcEndpoints endpoints;\n\n\t\t@Autowired(required = false)\n\t\tprivate HalJsonMvcEndpoint halJsonMvcEndpoint;\n\n\t\t@Autowired\n\t\tprivate ManagementServerProperties management;\n\n\t\tprivate LinksEnhancer linksEnhancer;\n\n\t\t@PostConstruct\n\t\tpublic void init() {\n\t\t\tthis.linksEnhancer = new LinksEnhancer(this.management.getContextPath(),\n\t\t\t\t\tthis.endpoints);\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean supports(MethodParameter returnType,\n\t\t\t\tClass<? extends HttpMessageConverter<?>> converterType) {\n\t\t\treturnType.increaseNestingLevel();\n\t\t\tType nestedType = returnType.getNestedGenericParameterType();\n\t\t\treturnType.decreaseNestingLevel();\n\t\t\treturn ResourceSupport.class.isAssignableFrom(returnType.getParameterType())\n\t\t\t\t\t|| TypeUtils.isAssignable(ResourceSupport.class, nestedType);\n\t\t}\n\n\t\t@Override\n\t\tpublic Object beforeBodyWrite(Object body, MethodParameter returnType,\n\t\t\t\tMediaType selectedContentType,\n\t\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType,\n\t\t\t\tServerHttpRequest request, ServerHttpResponse response) {\n\t\t\tif (request instanceof ServletServerHttpRequest) {\n\t\t\t\tbeforeBodyWrite(body, (ServletServerHttpRequest) request);\n\t\t\t}\n\t\t\treturn body;\n\t\t}\n\n\t\tprivate void beforeBodyWrite(Object body, ServletServerHttpRequest request) {\n\t\t\tObject pattern = request.getServletRequest()\n\t\t\t\t\t.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE);\n\t\t\tif (pattern != null && body instanceof ResourceSupport) {\n\t\t\t\tbeforeBodyWrite(pattern.toString(), (ResourceSupport) body);\n\t\t\t}\n\t\t}\n\n\t\tprivate void beforeBodyWrite(String path, ResourceSupport body) {\n\t\t\tif (isActuatorEndpointPath(path)) {\n\t\t\t\tthis.linksEnhancer.addEndpointLinks(body,\n\t\t\t\t\t\tthis.halJsonMvcEndpoint.getPath());\n\t\t\t}\n\t\t}\n\n\t\tprivate boolean isActuatorEndpointPath(String path) {\n\t\t\tif (this.halJsonMvcEndpoint != null) {\n\t\t\t\tString toMatch = this.management.getContextPath()\n\t\t\t\t\t\t+ this.halJsonMvcEndpoint.getPath();\n\t\t\t\treturn toMatch.equals(path) || (toMatch + "/").equals(path);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t}\n\n\t/**\n\t * Controller advice that adds links to the existing Actuator endpoints. By default\n\t * all the top-level resources are enhanced with a "self" link. Those resources that\n\t * could not be enhanced (e.g. "/env/{name}") because their values are "primitive" are\n\t * ignored.\n\t */\n\t@ConditionalOnProperty(prefix = "endpoints.hypermedia", name = "enabled", matchIfMissing = false)\n\t@ControllerAdvice(assignableTypes = MvcEndpoint.class)\n\tstatic class MvcEndpointAdvice implements ResponseBodyAdvice<Object> {\n\n\t\tprivate final List<RequestMappingHandlerAdapter> handlerAdapters;\n\n\t\tprivate final Map<MediaType, HttpMessageConverter<?>> converterCache = new ConcurrentHashMap<>();\n\n\t\tMvcEndpointAdvice(List<RequestMappingHandlerAdapter> handlerAdapters) {\n\t\t\tthis.handlerAdapters = handlerAdapters;\n\t\t}\n\n\t\t@PostConstruct\n\t\tpublic void configureHttpMessageConverters() {\n\t\t\tfor (RequestMappingHandlerAdapter handlerAdapter : this.handlerAdapters) {\n\t\t\t\tfor (HttpMessageConverter<?> messageConverter : handlerAdapter\n\t\t\t\t\t\t.getMessageConverters()) {\n\t\t\t\t\tconfigureHttpMessageConverter(messageConverter);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tprivate void configureHttpMessageConverter(\n\t\t\t\tHttpMessageConverter<?> messageConverter) {\n\t\t\tif (messageConverter instanceof TypeConstrainedMappingJackson2HttpMessageConverter) {\n\t\t\t\tList<MediaType> supportedMediaTypes = new ArrayList<>(\n\t\t\t\t\t\tmessageConverter.getSupportedMediaTypes());\n\t\t\t\tsupportedMediaTypes.add(ActuatorMediaTypes.APPLICATION_ACTUATOR_V2_JSON);\n\t\t\t\t((AbstractHttpMessageConverter<?>) messageConverter)\n\t\t\t\t\t\t.setSupportedMediaTypes(supportedMediaTypes);\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean supports(MethodParameter returnType,\n\t\t\t\tClass<? extends HttpMessageConverter<?>> converterType) {\n\t\t\tClass<?> controllerType = returnType.getDeclaringClass();\n\t\t\treturn !HalJsonMvcEndpoint.class.isAssignableFrom(controllerType);\n\t\t}\n\n\t\t@Override\n\t\tpublic Object beforeBodyWrite(Object body, MethodParameter returnType,\n\t\t\t\tMediaType selectedContentType,\n\t\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType,\n\t\t\t\tServerHttpRequest request, ServerHttpResponse response) {\n\t\t\tif (request instanceof ServletServerHttpRequest) {\n\t\t\t\treturn beforeBodyWrite(body, returnType, selectedContentType,\n\t\t\t\t\t\tselectedConverterType, (ServletServerHttpRequest) request,\n\t\t\t\t\t\tresponse);\n\t\t\t}\n\t\t\treturn body;\n\t\t}\n\n\t\tprivate Object beforeBodyWrite(Object body, MethodParameter returnType,\n\t\t\t\tMediaType selectedContentType,\n\t\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType,\n\t\t\t\tServletServerHttpRequest request, ServerHttpResponse response) {\n\t\t\tif (body == null || body instanceof Resource) {\n\t\t\t\t// Assume it already was handled or it already has its links\n\t\t\t\treturn body;\n\t\t\t}\n\t\t\tif (body instanceof Collection || body.getClass().isArray()) {\n\t\t\t\t// We can\'t add links to a collection without wrapping it\n\t\t\t\treturn body;\n\t\t\t}\n\t\t\tHttpMessageConverter<Object> converter = findConverter(selectedConverterType,\n\t\t\t\t\tselectedContentType);\n\t\t\tif (converter == null || isHypermediaDisabled(returnType)) {\n\t\t\t\t// Not a resource that can be enhanced with a link\n\t\t\t\treturn body;\n\t\t\t}\n\t\t\tString path = getPath(request);\n\t\t\ttry {\n\t\t\t\tconverter.write(new EndpointResource(body, path), selectedContentType,\n\t\t\t\t\t\tresponse);\n\t\t\t}\n\t\t\tcatch (IOException ex) {\n\t\t\t\tthrow new HttpMessageNotWritableException("Cannot write response", ex);\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t@SuppressWarnings("unchecked")\n\t\tprivate HttpMessageConverter<Object> findConverter(\n\t\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType,\n\t\t\t\tMediaType mediaType) {\n\t\t\tHttpMessageConverter<Object> cached = (HttpMessageConverter<Object>) this.converterCache\n\t\t\t\t\t.get(mediaType);\n\t\t\tif (cached != null) {\n\t\t\t\treturn cached;\n\t\t\t}\n\t\t\tfor (RequestMappingHandlerAdapter handlerAdapter : this.handlerAdapters) {\n\t\t\t\tfor (HttpMessageConverter<?> converter : handlerAdapter\n\t\t\t\t\t\t.getMessageConverters()) {\n\t\t\t\t\tif (selectedConverterType.isAssignableFrom(converter.getClass())\n\t\t\t\t\t\t\t&& converter.canWrite(EndpointResource.class, mediaType)) {\n\t\t\t\t\t\tthis.converterCache.put(mediaType, converter);\n\t\t\t\t\t\treturn (HttpMessageConverter<Object>) converter;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\tprivate boolean isHypermediaDisabled(MethodParameter returnType) {\n\t\t\treturn AnnotationUtils.findAnnotation(returnType.getMethod(),\n\t\t\t\t\tHypermediaDisabled.class) != null\n\t\t\t\t\t|| AnnotationUtils.findAnnotation(\n\t\t\t\t\t\t\treturnType.getMethod().getDeclaringClass(),\n\t\t\t\t\t\t\tHypermediaDisabled.class) != null;\n\t\t}\n\n\t\tprivate String getPath(ServletServerHttpRequest request) {\n\t\t\tString path = (String) request.getServletRequest()\n\t\t\t\t\t.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE);\n\t\t\treturn (path == null ? "" : path);\n\t\t}\n\n\t}\n\n\t@JsonInclude(content = Include.NON_NULL)\n\t@JacksonXmlRootElement(localName = "resource")\n\tprivate static class EndpointResource extends ResourceSupport {\n\n\t\tprivate Object content;\n\n\t\tprivate Map<String, Object> embedded;\n\n\t\t@SuppressWarnings("unchecked")\n\t\tEndpointResource(Object content, String path) {\n\t\t\tthis.content = content instanceof Map ? null : content;\n\t\t\tthis.embedded = (Map<String, Object>) (this.content == null ? content : null);\n\t\t\tadd(linkTo(Object.class).slash(path).withSelfRel());\n\t\t}\n\n\t\t@JsonUnwrapped\n\t\tpublic Object getContent() {\n\t\t\treturn this.content;\n\t\t}\n\n\t\t@JsonAnyGetter\n\t\tpublic Map<String, Object> getEmbedded() {\n\t\t\treturn this.embedded;\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport java.io.IOException;\nimport java.lang.reflect.Type;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport javax.annotation.PostConstruct;\n\nimport com.fasterxml.jackson.annotation.JsonAnyGetter;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.annotation.JsonUnwrapped;\nimport com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuate.autoconfigure.EndpointWebMvcHypermediaManagementContextConfiguration.EndpointHypermediaEnabledCondition;\nimport org.springframework.boot.actuate.condition.ConditionalOnEnabledEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.ActuatorMediaTypes;\nimport org.springframework.boot.actuate.endpoint.mvc.DocsMvcEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.HalBrowserMvcEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.HalJsonMvcEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.HypermediaDisabled;\nimport org.springframework.boot.actuate.endpoint.mvc.ManagementServletContext;\nimport org.springframework.boot.actuate.endpoint.mvc.MvcEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints;\nimport org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnResource;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.http.HttpMessageConverters;\nimport org.springframework.boot.autoconfigure.web.ResourceProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.MethodParameter;\nimport org.springframework.core.annotation.AnnotationUtils;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.hateoas.Link;\nimport org.springframework.hateoas.Resource;\nimport org.springframework.hateoas.ResourceSupport;\nimport org.springframework.hateoas.UriTemplate;\nimport org.springframework.hateoas.hal.CurieProvider;\nimport org.springframework.hateoas.hal.DefaultCurieProvider;\nimport org.springframework.hateoas.mvc.TypeConstrainedMappingJackson2HttpMessageConverter;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.converter.AbstractHttpMessageConverter;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.http.converter.HttpMessageNotWritableException;\nimport org.springframework.http.server.ServerHttpRequest;\nimport org.springframework.http.server.ServerHttpResponse;\nimport org.springframework.http.server.ServletServerHttpRequest;\nimport org.springframework.util.TypeUtils;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.servlet.HandlerMapping;\nimport org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;\nimport org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice;\n\nimport static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;\n\n/**\n * Configuration for hypermedia in HTTP endpoints.\n *\n * @author Dave Syer\n * @author Phillip Webb\n * @author Andy Wilkinson\n * @since 1.3.0\n */\n@ManagementContextConfiguration\n@ConditionalOnClass(Link.class)\n@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n@ConditionalOnBean(HttpMessageConverters.class)\n@Conditional(EndpointHypermediaEnabledCondition.class)\n@EnableConfigurationProperties({ ResourceProperties.class,\n\t\tManagementServerProperties.class })\npublic class EndpointWebMvcHypermediaManagementContextConfiguration {\n\n\t@Bean\n\tpublic ManagementServletContext managementServletContext(\n\t\t\tfinal ManagementServerProperties properties) {\n\t\treturn properties::getContextPath;\n\t}\n\n\t@ConditionalOnEnabledEndpoint("actuator")\n\t@Bean\n\tpublic HalJsonMvcEndpoint halJsonMvcEndpoint(\n\t\t\tManagementServletContext managementServletContext,\n\t\t\tResourceProperties resources, ResourceLoader resourceLoader) {\n\t\tif (HalBrowserMvcEndpoint.getHalBrowserLocation(resourceLoader) != null) {\n\t\t\treturn new HalBrowserMvcEndpoint(managementServletContext);\n\t\t}\n\t\treturn new HalJsonMvcEndpoint(managementServletContext);\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(DocsMvcEndpoint.class)\n\t@ConditionalOnMissingBean(CurieProvider.class)\n\t@ConditionalOnProperty(prefix = "endpoints.docs.curies", name = "enabled", matchIfMissing = false)\n\tpublic DefaultCurieProvider curieProvider(ManagementServerProperties management,\n\t\t\tDocsMvcEndpoint endpoint) {\n\t\tString path = management.getContextPath() + endpoint.getPath()\n\t\t\t\t+ "/#spring_boot_actuator__{rel}";\n\t\treturn new DefaultCurieProvider("boot", new UriTemplate(path));\n\t}\n\n\t@Configuration\n\tstatic class DocsMvcEndpointConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnEnabledEndpoint("docs")\n\t\t@ConditionalOnResource(resources = "classpath:/META-INF/resources/spring-boot-actuator/docs/index.html")\n\t\tpublic DocsMvcEndpoint docsMvcEndpoint(\n\t\t\t\tManagementServletContext managementServletContext) {\n\t\t\treturn new DocsMvcEndpoint(managementServletContext);\n\t\t}\n\n\t}\n\n\t/**\n\t * Controller advice that adds links to the actuator endpoint\'s path.\n\t */\n\t@ControllerAdvice\n\tpublic static class ActuatorEndpointLinksAdvice\n\t\t\timplements ResponseBodyAdvice<Object> {\n\n\t\t@Autowired\n\t\tprivate MvcEndpoints endpoints;\n\n\t\t@Autowired(required = false)\n\t\tprivate HalJsonMvcEndpoint halJsonMvcEndpoint;\n\n\t\t@Autowired\n\t\tprivate ManagementServerProperties management;\n\n\t\tprivate LinksEnhancer linksEnhancer;\n\n\t\t@PostConstruct\n\t\tpublic void init() {\n\t\t\tthis.linksEnhancer = new LinksEnhancer(this.management.getContextPath(),\n\t\t\t\t\tthis.endpoints);\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean supports(MethodParameter returnType,\n\t\t\t\tClass<? extends HttpMessageConverter<?>> converterType) {\n\t\t\treturnType.increaseNestingLevel();\n\t\t\tType nestedType = returnType.getNestedGenericParameterType();\n\t\t\treturnType.decreaseNestingLevel();\n\t\t\treturn ResourceSupport.class.isAssignableFrom(returnType.getParameterType())\n\t\t\t\t\t|| TypeUtils.isAssignable(ResourceSupport.class, nestedType);\n\t\t}\n\n\t\t@Override\n\t\tpublic Object beforeBodyWrite(Object body, MethodParameter returnType,\n\t\t\t\tMediaType selectedContentType,\n\t\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType,\n\t\t\t\tServerHttpRequest request, ServerHttpResponse response) {\n\t\t\tif (request instanceof ServletServerHttpRequest) {\n\t\t\t\tbeforeBodyWrite(body, (ServletServerHttpRequest) request);\n\t\t\t}\n\t\t\treturn body;\n\t\t}\n\n\t\tprivate void beforeBodyWrite(Object body, ServletServerHttpRequest request) {\n\t\t\tObject pattern = request.getServletRequest()\n\t\t\t\t\t.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE);\n\t\t\tif (pattern != null && body instanceof ResourceSupport) {\n\t\t\t\tbeforeBodyWrite(pattern.toString(), (ResourceSupport) body);\n\t\t\t}\n\t\t}\n\n\t\tprivate void beforeBodyWrite(String path, ResourceSupport body) {\n\t\t\tif (isActuatorEndpointPath(path)) {\n\t\t\t\tthis.linksEnhancer.addEndpointLinks(body,\n\t\t\t\t\t\tthis.halJsonMvcEndpoint.getPath());\n\t\t\t}\n\t\t}\n\n\t\tprivate boolean isActuatorEndpointPath(String path) {\n\t\t\tif (this.halJsonMvcEndpoint != null) {\n\t\t\t\tString toMatch = this.management.getContextPath()\n\t\t\t\t\t\t+ this.halJsonMvcEndpoint.getPath();\n\t\t\t\treturn toMatch.equals(path) || (toMatch + "/").equals(path);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t}\n\n\t/**\n\t * Controller advice that adds links to the existing Actuator endpoints. By default\n\t * all the top-level resources are enhanced with a "self" link. Those resources that\n\t * could not be enhanced (e.g. "/env/{name}") because their values are "primitive" are\n\t * ignored.\n\t */\n\t@ConditionalOnProperty(prefix = "endpoints.hypermedia", name = "enabled", matchIfMissing = false)\n\t@ControllerAdvice(assignableTypes = MvcEndpoint.class)\n\tstatic class MvcEndpointAdvice implements ResponseBodyAdvice<Object> {\n\n\t\tprivate final List<RequestMappingHandlerAdapter> handlerAdapters;\n\n\t\tprivate final Map<MediaType, HttpMessageConverter<?>> converterCache = new ConcurrentHashMap<>();\n\n\t\tMvcEndpointAdvice(List<RequestMappingHandlerAdapter> handlerAdapters) {\n\t\t\tthis.handlerAdapters = handlerAdapters;\n\t\t}\n\n\t\t@PostConstruct\n\t\tpublic void configureHttpMessageConverters() {\n\t\t\tfor (RequestMappingHandlerAdapter handlerAdapter : this.handlerAdapters) {\n\t\t\t\tfor (HttpMessageConverter<?> messageConverter : handlerAdapter\n\t\t\t\t\t\t.getMessageConverters()) {\n\t\t\t\t\tconfigureHttpMessageConverter(messageConverter);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tprivate void configureHttpMessageConverter(\n\t\t\t\tHttpMessageConverter<?> messageConverter) {\n\t\t\tif (messageConverter instanceof TypeConstrainedMappingJackson2HttpMessageConverter) {\n\t\t\t\tList<MediaType> supportedMediaTypes = new ArrayList<>(\n\t\t\t\t\t\tmessageConverter.getSupportedMediaTypes());\n\t\t\t\tsupportedMediaTypes.add(ActuatorMediaTypes.APPLICATION_ACTUATOR_V2_JSON);\n\t\t\t\t((AbstractHttpMessageConverter<?>) messageConverter)\n\t\t\t\t\t\t.setSupportedMediaTypes(supportedMediaTypes);\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean supports(MethodParameter returnType,\n\t\t\t\tClass<? extends HttpMessageConverter<?>> converterType) {\n\t\t\tClass<?> controllerType = returnType.getDeclaringClass();\n\t\t\treturn !HalJsonMvcEndpoint.class.isAssignableFrom(controllerType);\n\t\t}\n\n\t\t@Override\n\t\tpublic Object beforeBodyWrite(Object body, MethodParameter returnType,\n\t\t\t\tMediaType selectedContentType,\n\t\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType,\n\t\t\t\tServerHttpRequest request, ServerHttpResponse response) {\n\t\t\tif (request instanceof ServletServerHttpRequest) {\n\t\t\t\treturn beforeBodyWrite(body, returnType, selectedContentType,\n\t\t\t\t\t\tselectedConverterType, (ServletServerHttpRequest) request,\n\t\t\t\t\t\tresponse);\n\t\t\t}\n\t\t\treturn body;\n\t\t}\n\n\t\tprivate Object beforeBodyWrite(Object body, MethodParameter returnType,\n\t\t\t\tMediaType selectedContentType,\n\t\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType,\n\t\t\t\tServletServerHttpRequest request, ServerHttpResponse response) {\n\t\t\tif (body == null || body instanceof Resource) {\n\t\t\t\t// Assume it already was handled or it already has its links\n\t\t\t\treturn body;\n\t\t\t}\n\t\t\tif (body instanceof Collection || body.getClass().isArray()) {\n\t\t\t\t// We can\'t add links to a collection without wrapping it\n\t\t\t\treturn body;\n\t\t\t}\n\t\t\tHttpMessageConverter<Object> converter = findConverter(selectedConverterType,\n\t\t\t\t\tselectedContentType);\n\t\t\tif (converter == null || isHypermediaDisabled(returnType)) {\n\t\t\t\t// Not a resource that can be enhanced with a link\n\t\t\t\treturn body;\n\t\t\t}\n\t\t\tString path = getPath(request);\n\t\t\ttry {\n\t\t\t\tconverter.write(new EndpointResource(body, path), selectedContentType,\n\t\t\t\t\t\tresponse);\n\t\t\t}\n\t\t\tcatch (IOException ex) {\n\t\t\t\tthrow new HttpMessageNotWritableException("Cannot write response", ex);\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t@SuppressWarnings("unchecked")\n\t\tprivate HttpMessageConverter<Object> findConverter(\n\t\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType,\n\t\t\t\tMediaType mediaType) {\n\t\t\tHttpMessageConverter<Object> cached = (HttpMessageConverter<Object>) this.converterCache\n\t\t\t\t\t.get(mediaType);\n\t\t\tif (cached != null) {\n\t\t\t\treturn cached;\n\t\t\t}\n\t\t\tfor (RequestMappingHandlerAdapter handlerAdapter : this.handlerAdapters) {\n\t\t\t\tfor (HttpMessageConverter<?> converter : handlerAdapter\n\t\t\t\t\t\t.getMessageConverters()) {\n\t\t\t\t\tif (selectedConverterType.isAssignableFrom(converter.getClass())\n\t\t\t\t\t\t\t&& converter.canWrite(EndpointResource.class, mediaType)) {\n\t\t\t\t\t\tthis.converterCache.put(mediaType, converter);\n\t\t\t\t\t\treturn (HttpMessageConverter<Object>) converter;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\tprivate boolean isHypermediaDisabled(MethodParameter returnType) {\n\t\t\treturn AnnotationUtils.findAnnotation(returnType.getMethod(),\n\t\t\t\t\tHypermediaDisabled.class) != null\n\t\t\t\t\t|| AnnotationUtils.findAnnotation(\n\t\t\t\t\t\t\treturnType.getMethod().getDeclaringClass(),\n\t\t\t\t\t\t\tHypermediaDisabled.class) != null;\n\t\t}\n\n\t\tprivate String getPath(ServletServerHttpRequest request) {\n\t\t\tString path = (String) request.getServletRequest()\n\t\t\t\t\t.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE);\n\t\t\treturn (path == null ? "" : path);\n\t\t}\n\n\t}\n\n\t@JsonInclude(content = Include.NON_NULL)\n\t@JacksonXmlRootElement(localName = "resource")\n\tprivate static class EndpointResource extends ResourceSupport {\n\n\t\tprivate Object content;\n\n\t\tprivate Map<String, Object> embedded;\n\n\t\t@SuppressWarnings("unchecked")\n\t\tEndpointResource(Object content, String path) {\n\t\t\tthis.content = content instanceof Map ? null : content;\n\t\t\tthis.embedded = (Map<String, Object>) (this.content == null ? content : null);\n\t\t\tadd(linkTo(Object.class).slash(path).withSelfRel());\n\t\t}\n\n\t\t@JsonUnwrapped\n\t\tpublic Object getContent() {\n\t\t\treturn this.content;\n\t\t}\n\n\t\t@JsonAnyGetter\n\t\tpublic Map<String, Object> getEmbedded() {\n\t\t\treturn this.embedded;\n\t\t}\n\n\t}\n\n\tstatic class EndpointHypermediaEnabledCondition extends AnyNestedCondition {\n\n\t\tEndpointHypermediaEnabledCondition() {\n\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n\t\t}\n\n\t\t@ConditionalOnEnabledEndpoint("actuator")\n\t\tstatic class ActuatorEndpointEnabled {\n\n\t\t}\n\n\t\t@ConditionalOnEnabledEndpoint("docs")\n\t\tstatic class DocsEndpointEnabled {\n\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
