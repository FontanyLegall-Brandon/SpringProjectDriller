{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2SsoDefaultConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2015 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.security.oauth2.client;\n+\n+import org.springframework.beans.factory.BeanFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionOutcome;\n+import org.springframework.boot.autoconfigure.condition.SpringBootCondition;\n+import org.springframework.boot.autoconfigure.security.SecurityProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.ConditionContext;\n+import org.springframework.context.annotation.Conditional;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.Ordered;\n+import org.springframework.core.type.AnnotatedTypeMetadata;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.util.ClassUtils;\n+\n+/**\n+ * If the user only has <code>@EnableOAuth2Sso</code> but not on a\n+ * WebSecurityConfigurerAdapter then one is added with all paths secured and with an order\n+ * that puts it ahead of the default HTTP Basic security chain in Spring Boot.\n+ * \n+ * @author Dave Syer\n+ *\n+ */\n+@Configuration\n+@EnableConfigurationProperties(OAuth2SsoProperties.class)\n+public class OAuth2SsoDefaultConfiguration {\n+\n+\t@Configuration\n+\t@Conditional(NeedsWebSecurityCondition.class)\n+\tprotected static class WebSecurityConfiguration extends WebSecurityConfigurerAdapter\n+\t\t\timplements Ordered {\n+\n+\t\t@Autowired\n+\t\tBeanFactory beanFactory;\n+\n+\t\t@Autowired\n+\t\tOAuth2SsoProperties sso;\n+\n+\t\t@Override\n+\t\tprotected void configure(HttpSecurity http) throws Exception {\n+\t\t\thttp.antMatcher("/**").authorizeRequests().anyRequest().authenticated();\n+\t\t\tnew SsoSecurityConfigurer(beanFactory).configure(http);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic int getOrder() {\n+\t\t\tif (sso.getFilterOrder() != null) {\n+\t\t\t\treturn sso.getFilterOrder();\n+\t\t\t}\n+\t\t\tif (ClassUtils\n+\t\t\t\t\t.isPresent(\n+\t\t\t\t\t\t\t"org.springframework.boot.actuate.autoconfigure.ManagementServerProperties",\n+\t\t\t\t\t\t\tnull)) {\n+\t\t\t\t// If > BASIC_AUTH_ORDER then the existing rules for the actuator\n+\t\t\t\t// endpoints\n+\t\t\t\t// will take precedence. This value is < BASIC_AUTH_ORDER.\n+\t\t\t\treturn SecurityProperties.ACCESS_OVERRIDE_ORDER - 5;\n+\t\t\t}\n+\t\t\treturn SecurityProperties.ACCESS_OVERRIDE_ORDER;\n+\t\t}\n+\n+\t}\n+\n+\tprivate static class NeedsWebSecurityCondition extends SpringBootCondition {\n+\t\t@Override\n+\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n+\t\t\t\tAnnotatedTypeMetadata metadata) {\n+\t\t\tString[] enablers = context.getBeanFactory().getBeanNamesForAnnotation(\n+\t\t\t\t\tEnableOAuth2Sso.class);\n+\t\t\tfor (String name : enablers) {\n+\t\t\t\tif (context.getBeanFactory().isTypeMatch(name,\n+\t\t\t\t\t\tWebSecurityConfigurerAdapter.class)) {\n+\t\t\t\t\treturn ConditionOutcome\n+\t\t\t\t\t\t\t.noMatch("found @EnableOAuth2Sso on a WebSecurityConfigurerAdapter");\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn ConditionOutcome\n+\t\t\t\t\t.match("found no @EnableOAuth2Sso on a WebSecurityConfigurerAdapter");\n+\t\t}\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security.oauth2.client;\n\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.autoconfigure.security.SecurityProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.util.ClassUtils;\n\n/**\n * If the user only has <code>@EnableOAuth2Sso</code> but not on a\n * WebSecurityConfigurerAdapter then one is added with all paths secured and with an order\n * that puts it ahead of the default HTTP Basic security chain in Spring Boot.\n * \n * @author Dave Syer\n *\n */\n@Configuration\n@EnableConfigurationProperties(OAuth2SsoProperties.class)\npublic class OAuth2SsoDefaultConfiguration {\n\n\t@Configuration\n\t@Conditional(NeedsWebSecurityCondition.class)\n\tprotected static class WebSecurityConfiguration extends WebSecurityConfigurerAdapter\n\t\t\timplements Ordered {\n\n\t\t@Autowired\n\t\tBeanFactory beanFactory;\n\n\t\t@Autowired\n\t\tOAuth2SsoProperties sso;\n\n\t\t@Override\n\t\tprotected void configure(HttpSecurity http) throws Exception {\n\t\t\thttp.antMatcher("/**").authorizeRequests().anyRequest().authenticated();\n\t\t\tnew SsoSecurityConfigurer(beanFactory).configure(http);\n\t\t}\n\n\t\t@Override\n\t\tpublic int getOrder() {\n\t\t\tif (sso.getFilterOrder() != null) {\n\t\t\t\treturn sso.getFilterOrder();\n\t\t\t}\n\t\t\tif (ClassUtils\n\t\t\t\t\t.isPresent(\n\t\t\t\t\t\t\t"org.springframework.boot.actuate.autoconfigure.ManagementServerProperties",\n\t\t\t\t\t\t\tnull)) {\n\t\t\t\t// If > BASIC_AUTH_ORDER then the existing rules for the actuator\n\t\t\t\t// endpoints\n\t\t\t\t// will take precedence. This value is < BASIC_AUTH_ORDER.\n\t\t\t\treturn SecurityProperties.ACCESS_OVERRIDE_ORDER - 5;\n\t\t\t}\n\t\t\treturn SecurityProperties.ACCESS_OVERRIDE_ORDER;\n\t\t}\n\n\t}\n\n\tprivate static class NeedsWebSecurityCondition extends SpringBootCondition {\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tString[] enablers = context.getBeanFactory().getBeanNamesForAnnotation(\n\t\t\t\t\tEnableOAuth2Sso.class);\n\t\t\tfor (String name : enablers) {\n\t\t\t\tif (context.getBeanFactory().isTypeMatch(name,\n\t\t\t\t\t\tWebSecurityConfigurerAdapter.class)) {\n\t\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t\t.noMatch("found @EnableOAuth2Sso on a WebSecurityConfigurerAdapter");\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn ConditionOutcome\n\t\t\t\t\t.match("found no @EnableOAuth2Sso on a WebSecurityConfigurerAdapter");\n\t\t}\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
