{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DispatcherServletAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DispatcherServletAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -19,6 +19,8 @@ package org.springframework.boot.autoconfigure.web;\n import java.util.Arrays;\n import java.util.List;\n \n+import javax.servlet.ServletRegistration;\n+\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n@@ -61,6 +63,7 @@ public class DispatcherServletAutoConfiguration {\n \n \t@Configuration\n \t@Conditional(DefaultDispatcherServletCondition.class)\n+\t@ConditionalOnClass(ServletRegistration.class)\n \tprotected static class DispatcherServletConfiguration {\n \n \t\t@Autowired\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport javax.servlet.ServletRegistration;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.context.embedded.ServletRegistrationBean;\nimport org.springframework.boot.context.web.SpringBootServletInitializer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.web.servlet.DispatcherServlet;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for the Spring\n * {@link DispatcherServlet}. Should work for a standalone application where an embedded\n * servlet container is already present and also for a deployable application using\n * {@link SpringBootServletInitializer}.\n * \n * @author Phillip Webb\n * @author Dave Syer\n */\n@Order(Ordered.HIGHEST_PRECEDENCE)\n@Configuration\n@ConditionalOnWebApplication\n@ConditionalOnClass(DispatcherServlet.class)\n@AutoConfigureAfter(EmbeddedServletContainerAutoConfiguration.class)\npublic class DispatcherServletAutoConfiguration {\n\n\t/*\n\t * The bean name for a DispatcherServlet that will be mapped to the root URL "/"\n\t */\n\tpublic static final String DEFAULT_DISPATCHER_SERVLET_BEAN_NAME = "dispatcherServlet";\n\n\t@Configuration\n\t@Conditional(DefaultDispatcherServletCondition.class)\n\t@ConditionalOnClass(ServletRegistration.class)\n\tprotected static class DispatcherServletConfiguration {\n\n\t\t@Autowired\n\t\tprivate ServerProperties server;\n\n\t\t@Bean(name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)\n\t\tpublic DispatcherServlet dispatcherServlet() {\n\t\t\treturn new DispatcherServlet();\n\t\t}\n\n\t\t@Bean\n\t\tpublic ServletRegistrationBean dispatcherServletRegistration() {\n\t\t\treturn new ServletRegistrationBean(dispatcherServlet(),\n\t\t\t\t\tthis.server.getServletPath());\n\t\t}\n\n\t}\n\n\tprivate static class DefaultDispatcherServletCondition extends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\n\t\t\tConfigurableListableBeanFactory beanFactory = context.getBeanFactory();\n\t\t\tList<String> servlets = Arrays.asList(beanFactory.getBeanNamesForType(\n\t\t\t\t\tDispatcherServlet.class, false, false));\n\t\t\tboolean containsDispatcherBean = beanFactory\n\t\t\t\t\t.containsBean(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);\n\t\t\tif (servlets.isEmpty()) {\n\t\t\t\tif (containsDispatcherBean) {\n\t\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t\t.noMatch("found no DispatcherServlet but a non-DispatcherServlet named "\n\t\t\t\t\t\t\t\t\t+ DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);\n\t\t\t\t}\n\t\t\t\treturn ConditionOutcome.match("no DispatcherServlet found");\n\t\t\t}\n\t\t\tif (servlets.contains(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)) {\n\t\t\t\treturn ConditionOutcome.noMatch("found DispatcherServlet named "\n\t\t\t\t\t\t+ DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);\n\t\t\t}\n\t\t\tif (containsDispatcherBean) {\n\t\t\t\treturn ConditionOutcome.noMatch("found non-DispatcherServlet named "\n\t\t\t\t\t\t+ DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);\n\t\t\t}\n\t\t\treturn ConditionOutcome\n\t\t\t\t\t.match("one or more DispatcherServlets found and none is named "\n\t\t\t\t\t\t\t+ DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.context.embedded.ServletRegistrationBean;\nimport org.springframework.boot.context.web.SpringBootServletInitializer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.web.servlet.DispatcherServlet;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for the Spring\n * {@link DispatcherServlet}. Should work for a standalone application where an embedded\n * servlet container is already present and also for a deployable application using\n * {@link SpringBootServletInitializer}.\n * \n * @author Phillip Webb\n * @author Dave Syer\n */\n@Order(Ordered.HIGHEST_PRECEDENCE)\n@Configuration\n@ConditionalOnWebApplication\n@ConditionalOnClass(DispatcherServlet.class)\n@AutoConfigureAfter(EmbeddedServletContainerAutoConfiguration.class)\npublic class DispatcherServletAutoConfiguration {\n\n\t/*\n\t * The bean name for a DispatcherServlet that will be mapped to the root URL "/"\n\t */\n\tpublic static final String DEFAULT_DISPATCHER_SERVLET_BEAN_NAME = "dispatcherServlet";\n\n\t@Configuration\n\t@Conditional(DefaultDispatcherServletCondition.class)\n\tprotected static class DispatcherServletConfiguration {\n\n\t\t@Autowired\n\t\tprivate ServerProperties server;\n\n\t\t@Bean(name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)\n\t\tpublic DispatcherServlet dispatcherServlet() {\n\t\t\treturn new DispatcherServlet();\n\t\t}\n\n\t\t@Bean\n\t\tpublic ServletRegistrationBean dispatcherServletRegistration() {\n\t\t\treturn new ServletRegistrationBean(dispatcherServlet(),\n\t\t\t\t\tthis.server.getServletPath());\n\t\t}\n\n\t}\n\n\tprivate static class DefaultDispatcherServletCondition extends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\n\t\t\tConfigurableListableBeanFactory beanFactory = context.getBeanFactory();\n\t\t\tList<String> servlets = Arrays.asList(beanFactory.getBeanNamesForType(\n\t\t\t\t\tDispatcherServlet.class, false, false));\n\t\t\tboolean containsDispatcherBean = beanFactory\n\t\t\t\t\t.containsBean(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);\n\t\t\tif (servlets.isEmpty()) {\n\t\t\t\tif (containsDispatcherBean) {\n\t\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t\t.noMatch("found no DispatcherServlet but a non-DispatcherServlet named "\n\t\t\t\t\t\t\t\t\t+ DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);\n\t\t\t\t}\n\t\t\t\treturn ConditionOutcome.match("no DispatcherServlet found");\n\t\t\t}\n\t\t\tif (servlets.contains(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)) {\n\t\t\t\treturn ConditionOutcome.noMatch("found DispatcherServlet named "\n\t\t\t\t\t\t+ DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);\n\t\t\t}\n\t\t\tif (containsDispatcherBean) {\n\t\t\t\treturn ConditionOutcome.noMatch("found non-DispatcherServlet named "\n\t\t\t\t\t\t+ DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);\n\t\t\t}\n\t\t\treturn ConditionOutcome\n\t\t\t\t\t.match("one or more DispatcherServlets found and none is named "\n\t\t\t\t\t\t\t+ DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
