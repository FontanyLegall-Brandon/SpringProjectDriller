@@ -0,0 +1,140 @@
+
+
+package org.springframework.boot.autoconfigure.amqp;
+
+import org.springframework.amqp.core.AmqpAdmin;
+import org.springframework.amqp.rabbit.connection.CachingConnectionFactory;
+import org.springframework.amqp.rabbit.core.RabbitAdmin;
+import org.springframework.amqp.rabbit.core.RabbitTemplate;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.context.properties.ConfigurationProperties;
+import org.springframework.boot.context.properties.EnableConfigurationProperties;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+
+@Configuration
+@ConditionalOnClass({ RabbitTemplate.class })
+@EnableConfigurationProperties
+public class RabbitTemplateAutoConfiguration {
+
+    @Bean
+    @ConditionalOnExpression()
+    @ConditionalOnMissingBean(AmqpAdmin.class)
+    public AmqpAdmin amqpAdmin(CachingConnectionFactory connectionFactory) {
+        return new RabbitAdmin(connectionFactory);
+    }
+
+    @Configuration
+    @ConditionalOnMissingBean(RabbitTemplate.class)
+    protected static class RabbitTemplateCreator {
+
+        @Autowired
+        CachingConnectionFactory connectionFactory;
+
+        @Bean
+        public RabbitTemplate rabbitTemplate() {
+            return new RabbitTemplate(this.connectionFactory);
+        }
+
+    }
+
+    @Configuration
+    @ConditionalOnMissingBean(CachingConnectionFactory.class)
+    @EnableConfigurationProperties(RabbitConnectionFactoryProperties.class)
+    protected static class RabbitConnectionFactoryCreator {
+
+        @Autowired
+        private RabbitConnectionFactoryProperties config;
+
+        @Bean
+        public CachingConnectionFactory connectionFactory() {
+            CachingConnectionFactory connectionFactory = new CachingConnectionFactory(this.config.getHost());
+            connectionFactory.setPort(this.config.getPort());
+            if (this.config.getUsername() != null) {
+                connectionFactory.setUsername(this.config.getUsername());
+            }
+            if (this.config.getPassword() != null) {
+                connectionFactory.setPassword(this.config.getPassword());
+            }
+            return connectionFactory;
+        }
+    }
+
+    @ConfigurationProperties(name = )
+    public static class RabbitConnectionFactoryProperties {
+
+        private String host = ;
+
+        private int port = 5672;
+
+        private String username;
+
+        private String password;
+
+        private boolean dynamic = true;
+
+        public String getHost() {
+            return host;
+        }
+
+        public void setHost(String host) {
+            this.host = host;
+        }
+
+        public int getPort() {
+            return port;
+        }
+
+        public void setPort(int port) {
+            this.port = port;
+        }
+
+        public String getUsername() {
+            return username;
+        }
+
+        public void setUsername(String username) {
+            this.username = username;
+        }
+
+        public String getPassword() {
+            return password;
+        }
+
+        public void setPassword(String password) {
+            this.password = password;
+        }
+
+        public boolean isDynamic() {
+            return dynamic;
+        }
+
+        public void setDynamic(boolean dynamic) {
+            this.dynamic = dynamic;
+        }
+
+    }
+}

