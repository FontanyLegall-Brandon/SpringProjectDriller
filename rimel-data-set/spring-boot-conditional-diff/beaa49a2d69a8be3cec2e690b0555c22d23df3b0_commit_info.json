{'_old_path': None, '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/amqp/RabbitMetricsConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2012-2018 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.autoconfigure.metrics.amqp;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.rabbitmq.client.ConnectionFactory;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Tag;\n+import io.micrometer.core.instrument.Tags;\n+\n+import org.springframework.amqp.rabbit.connection.AbstractConnectionFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.actuate.metrics.amqp.RabbitMetrics;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Configure metrics for all available {@link ConnectionFactory connection factories}.\n+ *\n+ * @author Stephane Nicoll\n+ * @since 2.0.0\n+ */\n+@Configuration\n+@ConditionalOnClass({ ConnectionFactory.class, AbstractConnectionFactory.class })\n+@ConditionalOnBean(AbstractConnectionFactory.class)\n+@ConditionalOnProperty(value = "management.metrics.rabbitmq.instrument", matchIfMissing = true)\n+@EnableConfigurationProperties(RabbitMetricsProperties.class)\n+public class RabbitMetricsConfiguration {\n+\n+\tprivate static final String CONNECTION_FACTORY_SUFFIX = "connectionFactory";\n+\n+\tprivate final MeterRegistry registry;\n+\n+\tprivate final String metricName;\n+\n+\tpublic RabbitMetricsConfiguration(MeterRegistry registry,\n+\t\t\tRabbitMetricsProperties rabbitMetricsProperties) {\n+\t\tthis.registry = registry;\n+\t\tthis.metricName = rabbitMetricsProperties.getMetricName();\n+\t}\n+\n+\t@Autowired\n+\tpublic void bindConnectionFactoriesToRegistry(\n+\t\t\tMap<String, AbstractConnectionFactory> connectionFactories) {\n+\t\tconnectionFactories.forEach(this::bindConnectionFactoryToRegistry);\n+\t}\n+\n+\tprivate void bindConnectionFactoryToRegistry(String beanName,\n+\t\t\tAbstractConnectionFactory connectionFactory) {\n+\t\tList<Tag> tags = Tags.zip("name", getConnectionFactoryName(beanName));\n+\t\tnew RabbitMetrics(connectionFactory.getRabbitConnectionFactory(), this.metricName,\n+\t\t\t\ttags).bindTo(this.registry);\n+\t}\n+\n+\t/**\n+\t * Get the name of a ConnectionFactory based on its {@code beanName}.\n+\t * @param beanName the name of the connection factory bean\n+\t * @return a name for the given connection factory\n+\t */\n+\tprivate String getConnectionFactoryName(String beanName) {\n+\t\tif (beanName.length() > CONNECTION_FACTORY_SUFFIX.length()\n+\t\t\t\t&& StringUtils.endsWithIgnoreCase(beanName, CONNECTION_FACTORY_SUFFIX)) {\n+\t\t\treturn beanName.substring(0, beanName.length() - CONNECTION_FACTORY_SUFFIX.length());\n+\t\t}\n+\t\treturn beanName;\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics.amqp;\n\nimport java.util.List;\nimport java.util.Map;\n\nimport com.rabbitmq.client.ConnectionFactory;\nimport io.micrometer.core.instrument.MeterRegistry;\nimport io.micrometer.core.instrument.Tag;\nimport io.micrometer.core.instrument.Tags;\n\nimport org.springframework.amqp.rabbit.connection.AbstractConnectionFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuate.metrics.amqp.RabbitMetrics;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.util.StringUtils;\n\n/**\n * Configure metrics for all available {@link ConnectionFactory connection factories}.\n *\n * @author Stephane Nicoll\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass({ ConnectionFactory.class, AbstractConnectionFactory.class })\n@ConditionalOnBean(AbstractConnectionFactory.class)\n@ConditionalOnProperty(value = "management.metrics.rabbitmq.instrument", matchIfMissing = true)\n@EnableConfigurationProperties(RabbitMetricsProperties.class)\npublic class RabbitMetricsConfiguration {\n\n\tprivate static final String CONNECTION_FACTORY_SUFFIX = "connectionFactory";\n\n\tprivate final MeterRegistry registry;\n\n\tprivate final String metricName;\n\n\tpublic RabbitMetricsConfiguration(MeterRegistry registry,\n\t\t\tRabbitMetricsProperties rabbitMetricsProperties) {\n\t\tthis.registry = registry;\n\t\tthis.metricName = rabbitMetricsProperties.getMetricName();\n\t}\n\n\t@Autowired\n\tpublic void bindConnectionFactoriesToRegistry(\n\t\t\tMap<String, AbstractConnectionFactory> connectionFactories) {\n\t\tconnectionFactories.forEach(this::bindConnectionFactoryToRegistry);\n\t}\n\n\tprivate void bindConnectionFactoryToRegistry(String beanName,\n\t\t\tAbstractConnectionFactory connectionFactory) {\n\t\tList<Tag> tags = Tags.zip("name", getConnectionFactoryName(beanName));\n\t\tnew RabbitMetrics(connectionFactory.getRabbitConnectionFactory(), this.metricName,\n\t\t\t\ttags).bindTo(this.registry);\n\t}\n\n\t/**\n\t * Get the name of a ConnectionFactory based on its {@code beanName}.\n\t * @param beanName the name of the connection factory bean\n\t * @return a name for the given connection factory\n\t */\n\tprivate String getConnectionFactoryName(String beanName) {\n\t\tif (beanName.length() > CONNECTION_FACTORY_SUFFIX.length()\n\t\t\t\t&& StringUtils.endsWithIgnoreCase(beanName, CONNECTION_FACTORY_SUFFIX)) {\n\t\t\treturn beanName.substring(0, beanName.length() - CONNECTION_FACTORY_SUFFIX.length());\n\t\t}\n\t\treturn beanName;\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
