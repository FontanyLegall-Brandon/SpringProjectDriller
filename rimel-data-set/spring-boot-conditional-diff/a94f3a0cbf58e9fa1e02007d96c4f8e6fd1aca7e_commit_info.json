{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/EmbeddedServletContainerAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/EmbeddedServletContainerAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -21,6 +21,7 @@ import javax.servlet.Servlet;\n import org.apache.catalina.startup.Tomcat;\n import org.eclipse.jetty.server.Server;\n import org.eclipse.jetty.util.Loader;\n+import org.eclipse.jetty.webapp.WebAppContext;\n import org.springframework.beans.BeansException;\n import org.springframework.beans.factory.BeanFactory;\n import org.springframework.beans.factory.BeanFactoryAware;\n@@ -82,7 +83,7 @@ public class EmbeddedServletContainerAutoConfiguration {\n \t * Nested configuration if Jetty is being used.\n \t */\n \t@Configuration\n-\t@ConditionalOnClass({ Servlet.class, Server.class, Loader.class })\n+\t@ConditionalOnClass({ Servlet.class, Server.class, Loader.class, WebAppContext.class })\n \t@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)\n \tpublic static class EmbeddedJetty {\n \n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web;\n\nimport javax.servlet.Servlet;\n\nimport org.apache.catalina.startup.Tomcat;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.util.Loader;\nimport org.eclipse.jetty.webapp.WebAppContext;\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistry;\nimport org.springframework.beans.factory.support.RootBeanDefinition;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration.EmbeddedServletContainerCustomizerBeanPostProcessorRegistrar;\nimport org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizerBeanPostProcessor;\nimport org.springframework.boot.context.embedded.EmbeddedServletContainerFactory;\nimport org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainerFactory;\nimport org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;\nimport org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.ImportBeanDefinitionRegistrar;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.type.AnnotationMetadata;\nimport org.springframework.util.ObjectUtils;\nimport org.xnio.SslClientAuthMode;\n\nimport io.undertow.Undertow;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for an embedded servlet containers.\n *\n * @author Phillip Webb\n * @author Dave Syer\n * @author Ivan Sopov\n */\n@Order(Ordered.HIGHEST_PRECEDENCE)\n@Configuration\n@ConditionalOnWebApplication\n@Import(EmbeddedServletContainerCustomizerBeanPostProcessorRegistrar.class)\npublic class EmbeddedServletContainerAutoConfiguration {\n\n\t/**\n\t * Nested configuration for if Tomcat is being used.\n\t */\n\t@Configuration\n\t@ConditionalOnClass({ Servlet.class, Tomcat.class })\n\t@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)\n\tpublic static class EmbeddedTomcat {\n\n\t\t@Bean\n\t\tpublic TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() {\n\t\t\treturn new TomcatEmbeddedServletContainerFactory();\n\t\t}\n\n\t}\n\n\t/**\n\t * Nested configuration if Jetty is being used.\n\t */\n\t@Configuration\n\t@ConditionalOnClass({ Servlet.class, Server.class, Loader.class, WebAppContext.class })\n\t@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)\n\tpublic static class EmbeddedJetty {\n\n\t\t@Bean\n\t\tpublic JettyEmbeddedServletContainerFactory jettyEmbeddedServletContainerFactory() {\n\t\t\treturn new JettyEmbeddedServletContainerFactory();\n\t\t}\n\n\t}\n\n\t/**\n\t * Nested configuration if Undertow is being used.\n\t */\n\t@Configuration\n\t@ConditionalOnClass({ Servlet.class, Undertow.class, SslClientAuthMode.class })\n\t@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)\n\tpublic static class EmbeddedUndertow {\n\n\t\t@Bean\n\t\tpublic UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory() {\n\t\t\treturn new UndertowEmbeddedServletContainerFactory();\n\t\t}\n\n\t}\n\n\t/**\n\t * Registers a {@link EmbeddedServletContainerCustomizerBeanPostProcessor}. Registered\n\t * via {@link ImportBeanDefinitionRegistrar} for early registration.\n\t */\n\tpublic static class EmbeddedServletContainerCustomizerBeanPostProcessorRegistrar\n\t\t\timplements ImportBeanDefinitionRegistrar, BeanFactoryAware {\n\n\t\tprivate ConfigurableListableBeanFactory beanFactory;\n\n\t\t@Override\n\t\tpublic void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n\t\t\tif (beanFactory instanceof ConfigurableListableBeanFactory) {\n\t\t\t\tthis.beanFactory = (ConfigurableListableBeanFactory) beanFactory;\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void registerBeanDefinitions(AnnotationMetadata importingClassMetadata,\n\t\t\t\tBeanDefinitionRegistry registry) {\n\t\t\tif (this.beanFactory == null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (ObjectUtils.isEmpty(this.beanFactory.getBeanNamesForType(\n\t\t\t\t\tEmbeddedServletContainerCustomizerBeanPostProcessor.class, true,\n\t\t\t\t\tfalse))) {\n\t\t\t\tregistry.registerBeanDefinition(\n\t\t\t\t\t\t"embeddedServletContainerCustomizerBeanPostProcessor",\n\t\t\t\t\t\tnew RootBeanDefinition(\n\t\t\t\t\t\t\t\tEmbeddedServletContainerCustomizerBeanPostProcessor.class));\n\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web;\n\nimport javax.servlet.Servlet;\n\nimport org.apache.catalina.startup.Tomcat;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.util.Loader;\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistry;\nimport org.springframework.beans.factory.support.RootBeanDefinition;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration.EmbeddedServletContainerCustomizerBeanPostProcessorRegistrar;\nimport org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizerBeanPostProcessor;\nimport org.springframework.boot.context.embedded.EmbeddedServletContainerFactory;\nimport org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainerFactory;\nimport org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;\nimport org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.ImportBeanDefinitionRegistrar;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.type.AnnotationMetadata;\nimport org.springframework.util.ObjectUtils;\nimport org.xnio.SslClientAuthMode;\n\nimport io.undertow.Undertow;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for an embedded servlet containers.\n *\n * @author Phillip Webb\n * @author Dave Syer\n * @author Ivan Sopov\n */\n@Order(Ordered.HIGHEST_PRECEDENCE)\n@Configuration\n@ConditionalOnWebApplication\n@Import(EmbeddedServletContainerCustomizerBeanPostProcessorRegistrar.class)\npublic class EmbeddedServletContainerAutoConfiguration {\n\n\t/**\n\t * Nested configuration for if Tomcat is being used.\n\t */\n\t@Configuration\n\t@ConditionalOnClass({ Servlet.class, Tomcat.class })\n\t@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)\n\tpublic static class EmbeddedTomcat {\n\n\t\t@Bean\n\t\tpublic TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() {\n\t\t\treturn new TomcatEmbeddedServletContainerFactory();\n\t\t}\n\n\t}\n\n\t/**\n\t * Nested configuration if Jetty is being used.\n\t */\n\t@Configuration\n\t@ConditionalOnClass({ Servlet.class, Server.class, Loader.class })\n\t@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)\n\tpublic static class EmbeddedJetty {\n\n\t\t@Bean\n\t\tpublic JettyEmbeddedServletContainerFactory jettyEmbeddedServletContainerFactory() {\n\t\t\treturn new JettyEmbeddedServletContainerFactory();\n\t\t}\n\n\t}\n\n\t/**\n\t * Nested configuration if Undertow is being used.\n\t */\n\t@Configuration\n\t@ConditionalOnClass({ Servlet.class, Undertow.class, SslClientAuthMode.class })\n\t@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)\n\tpublic static class EmbeddedUndertow {\n\n\t\t@Bean\n\t\tpublic UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory() {\n\t\t\treturn new UndertowEmbeddedServletContainerFactory();\n\t\t}\n\n\t}\n\n\t/**\n\t * Registers a {@link EmbeddedServletContainerCustomizerBeanPostProcessor}. Registered\n\t * via {@link ImportBeanDefinitionRegistrar} for early registration.\n\t */\n\tpublic static class EmbeddedServletContainerCustomizerBeanPostProcessorRegistrar\n\t\t\timplements ImportBeanDefinitionRegistrar, BeanFactoryAware {\n\n\t\tprivate ConfigurableListableBeanFactory beanFactory;\n\n\t\t@Override\n\t\tpublic void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n\t\t\tif (beanFactory instanceof ConfigurableListableBeanFactory) {\n\t\t\t\tthis.beanFactory = (ConfigurableListableBeanFactory) beanFactory;\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void registerBeanDefinitions(AnnotationMetadata importingClassMetadata,\n\t\t\t\tBeanDefinitionRegistry registry) {\n\t\t\tif (this.beanFactory == null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (ObjectUtils.isEmpty(this.beanFactory.getBeanNamesForType(\n\t\t\t\t\tEmbeddedServletContainerCustomizerBeanPostProcessor.class, true,\n\t\t\t\t\tfalse))) {\n\t\t\t\tregistry.registerBeanDefinition(\n\t\t\t\t\t\t"embeddedServletContainerCustomizerBeanPostProcessor",\n\t\t\t\t\t\tnew RootBeanDefinition(\n\t\t\t\t\t\t\t\tEmbeddedServletContainerCustomizerBeanPostProcessor.class));\n\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
