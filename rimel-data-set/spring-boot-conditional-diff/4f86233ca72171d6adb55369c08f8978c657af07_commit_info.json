{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2018 the original author or authors.\n+ * Copyright 2012-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -39,6 +39,7 @@ import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplicat\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\n import org.springframework.boot.autoconfigure.domain.EntityScanPackages;\n import org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers;\n+import org.springframework.boot.autoconfigure.web.servlet.ConditionalOnMissingFilterBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;\n import org.springframework.context.annotation.Bean;\n@@ -211,6 +212,7 @@ public abstract class JpaBaseConfiguration implements BeanFactoryAware {\n \t@ConditionalOnClass(WebMvcConfigurer.class)\n \t@ConditionalOnMissingBean({ OpenEntityManagerInViewInterceptor.class,\n \t\t\tOpenEntityManagerInViewFilter.class })\n+\t@ConditionalOnMissingFilterBean(OpenEntityManagerInViewFilter.class)\n \t@ConditionalOnProperty(prefix = "spring.jpa", name = "open-in-view", havingValue = "true", matchIfMissing = true)\n \tprotected static class JpaWebConfiguration {\n \n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.orm.jpa;\n\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.persistence.EntityManagerFactory;\nimport javax.sql.DataSource;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.boot.autoconfigure.AutoConfigurationPackages;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.autoconfigure.domain.EntityScanPackages;\nimport org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers;\nimport org.springframework.boot.autoconfigure.web.servlet.ConditionalOnMissingFilterBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.orm.jpa.JpaTransactionManager;\nimport org.springframework.orm.jpa.JpaVendorAdapter;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.orm.jpa.persistenceunit.PersistenceUnitManager;\nimport org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter;\nimport org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor;\nimport org.springframework.orm.jpa.vendor.AbstractJpaVendorAdapter;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.transaction.jta.JtaTransactionManager;\nimport org.springframework.util.ObjectUtils;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n/**\n * Base {@link EnableAutoConfiguration Auto-configuration} for JPA.\n *\n * @author Phillip Webb\n * @author Dave Syer\n * @author Oliver Gierke\n * @author Andy Wilkinson\n * @author Kazuki Shimizu\n * @author Eddú Meléndez\n */\n@Configuration\n@EnableConfigurationProperties(JpaProperties.class)\n@Import(DataSourceInitializedPublisher.Registrar.class)\npublic abstract class JpaBaseConfiguration implements BeanFactoryAware {\n\n\tprivate final DataSource dataSource;\n\n\tprivate final JpaProperties properties;\n\n\tprivate final JtaTransactionManager jtaTransactionManager;\n\n\tprivate final TransactionManagerCustomizers transactionManagerCustomizers;\n\n\tprivate ConfigurableListableBeanFactory beanFactory;\n\n\tprotected JpaBaseConfiguration(DataSource dataSource, JpaProperties properties,\n\t\t\tObjectProvider<JtaTransactionManager> jtaTransactionManager,\n\t\t\tObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers) {\n\t\tthis.dataSource = dataSource;\n\t\tthis.properties = properties;\n\t\tthis.jtaTransactionManager = jtaTransactionManager.getIfAvailable();\n\t\tthis.transactionManagerCustomizers = transactionManagerCustomizers\n\t\t\t\t.getIfAvailable();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic PlatformTransactionManager transactionManager() {\n\t\tJpaTransactionManager transactionManager = new JpaTransactionManager();\n\t\tif (this.transactionManagerCustomizers != null) {\n\t\t\tthis.transactionManagerCustomizers.customize(transactionManager);\n\t\t}\n\t\treturn transactionManager;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic JpaVendorAdapter jpaVendorAdapter() {\n\t\tAbstractJpaVendorAdapter adapter = createJpaVendorAdapter();\n\t\tadapter.setShowSql(this.properties.isShowSql());\n\t\tadapter.setDatabase(this.properties.determineDatabase(this.dataSource));\n\t\tadapter.setDatabasePlatform(this.properties.getDatabasePlatform());\n\t\tadapter.setGenerateDdl(this.properties.isGenerateDdl());\n\t\treturn adapter;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic EntityManagerFactoryBuilder entityManagerFactoryBuilder(\n\t\t\tJpaVendorAdapter jpaVendorAdapter,\n\t\t\tObjectProvider<PersistenceUnitManager> persistenceUnitManager,\n\t\t\tObjectProvider<EntityManagerFactoryBuilderCustomizer> customizers) {\n\t\tEntityManagerFactoryBuilder builder = new EntityManagerFactoryBuilder(\n\t\t\t\tjpaVendorAdapter, this.properties.getProperties(),\n\t\t\t\tpersistenceUnitManager.getIfAvailable());\n\t\tcustomizers.orderedStream()\n\t\t\t\t.forEach((customizer) -> customizer.customize(builder));\n\t\treturn builder;\n\t}\n\n\t@Bean\n\t@Primary\n\t@ConditionalOnMissingBean({ LocalContainerEntityManagerFactoryBean.class,\n\t\t\tEntityManagerFactory.class })\n\tpublic LocalContainerEntityManagerFactoryBean entityManagerFactory(\n\t\t\tEntityManagerFactoryBuilder factoryBuilder) {\n\t\tMap<String, Object> vendorProperties = getVendorProperties();\n\t\tcustomizeVendorProperties(vendorProperties);\n\t\treturn factoryBuilder.dataSource(this.dataSource).packages(getPackagesToScan())\n\t\t\t\t.properties(vendorProperties).mappingResources(getMappingResources())\n\t\t\t\t.jta(isJta()).build();\n\t}\n\n\tprotected abstract AbstractJpaVendorAdapter createJpaVendorAdapter();\n\n\tprotected abstract Map<String, Object> getVendorProperties();\n\n\t/**\n\t * Customize vendor properties before they are used. Allows for post processing (for\n\t * example to configure JTA specific settings).\n\t * @param vendorProperties the vendor properties to customize\n\t */\n\tprotected void customizeVendorProperties(Map<String, Object> vendorProperties) {\n\t}\n\n\tprotected String[] getPackagesToScan() {\n\t\tList<String> packages = EntityScanPackages.get(this.beanFactory)\n\t\t\t\t.getPackageNames();\n\t\tif (packages.isEmpty() && AutoConfigurationPackages.has(this.beanFactory)) {\n\t\t\tpackages = AutoConfigurationPackages.get(this.beanFactory);\n\t\t}\n\t\treturn StringUtils.toStringArray(packages);\n\t}\n\n\tprivate String[] getMappingResources() {\n\t\tList<String> mappingResources = this.properties.getMappingResources();\n\t\treturn (!ObjectUtils.isEmpty(mappingResources)\n\t\t\t\t? StringUtils.toStringArray(mappingResources) : null);\n\t}\n\n\t/**\n\t * Return the JTA transaction manager.\n\t * @return the transaction manager or {@code null}\n\t */\n\tprotected JtaTransactionManager getJtaTransactionManager() {\n\t\treturn this.jtaTransactionManager;\n\t}\n\n\t/**\n\t * Returns if a JTA {@link PlatformTransactionManager} is being used.\n\t * @return if a JTA transaction manager is being used\n\t */\n\tprotected final boolean isJta() {\n\t\treturn (this.jtaTransactionManager != null);\n\t}\n\n\t/**\n\t * Return the {@link JpaProperties}.\n\t * @return the properties\n\t */\n\tprotected final JpaProperties getProperties() {\n\t\treturn this.properties;\n\t}\n\n\t/**\n\t * Return the {@link DataSource}.\n\t * @return the data source\n\t */\n\tprotected final DataSource getDataSource() {\n\t\treturn this.dataSource;\n\t}\n\n\t@Override\n\tpublic void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n\t\tthis.beanFactory = (ConfigurableListableBeanFactory) beanFactory;\n\t}\n\n\t@Configuration\n\t@ConditionalOnWebApplication(type = Type.SERVLET)\n\t@ConditionalOnClass(WebMvcConfigurer.class)\n\t@ConditionalOnMissingBean({ OpenEntityManagerInViewInterceptor.class,\n\t\t\tOpenEntityManagerInViewFilter.class })\n\t@ConditionalOnMissingFilterBean(OpenEntityManagerInViewFilter.class)\n\t@ConditionalOnProperty(prefix = "spring.jpa", name = "open-in-view", havingValue = "true", matchIfMissing = true)\n\tprotected static class JpaWebConfiguration {\n\n\t\t// Defined as a nested config to ensure WebMvcConfigurerAdapter is not read when\n\t\t// not on the classpath\n\t\t@Configuration\n\t\tprotected static class JpaWebMvcConfiguration implements WebMvcConfigurer {\n\n\t\t\tprivate static final Log logger = LogFactory\n\t\t\t\t\t.getLog(JpaWebMvcConfiguration.class);\n\n\t\t\tprivate final JpaProperties jpaProperties;\n\n\t\t\tprotected JpaWebMvcConfiguration(JpaProperties jpaProperties) {\n\t\t\t\tthis.jpaProperties = jpaProperties;\n\t\t\t}\n\n\t\t\t@Bean\n\t\t\tpublic OpenEntityManagerInViewInterceptor openEntityManagerInViewInterceptor() {\n\t\t\t\tif (this.jpaProperties.getOpenInView() == null) {\n\t\t\t\t\tlogger.warn("spring.jpa.open-in-view is enabled by default. "\n\t\t\t\t\t\t\t+ "Therefore, database queries may be performed during view "\n\t\t\t\t\t\t\t+ "rendering. Explicitly configure "\n\t\t\t\t\t\t\t+ "spring.jpa.open-in-view to disable this warning");\n\t\t\t\t}\n\t\t\t\treturn new OpenEntityManagerInViewInterceptor();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void addInterceptors(InterceptorRegistry registry) {\n\t\t\t\tregistry.addWebRequestInterceptor(openEntityManagerInViewInterceptor());\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.orm.jpa;\n\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.persistence.EntityManagerFactory;\nimport javax.sql.DataSource;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.boot.autoconfigure.AutoConfigurationPackages;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.autoconfigure.domain.EntityScanPackages;\nimport org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.orm.jpa.JpaTransactionManager;\nimport org.springframework.orm.jpa.JpaVendorAdapter;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.orm.jpa.persistenceunit.PersistenceUnitManager;\nimport org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter;\nimport org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor;\nimport org.springframework.orm.jpa.vendor.AbstractJpaVendorAdapter;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.transaction.jta.JtaTransactionManager;\nimport org.springframework.util.ObjectUtils;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n/**\n * Base {@link EnableAutoConfiguration Auto-configuration} for JPA.\n *\n * @author Phillip Webb\n * @author Dave Syer\n * @author Oliver Gierke\n * @author Andy Wilkinson\n * @author Kazuki Shimizu\n * @author Eddú Meléndez\n */\n@Configuration\n@EnableConfigurationProperties(JpaProperties.class)\n@Import(DataSourceInitializedPublisher.Registrar.class)\npublic abstract class JpaBaseConfiguration implements BeanFactoryAware {\n\n\tprivate final DataSource dataSource;\n\n\tprivate final JpaProperties properties;\n\n\tprivate final JtaTransactionManager jtaTransactionManager;\n\n\tprivate final TransactionManagerCustomizers transactionManagerCustomizers;\n\n\tprivate ConfigurableListableBeanFactory beanFactory;\n\n\tprotected JpaBaseConfiguration(DataSource dataSource, JpaProperties properties,\n\t\t\tObjectProvider<JtaTransactionManager> jtaTransactionManager,\n\t\t\tObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers) {\n\t\tthis.dataSource = dataSource;\n\t\tthis.properties = properties;\n\t\tthis.jtaTransactionManager = jtaTransactionManager.getIfAvailable();\n\t\tthis.transactionManagerCustomizers = transactionManagerCustomizers\n\t\t\t\t.getIfAvailable();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic PlatformTransactionManager transactionManager() {\n\t\tJpaTransactionManager transactionManager = new JpaTransactionManager();\n\t\tif (this.transactionManagerCustomizers != null) {\n\t\t\tthis.transactionManagerCustomizers.customize(transactionManager);\n\t\t}\n\t\treturn transactionManager;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic JpaVendorAdapter jpaVendorAdapter() {\n\t\tAbstractJpaVendorAdapter adapter = createJpaVendorAdapter();\n\t\tadapter.setShowSql(this.properties.isShowSql());\n\t\tadapter.setDatabase(this.properties.determineDatabase(this.dataSource));\n\t\tadapter.setDatabasePlatform(this.properties.getDatabasePlatform());\n\t\tadapter.setGenerateDdl(this.properties.isGenerateDdl());\n\t\treturn adapter;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic EntityManagerFactoryBuilder entityManagerFactoryBuilder(\n\t\t\tJpaVendorAdapter jpaVendorAdapter,\n\t\t\tObjectProvider<PersistenceUnitManager> persistenceUnitManager,\n\t\t\tObjectProvider<EntityManagerFactoryBuilderCustomizer> customizers) {\n\t\tEntityManagerFactoryBuilder builder = new EntityManagerFactoryBuilder(\n\t\t\t\tjpaVendorAdapter, this.properties.getProperties(),\n\t\t\t\tpersistenceUnitManager.getIfAvailable());\n\t\tcustomizers.orderedStream()\n\t\t\t\t.forEach((customizer) -> customizer.customize(builder));\n\t\treturn builder;\n\t}\n\n\t@Bean\n\t@Primary\n\t@ConditionalOnMissingBean({ LocalContainerEntityManagerFactoryBean.class,\n\t\t\tEntityManagerFactory.class })\n\tpublic LocalContainerEntityManagerFactoryBean entityManagerFactory(\n\t\t\tEntityManagerFactoryBuilder factoryBuilder) {\n\t\tMap<String, Object> vendorProperties = getVendorProperties();\n\t\tcustomizeVendorProperties(vendorProperties);\n\t\treturn factoryBuilder.dataSource(this.dataSource).packages(getPackagesToScan())\n\t\t\t\t.properties(vendorProperties).mappingResources(getMappingResources())\n\t\t\t\t.jta(isJta()).build();\n\t}\n\n\tprotected abstract AbstractJpaVendorAdapter createJpaVendorAdapter();\n\n\tprotected abstract Map<String, Object> getVendorProperties();\n\n\t/**\n\t * Customize vendor properties before they are used. Allows for post processing (for\n\t * example to configure JTA specific settings).\n\t * @param vendorProperties the vendor properties to customize\n\t */\n\tprotected void customizeVendorProperties(Map<String, Object> vendorProperties) {\n\t}\n\n\tprotected String[] getPackagesToScan() {\n\t\tList<String> packages = EntityScanPackages.get(this.beanFactory)\n\t\t\t\t.getPackageNames();\n\t\tif (packages.isEmpty() && AutoConfigurationPackages.has(this.beanFactory)) {\n\t\t\tpackages = AutoConfigurationPackages.get(this.beanFactory);\n\t\t}\n\t\treturn StringUtils.toStringArray(packages);\n\t}\n\n\tprivate String[] getMappingResources() {\n\t\tList<String> mappingResources = this.properties.getMappingResources();\n\t\treturn (!ObjectUtils.isEmpty(mappingResources)\n\t\t\t\t? StringUtils.toStringArray(mappingResources) : null);\n\t}\n\n\t/**\n\t * Return the JTA transaction manager.\n\t * @return the transaction manager or {@code null}\n\t */\n\tprotected JtaTransactionManager getJtaTransactionManager() {\n\t\treturn this.jtaTransactionManager;\n\t}\n\n\t/**\n\t * Returns if a JTA {@link PlatformTransactionManager} is being used.\n\t * @return if a JTA transaction manager is being used\n\t */\n\tprotected final boolean isJta() {\n\t\treturn (this.jtaTransactionManager != null);\n\t}\n\n\t/**\n\t * Return the {@link JpaProperties}.\n\t * @return the properties\n\t */\n\tprotected final JpaProperties getProperties() {\n\t\treturn this.properties;\n\t}\n\n\t/**\n\t * Return the {@link DataSource}.\n\t * @return the data source\n\t */\n\tprotected final DataSource getDataSource() {\n\t\treturn this.dataSource;\n\t}\n\n\t@Override\n\tpublic void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n\t\tthis.beanFactory = (ConfigurableListableBeanFactory) beanFactory;\n\t}\n\n\t@Configuration\n\t@ConditionalOnWebApplication(type = Type.SERVLET)\n\t@ConditionalOnClass(WebMvcConfigurer.class)\n\t@ConditionalOnMissingBean({ OpenEntityManagerInViewInterceptor.class,\n\t\t\tOpenEntityManagerInViewFilter.class })\n\t@ConditionalOnProperty(prefix = "spring.jpa", name = "open-in-view", havingValue = "true", matchIfMissing = true)\n\tprotected static class JpaWebConfiguration {\n\n\t\t// Defined as a nested config to ensure WebMvcConfigurerAdapter is not read when\n\t\t// not on the classpath\n\t\t@Configuration\n\t\tprotected static class JpaWebMvcConfiguration implements WebMvcConfigurer {\n\n\t\t\tprivate static final Log logger = LogFactory\n\t\t\t\t\t.getLog(JpaWebMvcConfiguration.class);\n\n\t\t\tprivate final JpaProperties jpaProperties;\n\n\t\t\tprotected JpaWebMvcConfiguration(JpaProperties jpaProperties) {\n\t\t\t\tthis.jpaProperties = jpaProperties;\n\t\t\t}\n\n\t\t\t@Bean\n\t\t\tpublic OpenEntityManagerInViewInterceptor openEntityManagerInViewInterceptor() {\n\t\t\t\tif (this.jpaProperties.getOpenInView() == null) {\n\t\t\t\t\tlogger.warn("spring.jpa.open-in-view is enabled by default. "\n\t\t\t\t\t\t\t+ "Therefore, database queries may be performed during view "\n\t\t\t\t\t\t\t+ "rendering. Explicitly configure "\n\t\t\t\t\t\t\t+ "spring.jpa.open-in-view to disable this warning");\n\t\t\t\t}\n\t\t\t\treturn new OpenEntityManagerInViewInterceptor();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void addInterceptors(InterceptorRegistry registry) {\n\t\t\t\tregistry.addWebRequestInterceptor(openEntityManagerInViewInterceptor());\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
