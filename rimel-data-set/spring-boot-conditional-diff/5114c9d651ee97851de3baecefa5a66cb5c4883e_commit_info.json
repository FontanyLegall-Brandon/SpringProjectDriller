{'_old_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnExpressionTests.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnExpressionTests.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2016 the original author or authors.\n+ * Copyright 2012-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -28,13 +28,14 @@ import static org.assertj.core.api.Assertions.assertThat;\n  * Tests for {@link ConditionalOnExpression}.\n  *\n  * @author Dave Syer\n+ * @author Stephane Nicoll\n  */\n public class ConditionalOnExpressionTests {\n \n \tprivate final AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n \n \t@Test\n-\tpublic void testResourceExists() {\n+\tpublic void expressionIsTrue() {\n \t\tthis.context.register(BasicConfiguration.class);\n \t\tthis.context.refresh();\n \t\tassertThat(this.context.containsBean("foo")).isTrue();\n@@ -42,12 +43,19 @@ public class ConditionalOnExpressionTests {\n \t}\n \n \t@Test\n-\tpublic void testResourceNotExists() {\n+\tpublic void expressionIsFalse() {\n \t\tthis.context.register(MissingConfiguration.class);\n \t\tthis.context.refresh();\n \t\tassertThat(this.context.containsBean("foo")).isFalse();\n \t}\n \n+\t@Test\n+\tpublic void expressionIsNull() {\n+\t\tthis.context.register(NullConfiguration.class);\n+\t\tthis.context.refresh();\n+\t\tassertThat(this.context.containsBean("foo")).isFalse();\n+\t}\n+\n \t@Configuration\n \t@ConditionalOnExpression("false")\n \tprotected static class MissingConfiguration {\n@@ -70,4 +78,15 @@ public class ConditionalOnExpressionTests {\n \n \t}\n \n+\t@Configuration\n+\t@ConditionalOnExpression("true ? null : false")\n+\tprotected static class NullConfiguration {\n+\n+\t\t@Bean\n+\t\tpublic String foo() {\n+\t\t\treturn "foo";\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport org.junit.Test;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link ConditionalOnExpression}.\n *\n * @author Dave Syer\n * @author Stephane Nicoll\n */\npublic class ConditionalOnExpressionTests {\n\n\tprivate final AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n\n\t@Test\n\tpublic void expressionIsTrue() {\n\t\tthis.context.register(BasicConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t\tassertThat(this.context.getBean("foo")).isEqualTo("foo");\n\t}\n\n\t@Test\n\tpublic void expressionIsFalse() {\n\t\tthis.context.register(MissingConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.containsBean("foo")).isFalse();\n\t}\n\n\t@Test\n\tpublic void expressionIsNull() {\n\t\tthis.context.register(NullConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.containsBean("foo")).isFalse();\n\t}\n\n\t@Configuration\n\t@ConditionalOnExpression("false")\n\tprotected static class MissingConfiguration {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnExpression("true")\n\tprotected static class BasicConfiguration {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnExpression("true ? null : false")\n\tprotected static class NullConfiguration {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport org.junit.Test;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link ConditionalOnExpression}.\n *\n * @author Dave Syer\n */\npublic class ConditionalOnExpressionTests {\n\n\tprivate final AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n\n\t@Test\n\tpublic void testResourceExists() {\n\t\tthis.context.register(BasicConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t\tassertThat(this.context.getBean("foo")).isEqualTo("foo");\n\t}\n\n\t@Test\n\tpublic void testResourceNotExists() {\n\t\tthis.context.register(MissingConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.containsBean("foo")).isFalse();\n\t}\n\n\t@Configuration\n\t@ConditionalOnExpression("false")\n\tprotected static class MissingConfiguration {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnExpression("true")\n\tprotected static class BasicConfiguration {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
