{'_old_path': PosixPath('spring-bootstrap-service/src/main/java/org/springframework/bootstrap/autoconfigure/service/TraceAutoConfiguration.java'), '_new_path': PosixPath('spring-bootstrap-service/src/main/java/org/springframework/bootstrap/autoconfigure/service/TraceConfiguration.java'), 'change_type': <ModificationType.RENAME: 3>, 'diff': '@@ -41,25 +41,25 @@ import org.springframework.web.servlet.DispatcherServlet;\n @Configuration\n @ConditionalOnClass({ Servlet.class, DispatcherServlet.class })\n @ConditionalOnMissingBean({ TraceEndpoint.class })\n-public class TraceAutoConfiguration {\n+public class TraceConfiguration {\n \n-\t@Autowired(required = false)\n-\tprivate TraceRepository traceRepository = new InMemoryTraceRepository();\n-\n-\t@Bean\n-\t@ConditionalOnMissingBean(TraceRepository.class)\n-\tprotected TraceRepository traceRepository() {\n-\t\treturn this.traceRepository;\n-\t}\n+\t@Autowired\n+\tprivate TraceRepository traceRepository;\n \n \t@Configuration\n \t@ConditionalOnClass(SecurityFilterChain.class)\n \tpublic static class SecurityFilterPostProcessorConfiguration {\n \n-\t\t@Autowired\n-\t\tprivate TraceRepository traceRepository;\n+\t\t@Autowired(required = false)\n+\t\tprivate TraceRepository traceRepository = new InMemoryTraceRepository();\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(TraceRepository.class)\n+\t\tprotected TraceRepository traceRepository() {\n+\t\t\treturn this.traceRepository;\n+\t\t}\n \n-\t\t@Value("${container.dump_requests:false}")\n+\t\t@Value("${management.dump_requests:false}")\n \t\tprivate boolean dumpRequests;\n \n \t\t@Bean\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.bootstrap.autoconfigure.service;\n\nimport javax.servlet.Servlet;\n\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.bootstrap.context.annotation.ConditionalOnClass;\nimport org.springframework.bootstrap.context.annotation.ConditionalOnMissingBean;\nimport org.springframework.bootstrap.context.annotation.EnableAutoConfiguration;\nimport org.springframework.bootstrap.service.trace.InMemoryTraceRepository;\nimport org.springframework.bootstrap.service.trace.SecurityFilterPostProcessor;\nimport org.springframework.bootstrap.service.trace.TraceEndpoint;\nimport org.springframework.bootstrap.service.trace.TraceRepository;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.web.servlet.DispatcherServlet;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for /trace endpoint.\n * \n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class })\n@ConditionalOnMissingBean({ TraceEndpoint.class })\npublic class TraceConfiguration {\n\n\t@Autowired\n\tprivate TraceRepository traceRepository;\n\n\t@Configuration\n\t@ConditionalOnClass(SecurityFilterChain.class)\n\tpublic static class SecurityFilterPostProcessorConfiguration {\n\n\t\t@Autowired(required = false)\n\t\tprivate TraceRepository traceRepository = new InMemoryTraceRepository();\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(TraceRepository.class)\n\t\tprotected TraceRepository traceRepository() {\n\t\t\treturn this.traceRepository;\n\t\t}\n\n\t\t@Value("${management.dump_requests:false}")\n\t\tprivate boolean dumpRequests;\n\n\t\t@Bean\n\t\tpublic SecurityFilterPostProcessor securityFilterPostProcessor(\n\t\t\t\tBeanFactory beanFactory) {\n\t\t\tSecurityFilterPostProcessor processor = new SecurityFilterPostProcessor(\n\t\t\t\t\tthis.traceRepository);\n\t\t\tprocessor.setDumpRequests(this.dumpRequests);\n\t\t\treturn processor;\n\t\t}\n\n\t}\n\n\t@Bean\n\tpublic TraceEndpoint traceEndpoint() {\n\t\treturn new TraceEndpoint(this.traceRepository);\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.bootstrap.autoconfigure.service;\n\nimport javax.servlet.Servlet;\n\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.bootstrap.context.annotation.ConditionalOnClass;\nimport org.springframework.bootstrap.context.annotation.ConditionalOnMissingBean;\nimport org.springframework.bootstrap.context.annotation.EnableAutoConfiguration;\nimport org.springframework.bootstrap.service.trace.InMemoryTraceRepository;\nimport org.springframework.bootstrap.service.trace.SecurityFilterPostProcessor;\nimport org.springframework.bootstrap.service.trace.TraceEndpoint;\nimport org.springframework.bootstrap.service.trace.TraceRepository;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.web.servlet.DispatcherServlet;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for /trace endpoint.\n * \n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class })\n@ConditionalOnMissingBean({ TraceEndpoint.class })\npublic class TraceAutoConfiguration {\n\n\t@Autowired(required = false)\n\tprivate TraceRepository traceRepository = new InMemoryTraceRepository();\n\n\t@Bean\n\t@ConditionalOnMissingBean(TraceRepository.class)\n\tprotected TraceRepository traceRepository() {\n\t\treturn this.traceRepository;\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(SecurityFilterChain.class)\n\tpublic static class SecurityFilterPostProcessorConfiguration {\n\n\t\t@Autowired\n\t\tprivate TraceRepository traceRepository;\n\n\t\t@Value("${container.dump_requests:false}")\n\t\tprivate boolean dumpRequests;\n\n\t\t@Bean\n\t\tpublic SecurityFilterPostProcessor securityFilterPostProcessor(\n\t\t\t\tBeanFactory beanFactory) {\n\t\t\tSecurityFilterPostProcessor processor = new SecurityFilterPostProcessor(\n\t\t\t\t\tthis.traceRepository);\n\t\t\tprocessor.setDumpRequests(this.dumpRequests);\n\t\t\treturn processor;\n\t\t}\n\n\t}\n\n\t@Bean\n\tpublic TraceEndpoint traceEndpoint() {\n\t\treturn new TraceEndpoint(this.traceRepository);\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
