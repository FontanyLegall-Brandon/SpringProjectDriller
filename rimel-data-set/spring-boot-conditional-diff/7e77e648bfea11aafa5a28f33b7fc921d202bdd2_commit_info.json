{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mustache/MustacheAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mustache/MustacheAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -30,7 +30,7 @@ import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\n-import org.springframework.boot.autoconfigure.mustache.web.MustacheViewResolver;\n+import org.springframework.boot.autoconfigure.mustache.servlet.MustacheViewResolver;\n import org.springframework.boot.autoconfigure.template.TemplateLocation;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.ApplicationContext;\n@@ -43,6 +43,7 @@ import org.springframework.core.env.Environment;\n  * {@link EnableAutoConfiguration Auto-configuration} for Mustache.\n  *\n  * @author Dave Syer\n+ * @author Brian Clozel\n  * @since 1.2.2\n  */\n @Configuration\n@@ -123,4 +124,34 @@ public class MustacheAutoConfiguration {\n \n \t}\n \n+\t@Configuration\n+\t@ConditionalOnWebApplication(type = Type.REACTIVE)\n+\tprotected static class MustacheReactiveWebConfiguration {\n+\n+\t\tprivate final MustacheProperties mustache;\n+\n+\t\tprotected MustacheReactiveWebConfiguration(MustacheProperties mustache) {\n+\t\t\tthis.mustache = mustache;\n+\t\t}\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(org.springframework.boot.autoconfigure\n+\t\t\t\t.mustache.reactive.MustacheViewResolver.class)\n+\t\tpublic org.springframework.boot.autoconfigure\n+\t\t\t\t.mustache.reactive.MustacheViewResolver mustacheViewResolver(Compiler mustacheCompiler) {\n+\t\t\torg.springframework.boot.autoconfigure\n+\t\t\t\t\t.mustache.reactive.MustacheViewResolver resolver\n+\t\t\t\t\t= new org.springframework.boot.autoconfigure\n+\t\t\t\t\t.mustache.reactive.MustacheViewResolver(mustacheCompiler);\n+\t\t\tresolver.setPrefix(this.mustache.getPrefix());\n+\t\t\tresolver.setSuffix(this.mustache.getSuffix());\n+\t\t\tresolver.setViewNames(this.mustache.getViewNames());\n+\t\t\tresolver.setRequestContextAttribute(this.mustache.getRequestContextAttribute());\n+\t\t\tresolver.setCharset(this.mustache.getCharsetName());\n+\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 10);\n+\t\t\treturn resolver;\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.mustache;\n\nimport javax.annotation.PostConstruct;\n\nimport com.samskivert.mustache.Mustache;\nimport com.samskivert.mustache.Mustache.Collector;\nimport com.samskivert.mustache.Mustache.Compiler;\nimport com.samskivert.mustache.Mustache.TemplateLoader;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.autoconfigure.mustache.servlet.MustacheViewResolver;\nimport org.springframework.boot.autoconfigure.template.TemplateLocation;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.env.Environment;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Mustache.\n *\n * @author Dave Syer\n * @author Brian Clozel\n * @since 1.2.2\n */\n@Configuration\n@ConditionalOnClass(Mustache.class)\n@EnableConfigurationProperties(MustacheProperties.class)\npublic class MustacheAutoConfiguration {\n\n\tprivate static final Log logger = LogFactory.getLog(MustacheAutoConfiguration.class);\n\n\tprivate final MustacheProperties mustache;\n\n\tprivate final Environment environment;\n\n\tprivate final ApplicationContext applicationContext;\n\n\tpublic MustacheAutoConfiguration(MustacheProperties mustache, Environment environment,\n\t\t\tApplicationContext applicationContext) {\n\t\tthis.mustache = mustache;\n\t\tthis.environment = environment;\n\t\tthis.applicationContext = applicationContext;\n\t}\n\n\t@PostConstruct\n\tpublic void checkTemplateLocationExists() {\n\t\tif (this.mustache.isCheckTemplateLocation()) {\n\t\t\tTemplateLocation location = new TemplateLocation(this.mustache.getPrefix());\n\t\t\tif (!location.exists(this.applicationContext)) {\n\t\t\t\tlogger.warn("Cannot find template location: " + location\n\t\t\t\t\t\t+ " (please add some templates, check your Mustache "\n\t\t\t\t\t\t+ "configuration, or set spring.mustache."\n\t\t\t\t\t\t+ "check-template-location=false)");\n\t\t\t}\n\t\t}\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(Mustache.Compiler.class)\n\tpublic Mustache.Compiler mustacheCompiler(TemplateLoader mustacheTemplateLoader) {\n\t\treturn Mustache.compiler().withLoader(mustacheTemplateLoader)\n\t\t\t\t.withCollector(collector());\n\t}\n\n\tprivate Collector collector() {\n\t\tMustacheEnvironmentCollector collector = new MustacheEnvironmentCollector();\n\t\tcollector.setEnvironment(this.environment);\n\t\treturn collector;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(TemplateLoader.class)\n\tpublic MustacheResourceTemplateLoader mustacheTemplateLoader() {\n\t\tMustacheResourceTemplateLoader loader = new MustacheResourceTemplateLoader(\n\t\t\t\tthis.mustache.getPrefix(), this.mustache.getSuffix());\n\t\tloader.setCharset(this.mustache.getCharsetName());\n\t\treturn loader;\n\t}\n\n\t@Configuration\n\t@ConditionalOnWebApplication(type = Type.SERVLET)\n\tprotected static class MustacheWebConfiguration {\n\n\t\tprivate final MustacheProperties mustache;\n\n\t\tprotected MustacheWebConfiguration(MustacheProperties mustache) {\n\t\t\tthis.mustache = mustache;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(MustacheViewResolver.class)\n\t\tpublic MustacheViewResolver mustacheViewResolver(Compiler mustacheCompiler) {\n\t\t\tMustacheViewResolver resolver = new MustacheViewResolver();\n\t\t\tthis.mustache.applyToViewResolver(resolver);\n\t\t\tresolver.setCharset(this.mustache.getCharsetName());\n\t\t\tresolver.setCompiler(mustacheCompiler);\n\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 10);\n\t\t\treturn resolver;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnWebApplication(type = Type.REACTIVE)\n\tprotected static class MustacheReactiveWebConfiguration {\n\n\t\tprivate final MustacheProperties mustache;\n\n\t\tprotected MustacheReactiveWebConfiguration(MustacheProperties mustache) {\n\t\t\tthis.mustache = mustache;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(org.springframework.boot.autoconfigure\n\t\t\t\t.mustache.reactive.MustacheViewResolver.class)\n\t\tpublic org.springframework.boot.autoconfigure\n\t\t\t\t.mustache.reactive.MustacheViewResolver mustacheViewResolver(Compiler mustacheCompiler) {\n\t\t\torg.springframework.boot.autoconfigure\n\t\t\t\t\t.mustache.reactive.MustacheViewResolver resolver\n\t\t\t\t\t= new org.springframework.boot.autoconfigure\n\t\t\t\t\t.mustache.reactive.MustacheViewResolver(mustacheCompiler);\n\t\t\tresolver.setPrefix(this.mustache.getPrefix());\n\t\t\tresolver.setSuffix(this.mustache.getSuffix());\n\t\t\tresolver.setViewNames(this.mustache.getViewNames());\n\t\t\tresolver.setRequestContextAttribute(this.mustache.getRequestContextAttribute());\n\t\t\tresolver.setCharset(this.mustache.getCharsetName());\n\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 10);\n\t\t\treturn resolver;\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.mustache;\n\nimport javax.annotation.PostConstruct;\n\nimport com.samskivert.mustache.Mustache;\nimport com.samskivert.mustache.Mustache.Collector;\nimport com.samskivert.mustache.Mustache.Compiler;\nimport com.samskivert.mustache.Mustache.TemplateLoader;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.autoconfigure.mustache.web.MustacheViewResolver;\nimport org.springframework.boot.autoconfigure.template.TemplateLocation;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.env.Environment;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Mustache.\n *\n * @author Dave Syer\n * @since 1.2.2\n */\n@Configuration\n@ConditionalOnClass(Mustache.class)\n@EnableConfigurationProperties(MustacheProperties.class)\npublic class MustacheAutoConfiguration {\n\n\tprivate static final Log logger = LogFactory.getLog(MustacheAutoConfiguration.class);\n\n\tprivate final MustacheProperties mustache;\n\n\tprivate final Environment environment;\n\n\tprivate final ApplicationContext applicationContext;\n\n\tpublic MustacheAutoConfiguration(MustacheProperties mustache, Environment environment,\n\t\t\tApplicationContext applicationContext) {\n\t\tthis.mustache = mustache;\n\t\tthis.environment = environment;\n\t\tthis.applicationContext = applicationContext;\n\t}\n\n\t@PostConstruct\n\tpublic void checkTemplateLocationExists() {\n\t\tif (this.mustache.isCheckTemplateLocation()) {\n\t\t\tTemplateLocation location = new TemplateLocation(this.mustache.getPrefix());\n\t\t\tif (!location.exists(this.applicationContext)) {\n\t\t\t\tlogger.warn("Cannot find template location: " + location\n\t\t\t\t\t\t+ " (please add some templates, check your Mustache "\n\t\t\t\t\t\t+ "configuration, or set spring.mustache."\n\t\t\t\t\t\t+ "check-template-location=false)");\n\t\t\t}\n\t\t}\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(Mustache.Compiler.class)\n\tpublic Mustache.Compiler mustacheCompiler(TemplateLoader mustacheTemplateLoader) {\n\t\treturn Mustache.compiler().withLoader(mustacheTemplateLoader)\n\t\t\t\t.withCollector(collector());\n\t}\n\n\tprivate Collector collector() {\n\t\tMustacheEnvironmentCollector collector = new MustacheEnvironmentCollector();\n\t\tcollector.setEnvironment(this.environment);\n\t\treturn collector;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(TemplateLoader.class)\n\tpublic MustacheResourceTemplateLoader mustacheTemplateLoader() {\n\t\tMustacheResourceTemplateLoader loader = new MustacheResourceTemplateLoader(\n\t\t\t\tthis.mustache.getPrefix(), this.mustache.getSuffix());\n\t\tloader.setCharset(this.mustache.getCharsetName());\n\t\treturn loader;\n\t}\n\n\t@Configuration\n\t@ConditionalOnWebApplication(type = Type.SERVLET)\n\tprotected static class MustacheWebConfiguration {\n\n\t\tprivate final MustacheProperties mustache;\n\n\t\tprotected MustacheWebConfiguration(MustacheProperties mustache) {\n\t\t\tthis.mustache = mustache;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(MustacheViewResolver.class)\n\t\tpublic MustacheViewResolver mustacheViewResolver(Compiler mustacheCompiler) {\n\t\t\tMustacheViewResolver resolver = new MustacheViewResolver();\n\t\t\tthis.mustache.applyToViewResolver(resolver);\n\t\t\tresolver.setCharset(this.mustache.getCharsetName());\n\t\t\tresolver.setCompiler(mustacheCompiler);\n\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 10);\n\t\t\treturn resolver;\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
