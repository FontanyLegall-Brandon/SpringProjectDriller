{'_old_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -55,7 +55,6 @@ import org.springframework.boot.autoconfigure.condition.ConditionEvaluationRepor\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\n import org.springframework.boot.autoconfigure.condition.SearchStrategy;\n import org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration;\n import org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration;\n@@ -188,26 +187,26 @@ public class EndpointAutoConfiguration {\n \t}\n \n \t@Configuration\n-\t@ConditionalOnSingleCandidate(Flyway.class)\n+\t@ConditionalOnBean(Flyway.class)\n \t@ConditionalOnClass(Flyway.class)\n \tstatic class FlywayEndpointConfiguration {\n \n \t\t@Bean\n \t\t@ConditionalOnMissingBean\n-\t\tpublic FlywayEndpoint flywayEndpoint(Flyway flyway) {\n+\t\tpublic FlywayEndpoint flywayEndpoint(List<Flyway> flyway) {\n \t\t\treturn new FlywayEndpoint(flyway);\n \t\t}\n \n \t}\n \n \t@Configuration\n-\t@ConditionalOnSingleCandidate(SpringLiquibase.class)\n+\t@ConditionalOnBean(SpringLiquibase.class)\n \t@ConditionalOnClass(SpringLiquibase.class)\n \tstatic class LiquibaseEndpointConfiguration {\n \n \t\t@Bean\n \t\t@ConditionalOnMissingBean\n-\t\tpublic LiquibaseEndpoint liquibaseEndpoint(SpringLiquibase liquibase) {\n+\t\tpublic LiquibaseEndpoint liquibaseEndpoint(List<SpringLiquibase> liquibase) {\n \t\t\treturn new LiquibaseEndpoint(liquibase);\n \t\t}\n \n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\n\nimport liquibase.integration.spring.SpringLiquibase;\nimport org.flywaydb.core.Flyway;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.actuate.endpoint.AutoConfigurationReportEndpoint;\nimport org.springframework.boot.actuate.endpoint.BeansEndpoint;\nimport org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpoint;\nimport org.springframework.boot.actuate.endpoint.DumpEndpoint;\nimport org.springframework.boot.actuate.endpoint.Endpoint;\nimport org.springframework.boot.actuate.endpoint.EndpointProperties;\nimport org.springframework.boot.actuate.endpoint.EnvironmentEndpoint;\nimport org.springframework.boot.actuate.endpoint.FlywayEndpoint;\nimport org.springframework.boot.actuate.endpoint.HealthEndpoint;\nimport org.springframework.boot.actuate.endpoint.InfoEndpoint;\nimport org.springframework.boot.actuate.endpoint.LiquibaseEndpoint;\nimport org.springframework.boot.actuate.endpoint.LoggersEndpoint;\nimport org.springframework.boot.actuate.endpoint.MetricsEndpoint;\nimport org.springframework.boot.actuate.endpoint.PublicMetrics;\nimport org.springframework.boot.actuate.endpoint.RequestMappingEndpoint;\nimport org.springframework.boot.actuate.endpoint.ShutdownEndpoint;\nimport org.springframework.boot.actuate.endpoint.TraceEndpoint;\nimport org.springframework.boot.actuate.health.HealthAggregator;\nimport org.springframework.boot.actuate.health.HealthIndicator;\nimport org.springframework.boot.actuate.health.OrderedHealthAggregator;\nimport org.springframework.boot.actuate.info.InfoContributor;\nimport org.springframework.boot.actuate.trace.InMemoryTraceRepository;\nimport org.springframework.boot.actuate.trace.TraceRepository;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration;\nimport org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.logging.LoggingSystem;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.AnnotationAwareOrderComparator;\nimport org.springframework.web.servlet.handler.AbstractHandlerMethodMapping;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for common management\n * {@link Endpoint}s.\n *\n * @author Dave Syer\n * @author Phillip Webb\n * @author Greg Turnquist\n * @author Christian Dupuis\n * @author Stephane Nicoll\n * @author Eddú Meléndez\n * @author Meang Akira Tanaka\n * @author Ben Hale\n */\n@Configuration\n@AutoConfigureAfter({ FlywayAutoConfiguration.class, LiquibaseAutoConfiguration.class })\n@EnableConfigurationProperties(EndpointProperties.class)\npublic class EndpointAutoConfiguration {\n\n\tprivate final HealthAggregator healthAggregator;\n\n\tprivate final Map<String, HealthIndicator> healthIndicators;\n\n\tprivate final List<InfoContributor> infoContributors;\n\n\tprivate final Collection<PublicMetrics> publicMetrics;\n\n\tprivate final TraceRepository traceRepository;\n\n\tpublic EndpointAutoConfiguration(\n\t\t\tObjectProvider<HealthAggregator> healthAggregatorProvider,\n\t\t\tObjectProvider<Map<String, HealthIndicator>> healthIndicatorsProvider,\n\t\t\tObjectProvider<List<InfoContributor>> infoContributorsProvider,\n\t\t\tObjectProvider<Collection<PublicMetrics>> publicMetricsProvider,\n\t\t\tObjectProvider<TraceRepository> traceRepositoryProvider) {\n\t\tthis.healthAggregator = healthAggregatorProvider.getIfAvailable();\n\t\tthis.healthIndicators = healthIndicatorsProvider.getIfAvailable();\n\t\tthis.infoContributors = infoContributorsProvider.getIfAvailable();\n\t\tthis.publicMetrics = publicMetricsProvider.getIfAvailable();\n\t\tthis.traceRepository = traceRepositoryProvider.getIfAvailable();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic EnvironmentEndpoint environmentEndpoint() {\n\t\treturn new EnvironmentEndpoint();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic HealthEndpoint healthEndpoint() {\n\t\treturn new HealthEndpoint(\n\t\t\t\tthis.healthAggregator == null ? new OrderedHealthAggregator()\n\t\t\t\t\t\t: this.healthAggregator,\n\t\t\t\tthis.healthIndicators == null\n\t\t\t\t\t\t? Collections.<String, HealthIndicator>emptyMap()\n\t\t\t\t\t\t: this.healthIndicators);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic BeansEndpoint beansEndpoint() {\n\t\treturn new BeansEndpoint();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic InfoEndpoint infoEndpoint() throws Exception {\n\t\treturn new InfoEndpoint(this.infoContributors == null\n\t\t\t\t? Collections.<InfoContributor>emptyList() : this.infoContributors);\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(LoggingSystem.class)\n\t@ConditionalOnMissingBean\n\tpublic LoggersEndpoint loggersEndpoint(LoggingSystem loggingSystem) {\n\t\treturn new LoggersEndpoint(loggingSystem);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic MetricsEndpoint metricsEndpoint() {\n\t\tList<PublicMetrics> publicMetrics = new ArrayList<PublicMetrics>();\n\t\tif (this.publicMetrics != null) {\n\t\t\tpublicMetrics.addAll(this.publicMetrics);\n\t\t}\n\t\tCollections.sort(publicMetrics, AnnotationAwareOrderComparator.INSTANCE);\n\t\treturn new MetricsEndpoint(publicMetrics);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic TraceEndpoint traceEndpoint() {\n\t\treturn new TraceEndpoint(this.traceRepository == null\n\t\t\t\t? new InMemoryTraceRepository() : this.traceRepository);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic DumpEndpoint dumpEndpoint() {\n\t\treturn new DumpEndpoint();\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(ConditionEvaluationReport.class)\n\t@ConditionalOnMissingBean(search = SearchStrategy.CURRENT)\n\tpublic AutoConfigurationReportEndpoint autoConfigurationReportEndpoint() {\n\t\treturn new AutoConfigurationReportEndpoint();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic ShutdownEndpoint shutdownEndpoint() {\n\t\treturn new ShutdownEndpoint();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic ConfigurationPropertiesReportEndpoint configurationPropertiesReportEndpoint() {\n\t\treturn new ConfigurationPropertiesReportEndpoint();\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(Flyway.class)\n\t@ConditionalOnClass(Flyway.class)\n\tstatic class FlywayEndpointConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic FlywayEndpoint flywayEndpoint(List<Flyway> flyway) {\n\t\t\treturn new FlywayEndpoint(flyway);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(SpringLiquibase.class)\n\t@ConditionalOnClass(SpringLiquibase.class)\n\tstatic class LiquibaseEndpointConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic LiquibaseEndpoint liquibaseEndpoint(List<SpringLiquibase> liquibase) {\n\t\t\treturn new LiquibaseEndpoint(liquibase);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(AbstractHandlerMethodMapping.class)\n\tprotected static class RequestMappingEndpointConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic RequestMappingEndpoint requestMappingEndpoint() {\n\t\t\tRequestMappingEndpoint endpoint = new RequestMappingEndpoint();\n\t\t\treturn endpoint;\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\n\nimport liquibase.integration.spring.SpringLiquibase;\nimport org.flywaydb.core.Flyway;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.actuate.endpoint.AutoConfigurationReportEndpoint;\nimport org.springframework.boot.actuate.endpoint.BeansEndpoint;\nimport org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpoint;\nimport org.springframework.boot.actuate.endpoint.DumpEndpoint;\nimport org.springframework.boot.actuate.endpoint.Endpoint;\nimport org.springframework.boot.actuate.endpoint.EndpointProperties;\nimport org.springframework.boot.actuate.endpoint.EnvironmentEndpoint;\nimport org.springframework.boot.actuate.endpoint.FlywayEndpoint;\nimport org.springframework.boot.actuate.endpoint.HealthEndpoint;\nimport org.springframework.boot.actuate.endpoint.InfoEndpoint;\nimport org.springframework.boot.actuate.endpoint.LiquibaseEndpoint;\nimport org.springframework.boot.actuate.endpoint.LoggersEndpoint;\nimport org.springframework.boot.actuate.endpoint.MetricsEndpoint;\nimport org.springframework.boot.actuate.endpoint.PublicMetrics;\nimport org.springframework.boot.actuate.endpoint.RequestMappingEndpoint;\nimport org.springframework.boot.actuate.endpoint.ShutdownEndpoint;\nimport org.springframework.boot.actuate.endpoint.TraceEndpoint;\nimport org.springframework.boot.actuate.health.HealthAggregator;\nimport org.springframework.boot.actuate.health.HealthIndicator;\nimport org.springframework.boot.actuate.health.OrderedHealthAggregator;\nimport org.springframework.boot.actuate.info.InfoContributor;\nimport org.springframework.boot.actuate.trace.InMemoryTraceRepository;\nimport org.springframework.boot.actuate.trace.TraceRepository;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration;\nimport org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.logging.LoggingSystem;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.AnnotationAwareOrderComparator;\nimport org.springframework.web.servlet.handler.AbstractHandlerMethodMapping;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for common management\n * {@link Endpoint}s.\n *\n * @author Dave Syer\n * @author Phillip Webb\n * @author Greg Turnquist\n * @author Christian Dupuis\n * @author Stephane Nicoll\n * @author Eddú Meléndez\n * @author Meang Akira Tanaka\n * @author Ben Hale\n */\n@Configuration\n@AutoConfigureAfter({ FlywayAutoConfiguration.class, LiquibaseAutoConfiguration.class })\n@EnableConfigurationProperties(EndpointProperties.class)\npublic class EndpointAutoConfiguration {\n\n\tprivate final HealthAggregator healthAggregator;\n\n\tprivate final Map<String, HealthIndicator> healthIndicators;\n\n\tprivate final List<InfoContributor> infoContributors;\n\n\tprivate final Collection<PublicMetrics> publicMetrics;\n\n\tprivate final TraceRepository traceRepository;\n\n\tpublic EndpointAutoConfiguration(\n\t\t\tObjectProvider<HealthAggregator> healthAggregatorProvider,\n\t\t\tObjectProvider<Map<String, HealthIndicator>> healthIndicatorsProvider,\n\t\t\tObjectProvider<List<InfoContributor>> infoContributorsProvider,\n\t\t\tObjectProvider<Collection<PublicMetrics>> publicMetricsProvider,\n\t\t\tObjectProvider<TraceRepository> traceRepositoryProvider) {\n\t\tthis.healthAggregator = healthAggregatorProvider.getIfAvailable();\n\t\tthis.healthIndicators = healthIndicatorsProvider.getIfAvailable();\n\t\tthis.infoContributors = infoContributorsProvider.getIfAvailable();\n\t\tthis.publicMetrics = publicMetricsProvider.getIfAvailable();\n\t\tthis.traceRepository = traceRepositoryProvider.getIfAvailable();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic EnvironmentEndpoint environmentEndpoint() {\n\t\treturn new EnvironmentEndpoint();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic HealthEndpoint healthEndpoint() {\n\t\treturn new HealthEndpoint(\n\t\t\t\tthis.healthAggregator == null ? new OrderedHealthAggregator()\n\t\t\t\t\t\t: this.healthAggregator,\n\t\t\t\tthis.healthIndicators == null\n\t\t\t\t\t\t? Collections.<String, HealthIndicator>emptyMap()\n\t\t\t\t\t\t: this.healthIndicators);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic BeansEndpoint beansEndpoint() {\n\t\treturn new BeansEndpoint();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic InfoEndpoint infoEndpoint() throws Exception {\n\t\treturn new InfoEndpoint(this.infoContributors == null\n\t\t\t\t? Collections.<InfoContributor>emptyList() : this.infoContributors);\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(LoggingSystem.class)\n\t@ConditionalOnMissingBean\n\tpublic LoggersEndpoint loggersEndpoint(LoggingSystem loggingSystem) {\n\t\treturn new LoggersEndpoint(loggingSystem);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic MetricsEndpoint metricsEndpoint() {\n\t\tList<PublicMetrics> publicMetrics = new ArrayList<PublicMetrics>();\n\t\tif (this.publicMetrics != null) {\n\t\t\tpublicMetrics.addAll(this.publicMetrics);\n\t\t}\n\t\tCollections.sort(publicMetrics, AnnotationAwareOrderComparator.INSTANCE);\n\t\treturn new MetricsEndpoint(publicMetrics);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic TraceEndpoint traceEndpoint() {\n\t\treturn new TraceEndpoint(this.traceRepository == null\n\t\t\t\t? new InMemoryTraceRepository() : this.traceRepository);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic DumpEndpoint dumpEndpoint() {\n\t\treturn new DumpEndpoint();\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(ConditionEvaluationReport.class)\n\t@ConditionalOnMissingBean(search = SearchStrategy.CURRENT)\n\tpublic AutoConfigurationReportEndpoint autoConfigurationReportEndpoint() {\n\t\treturn new AutoConfigurationReportEndpoint();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic ShutdownEndpoint shutdownEndpoint() {\n\t\treturn new ShutdownEndpoint();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic ConfigurationPropertiesReportEndpoint configurationPropertiesReportEndpoint() {\n\t\treturn new ConfigurationPropertiesReportEndpoint();\n\t}\n\n\t@Configuration\n\t@ConditionalOnSingleCandidate(Flyway.class)\n\t@ConditionalOnClass(Flyway.class)\n\tstatic class FlywayEndpointConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic FlywayEndpoint flywayEndpoint(Flyway flyway) {\n\t\t\treturn new FlywayEndpoint(flyway);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnSingleCandidate(SpringLiquibase.class)\n\t@ConditionalOnClass(SpringLiquibase.class)\n\tstatic class LiquibaseEndpointConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic LiquibaseEndpoint liquibaseEndpoint(SpringLiquibase liquibase) {\n\t\t\treturn new LiquibaseEndpoint(liquibase);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(AbstractHandlerMethodMapping.class)\n\tprotected static class RequestMappingEndpointConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic RequestMappingEndpoint requestMappingEndpoint() {\n\t\t\tRequestMappingEndpoint endpoint = new RequestMappingEndpoint();\n\t\t\treturn endpoint;\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
