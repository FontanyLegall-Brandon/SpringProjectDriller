{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -47,6 +47,8 @@ import org.thymeleaf.spring4.view.ThymeleafViewResolver;\n import org.thymeleaf.templateresolver.ITemplateResolver;\n import org.thymeleaf.templateresolver.TemplateResolver;\n \n+import com.github.mxab.thymeleaf.extras.dataattribute.dialect.DataAttributeDialect;\n+\n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for Thymeleaf.\n  *\n@@ -66,7 +68,7 @@ public class ThymeleafAutoConfiguration {\n \n \t@Configuration\n \t@ConditionalOnMissingBean(name = "defaultTemplateResolver")\n-\tpublic static class DefaultTemplateResolverConfiguration  {\n+\tpublic static class DefaultTemplateResolverConfiguration {\n \n \t\t@Autowired\n \t\tprivate ThymeleafProperties properties;\n@@ -74,12 +76,12 @@ public class ThymeleafAutoConfiguration {\n \t\t@Autowired\n \t\tprivate final ResourceLoader resourceLoader = new DefaultResourceLoader();\n \n-\n \t\t@PostConstruct\n \t\tpublic void checkTemplateLocationExists() {\n \t\t\tBoolean checkTemplateLocation = this.properties.isCheckTemplateLocation();\n \t\t\tif (checkTemplateLocation) {\n-\t\t\t\tResource resource = this.resourceLoader.getResource(this.properties.getPrefix());\n+\t\t\t\tResource resource = this.resourceLoader.getResource(this.properties\n+\t\t\t\t\t\t.getPrefix());\n \t\t\t\tAssert.state(resource.exists(), "Cannot find template location: "\n \t\t\t\t\t\t+ resource + " (please add some templates "\n \t\t\t\t\t\t+ "or check your Thymeleaf configuration)");\n@@ -126,7 +128,7 @@ public class ThymeleafAutoConfiguration {\n \t\tprivate String[] excludedViewNames;\n \n \t\tpublic boolean isCheckTemplateLocation() {\n-\t\t\treturn checkTemplateLocation;\n+\t\t\treturn this.checkTemplateLocation;\n \t\t}\n \n \t\tpublic void setCheckTemplateLocation(boolean checkTemplateLocation) {\n@@ -134,7 +136,7 @@ public class ThymeleafAutoConfiguration {\n \t\t}\n \n \t\tpublic String getPrefix() {\n-\t\t\treturn prefix;\n+\t\t\treturn this.prefix;\n \t\t}\n \n \t\tpublic void setPrefix(String prefix) {\n@@ -142,7 +144,7 @@ public class ThymeleafAutoConfiguration {\n \t\t}\n \n \t\tpublic String getSuffix() {\n-\t\t\treturn suffix;\n+\t\t\treturn this.suffix;\n \t\t}\n \n \t\tpublic void setSuffix(String suffix) {\n@@ -150,7 +152,7 @@ public class ThymeleafAutoConfiguration {\n \t\t}\n \n \t\tpublic String getMode() {\n-\t\t\treturn mode;\n+\t\t\treturn this.mode;\n \t\t}\n \n \t\tpublic void setMode(String mode) {\n@@ -158,7 +160,7 @@ public class ThymeleafAutoConfiguration {\n \t\t}\n \n \t\tpublic String getEncoding() {\n-\t\t\treturn encoding;\n+\t\t\treturn this.encoding;\n \t\t}\n \n \t\tpublic void setEncoding(String encoding) {\n@@ -166,7 +168,7 @@ public class ThymeleafAutoConfiguration {\n \t\t}\n \n \t\tpublic String getContentType() {\n-\t\t\treturn contentType;\n+\t\t\treturn this.contentType;\n \t\t}\n \n \t\tpublic void setContentType(String contentType) {\n@@ -174,7 +176,7 @@ public class ThymeleafAutoConfiguration {\n \t\t}\n \n \t\tpublic boolean isCache() {\n-\t\t\treturn cache;\n+\t\t\treturn this.cache;\n \t\t}\n \n \t\tpublic void setCache(boolean cache) {\n@@ -182,7 +184,7 @@ public class ThymeleafAutoConfiguration {\n \t\t}\n \n \t\tpublic String[] getExcludedViewNames() {\n-\t\t\treturn excludedViewNames;\n+\t\t\treturn this.excludedViewNames;\n \t\t}\n \n \t\tpublic void setExcludedViewNames(String[] excludedViewNames) {\n@@ -190,7 +192,7 @@ public class ThymeleafAutoConfiguration {\n \t\t}\n \n \t\tpublic String[] getViewNames() {\n-\t\t\treturn viewNames;\n+\t\t\treturn this.viewNames;\n \t\t}\n \n \t\tpublic void setViewNames(String[] viewNames) {\n@@ -234,6 +236,28 @@ public class ThymeleafAutoConfiguration {\n \n \t}\n \n+\t@Configuration\n+\t@ConditionalOnClass(DataAttributeDialect.class)\n+\tprotected static class DataAttributeDialectConfiguration {\n+\n+\t\t@Bean\n+\t\tpublic DataAttributeDialect dialect() {\n+\t\t\treturn new DataAttributeDialect();\n+\t\t}\n+\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnClass({ SpringSecurityDialect.class })\n+\tprotected static class ThymeleafSecurityDialectConfiguration {\n+\n+\t\t@Bean\n+\t\tpublic SpringSecurityDialect securityDialect() {\n+\t\t\treturn new SpringSecurityDialect();\n+\t\t}\n+\n+\t}\n+\n \t@Configuration\n \t@ConditionalOnClass({ Servlet.class })\n \tprotected static class ThymeleafViewResolverConfiguration {\n@@ -241,7 +265,6 @@ public class ThymeleafAutoConfiguration {\n \t\t@Autowired\n \t\tprivate ThymeleafProperties properties;\n \n-\n \t\t@Autowired\n \t\tprivate SpringTemplateEngine templateEngine;\n \n@@ -270,15 +293,4 @@ public class ThymeleafAutoConfiguration {\n \n \t}\n \n-\t@Configuration\n-\t@ConditionalOnClass({ SpringSecurityDialect.class })\n-\tprotected static class ThymeleafSecurityDialectConfiguration {\n-\n-\t\t@Bean\n-\t\tpublic SpringSecurityDialect securityDialect() {\n-\t\t\treturn new SpringSecurityDialect();\n-\t\t}\n-\n-\t}\n-\n }\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.thymeleaf;\n\nimport java.util.Collection;\nimport java.util.Collections;\n\nimport javax.annotation.PostConstruct;\nimport javax.servlet.Servlet;\n\nimport nz.net.ultraq.thymeleaf.LayoutDialect;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.util.Assert;\nimport org.thymeleaf.dialect.IDialect;\nimport org.thymeleaf.extras.springsecurity3.dialect.SpringSecurityDialect;\nimport org.thymeleaf.spring4.SpringTemplateEngine;\nimport org.thymeleaf.spring4.resourceresolver.SpringResourceResourceResolver;\nimport org.thymeleaf.spring4.view.ThymeleafViewResolver;\nimport org.thymeleaf.templateresolver.ITemplateResolver;\nimport org.thymeleaf.templateresolver.TemplateResolver;\n\nimport com.github.mxab.thymeleaf.extras.dataattribute.dialect.DataAttributeDialect;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Thymeleaf.\n *\n * @author Dave Syer\n * @author Andy Wilkinson\n * @author Stephane Nicoll\n */\n@Configuration\n@EnableConfigurationProperties(ThymeleafAutoConfiguration.ThymeleafProperties.class)\n@ConditionalOnClass(SpringTemplateEngine.class)\n@AutoConfigureAfter(WebMvcAutoConfiguration.class)\npublic class ThymeleafAutoConfiguration {\n\n\tpublic static final String DEFAULT_PREFIX = "classpath:/templates/";\n\n\tpublic static final String DEFAULT_SUFFIX = ".html";\n\n\t@Configuration\n\t@ConditionalOnMissingBean(name = "defaultTemplateResolver")\n\tpublic static class DefaultTemplateResolverConfiguration {\n\n\t\t@Autowired\n\t\tprivate ThymeleafProperties properties;\n\n\t\t@Autowired\n\t\tprivate final ResourceLoader resourceLoader = new DefaultResourceLoader();\n\n\t\t@PostConstruct\n\t\tpublic void checkTemplateLocationExists() {\n\t\t\tBoolean checkTemplateLocation = this.properties.isCheckTemplateLocation();\n\t\t\tif (checkTemplateLocation) {\n\t\t\t\tResource resource = this.resourceLoader.getResource(this.properties\n\t\t\t\t\t\t.getPrefix());\n\t\t\t\tAssert.state(resource.exists(), "Cannot find template location: "\n\t\t\t\t\t\t+ resource + " (please add some templates "\n\t\t\t\t\t\t+ "or check your Thymeleaf configuration)");\n\t\t\t}\n\t\t}\n\n\t\t@Bean\n\t\tpublic ITemplateResolver defaultTemplateResolver() {\n\t\t\tTemplateResolver resolver = new TemplateResolver();\n\t\t\tresolver.setResourceResolver(thymeleafResourceResolver());\n\t\t\tresolver.setPrefix(this.properties.getPrefix());\n\t\t\tresolver.setSuffix(this.properties.getSuffix());\n\t\t\tresolver.setTemplateMode(this.properties.getMode());\n\t\t\tresolver.setCharacterEncoding(this.properties.getEncoding());\n\t\t\tresolver.setCacheable(this.properties.isCache());\n\t\t\treturn resolver;\n\t\t}\n\n\t\t@Bean\n\t\tprotected SpringResourceResourceResolver thymeleafResourceResolver() {\n\t\t\treturn new SpringResourceResourceResolver();\n\t\t}\n\t}\n\n\t@ConfigurationProperties("spring.thymeleaf")\n\tpublic static class ThymeleafProperties {\n\n\t\tprivate boolean checkTemplateLocation = true;\n\n\t\tprivate String prefix = DEFAULT_PREFIX;\n\n\t\tprivate String suffix = DEFAULT_SUFFIX;\n\n\t\tprivate String mode = "HTML5";\n\n\t\tprivate String encoding = "UTF-8";\n\n\t\tprivate String contentType = "text/html";\n\n\t\tprivate boolean cache = true;\n\n\t\tprivate String[] viewNames;\n\n\t\tprivate String[] excludedViewNames;\n\n\t\tpublic boolean isCheckTemplateLocation() {\n\t\t\treturn this.checkTemplateLocation;\n\t\t}\n\n\t\tpublic void setCheckTemplateLocation(boolean checkTemplateLocation) {\n\t\t\tthis.checkTemplateLocation = checkTemplateLocation;\n\t\t}\n\n\t\tpublic String getPrefix() {\n\t\t\treturn this.prefix;\n\t\t}\n\n\t\tpublic void setPrefix(String prefix) {\n\t\t\tthis.prefix = prefix;\n\t\t}\n\n\t\tpublic String getSuffix() {\n\t\t\treturn this.suffix;\n\t\t}\n\n\t\tpublic void setSuffix(String suffix) {\n\t\t\tthis.suffix = suffix;\n\t\t}\n\n\t\tpublic String getMode() {\n\t\t\treturn this.mode;\n\t\t}\n\n\t\tpublic void setMode(String mode) {\n\t\t\tthis.mode = mode;\n\t\t}\n\n\t\tpublic String getEncoding() {\n\t\t\treturn this.encoding;\n\t\t}\n\n\t\tpublic void setEncoding(String encoding) {\n\t\t\tthis.encoding = encoding;\n\t\t}\n\n\t\tpublic String getContentType() {\n\t\t\treturn this.contentType;\n\t\t}\n\n\t\tpublic void setContentType(String contentType) {\n\t\t\tthis.contentType = contentType;\n\t\t}\n\n\t\tpublic boolean isCache() {\n\t\t\treturn this.cache;\n\t\t}\n\n\t\tpublic void setCache(boolean cache) {\n\t\t\tthis.cache = cache;\n\t\t}\n\n\t\tpublic String[] getExcludedViewNames() {\n\t\t\treturn this.excludedViewNames;\n\t\t}\n\n\t\tpublic void setExcludedViewNames(String[] excludedViewNames) {\n\t\t\tthis.excludedViewNames = excludedViewNames;\n\t\t}\n\n\t\tpublic String[] getViewNames() {\n\t\t\treturn this.viewNames;\n\t\t}\n\n\t\tpublic void setViewNames(String[] viewNames) {\n\t\t\tthis.viewNames = viewNames;\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(SpringTemplateEngine.class)\n\tprotected static class ThymeleafDefaultConfiguration {\n\n\t\t@Autowired\n\t\tprivate final Collection<ITemplateResolver> templateResolvers = Collections\n\t\t\t\t.emptySet();\n\n\t\t@Autowired(required = false)\n\t\tprivate final Collection<IDialect> dialects = Collections.emptySet();\n\n\t\t@Bean\n\t\tpublic SpringTemplateEngine templateEngine() {\n\t\t\tSpringTemplateEngine engine = new SpringTemplateEngine();\n\t\t\tfor (ITemplateResolver templateResolver : this.templateResolvers) {\n\t\t\t\tengine.addTemplateResolver(templateResolver);\n\t\t\t}\n\t\t\tfor (IDialect dialect : this.dialects) {\n\t\t\t\tengine.addDialect(dialect);\n\t\t\t}\n\t\t\treturn engine;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(name = "nz.net.ultraq.thymeleaf.LayoutDialect")\n\tprotected static class ThymeleafWebLayoutConfiguration {\n\n\t\t@Bean\n\t\tpublic LayoutDialect layoutDialect() {\n\t\t\treturn new LayoutDialect();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(DataAttributeDialect.class)\n\tprotected static class DataAttributeDialectConfiguration {\n\n\t\t@Bean\n\t\tpublic DataAttributeDialect dialect() {\n\t\t\treturn new DataAttributeDialect();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ SpringSecurityDialect.class })\n\tprotected static class ThymeleafSecurityDialectConfiguration {\n\n\t\t@Bean\n\t\tpublic SpringSecurityDialect securityDialect() {\n\t\t\treturn new SpringSecurityDialect();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ Servlet.class })\n\tprotected static class ThymeleafViewResolverConfiguration {\n\n\t\t@Autowired\n\t\tprivate ThymeleafProperties properties;\n\n\t\t@Autowired\n\t\tprivate SpringTemplateEngine templateEngine;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "thymeleafViewResolver")\n\t\tpublic ThymeleafViewResolver thymeleafViewResolver() {\n\t\t\tThymeleafViewResolver resolver = new ThymeleafViewResolver();\n\t\t\tresolver.setTemplateEngine(this.templateEngine);\n\t\t\tresolver.setCharacterEncoding(this.properties.getEncoding());\n\t\t\tresolver.setContentType(appendCharset(this.properties.getContentType(),\n\t\t\t\t\tresolver.getCharacterEncoding()));\n\t\t\tresolver.setExcludedViewNames(this.properties.getExcludedViewNames());\n\t\t\tresolver.setViewNames(this.properties.getViewNames());\n\t\t\t// This resolver acts as a fallback resolver (e.g. like a\n\t\t\t// InternalResourceViewResolver) so it needs to have low precedence\n\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 5);\n\t\t\treturn resolver;\n\t\t}\n\n\t\tprivate String appendCharset(String type, String charset) {\n\t\t\tif (type.contains("charset=")) {\n\t\t\t\treturn type;\n\t\t\t}\n\t\t\treturn type + ";charset=" + charset;\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.thymeleaf;\n\nimport java.util.Collection;\nimport java.util.Collections;\n\nimport javax.annotation.PostConstruct;\nimport javax.servlet.Servlet;\n\nimport nz.net.ultraq.thymeleaf.LayoutDialect;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.util.Assert;\nimport org.thymeleaf.dialect.IDialect;\nimport org.thymeleaf.extras.springsecurity3.dialect.SpringSecurityDialect;\nimport org.thymeleaf.spring4.SpringTemplateEngine;\nimport org.thymeleaf.spring4.resourceresolver.SpringResourceResourceResolver;\nimport org.thymeleaf.spring4.view.ThymeleafViewResolver;\nimport org.thymeleaf.templateresolver.ITemplateResolver;\nimport org.thymeleaf.templateresolver.TemplateResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Thymeleaf.\n *\n * @author Dave Syer\n * @author Andy Wilkinson\n * @author Stephane Nicoll\n */\n@Configuration\n@EnableConfigurationProperties(ThymeleafAutoConfiguration.ThymeleafProperties.class)\n@ConditionalOnClass(SpringTemplateEngine.class)\n@AutoConfigureAfter(WebMvcAutoConfiguration.class)\npublic class ThymeleafAutoConfiguration {\n\n\tpublic static final String DEFAULT_PREFIX = "classpath:/templates/";\n\n\tpublic static final String DEFAULT_SUFFIX = ".html";\n\n\t@Configuration\n\t@ConditionalOnMissingBean(name = "defaultTemplateResolver")\n\tpublic static class DefaultTemplateResolverConfiguration  {\n\n\t\t@Autowired\n\t\tprivate ThymeleafProperties properties;\n\n\t\t@Autowired\n\t\tprivate final ResourceLoader resourceLoader = new DefaultResourceLoader();\n\n\n\t\t@PostConstruct\n\t\tpublic void checkTemplateLocationExists() {\n\t\t\tBoolean checkTemplateLocation = this.properties.isCheckTemplateLocation();\n\t\t\tif (checkTemplateLocation) {\n\t\t\t\tResource resource = this.resourceLoader.getResource(this.properties.getPrefix());\n\t\t\t\tAssert.state(resource.exists(), "Cannot find template location: "\n\t\t\t\t\t\t+ resource + " (please add some templates "\n\t\t\t\t\t\t+ "or check your Thymeleaf configuration)");\n\t\t\t}\n\t\t}\n\n\t\t@Bean\n\t\tpublic ITemplateResolver defaultTemplateResolver() {\n\t\t\tTemplateResolver resolver = new TemplateResolver();\n\t\t\tresolver.setResourceResolver(thymeleafResourceResolver());\n\t\t\tresolver.setPrefix(this.properties.getPrefix());\n\t\t\tresolver.setSuffix(this.properties.getSuffix());\n\t\t\tresolver.setTemplateMode(this.properties.getMode());\n\t\t\tresolver.setCharacterEncoding(this.properties.getEncoding());\n\t\t\tresolver.setCacheable(this.properties.isCache());\n\t\t\treturn resolver;\n\t\t}\n\n\t\t@Bean\n\t\tprotected SpringResourceResourceResolver thymeleafResourceResolver() {\n\t\t\treturn new SpringResourceResourceResolver();\n\t\t}\n\t}\n\n\t@ConfigurationProperties("spring.thymeleaf")\n\tpublic static class ThymeleafProperties {\n\n\t\tprivate boolean checkTemplateLocation = true;\n\n\t\tprivate String prefix = DEFAULT_PREFIX;\n\n\t\tprivate String suffix = DEFAULT_SUFFIX;\n\n\t\tprivate String mode = "HTML5";\n\n\t\tprivate String encoding = "UTF-8";\n\n\t\tprivate String contentType = "text/html";\n\n\t\tprivate boolean cache = true;\n\n\t\tprivate String[] viewNames;\n\n\t\tprivate String[] excludedViewNames;\n\n\t\tpublic boolean isCheckTemplateLocation() {\n\t\t\treturn checkTemplateLocation;\n\t\t}\n\n\t\tpublic void setCheckTemplateLocation(boolean checkTemplateLocation) {\n\t\t\tthis.checkTemplateLocation = checkTemplateLocation;\n\t\t}\n\n\t\tpublic String getPrefix() {\n\t\t\treturn prefix;\n\t\t}\n\n\t\tpublic void setPrefix(String prefix) {\n\t\t\tthis.prefix = prefix;\n\t\t}\n\n\t\tpublic String getSuffix() {\n\t\t\treturn suffix;\n\t\t}\n\n\t\tpublic void setSuffix(String suffix) {\n\t\t\tthis.suffix = suffix;\n\t\t}\n\n\t\tpublic String getMode() {\n\t\t\treturn mode;\n\t\t}\n\n\t\tpublic void setMode(String mode) {\n\t\t\tthis.mode = mode;\n\t\t}\n\n\t\tpublic String getEncoding() {\n\t\t\treturn encoding;\n\t\t}\n\n\t\tpublic void setEncoding(String encoding) {\n\t\t\tthis.encoding = encoding;\n\t\t}\n\n\t\tpublic String getContentType() {\n\t\t\treturn contentType;\n\t\t}\n\n\t\tpublic void setContentType(String contentType) {\n\t\t\tthis.contentType = contentType;\n\t\t}\n\n\t\tpublic boolean isCache() {\n\t\t\treturn cache;\n\t\t}\n\n\t\tpublic void setCache(boolean cache) {\n\t\t\tthis.cache = cache;\n\t\t}\n\n\t\tpublic String[] getExcludedViewNames() {\n\t\t\treturn excludedViewNames;\n\t\t}\n\n\t\tpublic void setExcludedViewNames(String[] excludedViewNames) {\n\t\t\tthis.excludedViewNames = excludedViewNames;\n\t\t}\n\n\t\tpublic String[] getViewNames() {\n\t\t\treturn viewNames;\n\t\t}\n\n\t\tpublic void setViewNames(String[] viewNames) {\n\t\t\tthis.viewNames = viewNames;\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(SpringTemplateEngine.class)\n\tprotected static class ThymeleafDefaultConfiguration {\n\n\t\t@Autowired\n\t\tprivate final Collection<ITemplateResolver> templateResolvers = Collections\n\t\t\t\t.emptySet();\n\n\t\t@Autowired(required = false)\n\t\tprivate final Collection<IDialect> dialects = Collections.emptySet();\n\n\t\t@Bean\n\t\tpublic SpringTemplateEngine templateEngine() {\n\t\t\tSpringTemplateEngine engine = new SpringTemplateEngine();\n\t\t\tfor (ITemplateResolver templateResolver : this.templateResolvers) {\n\t\t\t\tengine.addTemplateResolver(templateResolver);\n\t\t\t}\n\t\t\tfor (IDialect dialect : this.dialects) {\n\t\t\t\tengine.addDialect(dialect);\n\t\t\t}\n\t\t\treturn engine;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(name = "nz.net.ultraq.thymeleaf.LayoutDialect")\n\tprotected static class ThymeleafWebLayoutConfiguration {\n\n\t\t@Bean\n\t\tpublic LayoutDialect layoutDialect() {\n\t\t\treturn new LayoutDialect();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ Servlet.class })\n\tprotected static class ThymeleafViewResolverConfiguration {\n\n\t\t@Autowired\n\t\tprivate ThymeleafProperties properties;\n\n\n\t\t@Autowired\n\t\tprivate SpringTemplateEngine templateEngine;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "thymeleafViewResolver")\n\t\tpublic ThymeleafViewResolver thymeleafViewResolver() {\n\t\t\tThymeleafViewResolver resolver = new ThymeleafViewResolver();\n\t\t\tresolver.setTemplateEngine(this.templateEngine);\n\t\t\tresolver.setCharacterEncoding(this.properties.getEncoding());\n\t\t\tresolver.setContentType(appendCharset(this.properties.getContentType(),\n\t\t\t\t\tresolver.getCharacterEncoding()));\n\t\t\tresolver.setExcludedViewNames(this.properties.getExcludedViewNames());\n\t\t\tresolver.setViewNames(this.properties.getViewNames());\n\t\t\t// This resolver acts as a fallback resolver (e.g. like a\n\t\t\t// InternalResourceViewResolver) so it needs to have low precedence\n\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 5);\n\t\t\treturn resolver;\n\t\t}\n\n\t\tprivate String appendCharset(String type, String charset) {\n\t\t\tif (type.contains("charset=")) {\n\t\t\t\treturn type;\n\t\t\t}\n\t\t\treturn type + ";charset=" + charset;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ SpringSecurityDialect.class })\n\tprotected static class ThymeleafSecurityDialectConfiguration {\n\n\t\t@Bean\n\t\tpublic SpringSecurityDialect securityDialect() {\n\t\t\treturn new SpringSecurityDialect();\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
