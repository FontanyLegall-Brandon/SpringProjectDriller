{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisReactiveAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2012-2017 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.data.redis;\n+\n+import reactor.core.publisher.Flux;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.io.ResourceLoader;\n+import org.springframework.data.redis.connection.ReactiveRedisConnectionFactory;\n+import org.springframework.data.redis.core.ReactiveRedisTemplate;\n+import org.springframework.data.redis.serializer.JdkSerializationRedisSerializer;\n+import org.springframework.data.redis.serializer.RedisSerializationContext;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s reactive Redis\n+ * support.\n+ *\n+ * @author Mark Paluch\n+ * @author Stephane Nicoll\n+ * @since 2.0.0\n+ */\n+@Configuration\n+@ConditionalOnClass({ ReactiveRedisConnectionFactory.class, ReactiveRedisTemplate.class,\n+\t\tFlux.class })\n+@AutoConfigureAfter(RedisAutoConfiguration.class)\n+public class RedisReactiveAutoConfiguration {\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean(name = "reactiveRedisTemplate")\n+\t@ConditionalOnBean(ReactiveRedisConnectionFactory.class)\n+\tpublic ReactiveRedisTemplate<Object, Object> reactiveRedisTemplate(\n+\t\t\tReactiveRedisConnectionFactory reactiveRedisConnectionFactory,\n+\t\t\tResourceLoader resourceLoader) {\n+\n+\t\tJdkSerializationRedisSerializer jdkSerializer =\n+\t\t\t\tnew JdkSerializationRedisSerializer(resourceLoader.getClassLoader());\n+\n+\t\tRedisSerializationContext<Object, Object> serializationContext =\n+\t\t\t\tRedisSerializationContext.newSerializationContext()\n+\t\t\t\t\t\t.key(jdkSerializer)\n+\t\t\t\t\t\t.value(jdkSerializer)\n+\t\t\t\t\t\t.hashKey(jdkSerializer)\n+\t\t\t\t\t\t.hashValue(jdkSerializer).build();\n+\t\treturn new ReactiveRedisTemplate<>(reactiveRedisConnectionFactory,\n+\t\t\t\tserializationContext);\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.redis;\n\nimport reactor.core.publisher.Flux;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.data.redis.connection.ReactiveRedisConnectionFactory;\nimport org.springframework.data.redis.core.ReactiveRedisTemplate;\nimport org.springframework.data.redis.serializer.JdkSerializationRedisSerializer;\nimport org.springframework.data.redis.serializer.RedisSerializationContext;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s reactive Redis\n * support.\n *\n * @author Mark Paluch\n * @author Stephane Nicoll\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass({ ReactiveRedisConnectionFactory.class, ReactiveRedisTemplate.class,\n\t\tFlux.class })\n@AutoConfigureAfter(RedisAutoConfiguration.class)\npublic class RedisReactiveAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "reactiveRedisTemplate")\n\t@ConditionalOnBean(ReactiveRedisConnectionFactory.class)\n\tpublic ReactiveRedisTemplate<Object, Object> reactiveRedisTemplate(\n\t\t\tReactiveRedisConnectionFactory reactiveRedisConnectionFactory,\n\t\t\tResourceLoader resourceLoader) {\n\n\t\tJdkSerializationRedisSerializer jdkSerializer =\n\t\t\t\tnew JdkSerializationRedisSerializer(resourceLoader.getClassLoader());\n\n\t\tRedisSerializationContext<Object, Object> serializationContext =\n\t\t\t\tRedisSerializationContext.newSerializationContext()\n\t\t\t\t\t\t.key(jdkSerializer)\n\t\t\t\t\t\t.value(jdkSerializer)\n\t\t\t\t\t\t.hashKey(jdkSerializer)\n\t\t\t\t\t\t.hashValue(jdkSerializer).build();\n\t\treturn new ReactiveRedisTemplate<>(reactiveRedisConnectionFactory,\n\t\t\t\tserializationContext);\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
