{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceJmxConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2012-2017 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.jdbc;\n+\n+import javax.annotation.PostConstruct;\n+\n+import com.zaxxer.hikari.HikariDataSource;\n+\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.jmx.export.MBeanExporter;\n+\n+/**\n+ * Configures DataSource related MBeans.\n+ *\n+ * @author Stephane Nicoll\n+ */\n+@Configuration\n+@ConditionalOnProperty(prefix = "spring.jmx", name = "enabled", havingValue = "true", matchIfMissing = true)\n+class DataSourceJmxConfiguration {\n+\n+\t@Configuration\n+\t@ConditionalOnClass(HikariDataSource.class)\n+\t@ConditionalOnSingleCandidate(HikariDataSource.class)\n+\tstatic class Hikari {\n+\n+\t\tprivate final HikariDataSource dataSource;\n+\n+\t\tprivate final ObjectProvider<MBeanExporter> mBeanExporter;\n+\n+\t\tHikari(HikariDataSource dataSource,\n+\t\t\t\tObjectProvider<MBeanExporter> mBeanExporter) {\n+\t\t\tthis.dataSource = dataSource;\n+\t\t\tthis.mBeanExporter = mBeanExporter;\n+\t\t}\n+\n+\t\t@PostConstruct\n+\t\tpublic void validateMBeans() {\n+\t\t\tMBeanExporter exporter = this.mBeanExporter.getIfUnique();\n+\t\t\tif (exporter != null && this.dataSource.isRegisterMbeans()) {\n+\t\t\t\texporter.addExcludedBean("dataSource");\n+\t\t\t}\n+\t\t}\n+\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jdbc;\n\nimport javax.annotation.PostConstruct;\n\nimport com.zaxxer.hikari.HikariDataSource;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jmx.export.MBeanExporter;\n\n/**\n * Configures DataSource related MBeans.\n *\n * @author Stephane Nicoll\n */\n@Configuration\n@ConditionalOnProperty(prefix = "spring.jmx", name = "enabled", havingValue = "true", matchIfMissing = true)\nclass DataSourceJmxConfiguration {\n\n\t@Configuration\n\t@ConditionalOnClass(HikariDataSource.class)\n\t@ConditionalOnSingleCandidate(HikariDataSource.class)\n\tstatic class Hikari {\n\n\t\tprivate final HikariDataSource dataSource;\n\n\t\tprivate final ObjectProvider<MBeanExporter> mBeanExporter;\n\n\t\tHikari(HikariDataSource dataSource,\n\t\t\t\tObjectProvider<MBeanExporter> mBeanExporter) {\n\t\t\tthis.dataSource = dataSource;\n\t\t\tthis.mBeanExporter = mBeanExporter;\n\t\t}\n\n\t\t@PostConstruct\n\t\tpublic void validateMBeans() {\n\t\t\tMBeanExporter exporter = this.mBeanExporter.getIfUnique();\n\t\t\tif (exporter != null && this.dataSource.isRegisterMbeans()) {\n\t\t\t\texporter.addExcludedBean("dataSource");\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
