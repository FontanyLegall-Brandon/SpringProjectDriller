{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -18,7 +18,6 @@ package org.springframework.boot.autoconfigure.security;\n \n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\n import org.springframework.context.annotation.Configuration;\n@@ -37,7 +36,6 @@ import org.springframework.security.config.annotation.web.configuration.WebSecur\n  * @author Madhura Bhave\n  * @since 2.0.0\n  */\n-@ConditionalOnProperty(prefix = "security.basic", name = "enabled", havingValue = "true", matchIfMissing = true)\n @ConditionalOnClass(EnableWebSecurity.class)\n @ConditionalOnMissingBean(WebSecurityConfigurerAdapter.class)\n @ConditionalOnWebApplication(type = Type.SERVLET)\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\n/**\n * The default configuration for web security. It relies on Spring Security\'s\n * content-negotiation strategy to determine what sort of authentication to use. If the\n * user specifies their own {@link WebSecurityConfigurerAdapter}, this will back-off\n * completely and the users should specify all the bits that they want to configure as\n * part of the custom security configuration.\n *\n * @author Madhura Bhave\n * @since 2.0.0\n */\n@ConditionalOnClass(EnableWebSecurity.class)\n@ConditionalOnMissingBean(WebSecurityConfigurerAdapter.class)\n@ConditionalOnWebApplication(type = Type.SERVLET)\npublic class SpringBootWebSecurityConfiguration {\n\n\t@Configuration\n\t@Order(SecurityProperties.BASIC_AUTH_ORDER)\n\tstatic class DefaultConfigurerAdapter extends WebSecurityConfigurerAdapter {\n\n\t\t@Override\n\t\tprotected void configure(HttpSecurity http) throws Exception {\n\t\t\tsuper.configure(http);\n\t\t\thttp.csrf().disable();\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\n/**\n * The default configuration for web security. It relies on Spring Security\'s\n * content-negotiation strategy to determine what sort of authentication to use. If the\n * user specifies their own {@link WebSecurityConfigurerAdapter}, this will back-off\n * completely and the users should specify all the bits that they want to configure as\n * part of the custom security configuration.\n *\n * @author Madhura Bhave\n * @since 2.0.0\n */\n@ConditionalOnProperty(prefix = "security.basic", name = "enabled", havingValue = "true", matchIfMissing = true)\n@ConditionalOnClass(EnableWebSecurity.class)\n@ConditionalOnMissingBean(WebSecurityConfigurerAdapter.class)\n@ConditionalOnWebApplication(type = Type.SERVLET)\npublic class SpringBootWebSecurityConfiguration {\n\n\t@Configuration\n\t@Order(SecurityProperties.BASIC_AUTH_ORDER)\n\tstatic class DefaultConfigurerAdapter extends WebSecurityConfigurerAdapter {\n\n\t\t@Override\n\t\tprotected void configure(HttpSecurity http) throws Exception {\n\t\t\tsuper.configure(http);\n\t\t\thttp.csrf().disable();\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
