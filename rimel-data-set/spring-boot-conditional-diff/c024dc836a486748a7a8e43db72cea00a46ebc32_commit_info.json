{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/DeviceDelegatingViewResolverAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/DeviceDelegatingViewResolverAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,27 +16,27 @@\n \n package org.springframework.boot.autoconfigure.mobile;\n \n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n import org.thymeleaf.spring4.view.ThymeleafViewResolver;\n \n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration;\n+import org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration;\n+import org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration;\n+import org.springframework.boot.autoconfigure.mustache.web.MustacheViewResolver;\n import org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration;\n import org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.core.Ordered;\n import org.springframework.mobile.device.view.LiteDeviceDelegatingViewResolver;\n-import org.springframework.web.servlet.ViewResolver;\n import org.springframework.web.servlet.view.InternalResourceViewResolver;\n+import org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver;\n+import org.springframework.web.servlet.view.groovy.GroovyMarkupViewResolver;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for Spring Mobile\'s\n@@ -45,102 +45,96 @@ import org.springframework.web.servlet.view.InternalResourceViewResolver;\n  * {@link InternalResourceViewResolver} is used as a fallback.\n  *\n  * @author Roy Clarkson\n+ * @author Stephane Nicoll\n  * @since 1.1.0\n  */\n @Configuration\n @ConditionalOnWebApplication\n @ConditionalOnClass(LiteDeviceDelegatingViewResolver.class)\n-@AutoConfigureAfter({ WebMvcAutoConfiguration.class, ThymeleafAutoConfiguration.class })\n+@ConditionalOnProperty(prefix = "spring.mobile.devicedelegatingviewresolver", name = "enabled", havingValue = "true")\n+@EnableConfigurationProperties(DeviceDelegatingViewResolverProperties.class)\n+@AutoConfigureAfter({WebMvcAutoConfiguration.class, FreeMarkerAutoConfiguration.class,\n+\t\tGroovyTemplateAutoConfiguration.class, MustacheAutoConfiguration.class,\n+\t\tThymeleafAutoConfiguration.class})\n public class DeviceDelegatingViewResolverAutoConfiguration {\n \n-\tprivate static final Log logger = LogFactory\n-\t\t\t.getLog(DeviceDelegatingViewResolverAutoConfiguration.class);\n-\n-\tprivate static abstract class AbstractDelegateConfiguration {\n-\n-\t\t@Autowired\n-\t\tprivate DeviceDelegatingViewResolverProperties viewResolverProperties;\n-\n-\t\tprotected LiteDeviceDelegatingViewResolver getConfiguredViewResolver(\n-\t\t\t\tViewResolver delegate, int delegateOrder) {\n-\t\t\tLiteDeviceDelegatingViewResolver resolver = new LiteDeviceDelegatingViewResolver(\n-\t\t\t\t\tdelegate);\n-\t\t\tresolver.setEnableFallback(this.viewResolverProperties.isEnableFallback());\n-\t\t\tresolver.setNormalPrefix(this.viewResolverProperties.getNormalPrefix());\n-\t\t\tresolver.setNormalSuffix(this.viewResolverProperties.getNormalSuffix());\n-\t\t\tresolver.setMobilePrefix(this.viewResolverProperties.getMobilePrefix());\n-\t\t\tresolver.setMobileSuffix(this.viewResolverProperties.getMobileSuffix());\n-\t\t\tresolver.setTabletPrefix(this.viewResolverProperties.getTabletPrefix());\n-\t\t\tresolver.setTabletSuffix(this.viewResolverProperties.getTabletSuffix());\n-\t\t\tresolver.setOrder(getAdjustedOrder(delegateOrder));\n-\t\t\treturn resolver;\n-\t\t}\n+\t@Configuration\n+\tprotected static class LiteDeviceDelegatingViewResolverFactoryConfiguration {\n \n-\t\tprivate int getAdjustedOrder(int order) {\n-\t\t\tif (order == Ordered.HIGHEST_PRECEDENCE) {\n-\t\t\t\treturn Ordered.HIGHEST_PRECEDENCE;\n-\t\t\t}\n-\t\t\t// The view resolver must be ordered higher than the delegate view\n-\t\t\t// resolver, otherwise the view names will not be adjusted\n-\t\t\treturn order - 1;\n+\t\t@Bean\n+\t\tpublic DeviceDelegatingViewResolverFactory deviceDelegatingViewResolverFactory(\n+\t\t\t\tDeviceDelegatingViewResolverProperties properties) {\n+\t\t\treturn new DeviceDelegatingViewResolverFactory(properties);\n \t\t}\n \n \t}\n \n \t@Configuration\n-\t@EnableConfigurationProperties(DeviceDelegatingViewResolverProperties.class)\n-\t@ConditionalOnMissingBean(name = "deviceDelegatingViewResolver")\n-\t@ConditionalOnProperty(prefix = "spring.mobile.devicedelegatingviewresolver", name = "enabled", havingValue = "true", matchIfMissing = false)\n-\tprotected static class DeviceDelegatingViewResolverConfiguration {\n-\n-\t\t@Configuration\n-\t\t@ConditionalOnBean(name = "thymeleafViewResolver")\n-\t\tprotected static class ThymeleafViewResolverViewResolverDelegateConfiguration\n-\t\t\t\textends AbstractDelegateConfiguration {\n-\n-\t\t\tprivate final ThymeleafViewResolver viewResolver;\n-\n-\t\t\tprotected ThymeleafViewResolverViewResolverDelegateConfiguration(\n-\t\t\t\t\tThymeleafViewResolver viewResolver) {\n-\t\t\t\tthis.viewResolver = viewResolver;\n-\t\t\t}\n-\n-\t\t\t@Bean\n-\t\t\tpublic LiteDeviceDelegatingViewResolver deviceDelegatingViewResolver() {\n-\t\t\t\tif (logger.isDebugEnabled()) {\n-\t\t\t\t\tlogger.debug("LiteDeviceDelegatingViewResolver delegates to "\n-\t\t\t\t\t\t\t+ "ThymeleafViewResolver");\n-\t\t\t\t}\n-\t\t\t\treturn getConfiguredViewResolver(this.viewResolver,\n-\t\t\t\t\t\tthis.viewResolver.getOrder());\n-\t\t\t}\n+\t@ConditionalOnClass(FreeMarkerViewResolver.class)\n+\tprotected static class DeviceDelegatingFreemarkerViewResolverConfiguration {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnBean(FreeMarkerViewResolver.class)\n+\t\tpublic LiteDeviceDelegatingViewResolver deviceDelegatingFreemarkerViewResolver(\n+\t\t\t\tDeviceDelegatingViewResolverFactory factory,\n+\t\t\t\tFreeMarkerViewResolver viewResolver) {\n+\t\t\treturn factory.createViewResolver(viewResolver);\n+\t\t}\n+\n+\t}\n \n+\t@Configuration\n+\t@ConditionalOnClass(GroovyMarkupViewResolver.class)\n+\tprotected static class DeviceDelegatingGroovyMarkupViewResolverConfiguration {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnBean(GroovyMarkupViewResolver.class)\n+\t\tpublic LiteDeviceDelegatingViewResolver deviceDelegatingGroovyMarkupViewResolver(\n+\t\t\t\tDeviceDelegatingViewResolverFactory factory,\n+\t\t\t\tGroovyMarkupViewResolver viewResolver) {\n+\t\t\treturn factory.createViewResolver(viewResolver);\n \t\t}\n \n-\t\t@Configuration\n-\t\t@EnableConfigurationProperties(DeviceDelegatingViewResolverProperties.class)\n-\t\t@ConditionalOnMissingBean(name = "thymeleafViewResolver")\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnClass(InternalResourceViewResolver.class)\n+\tprotected static class DeviceDelegatingJspViewResolverConfiguration {\n+\n+\t\t@Bean\n \t\t@ConditionalOnBean(InternalResourceViewResolver.class)\n-\t\tprotected static class InternalResourceViewResolverDelegateConfiguration\n-\t\t\t\textends AbstractDelegateConfiguration {\n-\n-\t\t\tprivate final InternalResourceViewResolver viewResolver;\n-\n-\t\t\tprotected InternalResourceViewResolverDelegateConfiguration(\n-\t\t\t\t\tInternalResourceViewResolver viewResolver) {\n-\t\t\t\tthis.viewResolver = viewResolver;\n-\t\t\t}\n-\n-\t\t\t@Bean\n-\t\t\tpublic LiteDeviceDelegatingViewResolver deviceDelegatingViewResolver() {\n-\t\t\t\tif (logger.isDebugEnabled()) {\n-\t\t\t\t\tlogger.debug("LiteDeviceDelegatingViewResolver delegates to "\n-\t\t\t\t\t\t\t+ "InternalResourceViewResolver");\n-\t\t\t\t}\n-\t\t\t\treturn getConfiguredViewResolver(this.viewResolver,\n-\t\t\t\t\t\tthis.viewResolver.getOrder());\n-\t\t\t}\n+\t\tpublic LiteDeviceDelegatingViewResolver deviceDelegatingJspViewResolver(\n+\t\t\t\tDeviceDelegatingViewResolverFactory factory,\n+\t\t\t\tInternalResourceViewResolver viewResolver) {\n+\t\t\treturn factory.createViewResolver(viewResolver);\n+\t\t}\n+\n+\t}\n \n+\t@Configuration\n+\t@ConditionalOnClass(MustacheViewResolver.class)\n+\tprotected static class DeviceDelegatingMustacheViewResolverConfiguration {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnBean(MustacheViewResolver.class)\n+\t\tpublic LiteDeviceDelegatingViewResolver deviceDelegatingMustacheViewResolver(\n+\t\t\t\tDeviceDelegatingViewResolverFactory factory,\n+\t\t\t\tMustacheViewResolver viewResolver) {\n+\t\t\treturn factory.createViewResolver(viewResolver);\n+\t\t}\n+\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnClass(ThymeleafViewResolver.class)\n+\tprotected static class DeviceDelegatingThymeleafViewResolverConfiguration {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnBean(ThymeleafViewResolver.class)\n+\t\tpublic LiteDeviceDelegatingViewResolver deviceDelegatingThymeleafViewResolver(\n+\t\t\t\tDeviceDelegatingViewResolverFactory factory,\n+\t\t\t\tThymeleafViewResolver viewResolver) {\n+\t\t\treturn factory.createViewResolver(viewResolver);\n \t\t}\n \n \t}\n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.mobile;\n\nimport org.thymeleaf.spring4.view.ThymeleafViewResolver;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration;\nimport org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration;\nimport org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration;\nimport org.springframework.boot.autoconfigure.mustache.web.MustacheViewResolver;\nimport org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.mobile.device.view.LiteDeviceDelegatingViewResolver;\nimport org.springframework.web.servlet.view.InternalResourceViewResolver;\nimport org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver;\nimport org.springframework.web.servlet.view.groovy.GroovyMarkupViewResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Mobile\'s\n * {@link LiteDeviceDelegatingViewResolver}. If {@link ThymeleafViewResolver} is available\n * it is configured as the delegate view resolver. Otherwise,\n * {@link InternalResourceViewResolver} is used as a fallback.\n *\n * @author Roy Clarkson\n * @author Stephane Nicoll\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnWebApplication\n@ConditionalOnClass(LiteDeviceDelegatingViewResolver.class)\n@ConditionalOnProperty(prefix = "spring.mobile.devicedelegatingviewresolver", name = "enabled", havingValue = "true")\n@EnableConfigurationProperties(DeviceDelegatingViewResolverProperties.class)\n@AutoConfigureAfter({WebMvcAutoConfiguration.class, FreeMarkerAutoConfiguration.class,\n\t\tGroovyTemplateAutoConfiguration.class, MustacheAutoConfiguration.class,\n\t\tThymeleafAutoConfiguration.class})\npublic class DeviceDelegatingViewResolverAutoConfiguration {\n\n\t@Configuration\n\tprotected static class LiteDeviceDelegatingViewResolverFactoryConfiguration {\n\n\t\t@Bean\n\t\tpublic DeviceDelegatingViewResolverFactory deviceDelegatingViewResolverFactory(\n\t\t\t\tDeviceDelegatingViewResolverProperties properties) {\n\t\t\treturn new DeviceDelegatingViewResolverFactory(properties);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(FreeMarkerViewResolver.class)\n\tprotected static class DeviceDelegatingFreemarkerViewResolverConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnBean(FreeMarkerViewResolver.class)\n\t\tpublic LiteDeviceDelegatingViewResolver deviceDelegatingFreemarkerViewResolver(\n\t\t\t\tDeviceDelegatingViewResolverFactory factory,\n\t\t\t\tFreeMarkerViewResolver viewResolver) {\n\t\t\treturn factory.createViewResolver(viewResolver);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(GroovyMarkupViewResolver.class)\n\tprotected static class DeviceDelegatingGroovyMarkupViewResolverConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnBean(GroovyMarkupViewResolver.class)\n\t\tpublic LiteDeviceDelegatingViewResolver deviceDelegatingGroovyMarkupViewResolver(\n\t\t\t\tDeviceDelegatingViewResolverFactory factory,\n\t\t\t\tGroovyMarkupViewResolver viewResolver) {\n\t\t\treturn factory.createViewResolver(viewResolver);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(InternalResourceViewResolver.class)\n\tprotected static class DeviceDelegatingJspViewResolverConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnBean(InternalResourceViewResolver.class)\n\t\tpublic LiteDeviceDelegatingViewResolver deviceDelegatingJspViewResolver(\n\t\t\t\tDeviceDelegatingViewResolverFactory factory,\n\t\t\t\tInternalResourceViewResolver viewResolver) {\n\t\t\treturn factory.createViewResolver(viewResolver);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(MustacheViewResolver.class)\n\tprotected static class DeviceDelegatingMustacheViewResolverConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnBean(MustacheViewResolver.class)\n\t\tpublic LiteDeviceDelegatingViewResolver deviceDelegatingMustacheViewResolver(\n\t\t\t\tDeviceDelegatingViewResolverFactory factory,\n\t\t\t\tMustacheViewResolver viewResolver) {\n\t\t\treturn factory.createViewResolver(viewResolver);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(ThymeleafViewResolver.class)\n\tprotected static class DeviceDelegatingThymeleafViewResolverConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnBean(ThymeleafViewResolver.class)\n\t\tpublic LiteDeviceDelegatingViewResolver deviceDelegatingThymeleafViewResolver(\n\t\t\t\tDeviceDelegatingViewResolverFactory factory,\n\t\t\t\tThymeleafViewResolver viewResolver) {\n\t\t\treturn factory.createViewResolver(viewResolver);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.mobile;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.thymeleaf.spring4.view.ThymeleafViewResolver;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.mobile.device.view.LiteDeviceDelegatingViewResolver;\nimport org.springframework.web.servlet.ViewResolver;\nimport org.springframework.web.servlet.view.InternalResourceViewResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Mobile\'s\n * {@link LiteDeviceDelegatingViewResolver}. If {@link ThymeleafViewResolver} is available\n * it is configured as the delegate view resolver. Otherwise,\n * {@link InternalResourceViewResolver} is used as a fallback.\n *\n * @author Roy Clarkson\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnWebApplication\n@ConditionalOnClass(LiteDeviceDelegatingViewResolver.class)\n@AutoConfigureAfter({ WebMvcAutoConfiguration.class, ThymeleafAutoConfiguration.class })\npublic class DeviceDelegatingViewResolverAutoConfiguration {\n\n\tprivate static final Log logger = LogFactory\n\t\t\t.getLog(DeviceDelegatingViewResolverAutoConfiguration.class);\n\n\tprivate static abstract class AbstractDelegateConfiguration {\n\n\t\t@Autowired\n\t\tprivate DeviceDelegatingViewResolverProperties viewResolverProperties;\n\n\t\tprotected LiteDeviceDelegatingViewResolver getConfiguredViewResolver(\n\t\t\t\tViewResolver delegate, int delegateOrder) {\n\t\t\tLiteDeviceDelegatingViewResolver resolver = new LiteDeviceDelegatingViewResolver(\n\t\t\t\t\tdelegate);\n\t\t\tresolver.setEnableFallback(this.viewResolverProperties.isEnableFallback());\n\t\t\tresolver.setNormalPrefix(this.viewResolverProperties.getNormalPrefix());\n\t\t\tresolver.setNormalSuffix(this.viewResolverProperties.getNormalSuffix());\n\t\t\tresolver.setMobilePrefix(this.viewResolverProperties.getMobilePrefix());\n\t\t\tresolver.setMobileSuffix(this.viewResolverProperties.getMobileSuffix());\n\t\t\tresolver.setTabletPrefix(this.viewResolverProperties.getTabletPrefix());\n\t\t\tresolver.setTabletSuffix(this.viewResolverProperties.getTabletSuffix());\n\t\t\tresolver.setOrder(getAdjustedOrder(delegateOrder));\n\t\t\treturn resolver;\n\t\t}\n\n\t\tprivate int getAdjustedOrder(int order) {\n\t\t\tif (order == Ordered.HIGHEST_PRECEDENCE) {\n\t\t\t\treturn Ordered.HIGHEST_PRECEDENCE;\n\t\t\t}\n\t\t\t// The view resolver must be ordered higher than the delegate view\n\t\t\t// resolver, otherwise the view names will not be adjusted\n\t\t\treturn order - 1;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@EnableConfigurationProperties(DeviceDelegatingViewResolverProperties.class)\n\t@ConditionalOnMissingBean(name = "deviceDelegatingViewResolver")\n\t@ConditionalOnProperty(prefix = "spring.mobile.devicedelegatingviewresolver", name = "enabled", havingValue = "true", matchIfMissing = false)\n\tprotected static class DeviceDelegatingViewResolverConfiguration {\n\n\t\t@Configuration\n\t\t@ConditionalOnBean(name = "thymeleafViewResolver")\n\t\tprotected static class ThymeleafViewResolverViewResolverDelegateConfiguration\n\t\t\t\textends AbstractDelegateConfiguration {\n\n\t\t\tprivate final ThymeleafViewResolver viewResolver;\n\n\t\t\tprotected ThymeleafViewResolverViewResolverDelegateConfiguration(\n\t\t\t\t\tThymeleafViewResolver viewResolver) {\n\t\t\t\tthis.viewResolver = viewResolver;\n\t\t\t}\n\n\t\t\t@Bean\n\t\t\tpublic LiteDeviceDelegatingViewResolver deviceDelegatingViewResolver() {\n\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug("LiteDeviceDelegatingViewResolver delegates to "\n\t\t\t\t\t\t\t+ "ThymeleafViewResolver");\n\t\t\t\t}\n\t\t\t\treturn getConfiguredViewResolver(this.viewResolver,\n\t\t\t\t\t\tthis.viewResolver.getOrder());\n\t\t\t}\n\n\t\t}\n\n\t\t@Configuration\n\t\t@EnableConfigurationProperties(DeviceDelegatingViewResolverProperties.class)\n\t\t@ConditionalOnMissingBean(name = "thymeleafViewResolver")\n\t\t@ConditionalOnBean(InternalResourceViewResolver.class)\n\t\tprotected static class InternalResourceViewResolverDelegateConfiguration\n\t\t\t\textends AbstractDelegateConfiguration {\n\n\t\t\tprivate final InternalResourceViewResolver viewResolver;\n\n\t\t\tprotected InternalResourceViewResolverDelegateConfiguration(\n\t\t\t\t\tInternalResourceViewResolver viewResolver) {\n\t\t\t\tthis.viewResolver = viewResolver;\n\t\t\t}\n\n\t\t\t@Bean\n\t\t\tpublic LiteDeviceDelegatingViewResolver deviceDelegatingViewResolver() {\n\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug("LiteDeviceDelegatingViewResolver delegates to "\n\t\t\t\t\t\t\t+ "InternalResourceViewResolver");\n\t\t\t\t}\n\t\t\t\treturn getConfiguredViewResolver(this.viewResolver,\n\t\t\t\t\t\tthis.viewResolver.getOrder());\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
