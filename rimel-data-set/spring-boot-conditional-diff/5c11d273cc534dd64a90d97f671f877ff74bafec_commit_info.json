{'_old_path': PosixPath('spring-actuator/src/main/java/org/springframework/actuate/fixme/ManagementServerConfiguration.java'), '_new_path': None, 'change_type': <ModificationType.DELETE: 4>, 'diff': '@@ -1,141 +0,0 @@\n-/*\n- * Copyright 2012-2013 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the "License");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an "AS IS" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.actuate.fixme;\n-\n-import java.io.IOException;\n-\n-import javax.servlet.Filter;\n-import javax.servlet.FilterChain;\n-import javax.servlet.ServletException;\n-import javax.servlet.ServletRequest;\n-import javax.servlet.ServletResponse;\n-\n-import org.springframework.actuate.properties.ManagementServerProperties;\n-import org.springframework.actuate.web.BasicErrorController;\n-import org.springframework.beans.factory.BeanFactory;\n-import org.springframework.beans.factory.HierarchicalBeanFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Value;\n-import org.springframework.bootstrap.context.condition.ConditionalOnBean;\n-import org.springframework.bootstrap.context.condition.ConditionalOnClass;\n-import org.springframework.bootstrap.context.embedded.ConfigurableEmbeddedServletContainerFactory;\n-import org.springframework.bootstrap.context.embedded.EmbeddedServletContainerCustomizer;\n-import org.springframework.bootstrap.context.embedded.EmbeddedServletContainerFactory;\n-import org.springframework.bootstrap.context.embedded.ErrorPage;\n-import org.springframework.bootstrap.context.embedded.jetty.JettyEmbeddedServletContainerFactory;\n-import org.springframework.bootstrap.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;\n-import org.springframework.context.ApplicationContext;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.context.annotation.Import;\n-import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;\n-import org.springframework.web.filter.GenericFilterBean;\n-import org.springframework.web.servlet.DispatcherServlet;\n-import org.springframework.web.servlet.config.annotation.EnableWebMvc;\n-\n-/**\n- * Configuration for creating a new container (e.g. tomcat) for the management endpoints.\n- * \n- * @author Dave Syer\n- */\n-@Configuration\n-@EnableWebMvc\n-@Import(ManagementSecurityConfiguration.class)\n-public class ManagementServerConfiguration {\n-\n-\t// FIXME delete when security works\n-\n-\t@Bean\n-\tpublic DispatcherServlet dispatcherServlet() {\n-\t\treturn new DispatcherServlet();\n-\t}\n-\n-\t@Bean\n-\tpublic static PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer(\n-\t\t\tApplicationContext context) {\n-\t\treturn new PropertySourcesPlaceholderConfigurer();\n-\t}\n-\n-\t@Bean\n-\tpublic BasicErrorController errorEndpoint() {\n-\t\treturn new BasicErrorController();\n-\t}\n-\n-\t@Bean\n-\t@ConditionalOnBean(TomcatEmbeddedServletContainerFactory.class)\n-\tpublic EmbeddedServletContainerFactory tomcatContainer(\n-\t\t\tHierarchicalBeanFactory beanFactory) {\n-\t\tTomcatEmbeddedServletContainerFactory factory = beanFactory\n-\t\t\t\t.getParentBeanFactory().getBean(\n-\t\t\t\t\t\tTomcatEmbeddedServletContainerFactory.class);\n-\t\treturn factory.getChildContextFactory("Management");\n-\t}\n-\n-\t@Bean\n-\t@ConditionalOnBean(JettyEmbeddedServletContainerFactory.class)\n-\tpublic EmbeddedServletContainerFactory jettyContainer() {\n-\t\treturn new JettyEmbeddedServletContainerFactory();\n-\t}\n-\n-\t@Configuration\n-\tprotected static class ServerCustomizationConfiguration implements\n-\t\t\tEmbeddedServletContainerCustomizer {\n-\n-\t\t@Value("${endpoints.error.path:/error}")\n-\t\tprivate String errorPath = "/error";\n-\n-\t\t@Autowired\n-\t\tprivate ApplicationContext beanFactory;\n-\n-\t\t@Override\n-\t\tpublic void customize(ConfigurableEmbeddedServletContainerFactory factory) {\n-\t\t\tManagementServerProperties configuration = this.beanFactory\n-\t\t\t\t\t.getBean(ManagementServerProperties.class);\n-\t\t\tfactory.setPort(configuration.getPort());\n-\t\t\tfactory.setAddress(configuration.getAddress());\n-\t\t\tfactory.setContextPath(configuration.getContextPath());\n-\t\t\tfactory.addErrorPages(new ErrorPage(this.errorPath));\n-\t\t}\n-\n-\t}\n-\n-}\n-\n-@Configuration\n-@ConditionalOnClass(name = {\n-\t\t"org.springframework.security.config.annotation.web.EnableWebSecurity",\n-\t\t"javax.servlet.Filter" })\n-class ManagementSecurityConfiguration {\n-\n-\t@Bean\n-\t// TODO: enable and get rid of the empty filter when @ConditionalOnBean works\n-\t// @ConditionalOnBean(name = "springSecurityFilterChain")\n-\tpublic Filter springSecurityFilterChain(HierarchicalBeanFactory beanFactory) {\n-\t\tBeanFactory parent = beanFactory.getParentBeanFactory();\n-\t\tif (parent != null && parent.containsBean("springSecurityFilterChain")) {\n-\t\t\treturn parent.getBean("springSecurityFilterChain", Filter.class);\n-\t\t}\n-\t\treturn new GenericFilterBean() {\n-\t\t\t@Override\n-\t\t\tpublic void doFilter(ServletRequest request, ServletResponse response,\n-\t\t\t\t\tFilterChain chain) throws IOException, ServletException {\n-\t\t\t\tchain.doFilter(request, response);\n-\t\t\t}\n-\t\t};\n-\t}\n-\n-}\n', 'source_code': None, 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.actuate.fixme;\n\nimport java.io.IOException;\n\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\n\nimport org.springframework.actuate.properties.ManagementServerProperties;\nimport org.springframework.actuate.web.BasicErrorController;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.HierarchicalBeanFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.bootstrap.context.condition.ConditionalOnBean;\nimport org.springframework.bootstrap.context.condition.ConditionalOnClass;\nimport org.springframework.bootstrap.context.embedded.ConfigurableEmbeddedServletContainerFactory;\nimport org.springframework.bootstrap.context.embedded.EmbeddedServletContainerCustomizer;\nimport org.springframework.bootstrap.context.embedded.EmbeddedServletContainerFactory;\nimport org.springframework.bootstrap.context.embedded.ErrorPage;\nimport org.springframework.bootstrap.context.embedded.jetty.JettyEmbeddedServletContainerFactory;\nimport org.springframework.bootstrap.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.support.PropertySourcesPlaceholderConfigurer;\nimport org.springframework.web.filter.GenericFilterBean;\nimport org.springframework.web.servlet.DispatcherServlet;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\n\n/**\n * Configuration for creating a new container (e.g. tomcat) for the management endpoints.\n * \n * @author Dave Syer\n */\n@Configuration\n@EnableWebMvc\n@Import(ManagementSecurityConfiguration.class)\npublic class ManagementServerConfiguration {\n\n\t// FIXME delete when security works\n\n\t@Bean\n\tpublic DispatcherServlet dispatcherServlet() {\n\t\treturn new DispatcherServlet();\n\t}\n\n\t@Bean\n\tpublic static PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer(\n\t\t\tApplicationContext context) {\n\t\treturn new PropertySourcesPlaceholderConfigurer();\n\t}\n\n\t@Bean\n\tpublic BasicErrorController errorEndpoint() {\n\t\treturn new BasicErrorController();\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(TomcatEmbeddedServletContainerFactory.class)\n\tpublic EmbeddedServletContainerFactory tomcatContainer(\n\t\t\tHierarchicalBeanFactory beanFactory) {\n\t\tTomcatEmbeddedServletContainerFactory factory = beanFactory\n\t\t\t\t.getParentBeanFactory().getBean(\n\t\t\t\t\t\tTomcatEmbeddedServletContainerFactory.class);\n\t\treturn factory.getChildContextFactory("Management");\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(JettyEmbeddedServletContainerFactory.class)\n\tpublic EmbeddedServletContainerFactory jettyContainer() {\n\t\treturn new JettyEmbeddedServletContainerFactory();\n\t}\n\n\t@Configuration\n\tprotected static class ServerCustomizationConfiguration implements\n\t\t\tEmbeddedServletContainerCustomizer {\n\n\t\t@Value("${endpoints.error.path:/error}")\n\t\tprivate String errorPath = "/error";\n\n\t\t@Autowired\n\t\tprivate ApplicationContext beanFactory;\n\n\t\t@Override\n\t\tpublic void customize(ConfigurableEmbeddedServletContainerFactory factory) {\n\t\t\tManagementServerProperties configuration = this.beanFactory\n\t\t\t\t\t.getBean(ManagementServerProperties.class);\n\t\t\tfactory.setPort(configuration.getPort());\n\t\t\tfactory.setAddress(configuration.getAddress());\n\t\t\tfactory.setContextPath(configuration.getContextPath());\n\t\t\tfactory.addErrorPages(new ErrorPage(this.errorPath));\n\t\t}\n\n\t}\n\n}\n\n@Configuration\n@ConditionalOnClass(name = {\n\t\t"org.springframework.security.config.annotation.web.EnableWebSecurity",\n\t\t"javax.servlet.Filter" })\nclass ManagementSecurityConfiguration {\n\n\t@Bean\n\t// TODO: enable and get rid of the empty filter when @ConditionalOnBean works\n\t// @ConditionalOnBean(name = "springSecurityFilterChain")\n\tpublic Filter springSecurityFilterChain(HierarchicalBeanFactory beanFactory) {\n\t\tBeanFactory parent = beanFactory.getParentBeanFactory();\n\t\tif (parent != null && parent.containsBean("springSecurityFilterChain")) {\n\t\t\treturn parent.getBean("springSecurityFilterChain", Filter.class);\n\t\t}\n\t\treturn new GenericFilterBean() {\n\t\t\t@Override\n\t\t\tpublic void doFilter(ServletRequest request, ServletResponse response,\n\t\t\t\t\tFilterChain chain) throws IOException, ServletException {\n\t\t\t\tchain.doFilter(request, response);\n\t\t\t}\n\t\t};\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
