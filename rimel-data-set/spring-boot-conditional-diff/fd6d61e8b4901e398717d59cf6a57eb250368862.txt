@@ -0,0 +1,73 @@
+
+
+package org.springframework.boot.autoconfigure.session;
+
+import javax.annotation.PostConstruct;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
+import org.springframework.boot.autoconfigure.redis.RedisAutoConfiguration;
+import org.springframework.boot.autoconfigure.web.ServerProperties;
+import org.springframework.boot.context.properties.EnableConfigurationProperties;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.data.redis.connection.RedisConnectionFactory;
+import org.springframework.session.Session;
+import org.springframework.session.data.redis.RedisOperationsSessionRepository;
+import org.springframework.session.data.redis.config.annotation.web.http.EnableRedisHttpSession;
+import org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration;
+
+
+@Configuration
+@ConditionalOnClass(Session.class)
+@EnableConfigurationProperties(ServerProperties.class)
+@AutoConfigureAfter(RedisAutoConfiguration.class)
+public class SessionAutoConfiguration {
+
+	@ConditionalOnClass(RedisConnectionFactory.class)
+	@ConditionalOnWebApplication
+	@ConditionalOnMissingBean(RedisHttpSessionConfiguration.class)
+	@EnableRedisHttpSession
+	@Configuration
+	public static class SessionRedisHttpConfiguration {
+
+		@Autowired
+		private ServerProperties serverProperties;
+
+		@Autowired
+		private RedisOperationsSessionRepository sessionRepository;
+
+		@PostConstruct
+		public void applyConfigurationProperties() {
+			if (this.serverProperties.getSessionTimeout() != null) {
+				this.sessionRepository
+						.setDefaultMaxInactiveInterval(this.serverProperties
+								.getSessionTimeout());
+			}
+		}
+
+	}
+
+}

