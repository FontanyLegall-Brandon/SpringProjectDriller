{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerServletWebConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerServletWebConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -32,9 +32,15 @@ import org.springframework.web.servlet.view.freemarker.FreeMarkerConfig;\n import org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer;\n import org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver;\n \n+/**\n+ * Configuration for FreeMarker when used in a servlet web context.\n+ *\n+ * @author Brian Clozel\n+ * @author Andy Wilkinson\n+ */\n @Configuration\n @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n-@ConditionalOnClass({Servlet.class, FreeMarkerConfigurer.class})\n+@ConditionalOnClass({ Servlet.class, FreeMarkerConfigurer.class })\n @AutoConfigureAfter(WebMvcAutoConfiguration.class)\n class FreeMarkerServletWebConfiguration extends AbstractFreeMarkerConfiguration {\n \n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.freemarker;\n\nimport javax.servlet.Servlet;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.web.ConditionalOnEnabledResourceChain;\nimport org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.resource.ResourceUrlEncodingFilter;\nimport org.springframework.web.servlet.view.freemarker.FreeMarkerConfig;\nimport org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer;\nimport org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver;\n\n/**\n * Configuration for FreeMarker when used in a servlet web context.\n *\n * @author Brian Clozel\n * @author Andy Wilkinson\n */\n@Configuration\n@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n@ConditionalOnClass({ Servlet.class, FreeMarkerConfigurer.class })\n@AutoConfigureAfter(WebMvcAutoConfiguration.class)\nclass FreeMarkerServletWebConfiguration extends AbstractFreeMarkerConfiguration {\n\n\tprotected FreeMarkerServletWebConfiguration(FreeMarkerProperties properties) {\n\t\tsuper(properties);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(FreeMarkerConfig.class)\n\tpublic FreeMarkerConfigurer freeMarkerConfigurer() {\n\t\tFreeMarkerConfigurer configurer = new FreeMarkerConfigurer();\n\t\tapplyProperties(configurer);\n\t\treturn configurer;\n\t}\n\n\t@Bean\n\tpublic freemarker.template.Configuration freeMarkerConfiguration(\n\t\t\tFreeMarkerConfig configurer) {\n\t\treturn configurer.getConfiguration();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "freeMarkerViewResolver")\n\t@ConditionalOnProperty(name = "spring.freemarker.enabled", matchIfMissing = true)\n\tpublic FreeMarkerViewResolver freeMarkerViewResolver() {\n\t\tFreeMarkerViewResolver resolver = new FreeMarkerViewResolver();\n\t\tgetProperties().applyToMvcViewResolver(resolver);\n\t\treturn resolver;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnEnabledResourceChain\n\tpublic ResourceUrlEncodingFilter resourceUrlEncodingFilter() {\n\t\treturn new ResourceUrlEncodingFilter();\n\t}\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.freemarker;\n\nimport javax.servlet.Servlet;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.web.ConditionalOnEnabledResourceChain;\nimport org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.resource.ResourceUrlEncodingFilter;\nimport org.springframework.web.servlet.view.freemarker.FreeMarkerConfig;\nimport org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer;\nimport org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver;\n\n@Configuration\n@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n@ConditionalOnClass({Servlet.class, FreeMarkerConfigurer.class})\n@AutoConfigureAfter(WebMvcAutoConfiguration.class)\nclass FreeMarkerServletWebConfiguration extends AbstractFreeMarkerConfiguration {\n\n\tprotected FreeMarkerServletWebConfiguration(FreeMarkerProperties properties) {\n\t\tsuper(properties);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(FreeMarkerConfig.class)\n\tpublic FreeMarkerConfigurer freeMarkerConfigurer() {\n\t\tFreeMarkerConfigurer configurer = new FreeMarkerConfigurer();\n\t\tapplyProperties(configurer);\n\t\treturn configurer;\n\t}\n\n\t@Bean\n\tpublic freemarker.template.Configuration freeMarkerConfiguration(\n\t\t\tFreeMarkerConfig configurer) {\n\t\treturn configurer.getConfiguration();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "freeMarkerViewResolver")\n\t@ConditionalOnProperty(name = "spring.freemarker.enabled", matchIfMissing = true)\n\tpublic FreeMarkerViewResolver freeMarkerViewResolver() {\n\t\tFreeMarkerViewResolver resolver = new FreeMarkerViewResolver();\n\t\tgetProperties().applyToMvcViewResolver(resolver);\n\t\treturn resolver;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnEnabledResourceChain\n\tpublic ResourceUrlEncodingFilter resourceUrlEncodingFilter() {\n\t\treturn new ResourceUrlEncodingFilter();\n\t}\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
