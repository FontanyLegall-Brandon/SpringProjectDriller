{'_old_path': None, '_new_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundryActuatorAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 2012-2017 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.cloudfoundry;\n+\n+import java.util.Arrays;\n+\n+import org.springframework.boot.actuate.autoconfigure.endpoint.infrastructure.EndpointProvider;\n+import org.springframework.boot.actuate.autoconfigure.endpoint.infrastructure.ServletEndpointAutoConfiguration;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.autoconfigure.security.SecurityProperties;\n+import org.springframework.boot.cloud.CloudPlatform;\n+import org.springframework.boot.endpoint.web.WebEndpointOperation;\n+import org.springframework.boot.web.client.RestTemplateBuilder;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.core.env.Environment;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.security.config.annotation.web.WebSecurityConfigurer;\n+import org.springframework.security.config.annotation.web.builders.WebSecurity;\n+import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n+import org.springframework.web.cors.CorsConfiguration;\n+import org.springframework.web.servlet.DispatcherServlet;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} to expose actuator endpoints for\n+ * cloud foundry to use.\n+ *\n+ * @author Madhura Bhave\n+ * @since 2.0.0\n+ */\n+@Configuration\n+@ConditionalOnProperty(prefix = "management.cloudfoundry", name = "enabled", matchIfMissing = true)\n+@AutoConfigureAfter(ServletEndpointAutoConfiguration.class)\n+@ConditionalOnCloudPlatform(CloudPlatform.CLOUD_FOUNDRY)\n+public class CloudFoundryActuatorAutoConfiguration {\n+\n+\t/**\n+\t * Configuration for MVC endpoints on Cloud Foundry.\n+\t */\n+\t@Configuration\n+\t@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n+\t@ConditionalOnClass(DispatcherServlet.class)\n+\t@ConditionalOnBean(DispatcherServlet.class)\n+\tstatic class MvcWebEndpointConfiguration {\n+\n+\t\t@Bean\n+\t\tpublic CloudFoundryWebEndpointServletHandlerMapping cloudFoundryWebEndpointServletHandlerMapping(\n+\t\t\t\tEndpointProvider<WebEndpointOperation> provider,\n+\t\t\t\tEnvironment environment, RestTemplateBuilder builder) {\n+\t\t\tCloudFoundryWebEndpointServletHandlerMapping handlerMapping = new CloudFoundryWebEndpointServletHandlerMapping(\n+\t\t\t\t\t"/cloudfoundryapplication", provider.getEndpoints(),\n+\t\t\t\t\tgetCorsConfiguration(), getSecurityInterceptor(builder, environment));\n+\t\t\treturn handlerMapping;\n+\t\t}\n+\n+\t\tprivate CloudFoundrySecurityInterceptor getSecurityInterceptor(\n+\t\t\t\tRestTemplateBuilder restTemplateBuilder, Environment environment) {\n+\t\t\tCloudFoundrySecurityService cloudfoundrySecurityService = getCloudFoundrySecurityService(\n+\t\t\t\t\trestTemplateBuilder, environment);\n+\t\t\tTokenValidator tokenValidator = new TokenValidator(cloudfoundrySecurityService);\n+\t\t\treturn new CloudFoundrySecurityInterceptor(\n+\t\t\t\t\ttokenValidator, cloudfoundrySecurityService,\n+\t\t\t\t\tenvironment.getProperty("vcap.application.application_id"));\n+\t\t}\n+\n+\t\tprivate CloudFoundrySecurityService getCloudFoundrySecurityService(\n+\t\t\t\tRestTemplateBuilder restTemplateBuilder, Environment environment) {\n+\t\t\tString cloudControllerUrl = environment.getProperty("vcap.application.cf_api");\n+\t\t\tboolean skipSslValidation = environment.getProperty(\n+\t\t\t\t\t"management.cloudfoundry.skip-ssl-validation", Boolean.class, false);\n+\t\t\treturn cloudControllerUrl == null ? null\n+\t\t\t\t\t: new CloudFoundrySecurityService(restTemplateBuilder, cloudControllerUrl,\n+\t\t\t\t\tskipSslValidation);\n+\t\t}\n+\n+\t\tprivate CorsConfiguration getCorsConfiguration() {\n+\t\t\tCorsConfiguration corsConfiguration = new CorsConfiguration();\n+\t\t\tcorsConfiguration.addAllowedOrigin(CorsConfiguration.ALL);\n+\t\t\tcorsConfiguration.setAllowedMethods(\n+\t\t\t\t\tArrays.asList(HttpMethod.GET.name(), HttpMethod.POST.name()));\n+\t\t\tcorsConfiguration.setAllowedHeaders(\n+\t\t\t\t\tArrays.asList("Authorization", "X-Cf-App-Instance", "Content-Type"));\n+\t\t\treturn corsConfiguration;\n+\t\t}\n+\n+\t}\n+\n+\t/**\n+\t * {@link WebSecurityConfigurer} to tell Spring Security to\n+\t * ignore cloudfoundry specific paths. The Cloud foundry endpoints\n+\t * are protected by their own security interceptor.\n+\t */\n+\t@ConditionalOnClass(WebSecurity.class)\n+\t@Order(SecurityProperties.IGNORED_ORDER)\n+\t@Configuration\n+\tpublic static class IgnoredPathsWebSecurityConfigurer\n+\t\t\timplements WebSecurityConfigurer<WebSecurity> {\n+\n+\t\t@Override\n+\t\tpublic void init(WebSecurity builder) throws Exception {\n+\t\t\tbuilder.ignoring().requestMatchers(new AntPathRequestMatcher("/cloudfoundryapplication/**"));\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void configure(WebSecurity builder) throws Exception {\n+\n+\t\t}\n+\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.cloudfoundry;\n\nimport java.util.Arrays;\n\nimport org.springframework.boot.actuate.autoconfigure.endpoint.infrastructure.EndpointProvider;\nimport org.springframework.boot.actuate.autoconfigure.endpoint.infrastructure.ServletEndpointAutoConfiguration;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.security.SecurityProperties;\nimport org.springframework.boot.cloud.CloudPlatform;\nimport org.springframework.boot.endpoint.web.WebEndpointOperation;\nimport org.springframework.boot.web.client.RestTemplateBuilder;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.env.Environment;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.security.config.annotation.web.WebSecurityConfigurer;\nimport org.springframework.security.config.annotation.web.builders.WebSecurity;\nimport org.springframework.security.web.util.matcher.AntPathRequestMatcher;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.servlet.DispatcherServlet;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to expose actuator endpoints for\n * cloud foundry to use.\n *\n * @author Madhura Bhave\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnProperty(prefix = "management.cloudfoundry", name = "enabled", matchIfMissing = true)\n@AutoConfigureAfter(ServletEndpointAutoConfiguration.class)\n@ConditionalOnCloudPlatform(CloudPlatform.CLOUD_FOUNDRY)\npublic class CloudFoundryActuatorAutoConfiguration {\n\n\t/**\n\t * Configuration for MVC endpoints on Cloud Foundry.\n\t */\n\t@Configuration\n\t@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n\t@ConditionalOnClass(DispatcherServlet.class)\n\t@ConditionalOnBean(DispatcherServlet.class)\n\tstatic class MvcWebEndpointConfiguration {\n\n\t\t@Bean\n\t\tpublic CloudFoundryWebEndpointServletHandlerMapping cloudFoundryWebEndpointServletHandlerMapping(\n\t\t\t\tEndpointProvider<WebEndpointOperation> provider,\n\t\t\t\tEnvironment environment, RestTemplateBuilder builder) {\n\t\t\tCloudFoundryWebEndpointServletHandlerMapping handlerMapping = new CloudFoundryWebEndpointServletHandlerMapping(\n\t\t\t\t\t"/cloudfoundryapplication", provider.getEndpoints(),\n\t\t\t\t\tgetCorsConfiguration(), getSecurityInterceptor(builder, environment));\n\t\t\treturn handlerMapping;\n\t\t}\n\n\t\tprivate CloudFoundrySecurityInterceptor getSecurityInterceptor(\n\t\t\t\tRestTemplateBuilder restTemplateBuilder, Environment environment) {\n\t\t\tCloudFoundrySecurityService cloudfoundrySecurityService = getCloudFoundrySecurityService(\n\t\t\t\t\trestTemplateBuilder, environment);\n\t\t\tTokenValidator tokenValidator = new TokenValidator(cloudfoundrySecurityService);\n\t\t\treturn new CloudFoundrySecurityInterceptor(\n\t\t\t\t\ttokenValidator, cloudfoundrySecurityService,\n\t\t\t\t\tenvironment.getProperty("vcap.application.application_id"));\n\t\t}\n\n\t\tprivate CloudFoundrySecurityService getCloudFoundrySecurityService(\n\t\t\t\tRestTemplateBuilder restTemplateBuilder, Environment environment) {\n\t\t\tString cloudControllerUrl = environment.getProperty("vcap.application.cf_api");\n\t\t\tboolean skipSslValidation = environment.getProperty(\n\t\t\t\t\t"management.cloudfoundry.skip-ssl-validation", Boolean.class, false);\n\t\t\treturn cloudControllerUrl == null ? null\n\t\t\t\t\t: new CloudFoundrySecurityService(restTemplateBuilder, cloudControllerUrl,\n\t\t\t\t\tskipSslValidation);\n\t\t}\n\n\t\tprivate CorsConfiguration getCorsConfiguration() {\n\t\t\tCorsConfiguration corsConfiguration = new CorsConfiguration();\n\t\t\tcorsConfiguration.addAllowedOrigin(CorsConfiguration.ALL);\n\t\t\tcorsConfiguration.setAllowedMethods(\n\t\t\t\t\tArrays.asList(HttpMethod.GET.name(), HttpMethod.POST.name()));\n\t\t\tcorsConfiguration.setAllowedHeaders(\n\t\t\t\t\tArrays.asList("Authorization", "X-Cf-App-Instance", "Content-Type"));\n\t\t\treturn corsConfiguration;\n\t\t}\n\n\t}\n\n\t/**\n\t * {@link WebSecurityConfigurer} to tell Spring Security to\n\t * ignore cloudfoundry specific paths. The Cloud foundry endpoints\n\t * are protected by their own security interceptor.\n\t */\n\t@ConditionalOnClass(WebSecurity.class)\n\t@Order(SecurityProperties.IGNORED_ORDER)\n\t@Configuration\n\tpublic static class IgnoredPathsWebSecurityConfigurer\n\t\t\timplements WebSecurityConfigurer<WebSecurity> {\n\n\t\t@Override\n\t\tpublic void init(WebSecurity builder) throws Exception {\n\t\t\tbuilder.ignoring().requestMatchers(new AntPathRequestMatcher("/cloudfoundryapplication/**"));\n\t\t}\n\n\t\t@Override\n\t\tpublic void configure(WebSecurity builder) throws Exception {\n\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
