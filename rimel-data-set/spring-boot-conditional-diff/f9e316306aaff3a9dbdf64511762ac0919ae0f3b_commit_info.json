{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -69,7 +69,7 @@ import org.springframework.util.ObjectUtils;\n @Configuration\n @ConditionalOnClass(Flyway.class)\n @ConditionalOnBean(DataSource.class)\n-@ConditionalOnProperty(prefix = "flyway", name = "enabled", matchIfMissing = true)\n+@ConditionalOnProperty(prefix = "spring.flyway", name = "enabled", matchIfMissing = true)\n @AutoConfigureAfter({ DataSourceAutoConfiguration.class,\n \t\tHibernateJpaAutoConfiguration.class })\n public class FlywayAutoConfiguration {\n@@ -133,7 +133,7 @@ public class FlywayAutoConfiguration {\n \t\t}\n \n \t\t@Bean\n-\t\t@ConfigurationProperties(prefix = "flyway")\n+\t\t@ConfigurationProperties(prefix = "spring.flyway")\n \t\tpublic Flyway flyway() {\n \t\t\tFlyway flyway = new SpringBootFlyway();\n \t\t\tif (this.properties.isCreateDataSource()) {\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.flyway;\n\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.annotation.PostConstruct;\nimport javax.persistence.EntityManagerFactory;\nimport javax.sql.DataSource;\n\nimport org.flywaydb.core.Flyway;\nimport org.flywaydb.core.api.MigrationVersion;\nimport org.flywaydb.core.api.callback.FlywayCallback;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.data.jpa.EntityManagerFactoryDependsOnPostProcessor;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.context.properties.ConfigurationPropertiesBinding;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.jdbc.DatabaseDriver;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.convert.TypeDescriptor;\nimport org.springframework.core.convert.converter.GenericConverter;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.jdbc.support.JdbcUtils;\nimport org.springframework.jdbc.support.MetaDataAccessException;\nimport org.springframework.orm.jpa.AbstractEntityManagerFactoryBean;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.util.Assert;\nimport org.springframework.util.ObjectUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Flyway database migrations.\n *\n * @author Dave Syer\n * @author Phillip Webb\n * @author Vedran Pavic\n * @author Stephane Nicoll\n * @author Jacques-Etienne Beaudet\n * @author Eddú Meléndez\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass(Flyway.class)\n@ConditionalOnBean(DataSource.class)\n@ConditionalOnProperty(prefix = "spring.flyway", name = "enabled", matchIfMissing = true)\n@AutoConfigureAfter({ DataSourceAutoConfiguration.class,\n\t\tHibernateJpaAutoConfiguration.class })\npublic class FlywayAutoConfiguration {\n\n\t@Bean\n\t@ConfigurationPropertiesBinding\n\tpublic StringOrNumberToMigrationVersionConverter stringOrNumberMigrationVersionConverter() {\n\t\treturn new StringOrNumberToMigrationVersionConverter();\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(Flyway.class)\n\t@EnableConfigurationProperties(FlywayProperties.class)\n\tpublic static class FlywayConfiguration {\n\n\t\tprivate final FlywayProperties properties;\n\n\t\tprivate final ResourceLoader resourceLoader;\n\n\t\tprivate final DataSource dataSource;\n\n\t\tprivate final DataSource flywayDataSource;\n\n\t\tprivate final FlywayMigrationStrategy migrationStrategy;\n\n\t\tprivate List<FlywayCallback> flywayCallbacks;\n\n\t\tpublic FlywayConfiguration(FlywayProperties properties,\n\t\t\t\tResourceLoader resourceLoader, ObjectProvider<DataSource> dataSource,\n\t\t\t\t@FlywayDataSource ObjectProvider<DataSource> flywayDataSource,\n\t\t\t\tObjectProvider<FlywayMigrationStrategy> migrationStrategy,\n\t\t\t\tObjectProvider<List<FlywayCallback>> flywayCallbacks) {\n\t\t\tthis.properties = properties;\n\t\t\tthis.resourceLoader = resourceLoader;\n\t\t\tthis.dataSource = dataSource.getIfUnique();\n\t\t\tthis.flywayDataSource = flywayDataSource.getIfAvailable();\n\t\t\tthis.migrationStrategy = migrationStrategy.getIfAvailable();\n\t\t\tthis.flywayCallbacks = flywayCallbacks.getIfAvailable(Collections::emptyList);\n\t\t}\n\n\t\t@PostConstruct\n\t\tpublic void checkLocationExists() {\n\t\t\tif (this.properties.isCheckLocation()) {\n\t\t\t\tAssert.state(!this.properties.getLocations().isEmpty(),\n\t\t\t\t\t\t"Migration script locations not configured");\n\t\t\t\tboolean exists = hasAtLeastOneLocation();\n\t\t\t\tAssert.state(exists,\n\t\t\t\t\t\t"Cannot find migrations location in: " + this.properties\n\t\t\t\t\t\t\t\t.getLocations()\n\t\t\t\t\t\t+ " (please add migrations or check your Flyway configuration)");\n\t\t\t}\n\t\t}\n\n\t\tprivate boolean hasAtLeastOneLocation() {\n\t\t\tfor (String location : this.properties.getLocations()) {\n\t\t\t\tif (this.resourceLoader.getResource(location).exists()) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\t@Bean\n\t\t@ConfigurationProperties(prefix = "spring.flyway")\n\t\tpublic Flyway flyway() {\n\t\t\tFlyway flyway = new SpringBootFlyway();\n\t\t\tif (this.properties.isCreateDataSource()) {\n\t\t\t\tflyway.setDataSource(this.properties.getUrl(), this.properties.getUser(),\n\t\t\t\t\t\tthis.properties.getPassword(),\n\t\t\t\t\t\tthis.properties.getInitSqls().toArray(new String[0]));\n\t\t\t}\n\t\t\telse if (this.flywayDataSource != null) {\n\t\t\t\tflyway.setDataSource(this.flywayDataSource);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tflyway.setDataSource(this.dataSource);\n\t\t\t}\n\t\t\tflyway.setCallbacks(this.flywayCallbacks\n\t\t\t\t\t.toArray(new FlywayCallback[this.flywayCallbacks.size()]));\n\t\t\tflyway.setLocations(this.properties.getLocations().toArray(new String[0]));\n\t\t\treturn flyway;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic FlywayMigrationInitializer flywayInitializer(Flyway flyway) {\n\t\t\treturn new FlywayMigrationInitializer(flyway, this.migrationStrategy);\n\t\t}\n\n\t\t/**\n\t\t * Additional configuration to ensure that {@link EntityManagerFactory} beans\n\t\t * depend-on the {@code flywayInitializer} bean.\n\t\t */\n\t\t@Configuration\n\t\t@ConditionalOnClass(LocalContainerEntityManagerFactoryBean.class)\n\t\t@ConditionalOnBean(AbstractEntityManagerFactoryBean.class)\n\t\tprotected static class FlywayInitializerJpaDependencyConfiguration\n\t\t\t\textends EntityManagerFactoryDependsOnPostProcessor {\n\n\t\t\tpublic FlywayInitializerJpaDependencyConfiguration() {\n\t\t\t\tsuper("flywayInitializer");\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Additional configuration to ensure that {@link EntityManagerFactory} beans\n\t * depend-on the {@code flyway} bean.\n\t */\n\t@Configuration\n\t@ConditionalOnClass(LocalContainerEntityManagerFactoryBean.class)\n\t@ConditionalOnBean(AbstractEntityManagerFactoryBean.class)\n\tprotected static class FlywayJpaDependencyConfiguration\n\t\t\textends EntityManagerFactoryDependsOnPostProcessor {\n\n\t\tpublic FlywayJpaDependencyConfiguration() {\n\t\t\tsuper("flyway");\n\t\t}\n\n\t}\n\n\tprivate static class SpringBootFlyway extends Flyway {\n\n\t\tprivate static final String VENDOR_PLACEHOLDER = "{vendor}";\n\n\t\t@Override\n\t\tpublic void setLocations(String... locations) {\n\t\t\tif (usesVendorLocation(locations)) {\n\t\t\t\ttry {\n\t\t\t\t\tString url = (String) JdbcUtils\n\t\t\t\t\t\t\t.extractDatabaseMetaData(getDataSource(), "getURL");\n\t\t\t\t\tDatabaseDriver vendor = DatabaseDriver.fromJdbcUrl(url);\n\t\t\t\t\tif (vendor != DatabaseDriver.UNKNOWN) {\n\t\t\t\t\t\tfor (int i = 0; i < locations.length; i++) {\n\t\t\t\t\t\t\tlocations[i] = locations[i].replace(VENDOR_PLACEHOLDER,\n\t\t\t\t\t\t\t\t\tvendor.getId());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch (MetaDataAccessException ex) {\n\t\t\t\t\tthrow new IllegalStateException(ex);\n\t\t\t\t}\n\t\t\t}\n\t\t\tsuper.setLocations(locations);\n\t\t}\n\n\t\tprivate boolean usesVendorLocation(String... locations) {\n\t\t\tfor (String location : locations) {\n\t\t\t\tif (location.contains(VENDOR_PLACEHOLDER)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t}\n\n\t/**\n\t * Convert a String or Number to a {@link MigrationVersion}.\n\t */\n\tprivate static class StringOrNumberToMigrationVersionConverter\n\t\t\timplements GenericConverter {\n\n\t\tprivate static final Set<ConvertiblePair> CONVERTIBLE_TYPES;\n\n\t\tstatic {\n\t\t\tSet<ConvertiblePair> types = new HashSet<>(2);\n\t\t\ttypes.add(new ConvertiblePair(String.class, MigrationVersion.class));\n\t\t\ttypes.add(new ConvertiblePair(Number.class, MigrationVersion.class));\n\t\t\tCONVERTIBLE_TYPES = Collections.unmodifiableSet(types);\n\t\t}\n\n\t\t@Override\n\t\tpublic Set<ConvertiblePair> getConvertibleTypes() {\n\t\t\treturn CONVERTIBLE_TYPES;\n\t\t}\n\n\t\t@Override\n\t\tpublic Object convert(Object source, TypeDescriptor sourceType,\n\t\t\t\tTypeDescriptor targetType) {\n\t\t\tString value = ObjectUtils.nullSafeToString(source);\n\t\t\treturn MigrationVersion.fromVersion(value);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.flyway;\n\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.annotation.PostConstruct;\nimport javax.persistence.EntityManagerFactory;\nimport javax.sql.DataSource;\n\nimport org.flywaydb.core.Flyway;\nimport org.flywaydb.core.api.MigrationVersion;\nimport org.flywaydb.core.api.callback.FlywayCallback;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.data.jpa.EntityManagerFactoryDependsOnPostProcessor;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.context.properties.ConfigurationPropertiesBinding;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.jdbc.DatabaseDriver;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.convert.TypeDescriptor;\nimport org.springframework.core.convert.converter.GenericConverter;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.jdbc.support.JdbcUtils;\nimport org.springframework.jdbc.support.MetaDataAccessException;\nimport org.springframework.orm.jpa.AbstractEntityManagerFactoryBean;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.util.Assert;\nimport org.springframework.util.ObjectUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Flyway database migrations.\n *\n * @author Dave Syer\n * @author Phillip Webb\n * @author Vedran Pavic\n * @author Stephane Nicoll\n * @author Jacques-Etienne Beaudet\n * @author Eddú Meléndez\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass(Flyway.class)\n@ConditionalOnBean(DataSource.class)\n@ConditionalOnProperty(prefix = "flyway", name = "enabled", matchIfMissing = true)\n@AutoConfigureAfter({ DataSourceAutoConfiguration.class,\n\t\tHibernateJpaAutoConfiguration.class })\npublic class FlywayAutoConfiguration {\n\n\t@Bean\n\t@ConfigurationPropertiesBinding\n\tpublic StringOrNumberToMigrationVersionConverter stringOrNumberMigrationVersionConverter() {\n\t\treturn new StringOrNumberToMigrationVersionConverter();\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(Flyway.class)\n\t@EnableConfigurationProperties(FlywayProperties.class)\n\tpublic static class FlywayConfiguration {\n\n\t\tprivate final FlywayProperties properties;\n\n\t\tprivate final ResourceLoader resourceLoader;\n\n\t\tprivate final DataSource dataSource;\n\n\t\tprivate final DataSource flywayDataSource;\n\n\t\tprivate final FlywayMigrationStrategy migrationStrategy;\n\n\t\tprivate List<FlywayCallback> flywayCallbacks;\n\n\t\tpublic FlywayConfiguration(FlywayProperties properties,\n\t\t\t\tResourceLoader resourceLoader, ObjectProvider<DataSource> dataSource,\n\t\t\t\t@FlywayDataSource ObjectProvider<DataSource> flywayDataSource,\n\t\t\t\tObjectProvider<FlywayMigrationStrategy> migrationStrategy,\n\t\t\t\tObjectProvider<List<FlywayCallback>> flywayCallbacks) {\n\t\t\tthis.properties = properties;\n\t\t\tthis.resourceLoader = resourceLoader;\n\t\t\tthis.dataSource = dataSource.getIfUnique();\n\t\t\tthis.flywayDataSource = flywayDataSource.getIfAvailable();\n\t\t\tthis.migrationStrategy = migrationStrategy.getIfAvailable();\n\t\t\tthis.flywayCallbacks = flywayCallbacks.getIfAvailable(Collections::emptyList);\n\t\t}\n\n\t\t@PostConstruct\n\t\tpublic void checkLocationExists() {\n\t\t\tif (this.properties.isCheckLocation()) {\n\t\t\t\tAssert.state(!this.properties.getLocations().isEmpty(),\n\t\t\t\t\t\t"Migration script locations not configured");\n\t\t\t\tboolean exists = hasAtLeastOneLocation();\n\t\t\t\tAssert.state(exists,\n\t\t\t\t\t\t"Cannot find migrations location in: " + this.properties\n\t\t\t\t\t\t\t\t.getLocations()\n\t\t\t\t\t\t+ " (please add migrations or check your Flyway configuration)");\n\t\t\t}\n\t\t}\n\n\t\tprivate boolean hasAtLeastOneLocation() {\n\t\t\tfor (String location : this.properties.getLocations()) {\n\t\t\t\tif (this.resourceLoader.getResource(location).exists()) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\t@Bean\n\t\t@ConfigurationProperties(prefix = "flyway")\n\t\tpublic Flyway flyway() {\n\t\t\tFlyway flyway = new SpringBootFlyway();\n\t\t\tif (this.properties.isCreateDataSource()) {\n\t\t\t\tflyway.setDataSource(this.properties.getUrl(), this.properties.getUser(),\n\t\t\t\t\t\tthis.properties.getPassword(),\n\t\t\t\t\t\tthis.properties.getInitSqls().toArray(new String[0]));\n\t\t\t}\n\t\t\telse if (this.flywayDataSource != null) {\n\t\t\t\tflyway.setDataSource(this.flywayDataSource);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tflyway.setDataSource(this.dataSource);\n\t\t\t}\n\t\t\tflyway.setCallbacks(this.flywayCallbacks\n\t\t\t\t\t.toArray(new FlywayCallback[this.flywayCallbacks.size()]));\n\t\t\tflyway.setLocations(this.properties.getLocations().toArray(new String[0]));\n\t\t\treturn flyway;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic FlywayMigrationInitializer flywayInitializer(Flyway flyway) {\n\t\t\treturn new FlywayMigrationInitializer(flyway, this.migrationStrategy);\n\t\t}\n\n\t\t/**\n\t\t * Additional configuration to ensure that {@link EntityManagerFactory} beans\n\t\t * depend-on the {@code flywayInitializer} bean.\n\t\t */\n\t\t@Configuration\n\t\t@ConditionalOnClass(LocalContainerEntityManagerFactoryBean.class)\n\t\t@ConditionalOnBean(AbstractEntityManagerFactoryBean.class)\n\t\tprotected static class FlywayInitializerJpaDependencyConfiguration\n\t\t\t\textends EntityManagerFactoryDependsOnPostProcessor {\n\n\t\t\tpublic FlywayInitializerJpaDependencyConfiguration() {\n\t\t\t\tsuper("flywayInitializer");\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Additional configuration to ensure that {@link EntityManagerFactory} beans\n\t * depend-on the {@code flyway} bean.\n\t */\n\t@Configuration\n\t@ConditionalOnClass(LocalContainerEntityManagerFactoryBean.class)\n\t@ConditionalOnBean(AbstractEntityManagerFactoryBean.class)\n\tprotected static class FlywayJpaDependencyConfiguration\n\t\t\textends EntityManagerFactoryDependsOnPostProcessor {\n\n\t\tpublic FlywayJpaDependencyConfiguration() {\n\t\t\tsuper("flyway");\n\t\t}\n\n\t}\n\n\tprivate static class SpringBootFlyway extends Flyway {\n\n\t\tprivate static final String VENDOR_PLACEHOLDER = "{vendor}";\n\n\t\t@Override\n\t\tpublic void setLocations(String... locations) {\n\t\t\tif (usesVendorLocation(locations)) {\n\t\t\t\ttry {\n\t\t\t\t\tString url = (String) JdbcUtils\n\t\t\t\t\t\t\t.extractDatabaseMetaData(getDataSource(), "getURL");\n\t\t\t\t\tDatabaseDriver vendor = DatabaseDriver.fromJdbcUrl(url);\n\t\t\t\t\tif (vendor != DatabaseDriver.UNKNOWN) {\n\t\t\t\t\t\tfor (int i = 0; i < locations.length; i++) {\n\t\t\t\t\t\t\tlocations[i] = locations[i].replace(VENDOR_PLACEHOLDER,\n\t\t\t\t\t\t\t\t\tvendor.getId());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch (MetaDataAccessException ex) {\n\t\t\t\t\tthrow new IllegalStateException(ex);\n\t\t\t\t}\n\t\t\t}\n\t\t\tsuper.setLocations(locations);\n\t\t}\n\n\t\tprivate boolean usesVendorLocation(String... locations) {\n\t\t\tfor (String location : locations) {\n\t\t\t\tif (location.contains(VENDOR_PLACEHOLDER)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t}\n\n\t/**\n\t * Convert a String or Number to a {@link MigrationVersion}.\n\t */\n\tprivate static class StringOrNumberToMigrationVersionConverter\n\t\t\timplements GenericConverter {\n\n\t\tprivate static final Set<ConvertiblePair> CONVERTIBLE_TYPES;\n\n\t\tstatic {\n\t\t\tSet<ConvertiblePair> types = new HashSet<>(2);\n\t\t\ttypes.add(new ConvertiblePair(String.class, MigrationVersion.class));\n\t\t\ttypes.add(new ConvertiblePair(Number.class, MigrationVersion.class));\n\t\t\tCONVERTIBLE_TYPES = Collections.unmodifiableSet(types);\n\t\t}\n\n\t\t@Override\n\t\tpublic Set<ConvertiblePair> getConvertibleTypes() {\n\t\t\treturn CONVERTIBLE_TYPES;\n\t\t}\n\n\t\t@Override\n\t\tpublic Object convert(Object source, TypeDescriptor sourceType,\n\t\t\t\tTypeDescriptor targetType) {\n\t\t\tString value = ObjectUtils.nullSafeToString(source);\n\t\t\treturn MigrationVersion.fromVersion(value);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
