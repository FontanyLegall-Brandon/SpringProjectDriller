{'_old_path': None, '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/kafka/KafkaHealthIndicatorAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2012-2018 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.autoconfigure.kafka;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+\n+import org.springframework.boot.actuate.autoconfigure.health.CompositeHealthIndicatorConfiguration;\n+import org.springframework.boot.actuate.autoconfigure.health.ConditionalOnEnabledHealthIndicator;\n+import org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration;\n+import org.springframework.boot.actuate.health.HealthIndicator;\n+import org.springframework.boot.actuate.kafka.KafkaHealthIndicator;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.kafka.core.KafkaAdmin;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for {@link KafkaHealthIndicator}.\n+ *\n+ * @author Juan Rada\n+ */\n+@Configuration\n+@ConditionalOnEnabledHealthIndicator("kafka")\n+@AutoConfigureBefore(HealthIndicatorAutoConfiguration.class)\n+@AutoConfigureAfter(KafkaAutoConfiguration.class)\n+public class KafkaHealthIndicatorAutoConfiguration {\n+\n+\t@Configuration\n+\t@ConditionalOnBean(KafkaAdmin.class)\n+\t@EnableConfigurationProperties(KafkaHealthIndicatorProperties.class)\n+\tstatic class KafkaClientHealthIndicatorConfiguration extends\n+\t\t\tCompositeHealthIndicatorConfiguration<KafkaHealthIndicator, KafkaAdmin> {\n+\n+\t\tprivate final Map<String, KafkaAdmin> admins;\n+\n+\t\tprivate final KafkaHealthIndicatorProperties properties;\n+\n+\t\tKafkaClientHealthIndicatorConfiguration(Map<String, KafkaAdmin> admins,\n+\t\t\t\tKafkaHealthIndicatorProperties properties) {\n+\t\t\tthis.admins = admins;\n+\t\t\tthis.properties = properties;\n+\t\t}\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(name = "kafkaHealthIndicator")\n+\t\tpublic HealthIndicator kafkaHealthIndicator() {\n+\t\t\treturn createHealthIndicator(this.admins);\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected KafkaHealthIndicator createHealthIndicator(KafkaAdmin source) {\n+\t\t\tDuration responseTimeout = this.properties.getResponseTimeout();\n+\n+\t\t\treturn new KafkaHealthIndicator(source,\n+\t\t\t\t\tresponseTimeout == null ? 100L : responseTimeout.toMillis());\n+\t\t}\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.kafka;\n\nimport java.time.Duration;\nimport java.util.Map;\n\nimport org.springframework.boot.actuate.autoconfigure.health.CompositeHealthIndicatorConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.health.ConditionalOnEnabledHealthIndicator;\nimport org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration;\nimport org.springframework.boot.actuate.health.HealthIndicator;\nimport org.springframework.boot.actuate.kafka.KafkaHealthIndicator;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.kafka.core.KafkaAdmin;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link KafkaHealthIndicator}.\n *\n * @author Juan Rada\n */\n@Configuration\n@ConditionalOnEnabledHealthIndicator("kafka")\n@AutoConfigureBefore(HealthIndicatorAutoConfiguration.class)\n@AutoConfigureAfter(KafkaAutoConfiguration.class)\npublic class KafkaHealthIndicatorAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnBean(KafkaAdmin.class)\n\t@EnableConfigurationProperties(KafkaHealthIndicatorProperties.class)\n\tstatic class KafkaClientHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<KafkaHealthIndicator, KafkaAdmin> {\n\n\t\tprivate final Map<String, KafkaAdmin> admins;\n\n\t\tprivate final KafkaHealthIndicatorProperties properties;\n\n\t\tKafkaClientHealthIndicatorConfiguration(Map<String, KafkaAdmin> admins,\n\t\t\t\tKafkaHealthIndicatorProperties properties) {\n\t\t\tthis.admins = admins;\n\t\t\tthis.properties = properties;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "kafkaHealthIndicator")\n\t\tpublic HealthIndicator kafkaHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.admins);\n\t\t}\n\n\t\t@Override\n\t\tprotected KafkaHealthIndicator createHealthIndicator(KafkaAdmin source) {\n\t\t\tDuration responseTimeout = this.properties.getResponseTimeout();\n\n\t\t\treturn new KafkaHealthIndicator(source,\n\t\t\t\t\tresponseTimeout == null ? 100L : responseTimeout.toMillis());\n\t\t}\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
