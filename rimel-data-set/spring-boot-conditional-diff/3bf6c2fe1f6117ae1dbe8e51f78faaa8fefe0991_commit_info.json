{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/sendgrid/SendGridAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/sendgrid/SendGridAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -22,11 +22,13 @@ import org.apache.http.impl.client.HttpClientBuilder;\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n \n /**\n@@ -37,7 +39,7 @@ import org.springframework.context.annotation.Configuration;\n  */\n @Configuration\n @ConditionalOnClass(SendGrid.class)\n-@ConditionalOnProperty(prefix = "spring.sendgrid", value = "username")\n+@Conditional(SendGridAutoConfiguration.SendGridPropertyCondition.class)\n @EnableConfigurationProperties(SendGridProperties.class)\n public class SendGridAutoConfiguration {\n \n@@ -47,15 +49,39 @@ public class SendGridAutoConfiguration {\n \t@Bean\n \t@ConditionalOnMissingBean(SendGrid.class)\n \tpublic SendGrid sendGrid() {\n-\t\tSendGrid sendGrid = new SendGrid(this.properties.getUsername(),\n-\t\t\t\tthis.properties.getPassword());\n+\n+\t\tSendGrid sendGrid;\n+\n+\t\tif (this.properties.getApikey() != null) {\n+\t\t\tsendGrid = new SendGrid(this.properties.getApikey());\n+\t\t}\n+\t\telse {\n+\t\t\tsendGrid = new SendGrid(this.properties.getUsername(),\n+\t\t\t\t\tthis.properties.getPassword());\n+\t\t}\n+\n \t\tif (this.properties.isProxyConfigured()) {\n \t\t\tHttpHost proxy = new HttpHost(this.properties.getProxy().getHost(),\n \t\t\t\t\tthis.properties.getProxy().getPort());\n \t\t\tsendGrid.setClient(HttpClientBuilder.create().setProxy(proxy)\n \t\t\t\t\t.setUserAgent("sendgrid/" + sendGrid.getVersion() + ";java").build());\n \t\t}\n+\n \t\treturn sendGrid;\n \t}\n \n+\tstatic class SendGridPropertyCondition extends AnyNestedCondition {\n+\n+\t\tSendGridPropertyCondition() {\n+\t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION);\n+\t\t}\n+\n+\t\t@ConditionalOnProperty(prefix = "spring.sendgrid", value = "username")\n+\t\tprivate class SendGridUserProperty {\n+\t\t}\n+\n+\t\t@ConditionalOnProperty(prefix = "spring.sendgrid", value = "apikey")\n+\t\tprivate class SendGridApiKeyProperty {\n+\t\t}\n+\t}\n }\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.sendgrid;\n\nimport com.sendgrid.SendGrid;\nimport org.apache.http.HttpHost;\nimport org.apache.http.impl.client.HttpClientBuilder;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for SendGrid.\n *\n * @author Maciej Walkowiak\n * @since 1.3.0\n */\n@Configuration\n@ConditionalOnClass(SendGrid.class)\n@Conditional(SendGridAutoConfiguration.SendGridPropertyCondition.class)\n@EnableConfigurationProperties(SendGridProperties.class)\npublic class SendGridAutoConfiguration {\n\n\t@Autowired\n\tprivate SendGridProperties properties;\n\n\t@Bean\n\t@ConditionalOnMissingBean(SendGrid.class)\n\tpublic SendGrid sendGrid() {\n\n\t\tSendGrid sendGrid;\n\n\t\tif (this.properties.getApikey() != null) {\n\t\t\tsendGrid = new SendGrid(this.properties.getApikey());\n\t\t}\n\t\telse {\n\t\t\tsendGrid = new SendGrid(this.properties.getUsername(),\n\t\t\t\t\tthis.properties.getPassword());\n\t\t}\n\n\t\tif (this.properties.isProxyConfigured()) {\n\t\t\tHttpHost proxy = new HttpHost(this.properties.getProxy().getHost(),\n\t\t\t\t\tthis.properties.getProxy().getPort());\n\t\t\tsendGrid.setClient(HttpClientBuilder.create().setProxy(proxy)\n\t\t\t\t\t.setUserAgent("sendgrid/" + sendGrid.getVersion() + ";java").build());\n\t\t}\n\n\t\treturn sendGrid;\n\t}\n\n\tstatic class SendGridPropertyCondition extends AnyNestedCondition {\n\n\t\tSendGridPropertyCondition() {\n\t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION);\n\t\t}\n\n\t\t@ConditionalOnProperty(prefix = "spring.sendgrid", value = "username")\n\t\tprivate class SendGridUserProperty {\n\t\t}\n\n\t\t@ConditionalOnProperty(prefix = "spring.sendgrid", value = "apikey")\n\t\tprivate class SendGridApiKeyProperty {\n\t\t}\n\t}\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.sendgrid;\n\nimport com.sendgrid.SendGrid;\nimport org.apache.http.HttpHost;\nimport org.apache.http.impl.client.HttpClientBuilder;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for SendGrid.\n *\n * @author Maciej Walkowiak\n * @since 1.3.0\n */\n@Configuration\n@ConditionalOnClass(SendGrid.class)\n@ConditionalOnProperty(prefix = "spring.sendgrid", value = "username")\n@EnableConfigurationProperties(SendGridProperties.class)\npublic class SendGridAutoConfiguration {\n\n\t@Autowired\n\tprivate SendGridProperties properties;\n\n\t@Bean\n\t@ConditionalOnMissingBean(SendGrid.class)\n\tpublic SendGrid sendGrid() {\n\t\tSendGrid sendGrid = new SendGrid(this.properties.getUsername(),\n\t\t\t\tthis.properties.getPassword());\n\t\tif (this.properties.isProxyConfigured()) {\n\t\t\tHttpHost proxy = new HttpHost(this.properties.getProxy().getHost(),\n\t\t\t\t\tthis.properties.getProxy().getPort());\n\t\t\tsendGrid.setClient(HttpClientBuilder.create().setProxy(proxy)\n\t\t\t\t\t.setUserAgent("sendgrid/" + sendGrid.getVersion() + ";java").build());\n\t\t}\n\t\treturn sendGrid;\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
