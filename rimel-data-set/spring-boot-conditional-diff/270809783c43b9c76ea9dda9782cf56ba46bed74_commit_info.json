{'_old_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnPropertyValueTests.java'), '_new_path': None, 'change_type': <ModificationType.DELETE: 4>, 'diff': '@@ -1,196 +0,0 @@\n-/*\n- * Copyright 2012-2014 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the "License");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an "AS IS" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.boot.autoconfigure.condition;\n-\n-import static org.junit.Assert.*;\n-\n-import org.junit.After;\n-import org.junit.Test;\n-\n-import org.springframework.boot.test.EnvironmentTestUtils;\n-import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Configuration;\n-\n-/**\n- * Tests for {@link ConditionalOnPropertyValue}\n- *\n- * @author Stephane Nicoll\n- */\n-public class ConditionalOnPropertyValueTests {\n-\n-\tprivate AnnotationConfigApplicationContext context;\n-\n-\t@After\n-\tpublic void tearDown() {\n-\t\tif (this.context != null) {\n-\t\t\tthis.context.close();\n-\t\t}\n-\t}\n-\n-\t@Test // Enabled by default\n-\tpublic void enabledIfNotConfiguredOtherwise() {\n-\t\tload(EnabledIfNotConfiguredOtherwiseConfig.class);\n-\t\tassertTrue(this.context.containsBean("foo"));\n-\t}\n-\n-\t@Test\n-\tpublic void enabledIfNotConfiguredOtherwiseWithConfig() {\n-\t\tload(EnabledIfNotConfiguredOtherwiseConfig.class, "simple.myProperty:false");\n-\t\tassertFalse(this.context.containsBean("foo"));\n-\t}\n-\n-\t@Test\n-\tpublic void enabledIfNotConfiguredOtherwiseWithConfigDifferentCase() {\n-\t\tload(EnabledIfNotConfiguredOtherwiseConfig.class, "simple.my-property:FALSE");\n-\t\tassertFalse(this.context.containsBean("foo"));\n-\t}\n-\n-\t@Test // Disabled by default\n-\tpublic void disableIfNotConfiguredOtherwise() {\n-\t\tload(DisabledIfNotConfiguredOtherwiseConfig.class);\n-\t\tassertFalse(this.context.containsBean("foo"));\n-\t}\n-\n-\t@Test\n-\tpublic void disableIfNotConfiguredOtherwiseWithConfig() {\n-\t\tload(DisabledIfNotConfiguredOtherwiseConfig.class, "simple.myProperty:true");\n-\t\tassertTrue(this.context.containsBean("foo"));\n-\t}\n-\n-\t@Test\n-\tpublic void disableIfNotConfiguredOtherwiseWithConfigDifferentCase() {\n-\t\tload(DisabledIfNotConfiguredOtherwiseConfig.class, "simple.myproperty:TrUe");\n-\t\tassertTrue(this.context.containsBean("foo"));\n-\t}\n-\n-\t@Test\n-\tpublic void simpleValueIsSet() {\n-\t\tload(SimpleValueConfig.class, "simple.myProperty:bar");\n-\t\tassertTrue(this.context.containsBean("foo"));\n-\t}\n-\n-\t@Test\n-\tpublic void caseInsensitive() {\n-\t\tload(SimpleValueConfig.class, "simple.myProperty:BaR");\n-\t\tassertTrue(this.context.containsBean("foo"));\n-\t}\n-\n-\t@Test\n-\tpublic void defaultValueIsSet() {\n-\t\tload(DefaultValueConfig.class, "simple.myProperty:bar");\n-\t\tassertTrue(this.context.containsBean("foo"));\n-\t}\n-\n-\t@Test\n-\tpublic void defaultValueIsNotSet() {\n-\t\tload(DefaultValueConfig.class);\n-\t\tassertTrue(this.context.containsBean("foo"));\n-\t}\n-\n-\t@Test\n-\tpublic void defaultValueIsSetDifferentValue() {\n-\t\tload(DefaultValueConfig.class, "simple.myProperty:another");\n-\t\tassertFalse(this.context.containsBean("foo"));\n-\t}\n-\n-\t@Test\n-\tpublic void prefix() {\n-\t\tload(PrefixValueConfig.class, "simple.myProperty:bar");\n-\t\tassertTrue(this.context.containsBean("foo"));\n-\t}\n-\n-\t@Test\n-\tpublic void relaxedEnabledByDefault() {\n-\t\tload(PrefixValueConfig.class, "simple.myProperty:bar");\n-\t\tassertTrue(this.context.containsBean("foo"));\n-\t}\n-\n-\t@Test\n-\tpublic void strictNameMatch() {\n-\t\tload(StrictNameConfig.class, "simple.my-property:bar");\n-\t\tassertTrue(this.context.containsBean("foo"));\n-\t}\n-\n-\t@Test\n-\tpublic void strictNameNoMatch() {\n-\t\tload(StrictNameConfig.class, "simple.myProperty:bar");\n-\t\tassertFalse(this.context.containsBean("foo"));\n-\t}\n-\n-\tprivate void load(Class<?> config, String... environment) {\n-\t\tthis.context = new AnnotationConfigApplicationContext();\n-\t\tEnvironmentTestUtils.addEnvironment(this.context, environment);\n-\t\tthis.context.register(config);\n-\t\tthis.context.refresh();\n-\t}\n-\n-\t@Configuration // ${simple.myProperty:true}\n-\t@ConditionalOnPropertyValue(prefix = "simple", property = "my-property", value = "true", defaultMatch = true)\n-\tstatic class EnabledIfNotConfiguredOtherwiseConfig {\n-\t\t@Bean\n-\t\tpublic String foo() {\n-\t\t\treturn "foo";\n-\t\t}\n-\t}\n-\n-\t@Configuration // ${simple.myProperty:false}\n-\t@ConditionalOnPropertyValue(prefix = "simple", property = "my-property", value = "true", defaultMatch = false)\n-\tstatic class DisabledIfNotConfiguredOtherwiseConfig {\n-\t\t@Bean\n-\t\tpublic String foo() {\n-\t\t\treturn "foo";\n-\t\t}\n-\t}\n-\n-\t@Configuration\n-\t@ConditionalOnPropertyValue(prefix = "simple", property = "my-property", value = "bar")\n-\tstatic class SimpleValueConfig {\n-\t\t@Bean\n-\t\tpublic String foo() {\n-\t\t\treturn "foo";\n-\t\t}\n-\t}\n-\n-\t@Configuration\n-\t@ConditionalOnPropertyValue(property = "simple.myProperty", value = "bar", defaultMatch = true)\n-\tstatic class DefaultValueConfig {\n-\t\t@Bean\n-\t\tpublic String foo() {\n-\t\t\treturn "foo";\n-\t\t}\n-\t}\n-\n-\t@Configuration\n-\t@ConditionalOnPropertyValue(prefix = "simple", property = "my-property", value = "bar")\n-\tstatic class PrefixValueConfig {\n-\t\t@Bean\n-\t\tpublic String foo() {\n-\t\t\treturn "foo";\n-\t\t}\n-\t}\n-\n-\t@Configuration\n-\t@ConditionalOnPropertyValue(prefix = "simple", property = "my-property", value = "bar", relaxedName = false)\n-\tstatic class StrictNameConfig {\n-\t\t@Bean\n-\t\tpublic String foo() {\n-\t\t\treturn "foo";\n-\t\t}\n-\t}\n-\n-}\n', 'source_code': None, 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport static org.junit.Assert.*;\n\nimport org.junit.After;\nimport org.junit.Test;\n\nimport org.springframework.boot.test.EnvironmentTestUtils;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Tests for {@link ConditionalOnPropertyValue}\n *\n * @author Stephane Nicoll\n */\npublic class ConditionalOnPropertyValueTests {\n\n\tprivate AnnotationConfigApplicationContext context;\n\n\t@After\n\tpublic void tearDown() {\n\t\tif (this.context != null) {\n\t\t\tthis.context.close();\n\t\t}\n\t}\n\n\t@Test // Enabled by default\n\tpublic void enabledIfNotConfiguredOtherwise() {\n\t\tload(EnabledIfNotConfiguredOtherwiseConfig.class);\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void enabledIfNotConfiguredOtherwiseWithConfig() {\n\t\tload(EnabledIfNotConfiguredOtherwiseConfig.class, "simple.myProperty:false");\n\t\tassertFalse(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void enabledIfNotConfiguredOtherwiseWithConfigDifferentCase() {\n\t\tload(EnabledIfNotConfiguredOtherwiseConfig.class, "simple.my-property:FALSE");\n\t\tassertFalse(this.context.containsBean("foo"));\n\t}\n\n\t@Test // Disabled by default\n\tpublic void disableIfNotConfiguredOtherwise() {\n\t\tload(DisabledIfNotConfiguredOtherwiseConfig.class);\n\t\tassertFalse(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void disableIfNotConfiguredOtherwiseWithConfig() {\n\t\tload(DisabledIfNotConfiguredOtherwiseConfig.class, "simple.myProperty:true");\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void disableIfNotConfiguredOtherwiseWithConfigDifferentCase() {\n\t\tload(DisabledIfNotConfiguredOtherwiseConfig.class, "simple.myproperty:TrUe");\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void simpleValueIsSet() {\n\t\tload(SimpleValueConfig.class, "simple.myProperty:bar");\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void caseInsensitive() {\n\t\tload(SimpleValueConfig.class, "simple.myProperty:BaR");\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void defaultValueIsSet() {\n\t\tload(DefaultValueConfig.class, "simple.myProperty:bar");\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void defaultValueIsNotSet() {\n\t\tload(DefaultValueConfig.class);\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void defaultValueIsSetDifferentValue() {\n\t\tload(DefaultValueConfig.class, "simple.myProperty:another");\n\t\tassertFalse(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void prefix() {\n\t\tload(PrefixValueConfig.class, "simple.myProperty:bar");\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void relaxedEnabledByDefault() {\n\t\tload(PrefixValueConfig.class, "simple.myProperty:bar");\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void strictNameMatch() {\n\t\tload(StrictNameConfig.class, "simple.my-property:bar");\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void strictNameNoMatch() {\n\t\tload(StrictNameConfig.class, "simple.myProperty:bar");\n\t\tassertFalse(this.context.containsBean("foo"));\n\t}\n\n\tprivate void load(Class<?> config, String... environment) {\n\t\tthis.context = new AnnotationConfigApplicationContext();\n\t\tEnvironmentTestUtils.addEnvironment(this.context, environment);\n\t\tthis.context.register(config);\n\t\tthis.context.refresh();\n\t}\n\n\t@Configuration // ${simple.myProperty:true}\n\t@ConditionalOnPropertyValue(prefix = "simple", property = "my-property", value = "true", defaultMatch = true)\n\tstatic class EnabledIfNotConfiguredOtherwiseConfig {\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\t}\n\n\t@Configuration // ${simple.myProperty:false}\n\t@ConditionalOnPropertyValue(prefix = "simple", property = "my-property", value = "true", defaultMatch = false)\n\tstatic class DisabledIfNotConfiguredOtherwiseConfig {\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnPropertyValue(prefix = "simple", property = "my-property", value = "bar")\n\tstatic class SimpleValueConfig {\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnPropertyValue(property = "simple.myProperty", value = "bar", defaultMatch = true)\n\tstatic class DefaultValueConfig {\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnPropertyValue(prefix = "simple", property = "my-property", value = "bar")\n\tstatic class PrefixValueConfig {\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnPropertyValue(prefix = "simple", property = "my-property", value = "bar", relaxedName = false)\n\tstatic class StrictNameConfig {\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
