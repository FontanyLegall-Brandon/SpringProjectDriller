{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2015 the original author or authors.\n+ * Copyright 2012-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -16,15 +16,12 @@\n \n package org.springframework.boot.autoconfigure.integration;\n \n-import javax.management.MBeanServer;\n-\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.autoconfigure.condition.SearchStrategy;\n import org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration;\n-import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.integration.config.EnableIntegration;\n import org.springframework.integration.jmx.config.EnableIntegrationMBeanExport;\n@@ -36,19 +33,15 @@ import org.springframework.integration.monitor.IntegrationMBeanExporter;\n  *\n  * @author Artem Bilan\n  * @author Dave Syer\n+ * @author Stephane Nicoll\n  * @since 1.1.0\n  */\n @Configuration\n @ConditionalOnClass(EnableIntegration.class)\n @AutoConfigureAfter(JmxAutoConfiguration.class)\n+@ConditionalOnProperty(prefix = "spring.jmx", name = "enabled", havingValue = "true", matchIfMissing = true)\n public class IntegrationAutoConfiguration {\n \n-\t@Bean\n-\t@ConditionalOnMissingBean(MBeanServer.class)\n-\tpublic MBeanServer mbeanServer() {\n-\t\treturn new JmxAutoConfiguration().mbeanServer();\n-\t}\n-\n \t@Configuration\n \t@EnableIntegration\n \tprotected static class IntegrationConfiguration {\n@@ -57,7 +50,6 @@ public class IntegrationAutoConfiguration {\n \t@Configuration\n \t@ConditionalOnClass(EnableIntegrationMBeanExport.class)\n \t@ConditionalOnMissingBean(value = IntegrationMBeanExporter.class, search = SearchStrategy.CURRENT)\n-\t@ConditionalOnProperty(prefix = "spring.jmx", name = "enabled", havingValue = "true", matchIfMissing = true)\n \t@EnableIntegrationMBeanExport(defaultDomain = "${spring.jmx.default-domain:}", server = "${spring.jmx.server:mbeanServer}")\n \tprotected static class IntegrationJmxConfiguration {\n \t}\n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.integration;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.integration.config.EnableIntegration;\nimport org.springframework.integration.jmx.config.EnableIntegrationMBeanExport;\nimport org.springframework.integration.monitor.IntegrationMBeanExporter;\n\n/**\n * {@link org.springframework.boot.autoconfigure.EnableAutoConfiguration\n * Auto-configuration} for Spring Integration.\n *\n * @author Artem Bilan\n * @author Dave Syer\n * @author Stephane Nicoll\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass(EnableIntegration.class)\n@AutoConfigureAfter(JmxAutoConfiguration.class)\n@ConditionalOnProperty(prefix = "spring.jmx", name = "enabled", havingValue = "true", matchIfMissing = true)\npublic class IntegrationAutoConfiguration {\n\n\t@Configuration\n\t@EnableIntegration\n\tprotected static class IntegrationConfiguration {\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(EnableIntegrationMBeanExport.class)\n\t@ConditionalOnMissingBean(value = IntegrationMBeanExporter.class, search = SearchStrategy.CURRENT)\n\t@EnableIntegrationMBeanExport(defaultDomain = "${spring.jmx.default-domain:}", server = "${spring.jmx.server:mbeanServer}")\n\tprotected static class IntegrationJmxConfiguration {\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.integration;\n\nimport javax.management.MBeanServer;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.integration.config.EnableIntegration;\nimport org.springframework.integration.jmx.config.EnableIntegrationMBeanExport;\nimport org.springframework.integration.monitor.IntegrationMBeanExporter;\n\n/**\n * {@link org.springframework.boot.autoconfigure.EnableAutoConfiguration\n * Auto-configuration} for Spring Integration.\n *\n * @author Artem Bilan\n * @author Dave Syer\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass(EnableIntegration.class)\n@AutoConfigureAfter(JmxAutoConfiguration.class)\npublic class IntegrationAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean(MBeanServer.class)\n\tpublic MBeanServer mbeanServer() {\n\t\treturn new JmxAutoConfiguration().mbeanServer();\n\t}\n\n\t@Configuration\n\t@EnableIntegration\n\tprotected static class IntegrationConfiguration {\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(EnableIntegrationMBeanExport.class)\n\t@ConditionalOnMissingBean(value = IntegrationMBeanExporter.class, search = SearchStrategy.CURRENT)\n\t@ConditionalOnProperty(prefix = "spring.jmx", name = "enabled", havingValue = "true", matchIfMissing = true)\n\t@EnableIntegrationMBeanExport(defaultDomain = "${spring.jmx.default-domain:}", server = "${spring.jmx.server:mbeanServer}")\n\tprotected static class IntegrationJmxConfiguration {\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
