{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -56,7 +56,6 @@ import org.springframework.web.reactive.config.ResourceHandlerRegistry;\n import org.springframework.web.reactive.config.ViewResolverRegistry;\n import org.springframework.web.reactive.config.WebFluxConfigurationSupport;\n import org.springframework.web.reactive.config.WebFluxConfigurer;\n-import org.springframework.web.reactive.function.server.RouterFunction;\n import org.springframework.web.reactive.resource.AppCacheManifestTransformer;\n import org.springframework.web.reactive.resource.GzipResourceResolver;\n import org.springframework.web.reactive.resource.ResourceResolver;\n@@ -79,7 +78,7 @@ import org.springframework.web.reactive.result.view.ViewResolver;\n @Configuration\n @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)\n @ConditionalOnClass(WebFluxConfigurer.class)\n-@ConditionalOnMissingBean({ WebFluxConfigurationSupport.class, RouterFunction.class })\n+@ConditionalOnMissingBean({ WebFluxConfigurationSupport.class })\n @AutoConfigureAfter(ReactiveWebServerAutoConfiguration.class)\n @AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)\n public class WebFluxAutoConfiguration {\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web.reactive;\n\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport org.springframework.beans.factory.ListableBeanFactory;\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureOrder;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.validation.ValidatorAdapter;\nimport org.springframework.boot.autoconfigure.web.ConditionalOnEnabledResourceChain;\nimport org.springframework.boot.autoconfigure.web.ResourceProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.AnnotationAwareOrderComparator;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.core.convert.converter.GenericConverter;\nimport org.springframework.format.Formatter;\nimport org.springframework.format.FormatterRegistry;\nimport org.springframework.http.CacheControl;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.validation.Validator;\nimport org.springframework.web.reactive.config.DelegatingWebFluxConfiguration;\nimport org.springframework.web.reactive.config.EnableWebFlux;\nimport org.springframework.web.reactive.config.ResourceChainRegistration;\nimport org.springframework.web.reactive.config.ResourceHandlerRegistration;\nimport org.springframework.web.reactive.config.ResourceHandlerRegistry;\nimport org.springframework.web.reactive.config.ViewResolverRegistry;\nimport org.springframework.web.reactive.config.WebFluxConfigurationSupport;\nimport org.springframework.web.reactive.config.WebFluxConfigurer;\nimport org.springframework.web.reactive.resource.AppCacheManifestTransformer;\nimport org.springframework.web.reactive.resource.GzipResourceResolver;\nimport org.springframework.web.reactive.resource.ResourceResolver;\nimport org.springframework.web.reactive.resource.VersionResourceResolver;\nimport org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver;\nimport org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer;\nimport org.springframework.web.reactive.result.view.ViewResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link EnableWebFlux WebFlux}.\n *\n * @author Brian Clozel\n * @author Rob Winch\n * @author Stephane Nicoll\n * @author Andy Wilkinson\n * @author Phillip Webb\n * @author Eddú Meléndez\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)\n@ConditionalOnClass(WebFluxConfigurer.class)\n@ConditionalOnMissingBean({ WebFluxConfigurationSupport.class })\n@AutoConfigureAfter(ReactiveWebServerAutoConfiguration.class)\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)\npublic class WebFluxAutoConfiguration {\n\n\t@Configuration\n\t@EnableConfigurationProperties({ ResourceProperties.class, WebFluxProperties.class })\n\t@Import({ EnableWebFluxConfiguration.class })\n\tpublic static class WebFluxConfig implements WebFluxConfigurer {\n\n\t\tprivate static final Log logger = LogFactory.getLog(WebFluxConfig.class);\n\n\t\tprivate final ResourceProperties resourceProperties;\n\n\t\tprivate final WebFluxProperties webFluxProperties;\n\n\t\tprivate final ListableBeanFactory beanFactory;\n\n\t\tprivate final List<HandlerMethodArgumentResolver> argumentResolvers;\n\n\t\tprivate final ResourceHandlerRegistrationCustomizer resourceHandlerRegistrationCustomizer;\n\n\t\tprivate final List<ViewResolver> viewResolvers;\n\n\t\tpublic WebFluxConfig(ResourceProperties resourceProperties,\n\t\t\t\tWebFluxProperties webFluxProperties, ListableBeanFactory beanFactory,\n\t\t\t\tObjectProvider<List<HandlerMethodArgumentResolver>> resolvers,\n\t\t\t\tObjectProvider<ResourceHandlerRegistrationCustomizer> resourceHandlerRegistrationCustomizer,\n\t\t\t\tObjectProvider<List<ViewResolver>> viewResolvers) {\n\t\t\tthis.resourceProperties = resourceProperties;\n\t\t\tthis.webFluxProperties = webFluxProperties;\n\t\t\tthis.beanFactory = beanFactory;\n\t\t\tthis.argumentResolvers = resolvers.getIfAvailable();\n\t\t\tthis.resourceHandlerRegistrationCustomizer = resourceHandlerRegistrationCustomizer\n\t\t\t\t\t.getIfAvailable();\n\t\t\tthis.viewResolvers = viewResolvers.getIfAvailable();\n\t\t}\n\n\t\t@Override\n\t\tpublic void configureArgumentResolvers(ArgumentResolverConfigurer configurer) {\n\t\t\tif (this.argumentResolvers != null) {\n\t\t\t\tthis.argumentResolvers.stream().forEach(configurer::addCustomResolver);\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void addResourceHandlers(ResourceHandlerRegistry registry) {\n\t\t\tif (!this.resourceProperties.isAddMappings()) {\n\t\t\t\tlogger.debug("Default resource handling disabled");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tInteger cachePeriod = this.resourceProperties.getCachePeriod();\n\t\t\tif (!registry.hasMappingForPattern("/webjars/**")) {\n\t\t\t\tResourceHandlerRegistration registration = registry\n\t\t\t\t\t\t.addResourceHandler("/webjars/**")\n\t\t\t\t\t\t.addResourceLocations("classpath:/META-INF/resources/webjars/");\n\t\t\t\tif (cachePeriod != null) {\n\t\t\t\t\tregistration.setCacheControl(\n\t\t\t\t\t\t\tCacheControl.maxAge(cachePeriod, TimeUnit.SECONDS));\n\t\t\t\t}\n\t\t\t\tcustomizeResourceHandlerRegistration(registration);\n\t\t\t}\n\t\t\tString staticPathPattern = this.webFluxProperties.getStaticPathPattern();\n\t\t\tif (!registry.hasMappingForPattern(staticPathPattern)) {\n\t\t\t\tResourceHandlerRegistration registration = registry\n\t\t\t\t\t\t.addResourceHandler(staticPathPattern).addResourceLocations(\n\t\t\t\t\t\t\t\tthis.resourceProperties.getStaticLocations());\n\t\t\t\tif (cachePeriod != null) {\n\t\t\t\t\tregistration.setCacheControl(\n\t\t\t\t\t\t\tCacheControl.maxAge(cachePeriod, TimeUnit.SECONDS));\n\t\t\t\t}\n\t\t\t\tcustomizeResourceHandlerRegistration(registration);\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void configureViewResolvers(ViewResolverRegistry registry) {\n\t\t\tif (this.viewResolvers != null) {\n\t\t\t\tAnnotationAwareOrderComparator.sort(this.viewResolvers);\n\t\t\t\tthis.viewResolvers.forEach(registry::viewResolver);\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void addFormatters(final FormatterRegistry registry) {\n\t\t\tfor (Converter<?, ?> converter : getBeansOfType(Converter.class)) {\n\t\t\t\tregistry.addConverter(converter);\n\t\t\t}\n\t\t\tfor (GenericConverter converter : getBeansOfType(GenericConverter.class)) {\n\t\t\t\tregistry.addConverter(converter);\n\t\t\t}\n\t\t\tfor (Formatter<?> formatter : getBeansOfType(Formatter.class)) {\n\t\t\t\tregistry.addFormatter(formatter);\n\t\t\t}\n\t\t}\n\n\t\tprivate <T> Collection<T> getBeansOfType(Class<T> type) {\n\t\t\treturn this.beanFactory.getBeansOfType(type).values();\n\t\t}\n\n\t\tprivate void customizeResourceHandlerRegistration(\n\t\t\t\tResourceHandlerRegistration registration) {\n\t\t\tif (this.resourceHandlerRegistrationCustomizer != null) {\n\t\t\t\tthis.resourceHandlerRegistrationCustomizer.customize(registration);\n\t\t\t}\n\n\t\t}\n\t}\n\n\t/**\n\t * Configuration equivalent to {@code @EnableWebFlux}.\n\t */\n\t@Configuration\n\tpublic static class EnableWebFluxConfiguration\n\t\t\textends DelegatingWebFluxConfiguration {\n\n\t\t@Override\n\t\t@Bean\n\t\tpublic Validator webFluxValidator() {\n\t\t\tif (!ClassUtils.isPresent("javax.validation.Validator",\n\t\t\t\t\tgetClass().getClassLoader())) {\n\t\t\t\treturn super.webFluxValidator();\n\t\t\t}\n\t\t\treturn ValidatorAdapter.get(getApplicationContext(), getValidator());\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnEnabledResourceChain\n\tstatic class ResourceChainCustomizerConfiguration {\n\n\t\t@Bean\n\t\tpublic ResourceChainResourceHandlerRegistrationCustomizer resourceHandlerRegistrationCustomizer() {\n\t\t\treturn new ResourceChainResourceHandlerRegistrationCustomizer();\n\t\t}\n\n\t}\n\n\tinterface ResourceHandlerRegistrationCustomizer {\n\n\t\tvoid customize(ResourceHandlerRegistration registration);\n\n\t}\n\n\tprivate static class ResourceChainResourceHandlerRegistrationCustomizer\n\t\t\timplements ResourceHandlerRegistrationCustomizer {\n\n\t\t@Autowired\n\t\tprivate ResourceProperties resourceProperties = new ResourceProperties();\n\n\t\t@Override\n\t\tpublic void customize(ResourceHandlerRegistration registration) {\n\t\t\tResourceProperties.Chain properties = this.resourceProperties.getChain();\n\t\t\tconfigureResourceChain(properties,\n\t\t\t\t\tregistration.resourceChain(properties.isCache()));\n\t\t}\n\n\t\tprivate void configureResourceChain(ResourceProperties.Chain properties,\n\t\t\t\tResourceChainRegistration chain) {\n\t\t\tResourceProperties.Strategy strategy = properties.getStrategy();\n\t\t\tif (strategy.getFixed().isEnabled() || strategy.getContent().isEnabled()) {\n\t\t\t\tchain.addResolver(getVersionResourceResolver(strategy));\n\t\t\t}\n\t\t\tif (properties.isGzipped()) {\n\t\t\t\tchain.addResolver(new GzipResourceResolver());\n\t\t\t}\n\t\t\tif (properties.isHtmlApplicationCache()) {\n\t\t\t\tchain.addTransformer(new AppCacheManifestTransformer());\n\t\t\t}\n\t\t}\n\n\t\tprivate ResourceResolver getVersionResourceResolver(\n\t\t\t\tResourceProperties.Strategy properties) {\n\t\t\tVersionResourceResolver resolver = new VersionResourceResolver();\n\t\t\tif (properties.getFixed().isEnabled()) {\n\t\t\t\tString version = properties.getFixed().getVersion();\n\t\t\t\tString[] paths = properties.getFixed().getPaths();\n\t\t\t\tresolver.addFixedVersionStrategy(version, paths);\n\t\t\t}\n\t\t\tif (properties.getContent().isEnabled()) {\n\t\t\t\tString[] paths = properties.getContent().getPaths();\n\t\t\t\tresolver.addContentVersionStrategy(paths);\n\t\t\t}\n\t\t\treturn resolver;\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web.reactive;\n\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport org.springframework.beans.factory.ListableBeanFactory;\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureOrder;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.validation.ValidatorAdapter;\nimport org.springframework.boot.autoconfigure.web.ConditionalOnEnabledResourceChain;\nimport org.springframework.boot.autoconfigure.web.ResourceProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.AnnotationAwareOrderComparator;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.core.convert.converter.GenericConverter;\nimport org.springframework.format.Formatter;\nimport org.springframework.format.FormatterRegistry;\nimport org.springframework.http.CacheControl;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.validation.Validator;\nimport org.springframework.web.reactive.config.DelegatingWebFluxConfiguration;\nimport org.springframework.web.reactive.config.EnableWebFlux;\nimport org.springframework.web.reactive.config.ResourceChainRegistration;\nimport org.springframework.web.reactive.config.ResourceHandlerRegistration;\nimport org.springframework.web.reactive.config.ResourceHandlerRegistry;\nimport org.springframework.web.reactive.config.ViewResolverRegistry;\nimport org.springframework.web.reactive.config.WebFluxConfigurationSupport;\nimport org.springframework.web.reactive.config.WebFluxConfigurer;\nimport org.springframework.web.reactive.function.server.RouterFunction;\nimport org.springframework.web.reactive.resource.AppCacheManifestTransformer;\nimport org.springframework.web.reactive.resource.GzipResourceResolver;\nimport org.springframework.web.reactive.resource.ResourceResolver;\nimport org.springframework.web.reactive.resource.VersionResourceResolver;\nimport org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver;\nimport org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer;\nimport org.springframework.web.reactive.result.view.ViewResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link EnableWebFlux WebFlux}.\n *\n * @author Brian Clozel\n * @author Rob Winch\n * @author Stephane Nicoll\n * @author Andy Wilkinson\n * @author Phillip Webb\n * @author Eddú Meléndez\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)\n@ConditionalOnClass(WebFluxConfigurer.class)\n@ConditionalOnMissingBean({ WebFluxConfigurationSupport.class, RouterFunction.class })\n@AutoConfigureAfter(ReactiveWebServerAutoConfiguration.class)\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)\npublic class WebFluxAutoConfiguration {\n\n\t@Configuration\n\t@EnableConfigurationProperties({ ResourceProperties.class, WebFluxProperties.class })\n\t@Import({ EnableWebFluxConfiguration.class })\n\tpublic static class WebFluxConfig implements WebFluxConfigurer {\n\n\t\tprivate static final Log logger = LogFactory.getLog(WebFluxConfig.class);\n\n\t\tprivate final ResourceProperties resourceProperties;\n\n\t\tprivate final WebFluxProperties webFluxProperties;\n\n\t\tprivate final ListableBeanFactory beanFactory;\n\n\t\tprivate final List<HandlerMethodArgumentResolver> argumentResolvers;\n\n\t\tprivate final ResourceHandlerRegistrationCustomizer resourceHandlerRegistrationCustomizer;\n\n\t\tprivate final List<ViewResolver> viewResolvers;\n\n\t\tpublic WebFluxConfig(ResourceProperties resourceProperties,\n\t\t\t\tWebFluxProperties webFluxProperties, ListableBeanFactory beanFactory,\n\t\t\t\tObjectProvider<List<HandlerMethodArgumentResolver>> resolvers,\n\t\t\t\tObjectProvider<ResourceHandlerRegistrationCustomizer> resourceHandlerRegistrationCustomizer,\n\t\t\t\tObjectProvider<List<ViewResolver>> viewResolvers) {\n\t\t\tthis.resourceProperties = resourceProperties;\n\t\t\tthis.webFluxProperties = webFluxProperties;\n\t\t\tthis.beanFactory = beanFactory;\n\t\t\tthis.argumentResolvers = resolvers.getIfAvailable();\n\t\t\tthis.resourceHandlerRegistrationCustomizer = resourceHandlerRegistrationCustomizer\n\t\t\t\t\t.getIfAvailable();\n\t\t\tthis.viewResolvers = viewResolvers.getIfAvailable();\n\t\t}\n\n\t\t@Override\n\t\tpublic void configureArgumentResolvers(ArgumentResolverConfigurer configurer) {\n\t\t\tif (this.argumentResolvers != null) {\n\t\t\t\tthis.argumentResolvers.stream().forEach(configurer::addCustomResolver);\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void addResourceHandlers(ResourceHandlerRegistry registry) {\n\t\t\tif (!this.resourceProperties.isAddMappings()) {\n\t\t\t\tlogger.debug("Default resource handling disabled");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tInteger cachePeriod = this.resourceProperties.getCachePeriod();\n\t\t\tif (!registry.hasMappingForPattern("/webjars/**")) {\n\t\t\t\tResourceHandlerRegistration registration = registry\n\t\t\t\t\t\t.addResourceHandler("/webjars/**")\n\t\t\t\t\t\t.addResourceLocations("classpath:/META-INF/resources/webjars/");\n\t\t\t\tif (cachePeriod != null) {\n\t\t\t\t\tregistration.setCacheControl(\n\t\t\t\t\t\t\tCacheControl.maxAge(cachePeriod, TimeUnit.SECONDS));\n\t\t\t\t}\n\t\t\t\tcustomizeResourceHandlerRegistration(registration);\n\t\t\t}\n\t\t\tString staticPathPattern = this.webFluxProperties.getStaticPathPattern();\n\t\t\tif (!registry.hasMappingForPattern(staticPathPattern)) {\n\t\t\t\tResourceHandlerRegistration registration = registry\n\t\t\t\t\t\t.addResourceHandler(staticPathPattern).addResourceLocations(\n\t\t\t\t\t\t\t\tthis.resourceProperties.getStaticLocations());\n\t\t\t\tif (cachePeriod != null) {\n\t\t\t\t\tregistration.setCacheControl(\n\t\t\t\t\t\t\tCacheControl.maxAge(cachePeriod, TimeUnit.SECONDS));\n\t\t\t\t}\n\t\t\t\tcustomizeResourceHandlerRegistration(registration);\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void configureViewResolvers(ViewResolverRegistry registry) {\n\t\t\tif (this.viewResolvers != null) {\n\t\t\t\tAnnotationAwareOrderComparator.sort(this.viewResolvers);\n\t\t\t\tthis.viewResolvers.forEach(registry::viewResolver);\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void addFormatters(final FormatterRegistry registry) {\n\t\t\tfor (Converter<?, ?> converter : getBeansOfType(Converter.class)) {\n\t\t\t\tregistry.addConverter(converter);\n\t\t\t}\n\t\t\tfor (GenericConverter converter : getBeansOfType(GenericConverter.class)) {\n\t\t\t\tregistry.addConverter(converter);\n\t\t\t}\n\t\t\tfor (Formatter<?> formatter : getBeansOfType(Formatter.class)) {\n\t\t\t\tregistry.addFormatter(formatter);\n\t\t\t}\n\t\t}\n\n\t\tprivate <T> Collection<T> getBeansOfType(Class<T> type) {\n\t\t\treturn this.beanFactory.getBeansOfType(type).values();\n\t\t}\n\n\t\tprivate void customizeResourceHandlerRegistration(\n\t\t\t\tResourceHandlerRegistration registration) {\n\t\t\tif (this.resourceHandlerRegistrationCustomizer != null) {\n\t\t\t\tthis.resourceHandlerRegistrationCustomizer.customize(registration);\n\t\t\t}\n\n\t\t}\n\t}\n\n\t/**\n\t * Configuration equivalent to {@code @EnableWebFlux}.\n\t */\n\t@Configuration\n\tpublic static class EnableWebFluxConfiguration\n\t\t\textends DelegatingWebFluxConfiguration {\n\n\t\t@Override\n\t\t@Bean\n\t\tpublic Validator webFluxValidator() {\n\t\t\tif (!ClassUtils.isPresent("javax.validation.Validator",\n\t\t\t\t\tgetClass().getClassLoader())) {\n\t\t\t\treturn super.webFluxValidator();\n\t\t\t}\n\t\t\treturn ValidatorAdapter.get(getApplicationContext(), getValidator());\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnEnabledResourceChain\n\tstatic class ResourceChainCustomizerConfiguration {\n\n\t\t@Bean\n\t\tpublic ResourceChainResourceHandlerRegistrationCustomizer resourceHandlerRegistrationCustomizer() {\n\t\t\treturn new ResourceChainResourceHandlerRegistrationCustomizer();\n\t\t}\n\n\t}\n\n\tinterface ResourceHandlerRegistrationCustomizer {\n\n\t\tvoid customize(ResourceHandlerRegistration registration);\n\n\t}\n\n\tprivate static class ResourceChainResourceHandlerRegistrationCustomizer\n\t\t\timplements ResourceHandlerRegistrationCustomizer {\n\n\t\t@Autowired\n\t\tprivate ResourceProperties resourceProperties = new ResourceProperties();\n\n\t\t@Override\n\t\tpublic void customize(ResourceHandlerRegistration registration) {\n\t\t\tResourceProperties.Chain properties = this.resourceProperties.getChain();\n\t\t\tconfigureResourceChain(properties,\n\t\t\t\t\tregistration.resourceChain(properties.isCache()));\n\t\t}\n\n\t\tprivate void configureResourceChain(ResourceProperties.Chain properties,\n\t\t\t\tResourceChainRegistration chain) {\n\t\t\tResourceProperties.Strategy strategy = properties.getStrategy();\n\t\t\tif (strategy.getFixed().isEnabled() || strategy.getContent().isEnabled()) {\n\t\t\t\tchain.addResolver(getVersionResourceResolver(strategy));\n\t\t\t}\n\t\t\tif (properties.isGzipped()) {\n\t\t\t\tchain.addResolver(new GzipResourceResolver());\n\t\t\t}\n\t\t\tif (properties.isHtmlApplicationCache()) {\n\t\t\t\tchain.addTransformer(new AppCacheManifestTransformer());\n\t\t\t}\n\t\t}\n\n\t\tprivate ResourceResolver getVersionResourceResolver(\n\t\t\t\tResourceProperties.Strategy properties) {\n\t\t\tVersionResourceResolver resolver = new VersionResourceResolver();\n\t\t\tif (properties.getFixed().isEnabled()) {\n\t\t\t\tString version = properties.getFixed().getVersion();\n\t\t\t\tString[] paths = properties.getFixed().getPaths();\n\t\t\t\tresolver.addFixedVersionStrategy(version, paths);\n\t\t\t}\n\t\t\tif (properties.getContent().isEnabled()) {\n\t\t\t\tString[] paths = properties.getContent().getPaths();\n\t\t\t\tresolver.addContentVersionStrategy(paths);\n\t\t\t}\n\t\t\treturn resolver;\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
