{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/HttpEncodingAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/HttpEncodingAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2019 the original author or authors.\n+ * Copyright 2012-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -21,12 +21,12 @@ import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n-import org.springframework.boot.autoconfigure.http.HttpProperties;\n-import org.springframework.boot.autoconfigure.http.HttpProperties.Encoding.Type;\n+import org.springframework.boot.autoconfigure.web.ServerProperties;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.boot.web.server.WebServerFactoryCustomizer;\n import org.springframework.boot.web.servlet.filter.OrderedCharacterEncodingFilter;\n import org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;\n+import org.springframework.boot.web.servlet.server.Encoding;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.core.Ordered;\n@@ -41,16 +41,16 @@ import org.springframework.web.filter.CharacterEncodingFilter;\n  * @since 2.0.0\n  */\n @Configuration(proxyBeanMethods = false)\n-@EnableConfigurationProperties(HttpProperties.class)\n+@EnableConfigurationProperties(ServerProperties.class)\n @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n @ConditionalOnClass(CharacterEncodingFilter.class)\n-@ConditionalOnProperty(prefix = "spring.http.encoding", value = "enabled", matchIfMissing = true)\n+@ConditionalOnProperty(prefix = "server.servlet.encoding", value = "enabled", matchIfMissing = true)\n public class HttpEncodingAutoConfiguration {\n \n-\tprivate final HttpProperties.Encoding properties;\n+\tprivate final Encoding properties;\n \n-\tpublic HttpEncodingAutoConfiguration(HttpProperties properties) {\n-\t\tthis.properties = properties.getEncoding();\n+\tpublic HttpEncodingAutoConfiguration(ServerProperties properties) {\n+\t\tthis.properties = properties.getServlet().getEncoding();\n \t}\n \n \t@Bean\n@@ -58,8 +58,8 @@ public class HttpEncodingAutoConfiguration {\n \tpublic CharacterEncodingFilter characterEncodingFilter() {\n \t\tCharacterEncodingFilter filter = new OrderedCharacterEncodingFilter();\n \t\tfilter.setEncoding(this.properties.getCharset().name());\n-\t\tfilter.setForceRequestEncoding(this.properties.shouldForce(Type.REQUEST));\n-\t\tfilter.setForceResponseEncoding(this.properties.shouldForce(Type.RESPONSE));\n+\t\tfilter.setForceRequestEncoding(this.properties.shouldForce(Encoding.Type.REQUEST));\n+\t\tfilter.setForceResponseEncoding(this.properties.shouldForce(Encoding.Type.RESPONSE));\n \t\treturn filter;\n \t}\n \n@@ -71,9 +71,9 @@ public class HttpEncodingAutoConfiguration {\n \tstatic class LocaleCharsetMappingsCustomizer\n \t\t\timplements WebServerFactoryCustomizer<ConfigurableServletWebServerFactory>, Ordered {\n \n-\t\tprivate final HttpProperties.Encoding properties;\n+\t\tprivate final Encoding properties;\n \n-\t\tLocaleCharsetMappingsCustomizer(HttpProperties.Encoding properties) {\n+\t\tLocaleCharsetMappingsCustomizer(Encoding properties) {\n \t\t\tthis.properties = properties;\n \t\t}\n \n', 'source_code': '/*\n * Copyright 2012-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web.servlet;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.web.ServerProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.web.server.WebServerFactoryCustomizer;\nimport org.springframework.boot.web.servlet.filter.OrderedCharacterEncodingFilter;\nimport org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;\nimport org.springframework.boot.web.servlet.server.Encoding;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.web.filter.CharacterEncodingFilter;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for configuring the encoding to use\n * in web applications.\n *\n * @author Stephane Nicoll\n * @author Brian Clozel\n * @since 2.0.0\n */\n@Configuration(proxyBeanMethods = false)\n@EnableConfigurationProperties(ServerProperties.class)\n@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n@ConditionalOnClass(CharacterEncodingFilter.class)\n@ConditionalOnProperty(prefix = "server.servlet.encoding", value = "enabled", matchIfMissing = true)\npublic class HttpEncodingAutoConfiguration {\n\n\tprivate final Encoding properties;\n\n\tpublic HttpEncodingAutoConfiguration(ServerProperties properties) {\n\t\tthis.properties = properties.getServlet().getEncoding();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic CharacterEncodingFilter characterEncodingFilter() {\n\t\tCharacterEncodingFilter filter = new OrderedCharacterEncodingFilter();\n\t\tfilter.setEncoding(this.properties.getCharset().name());\n\t\tfilter.setForceRequestEncoding(this.properties.shouldForce(Encoding.Type.REQUEST));\n\t\tfilter.setForceResponseEncoding(this.properties.shouldForce(Encoding.Type.RESPONSE));\n\t\treturn filter;\n\t}\n\n\t@Bean\n\tpublic LocaleCharsetMappingsCustomizer localeCharsetMappingsCustomizer() {\n\t\treturn new LocaleCharsetMappingsCustomizer(this.properties);\n\t}\n\n\tstatic class LocaleCharsetMappingsCustomizer\n\t\t\timplements WebServerFactoryCustomizer<ConfigurableServletWebServerFactory>, Ordered {\n\n\t\tprivate final Encoding properties;\n\n\t\tLocaleCharsetMappingsCustomizer(Encoding properties) {\n\t\t\tthis.properties = properties;\n\t\t}\n\n\t\t@Override\n\t\tpublic void customize(ConfigurableServletWebServerFactory factory) {\n\t\t\tif (this.properties.getMapping() != null) {\n\t\t\t\tfactory.setLocaleCharsetMappings(this.properties.getMapping());\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic int getOrder() {\n\t\t\treturn 0;\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web.servlet;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.http.HttpProperties;\nimport org.springframework.boot.autoconfigure.http.HttpProperties.Encoding.Type;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.web.server.WebServerFactoryCustomizer;\nimport org.springframework.boot.web.servlet.filter.OrderedCharacterEncodingFilter;\nimport org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.web.filter.CharacterEncodingFilter;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for configuring the encoding to use\n * in web applications.\n *\n * @author Stephane Nicoll\n * @author Brian Clozel\n * @since 2.0.0\n */\n@Configuration(proxyBeanMethods = false)\n@EnableConfigurationProperties(HttpProperties.class)\n@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n@ConditionalOnClass(CharacterEncodingFilter.class)\n@ConditionalOnProperty(prefix = "spring.http.encoding", value = "enabled", matchIfMissing = true)\npublic class HttpEncodingAutoConfiguration {\n\n\tprivate final HttpProperties.Encoding properties;\n\n\tpublic HttpEncodingAutoConfiguration(HttpProperties properties) {\n\t\tthis.properties = properties.getEncoding();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic CharacterEncodingFilter characterEncodingFilter() {\n\t\tCharacterEncodingFilter filter = new OrderedCharacterEncodingFilter();\n\t\tfilter.setEncoding(this.properties.getCharset().name());\n\t\tfilter.setForceRequestEncoding(this.properties.shouldForce(Type.REQUEST));\n\t\tfilter.setForceResponseEncoding(this.properties.shouldForce(Type.RESPONSE));\n\t\treturn filter;\n\t}\n\n\t@Bean\n\tpublic LocaleCharsetMappingsCustomizer localeCharsetMappingsCustomizer() {\n\t\treturn new LocaleCharsetMappingsCustomizer(this.properties);\n\t}\n\n\tstatic class LocaleCharsetMappingsCustomizer\n\t\t\timplements WebServerFactoryCustomizer<ConfigurableServletWebServerFactory>, Ordered {\n\n\t\tprivate final HttpProperties.Encoding properties;\n\n\t\tLocaleCharsetMappingsCustomizer(HttpProperties.Encoding properties) {\n\t\t\tthis.properties = properties;\n\t\t}\n\n\t\t@Override\n\t\tpublic void customize(ConfigurableServletWebServerFactory factory) {\n\t\t\tif (this.properties.getMapping() != null) {\n\t\t\t\tfactory.setLocaleCharsetMappings(this.properties.getMapping());\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic int getOrder() {\n\t\t\treturn 0;\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
