@@ -0,0 +1,77 @@
+
+
+package org.springframework.boot.autoconfigure.mobile;
+
+import java.util.List;
+
+import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
+import org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.mobile.device.DeviceHandlerMethodArgumentResolver;
+import org.springframework.mobile.device.DeviceResolver;
+import org.springframework.mobile.device.DeviceResolverHandlerInterceptor;
+import org.springframework.web.method.support.HandlerMethodArgumentResolver;
+import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
+import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
+
+
+@Configuration
+@ConditionalOnClass({ DeviceResolverHandlerInterceptor.class,
+		DeviceHandlerMethodArgumentResolver.class })
+@AutoConfigureAfter(WebMvcAutoConfiguration.class)
+public class DeviceResolverAutoConfiguration {
+
+	@Configuration
+	@ConditionalOnWebApplication
+	protected static class DeviceResolverAutoConfigurationAdapter extends
+			WebMvcConfigurerAdapter {
+
+		@Bean
+		@ConditionalOnMissingBean(DeviceResolverHandlerInterceptor.class)
+		public DeviceResolverHandlerInterceptor deviceResolverHandlerInterceptor() {
+			return new DeviceResolverHandlerInterceptor();
+		}
+
+		@Bean
+		public DeviceHandlerMethodArgumentResolver deviceHandlerMethodArgumentResolver() {
+			return new DeviceHandlerMethodArgumentResolver();
+		}
+
+		@Override
+		public void addInterceptors(InterceptorRegistry registry) {
+			registry.addInterceptor(deviceResolverHandlerInterceptor());
+		}
+
+		@Override
+		public void addArgumentResolvers(
+				List<HandlerMethodArgumentResolver> argumentResolvers) {
+			argumentResolvers.add(deviceHandlerMethodArgumentResolver());
+		}
+
+	}
+
+}

