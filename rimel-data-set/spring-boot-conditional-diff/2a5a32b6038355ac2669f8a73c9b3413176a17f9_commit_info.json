{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/h2/H2ConsoleAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2012-2015 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.h2;\n+\n+import org.h2.server.web.WebServlet;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.autoconfigure.security.SecurityAuthorizeMode;\n+import org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration;\n+import org.springframework.boot.autoconfigure.security.SecurityProperties;\n+import org.springframework.boot.context.embedded.ServletRegistrationBean;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.security.config.annotation.ObjectPostProcessor;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for H2\'s web console\n+ *\n+ * @author Andy Wilkinson\n+ * @since 1.3.0\n+ */\n+@Configuration\n+@ConditionalOnWebApplication\n+@ConditionalOnClass(WebServlet.class)\n+@ConditionalOnProperty(prefix = "spring.h2.console", name = "enabled", havingValue = "true", matchIfMissing = false)\n+@EnableConfigurationProperties(H2ConsoleProperties.class)\n+@AutoConfigureAfter(SecurityAutoConfiguration.class)\n+public class H2ConsoleAutoConfiguration {\n+\n+\t@Autowired\n+\tprivate H2ConsoleProperties properties;\n+\n+\t@Bean\n+\tpublic ServletRegistrationBean h2Console() {\n+\t\treturn new ServletRegistrationBean(new WebServlet(), this.properties.getPath()\n+\t\t\t\t.endsWith("/") ? this.properties.getPath() + "*"\n+\t\t\t\t: this.properties.getPath() + "/*");\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnClass(WebSecurityConfigurerAdapter.class)\n+\t@ConditionalOnBean(ObjectPostProcessor.class)\n+\t@ConditionalOnProperty(prefix = "security.basic", name = "enabled", matchIfMissing = true)\n+\tstatic class H2ConsoleSecurityConfiguration {\n+\n+\t\t@Bean\n+\t\tpublic WebSecurityConfigurerAdapter h2ConsoleSecurityConfigurer() {\n+\t\t\treturn new H2ConsoleSecurityConfigurer();\n+\t\t}\n+\n+\t\t@Order(SecurityProperties.BASIC_AUTH_ORDER - 10)\n+\t\tprivate static class H2ConsoleSecurityConfigurer extends\n+\t\t\t\tWebSecurityConfigurerAdapter {\n+\n+\t\t\t@Autowired\n+\t\t\tprivate H2ConsoleProperties console;\n+\n+\t\t\t@Autowired\n+\t\t\tprivate SecurityProperties security;\n+\n+\t\t\t@Override\n+\t\t\tpublic void configure(HttpSecurity http) throws Exception {\n+\t\t\t\tHttpSecurity h2Console = http.antMatcher(this.console.getPath().endsWith(\n+\t\t\t\t\t\t"/") ? this.console.getPath() + "**" : this.console.getPath()\n+\t\t\t\t\t\t+ "/**");\n+\t\t\t\th2Console.csrf().disable();\n+\t\t\t\th2Console.httpBasic();\n+\t\t\t\th2Console.headers().frameOptions().sameOrigin();\n+\t\t\t\tString[] roles = this.security.getUser().getRole().toArray(new String[0]);\n+\t\t\t\tSecurityAuthorizeMode mode = this.security.getBasic().getAuthorizeMode();\n+\t\t\t\tif (mode == null || mode == SecurityAuthorizeMode.ROLE) {\n+\t\t\t\t\thttp.authorizeRequests().anyRequest().hasAnyRole(roles);\n+\t\t\t\t}\n+\t\t\t\telse if (mode == SecurityAuthorizeMode.AUTHENTICATED) {\n+\t\t\t\t\thttp.authorizeRequests().anyRequest().authenticated();\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t}\n+\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.h2;\n\nimport org.h2.server.web.WebServlet;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.security.SecurityAuthorizeMode;\nimport org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration;\nimport org.springframework.boot.autoconfigure.security.SecurityProperties;\nimport org.springframework.boot.context.embedded.ServletRegistrationBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.security.config.annotation.ObjectPostProcessor;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for H2\'s web console\n *\n * @author Andy Wilkinson\n * @since 1.3.0\n */\n@Configuration\n@ConditionalOnWebApplication\n@ConditionalOnClass(WebServlet.class)\n@ConditionalOnProperty(prefix = "spring.h2.console", name = "enabled", havingValue = "true", matchIfMissing = false)\n@EnableConfigurationProperties(H2ConsoleProperties.class)\n@AutoConfigureAfter(SecurityAutoConfiguration.class)\npublic class H2ConsoleAutoConfiguration {\n\n\t@Autowired\n\tprivate H2ConsoleProperties properties;\n\n\t@Bean\n\tpublic ServletRegistrationBean h2Console() {\n\t\treturn new ServletRegistrationBean(new WebServlet(), this.properties.getPath()\n\t\t\t\t.endsWith("/") ? this.properties.getPath() + "*"\n\t\t\t\t: this.properties.getPath() + "/*");\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(WebSecurityConfigurerAdapter.class)\n\t@ConditionalOnBean(ObjectPostProcessor.class)\n\t@ConditionalOnProperty(prefix = "security.basic", name = "enabled", matchIfMissing = true)\n\tstatic class H2ConsoleSecurityConfiguration {\n\n\t\t@Bean\n\t\tpublic WebSecurityConfigurerAdapter h2ConsoleSecurityConfigurer() {\n\t\t\treturn new H2ConsoleSecurityConfigurer();\n\t\t}\n\n\t\t@Order(SecurityProperties.BASIC_AUTH_ORDER - 10)\n\t\tprivate static class H2ConsoleSecurityConfigurer extends\n\t\t\t\tWebSecurityConfigurerAdapter {\n\n\t\t\t@Autowired\n\t\t\tprivate H2ConsoleProperties console;\n\n\t\t\t@Autowired\n\t\t\tprivate SecurityProperties security;\n\n\t\t\t@Override\n\t\t\tpublic void configure(HttpSecurity http) throws Exception {\n\t\t\t\tHttpSecurity h2Console = http.antMatcher(this.console.getPath().endsWith(\n\t\t\t\t\t\t"/") ? this.console.getPath() + "**" : this.console.getPath()\n\t\t\t\t\t\t+ "/**");\n\t\t\t\th2Console.csrf().disable();\n\t\t\t\th2Console.httpBasic();\n\t\t\t\th2Console.headers().frameOptions().sameOrigin();\n\t\t\t\tString[] roles = this.security.getUser().getRole().toArray(new String[0]);\n\t\t\t\tSecurityAuthorizeMode mode = this.security.getBasic().getAuthorizeMode();\n\t\t\t\tif (mode == null || mode == SecurityAuthorizeMode.ROLE) {\n\t\t\t\t\thttp.authorizeRequests().anyRequest().hasAnyRole(roles);\n\t\t\t\t}\n\t\t\t\telse if (mode == SecurityAuthorizeMode.AUTHENTICATED) {\n\t\t\t\t\thttp.authorizeRequests().anyRequest().authenticated();\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
