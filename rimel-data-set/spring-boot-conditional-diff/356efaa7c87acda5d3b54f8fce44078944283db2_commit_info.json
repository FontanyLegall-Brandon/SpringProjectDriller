{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/trace/TraceAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/trace/HttpTraceAutoConfiguration.java'), 'change_type': <ModificationType.RENAME: 3>, 'diff': '@@ -38,9 +38,9 @@ import org.springframework.context.annotation.Configuration;\n  */\n @Configuration\n @ConditionalOnWebApplication\n-@ConditionalOnProperty(prefix = "management.trace", name = "enabled", matchIfMissing = true)\n-@EnableConfigurationProperties(TraceProperties.class)\n-public class TraceAutoConfiguration {\n+@ConditionalOnProperty(prefix = "management.httptrace", name = "enabled", matchIfMissing = true)\n+@EnableConfigurationProperties(HttpTraceProperties.class)\n+public class HttpTraceAutoConfiguration {\n \n \t@Bean\n \t@ConditionalOnMissingBean(HttpTraceRepository.class)\n@@ -50,7 +50,7 @@ public class TraceAutoConfiguration {\n \n \t@Bean\n \t@ConditionalOnMissingBean\n-\tpublic HttpExchangeTracer httpExchangeTracer(TraceProperties traceProperties) {\n+\tpublic HttpExchangeTracer httpExchangeTracer(HttpTraceProperties traceProperties) {\n \t\treturn new HttpExchangeTracer(traceProperties.getInclude());\n \t}\n \n@@ -72,7 +72,7 @@ public class TraceAutoConfiguration {\n \t\t@Bean\n \t\t@ConditionalOnMissingBean\n \t\tpublic HttpTraceWebFilter httpTraceWebFilter(HttpTraceRepository repository,\n-\t\t\t\tHttpExchangeTracer tracer, TraceProperties traceProperties) {\n+\t\t\t\tHttpExchangeTracer tracer, HttpTraceProperties traceProperties) {\n \t\t\treturn new HttpTraceWebFilter(repository, tracer,\n \t\t\t\t\ttraceProperties.getInclude());\n \t\t}\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.web.trace;\n\nimport org.springframework.boot.actuate.web.trace.HttpExchangeTracer;\nimport org.springframework.boot.actuate.web.trace.HttpTraceRepository;\nimport org.springframework.boot.actuate.web.trace.InMemoryHttpTraceRepository;\nimport org.springframework.boot.actuate.web.trace.reactive.HttpTraceWebFilter;\nimport org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for HTTP tracing.\n *\n * @author Dave Syer\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnWebApplication\n@ConditionalOnProperty(prefix = "management.httptrace", name = "enabled", matchIfMissing = true)\n@EnableConfigurationProperties(HttpTraceProperties.class)\npublic class HttpTraceAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean(HttpTraceRepository.class)\n\tpublic InMemoryHttpTraceRepository traceRepository() {\n\t\treturn new InMemoryHttpTraceRepository();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic HttpExchangeTracer httpExchangeTracer(HttpTraceProperties traceProperties) {\n\t\treturn new HttpExchangeTracer(traceProperties.getInclude());\n\t}\n\n\t@ConditionalOnWebApplication(type = Type.SERVLET)\n\tstatic class ServletTraceFilterConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic HttpTraceFilter httpTraceFilter(HttpTraceRepository repository,\n\t\t\t\tHttpExchangeTracer tracer) {\n\t\t\treturn new HttpTraceFilter(repository, tracer);\n\t\t}\n\n\t}\n\n\t@ConditionalOnWebApplication(type = Type.REACTIVE)\n\tstatic class ReactiveTraceFilterConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic HttpTraceWebFilter httpTraceWebFilter(HttpTraceRepository repository,\n\t\t\t\tHttpExchangeTracer tracer, HttpTraceProperties traceProperties) {\n\t\t\treturn new HttpTraceWebFilter(repository, tracer,\n\t\t\t\t\ttraceProperties.getInclude());\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.web.trace;\n\nimport org.springframework.boot.actuate.web.trace.HttpExchangeTracer;\nimport org.springframework.boot.actuate.web.trace.HttpTraceRepository;\nimport org.springframework.boot.actuate.web.trace.InMemoryHttpTraceRepository;\nimport org.springframework.boot.actuate.web.trace.reactive.HttpTraceWebFilter;\nimport org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for HTTP tracing.\n *\n * @author Dave Syer\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnWebApplication\n@ConditionalOnProperty(prefix = "management.trace", name = "enabled", matchIfMissing = true)\n@EnableConfigurationProperties(TraceProperties.class)\npublic class TraceAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean(HttpTraceRepository.class)\n\tpublic InMemoryHttpTraceRepository traceRepository() {\n\t\treturn new InMemoryHttpTraceRepository();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic HttpExchangeTracer httpExchangeTracer(TraceProperties traceProperties) {\n\t\treturn new HttpExchangeTracer(traceProperties.getInclude());\n\t}\n\n\t@ConditionalOnWebApplication(type = Type.SERVLET)\n\tstatic class ServletTraceFilterConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic HttpTraceFilter httpTraceFilter(HttpTraceRepository repository,\n\t\t\t\tHttpExchangeTracer tracer) {\n\t\t\treturn new HttpTraceFilter(repository, tracer);\n\t\t}\n\n\t}\n\n\t@ConditionalOnWebApplication(type = Type.REACTIVE)\n\tstatic class ReactiveTraceFilterConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic HttpTraceWebFilter httpTraceWebFilter(HttpTraceRepository repository,\n\t\t\t\tHttpExchangeTracer tracer, TraceProperties traceProperties) {\n\t\t\treturn new HttpTraceWebFilter(repository, tracer,\n\t\t\t\t\ttraceProperties.getInclude());\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
