{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/reactor/ReactorAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/reactor/ReactorAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -23,12 +23,10 @@ import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean\n import org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.core.Ordered;\n-import org.springframework.core.annotation.Order;\n \n import reactor.core.Environment;\n import reactor.core.Reactor;\n-import reactor.spring.context.ConsumerBeanPostProcessor;\n+import reactor.spring.context.config.EnableReactor;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for Reactor.\n@@ -36,25 +34,15 @@ import reactor.spring.context.ConsumerBeanPostProcessor;\n  * @author Dave Syer\n  */\n @Configuration\n-@ConditionalOnClass(ConsumerBeanPostProcessor.class)\n+@ConditionalOnClass(EnableReactor.class)\n @ConditionalOnMissingBean(Reactor.class)\n @AutoConfigureAfter(WebMvcAutoConfiguration.class)\n+@EnableReactor\n public class ReactorAutoConfiguration {\n \n \t@Bean\n-\tpublic Environment reactorEnvironment() {\n-\t\treturn new Environment();\n-\t}\n-\n-\t@Bean\n-\tpublic Reactor rootReactor() {\n-\t\treturn reactorEnvironment().getRootReactor();\n-\t}\n-\n-\t@Bean\n-\t@Order(Ordered.LOWEST_PRECEDENCE)\n-\tprotected ConsumerBeanPostProcessor reactorConsumerBeanPostProcessor() {\n-\t\treturn new ConsumerBeanPostProcessor();\n+\tpublic Reactor rootReactor(Environment environment) {\n+\t\treturn environment.getRootReactor();\n \t}\n \n }\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.reactor;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport reactor.core.Environment;\nimport reactor.core.Reactor;\nimport reactor.spring.context.config.EnableReactor;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Reactor.\n * \n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnClass(EnableReactor.class)\n@ConditionalOnMissingBean(Reactor.class)\n@AutoConfigureAfter(WebMvcAutoConfiguration.class)\n@EnableReactor\npublic class ReactorAutoConfiguration {\n\n\t@Bean\n\tpublic Reactor rootReactor(Environment environment) {\n\t\treturn environment.getRootReactor();\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.reactor;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\n\nimport reactor.core.Environment;\nimport reactor.core.Reactor;\nimport reactor.spring.context.ConsumerBeanPostProcessor;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Reactor.\n * \n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnClass(ConsumerBeanPostProcessor.class)\n@ConditionalOnMissingBean(Reactor.class)\n@AutoConfigureAfter(WebMvcAutoConfiguration.class)\npublic class ReactorAutoConfiguration {\n\n\t@Bean\n\tpublic Environment reactorEnvironment() {\n\t\treturn new Environment();\n\t}\n\n\t@Bean\n\tpublic Reactor rootReactor() {\n\t\treturn reactorEnvironment().getRootReactor();\n\t}\n\n\t@Bean\n\t@Order(Ordered.LOWEST_PRECEDENCE)\n\tprotected ConsumerBeanPostProcessor reactorConsumerBeanPostProcessor() {\n\t\treturn new ConsumerBeanPostProcessor();\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
