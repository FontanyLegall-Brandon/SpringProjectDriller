{'_old_path': None, '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/ReactiveHealthEndpointConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2012-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.autoconfigure.health;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import reactor.core.publisher.Flux;\n+\n+import org.springframework.boot.actuate.health.DefaultReactiveHealthContributorRegistry;\n+import org.springframework.boot.actuate.health.HealthContributor;\n+import org.springframework.boot.actuate.health.HealthEndpoint;\n+import org.springframework.boot.actuate.health.ReactiveHealthContributor;\n+import org.springframework.boot.actuate.health.ReactiveHealthContributorRegistry;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Configuration for reactive {@link HealthEndpoint} infrastructure beans.\n+ *\n+ * @author Phillip Webb\n+ * @see HealthEndpointAutoConfiguration\n+ */\n+@Configuration(proxyBeanMethods = false)\n+@ConditionalOnClass(Flux.class)\n+@ConditionalOnBean(HealthEndpoint.class)\n+class ReactiveHealthEndpointConfiguration {\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tReactiveHealthContributorRegistry reactiveHealthContributorRegistry(\n+\t\t\tMap<String, HealthContributor> healthContributors,\n+\t\t\tMap<String, ReactiveHealthContributor> reactiveHealthContributors) {\n+\t\tMap<String, ReactiveHealthContributor> allContributors = new LinkedHashMap<>(reactiveHealthContributors);\n+\t\thealthContributors.forEach((name, contributor) -> allContributors.computeIfAbsent(name,\n+\t\t\t\t(key) -> ReactiveHealthContributor.adapt(contributor)));\n+\t\treturn new DefaultReactiveHealthContributorRegistry(allContributors);\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.health;\n\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\nimport reactor.core.publisher.Flux;\n\nimport org.springframework.boot.actuate.health.DefaultReactiveHealthContributorRegistry;\nimport org.springframework.boot.actuate.health.HealthContributor;\nimport org.springframework.boot.actuate.health.HealthEndpoint;\nimport org.springframework.boot.actuate.health.ReactiveHealthContributor;\nimport org.springframework.boot.actuate.health.ReactiveHealthContributorRegistry;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Configuration for reactive {@link HealthEndpoint} infrastructure beans.\n *\n * @author Phillip Webb\n * @see HealthEndpointAutoConfiguration\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass(Flux.class)\n@ConditionalOnBean(HealthEndpoint.class)\nclass ReactiveHealthEndpointConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tReactiveHealthContributorRegistry reactiveHealthContributorRegistry(\n\t\t\tMap<String, HealthContributor> healthContributors,\n\t\t\tMap<String, ReactiveHealthContributor> reactiveHealthContributors) {\n\t\tMap<String, ReactiveHealthContributor> allContributors = new LinkedHashMap<>(reactiveHealthContributors);\n\t\thealthContributors.forEach((name, contributor) -> allContributors.computeIfAbsent(name,\n\t\t\t\t(key) -> ReactiveHealthContributor.adapt(contributor)));\n\t\treturn new DefaultReactiveHealthContributorRegistry(allContributors);\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
