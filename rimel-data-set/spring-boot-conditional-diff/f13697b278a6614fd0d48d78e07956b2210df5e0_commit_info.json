{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/servlet/OAuth2ResourceServerAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/servlet/OAuth2ResourceServerAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -24,6 +24,7 @@ import org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfi\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Import;\n+import org.springframework.security.oauth2.jwt.JwtDecoder;\n import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationToken;\n \n /**\n@@ -35,7 +36,7 @@ import org.springframework.security.oauth2.server.resource.authentication.JwtAut\n @Configuration\n @AutoConfigureBefore(SecurityAutoConfiguration.class)\n @EnableConfigurationProperties(OAuth2ResourceServerProperties.class)\n-@ConditionalOnClass(JwtAuthenticationToken.class)\n+@ConditionalOnClass({ JwtAuthenticationToken.class, JwtDecoder.class })\n @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n @Import({ OAuth2ResourceServerJwtConfiguration.class,\n \t\tOAuth2ResourceServerWebSecurityConfiguration.class })\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.boot.autoconfigure.security.oauth2.resource.servlet;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ResourceServerProperties;\nimport org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.security.oauth2.jwt.JwtDecoder;\nimport org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationToken;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for OAuth resource server support.\n *\n * @author Madhura Bhave\n * @since 2.1.0\n */\n@Configuration\n@AutoConfigureBefore(SecurityAutoConfiguration.class)\n@EnableConfigurationProperties(OAuth2ResourceServerProperties.class)\n@ConditionalOnClass({ JwtAuthenticationToken.class, JwtDecoder.class })\n@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n@Import({ OAuth2ResourceServerJwtConfiguration.class,\n\t\tOAuth2ResourceServerWebSecurityConfiguration.class })\npublic class OAuth2ResourceServerAutoConfiguration {\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.boot.autoconfigure.security.oauth2.resource.servlet;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ResourceServerProperties;\nimport org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationToken;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for OAuth resource server support.\n *\n * @author Madhura Bhave\n * @since 2.1.0\n */\n@Configuration\n@AutoConfigureBefore(SecurityAutoConfiguration.class)\n@EnableConfigurationProperties(OAuth2ResourceServerProperties.class)\n@ConditionalOnClass(JwtAuthenticationToken.class)\n@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n@Import({ OAuth2ResourceServerJwtConfiguration.class,\n\t\tOAuth2ResourceServerWebSecurityConfiguration.class })\npublic class OAuth2ResourceServerAutoConfiguration {\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
