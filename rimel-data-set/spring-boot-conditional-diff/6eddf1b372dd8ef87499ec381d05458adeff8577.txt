@@ -17,6 +17,7 @@
 package org.springframework.boot.autoconfigure.amqp;
 
 import org.springframework.amqp.rabbit.annotation.EnableRabbit;
+import org.springframework.amqp.rabbit.config.DirectRabbitListenerContainerFactory;
 import org.springframework.amqp.rabbit.config.RabbitListenerConfigUtils;
 import org.springframework.amqp.rabbit.config.SimpleRabbitListenerContainerFactory;
 import org.springframework.amqp.rabbit.connection.ConnectionFactory;
@@ -25,6 +26,7 @@ import org.springframework.amqp.support.converter.MessageConverter;
 import org.springframework.beans.factory.ObjectProvider;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
@@ -39,11 +41,11 @@ import org.springframework.context.annotation.Configuration;
 @ConditionalOnClass(EnableRabbit.class)
 class RabbitAnnotationDrivenConfiguration {
 
-	private final ObjectProvider<MessageConverter> messageConverter;
+	protected final ObjectProvider<MessageConverter> messageConverter;
 
-	private final ObjectProvider<MessageRecoverer> messageRecoverer;
+	protected final ObjectProvider<MessageRecoverer> messageRecoverer;
 
-	private final RabbitProperties properties;
+	protected final RabbitProperties properties;
 
 	RabbitAnnotationDrivenConfiguration(ObjectProvider<MessageConverter> messageConverter,
 			ObjectProvider<MessageRecoverer> messageRecoverer,
@@ -53,24 +55,68 @@ class RabbitAnnotationDrivenConfiguration {
 		this.properties = properties;
 	}
 
-	@Bean
-	@ConditionalOnMissingBean
-	public SimpleRabbitListenerContainerFactoryConfigurer rabbitListenerContainerFactoryConfigurer() {
-		SimpleRabbitListenerContainerFactoryConfigurer configurer = new SimpleRabbitListenerContainerFactoryConfigurer();
-		configurer.setMessageConverter(this.messageConverter.getIfUnique());
-		configurer.setMessageRecoverer(this.messageRecoverer.getIfUnique());
-		configurer.setRabbitProperties(this.properties);
-		return configurer;
+
+	@Configuration
+	@ConditionalOnProperty(prefix = , name = , havingValue = ,
+							matchIfMissing = true)
+	public static class SimpleContainerConfiguration extends RabbitAnnotationDrivenConfiguration {
+
+		SimpleContainerConfiguration(ObjectProvider<MessageConverter> messageConverter,
+				ObjectProvider<MessageRecoverer> messageRecoverer, RabbitProperties properties) {
+			super(messageConverter, messageRecoverer, properties);
+		}
+
+		@Bean
+		@ConditionalOnMissingBean
+		public SimpleRabbitListenerContainerFactoryConfigurer rabbitListenerContainerFactoryConfigurer() {
+			SimpleRabbitListenerContainerFactoryConfigurer configurer =
+					new SimpleRabbitListenerContainerFactoryConfigurer();
+			configurer.setMessageConverter(this.messageConverter.getIfUnique());
+			configurer.setMessageRecoverer(this.messageRecoverer.getIfUnique());
+			configurer.setRabbitProperties(this.properties);
+			return configurer;
+		}
+
+		@Bean
+		@ConditionalOnMissingBean(name = )
+		public SimpleRabbitListenerContainerFactory rabbitListenerContainerFactory(
+				SimpleRabbitListenerContainerFactoryConfigurer configurer,
+				ConnectionFactory connectionFactory) {
+			SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory();
+			configurer.configure(factory, connectionFactory);
+			return factory;
+		}
 	}
 
-	@Bean
-	@ConditionalOnMissingBean(name = )
-	public SimpleRabbitListenerContainerFactory rabbitListenerContainerFactory(
-			SimpleRabbitListenerContainerFactoryConfigurer configurer,
-			ConnectionFactory connectionFactory) {
-		SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory();
-		configurer.configure(factory, connectionFactory);
-		return factory;
+	@Configuration
+	@ConditionalOnProperty(prefix = , name = , havingValue = )
+	public static class DirectContainerConfiguration extends RabbitAnnotationDrivenConfiguration {
+
+		DirectContainerConfiguration(ObjectProvider<MessageConverter> messageConverter,
+				ObjectProvider<MessageRecoverer> messageRecoverer, RabbitProperties properties) {
+			super(messageConverter, messageRecoverer, properties);
+		}
+
+		@Bean
+		@ConditionalOnMissingBean
+		public DirectRabbitListenerContainerFactoryConfigurer rabbitListenerContainerFactoryConfigurer() {
+			DirectRabbitListenerContainerFactoryConfigurer configurer =
+					new DirectRabbitListenerContainerFactoryConfigurer();
+			configurer.setMessageConverter(this.messageConverter.getIfUnique());
+			configurer.setMessageRecoverer(this.messageRecoverer.getIfUnique());
+			configurer.setRabbitProperties(this.properties);
+			return configurer;
+		}
+
+		@Bean
+		@ConditionalOnMissingBean(name = )
+		public DirectRabbitListenerContainerFactory rabbitListenerContainerFactory(
+				DirectRabbitListenerContainerFactoryConfigurer configurer,
+				ConnectionFactory connectionFactory) {
+			DirectRabbitListenerContainerFactory factory = new DirectRabbitListenerContainerFactory();
+			configurer.configure(factory, connectionFactory);
+			return factory;
+		}
 	}
 
 	@EnableRabbit

