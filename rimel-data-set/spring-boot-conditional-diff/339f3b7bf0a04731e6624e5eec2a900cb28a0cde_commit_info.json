{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2012-2013 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.jersey;\n+\n+import javax.annotation.PostConstruct;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRegistration;\n+import javax.ws.rs.ApplicationPath;\n+\n+import org.glassfish.jersey.server.ResourceConfig;\n+import org.glassfish.jersey.server.spring.SpringComponentProvider;\n+import org.glassfish.jersey.servlet.ServletContainer;\n+import org.glassfish.jersey.servlet.ServletProperties;\n+import org.springframework.beans.factory.ListableBeanFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration;\n+import org.springframework.boot.context.embedded.ServletRegistrationBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.Ordered;\n+import org.springframework.core.annotation.AnnotationUtils;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.web.WebApplicationInitializer;\n+import org.springframework.web.filter.RequestContextFilter;\n+\n+/**\n+ * @author Dave Syer\n+ * \n+ */\n+@Configuration\n+@ConditionalOnClass({ SpringComponentProvider.class, ServletRegistration.class })\n+@ConditionalOnBean(ResourceConfig.class)\n+@ConditionalOnWebApplication\n+@Order(Ordered.HIGHEST_PRECEDENCE)\n+@AutoConfigureBefore(DispatcherServletAutoConfiguration.class)\n+public class JerseyAutoConfiguration implements WebApplicationInitializer {\n+\n+\t@Autowired\n+\tprivate ListableBeanFactory context;\n+\n+\t@Autowired\n+\tprivate ResourceConfig config;\n+\n+\tprivate String path;\n+\n+\t@PostConstruct\n+\tpublic void path() {\n+\t\tpath = findPath(AnnotationUtils.findAnnotation(config.getClass(),\n+\t\t\t\tApplicationPath.class));\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic RequestContextFilter requestContextFilter() {\n+\t\treturn new RequestContextFilter();\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean(name = "jerseyServletRegistration")\n+\tpublic ServletRegistrationBean jerseyServletRegistration() {\n+\t\tClass<? extends ResourceConfig> configType = config.getClass();\n+\t\tServletRegistrationBean registration = new ServletRegistrationBean(\n+\t\t\t\tnew ServletContainer(), path);\n+\t\tregistration.addInitParameter(ServletProperties.JAXRS_APPLICATION_CLASS,\n+\t\t\t\tconfigType.getName());\n+\t\tregistration.setName("jerseyServlet");\n+\t\treturn registration;\n+\t}\n+\n+\t@Override\n+\tpublic void onStartup(ServletContext servletContext) throws ServletException {\n+\t\t// We need to switch *off* the Jersey WebApplicationInitializer because it\n+\t\t// will try and register a ContextLoaderListener which we don\'t need\n+\t\tservletContext.setInitParameter("contextConfigLocation", "<NONE>");\n+\t}\n+\n+\tprivate static String findPath(ApplicationPath annotation) {\n+\t\t// Jersey doesn\'t like to be the default servlet, so map to /* as a fallback\n+\t\tif (annotation == null) {\n+\t\t\treturn "/*";\n+\t\t}\n+\t\tString path = annotation.value();\n+\t\treturn path.isEmpty() || path.equals("/") ? "/*" : path + "/*";\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jersey;\n\nimport javax.annotation.PostConstruct;\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRegistration;\nimport javax.ws.rs.ApplicationPath;\n\nimport org.glassfish.jersey.server.ResourceConfig;\nimport org.glassfish.jersey.server.spring.SpringComponentProvider;\nimport org.glassfish.jersey.servlet.ServletContainer;\nimport org.glassfish.jersey.servlet.ServletProperties;\nimport org.springframework.beans.factory.ListableBeanFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration;\nimport org.springframework.boot.context.embedded.ServletRegistrationBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.AnnotationUtils;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.web.WebApplicationInitializer;\nimport org.springframework.web.filter.RequestContextFilter;\n\n/**\n * @author Dave Syer\n * \n */\n@Configuration\n@ConditionalOnClass({ SpringComponentProvider.class, ServletRegistration.class })\n@ConditionalOnBean(ResourceConfig.class)\n@ConditionalOnWebApplication\n@Order(Ordered.HIGHEST_PRECEDENCE)\n@AutoConfigureBefore(DispatcherServletAutoConfiguration.class)\npublic class JerseyAutoConfiguration implements WebApplicationInitializer {\n\n\t@Autowired\n\tprivate ListableBeanFactory context;\n\n\t@Autowired\n\tprivate ResourceConfig config;\n\n\tprivate String path;\n\n\t@PostConstruct\n\tpublic void path() {\n\t\tpath = findPath(AnnotationUtils.findAnnotation(config.getClass(),\n\t\t\t\tApplicationPath.class));\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic RequestContextFilter requestContextFilter() {\n\t\treturn new RequestContextFilter();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "jerseyServletRegistration")\n\tpublic ServletRegistrationBean jerseyServletRegistration() {\n\t\tClass<? extends ResourceConfig> configType = config.getClass();\n\t\tServletRegistrationBean registration = new ServletRegistrationBean(\n\t\t\t\tnew ServletContainer(), path);\n\t\tregistration.addInitParameter(ServletProperties.JAXRS_APPLICATION_CLASS,\n\t\t\t\tconfigType.getName());\n\t\tregistration.setName("jerseyServlet");\n\t\treturn registration;\n\t}\n\n\t@Override\n\tpublic void onStartup(ServletContext servletContext) throws ServletException {\n\t\t// We need to switch *off* the Jersey WebApplicationInitializer because it\n\t\t// will try and register a ContextLoaderListener which we don\'t need\n\t\tservletContext.setInitParameter("contextConfigLocation", "<NONE>");\n\t}\n\n\tprivate static String findPath(ApplicationPath annotation) {\n\t\t// Jersey doesn\'t like to be the default servlet, so map to /* as a fallback\n\t\tif (annotation == null) {\n\t\t\treturn "/*";\n\t\t}\n\t\tString path = annotation.value();\n\t\treturn path.isEmpty() || path.equals("/") ? "/*" : path + "/*";\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
