{'_old_path': None, '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/ConditionalOnMissingFilterBeanTests.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2012-2018 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.web.servlet;\n+\n+import java.io.IOException;\n+import java.util.function.Consumer;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+\n+import org.junit.Test;\n+\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n+import org.springframework.boot.web.servlet.FilterRegistrationBean;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.util.StringUtils;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+/**\n+ * Tests for {@link ConditionalOnMissingFilterBean}.\n+ *\n+ * @author Phillip Webb\n+ */\n+public class ConditionalOnMissingFilterBeanTests {\n+\n+\tprivate final ApplicationContextRunner contextRunner = new ApplicationContextRunner();\n+\n+\t@Test\n+\tpublic void outcomeWhenValueIsOfMissingBeanReturnsMatch() {\n+\n+\t\tthis.contextRunner\n+\t\t\t\t.withUserConfiguration(WithoutTestFilterConfig.class,\n+\t\t\t\t\t\tOnMissingWithValueConfig.class)\n+\t\t\t\t.run((context) -> assertThat(context)\n+\t\t\t\t\t\t.satisfies(filterBeanRequirement("myOtherFilter", "testFilter")));\n+\t}\n+\n+\t@Test\n+\tpublic void outcomeWhenValueIsOfExistingBeanReturnsNoMatch() {\n+\t\tthis.contextRunner\n+\t\t\t\t.withUserConfiguration(WithTestFilterConfig.class,\n+\t\t\t\t\t\tOnMissingWithValueConfig.class)\n+\t\t\t\t.run((context) -> assertThat(context)\n+\t\t\t\t\t\t.satisfies(filterBeanRequirement("myTestFilter")));\n+\t}\n+\n+\t@Test\n+\tpublic void outcomeWhenValueIsOfMissingBeanRegistrationReturnsMatch() {\n+\t\tthis.contextRunner\n+\t\t\t\t.withUserConfiguration(WithoutTestFilterRegistrationConfig.class,\n+\t\t\t\t\t\tOnMissingWithValueConfig.class)\n+\t\t\t\t.run((context) -> assertThat(context)\n+\t\t\t\t\t\t.satisfies(filterBeanRequirement("myOtherFilter", "testFilter")));\n+\t}\n+\n+\t@Test\n+\tpublic void outcomeWhenValueIsOfExistingBeanRegistrationReturnsNoMatch() {\n+\t\tthis.contextRunner\n+\t\t\t\t.withUserConfiguration(WithTestFilterRegistrationConfig.class,\n+\t\t\t\t\t\tOnMissingWithValueConfig.class)\n+\t\t\t\t.run((context) -> assertThat(context)\n+\t\t\t\t\t\t.satisfies(filterBeanRequirement("myTestFilter")));\n+\t}\n+\n+\t@Test\n+\tpublic void outcomeWhenReturnTypeIsOfExistingBeanReturnsNoMatch() {\n+\t\tthis.contextRunner\n+\t\t\t\t.withUserConfiguration(WithTestFilterConfig.class,\n+\t\t\t\t\t\tOnMissingWithReturnTypeConfig.class)\n+\t\t\t\t.run((context) -> assertThat(context)\n+\t\t\t\t\t\t.satisfies(filterBeanRequirement("myTestFilter")));\n+\t}\n+\n+\t@Test\n+\tpublic void outcomeWhenReturnTypeIsOfExistingBeanRegistrationReturnsNoMatch() {\n+\t\tthis.contextRunner\n+\t\t\t\t.withUserConfiguration(WithTestFilterRegistrationConfig.class,\n+\t\t\t\t\t\tOnMissingWithReturnTypeConfig.class)\n+\t\t\t\t.run((context) -> assertThat(context)\n+\t\t\t\t\t\t.satisfies(filterBeanRequirement("myTestFilter")));\n+\t}\n+\n+\t@Test\n+\tpublic void outcomeWhenReturnRegistrationTypeIsOfExistingBeanReturnsNoMatch() {\n+\t\tthis.contextRunner\n+\t\t\t\t.withUserConfiguration(WithTestFilterConfig.class,\n+\t\t\t\t\t\tOnMissingWithReturnRegistrationTypeConfig.class)\n+\t\t\t\t.run((context) -> assertThat(context)\n+\t\t\t\t\t\t.satisfies(filterBeanRequirement("myTestFilter")));\n+\t}\n+\n+\t@Test\n+\tpublic void outcomeWhenReturnRegistrationTypeIsOfExistingBeanRegistrationReturnsNoMatch() {\n+\t\tthis.contextRunner\n+\t\t\t\t.withUserConfiguration(WithTestFilterRegistrationConfig.class,\n+\t\t\t\t\t\tOnMissingWithReturnRegistrationTypeConfig.class)\n+\t\t\t\t.run((context) -> assertThat(context)\n+\t\t\t\t\t\t.satisfies(filterBeanRequirement("myTestFilter")));\n+\t}\n+\n+\tprivate Consumer<ConfigurableApplicationContext> filterBeanRequirement(\n+\t\t\tString... names) {\n+\t\treturn (context) -> {\n+\t\t\tString[] filters = context.getBeanNamesForType(Filter.class);\n+\t\t\tString[] registrations = context\n+\t\t\t\t\t.getBeanNamesForType(FilterRegistrationBean.class);\n+\t\t\tassertThat(StringUtils.concatenateStringArrays(filters, registrations))\n+\t\t\t\t\t.containsOnly(names);\n+\t\t};\n+\t}\n+\n+\t@Configuration\n+\tstatic class WithTestFilterConfig {\n+\n+\t\t@Bean\n+\t\tpublic TestFilter myTestFilter() {\n+\t\t\treturn new TestFilter();\n+\t\t}\n+\n+\t}\n+\n+\t@Configuration\n+\tstatic class WithoutTestFilterConfig {\n+\n+\t\t@Bean\n+\t\tpublic OtherFilter myOtherFilter() {\n+\t\t\treturn new OtherFilter();\n+\t\t}\n+\n+\t}\n+\n+\t@Configuration\n+\tstatic class WithoutTestFilterRegistrationConfig {\n+\n+\t\t@Bean\n+\t\tpublic FilterRegistrationBean<OtherFilter> myOtherFilter() {\n+\t\t\treturn new FilterRegistrationBean<OtherFilter>(new OtherFilter());\n+\t\t}\n+\n+\t}\n+\n+\t@Configuration\n+\tstatic class WithTestFilterRegistrationConfig {\n+\n+\t\t@Bean\n+\t\tpublic FilterRegistrationBean<TestFilter> myTestFilter() {\n+\t\t\treturn new FilterRegistrationBean<TestFilter>(new TestFilter());\n+\t\t}\n+\n+\t}\n+\n+\t@Configuration\n+\tstatic class OnMissingWithValueConfig {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingFilterBean(TestFilter.class)\n+\t\tpublic TestFilter testFilter() {\n+\t\t\treturn new TestFilter();\n+\t\t}\n+\n+\t}\n+\n+\t@Configuration\n+\tstatic class OnMissingWithReturnTypeConfig {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingFilterBean\n+\t\tpublic TestFilter testFilter() {\n+\t\t\treturn new TestFilter();\n+\t\t}\n+\n+\t}\n+\n+\t@Configuration\n+\tstatic class OnMissingWithReturnRegistrationTypeConfig {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingFilterBean\n+\t\tpublic FilterRegistrationBean<TestFilter> testFilter() {\n+\t\t\treturn new FilterRegistrationBean<TestFilter>(new TestFilter());\n+\t\t}\n+\n+\t}\n+\n+\tstatic class TestFilter implements Filter {\n+\n+\t\t@Override\n+\t\tpublic void doFilter(ServletRequest request, ServletResponse response,\n+\t\t\t\tFilterChain chain) throws IOException, ServletException {\n+\t\t}\n+\n+\t}\n+\n+\tstatic class OtherFilter implements Filter {\n+\n+\t\t@Override\n+\t\tpublic void doFilter(ServletRequest request, ServletResponse response,\n+\t\t\t\tFilterChain chain) throws IOException, ServletException {\n+\t\t}\n+\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web.servlet;\n\nimport java.io.IOException;\nimport java.util.function.Consumer;\n\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\n\nimport org.junit.Test;\n\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.boot.web.servlet.FilterRegistrationBean;\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.util.StringUtils;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link ConditionalOnMissingFilterBean}.\n *\n * @author Phillip Webb\n */\npublic class ConditionalOnMissingFilterBeanTests {\n\n\tprivate final ApplicationContextRunner contextRunner = new ApplicationContextRunner();\n\n\t@Test\n\tpublic void outcomeWhenValueIsOfMissingBeanReturnsMatch() {\n\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(WithoutTestFilterConfig.class,\n\t\t\t\t\t\tOnMissingWithValueConfig.class)\n\t\t\t\t.run((context) -> assertThat(context)\n\t\t\t\t\t\t.satisfies(filterBeanRequirement("myOtherFilter", "testFilter")));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenValueIsOfExistingBeanReturnsNoMatch() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(WithTestFilterConfig.class,\n\t\t\t\t\t\tOnMissingWithValueConfig.class)\n\t\t\t\t.run((context) -> assertThat(context)\n\t\t\t\t\t\t.satisfies(filterBeanRequirement("myTestFilter")));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenValueIsOfMissingBeanRegistrationReturnsMatch() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(WithoutTestFilterRegistrationConfig.class,\n\t\t\t\t\t\tOnMissingWithValueConfig.class)\n\t\t\t\t.run((context) -> assertThat(context)\n\t\t\t\t\t\t.satisfies(filterBeanRequirement("myOtherFilter", "testFilter")));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenValueIsOfExistingBeanRegistrationReturnsNoMatch() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(WithTestFilterRegistrationConfig.class,\n\t\t\t\t\t\tOnMissingWithValueConfig.class)\n\t\t\t\t.run((context) -> assertThat(context)\n\t\t\t\t\t\t.satisfies(filterBeanRequirement("myTestFilter")));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenReturnTypeIsOfExistingBeanReturnsNoMatch() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(WithTestFilterConfig.class,\n\t\t\t\t\t\tOnMissingWithReturnTypeConfig.class)\n\t\t\t\t.run((context) -> assertThat(context)\n\t\t\t\t\t\t.satisfies(filterBeanRequirement("myTestFilter")));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenReturnTypeIsOfExistingBeanRegistrationReturnsNoMatch() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(WithTestFilterRegistrationConfig.class,\n\t\t\t\t\t\tOnMissingWithReturnTypeConfig.class)\n\t\t\t\t.run((context) -> assertThat(context)\n\t\t\t\t\t\t.satisfies(filterBeanRequirement("myTestFilter")));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenReturnRegistrationTypeIsOfExistingBeanReturnsNoMatch() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(WithTestFilterConfig.class,\n\t\t\t\t\t\tOnMissingWithReturnRegistrationTypeConfig.class)\n\t\t\t\t.run((context) -> assertThat(context)\n\t\t\t\t\t\t.satisfies(filterBeanRequirement("myTestFilter")));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenReturnRegistrationTypeIsOfExistingBeanRegistrationReturnsNoMatch() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(WithTestFilterRegistrationConfig.class,\n\t\t\t\t\t\tOnMissingWithReturnRegistrationTypeConfig.class)\n\t\t\t\t.run((context) -> assertThat(context)\n\t\t\t\t\t\t.satisfies(filterBeanRequirement("myTestFilter")));\n\t}\n\n\tprivate Consumer<ConfigurableApplicationContext> filterBeanRequirement(\n\t\t\tString... names) {\n\t\treturn (context) -> {\n\t\t\tString[] filters = context.getBeanNamesForType(Filter.class);\n\t\t\tString[] registrations = context\n\t\t\t\t\t.getBeanNamesForType(FilterRegistrationBean.class);\n\t\t\tassertThat(StringUtils.concatenateStringArrays(filters, registrations))\n\t\t\t\t\t.containsOnly(names);\n\t\t};\n\t}\n\n\t@Configuration\n\tstatic class WithTestFilterConfig {\n\n\t\t@Bean\n\t\tpublic TestFilter myTestFilter() {\n\t\t\treturn new TestFilter();\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class WithoutTestFilterConfig {\n\n\t\t@Bean\n\t\tpublic OtherFilter myOtherFilter() {\n\t\t\treturn new OtherFilter();\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class WithoutTestFilterRegistrationConfig {\n\n\t\t@Bean\n\t\tpublic FilterRegistrationBean<OtherFilter> myOtherFilter() {\n\t\t\treturn new FilterRegistrationBean<OtherFilter>(new OtherFilter());\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class WithTestFilterRegistrationConfig {\n\n\t\t@Bean\n\t\tpublic FilterRegistrationBean<TestFilter> myTestFilter() {\n\t\t\treturn new FilterRegistrationBean<TestFilter>(new TestFilter());\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class OnMissingWithValueConfig {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingFilterBean(TestFilter.class)\n\t\tpublic TestFilter testFilter() {\n\t\t\treturn new TestFilter();\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class OnMissingWithReturnTypeConfig {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingFilterBean\n\t\tpublic TestFilter testFilter() {\n\t\t\treturn new TestFilter();\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class OnMissingWithReturnRegistrationTypeConfig {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingFilterBean\n\t\tpublic FilterRegistrationBean<TestFilter> testFilter() {\n\t\t\treturn new FilterRegistrationBean<TestFilter>(new TestFilter());\n\t\t}\n\n\t}\n\n\tstatic class TestFilter implements Filter {\n\n\t\t@Override\n\t\tpublic void doFilter(ServletRequest request, ServletResponse response,\n\t\t\t\tFilterChain chain) throws IOException, ServletException {\n\t\t}\n\n\t}\n\n\tstatic class OtherFilter implements Filter {\n\n\t\t@Override\n\t\tpublic void doFilter(ServletRequest request, ServletResponse response,\n\t\t\t\tFilterChain chain) throws IOException, ServletException {\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
