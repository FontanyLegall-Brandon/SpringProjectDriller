{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/redis/RedisReactiveHealthIndicatorConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/redis/RedisReactiveHealthIndicatorAutoConfiguration.java'), 'change_type': <ModificationType.RENAME: 3>, 'diff': '@@ -21,32 +21,43 @@ import java.util.Map;\n import reactor.core.publisher.Flux;\n \n import org.springframework.boot.actuate.autoconfigure.health.CompositeReactiveHealthIndicatorConfiguration;\n+import org.springframework.boot.actuate.autoconfigure.health.ConditionalOnEnabledHealthIndicator;\n+import org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration;\n import org.springframework.boot.actuate.health.ReactiveHealthIndicator;\n import org.springframework.boot.actuate.redis.RedisReactiveHealthIndicator;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.data.redis.connection.ReactiveRedisConnectionFactory;\n \n /**\n- * Configuration for {@link RedisReactiveHealthIndicator}.\n+ * {@link EnableAutoConfiguration Auto-configuration} for\n+ * {@link RedisReactiveHealthIndicator}.\n  *\n  * @author Christian Dupuis\n  * @author Richard Santana\n  * @author Stephane Nicoll\n  * @author Mark Paluch\n+ * @since 2.1.0\n  */\n @Configuration\n @ConditionalOnClass({ ReactiveRedisConnectionFactory.class, Flux.class })\n @ConditionalOnBean(ReactiveRedisConnectionFactory.class)\n-class RedisReactiveHealthIndicatorConfiguration extends\n+@ConditionalOnEnabledHealthIndicator("redis")\n+@AutoConfigureBefore(HealthIndicatorAutoConfiguration.class)\n+@AutoConfigureAfter(RedisReactiveAutoConfiguration.class)\n+public class RedisReactiveHealthIndicatorAutoConfiguration extends\n \t\tCompositeReactiveHealthIndicatorConfiguration<RedisReactiveHealthIndicator, ReactiveRedisConnectionFactory> {\n \n \tprivate final Map<String, ReactiveRedisConnectionFactory> redisConnectionFactories;\n \n-\tRedisReactiveHealthIndicatorConfiguration(\n+\tRedisReactiveHealthIndicatorAutoConfiguration(\n \t\t\tMap<String, ReactiveRedisConnectionFactory> redisConnectionFactories) {\n \t\tthis.redisConnectionFactories = redisConnectionFactories;\n \t}\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.redis;\n\nimport java.util.Map;\n\nimport reactor.core.publisher.Flux;\n\nimport org.springframework.boot.actuate.autoconfigure.health.CompositeReactiveHealthIndicatorConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.health.ConditionalOnEnabledHealthIndicator;\nimport org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration;\nimport org.springframework.boot.actuate.health.ReactiveHealthIndicator;\nimport org.springframework.boot.actuate.redis.RedisReactiveHealthIndicator;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.ReactiveRedisConnectionFactory;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for\n * {@link RedisReactiveHealthIndicator}.\n *\n * @author Christian Dupuis\n * @author Richard Santana\n * @author Stephane Nicoll\n * @author Mark Paluch\n * @since 2.1.0\n */\n@Configuration\n@ConditionalOnClass({ ReactiveRedisConnectionFactory.class, Flux.class })\n@ConditionalOnBean(ReactiveRedisConnectionFactory.class)\n@ConditionalOnEnabledHealthIndicator("redis")\n@AutoConfigureBefore(HealthIndicatorAutoConfiguration.class)\n@AutoConfigureAfter(RedisReactiveAutoConfiguration.class)\npublic class RedisReactiveHealthIndicatorAutoConfiguration extends\n\t\tCompositeReactiveHealthIndicatorConfiguration<RedisReactiveHealthIndicator, ReactiveRedisConnectionFactory> {\n\n\tprivate final Map<String, ReactiveRedisConnectionFactory> redisConnectionFactories;\n\n\tRedisReactiveHealthIndicatorAutoConfiguration(\n\t\t\tMap<String, ReactiveRedisConnectionFactory> redisConnectionFactories) {\n\t\tthis.redisConnectionFactories = redisConnectionFactories;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "redisHealthIndicator")\n\tpublic ReactiveHealthIndicator redisHealthIndicator() {\n\t\treturn createHealthIndicator(this.redisConnectionFactories);\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.redis;\n\nimport java.util.Map;\n\nimport reactor.core.publisher.Flux;\n\nimport org.springframework.boot.actuate.autoconfigure.health.CompositeReactiveHealthIndicatorConfiguration;\nimport org.springframework.boot.actuate.health.ReactiveHealthIndicator;\nimport org.springframework.boot.actuate.redis.RedisReactiveHealthIndicator;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.ReactiveRedisConnectionFactory;\n\n/**\n * Configuration for {@link RedisReactiveHealthIndicator}.\n *\n * @author Christian Dupuis\n * @author Richard Santana\n * @author Stephane Nicoll\n * @author Mark Paluch\n */\n@Configuration\n@ConditionalOnClass({ ReactiveRedisConnectionFactory.class, Flux.class })\n@ConditionalOnBean(ReactiveRedisConnectionFactory.class)\nclass RedisReactiveHealthIndicatorConfiguration extends\n\t\tCompositeReactiveHealthIndicatorConfiguration<RedisReactiveHealthIndicator, ReactiveRedisConnectionFactory> {\n\n\tprivate final Map<String, ReactiveRedisConnectionFactory> redisConnectionFactories;\n\n\tRedisReactiveHealthIndicatorConfiguration(\n\t\t\tMap<String, ReactiveRedisConnectionFactory> redisConnectionFactories) {\n\t\tthis.redisConnectionFactories = redisConnectionFactories;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "redisHealthIndicator")\n\tpublic ReactiveHealthIndicator redisHealthIndicator() {\n\t\treturn createHealthIndicator(this.redisConnectionFactories);\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
