{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/JCacheCacheConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/JCacheCacheConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -27,9 +27,11 @@ import javax.cache.configuration.MutableConfiguration;\n import javax.cache.spi.CachingProvider;\n \n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\n import org.springframework.boot.autoconfigure.condition.ConditionOutcome;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\n import org.springframework.boot.autoconfigure.condition.SpringBootCondition;\n import org.springframework.boot.bind.RelaxedPropertyResolver;\n import org.springframework.cache.jcache.JCacheCacheManager;\n@@ -68,19 +70,13 @@ class JCacheCacheConfiguration {\n \tprivate List<JCacheManagerCustomizer> cacheManagerCustomizers;\n \n \t@Bean\n-\tpublic JCacheCacheManager cacheManager() throws IOException {\n-\t\tCacheManager cacheManager = createCacheManager();\n-\t\tList<String> cacheNames = this.cacheProperties.getCacheNames();\n-\t\tif (!CollectionUtils.isEmpty(cacheNames)) {\n-\t\t\tfor (String cacheName : cacheNames) {\n-\t\t\t\tcacheManager.createCache(cacheName, getDefaultCacheConfiguration());\n-\t\t\t}\n-\t\t}\n-\t\tcustomize(cacheManager);\n-\t\treturn new JCacheCacheManager(cacheManager);\n+\tpublic JCacheCacheManager cacheManager(CacheManager jCacheCacheManager) {\n+\t\treturn new JCacheCacheManager(jCacheCacheManager);\n \t}\n \n-\tprivate CacheManager createCacheManager() throws IOException {\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic CacheManager jCacheCacheManager() throws IOException {\n \t\tCachingProvider cachingProvider = getCachingProvider(this.cacheProperties\n \t\t\t\t.getJcache().getProvider());\n \t\tResource configLocation = this.cacheProperties.resolveConfigLocation();\n@@ -89,7 +85,15 @@ class JCacheCacheConfiguration {\n \t\t\t\t\tcachingProvider.getDefaultClassLoader(),\n \t\t\t\t\tcreateCacheManagerProperties(configLocation));\n \t\t}\n-\t\treturn cachingProvider.getCacheManager();\n+\t\tCacheManager jCacheCacheManager = cachingProvider.getCacheManager();\n+\t\tList<String> cacheNames = this.cacheProperties.getCacheNames();\n+\t\tif (!CollectionUtils.isEmpty(cacheNames)) {\n+\t\t\tfor (String cacheName : cacheNames) {\n+\t\t\t\tjCacheCacheManager.createCache(cacheName, getDefaultCacheConfiguration());\n+\t\t\t}\n+\t\t}\n+\t\tcustomize(jCacheCacheManager);\n+\t\treturn jCacheCacheManager;\n \t}\n \n \tprivate CachingProvider getCachingProvider(String cachingProviderFqn) {\n@@ -125,12 +129,32 @@ class JCacheCacheConfiguration {\n \t}\n \n \t/**\n-\t * Determines if JCache is available. This either kick in if a default\n+\t * Determine if JCache is available. This either kick in if a provider is available\n+\t * as defined per {@link JCacheProviderAvailableCondition} or if a {@link CacheManager}\n+\t * has already been defined.\n+\t */\n+\t@Order(Ordered.LOWEST_PRECEDENCE)\n+\tstatic class JCacheAvailableCondition extends AnyNestedCondition {\n+\n+\t\tpublic JCacheAvailableCondition() {\n+\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n+\t\t}\n+\n+\t\t@Conditional(JCacheProviderAvailableCondition.class)\n+\t\tstatic class JCacheProvider {}\n+\n+\t\t@ConditionalOnSingleCandidate(CacheManager.class)\n+\t\tstatic class CustomJCacheCacheManager {}\n+\n+\t}\n+\n+\t/**\n+\t * Determine if a JCache provider is available. This either kick in if a default\n \t * {@link CachingProvider} has been found or if the property referring to the provider\n \t * to use has been set.\n \t */\n \t@Order(Ordered.LOWEST_PRECEDENCE)\n-\tstatic class JCacheAvailableCondition extends SpringBootCondition {\n+\tstatic class JCacheProviderAvailableCondition extends SpringBootCondition {\n \n \t\t@Override\n \t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.cache;\n\nimport java.io.IOException;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Properties;\n\nimport javax.cache.CacheManager;\nimport javax.cache.Caching;\nimport javax.cache.configuration.MutableConfiguration;\nimport javax.cache.spi.CachingProvider;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.bind.RelaxedPropertyResolver;\nimport org.springframework.cache.jcache.JCacheCacheManager;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.AnnotationAwareOrderComparator;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.util.StringUtils;\n\n/**\n * Cache configuration for JSR-107 compliant providers.\n *\n * @author Stephane Nicoll\n * @since 1.3.0\n */\n@Configuration\n@ConditionalOnClass({ Caching.class, JCacheCacheManager.class })\n@ConditionalOnMissingBean(org.springframework.cache.CacheManager.class)\n@Conditional({ CacheCondition.class,\n\t\tJCacheCacheConfiguration.JCacheAvailableCondition.class })\nclass JCacheCacheConfiguration {\n\n\t@Autowired\n\tprivate CacheProperties cacheProperties;\n\n\t@Autowired(required = false)\n\tprivate javax.cache.configuration.Configuration<?, ?> defaultCacheConfiguration;\n\n\t@Autowired(required = false)\n\tprivate List<JCacheManagerCustomizer> cacheManagerCustomizers;\n\n\t@Bean\n\tpublic JCacheCacheManager cacheManager(CacheManager jCacheCacheManager) {\n\t\treturn new JCacheCacheManager(jCacheCacheManager);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic CacheManager jCacheCacheManager() throws IOException {\n\t\tCachingProvider cachingProvider = getCachingProvider(this.cacheProperties\n\t\t\t\t.getJcache().getProvider());\n\t\tResource configLocation = this.cacheProperties.resolveConfigLocation();\n\t\tif (configLocation != null) {\n\t\t\treturn cachingProvider.getCacheManager(configLocation.getURI(),\n\t\t\t\t\tcachingProvider.getDefaultClassLoader(),\n\t\t\t\t\tcreateCacheManagerProperties(configLocation));\n\t\t}\n\t\tCacheManager jCacheCacheManager = cachingProvider.getCacheManager();\n\t\tList<String> cacheNames = this.cacheProperties.getCacheNames();\n\t\tif (!CollectionUtils.isEmpty(cacheNames)) {\n\t\t\tfor (String cacheName : cacheNames) {\n\t\t\t\tjCacheCacheManager.createCache(cacheName, getDefaultCacheConfiguration());\n\t\t\t}\n\t\t}\n\t\tcustomize(jCacheCacheManager);\n\t\treturn jCacheCacheManager;\n\t}\n\n\tprivate CachingProvider getCachingProvider(String cachingProviderFqn) {\n\t\tif (StringUtils.hasText(cachingProviderFqn)) {\n\t\t\treturn Caching.getCachingProvider(cachingProviderFqn);\n\t\t}\n\t\treturn Caching.getCachingProvider();\n\t}\n\n\tprivate Properties createCacheManagerProperties(Resource configLocation)\n\t\t\tthrows IOException {\n\t\tProperties properties = new Properties();\n\t\t// Hazelcast does not use the URI as a mean to specify a custom config.\n\t\tproperties.setProperty("hazelcast.config.location", configLocation.getURI()\n\t\t\t\t.toString());\n\t\treturn properties;\n\t}\n\n\tprivate javax.cache.configuration.Configuration<?, ?> getDefaultCacheConfiguration() {\n\t\tif (this.defaultCacheConfiguration != null) {\n\t\t\treturn this.defaultCacheConfiguration;\n\t\t}\n\t\treturn new MutableConfiguration<Object, Object>();\n\t}\n\n\tprivate void customize(CacheManager cacheManager) {\n\t\tif (this.cacheManagerCustomizers != null) {\n\t\t\tAnnotationAwareOrderComparator.sort(this.cacheManagerCustomizers);\n\t\t\tfor (JCacheManagerCustomizer customizer : this.cacheManagerCustomizers) {\n\t\t\t\tcustomizer.customize(cacheManager);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Determine if JCache is available. This either kick in if a provider is available\n\t * as defined per {@link JCacheProviderAvailableCondition} or if a {@link CacheManager}\n\t * has already been defined.\n\t */\n\t@Order(Ordered.LOWEST_PRECEDENCE)\n\tstatic class JCacheAvailableCondition extends AnyNestedCondition {\n\n\t\tpublic JCacheAvailableCondition() {\n\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n\t\t}\n\n\t\t@Conditional(JCacheProviderAvailableCondition.class)\n\t\tstatic class JCacheProvider {}\n\n\t\t@ConditionalOnSingleCandidate(CacheManager.class)\n\t\tstatic class CustomJCacheCacheManager {}\n\n\t}\n\n\t/**\n\t * Determine if a JCache provider is available. This either kick in if a default\n\t * {@link CachingProvider} has been found or if the property referring to the provider\n\t * to use has been set.\n\t */\n\t@Order(Ordered.LOWEST_PRECEDENCE)\n\tstatic class JCacheProviderAvailableCondition extends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tRelaxedPropertyResolver resolver = new RelaxedPropertyResolver(\n\t\t\t\t\tcontext.getEnvironment(), "spring.cache.jcache.");\n\t\t\tif (resolver.containsProperty("provider")) {\n\t\t\t\treturn ConditionOutcome.match("JCache provider specified");\n\t\t\t}\n\t\t\tIterator<CachingProvider> providers = Caching.getCachingProviders()\n\t\t\t\t\t.iterator();\n\t\t\tif (!providers.hasNext()) {\n\t\t\t\treturn ConditionOutcome.noMatch("No JSR-107 compliant providers");\n\t\t\t}\n\t\t\tproviders.next();\n\t\t\tif (providers.hasNext()) {\n\t\t\t\treturn ConditionOutcome.noMatch("Multiple default JSR-107 compliant "\n\t\t\t\t\t\t+ "providers found");\n\n\t\t\t}\n\t\t\treturn ConditionOutcome.match("Default JSR-107 compliant provider found.");\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.cache;\n\nimport java.io.IOException;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Properties;\n\nimport javax.cache.CacheManager;\nimport javax.cache.Caching;\nimport javax.cache.configuration.MutableConfiguration;\nimport javax.cache.spi.CachingProvider;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.bind.RelaxedPropertyResolver;\nimport org.springframework.cache.jcache.JCacheCacheManager;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.AnnotationAwareOrderComparator;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.util.StringUtils;\n\n/**\n * Cache configuration for JSR-107 compliant providers.\n *\n * @author Stephane Nicoll\n * @since 1.3.0\n */\n@Configuration\n@ConditionalOnClass({ Caching.class, JCacheCacheManager.class })\n@ConditionalOnMissingBean(org.springframework.cache.CacheManager.class)\n@Conditional({ CacheCondition.class,\n\t\tJCacheCacheConfiguration.JCacheAvailableCondition.class })\nclass JCacheCacheConfiguration {\n\n\t@Autowired\n\tprivate CacheProperties cacheProperties;\n\n\t@Autowired(required = false)\n\tprivate javax.cache.configuration.Configuration<?, ?> defaultCacheConfiguration;\n\n\t@Autowired(required = false)\n\tprivate List<JCacheManagerCustomizer> cacheManagerCustomizers;\n\n\t@Bean\n\tpublic JCacheCacheManager cacheManager() throws IOException {\n\t\tCacheManager cacheManager = createCacheManager();\n\t\tList<String> cacheNames = this.cacheProperties.getCacheNames();\n\t\tif (!CollectionUtils.isEmpty(cacheNames)) {\n\t\t\tfor (String cacheName : cacheNames) {\n\t\t\t\tcacheManager.createCache(cacheName, getDefaultCacheConfiguration());\n\t\t\t}\n\t\t}\n\t\tcustomize(cacheManager);\n\t\treturn new JCacheCacheManager(cacheManager);\n\t}\n\n\tprivate CacheManager createCacheManager() throws IOException {\n\t\tCachingProvider cachingProvider = getCachingProvider(this.cacheProperties\n\t\t\t\t.getJcache().getProvider());\n\t\tResource configLocation = this.cacheProperties.resolveConfigLocation();\n\t\tif (configLocation != null) {\n\t\t\treturn cachingProvider.getCacheManager(configLocation.getURI(),\n\t\t\t\t\tcachingProvider.getDefaultClassLoader(),\n\t\t\t\t\tcreateCacheManagerProperties(configLocation));\n\t\t}\n\t\treturn cachingProvider.getCacheManager();\n\t}\n\n\tprivate CachingProvider getCachingProvider(String cachingProviderFqn) {\n\t\tif (StringUtils.hasText(cachingProviderFqn)) {\n\t\t\treturn Caching.getCachingProvider(cachingProviderFqn);\n\t\t}\n\t\treturn Caching.getCachingProvider();\n\t}\n\n\tprivate Properties createCacheManagerProperties(Resource configLocation)\n\t\t\tthrows IOException {\n\t\tProperties properties = new Properties();\n\t\t// Hazelcast does not use the URI as a mean to specify a custom config.\n\t\tproperties.setProperty("hazelcast.config.location", configLocation.getURI()\n\t\t\t\t.toString());\n\t\treturn properties;\n\t}\n\n\tprivate javax.cache.configuration.Configuration<?, ?> getDefaultCacheConfiguration() {\n\t\tif (this.defaultCacheConfiguration != null) {\n\t\t\treturn this.defaultCacheConfiguration;\n\t\t}\n\t\treturn new MutableConfiguration<Object, Object>();\n\t}\n\n\tprivate void customize(CacheManager cacheManager) {\n\t\tif (this.cacheManagerCustomizers != null) {\n\t\t\tAnnotationAwareOrderComparator.sort(this.cacheManagerCustomizers);\n\t\t\tfor (JCacheManagerCustomizer customizer : this.cacheManagerCustomizers) {\n\t\t\t\tcustomizer.customize(cacheManager);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Determines if JCache is available. This either kick in if a default\n\t * {@link CachingProvider} has been found or if the property referring to the provider\n\t * to use has been set.\n\t */\n\t@Order(Ordered.LOWEST_PRECEDENCE)\n\tstatic class JCacheAvailableCondition extends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tRelaxedPropertyResolver resolver = new RelaxedPropertyResolver(\n\t\t\t\t\tcontext.getEnvironment(), "spring.cache.jcache.");\n\t\t\tif (resolver.containsProperty("provider")) {\n\t\t\t\treturn ConditionOutcome.match("JCache provider specified");\n\t\t\t}\n\t\t\tIterator<CachingProvider> providers = Caching.getCachingProviders()\n\t\t\t\t\t.iterator();\n\t\t\tif (!providers.hasNext()) {\n\t\t\t\treturn ConditionOutcome.noMatch("No JSR-107 compliant providers");\n\t\t\t}\n\t\t\tproviders.next();\n\t\t\tif (providers.hasNext()) {\n\t\t\t\treturn ConditionOutcome.noMatch("Multiple default JSR-107 compliant "\n\t\t\t\t\t\t+ "providers found");\n\n\t\t\t}\n\t\t\treturn ConditionOutcome.match("Default JSR-107 compliant provider found.");\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
