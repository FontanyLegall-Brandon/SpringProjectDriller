@@ -0,0 +1,63 @@
+
+
+package org.springframework.boot.actuate.autoconfigure.metrics.export.statsd;
+
+import io.micrometer.core.instrument.Clock;
+import io.micrometer.statsd.StatsdConfig;
+import io.micrometer.statsd.StatsdMeterRegistry;
+
+import org.springframework.boot.actuate.autoconfigure.metrics.export.MetricsExporter;
+import org.springframework.boot.actuate.autoconfigure.metrics.export.StringToDurationConverter;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
+import org.springframework.boot.context.properties.EnableConfigurationProperties;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Import;
+
+
+@Configuration
+@ConditionalOnClass(StatsdMeterRegistry.class)
+@Import(StringToDurationConverter.class)
+@EnableConfigurationProperties(StatsdProperties.class)
+public class StatsdExportConfiguration {
+
+	@Bean
+	@ConditionalOnMissingBean(StatsdConfig.class)
+	public StatsdConfig statsdConfig(StatsdProperties statsdProperties) {
+		return new StatsdPropertiesConfigAdapter(statsdProperties);
+	}
+
+	@Bean
+	@ConditionalOnProperty(value = , matchIfMissing = true)
+	public MetricsExporter statsdExporter(StatsdConfig statsdConfig, Clock clock) {
+		return () -> new StatsdMeterRegistry(statsdConfig, clock);
+	}
+
+	@Bean
+	@ConditionalOnMissingBean
+	public Clock micrometerClock() {
+		return Clock.SYSTEM;
+	}
+
+}

