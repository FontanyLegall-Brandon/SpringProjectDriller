{'_old_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/JolokiaAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/JolokiaAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -39,6 +39,7 @@ import org.springframework.context.annotation.ConditionContext;\n import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.core.type.AnnotatedTypeMetadata;\n+import org.springframework.web.servlet.mvc.ServletWrappingController;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for embedding Jolokia, a JMX-HTTP\n@@ -61,7 +62,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;\n  */\n @Configuration\n @ConditionalOnWebApplication\n-@ConditionalOnClass({ AgentServlet.class })\n+@ConditionalOnClass({ AgentServlet.class, ServletWrappingController.class })\n @Conditional(JolokiaCondition.class)\n @AutoConfigureBefore(ManagementWebSecurityAutoConfiguration.class)\n @AutoConfigureAfter(EmbeddedServletContainerAutoConfiguration.class)\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport java.util.Properties;\n\nimport org.jolokia.http.AgentServlet;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuate.autoconfigure.JolokiaAutoConfiguration.JolokiaCondition;\nimport org.springframework.boot.actuate.endpoint.mvc.JolokiaMvcEndpoint;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration;\nimport org.springframework.boot.bind.RelaxedPropertyResolver;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.web.servlet.mvc.ServletWrappingController;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for embedding Jolokia, a JMX-HTTP\n * bridge giving an alternative to JSR-160 connectors.\n *\n * <p>\n * This configuration will get automatically enabled as soon as the Jolokia\n * {@link AgentServlet} is on the classpath. To disable it set\n * {@code endpoints.jolokia.enabled: false} or {@code endpoints.enabled: false}.\n *\n * <p>\n * Additional configuration parameters for Jolokia can be provided by specifying\n * {@code jolokia.config.*} properties. See the\n * <a href="http://jolokia.org">http://jolokia.org</a> web site for more information on\n * supported configuration parameters.\n *\n * @author Christian Dupuis\n * @author Dave Syer\n * @author Andy Wilkinson\n */\n@Configuration\n@ConditionalOnWebApplication\n@ConditionalOnClass({ AgentServlet.class, ServletWrappingController.class })\n@Conditional(JolokiaCondition.class)\n@AutoConfigureBefore(ManagementWebSecurityAutoConfiguration.class)\n@AutoConfigureAfter(EmbeddedServletContainerAutoConfiguration.class)\n@EnableConfigurationProperties(JolokiaProperties.class)\npublic class JolokiaAutoConfiguration {\n\n\t@Autowired\n\tJolokiaProperties properties = new JolokiaProperties();\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic JolokiaMvcEndpoint jolokiaEndpoint() {\n\t\tJolokiaMvcEndpoint endpoint = new JolokiaMvcEndpoint();\n\t\tendpoint.setInitParameters(getInitParameters());\n\t\treturn endpoint;\n\t}\n\n\tprivate Properties getInitParameters() {\n\t\tProperties initParameters = new Properties();\n\t\tinitParameters.putAll(this.properties.getConfig());\n\t\treturn initParameters;\n\t}\n\n\t/**\n\t * Condition to check that the Jolokia endpoint is enabled.\n\t */\n\tstatic class JolokiaCondition extends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tboolean endpointsEnabled = isEnabled(context, "endpoints.", true);\n\t\t\tboolean enabled = isEnabled(context, "endpoints.jolokia.", endpointsEnabled);\n\t\t\treturn new ConditionOutcome(enabled, "Jolokia enabled");\n\t\t}\n\n\t\tprivate boolean isEnabled(ConditionContext context, String prefix,\n\t\t\t\tboolean defaultValue) {\n\t\t\tRelaxedPropertyResolver resolver = new RelaxedPropertyResolver(\n\t\t\t\t\tcontext.getEnvironment(), prefix);\n\t\t\treturn resolver.getProperty("enabled", Boolean.class, defaultValue);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport java.util.Properties;\n\nimport org.jolokia.http.AgentServlet;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuate.autoconfigure.JolokiaAutoConfiguration.JolokiaCondition;\nimport org.springframework.boot.actuate.endpoint.mvc.JolokiaMvcEndpoint;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration;\nimport org.springframework.boot.bind.RelaxedPropertyResolver;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for embedding Jolokia, a JMX-HTTP\n * bridge giving an alternative to JSR-160 connectors.\n *\n * <p>\n * This configuration will get automatically enabled as soon as the Jolokia\n * {@link AgentServlet} is on the classpath. To disable it set\n * {@code endpoints.jolokia.enabled: false} or {@code endpoints.enabled: false}.\n *\n * <p>\n * Additional configuration parameters for Jolokia can be provided by specifying\n * {@code jolokia.config.*} properties. See the\n * <a href="http://jolokia.org">http://jolokia.org</a> web site for more information on\n * supported configuration parameters.\n *\n * @author Christian Dupuis\n * @author Dave Syer\n * @author Andy Wilkinson\n */\n@Configuration\n@ConditionalOnWebApplication\n@ConditionalOnClass({ AgentServlet.class })\n@Conditional(JolokiaCondition.class)\n@AutoConfigureBefore(ManagementWebSecurityAutoConfiguration.class)\n@AutoConfigureAfter(EmbeddedServletContainerAutoConfiguration.class)\n@EnableConfigurationProperties(JolokiaProperties.class)\npublic class JolokiaAutoConfiguration {\n\n\t@Autowired\n\tJolokiaProperties properties = new JolokiaProperties();\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic JolokiaMvcEndpoint jolokiaEndpoint() {\n\t\tJolokiaMvcEndpoint endpoint = new JolokiaMvcEndpoint();\n\t\tendpoint.setInitParameters(getInitParameters());\n\t\treturn endpoint;\n\t}\n\n\tprivate Properties getInitParameters() {\n\t\tProperties initParameters = new Properties();\n\t\tinitParameters.putAll(this.properties.getConfig());\n\t\treturn initParameters;\n\t}\n\n\t/**\n\t * Condition to check that the Jolokia endpoint is enabled.\n\t */\n\tstatic class JolokiaCondition extends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tboolean endpointsEnabled = isEnabled(context, "endpoints.", true);\n\t\t\tboolean enabled = isEnabled(context, "endpoints.jolokia.", endpointsEnabled);\n\t\t\treturn new ConditionOutcome(enabled, "Jolokia enabled");\n\t\t}\n\n\t\tprivate boolean isEnabled(ConditionContext context, String prefix,\n\t\t\t\tboolean defaultValue) {\n\t\t\tRelaxedPropertyResolver resolver = new RelaxedPropertyResolver(\n\t\t\t\t\tcontext.getEnvironment(), prefix);\n\t\t\treturn resolver.getProperty("enabled", Boolean.class, defaultValue);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
