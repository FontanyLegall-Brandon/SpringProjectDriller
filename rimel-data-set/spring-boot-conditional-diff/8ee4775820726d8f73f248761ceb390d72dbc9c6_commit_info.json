{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityDataConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityDataConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -20,7 +20,6 @@ import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.data.repository.query.spi.EvaluationContextExtensionSupport;\n import org.springframework.security.data.repository.query.SecurityEvaluationContextExtension;\n \n /**\n@@ -30,8 +29,7 @@ import org.springframework.security.data.repository.query.SecurityEvaluationCont\n  * @since 1.3\n  */\n @Configuration\n-@ConditionalOnClass({ SecurityEvaluationContextExtension.class,\n-\t\tEvaluationContextExtensionSupport.class })\n+@ConditionalOnClass(SecurityEvaluationContextExtension.class)\n public class SecurityDataConfiguration {\n \n \t@Bean\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.data.repository.query.SecurityEvaluationContextExtension;\n\n/**\n * Automatically adds Spring Security\'s integration with Spring Data.\n *\n * @author Rob Winch\n * @since 1.3\n */\n@Configuration\n@ConditionalOnClass(SecurityEvaluationContextExtension.class)\npublic class SecurityDataConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic SecurityEvaluationContextExtension securityEvaluationContextExtension() {\n\t\treturn new SecurityEvaluationContextExtension();\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.repository.query.spi.EvaluationContextExtensionSupport;\nimport org.springframework.security.data.repository.query.SecurityEvaluationContextExtension;\n\n/**\n * Automatically adds Spring Security\'s integration with Spring Data.\n *\n * @author Rob Winch\n * @since 1.3\n */\n@Configuration\n@ConditionalOnClass({ SecurityEvaluationContextExtension.class,\n\t\tEvaluationContextExtensionSupport.class })\npublic class SecurityDataConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic SecurityEvaluationContextExtension securityEvaluationContextExtension() {\n\t\treturn new SecurityEvaluationContextExtension();\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
