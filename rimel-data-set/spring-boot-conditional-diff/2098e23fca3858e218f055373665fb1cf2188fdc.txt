@@ -1,304 +0,0 @@
-
-
-package org.springframework.bootstrap.context.properties;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
-import javax.annotation.PostConstruct;
-
-import org.junit.Test;
-import org.springframework.beans.factory.BeanCreationException;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.bootstrap.TestUtils;
-import org.springframework.bootstrap.context.condition.AssertMissingBean;
-import org.springframework.bootstrap.context.condition.ConditionalOnMissingBean;
-import org.springframework.context.annotation.AnnotationConfigApplicationContext;
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
-import org.springframework.context.annotation.ImportResource;
-import org.springframework.stereotype.Component;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-
-
-public class EnableConfigurationPropertiesTests {
-
-	private AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();
-
-	@Test
-	public void testBasicPropertiesBinding() {
-		this.context.register(TestConfiguration.class);
-		TestUtils.addEnviroment(this.context, );
-		this.context.refresh();
-		assertEquals(1, this.context.getBeanNamesForType(TestProperties.class).length);
-		assertEquals(, this.context.getBean(TestProperties.class).getName());
-	}
-
-	@Test
-	public void testArrayPropertiesBinding() {
-		this.context.register(TestConfiguration.class);
-		TestUtils.addEnviroment(this.context, , );
-		this.context.refresh();
-		assertEquals(1, this.context.getBeanNamesForType(TestProperties.class).length);
-		assertEquals(3, this.context.getBean(TestProperties.class).getArray().length);
-	}
-
-	@Test
-	public void testCollectionPropertiesBindingFromYamlArray() {
-		this.context.register(TestConfiguration.class);
-		TestUtils.addEnviroment(this.context, , , );
-		this.context.refresh();
-		assertEquals(2, this.context.getBean(TestProperties.class).getList().size());
-	}
-
-	@Test
-	public void testPropertiesBindingWithoutAnnotation() {
-		this.context.register(MoreConfiguration.class);
-		TestUtils.addEnviroment(this.context, );
-		this.context.refresh();
-		assertEquals(1, this.context.getBeanNamesForType(MoreProperties.class).length);
-		assertEquals(, this.context.getBean(MoreProperties.class).getName());
-	}
-
-	@Test
-	public void testPropertiesBindingWithDefaultsInXml() {
-		this.context.register(TestConfiguration.class, DefaultXmlConfiguration.class);
-		this.context.refresh();
-		String[] beanNames = this.context.getBeanNamesForType(TestProperties.class);
-		assertEquals( + Arrays.asList(beanNames), 1, beanNames.length);
-		assertEquals(, this.context.getBean(TestProperties.class).getName());
-	}
-
-	@Test(expected = BeanCreationException.class)
-	public void testPropertiesBindingWithDefaultsInBeanMethodReverseOrder() {
-		this.context.register(TestBeanConfiguration.class, DefaultConfiguration.class);
-		this.context.refresh();
-		String[] beanNames = this.context.getBeanNamesForType(TestProperties.class);
-		assertEquals( + Arrays.asList(beanNames), 1, beanNames.length);
-		assertEquals(, this.context.getBean(TestProperties.class).getName());
-	}
-
-	@Test
-	public void testPropertiesBindingWithDefaultsInBeanMethod() {
-		this.context.register(DefaultConfiguration.class, TestBeanConfiguration.class);
-		this.context.refresh();
-		String[] beanNames = this.context.getBeanNamesForType(TestProperties.class);
-		assertEquals( + Arrays.asList(beanNames), 1, beanNames.length);
-		assertEquals(, this.context.getBean(TestProperties.class).getName());
-	}
-
-	
-	
-	
-	@Test(expected = BeanCreationException.class)
-	public void testPropertiesBindingWithDefaults() {
-		this.context.register(TestConfiguration.class, DefaultConfiguration.class);
-		this.context.refresh();
-		String[] beanNames = this.context.getBeanNamesForType(TestProperties.class);
-		assertEquals( + Arrays.asList(beanNames), 1, beanNames.length);
-		assertEquals(, this.context.getBean(TestProperties.class).getName());
-	}
-
-	@Test
-	public void testBindingDirectlyToFile() {
-		this.context.register(ResourceBindingProperties.class, TestConfiguration.class);
-		this.context.refresh();
-		assertEquals(1,
-				this.context.getBeanNamesForType(ResourceBindingProperties.class).length);
-		assertEquals(, this.context.getBean(ResourceBindingProperties.class)
-				.getName());
-	}
-
-	@Test
-	public void testBindingDirectlyToFileResolvedFromEnvironment() {
-		TestUtils.addEnviroment(this.context, );
-		this.context.register(ResourceBindingProperties.class, TestConfiguration.class);
-		this.context.refresh();
-		assertEquals(1,
-				this.context.getBeanNamesForType(ResourceBindingProperties.class).length);
-		assertEquals(, this.context.getBean(ResourceBindingProperties.class)
-				.getName());
-	}
-
-	@Test
-	public void testBindingDirectlyToFileWithDefaultsWhenProfileNotFound() {
-		this.context.register(ResourceBindingProperties.class, TestConfiguration.class);
-		this.context.getEnvironment().addActiveProfile();
-		this.context.refresh();
-		assertEquals(1,
-				this.context.getBeanNamesForType(ResourceBindingProperties.class).length);
-		assertEquals(, this.context.getBean(ResourceBindingProperties.class)
-				.getName());
-	}
-
-	@Test
-	public void testBindingDirectlyToFileWithExplicitSpringProfile() {
-		this.context.register(ResourceBindingProperties.class, TestConfiguration.class);
-		this.context.getEnvironment().addActiveProfile();
-		this.context.refresh();
-		assertEquals(1,
-				this.context.getBeanNamesForType(ResourceBindingProperties.class).length);
-		assertEquals(, this.context.getBean(ResourceBindingProperties.class)
-				.getName());
-	}
-
-	@Test
-	public void testBindingWithTwoBeans() {
-		this.context.register(MoreConfiguration.class, TestConfiguration.class);
-		this.context.refresh();
-		assertEquals(1, this.context.getBeanNamesForType(TestProperties.class).length);
-		assertEquals(1, this.context.getBeanNamesForType(MoreProperties.class).length);
-	}
-
-	@Test
-	public void testBindingWithParentContext() {
-		AnnotationConfigApplicationContext parent = new AnnotationConfigApplicationContext();
-		parent.register(TestConfiguration.class);
-		parent.refresh();
-		TestUtils.addEnviroment(this.context, );
-		this.context.setParent(parent);
-		this.context.register(TestConfiguration.class, TestConsumer.class);
-		this.context.refresh();
-		assertEquals(1, this.context.getBeanNamesForType(TestProperties.class).length);
-		assertEquals(1, parent.getBeanNamesForType(TestProperties.class).length);
-		assertEquals(, this.context.getBean(TestConsumer.class).getName());
-	}
-
-	@Test
-	public void testBindingOnlyParentContext() {
-		AnnotationConfigApplicationContext parent = new AnnotationConfigApplicationContext();
-		TestUtils.addEnviroment(parent, );
-		parent.register(TestConfiguration.class);
-		parent.refresh();
-		this.context.setParent(parent);
-		this.context.register(TestConsumer.class);
-		this.context.refresh();
-		assertEquals(0, this.context.getBeanNamesForType(TestProperties.class).length);
-		assertEquals(1, parent.getBeanNamesForType(TestProperties.class).length);
-		assertEquals(, this.context.getBean(TestConsumer.class).getName());
-	}
-
-	@Configuration
-	@EnableConfigurationProperties(TestProperties.class)
-	protected static class TestConfiguration {
-	}
-
-	@Configuration
-	@EnableConfigurationProperties
-	protected static class TestBeanConfiguration {
-		@ConditionalOnMissingBean(TestProperties.class)
-		@Bean(name = )
-		public TestProperties testProperties() {
-			return new TestProperties();
-		}
-	}
-
-	@Configuration
-	protected static class DefaultConfiguration {
-		@Bean
-		@AssertMissingBean(TestProperties.class)
-		public TestProperties testProperties() {
-			TestProperties test = new TestProperties();
-			test.setName();
-			return test;
-		}
-	}
-
-	@Configuration
-	@ImportResource()
-	protected static class DefaultXmlConfiguration {
-	}
-
-	@Component
-	protected static class TestConsumer {
-		@Autowired
-		private TestProperties properties;
-
-		@PostConstruct
-		public void init() {
-			assertNotNull(this.properties);
-		}
-
-		public String getName() {
-			return this.properties.getName();
-		}
-	}
-
-	@Configuration
-	@EnableConfigurationProperties(MoreProperties.class)
-	protected static class MoreConfiguration {
-	}
-
-	@ConfigurationProperties
-	protected static class TestProperties {
-		private String name;
-		private int[] array;
-		private List<Integer> list = new ArrayList<Integer>();
-
-		public String getName() {
-			return this.name;
-		}
-
-		public void setName(String name) {
-			this.name = name;
-		}
-
-		public void setArray(int... values) {
-			this.array = values;
-		}
-
-		public int[] getArray() {
-			return this.array;
-		}
-
-		public List<Integer> getList() {
-			return this.list;
-		}
-	}
-
-	protected static class MoreProperties {
-		private String name;
-
-		public String getName() {
-			return this.name;
-		}
-
-		public void setName(String name) {
-			this.name = name;
-		}
-	}
-
-	@ConfigurationProperties(path = )
-	protected static class ResourceBindingProperties {
-		private String name;
-
-		public String getName() {
-			return this.name;
-		}
-
-		public void setName(String name) {
-			this.name = name;
-		}
-	}
-}

