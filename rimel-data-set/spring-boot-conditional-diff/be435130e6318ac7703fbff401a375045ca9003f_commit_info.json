{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraDataAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraDataAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -28,6 +28,7 @@ import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration;\n import org.springframework.boot.autoconfigure.cassandra.CassandraProperties;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.domain.EntityScanPackages;\n@@ -59,6 +60,7 @@ import org.springframework.data.cassandra.core.mapping.SimpleUserTypeResolver;\n  */\n @Configuration\n @ConditionalOnClass({ Cluster.class, CassandraAdminOperations.class })\n+@ConditionalOnBean(Cluster.class)\n @EnableConfigurationProperties(CassandraProperties.class)\n @AutoConfigureAfter(CassandraAutoConfiguration.class)\n public class CassandraDataAutoConfiguration {\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.cassandra;\n\nimport java.util.Collections;\nimport java.util.List;\n\nimport com.datastax.driver.core.Cluster;\nimport com.datastax.driver.core.Session;\n\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.boot.autoconfigure.AutoConfigurationPackages;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration;\nimport org.springframework.boot.autoconfigure.cassandra.CassandraProperties;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.domain.EntityScanPackages;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.context.properties.PropertyMapper;\nimport org.springframework.boot.context.properties.bind.Binder;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\nimport org.springframework.data.cassandra.config.CassandraEntityClassScanner;\nimport org.springframework.data.cassandra.config.CassandraSessionFactoryBean;\nimport org.springframework.data.cassandra.config.SchemaAction;\nimport org.springframework.data.cassandra.core.CassandraAdminOperations;\nimport org.springframework.data.cassandra.core.CassandraTemplate;\nimport org.springframework.data.cassandra.core.convert.CassandraConverter;\nimport org.springframework.data.cassandra.core.convert.CassandraCustomConversions;\nimport org.springframework.data.cassandra.core.convert.MappingCassandraConverter;\nimport org.springframework.data.cassandra.core.mapping.CassandraMappingContext;\nimport org.springframework.data.cassandra.core.mapping.SimpleUserTypeResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s Cassandra support.\n *\n * @author Julien Dubois\n * @author Eddú Meléndez\n * @author Mark Paluch\n * @author Madhura Bhave\n * @since 1.3.0\n */\n@Configuration\n@ConditionalOnClass({ Cluster.class, CassandraAdminOperations.class })\n@ConditionalOnBean(Cluster.class)\n@EnableConfigurationProperties(CassandraProperties.class)\n@AutoConfigureAfter(CassandraAutoConfiguration.class)\npublic class CassandraDataAutoConfiguration {\n\n\tprivate final BeanFactory beanFactory;\n\n\tprivate final CassandraProperties properties;\n\n\tprivate final Cluster cluster;\n\n\tprivate final Environment environment;\n\n\tpublic CassandraDataAutoConfiguration(BeanFactory beanFactory,\n\t\t\tCassandraProperties properties, Cluster cluster, Environment environment) {\n\t\tthis.beanFactory = beanFactory;\n\t\tthis.properties = properties;\n\t\tthis.cluster = cluster;\n\t\tthis.environment = environment;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic CassandraMappingContext cassandraMapping(\n\t\t\tCassandraCustomConversions conversions) throws ClassNotFoundException {\n\t\tCassandraMappingContext context = new CassandraMappingContext();\n\t\tList<String> packages = EntityScanPackages.get(this.beanFactory)\n\t\t\t\t.getPackageNames();\n\t\tif (packages.isEmpty() && AutoConfigurationPackages.has(this.beanFactory)) {\n\t\t\tpackages = AutoConfigurationPackages.get(this.beanFactory);\n\t\t}\n\t\tif (!packages.isEmpty()) {\n\t\t\tcontext.setInitialEntitySet(CassandraEntityClassScanner.scan(packages));\n\t\t}\n\t\tPropertyMapper.get().from(this.properties::getKeyspaceName).whenHasText()\n\t\t\t\t.as(this::createSimpleUserTypeResolver).to(context::setUserTypeResolver);\n\t\tcontext.setCustomConversions(conversions);\n\t\treturn context;\n\t}\n\n\tprivate SimpleUserTypeResolver createSimpleUserTypeResolver(String keyspaceName) {\n\t\treturn new SimpleUserTypeResolver(this.cluster, keyspaceName);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic CassandraConverter cassandraConverter(CassandraMappingContext mapping,\n\t\t\tCassandraCustomConversions conversions) {\n\t\tMappingCassandraConverter converter = new MappingCassandraConverter(mapping);\n\t\tconverter.setCustomConversions(conversions);\n\t\treturn converter;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(Session.class)\n\tpublic CassandraSessionFactoryBean cassandraSession(CassandraConverter converter)\n\t\t\tthrows Exception {\n\t\tCassandraSessionFactoryBean session = new CassandraSessionFactoryBean();\n\t\tsession.setCluster(this.cluster);\n\t\tsession.setConverter(converter);\n\t\tsession.setKeyspaceName(this.properties.getKeyspaceName());\n\t\tBinder binder = Binder.get(this.environment);\n\t\tbinder.bind("spring.data.cassandra.schema-action", SchemaAction.class)\n\t\t\t\t.ifBound(session::setSchemaAction);\n\t\treturn session;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic CassandraTemplate cassandraTemplate(Session session,\n\t\t\tCassandraConverter converter) throws Exception {\n\t\treturn new CassandraTemplate(session, converter);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic CassandraCustomConversions cassandraCustomConversions() {\n\t\treturn new CassandraCustomConversions(Collections.emptyList());\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.cassandra;\n\nimport java.util.Collections;\nimport java.util.List;\n\nimport com.datastax.driver.core.Cluster;\nimport com.datastax.driver.core.Session;\n\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.boot.autoconfigure.AutoConfigurationPackages;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration;\nimport org.springframework.boot.autoconfigure.cassandra.CassandraProperties;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.domain.EntityScanPackages;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.context.properties.PropertyMapper;\nimport org.springframework.boot.context.properties.bind.Binder;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\nimport org.springframework.data.cassandra.config.CassandraEntityClassScanner;\nimport org.springframework.data.cassandra.config.CassandraSessionFactoryBean;\nimport org.springframework.data.cassandra.config.SchemaAction;\nimport org.springframework.data.cassandra.core.CassandraAdminOperations;\nimport org.springframework.data.cassandra.core.CassandraTemplate;\nimport org.springframework.data.cassandra.core.convert.CassandraConverter;\nimport org.springframework.data.cassandra.core.convert.CassandraCustomConversions;\nimport org.springframework.data.cassandra.core.convert.MappingCassandraConverter;\nimport org.springframework.data.cassandra.core.mapping.CassandraMappingContext;\nimport org.springframework.data.cassandra.core.mapping.SimpleUserTypeResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s Cassandra support.\n *\n * @author Julien Dubois\n * @author Eddú Meléndez\n * @author Mark Paluch\n * @author Madhura Bhave\n * @since 1.3.0\n */\n@Configuration\n@ConditionalOnClass({ Cluster.class, CassandraAdminOperations.class })\n@EnableConfigurationProperties(CassandraProperties.class)\n@AutoConfigureAfter(CassandraAutoConfiguration.class)\npublic class CassandraDataAutoConfiguration {\n\n\tprivate final BeanFactory beanFactory;\n\n\tprivate final CassandraProperties properties;\n\n\tprivate final Cluster cluster;\n\n\tprivate final Environment environment;\n\n\tpublic CassandraDataAutoConfiguration(BeanFactory beanFactory,\n\t\t\tCassandraProperties properties, Cluster cluster, Environment environment) {\n\t\tthis.beanFactory = beanFactory;\n\t\tthis.properties = properties;\n\t\tthis.cluster = cluster;\n\t\tthis.environment = environment;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic CassandraMappingContext cassandraMapping(\n\t\t\tCassandraCustomConversions conversions) throws ClassNotFoundException {\n\t\tCassandraMappingContext context = new CassandraMappingContext();\n\t\tList<String> packages = EntityScanPackages.get(this.beanFactory)\n\t\t\t\t.getPackageNames();\n\t\tif (packages.isEmpty() && AutoConfigurationPackages.has(this.beanFactory)) {\n\t\t\tpackages = AutoConfigurationPackages.get(this.beanFactory);\n\t\t}\n\t\tif (!packages.isEmpty()) {\n\t\t\tcontext.setInitialEntitySet(CassandraEntityClassScanner.scan(packages));\n\t\t}\n\t\tPropertyMapper.get().from(this.properties::getKeyspaceName).whenHasText()\n\t\t\t\t.as(this::createSimpleUserTypeResolver).to(context::setUserTypeResolver);\n\t\tcontext.setCustomConversions(conversions);\n\t\treturn context;\n\t}\n\n\tprivate SimpleUserTypeResolver createSimpleUserTypeResolver(String keyspaceName) {\n\t\treturn new SimpleUserTypeResolver(this.cluster, keyspaceName);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic CassandraConverter cassandraConverter(CassandraMappingContext mapping,\n\t\t\tCassandraCustomConversions conversions) {\n\t\tMappingCassandraConverter converter = new MappingCassandraConverter(mapping);\n\t\tconverter.setCustomConversions(conversions);\n\t\treturn converter;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(Session.class)\n\tpublic CassandraSessionFactoryBean cassandraSession(CassandraConverter converter)\n\t\t\tthrows Exception {\n\t\tCassandraSessionFactoryBean session = new CassandraSessionFactoryBean();\n\t\tsession.setCluster(this.cluster);\n\t\tsession.setConverter(converter);\n\t\tsession.setKeyspaceName(this.properties.getKeyspaceName());\n\t\tBinder binder = Binder.get(this.environment);\n\t\tbinder.bind("spring.data.cassandra.schema-action", SchemaAction.class)\n\t\t\t\t.ifBound(session::setSchemaAction);\n\t\treturn session;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic CassandraTemplate cassandraTemplate(Session session,\n\t\t\tCassandraConverter converter) throws Exception {\n\t\treturn new CassandraTemplate(session, converter);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic CassandraCustomConversions cassandraCustomConversions() {\n\t\treturn new CassandraCustomConversions(Collections.emptyList());\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
