{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hazelcast/HazelcastAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hazelcast/HazelcastAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -49,7 +49,7 @@ import com.hazelcast.core.HazelcastInstance;\n public class HazelcastAutoConfiguration {\n \n \t@Configuration\n-\t@ConditionalOnMissingBean({ HazelcastInstance.class, Config.class })\n+\t@ConditionalOnMissingBean(Config.class)\n \t@Conditional(ConfigAvailableCondition.class)\n \tstatic class HazelcastConfigFileConfiguration {\n \n@@ -57,7 +57,6 @@ public class HazelcastAutoConfiguration {\n \t\tprivate HazelcastProperties hazelcastProperties;\n \n \t\t@Bean\n-\t\t@ConditionalOnMissingBean\n \t\tpublic HazelcastInstance hazelcastInstance() throws IOException {\n \t\t\tResource config = this.hazelcastProperties.resolveConfigLocation();\n \t\t\tif (config != null) {\n@@ -69,7 +68,6 @@ public class HazelcastAutoConfiguration {\n \t}\n \n \t@Configuration\n-\t@ConditionalOnMissingBean(HazelcastInstance.class)\n \t@ConditionalOnSingleCandidate(Config.class)\n \tstatic class HazelcastConfigConfiguration {\n \n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.hazelcast;\n\nimport java.io.IOException;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.Resource;\n\nimport com.hazelcast.config.Config;\nimport com.hazelcast.core.Hazelcast;\nimport com.hazelcast.core.HazelcastInstance;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Hazelcast. Creates a\n * {@link HazelcastInstance} based on explicit configuration or when a default\n * configuration file is found in the environment.\n *\n * @author Stephane Nicoll\n * @since 1.3.0\n * @see HazelcastConfigResourceCondition\n */\n@Configuration\n@ConditionalOnClass(HazelcastInstance.class)\n@ConditionalOnMissingBean(HazelcastInstance.class)\n@EnableConfigurationProperties(HazelcastProperties.class)\npublic class HazelcastAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnMissingBean(Config.class)\n\t@Conditional(ConfigAvailableCondition.class)\n\tstatic class HazelcastConfigFileConfiguration {\n\n\t\t@Autowired\n\t\tprivate HazelcastProperties hazelcastProperties;\n\n\t\t@Bean\n\t\tpublic HazelcastInstance hazelcastInstance() throws IOException {\n\t\t\tResource config = this.hazelcastProperties.resolveConfigLocation();\n\t\t\tif (config != null) {\n\t\t\t\treturn new HazelcastInstanceFactory(config).getHazelcastInstance();\n\t\t\t}\n\t\t\treturn Hazelcast.newHazelcastInstance();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnSingleCandidate(Config.class)\n\tstatic class HazelcastConfigConfiguration {\n\n\t\t@Bean\n\t\tpublic HazelcastInstance hazelcastInstance(Config config) {\n\t\t\treturn new HazelcastInstanceFactory(config).getHazelcastInstance();\n\t\t}\n\n\t}\n\n\t/**\n\t * {@link HazelcastConfigResourceCondition} that checks if the\n\t * {@code spring.hazelcast.config} configuration key is defined.\n\t */\n\tstatic class ConfigAvailableCondition extends HazelcastConfigResourceCondition {\n\n\t\tConfigAvailableCondition() {\n\t\t\tsuper("spring.hazelcast", "config");\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.hazelcast;\n\nimport java.io.IOException;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.Resource;\n\nimport com.hazelcast.config.Config;\nimport com.hazelcast.core.Hazelcast;\nimport com.hazelcast.core.HazelcastInstance;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Hazelcast. Creates a\n * {@link HazelcastInstance} based on explicit configuration or when a default\n * configuration file is found in the environment.\n *\n * @author Stephane Nicoll\n * @since 1.3.0\n * @see HazelcastConfigResourceCondition\n */\n@Configuration\n@ConditionalOnClass(HazelcastInstance.class)\n@ConditionalOnMissingBean(HazelcastInstance.class)\n@EnableConfigurationProperties(HazelcastProperties.class)\npublic class HazelcastAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnMissingBean({ HazelcastInstance.class, Config.class })\n\t@Conditional(ConfigAvailableCondition.class)\n\tstatic class HazelcastConfigFileConfiguration {\n\n\t\t@Autowired\n\t\tprivate HazelcastProperties hazelcastProperties;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic HazelcastInstance hazelcastInstance() throws IOException {\n\t\t\tResource config = this.hazelcastProperties.resolveConfigLocation();\n\t\t\tif (config != null) {\n\t\t\t\treturn new HazelcastInstanceFactory(config).getHazelcastInstance();\n\t\t\t}\n\t\t\treturn Hazelcast.newHazelcastInstance();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(HazelcastInstance.class)\n\t@ConditionalOnSingleCandidate(Config.class)\n\tstatic class HazelcastConfigConfiguration {\n\n\t\t@Bean\n\t\tpublic HazelcastInstance hazelcastInstance(Config config) {\n\t\t\treturn new HazelcastInstanceFactory(config).getHazelcastInstance();\n\t\t}\n\n\t}\n\n\t/**\n\t * {@link HazelcastConfigResourceCondition} that checks if the\n\t * {@code spring.hazelcast.config} configuration key is defined.\n\t */\n\tstatic class ConfigAvailableCondition extends HazelcastConfigResourceCondition {\n\n\t\tConfigAvailableCondition() {\n\t\t\tsuper("spring.hazelcast", "config");\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
