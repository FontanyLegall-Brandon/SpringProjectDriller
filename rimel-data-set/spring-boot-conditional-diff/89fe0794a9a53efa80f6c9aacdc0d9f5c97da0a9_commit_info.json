{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -42,6 +42,7 @@ import org.springframework.boot.autoconfigure.web.ResourceProperties.Strategy;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.boot.context.web.OrderedHiddenHttpMethodFilter;\n import org.springframework.boot.context.web.OrderedHttpPutFormContentFilter;\n+import org.springframework.boot.context.web.OrderedRequestContextFilter;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Import;\n@@ -61,6 +62,7 @@ import org.springframework.web.bind.support.ConfigurableWebBindingInitializer;\n import org.springframework.web.context.request.RequestContextListener;\n import org.springframework.web.filter.HiddenHttpMethodFilter;\n import org.springframework.web.filter.HttpPutFormContentFilter;\n+import org.springframework.web.filter.RequestContextFilter;\n import org.springframework.web.servlet.DispatcherServlet;\n import org.springframework.web.servlet.LocaleResolver;\n import org.springframework.web.servlet.View;\n@@ -163,9 +165,10 @@ public class WebMvcAutoConfiguration {\n \t\t}\n \n \t\t@Bean\n-\t\t@ConditionalOnMissingBean\n-\t\tpublic RequestContextListener requestContextListener() {\n-\t\t\treturn new RequestContextListener();\n+\t\t@ConditionalOnMissingBean({ RequestContextListener.class,\n+\t\t\t\tRequestContextFilter.class })\n+\t\tpublic RequestContextFilter requestContextFilter() {\n+\t\t\treturn new OrderedRequestContextFilter();\n \t\t}\n \n \t\t@Bean\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.List;\n\nimport javax.servlet.Servlet;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.ListableBeanFactory;\nimport org.springframework.beans.factory.NoSuchBeanDefinitionException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureOrder;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.web.ResourceProperties.Strategy;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.context.web.OrderedHiddenHttpMethodFilter;\nimport org.springframework.boot.context.web.OrderedHttpPutFormContentFilter;\nimport org.springframework.boot.context.web.OrderedRequestContextFilter;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.core.convert.converter.GenericConverter;\nimport org.springframework.core.io.Resource;\nimport org.springframework.format.Formatter;\nimport org.springframework.format.FormatterRegistry;\nimport org.springframework.format.datetime.DateFormatter;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.validation.DefaultMessageCodesResolver;\nimport org.springframework.validation.MessageCodesResolver;\nimport org.springframework.web.accept.ContentNegotiationManager;\nimport org.springframework.web.bind.support.ConfigurableWebBindingInitializer;\nimport org.springframework.web.context.request.RequestContextListener;\nimport org.springframework.web.filter.HiddenHttpMethodFilter;\nimport org.springframework.web.filter.HttpPutFormContentFilter;\nimport org.springframework.web.filter.RequestContextFilter;\nimport org.springframework.web.servlet.DispatcherServlet;\nimport org.springframework.web.servlet.LocaleResolver;\nimport org.springframework.web.servlet.View;\nimport org.springframework.web.servlet.ViewResolver;\nimport org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer;\nimport org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\nimport org.springframework.web.servlet.config.annotation.ResourceChainRegistration;\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration;\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\nimport org.springframework.web.servlet.config.annotation.ViewControllerRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\nimport org.springframework.web.servlet.handler.SimpleUrlHandlerMapping;\nimport org.springframework.web.servlet.i18n.FixedLocaleResolver;\nimport org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;\nimport org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;\nimport org.springframework.web.servlet.resource.AppCacheManifestTransformer;\nimport org.springframework.web.servlet.resource.ResourceHttpRequestHandler;\nimport org.springframework.web.servlet.resource.ResourceResolver;\nimport org.springframework.web.servlet.resource.VersionResourceResolver;\nimport org.springframework.web.servlet.view.BeanNameViewResolver;\nimport org.springframework.web.servlet.view.ContentNegotiatingViewResolver;\nimport org.springframework.web.servlet.view.InternalResourceViewResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link EnableWebMvc Web MVC}.\n *\n * @author Phillip Webb\n * @author Dave Syer\n * @author Andy Wilkinson\n * @author SÃ©bastien Deleuze\n */\n@Configuration\n@ConditionalOnWebApplication\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class,\n\t\tWebMvcConfigurerAdapter.class })\n@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)\n@AutoConfigureAfter(DispatcherServletAutoConfiguration.class)\npublic class WebMvcAutoConfiguration {\n\n\tpublic static String DEFAULT_PREFIX = "";\n\n\tpublic static String DEFAULT_SUFFIX = "";\n\n\t@Bean\n\t@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)\n\tpublic OrderedHiddenHttpMethodFilter hiddenHttpMethodFilter() {\n\t\treturn new OrderedHiddenHttpMethodFilter();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(HttpPutFormContentFilter.class)\n\tpublic OrderedHttpPutFormContentFilter httpPutFormContentFilter() {\n\t\treturn new OrderedHttpPutFormContentFilter();\n\t}\n\n\t// Defined as a nested config to ensure WebMvcConfigurerAdapter is not read when not\n\t// on the classpath\n\t@Configuration\n\t@Import(EnableWebMvcConfiguration.class)\n\t@EnableConfigurationProperties({ WebMvcProperties.class, ResourceProperties.class })\n\tpublic static class WebMvcAutoConfigurationAdapter extends WebMvcConfigurerAdapter {\n\n\t\tprivate static Log logger = LogFactory.getLog(WebMvcConfigurerAdapter.class);\n\n\t\t@Autowired\n\t\tprivate ResourceProperties resourceProperties = new ResourceProperties();\n\n\t\t@Autowired\n\t\tprivate WebMvcProperties mvcProperties = new WebMvcProperties();\n\n\t\t@Autowired\n\t\tprivate ListableBeanFactory beanFactory;\n\n\t\t@Autowired\n\t\tprivate HttpMessageConverters messageConverters;\n\n\t\t@Override\n\t\tpublic void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n\t\t\tconverters.addAll(this.messageConverters.getConverters());\n\t\t}\n\n\t\t@Override\n\t\tpublic void configureAsyncSupport(AsyncSupportConfigurer configurer) {\n\t\t\tLong timeout = this.mvcProperties.getAsync().getRequestTimeout();\n\t\t\tif (timeout != null) {\n\t\t\t\tconfigurer.setDefaultTimeout(timeout);\n\t\t\t}\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic InternalResourceViewResolver defaultViewResolver() {\n\t\t\tInternalResourceViewResolver resolver = new InternalResourceViewResolver();\n\t\t\tresolver.setPrefix(this.mvcProperties.getView().getPrefix());\n\t\t\tresolver.setSuffix(this.mvcProperties.getView().getSuffix());\n\t\t\treturn resolver;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean({ RequestContextListener.class,\n\t\t\t\tRequestContextFilter.class })\n\t\tpublic RequestContextFilter requestContextFilter() {\n\t\t\treturn new OrderedRequestContextFilter();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnBean(View.class)\n\t\tpublic BeanNameViewResolver beanNameViewResolver() {\n\t\t\tBeanNameViewResolver resolver = new BeanNameViewResolver();\n\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 10);\n\t\t\treturn resolver;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnBean(ViewResolver.class)\n\t\t@ConditionalOnMissingBean(name = "viewResolver", value = ContentNegotiatingViewResolver.class)\n\t\tpublic ContentNegotiatingViewResolver viewResolver(BeanFactory beanFactory) {\n\t\t\tContentNegotiatingViewResolver resolver = new ContentNegotiatingViewResolver();\n\t\t\tresolver.setContentNegotiationManager(\n\t\t\t\t\tbeanFactory.getBean(ContentNegotiationManager.class));\n\t\t\t// ContentNegotiatingViewResolver uses all the other view resolvers to locate\n\t\t\t// a view so it should have a high precedence\n\t\t\tresolver.setOrder(Ordered.HIGHEST_PRECEDENCE);\n\t\t\treturn resolver;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnProperty(prefix = "spring.mvc", name = "locale")\n\t\tpublic LocaleResolver localeResolver() {\n\t\t\treturn new FixedLocaleResolver(this.mvcProperties.getLocale());\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnProperty(prefix = "spring.mvc", name = "date-format")\n\t\tpublic Formatter<Date> dateFormatter() {\n\t\t\treturn new DateFormatter(this.mvcProperties.getDateFormat());\n\t\t}\n\n\t\t@Override\n\t\tpublic MessageCodesResolver getMessageCodesResolver() {\n\t\t\tif (this.mvcProperties.getMessageCodesResolverFormat() != null) {\n\t\t\t\tDefaultMessageCodesResolver resolver = new DefaultMessageCodesResolver();\n\t\t\t\tresolver.setMessageCodeFormatter(\n\t\t\t\t\t\tthis.mvcProperties.getMessageCodesResolverFormat());\n\t\t\t\treturn resolver;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t@Override\n\t\tpublic void addFormatters(FormatterRegistry registry) {\n\t\t\tfor (Converter<?, ?> converter : getBeansOfType(Converter.class)) {\n\t\t\t\tregistry.addConverter(converter);\n\t\t\t}\n\t\t\tfor (GenericConverter converter : getBeansOfType(GenericConverter.class)) {\n\t\t\t\tregistry.addConverter(converter);\n\t\t\t}\n\t\t\tfor (Formatter<?> formatter : getBeansOfType(Formatter.class)) {\n\t\t\t\tregistry.addFormatter(formatter);\n\t\t\t}\n\t\t}\n\n\t\tprivate <T> Collection<T> getBeansOfType(Class<T> type) {\n\t\t\treturn this.beanFactory.getBeansOfType(type).values();\n\t\t}\n\n\t\t@Override\n\t\tpublic void addResourceHandlers(ResourceHandlerRegistry registry) {\n\t\t\tif (!this.resourceProperties.isAddMappings()) {\n\t\t\t\tlogger.debug("Default resource handling disabled");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tInteger cachePeriod = this.resourceProperties.getCachePeriod();\n\t\t\tif (!registry.hasMappingForPattern("/webjars/**")) {\n\t\t\t\tregisterResourceChain(registry.addResourceHandler("/webjars/**")\n\t\t\t\t\t\t.addResourceLocations("classpath:/META-INF/resources/webjars/")\n\t\t\t\t\t\t.setCachePeriod(cachePeriod));\n\t\t\t}\n\t\t\tif (!registry.hasMappingForPattern("/**")) {\n\t\t\t\tregisterResourceChain(registry.addResourceHandler("/**")\n\t\t\t\t\t\t.addResourceLocations(\n\t\t\t\t\t\t\t\tthis.resourceProperties.getStaticLocations())\n\t\t\t\t\t\t.setCachePeriod(cachePeriod));\n\t\t\t}\n\t\t}\n\n\t\tprivate void registerResourceChain(ResourceHandlerRegistration registration) {\n\t\t\tResourceProperties.Chain properties = this.resourceProperties.getChain();\n\t\t\tif (properties.getEnabled()) {\n\t\t\t\tconfigureResourceChain(properties,\n\t\t\t\t\t\tregistration.resourceChain(properties.isCache()));\n\t\t\t}\n\t\t}\n\n\t\tprivate void configureResourceChain(ResourceProperties.Chain properties,\n\t\t\t\tResourceChainRegistration chain) {\n\t\t\tStrategy strategy = properties.getStrategy();\n\t\t\tif (strategy.getFixed().isEnabled() || strategy.getContent().isEnabled()) {\n\t\t\t\tchain.addResolver(getVersionResourceResolver(strategy));\n\t\t\t}\n\t\t\tif (properties.isHtmlApplicationCache()) {\n\t\t\t\tchain.addTransformer(new AppCacheManifestTransformer());\n\t\t\t}\n\t\t}\n\n\t\tprivate ResourceResolver getVersionResourceResolver(\n\t\t\t\tResourceProperties.Strategy properties) {\n\t\t\tVersionResourceResolver resolver = new VersionResourceResolver();\n\t\t\tif (properties.getFixed().isEnabled()) {\n\t\t\t\tString version = properties.getFixed().getVersion();\n\t\t\t\tString[] paths = properties.getFixed().getPaths();\n\t\t\t\tresolver.addFixedVersionStrategy(version, paths);\n\t\t\t}\n\t\t\tif (properties.getContent().isEnabled()) {\n\t\t\t\tString[] paths = properties.getContent().getPaths();\n\t\t\t\tresolver.addContentVersionStrategy(paths);\n\t\t\t}\n\t\t\treturn resolver;\n\t\t}\n\n\t\t@Override\n\t\tpublic void addViewControllers(ViewControllerRegistry registry) {\n\t\t\tResource page = this.resourceProperties.getWelcomePage();\n\t\t\tif (page != null) {\n\t\t\t\tlogger.info("Adding welcome page: " + page);\n\t\t\t\tregistry.addViewController("/").setViewName("forward:index.html");\n\t\t\t}\n\t\t}\n\n\t\t@Configuration\n\t\t@ConditionalOnProperty(value = "spring.mvc.favicon.enabled", matchIfMissing = true)\n\t\tpublic static class FaviconConfiguration {\n\n\t\t\t@Autowired\n\t\t\tprivate ResourceProperties resourceProperties = new ResourceProperties();\n\n\t\t\t@Bean\n\t\t\tpublic SimpleUrlHandlerMapping faviconHandlerMapping() {\n\t\t\t\tSimpleUrlHandlerMapping mapping = new SimpleUrlHandlerMapping();\n\t\t\t\tmapping.setOrder(Integer.MIN_VALUE + 1);\n\t\t\t\tmapping.setUrlMap(Collections.singletonMap("**/favicon.ico",\n\t\t\t\t\t\tfaviconRequestHandler()));\n\t\t\t\treturn mapping;\n\t\t\t}\n\n\t\t\t@Bean\n\t\t\tpublic ResourceHttpRequestHandler faviconRequestHandler() {\n\t\t\t\tResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler();\n\t\t\t\trequestHandler\n\t\t\t\t\t\t.setLocations(this.resourceProperties.getFaviconLocations());\n\t\t\t\treturn requestHandler;\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Configuration equivalent to {@code @EnableWebMvc}.\n\t */\n\t@Configuration\n\tpublic static class EnableWebMvcConfiguration extends DelegatingWebMvcConfiguration {\n\n\t\t@Autowired(required = false)\n\t\tprivate WebMvcProperties mvcProperties;\n\n\t\t@Autowired\n\t\tprivate ListableBeanFactory beanFactory;\n\n\t\t@Bean\n\t\t@Override\n\t\tpublic RequestMappingHandlerAdapter requestMappingHandlerAdapter() {\n\t\t\tRequestMappingHandlerAdapter adapter = super.requestMappingHandlerAdapter();\n\t\t\tadapter.setIgnoreDefaultModelOnRedirect(this.mvcProperties == null ? true\n\t\t\t\t\t: this.mvcProperties.isIgnoreDefaultModelOnRedirect());\n\t\t\treturn adapter;\n\t\t}\n\n\t\t@Bean\n\t\t@Primary\n\t\t@Override\n\t\tpublic RequestMappingHandlerMapping requestMappingHandlerMapping() {\n\t\t\t// Must be @Primary for MvcUriComponentsBuilder to work\n\t\t\treturn super.requestMappingHandlerMapping();\n\t\t}\n\n\t\t@Override\n\t\tprotected ConfigurableWebBindingInitializer getConfigurableWebBindingInitializer() {\n\t\t\ttry {\n\t\t\t\treturn this.beanFactory.getBean(ConfigurableWebBindingInitializer.class);\n\t\t\t}\n\t\t\tcatch (NoSuchBeanDefinitionException ex) {\n\t\t\t\treturn super.getConfigurableWebBindingInitializer();\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.List;\n\nimport javax.servlet.Servlet;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.ListableBeanFactory;\nimport org.springframework.beans.factory.NoSuchBeanDefinitionException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureOrder;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.web.ResourceProperties.Strategy;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.context.web.OrderedHiddenHttpMethodFilter;\nimport org.springframework.boot.context.web.OrderedHttpPutFormContentFilter;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.core.convert.converter.GenericConverter;\nimport org.springframework.core.io.Resource;\nimport org.springframework.format.Formatter;\nimport org.springframework.format.FormatterRegistry;\nimport org.springframework.format.datetime.DateFormatter;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.validation.DefaultMessageCodesResolver;\nimport org.springframework.validation.MessageCodesResolver;\nimport org.springframework.web.accept.ContentNegotiationManager;\nimport org.springframework.web.bind.support.ConfigurableWebBindingInitializer;\nimport org.springframework.web.context.request.RequestContextListener;\nimport org.springframework.web.filter.HiddenHttpMethodFilter;\nimport org.springframework.web.filter.HttpPutFormContentFilter;\nimport org.springframework.web.servlet.DispatcherServlet;\nimport org.springframework.web.servlet.LocaleResolver;\nimport org.springframework.web.servlet.View;\nimport org.springframework.web.servlet.ViewResolver;\nimport org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer;\nimport org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\nimport org.springframework.web.servlet.config.annotation.ResourceChainRegistration;\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration;\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\nimport org.springframework.web.servlet.config.annotation.ViewControllerRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\nimport org.springframework.web.servlet.handler.SimpleUrlHandlerMapping;\nimport org.springframework.web.servlet.i18n.FixedLocaleResolver;\nimport org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;\nimport org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;\nimport org.springframework.web.servlet.resource.AppCacheManifestTransformer;\nimport org.springframework.web.servlet.resource.ResourceHttpRequestHandler;\nimport org.springframework.web.servlet.resource.ResourceResolver;\nimport org.springframework.web.servlet.resource.VersionResourceResolver;\nimport org.springframework.web.servlet.view.BeanNameViewResolver;\nimport org.springframework.web.servlet.view.ContentNegotiatingViewResolver;\nimport org.springframework.web.servlet.view.InternalResourceViewResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link EnableWebMvc Web MVC}.\n *\n * @author Phillip Webb\n * @author Dave Syer\n * @author Andy Wilkinson\n * @author SÃ©bastien Deleuze\n */\n@Configuration\n@ConditionalOnWebApplication\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class,\n\t\tWebMvcConfigurerAdapter.class })\n@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)\n@AutoConfigureAfter(DispatcherServletAutoConfiguration.class)\npublic class WebMvcAutoConfiguration {\n\n\tpublic static String DEFAULT_PREFIX = "";\n\n\tpublic static String DEFAULT_SUFFIX = "";\n\n\t@Bean\n\t@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)\n\tpublic OrderedHiddenHttpMethodFilter hiddenHttpMethodFilter() {\n\t\treturn new OrderedHiddenHttpMethodFilter();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(HttpPutFormContentFilter.class)\n\tpublic OrderedHttpPutFormContentFilter httpPutFormContentFilter() {\n\t\treturn new OrderedHttpPutFormContentFilter();\n\t}\n\n\t// Defined as a nested config to ensure WebMvcConfigurerAdapter is not read when not\n\t// on the classpath\n\t@Configuration\n\t@Import(EnableWebMvcConfiguration.class)\n\t@EnableConfigurationProperties({ WebMvcProperties.class, ResourceProperties.class })\n\tpublic static class WebMvcAutoConfigurationAdapter extends WebMvcConfigurerAdapter {\n\n\t\tprivate static Log logger = LogFactory.getLog(WebMvcConfigurerAdapter.class);\n\n\t\t@Autowired\n\t\tprivate ResourceProperties resourceProperties = new ResourceProperties();\n\n\t\t@Autowired\n\t\tprivate WebMvcProperties mvcProperties = new WebMvcProperties();\n\n\t\t@Autowired\n\t\tprivate ListableBeanFactory beanFactory;\n\n\t\t@Autowired\n\t\tprivate HttpMessageConverters messageConverters;\n\n\t\t@Override\n\t\tpublic void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n\t\t\tconverters.addAll(this.messageConverters.getConverters());\n\t\t}\n\n\t\t@Override\n\t\tpublic void configureAsyncSupport(AsyncSupportConfigurer configurer) {\n\t\t\tLong timeout = this.mvcProperties.getAsync().getRequestTimeout();\n\t\t\tif (timeout != null) {\n\t\t\t\tconfigurer.setDefaultTimeout(timeout);\n\t\t\t}\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic InternalResourceViewResolver defaultViewResolver() {\n\t\t\tInternalResourceViewResolver resolver = new InternalResourceViewResolver();\n\t\t\tresolver.setPrefix(this.mvcProperties.getView().getPrefix());\n\t\t\tresolver.setSuffix(this.mvcProperties.getView().getSuffix());\n\t\t\treturn resolver;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic RequestContextListener requestContextListener() {\n\t\t\treturn new RequestContextListener();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnBean(View.class)\n\t\tpublic BeanNameViewResolver beanNameViewResolver() {\n\t\t\tBeanNameViewResolver resolver = new BeanNameViewResolver();\n\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 10);\n\t\t\treturn resolver;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnBean(ViewResolver.class)\n\t\t@ConditionalOnMissingBean(name = "viewResolver", value = ContentNegotiatingViewResolver.class)\n\t\tpublic ContentNegotiatingViewResolver viewResolver(BeanFactory beanFactory) {\n\t\t\tContentNegotiatingViewResolver resolver = new ContentNegotiatingViewResolver();\n\t\t\tresolver.setContentNegotiationManager(\n\t\t\t\t\tbeanFactory.getBean(ContentNegotiationManager.class));\n\t\t\t// ContentNegotiatingViewResolver uses all the other view resolvers to locate\n\t\t\t// a view so it should have a high precedence\n\t\t\tresolver.setOrder(Ordered.HIGHEST_PRECEDENCE);\n\t\t\treturn resolver;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnProperty(prefix = "spring.mvc", name = "locale")\n\t\tpublic LocaleResolver localeResolver() {\n\t\t\treturn new FixedLocaleResolver(this.mvcProperties.getLocale());\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnProperty(prefix = "spring.mvc", name = "date-format")\n\t\tpublic Formatter<Date> dateFormatter() {\n\t\t\treturn new DateFormatter(this.mvcProperties.getDateFormat());\n\t\t}\n\n\t\t@Override\n\t\tpublic MessageCodesResolver getMessageCodesResolver() {\n\t\t\tif (this.mvcProperties.getMessageCodesResolverFormat() != null) {\n\t\t\t\tDefaultMessageCodesResolver resolver = new DefaultMessageCodesResolver();\n\t\t\t\tresolver.setMessageCodeFormatter(\n\t\t\t\t\t\tthis.mvcProperties.getMessageCodesResolverFormat());\n\t\t\t\treturn resolver;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t@Override\n\t\tpublic void addFormatters(FormatterRegistry registry) {\n\t\t\tfor (Converter<?, ?> converter : getBeansOfType(Converter.class)) {\n\t\t\t\tregistry.addConverter(converter);\n\t\t\t}\n\t\t\tfor (GenericConverter converter : getBeansOfType(GenericConverter.class)) {\n\t\t\t\tregistry.addConverter(converter);\n\t\t\t}\n\t\t\tfor (Formatter<?> formatter : getBeansOfType(Formatter.class)) {\n\t\t\t\tregistry.addFormatter(formatter);\n\t\t\t}\n\t\t}\n\n\t\tprivate <T> Collection<T> getBeansOfType(Class<T> type) {\n\t\t\treturn this.beanFactory.getBeansOfType(type).values();\n\t\t}\n\n\t\t@Override\n\t\tpublic void addResourceHandlers(ResourceHandlerRegistry registry) {\n\t\t\tif (!this.resourceProperties.isAddMappings()) {\n\t\t\t\tlogger.debug("Default resource handling disabled");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tInteger cachePeriod = this.resourceProperties.getCachePeriod();\n\t\t\tif (!registry.hasMappingForPattern("/webjars/**")) {\n\t\t\t\tregisterResourceChain(registry.addResourceHandler("/webjars/**")\n\t\t\t\t\t\t.addResourceLocations("classpath:/META-INF/resources/webjars/")\n\t\t\t\t\t\t.setCachePeriod(cachePeriod));\n\t\t\t}\n\t\t\tif (!registry.hasMappingForPattern("/**")) {\n\t\t\t\tregisterResourceChain(registry.addResourceHandler("/**")\n\t\t\t\t\t\t.addResourceLocations(\n\t\t\t\t\t\t\t\tthis.resourceProperties.getStaticLocations())\n\t\t\t\t\t\t.setCachePeriod(cachePeriod));\n\t\t\t}\n\t\t}\n\n\t\tprivate void registerResourceChain(ResourceHandlerRegistration registration) {\n\t\t\tResourceProperties.Chain properties = this.resourceProperties.getChain();\n\t\t\tif (properties.getEnabled()) {\n\t\t\t\tconfigureResourceChain(properties,\n\t\t\t\t\t\tregistration.resourceChain(properties.isCache()));\n\t\t\t}\n\t\t}\n\n\t\tprivate void configureResourceChain(ResourceProperties.Chain properties,\n\t\t\t\tResourceChainRegistration chain) {\n\t\t\tStrategy strategy = properties.getStrategy();\n\t\t\tif (strategy.getFixed().isEnabled() || strategy.getContent().isEnabled()) {\n\t\t\t\tchain.addResolver(getVersionResourceResolver(strategy));\n\t\t\t}\n\t\t\tif (properties.isHtmlApplicationCache()) {\n\t\t\t\tchain.addTransformer(new AppCacheManifestTransformer());\n\t\t\t}\n\t\t}\n\n\t\tprivate ResourceResolver getVersionResourceResolver(\n\t\t\t\tResourceProperties.Strategy properties) {\n\t\t\tVersionResourceResolver resolver = new VersionResourceResolver();\n\t\t\tif (properties.getFixed().isEnabled()) {\n\t\t\t\tString version = properties.getFixed().getVersion();\n\t\t\t\tString[] paths = properties.getFixed().getPaths();\n\t\t\t\tresolver.addFixedVersionStrategy(version, paths);\n\t\t\t}\n\t\t\tif (properties.getContent().isEnabled()) {\n\t\t\t\tString[] paths = properties.getContent().getPaths();\n\t\t\t\tresolver.addContentVersionStrategy(paths);\n\t\t\t}\n\t\t\treturn resolver;\n\t\t}\n\n\t\t@Override\n\t\tpublic void addViewControllers(ViewControllerRegistry registry) {\n\t\t\tResource page = this.resourceProperties.getWelcomePage();\n\t\t\tif (page != null) {\n\t\t\t\tlogger.info("Adding welcome page: " + page);\n\t\t\t\tregistry.addViewController("/").setViewName("forward:index.html");\n\t\t\t}\n\t\t}\n\n\t\t@Configuration\n\t\t@ConditionalOnProperty(value = "spring.mvc.favicon.enabled", matchIfMissing = true)\n\t\tpublic static class FaviconConfiguration {\n\n\t\t\t@Autowired\n\t\t\tprivate ResourceProperties resourceProperties = new ResourceProperties();\n\n\t\t\t@Bean\n\t\t\tpublic SimpleUrlHandlerMapping faviconHandlerMapping() {\n\t\t\t\tSimpleUrlHandlerMapping mapping = new SimpleUrlHandlerMapping();\n\t\t\t\tmapping.setOrder(Integer.MIN_VALUE + 1);\n\t\t\t\tmapping.setUrlMap(Collections.singletonMap("**/favicon.ico",\n\t\t\t\t\t\tfaviconRequestHandler()));\n\t\t\t\treturn mapping;\n\t\t\t}\n\n\t\t\t@Bean\n\t\t\tpublic ResourceHttpRequestHandler faviconRequestHandler() {\n\t\t\t\tResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler();\n\t\t\t\trequestHandler\n\t\t\t\t\t\t.setLocations(this.resourceProperties.getFaviconLocations());\n\t\t\t\treturn requestHandler;\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Configuration equivalent to {@code @EnableWebMvc}.\n\t */\n\t@Configuration\n\tpublic static class EnableWebMvcConfiguration extends DelegatingWebMvcConfiguration {\n\n\t\t@Autowired(required = false)\n\t\tprivate WebMvcProperties mvcProperties;\n\n\t\t@Autowired\n\t\tprivate ListableBeanFactory beanFactory;\n\n\t\t@Bean\n\t\t@Override\n\t\tpublic RequestMappingHandlerAdapter requestMappingHandlerAdapter() {\n\t\t\tRequestMappingHandlerAdapter adapter = super.requestMappingHandlerAdapter();\n\t\t\tadapter.setIgnoreDefaultModelOnRedirect(this.mvcProperties == null ? true\n\t\t\t\t\t: this.mvcProperties.isIgnoreDefaultModelOnRedirect());\n\t\t\treturn adapter;\n\t\t}\n\n\t\t@Bean\n\t\t@Primary\n\t\t@Override\n\t\tpublic RequestMappingHandlerMapping requestMappingHandlerMapping() {\n\t\t\t// Must be @Primary for MvcUriComponentsBuilder to work\n\t\t\treturn super.requestMappingHandlerMapping();\n\t\t}\n\n\t\t@Override\n\t\tprotected ConfigurableWebBindingInitializer getConfigurableWebBindingInitializer() {\n\t\t\ttry {\n\t\t\t\treturn this.beanFactory.getBean(ConfigurableWebBindingInitializer.class);\n\t\t\t}\n\t\t\tcatch (NoSuchBeanDefinitionException ex) {\n\t\t\t\treturn super.getConfigurableWebBindingInitializer();\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
