{'_old_path': PosixPath('spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/reactive/WebTestClientAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/reactive/WebTestClientAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,12 +16,19 @@\n \n package org.springframework.boot.test.autoconfigure.web.reactive;\n \n+import java.util.Collection;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration;\n+import org.springframework.boot.web.codec.CodecCustomizer;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.test.web.reactive.server.WebTestClient;\n+import org.springframework.util.CollectionUtils;\n+import org.springframework.web.reactive.function.client.ExchangeStrategies;\n import org.springframework.web.reactive.function.client.WebClient;\n \n /**\n@@ -31,13 +38,32 @@ import org.springframework.web.reactive.function.client.WebClient;\n  * @since 2.0.0\n  */\n @Configuration\n-@ConditionalOnClass({ WebClient.class, WebTestClient.class })\n+@ConditionalOnClass({WebClient.class, WebTestClient.class})\n+@AutoConfigureAfter(CodecsAutoConfiguration.class)\n public class WebTestClientAutoConfiguration {\n \n \t@Bean\n \t@ConditionalOnMissingBean\n \tpublic WebTestClient webTestClient(ApplicationContext applicationContext) {\n-\t\treturn WebTestClient.bindToApplicationContext(applicationContext).build();\n+\n+\t\tWebTestClient.Builder clientBuilder = WebTestClient\n+\t\t\t\t.bindToApplicationContext(applicationContext).configureClient();\n+\t\tcustomizeWebTestClientCodecs(clientBuilder, applicationContext);\n+\t\treturn clientBuilder.build();\n+\t}\n+\n+\tprivate void customizeWebTestClientCodecs(WebTestClient.Builder clientBuilder,\n+\t\t\tApplicationContext applicationContext) {\n+\n+\t\tCollection<CodecCustomizer> codecCustomizers = applicationContext\n+\t\t\t\t.getBeansOfType(CodecCustomizer.class).values();\n+\t\tif (!CollectionUtils.isEmpty(codecCustomizers)) {\n+\t\t\tclientBuilder.exchangeStrategies(ExchangeStrategies.builder()\n+\t\t\t\t\t.codecs(codecs -> {\n+\t\t\t\t\t\tcodecCustomizers.forEach(codecCustomizer -> codecCustomizer.customize(codecs));\n+\t\t\t\t\t})\n+\t\t\t\t\t.build());\n+\t\t}\n \t}\n \n }\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.test.autoconfigure.web.reactive;\n\nimport java.util.Collection;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration;\nimport org.springframework.boot.web.codec.CodecCustomizer;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.test.web.reactive.server.WebTestClient;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.web.reactive.function.client.ExchangeStrategies;\nimport org.springframework.web.reactive.function.client.WebClient;\n\n/**\n * Auto-configuration for {@link WebTestClient}.\n *\n * @author Stephane Nicoll\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass({WebClient.class, WebTestClient.class})\n@AutoConfigureAfter(CodecsAutoConfiguration.class)\npublic class WebTestClientAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic WebTestClient webTestClient(ApplicationContext applicationContext) {\n\n\t\tWebTestClient.Builder clientBuilder = WebTestClient\n\t\t\t\t.bindToApplicationContext(applicationContext).configureClient();\n\t\tcustomizeWebTestClientCodecs(clientBuilder, applicationContext);\n\t\treturn clientBuilder.build();\n\t}\n\n\tprivate void customizeWebTestClientCodecs(WebTestClient.Builder clientBuilder,\n\t\t\tApplicationContext applicationContext) {\n\n\t\tCollection<CodecCustomizer> codecCustomizers = applicationContext\n\t\t\t\t.getBeansOfType(CodecCustomizer.class).values();\n\t\tif (!CollectionUtils.isEmpty(codecCustomizers)) {\n\t\t\tclientBuilder.exchangeStrategies(ExchangeStrategies.builder()\n\t\t\t\t\t.codecs(codecs -> {\n\t\t\t\t\t\tcodecCustomizers.forEach(codecCustomizer -> codecCustomizer.customize(codecs));\n\t\t\t\t\t})\n\t\t\t\t\t.build());\n\t\t}\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.test.autoconfigure.web.reactive;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.test.web.reactive.server.WebTestClient;\nimport org.springframework.web.reactive.function.client.WebClient;\n\n/**\n * Auto-configuration for {@link WebTestClient}.\n *\n * @author Stephane Nicoll\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass({ WebClient.class, WebTestClient.class })\npublic class WebTestClientAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic WebTestClient webTestClient(ApplicationContext applicationContext) {\n\t\treturn WebTestClient.bindToApplicationContext(applicationContext).build();\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
