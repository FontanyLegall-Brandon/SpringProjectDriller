{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/servlet/ServletManagementChildContextConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/servlet/ServletManagementChildContextConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -70,6 +70,7 @@ class ServletManagementChildContextConfiguration {\n \t}\n \n \t@Bean\n+\t@ConditionalOnClass(name = "io.undertow.Undertow")\n \tpublic UndertowAccessLogCustomizer undertowAccessLogCustomizer() {\n \t\treturn new UndertowAccessLogCustomizer();\n \t}\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.web.servlet;\n\nimport javax.servlet.Filter;\n\nimport org.apache.catalina.Valve;\nimport org.apache.catalina.valves.AccessLogValve;\n\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.HierarchicalBeanFactory;\nimport org.springframework.beans.factory.ListableBeanFactory;\nimport org.springframework.boot.actuate.autoconfigure.web.ManagementContextConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.web.ManagementContextType;\nimport org.springframework.boot.actuate.autoconfigure.web.server.ManagementServerProperties;\nimport org.springframework.boot.actuate.autoconfigure.web.server.ManagementWebServerFactoryCustomizer;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.boot.autoconfigure.web.ServerProperties;\nimport org.springframework.boot.autoconfigure.web.embedded.JettyWebServerFactoryCustomizer;\nimport org.springframework.boot.autoconfigure.web.embedded.TomcatWebServerFactoryCustomizer;\nimport org.springframework.boot.autoconfigure.web.embedded.UndertowWebServerFactoryCustomizer;\nimport org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryCustomizer;\nimport org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactoryCustomizer;\nimport org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;\nimport org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;\nimport org.springframework.boot.web.server.WebServerFactoryCustomizer;\nimport org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.security.config.BeanIds;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n/**\n * {@link ManagementContextConfiguration} for Servlet web endpoint infrastructure when a\n * separate management context with a web server running on a different port is required.\n *\n * @author Dave Syer\n * @author Stephane Nicoll\n * @author Andy Wilkinson\n * @author Eddú Meléndez\n * @author Phillip Webb\n */\n@ManagementContextConfiguration(ManagementContextType.CHILD)\n@ConditionalOnWebApplication(type = Type.SERVLET)\nclass ServletManagementChildContextConfiguration {\n\n\t@Bean\n\tpublic ServletManagementWebServerFactoryCustomizer servletManagementWebServerFactoryCustomizer(\n\t\t\tListableBeanFactory beanFactory) {\n\t\treturn new ServletManagementWebServerFactoryCustomizer(beanFactory);\n\t}\n\n\t@Bean\n\t@ConditionalOnClass(name = "io.undertow.Undertow")\n\tpublic UndertowAccessLogCustomizer undertowAccessLogCustomizer() {\n\t\treturn new UndertowAccessLogCustomizer();\n\t}\n\n\t@Bean\n\t@ConditionalOnClass(name = "org.apache.catalina.valves.AccessLogValve")\n\tpublic TomcatAccessLogCustomizer tomcatAccessLogCustomizer() {\n\t\treturn new TomcatAccessLogCustomizer();\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ EnableWebSecurity.class, Filter.class })\n\t@ConditionalOnBean(name = BeanIds.SPRING_SECURITY_FILTER_CHAIN, search = SearchStrategy.ANCESTORS)\n\tstatic class ServletManagementContextSecurityConfiguration {\n\n\t\t@Bean\n\t\tpublic Filter springSecurityFilterChain(HierarchicalBeanFactory beanFactory) {\n\t\t\tBeanFactory parent = beanFactory.getParentBeanFactory();\n\t\t\treturn parent.getBean(BeanIds.SPRING_SECURITY_FILTER_CHAIN, Filter.class);\n\t\t}\n\n\t}\n\n\tstatic class ServletManagementWebServerFactoryCustomizer extends\n\t\t\tManagementWebServerFactoryCustomizer<ConfigurableServletWebServerFactory> {\n\n\t\tServletManagementWebServerFactoryCustomizer(ListableBeanFactory beanFactory) {\n\t\t\tsuper(beanFactory, ServletWebServerFactoryCustomizer.class,\n\t\t\t\t\tTomcatServletWebServerFactoryCustomizer.class,\n\t\t\t\t\tTomcatWebServerFactoryCustomizer.class,\n\t\t\t\t\tJettyWebServerFactoryCustomizer.class,\n\t\t\t\t\tUndertowWebServerFactoryCustomizer.class);\n\t\t}\n\n\t\t@Override\n\t\tprotected void customize(ConfigurableServletWebServerFactory webServerFactory,\n\t\t\t\tManagementServerProperties managementServerProperties,\n\t\t\t\tServerProperties serverProperties) {\n\t\t\tsuper.customize(webServerFactory, managementServerProperties,\n\t\t\t\t\tserverProperties);\n\t\t\twebServerFactory.setContextPath(\n\t\t\t\t\tmanagementServerProperties.getServlet().getContextPath());\n\t\t}\n\n\t}\n\n\tabstract static class AccessLogCustomizer implements Ordered {\n\n\t\tprotected String customizePrefix(String prefix) {\n\t\t\treturn "management_" + prefix;\n\t\t}\n\n\t\t@Override\n\t\tpublic int getOrder() {\n\t\t\treturn 1;\n\t\t}\n\n\t}\n\n\tstatic class TomcatAccessLogCustomizer extends AccessLogCustomizer\n\t\t\timplements WebServerFactoryCustomizer<TomcatServletWebServerFactory> {\n\n\t\t@Override\n\t\tpublic void customize(TomcatServletWebServerFactory factory) {\n\t\t\tAccessLogValve accessLogValve = findAccessLogValve(factory);\n\t\t\tif (accessLogValve == null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\taccessLogValve.setPrefix(customizePrefix(accessLogValve.getPrefix()));\n\t\t}\n\n\t\tprivate AccessLogValve findAccessLogValve(TomcatServletWebServerFactory factory) {\n\t\t\tfor (Valve engineValve : factory.getEngineValves()) {\n\t\t\t\tif (engineValve instanceof AccessLogValve) {\n\t\t\t\t\treturn (AccessLogValve) engineValve;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t}\n\n\tstatic class UndertowAccessLogCustomizer extends AccessLogCustomizer\n\t\t\timplements WebServerFactoryCustomizer<UndertowServletWebServerFactory> {\n\n\t\t@Override\n\t\tpublic void customize(UndertowServletWebServerFactory factory) {\n\t\t\tfactory.setAccessLogPrefix(customizePrefix(factory.getAccessLogPrefix()));\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.web.servlet;\n\nimport javax.servlet.Filter;\n\nimport org.apache.catalina.Valve;\nimport org.apache.catalina.valves.AccessLogValve;\n\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.HierarchicalBeanFactory;\nimport org.springframework.beans.factory.ListableBeanFactory;\nimport org.springframework.boot.actuate.autoconfigure.web.ManagementContextConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.web.ManagementContextType;\nimport org.springframework.boot.actuate.autoconfigure.web.server.ManagementServerProperties;\nimport org.springframework.boot.actuate.autoconfigure.web.server.ManagementWebServerFactoryCustomizer;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.boot.autoconfigure.web.ServerProperties;\nimport org.springframework.boot.autoconfigure.web.embedded.JettyWebServerFactoryCustomizer;\nimport org.springframework.boot.autoconfigure.web.embedded.TomcatWebServerFactoryCustomizer;\nimport org.springframework.boot.autoconfigure.web.embedded.UndertowWebServerFactoryCustomizer;\nimport org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryCustomizer;\nimport org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactoryCustomizer;\nimport org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;\nimport org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;\nimport org.springframework.boot.web.server.WebServerFactoryCustomizer;\nimport org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.security.config.BeanIds;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n/**\n * {@link ManagementContextConfiguration} for Servlet web endpoint infrastructure when a\n * separate management context with a web server running on a different port is required.\n *\n * @author Dave Syer\n * @author Stephane Nicoll\n * @author Andy Wilkinson\n * @author Eddú Meléndez\n * @author Phillip Webb\n */\n@ManagementContextConfiguration(ManagementContextType.CHILD)\n@ConditionalOnWebApplication(type = Type.SERVLET)\nclass ServletManagementChildContextConfiguration {\n\n\t@Bean\n\tpublic ServletManagementWebServerFactoryCustomizer servletManagementWebServerFactoryCustomizer(\n\t\t\tListableBeanFactory beanFactory) {\n\t\treturn new ServletManagementWebServerFactoryCustomizer(beanFactory);\n\t}\n\n\t@Bean\n\tpublic UndertowAccessLogCustomizer undertowAccessLogCustomizer() {\n\t\treturn new UndertowAccessLogCustomizer();\n\t}\n\n\t@Bean\n\t@ConditionalOnClass(name = "org.apache.catalina.valves.AccessLogValve")\n\tpublic TomcatAccessLogCustomizer tomcatAccessLogCustomizer() {\n\t\treturn new TomcatAccessLogCustomizer();\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ EnableWebSecurity.class, Filter.class })\n\t@ConditionalOnBean(name = BeanIds.SPRING_SECURITY_FILTER_CHAIN, search = SearchStrategy.ANCESTORS)\n\tstatic class ServletManagementContextSecurityConfiguration {\n\n\t\t@Bean\n\t\tpublic Filter springSecurityFilterChain(HierarchicalBeanFactory beanFactory) {\n\t\t\tBeanFactory parent = beanFactory.getParentBeanFactory();\n\t\t\treturn parent.getBean(BeanIds.SPRING_SECURITY_FILTER_CHAIN, Filter.class);\n\t\t}\n\n\t}\n\n\tstatic class ServletManagementWebServerFactoryCustomizer extends\n\t\t\tManagementWebServerFactoryCustomizer<ConfigurableServletWebServerFactory> {\n\n\t\tServletManagementWebServerFactoryCustomizer(ListableBeanFactory beanFactory) {\n\t\t\tsuper(beanFactory, ServletWebServerFactoryCustomizer.class,\n\t\t\t\t\tTomcatServletWebServerFactoryCustomizer.class,\n\t\t\t\t\tTomcatWebServerFactoryCustomizer.class,\n\t\t\t\t\tJettyWebServerFactoryCustomizer.class,\n\t\t\t\t\tUndertowWebServerFactoryCustomizer.class);\n\t\t}\n\n\t\t@Override\n\t\tprotected void customize(ConfigurableServletWebServerFactory webServerFactory,\n\t\t\t\tManagementServerProperties managementServerProperties,\n\t\t\t\tServerProperties serverProperties) {\n\t\t\tsuper.customize(webServerFactory, managementServerProperties,\n\t\t\t\t\tserverProperties);\n\t\t\twebServerFactory.setContextPath(\n\t\t\t\t\tmanagementServerProperties.getServlet().getContextPath());\n\t\t}\n\n\t}\n\n\tabstract static class AccessLogCustomizer implements Ordered {\n\n\t\tprotected String customizePrefix(String prefix) {\n\t\t\treturn "management_" + prefix;\n\t\t}\n\n\t\t@Override\n\t\tpublic int getOrder() {\n\t\t\treturn 1;\n\t\t}\n\n\t}\n\n\tstatic class TomcatAccessLogCustomizer extends AccessLogCustomizer\n\t\t\timplements WebServerFactoryCustomizer<TomcatServletWebServerFactory> {\n\n\t\t@Override\n\t\tpublic void customize(TomcatServletWebServerFactory factory) {\n\t\t\tAccessLogValve accessLogValve = findAccessLogValve(factory);\n\t\t\tif (accessLogValve == null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\taccessLogValve.setPrefix(customizePrefix(accessLogValve.getPrefix()));\n\t\t}\n\n\t\tprivate AccessLogValve findAccessLogValve(TomcatServletWebServerFactory factory) {\n\t\t\tfor (Valve engineValve : factory.getEngineValves()) {\n\t\t\t\tif (engineValve instanceof AccessLogValve) {\n\t\t\t\t\treturn (AccessLogValve) engineValve;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t}\n\n\tstatic class UndertowAccessLogCustomizer extends AccessLogCustomizer\n\t\t\timplements WebServerFactoryCustomizer<UndertowServletWebServerFactory> {\n\n\t\t@Override\n\t\tpublic void customize(UndertowServletWebServerFactory factory) {\n\t\t\tfactory.setAccessLogPrefix(customizePrefix(factory.getAccessLogPrefix()));\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
