@@ -0,0 +1,63 @@
+
+
+package org.springframework.boot.actuate.autoconfigure.metrics.export.wavefront;
+
+import io.micrometer.core.instrument.Clock;
+import io.micrometer.wavefront.WavefrontConfig;
+import io.micrometer.wavefront.WavefrontMeterRegistry;
+
+import org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration;
+import org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration;
+import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.AutoConfigureBefore;
+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
+import org.springframework.boot.context.properties.EnableConfigurationProperties;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+
+
+@Configuration
+@AutoConfigureBefore(SimpleMetricsExportAutoConfiguration.class)
+@AutoConfigureAfter(MetricsAutoConfiguration.class)
+@ConditionalOnBean(Clock.class)
+@ConditionalOnClass(WavefrontMeterRegistry.class)
+@ConditionalOnProperty(prefix = , name = , havingValue = , matchIfMissing = true)
+@EnableConfigurationProperties(WavefrontProperties.class)
+public class WavefrontMetricsExportAutoConfiguration {
+
+	@Bean
+	@ConditionalOnMissingBean(WavefrontConfig.class)
+	public WavefrontConfig wavefrontConfig(WavefrontProperties props) {
+		return new WavefrontPropertiesConfigAdapter(props);
+	}
+
+	@Bean(destroyMethod = )
+	@ConditionalOnMissingBean
+	public WavefrontMeterRegistry wavefrontMeterRegistry(WavefrontConfig config, Clock clock) {
+		return new WavefrontMeterRegistry(config, clock);
+	}
+}

