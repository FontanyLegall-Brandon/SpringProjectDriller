@@ -0,0 +1,101 @@
+
+
+package org.springframework.boot.autoconfigure.elasticsearch.rest;
+
+import org.apache.http.HttpHost;
+import org.apache.http.auth.AuthScope;
+import org.apache.http.auth.Credentials;
+import org.apache.http.auth.UsernamePasswordCredentials;
+import org.apache.http.client.CredentialsProvider;
+import org.apache.http.impl.client.BasicCredentialsProvider;
+import org.elasticsearch.client.RestClient;
+import org.elasticsearch.client.RestClientBuilder;
+import org.elasticsearch.client.RestHighLevelClient;
+
+import org.springframework.beans.factory.ObjectProvider;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.context.properties.PropertyMapper;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+
+class RestClientConfigurations {
+
+	@Configuration
+	static class RestClientBuilderConfiguration {
+
+		@Bean
+		@ConditionalOnMissingBean
+		RestClientBuilder restClientBuilder(RestClientProperties properties,
+				ObjectProvider<RestClientBuilderCustomizer> builderCustomizers) {
+			HttpHost[] hosts = properties.getUris().stream().map(HttpHost::create).toArray(HttpHost[]::new);
+			RestClientBuilder builder = RestClient.builder(hosts);
+			PropertyMapper map = PropertyMapper.get();
+			map.from(properties::getUsername).whenHasText().to((username) -> {
+				CredentialsProvider credentialsProvider = new BasicCredentialsProvider();
+				Credentials credentials = new UsernamePasswordCredentials(properties.getUsername(),
+						properties.getPassword());
+				credentialsProvider.setCredentials(AuthScope.ANY, credentials);
+				builder.setHttpClientConfigCallback(
+						(httpClientBuilder) -> httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider));
+			});
+			builderCustomizers.orderedStream().forEach((customizer) -> customizer.customize(builder));
+			return builder;
+		}
+
+	}
+
+	@Configuration
+	@ConditionalOnClass(RestHighLevelClient.class)
+	static class RestHighLevelClientConfiguration {
+
+		@Bean
+		@ConditionalOnMissingBean
+		RestHighLevelClient restHighLevelClient(RestClientBuilder restClientBuilder) {
+			return new RestHighLevelClient(restClientBuilder);
+		}
+
+		@Bean
+		@ConditionalOnMissingBean
+		RestClient restClient(RestClientBuilder builder, ObjectProvider<RestHighLevelClient> restHighLevelClient) {
+			RestHighLevelClient client = restHighLevelClient.getIfUnique();
+			if (client != null) {
+				return client.getLowLevelClient();
+			}
+			return builder.build();
+		}
+
+	}
+
+	@Configuration
+	static class RestClientFallbackConfiguration {
+
+		@Bean
+		@ConditionalOnMissingBean
+		RestClient restClient(RestClientBuilder builder) {
+			return builder.build();
+		}
+
+	}
+
+}

