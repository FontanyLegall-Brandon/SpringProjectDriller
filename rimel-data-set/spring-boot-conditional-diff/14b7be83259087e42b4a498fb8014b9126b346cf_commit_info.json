{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -147,7 +147,6 @@ public class IntegrationAutoConfiguration {\n \n \t\t@Bean\n \t\t@ConditionalOnMissingBean\n-\t\t@ConditionalOnProperty(prefix = "spring.integration.jdbc.initializer", name = "enabled")\n \t\tpublic IntegrationDatabaseInitializer integrationDatabaseInitializer(\n \t\t\t\tDataSource dataSource, ResourceLoader resourceLoader,\n \t\t\t\tIntegrationProperties properties) {\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.integration;\n\nimport javax.management.MBeanServer;\nimport javax.sql.DataSource;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.EnvironmentAware;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.core.env.Environment;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.integration.config.EnableIntegration;\nimport org.springframework.integration.config.EnableIntegrationManagement;\nimport org.springframework.integration.gateway.GatewayProxyFactoryBean;\nimport org.springframework.integration.jdbc.store.JdbcMessageStore;\nimport org.springframework.integration.jmx.config.EnableIntegrationMBeanExport;\nimport org.springframework.integration.monitor.IntegrationMBeanExporter;\nimport org.springframework.integration.support.management.IntegrationManagementConfigurer;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link org.springframework.boot.autoconfigure.EnableAutoConfiguration\n * Auto-configuration} for Spring Integration.\n *\n * @author Artem Bilan\n * @author Dave Syer\n * @author Stephane Nicoll\n * @author Vedran Pavic\n * @author Madhura Bhave\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass(EnableIntegration.class)\n@EnableConfigurationProperties(IntegrationProperties.class)\n@AutoConfigureAfter(JmxAutoConfiguration.class)\npublic class IntegrationAutoConfiguration {\n\n\t/**\n\t * Basic Spring Integration configuration.\n\t */\n\t@Configuration\n\t@EnableIntegration\n\tprotected static class IntegrationConfiguration {\n\n\t}\n\n\t/**\n\t * Spring Integration JMX configuration.\n\t */\n\t@Configuration\n\t@ConditionalOnClass(EnableIntegrationMBeanExport.class)\n\t@ConditionalOnMissingBean(value = IntegrationMBeanExporter.class, search = SearchStrategy.CURRENT)\n\t@ConditionalOnProperty(prefix = "spring.jmx", name = "enabled", havingValue = "true", matchIfMissing = true)\n\tprotected static class IntegrationJmxConfiguration\n\t\t\timplements EnvironmentAware, BeanFactoryAware {\n\n\t\tprivate BeanFactory beanFactory;\n\n\t\tprivate Environment environment;\n\n\t\t@Override\n\t\tpublic void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n\t\t\tthis.beanFactory = beanFactory;\n\t\t}\n\n\t\t@Override\n\t\tpublic void setEnvironment(Environment environment) {\n\t\t\tthis.environment = environment;\n\t\t}\n\n\t\t@Bean\n\t\tpublic IntegrationMBeanExporter integrationMbeanExporter() {\n\t\t\tIntegrationMBeanExporter exporter = new IntegrationMBeanExporter();\n\t\t\tString defaultDomain = this.environment\n\t\t\t\t\t.getProperty("spring.jmx.default-domain");\n\t\t\tif (StringUtils.hasLength(defaultDomain)) {\n\t\t\t\texporter.setDefaultDomain(defaultDomain);\n\t\t\t}\n\t\t\tString serverBean = this.environment.getProperty("spring.jmx.server",\n\t\t\t\t\t"mbeanServer");\n\t\t\texporter.setServer(this.beanFactory.getBean(serverBean, MBeanServer.class));\n\t\t\treturn exporter;\n\t\t}\n\n\t}\n\n\t/**\n\t * Integration management configuration.\n\t */\n\t@Configuration\n\t@ConditionalOnClass({ EnableIntegrationManagement.class,\n\t\t\tEnableIntegrationMBeanExport.class })\n\t@ConditionalOnMissingBean(value = IntegrationManagementConfigurer.class, name = IntegrationManagementConfigurer.MANAGEMENT_CONFIGURER_NAME, search = SearchStrategy.CURRENT)\n\t@ConditionalOnProperty(prefix = "spring.jmx", name = "enabled", havingValue = "true", matchIfMissing = true)\n\tprotected static class IntegrationManagementConfiguration {\n\n\t\t@Configuration\n\t\t@EnableIntegrationManagement(defaultCountsEnabled = "true", defaultStatsEnabled = "true")\n\t\tprotected static class EnableIntegrationManagementConfiguration {\n\t\t}\n\n\t}\n\n\t/**\n\t * Integration component scan configuration.\n\t */\n\t@ConditionalOnMissingBean(GatewayProxyFactoryBean.class)\n\t@Import(IntegrationAutoConfigurationScanRegistrar.class)\n\tprotected static class IntegrationComponentScanAutoConfiguration {\n\n\t}\n\n\t/**\n\t * Integration JDBC configuration.\n\t */\n\t@Configuration\n\t@ConditionalOnClass(JdbcMessageStore.class)\n\t@ConditionalOnSingleCandidate(DataSource.class)\n\tprotected static class IntegrationJdbcConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic IntegrationDatabaseInitializer integrationDatabaseInitializer(\n\t\t\t\tDataSource dataSource, ResourceLoader resourceLoader,\n\t\t\t\tIntegrationProperties properties) {\n\t\t\treturn new IntegrationDatabaseInitializer(dataSource, resourceLoader,\n\t\t\t\t\tproperties);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.integration;\n\nimport javax.management.MBeanServer;\nimport javax.sql.DataSource;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.EnvironmentAware;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.core.env.Environment;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.integration.config.EnableIntegration;\nimport org.springframework.integration.config.EnableIntegrationManagement;\nimport org.springframework.integration.gateway.GatewayProxyFactoryBean;\nimport org.springframework.integration.jdbc.store.JdbcMessageStore;\nimport org.springframework.integration.jmx.config.EnableIntegrationMBeanExport;\nimport org.springframework.integration.monitor.IntegrationMBeanExporter;\nimport org.springframework.integration.support.management.IntegrationManagementConfigurer;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link org.springframework.boot.autoconfigure.EnableAutoConfiguration\n * Auto-configuration} for Spring Integration.\n *\n * @author Artem Bilan\n * @author Dave Syer\n * @author Stephane Nicoll\n * @author Vedran Pavic\n * @author Madhura Bhave\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass(EnableIntegration.class)\n@EnableConfigurationProperties(IntegrationProperties.class)\n@AutoConfigureAfter(JmxAutoConfiguration.class)\npublic class IntegrationAutoConfiguration {\n\n\t/**\n\t * Basic Spring Integration configuration.\n\t */\n\t@Configuration\n\t@EnableIntegration\n\tprotected static class IntegrationConfiguration {\n\n\t}\n\n\t/**\n\t * Spring Integration JMX configuration.\n\t */\n\t@Configuration\n\t@ConditionalOnClass(EnableIntegrationMBeanExport.class)\n\t@ConditionalOnMissingBean(value = IntegrationMBeanExporter.class, search = SearchStrategy.CURRENT)\n\t@ConditionalOnProperty(prefix = "spring.jmx", name = "enabled", havingValue = "true", matchIfMissing = true)\n\tprotected static class IntegrationJmxConfiguration\n\t\t\timplements EnvironmentAware, BeanFactoryAware {\n\n\t\tprivate BeanFactory beanFactory;\n\n\t\tprivate Environment environment;\n\n\t\t@Override\n\t\tpublic void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n\t\t\tthis.beanFactory = beanFactory;\n\t\t}\n\n\t\t@Override\n\t\tpublic void setEnvironment(Environment environment) {\n\t\t\tthis.environment = environment;\n\t\t}\n\n\t\t@Bean\n\t\tpublic IntegrationMBeanExporter integrationMbeanExporter() {\n\t\t\tIntegrationMBeanExporter exporter = new IntegrationMBeanExporter();\n\t\t\tString defaultDomain = this.environment\n\t\t\t\t\t.getProperty("spring.jmx.default-domain");\n\t\t\tif (StringUtils.hasLength(defaultDomain)) {\n\t\t\t\texporter.setDefaultDomain(defaultDomain);\n\t\t\t}\n\t\t\tString serverBean = this.environment.getProperty("spring.jmx.server",\n\t\t\t\t\t"mbeanServer");\n\t\t\texporter.setServer(this.beanFactory.getBean(serverBean, MBeanServer.class));\n\t\t\treturn exporter;\n\t\t}\n\n\t}\n\n\t/**\n\t * Integration management configuration.\n\t */\n\t@Configuration\n\t@ConditionalOnClass({ EnableIntegrationManagement.class,\n\t\t\tEnableIntegrationMBeanExport.class })\n\t@ConditionalOnMissingBean(value = IntegrationManagementConfigurer.class, name = IntegrationManagementConfigurer.MANAGEMENT_CONFIGURER_NAME, search = SearchStrategy.CURRENT)\n\t@ConditionalOnProperty(prefix = "spring.jmx", name = "enabled", havingValue = "true", matchIfMissing = true)\n\tprotected static class IntegrationManagementConfiguration {\n\n\t\t@Configuration\n\t\t@EnableIntegrationManagement(defaultCountsEnabled = "true", defaultStatsEnabled = "true")\n\t\tprotected static class EnableIntegrationManagementConfiguration {\n\t\t}\n\n\t}\n\n\t/**\n\t * Integration component scan configuration.\n\t */\n\t@ConditionalOnMissingBean(GatewayProxyFactoryBean.class)\n\t@Import(IntegrationAutoConfigurationScanRegistrar.class)\n\tprotected static class IntegrationComponentScanAutoConfiguration {\n\n\t}\n\n\t/**\n\t * Integration JDBC configuration.\n\t */\n\t@Configuration\n\t@ConditionalOnClass(JdbcMessageStore.class)\n\t@ConditionalOnSingleCandidate(DataSource.class)\n\tprotected static class IntegrationJdbcConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnProperty(prefix = "spring.integration.jdbc.initializer", name = "enabled")\n\t\tpublic IntegrationDatabaseInitializer integrationDatabaseInitializer(\n\t\t\t\tDataSource dataSource, ResourceLoader resourceLoader,\n\t\t\t\tIntegrationProperties properties) {\n\t\t\treturn new IntegrationDatabaseInitializer(dataSource, resourceLoader,\n\t\t\t\t\tproperties);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
