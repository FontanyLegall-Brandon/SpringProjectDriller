{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/cache/CacheConfigFileConditionTests.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2012-2015 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.cache;\n+\n+import org.junit.After;\n+import org.junit.Test;\n+\n+import org.springframework.boot.test.EnvironmentTestUtils;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Conditional;\n+import org.springframework.context.annotation.Configuration;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test for {@link CacheConfigFileCondition}.\n+ *\n+ * @author Stephane Nicoll\n+ */\n+public class CacheConfigFileConditionTests {\n+\n+\tprivate ConfigurableApplicationContext context;\n+\n+\t@After\n+\tpublic void tearDown() {\n+\t\tif (this.context != null) {\n+\t\t\tthis.context.close();\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void defaultFileAndNoExplicitKey() {\n+\t\tload(DefaultFileConfiguration.class);\n+\t\tassertTrue(this.context.containsBean("foo"));\n+\t}\n+\n+\t@Test\n+\tpublic void noDefaultFileAndNoExplicitKey() {\n+\t\tload(NoDefaultFileConfiguration.class);\n+\t\tassertFalse(this.context.containsBean("foo"));\n+\t}\n+\n+\t@Test\n+\tpublic void noDefaultFileAndExplicitKeyToResource() {\n+\t\tload(NoDefaultFileConfiguration.class, "spring.cache.test.config=ehcache.xml");\n+\t\tassertTrue(this.context.containsBean("foo"));\n+\t}\n+\n+\tprivate void load(Class<?> config,\n+\t\t\tString... environment) {\n+\t\tAnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext();\n+\t\tEnvironmentTestUtils.addEnvironment(applicationContext, environment);\n+\t\tapplicationContext.register(config);\n+\t\tapplicationContext.refresh();\n+\t\tthis.context = applicationContext;\n+\t}\n+\n+\n+\t@Configuration\n+\t@Conditional(CacheConfigFileDefaultFileCondition.class)\n+\tstatic class DefaultFileConfiguration {\n+\n+\t\t@Bean\n+\t\tpublic String foo() {\n+\t\t\treturn "foo";\n+\t\t}\n+\t}\n+\n+\t@Configuration\n+\t@Conditional(CacheConfigFileNoDefaultFileCondition.class)\n+\tstatic class NoDefaultFileConfiguration {\n+\n+\t\t@Bean\n+\t\tpublic String foo() {\n+\t\t\treturn "foo";\n+\t\t}\n+\t}\n+\n+\tprivate static class CacheConfigFileDefaultFileCondition extends CacheConfigFileCondition {\n+\n+\t\tpublic CacheConfigFileDefaultFileCondition() {\n+\t\t\tsuper("test", "spring.cache.test.", "classpath:/ehcache.xml");\n+\t\t}\n+\t}\n+\n+\tprivate static class CacheConfigFileNoDefaultFileCondition extends CacheConfigFileCondition {\n+\t\tpublic CacheConfigFileNoDefaultFileCondition() {\n+\t\t\tsuper("test", "spring.cache.test", "classpath:/this-cache-file-does-not-exist.xml");\n+\t\t}\n+\n+\t}\n+}\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.cache;\n\nimport org.junit.After;\nimport org.junit.Test;\n\nimport org.springframework.boot.test.EnvironmentTestUtils;\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\n\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\n/**\n * Test for {@link CacheConfigFileCondition}.\n *\n * @author Stephane Nicoll\n */\npublic class CacheConfigFileConditionTests {\n\n\tprivate ConfigurableApplicationContext context;\n\n\t@After\n\tpublic void tearDown() {\n\t\tif (this.context != null) {\n\t\t\tthis.context.close();\n\t\t}\n\t}\n\n\t@Test\n\tpublic void defaultFileAndNoExplicitKey() {\n\t\tload(DefaultFileConfiguration.class);\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void noDefaultFileAndNoExplicitKey() {\n\t\tload(NoDefaultFileConfiguration.class);\n\t\tassertFalse(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void noDefaultFileAndExplicitKeyToResource() {\n\t\tload(NoDefaultFileConfiguration.class, "spring.cache.test.config=ehcache.xml");\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\tprivate void load(Class<?> config,\n\t\t\tString... environment) {\n\t\tAnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext();\n\t\tEnvironmentTestUtils.addEnvironment(applicationContext, environment);\n\t\tapplicationContext.register(config);\n\t\tapplicationContext.refresh();\n\t\tthis.context = applicationContext;\n\t}\n\n\n\t@Configuration\n\t@Conditional(CacheConfigFileDefaultFileCondition.class)\n\tstatic class DefaultFileConfiguration {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\t}\n\n\t@Configuration\n\t@Conditional(CacheConfigFileNoDefaultFileCondition.class)\n\tstatic class NoDefaultFileConfiguration {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\t}\n\n\tprivate static class CacheConfigFileDefaultFileCondition extends CacheConfigFileCondition {\n\n\t\tpublic CacheConfigFileDefaultFileCondition() {\n\t\t\tsuper("test", "spring.cache.test.", "classpath:/ehcache.xml");\n\t\t}\n\t}\n\n\tprivate static class CacheConfigFileNoDefaultFileCondition extends CacheConfigFileCondition {\n\t\tpublic CacheConfigFileNoDefaultFileCondition() {\n\t\t\tsuper("test", "spring.cache.test", "classpath:/this-cache-file-does-not-exist.xml");\n\t\t}\n\n\t}\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
