{'_old_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricExportAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricExportAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -29,6 +29,7 @@ import org.springframework.boot.actuate.metrics.export.MetricExporters;\n import org.springframework.boot.actuate.metrics.reader.CompositeMetricReader;\n import org.springframework.boot.actuate.metrics.reader.MetricReader;\n import org.springframework.boot.actuate.metrics.writer.MetricWriter;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n@@ -37,9 +38,13 @@ import org.springframework.context.annotation.Configuration;\n import org.springframework.scheduling.annotation.EnableScheduling;\n import org.springframework.scheduling.annotation.SchedulingConfigurer;\n import org.springframework.scheduling.config.ScheduledTaskRegistrar;\n+import org.springframework.util.CollectionUtils;\n \n /**\n+ * {@link EnableAutoConfiguration Auto-configuration} for metrics export.\n+ *\n  * @author Dave Syer\n+ * @since 1.3.0\n  */\n @Configuration\n @EnableScheduling\n@@ -47,22 +52,39 @@ import org.springframework.scheduling.config.ScheduledTaskRegistrar;\n @EnableConfigurationProperties\n public class MetricExportAutoConfiguration {\n \n-\t@Autowired(required = false)\n-\t@ExportMetricWriter\n-\tprivate Map<String, MetricWriter> writers = Collections.emptyMap();\n-\n \t@Autowired\n-\tprivate MetricExportProperties metrics;\n+\tprivate MetricExportProperties properties;\n+\n+\t@Autowired(required = false)\n+\tprivate MetricsEndpointMetricReader endpointReader;\n \n \t@Autowired(required = false)\n \t@ExportMetricReader\n \tprivate List<MetricReader> readers;\n \n \t@Autowired(required = false)\n-\tprivate MetricsEndpointMetricReader endpointReader;\n+\t@ExportMetricWriter\n+\tprivate Map<String, MetricWriter> writers = Collections.emptyMap();\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean(name = "metricWritersMetricExporter")\n+\tpublic SchedulingConfigurer metricWritersMetricExporter() {\n+\t\tMap<String, MetricWriter> writers = new HashMap<String, MetricWriter>();\n+\t\tMetricReader reader = this.endpointReader;\n+\t\tif (reader == null && !CollectionUtils.isEmpty(this.readers)) {\n+\t\t\treader = new CompositeMetricReader(\n+\t\t\t\t\tthis.readers.toArray(new MetricReader[this.readers.size()]));\n+\t\t}\n+\t\tif (reader != null) {\n+\t\t\twriters.putAll(this.writers);\n+\t\t\treturn new MetricExporters(reader, writers, this.properties);\n+\t\t}\n+\t\treturn new NoOpSchedulingConfigurer();\n+\t}\n \n \t@Configuration\n \tprotected static class MetricExportPropertiesConfiguration {\n+\n \t\t@Value("spring.metrics.${random.value:0000}.${spring.application.name:application}")\n \t\tprivate String prefix = "spring.metrics";\n \n@@ -70,36 +92,18 @@ public class MetricExportAutoConfiguration {\n \t\t@ConditionalOnMissingBean\n \t\tpublic MetricExportProperties metricExportProperties() {\n \t\t\tMetricExportProperties export = new MetricExportProperties();\n-\t\t\texport.getRedis().setPrefix(prefix);\n+\t\t\texport.getRedis().setPrefix(this.prefix);\n \t\t\treturn export;\n \t\t}\n-\t}\n-\n-\t@Bean\n-\t@ConditionalOnMissingBean(name = "metricWritersMetricExporter")\n-\tpublic SchedulingConfigurer metricWritersMetricExporter() {\n \n-\t\tMap<String, MetricWriter> writers = new HashMap<String, MetricWriter>();\n+\t}\n \n-\t\tMetricReader reader = this.endpointReader;\n-\t\tif (reader == null && this.readers != null && !this.readers.isEmpty()) {\n-\t\t\treader = new CompositeMetricReader(\n-\t\t\t\t\tthis.readers.toArray(new MetricReader[this.readers.size()]));\n-\t\t}\n+\tprivate static class NoOpSchedulingConfigurer implements SchedulingConfigurer {\n \n-\t\tif (reader != null) {\n-\t\t\twriters.putAll(this.writers);\n-\t\t\tMetricExporters exporters = new MetricExporters(reader, writers, this.metrics);\n-\t\t\treturn exporters;\n+\t\t@Override\n+\t\tpublic void configureTasks(ScheduledTaskRegistrar taskRegistrar) {\n \t\t}\n \n-\t\treturn new SchedulingConfigurer() {\n-\n-\t\t\t@Override\n-\t\t\tpublic void configureTasks(ScheduledTaskRegistrar taskRegistrar) {\n-\t\t\t}\n-\t\t};\n-\n \t}\n \n }\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.actuate.endpoint.MetricsEndpointMetricReader;\nimport org.springframework.boot.actuate.metrics.export.MetricExportProperties;\nimport org.springframework.boot.actuate.metrics.export.MetricExporters;\nimport org.springframework.boot.actuate.metrics.reader.CompositeMetricReader;\nimport org.springframework.boot.actuate.metrics.reader.MetricReader;\nimport org.springframework.boot.actuate.metrics.writer.MetricWriter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.scheduling.annotation.EnableScheduling;\nimport org.springframework.scheduling.annotation.SchedulingConfigurer;\nimport org.springframework.scheduling.config.ScheduledTaskRegistrar;\nimport org.springframework.util.CollectionUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for metrics export.\n *\n * @author Dave Syer\n * @since 1.3.0\n */\n@Configuration\n@EnableScheduling\n@ConditionalOnProperty(value = "spring.metrics.export.enabled", matchIfMissing = true)\n@EnableConfigurationProperties\npublic class MetricExportAutoConfiguration {\n\n\t@Autowired\n\tprivate MetricExportProperties properties;\n\n\t@Autowired(required = false)\n\tprivate MetricsEndpointMetricReader endpointReader;\n\n\t@Autowired(required = false)\n\t@ExportMetricReader\n\tprivate List<MetricReader> readers;\n\n\t@Autowired(required = false)\n\t@ExportMetricWriter\n\tprivate Map<String, MetricWriter> writers = Collections.emptyMap();\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "metricWritersMetricExporter")\n\tpublic SchedulingConfigurer metricWritersMetricExporter() {\n\t\tMap<String, MetricWriter> writers = new HashMap<String, MetricWriter>();\n\t\tMetricReader reader = this.endpointReader;\n\t\tif (reader == null && !CollectionUtils.isEmpty(this.readers)) {\n\t\t\treader = new CompositeMetricReader(\n\t\t\t\t\tthis.readers.toArray(new MetricReader[this.readers.size()]));\n\t\t}\n\t\tif (reader != null) {\n\t\t\twriters.putAll(this.writers);\n\t\t\treturn new MetricExporters(reader, writers, this.properties);\n\t\t}\n\t\treturn new NoOpSchedulingConfigurer();\n\t}\n\n\t@Configuration\n\tprotected static class MetricExportPropertiesConfiguration {\n\n\t\t@Value("spring.metrics.${random.value:0000}.${spring.application.name:application}")\n\t\tprivate String prefix = "spring.metrics";\n\n\t\t@Bean(name = "spring.metrics.export.CONFIGURATION_PROPERTIES")\n\t\t@ConditionalOnMissingBean\n\t\tpublic MetricExportProperties metricExportProperties() {\n\t\t\tMetricExportProperties export = new MetricExportProperties();\n\t\t\texport.getRedis().setPrefix(this.prefix);\n\t\t\treturn export;\n\t\t}\n\n\t}\n\n\tprivate static class NoOpSchedulingConfigurer implements SchedulingConfigurer {\n\n\t\t@Override\n\t\tpublic void configureTasks(ScheduledTaskRegistrar taskRegistrar) {\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.actuate.endpoint.MetricsEndpointMetricReader;\nimport org.springframework.boot.actuate.metrics.export.MetricExportProperties;\nimport org.springframework.boot.actuate.metrics.export.MetricExporters;\nimport org.springframework.boot.actuate.metrics.reader.CompositeMetricReader;\nimport org.springframework.boot.actuate.metrics.reader.MetricReader;\nimport org.springframework.boot.actuate.metrics.writer.MetricWriter;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.scheduling.annotation.EnableScheduling;\nimport org.springframework.scheduling.annotation.SchedulingConfigurer;\nimport org.springframework.scheduling.config.ScheduledTaskRegistrar;\n\n/**\n * @author Dave Syer\n */\n@Configuration\n@EnableScheduling\n@ConditionalOnProperty(value = "spring.metrics.export.enabled", matchIfMissing = true)\n@EnableConfigurationProperties\npublic class MetricExportAutoConfiguration {\n\n\t@Autowired(required = false)\n\t@ExportMetricWriter\n\tprivate Map<String, MetricWriter> writers = Collections.emptyMap();\n\n\t@Autowired\n\tprivate MetricExportProperties metrics;\n\n\t@Autowired(required = false)\n\t@ExportMetricReader\n\tprivate List<MetricReader> readers;\n\n\t@Autowired(required = false)\n\tprivate MetricsEndpointMetricReader endpointReader;\n\n\t@Configuration\n\tprotected static class MetricExportPropertiesConfiguration {\n\t\t@Value("spring.metrics.${random.value:0000}.${spring.application.name:application}")\n\t\tprivate String prefix = "spring.metrics";\n\n\t\t@Bean(name = "spring.metrics.export.CONFIGURATION_PROPERTIES")\n\t\t@ConditionalOnMissingBean\n\t\tpublic MetricExportProperties metricExportProperties() {\n\t\t\tMetricExportProperties export = new MetricExportProperties();\n\t\t\texport.getRedis().setPrefix(prefix);\n\t\t\treturn export;\n\t\t}\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "metricWritersMetricExporter")\n\tpublic SchedulingConfigurer metricWritersMetricExporter() {\n\n\t\tMap<String, MetricWriter> writers = new HashMap<String, MetricWriter>();\n\n\t\tMetricReader reader = this.endpointReader;\n\t\tif (reader == null && this.readers != null && !this.readers.isEmpty()) {\n\t\t\treader = new CompositeMetricReader(\n\t\t\t\t\tthis.readers.toArray(new MetricReader[this.readers.size()]));\n\t\t}\n\n\t\tif (reader != null) {\n\t\t\twriters.putAll(this.writers);\n\t\t\tMetricExporters exporters = new MetricExporters(reader, writers, this.metrics);\n\t\t\treturn exporters;\n\t\t}\n\n\t\treturn new SchedulingConfigurer() {\n\n\t\t\t@Override\n\t\t\tpublic void configureTasks(ScheduledTaskRegistrar taskRegistrar) {\n\t\t\t}\n\t\t};\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
