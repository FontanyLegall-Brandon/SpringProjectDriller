{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailSenderAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailSenderAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -18,24 +18,26 @@ package org.springframework.boot.autoconfigure.mail;\n \n import java.util.Map;\n import java.util.Properties;\n-\n import javax.activation.MimeType;\n+import javax.annotation.PostConstruct;\n import javax.mail.MessagingException;\n import javax.mail.Session;\n import javax.mail.internet.MimeMessage;\n+import javax.naming.NamingException;\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnJndi;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n-import org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration.MailSenderCondition;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.context.annotation.Import;\n+import org.springframework.jndi.JndiLocatorDelegate;\n import org.springframework.mail.MailSender;\n import org.springframework.mail.javamail.JavaMailSenderImpl;\n \n@@ -49,79 +51,116 @@ import org.springframework.mail.javamail.JavaMailSenderImpl;\n  */\n @Configuration\n @ConditionalOnClass({ MimeMessage.class, MimeType.class })\n-@ConditionalOnMissingBean(MailSender.class)\n-@Conditional(MailSenderCondition.class)\n @EnableConfigurationProperties(MailProperties.class)\n-@Import(JndiSessionConfiguration.class)\n public class MailSenderAutoConfiguration {\n \n-\t@Autowired(required = false)\n-\tprivate Session session;\n+\t@Configuration\n+\t@ConditionalOnClass(Session.class)\n+\t@ConditionalOnProperty(prefix = "spring.mail", name = "jndi-name")\n+\t@ConditionalOnJndi\n+\tstatic class JndiSessionConfiguration {\n \n-\t@Autowired\n-\tprivate MailProperties properties;\n+\t\t@Autowired\n+\t\tprivate MailProperties properties;\n \n-\t@Bean\n-\tpublic JavaMailSenderImpl mailSender() {\n-\t\tJavaMailSenderImpl sender = new JavaMailSenderImpl();\n-\t\tif (this.session != null) {\n-\t\t\tsender.setSession(this.session);\n-\t\t}\n-\t\telse {\n-\t\t\tapplyProperties(sender);\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean\n+\t\tpublic Session session() {\n+\t\t\tString jndiName = this.properties.getJndiName();\n+\t\t\ttry {\n+\t\t\t\treturn new JndiLocatorDelegate().lookup(jndiName, Session.class);\n+\t\t\t}\n+\t\t\tcatch (NamingException ex) {\n+\t\t\t\tthrow new IllegalStateException(String.format(\n+\t\t\t\t\t\t"Unable to find Session in JNDI location %s", jndiName), ex);\n+\t\t\t}\n \t\t}\n-\t\tvalidateConnection(sender);\n-\t\treturn sender;\n+\n \t}\n \n-\tprivate void validateConnection(JavaMailSenderImpl sender) {\n-\t\tif (this.properties.isTestConnection()) {\n-\t\t\ttry {\n-\t\t\t\tsender.testConnection();\n-\t\t\t} catch (MessagingException ex) {\n-\t\t\t\tthrow new IllegalStateException(\n-\t\t\t\t\t\tString.format("Unable to ping to %s", this.properties.getHost()), ex);\n+\t@ConditionalOnMissingBean(MailSender.class)\n+\t@Conditional(MailSenderConfiguration.MailSenderCondition.class)\n+\tstatic class MailSenderConfiguration {\n+\n+\t\t@Autowired\n+\t\tprivate MailProperties properties;\n+\n+\t\t@Autowired(required = false)\n+\t\tprivate Session session;\n+\n+\t\t@Bean\n+\t\tpublic JavaMailSenderImpl mailSender() {\n+\t\t\tJavaMailSenderImpl sender = new JavaMailSenderImpl();\n+\t\t\tif (this.session != null) {\n+\t\t\t\tsender.setSession(this.session);\n \t\t\t}\n+\t\t\telse {\n+\t\t\t\tapplyProperties(sender);\n+\t\t\t}\n+\t\t\treturn sender;\n \t\t}\n-\t}\n \n-\tprivate void applyProperties(JavaMailSenderImpl sender) {\n-\t\tsender.setHost(this.properties.getHost());\n-\t\tif (this.properties.getPort() != null) {\n-\t\t\tsender.setPort(this.properties.getPort());\n+\t\tprivate void applyProperties(JavaMailSenderImpl sender) {\n+\t\t\tsender.setHost(this.properties.getHost());\n+\t\t\tif (this.properties.getPort() != null) {\n+\t\t\t\tsender.setPort(this.properties.getPort());\n+\t\t\t}\n+\t\t\tsender.setUsername(this.properties.getUsername());\n+\t\t\tsender.setPassword(this.properties.getPassword());\n+\t\t\tsender.setDefaultEncoding(this.properties.getDefaultEncoding());\n+\t\t\tif (!this.properties.getProperties().isEmpty()) {\n+\t\t\t\tsender.setJavaMailProperties(asProperties(this.properties.getProperties()));\n+\t\t\t}\n \t\t}\n-\t\tsender.setUsername(this.properties.getUsername());\n-\t\tsender.setPassword(this.properties.getPassword());\n-\t\tsender.setDefaultEncoding(this.properties.getDefaultEncoding());\n-\t\tif (!this.properties.getProperties().isEmpty()) {\n-\t\t\tsender.setJavaMailProperties(asProperties(this.properties.getProperties()));\n+\n+\t\tprivate Properties asProperties(Map<String, String> source) {\n+\t\t\tProperties properties = new Properties();\n+\t\t\tproperties.putAll(source);\n+\t\t\treturn properties;\n \t\t}\n-\t}\n \n-\tprivate Properties asProperties(Map<String, String> source) {\n-\t\tProperties properties = new Properties();\n-\t\tproperties.putAll(source);\n-\t\treturn properties;\n-\t}\n+\t\t/**\n+\t\t * Condition to trigger the creation of a {@link JavaMailSenderImpl}. This kicks in if\n+\t\t * either the host or jndi name property is set.\n+\t\t */\n+\t\tstatic class MailSenderCondition extends AnyNestedCondition {\n \n-\t/**\n-\t * Condition to trigger the creation of a {@link JavaMailSenderImpl}. This kicks in if\n-\t * either the host or jndi name property is set.\n-\t */\n-\tstatic class MailSenderCondition extends AnyNestedCondition {\n+\t\t\tpublic MailSenderCondition() {\n+\t\t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION);\n+\t\t\t}\n \n-\t\tpublic MailSenderCondition() {\n-\t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION);\n-\t\t}\n+\t\t\t@ConditionalOnProperty(prefix = "spring.mail", name = "host")\n+\t\t\tstatic class HostProperty {\n+\t\t\t}\n \n-\t\t@ConditionalOnProperty(prefix = "spring.mail", name = "host")\n-\t\tstatic class HostProperty {\n-\t\t}\n+\t\t\t@ConditionalOnProperty(prefix = "spring.mail", name = "jndi-name")\n+\t\t\tstatic class JndiNameProperty {\n+\t\t\t}\n \n-\t\t@ConditionalOnProperty(prefix = "spring.mail", name = "jndi-name")\n-\t\tstatic class JndiNameProperty {\n \t\t}\n+\t}\n \n+\t@Configuration\n+\t@ConditionalOnSingleCandidate(JavaMailSenderImpl.class)\n+\tstatic class MailSenderValidator {\n+\n+\t\t@Autowired\n+\t\tprivate MailProperties properties;\n+\n+\t\t@Autowired\n+\t\tprivate JavaMailSenderImpl mailSender;\n+\n+\t\t@PostConstruct\n+\t\tpublic void validateConnection() {\n+\t\t\tif (this.properties.isTestConnection()) {\n+\t\t\t\ttry {\n+\t\t\t\t\tthis.mailSender.testConnection();\n+\t\t\t\t}\n+\t\t\t\tcatch (MessagingException ex) {\n+\t\t\t\t\tthrow new IllegalStateException("Mail server is not unavailable", ex);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n \t}\n \n }\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.mail;\n\nimport java.util.Map;\nimport java.util.Properties;\nimport javax.activation.MimeType;\nimport javax.annotation.PostConstruct;\nimport javax.mail.MessagingException;\nimport javax.mail.Session;\nimport javax.mail.internet.MimeMessage;\nimport javax.naming.NamingException;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnJndi;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jndi.JndiLocatorDelegate;\nimport org.springframework.mail.MailSender;\nimport org.springframework.mail.javamail.JavaMailSenderImpl;\n\n/**\n * {@link EnableAutoConfiguration Auto configuration} for email support.\n *\n * @author Oliver Gierke\n * @author Stephane Nicoll\n * @author Eddú Meléndez\n * @since 1.2.0\n */\n@Configuration\n@ConditionalOnClass({ MimeMessage.class, MimeType.class })\n@EnableConfigurationProperties(MailProperties.class)\npublic class MailSenderAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnClass(Session.class)\n\t@ConditionalOnProperty(prefix = "spring.mail", name = "jndi-name")\n\t@ConditionalOnJndi\n\tstatic class JndiSessionConfiguration {\n\n\t\t@Autowired\n\t\tprivate MailProperties properties;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic Session session() {\n\t\t\tString jndiName = this.properties.getJndiName();\n\t\t\ttry {\n\t\t\t\treturn new JndiLocatorDelegate().lookup(jndiName, Session.class);\n\t\t\t}\n\t\t\tcatch (NamingException ex) {\n\t\t\t\tthrow new IllegalStateException(String.format(\n\t\t\t\t\t\t"Unable to find Session in JNDI location %s", jndiName), ex);\n\t\t\t}\n\t\t}\n\n\t}\n\n\t@ConditionalOnMissingBean(MailSender.class)\n\t@Conditional(MailSenderConfiguration.MailSenderCondition.class)\n\tstatic class MailSenderConfiguration {\n\n\t\t@Autowired\n\t\tprivate MailProperties properties;\n\n\t\t@Autowired(required = false)\n\t\tprivate Session session;\n\n\t\t@Bean\n\t\tpublic JavaMailSenderImpl mailSender() {\n\t\t\tJavaMailSenderImpl sender = new JavaMailSenderImpl();\n\t\t\tif (this.session != null) {\n\t\t\t\tsender.setSession(this.session);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tapplyProperties(sender);\n\t\t\t}\n\t\t\treturn sender;\n\t\t}\n\n\t\tprivate void applyProperties(JavaMailSenderImpl sender) {\n\t\t\tsender.setHost(this.properties.getHost());\n\t\t\tif (this.properties.getPort() != null) {\n\t\t\t\tsender.setPort(this.properties.getPort());\n\t\t\t}\n\t\t\tsender.setUsername(this.properties.getUsername());\n\t\t\tsender.setPassword(this.properties.getPassword());\n\t\t\tsender.setDefaultEncoding(this.properties.getDefaultEncoding());\n\t\t\tif (!this.properties.getProperties().isEmpty()) {\n\t\t\t\tsender.setJavaMailProperties(asProperties(this.properties.getProperties()));\n\t\t\t}\n\t\t}\n\n\t\tprivate Properties asProperties(Map<String, String> source) {\n\t\t\tProperties properties = new Properties();\n\t\t\tproperties.putAll(source);\n\t\t\treturn properties;\n\t\t}\n\n\t\t/**\n\t\t * Condition to trigger the creation of a {@link JavaMailSenderImpl}. This kicks in if\n\t\t * either the host or jndi name property is set.\n\t\t */\n\t\tstatic class MailSenderCondition extends AnyNestedCondition {\n\n\t\t\tpublic MailSenderCondition() {\n\t\t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION);\n\t\t\t}\n\n\t\t\t@ConditionalOnProperty(prefix = "spring.mail", name = "host")\n\t\t\tstatic class HostProperty {\n\t\t\t}\n\n\t\t\t@ConditionalOnProperty(prefix = "spring.mail", name = "jndi-name")\n\t\t\tstatic class JndiNameProperty {\n\t\t\t}\n\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnSingleCandidate(JavaMailSenderImpl.class)\n\tstatic class MailSenderValidator {\n\n\t\t@Autowired\n\t\tprivate MailProperties properties;\n\n\t\t@Autowired\n\t\tprivate JavaMailSenderImpl mailSender;\n\n\t\t@PostConstruct\n\t\tpublic void validateConnection() {\n\t\t\tif (this.properties.isTestConnection()) {\n\t\t\t\ttry {\n\t\t\t\t\tthis.mailSender.testConnection();\n\t\t\t\t}\n\t\t\t\tcatch (MessagingException ex) {\n\t\t\t\t\tthrow new IllegalStateException("Mail server is not unavailable", ex);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.mail;\n\nimport java.util.Map;\nimport java.util.Properties;\n\nimport javax.activation.MimeType;\nimport javax.mail.MessagingException;\nimport javax.mail.Session;\nimport javax.mail.internet.MimeMessage;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration.MailSenderCondition;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.mail.MailSender;\nimport org.springframework.mail.javamail.JavaMailSenderImpl;\n\n/**\n * {@link EnableAutoConfiguration Auto configuration} for email support.\n *\n * @author Oliver Gierke\n * @author Stephane Nicoll\n * @author Eddú Meléndez\n * @since 1.2.0\n */\n@Configuration\n@ConditionalOnClass({ MimeMessage.class, MimeType.class })\n@ConditionalOnMissingBean(MailSender.class)\n@Conditional(MailSenderCondition.class)\n@EnableConfigurationProperties(MailProperties.class)\n@Import(JndiSessionConfiguration.class)\npublic class MailSenderAutoConfiguration {\n\n\t@Autowired(required = false)\n\tprivate Session session;\n\n\t@Autowired\n\tprivate MailProperties properties;\n\n\t@Bean\n\tpublic JavaMailSenderImpl mailSender() {\n\t\tJavaMailSenderImpl sender = new JavaMailSenderImpl();\n\t\tif (this.session != null) {\n\t\t\tsender.setSession(this.session);\n\t\t}\n\t\telse {\n\t\t\tapplyProperties(sender);\n\t\t}\n\t\tvalidateConnection(sender);\n\t\treturn sender;\n\t}\n\n\tprivate void validateConnection(JavaMailSenderImpl sender) {\n\t\tif (this.properties.isTestConnection()) {\n\t\t\ttry {\n\t\t\t\tsender.testConnection();\n\t\t\t} catch (MessagingException ex) {\n\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\tString.format("Unable to ping to %s", this.properties.getHost()), ex);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void applyProperties(JavaMailSenderImpl sender) {\n\t\tsender.setHost(this.properties.getHost());\n\t\tif (this.properties.getPort() != null) {\n\t\t\tsender.setPort(this.properties.getPort());\n\t\t}\n\t\tsender.setUsername(this.properties.getUsername());\n\t\tsender.setPassword(this.properties.getPassword());\n\t\tsender.setDefaultEncoding(this.properties.getDefaultEncoding());\n\t\tif (!this.properties.getProperties().isEmpty()) {\n\t\t\tsender.setJavaMailProperties(asProperties(this.properties.getProperties()));\n\t\t}\n\t}\n\n\tprivate Properties asProperties(Map<String, String> source) {\n\t\tProperties properties = new Properties();\n\t\tproperties.putAll(source);\n\t\treturn properties;\n\t}\n\n\t/**\n\t * Condition to trigger the creation of a {@link JavaMailSenderImpl}. This kicks in if\n\t * either the host or jndi name property is set.\n\t */\n\tstatic class MailSenderCondition extends AnyNestedCondition {\n\n\t\tpublic MailSenderCondition() {\n\t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION);\n\t\t}\n\n\t\t@ConditionalOnProperty(prefix = "spring.mail", name = "host")\n\t\tstatic class HostProperty {\n\t\t}\n\n\t\t@ConditionalOnProperty(prefix = "spring.mail", name = "jndi-name")\n\t\tstatic class JndiNameProperty {\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
