@@ -0,0 +1,136 @@
+
+
+package org.springframework.boot.autoconfigure.velocity;
+
+import java.io.IOException;
+import java.util.Properties;
+
+import javax.annotation.PostConstruct;
+import javax.servlet.Servlet;
+
+import org.apache.velocity.app.VelocityEngine;
+import org.apache.velocity.exception.VelocityException;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnNotWebApplication;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
+import org.springframework.boot.autoconfigure.template.TemplateViewResolverConfigurer;
+import org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;
+import org.springframework.boot.context.properties.EnableConfigurationProperties;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.core.io.DefaultResourceLoader;
+import org.springframework.core.io.Resource;
+import org.springframework.core.io.ResourceLoader;
+import org.springframework.ui.velocity.VelocityEngineFactory;
+import org.springframework.ui.velocity.VelocityEngineFactoryBean;
+import org.springframework.util.Assert;
+import org.springframework.web.servlet.view.velocity.VelocityConfig;
+import org.springframework.web.servlet.view.velocity.VelocityConfigurer;
+import org.springframework.web.servlet.view.velocity.VelocityViewResolver;
+
+
+@Configuration
+@ConditionalOnClass(VelocityEngine.class)
+@AutoConfigureAfter(WebMvcAutoConfiguration.class)
+@EnableConfigurationProperties(VelocityProperties.class)
+public class VelocityAutoConfiguration {
+
+	@Autowired
+	private final ResourceLoader resourceLoader = new DefaultResourceLoader();
+
+	@Autowired
+	private VelocityProperties properties;
+
+	@PostConstruct
+	public void checkTemplateLocationExists() {
+		if (this.properties.isCheckTemplateLocation()) {
+			Resource resource = this.resourceLoader.getResource(this.properties
+					.getResourceLoaderPath());
+			Assert.state(resource.exists(),  + resource
+					+ 
+					+ );
+		}
+	}
+
+	protected static class VelocityConfiguration {
+
+		@Autowired
+		protected VelocityProperties properties;
+
+		protected void applyProperties(VelocityEngineFactory factory) {
+			factory.setResourceLoaderPath(this.properties.getResourceLoaderPath());
+			Properties velocityProperties = new Properties();
+			velocityProperties.putAll(this.properties.getProperties());
+			factory.setVelocityProperties(velocityProperties);
+		}
+	}
+
+	@Configuration
+	@ConditionalOnNotWebApplication
+	public static class VelocityNonWebConfiguration extends VelocityConfiguration {
+
+		@Bean
+		@ConditionalOnMissingBean
+		public VelocityEngineFactoryBean velocityConfiguration() {
+			VelocityEngineFactoryBean velocityEngineFactoryBean = new VelocityEngineFactoryBean();
+			applyProperties(velocityEngineFactoryBean);
+			return velocityEngineFactoryBean;
+		}
+
+	}
+
+	@Configuration
+	@ConditionalOnClass(Servlet.class)
+	@ConditionalOnWebApplication
+	public static class VelocityWebConfiguration extends VelocityConfiguration {
+
+		@Bean
+		@ConditionalOnMissingBean(VelocityConfig.class)
+		public VelocityConfigurer velocityConfigurer() {
+			VelocityConfigurer configurer = new VelocityConfigurer();
+			applyProperties(configurer);
+			return configurer;
+		}
+
+		@Bean
+		public VelocityEngine velocityEngine(VelocityConfigurer configurer)
+				throws VelocityException, IOException {
+			return configurer.createVelocityEngine();
+		}
+
+		@Bean
+		@ConditionalOnMissingBean(name = )
+		public VelocityViewResolver velocityViewResolver() {
+			VelocityViewResolver resolver = new VelocityViewResolver();
+			new TemplateViewResolverConfigurer().configureTemplateViewResolver(resolver,
+					this.properties);
+			resolver.setToolboxConfigLocation(this.properties.getToolboxConfigLocation());
+			resolver.setDateToolAttribute(this.properties.getDateToolAttribute());
+			resolver.setNumberToolAttribute(this.properties.getNumberToolAttribute());
+			return resolver;
+		}
+	}
+}

