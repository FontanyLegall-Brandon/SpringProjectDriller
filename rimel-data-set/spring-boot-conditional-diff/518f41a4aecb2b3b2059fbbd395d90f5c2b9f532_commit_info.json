{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/condition/ConditionalOnEnabledEndpointTests.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/condition/ConditionalOnEnabledEndpointTests.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -102,6 +102,43 @@ public class ConditionalOnEnabledEndpointTests {\n \t\t\t\t\t\t.doesNotHaveBean("fooExt"));\n \t}\n \n+\t@Test\n+\tpublic void outcomeWithReferenceWhenNoPropertiesShouldMatch() {\n+\t\tthis.contextRunner.withUserConfiguration(FooEndpointEnabledByDefaultTrue.class,\n+\t\t\t\tComponentEnabledIfEndpointIsEnabledConfiguration.class).run((context) ->\n+\t\t\tassertThat(context).hasBean("fooComponent"));\n+\t}\n+\n+\t@Test\n+\tpublic void outcomeWithReferenceWhenEndpointEnabledPropertyIsTrueShouldMatch() {\n+\t\tthis.contextRunner.withPropertyValues("management.endpoint.foo.enabled=true")\n+\t\t\t\t.withUserConfiguration(FooEndpointEnabledByDefaultTrue.class,\n+\t\t\t\t\t\tComponentEnabledIfEndpointIsEnabledConfiguration.class)\n+\t\t\t\t.run((context) ->\n+\t\t\t\t\t\tassertThat(context).hasBean("fooComponent"));\n+\t}\n+\n+\t@Test\n+\tpublic void outcomeWithReferenceWhenEndpointEnabledPropertyIsFalseShouldNotMatch() {\n+\t\tthis.contextRunner.withPropertyValues("management.endpoint.foo.enabled=false")\n+\t\t\t\t.withUserConfiguration(FooEndpointEnabledByDefaultTrue.class,\n+\t\t\t\t\t\tComponentEnabledIfEndpointIsEnabledConfiguration.class)\n+\t\t\t\t.run((context) ->\n+\t\t\t\t\t\tassertThat(context).doesNotHaveBean("fooComponent"));\n+\t}\n+\n+\t@Test\n+\tpublic void outcomeWithNoReferenceShouldFail() {\n+\t\tthis.contextRunner.withUserConfiguration(\n+\t\t\t\tComponentWithNoEndpointReferenceConfiguration.class).run((context) -> {\n+\t\t\tassertThat(context).hasFailed();\n+\t\t\tassertThat(context.getStartupFailure().getCause().getMessage()).contains(\n+\t\t\t\t\t"No endpoint is specified and the return type of the @Bean method "\n+\t\t\t\t\t\t\t+ "is neither an @Endpoint, nor an @EndpointExtension");\n+\t\t});\n+\t}\n+\n+\n \t@Endpoint(id = "foo", enableByDefault = true)\n \tstatic class FooEndpointEnabledByDefaultTrue {\n \n@@ -187,4 +224,26 @@ public class ConditionalOnEnabledEndpointTests {\n \n \t}\n \n+\t@Configuration\n+\tstatic class ComponentEnabledIfEndpointIsEnabledConfiguration {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnEnabledEndpoint(endpoint = FooEndpointEnabledByDefaultTrue.class)\n+\t\tpublic String fooComponent() {\n+\t\t\treturn "foo";\n+\t\t}\n+\n+\t}\n+\n+\t@Configuration\n+\tstatic class ComponentWithNoEndpointReferenceConfiguration {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnEnabledEndpoint\n+\t\tpublic String fooComponent() {\n+\t\t\treturn "foo";\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.endpoint.condition;\n\nimport org.junit.Test;\n\nimport org.springframework.boot.actuate.endpoint.EndpointFilter;\nimport org.springframework.boot.actuate.endpoint.ExposableEndpoint;\nimport org.springframework.boot.actuate.endpoint.annotation.Endpoint;\nimport org.springframework.boot.actuate.endpoint.annotation.EndpointExtension;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link ConditionalOnEnabledEndpoint}.\n *\n * @author Stephane Nicoll\n * @author Andy Wilkinson\n */\npublic class ConditionalOnEnabledEndpointTests {\n\n\tprivate final ApplicationContextRunner contextRunner = new ApplicationContextRunner();\n\n\t@Test\n\tpublic void outcomeWhenEndpointEnabledPropertyIsTrueShouldMatch() {\n\t\tthis.contextRunner.withPropertyValues("management.endpoint.foo.enabled=true")\n\t\t\t\t.withUserConfiguration(\n\t\t\t\t\t\tFooEndpointEnabledByDefaultFalseConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(context).hasBean("foo"));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenEndpointEnabledPropertyIsFalseShouldNotMatch() {\n\t\tthis.contextRunner.withPropertyValues("management.endpoint.foo.enabled=false")\n\t\t\t\t.withUserConfiguration(FooEndpointEnabledByDefaultTrueConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(context).doesNotHaveBean("foo"));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenNoEndpointPropertyAndUserDefinedDefaultIsTrueShouldMatch() {\n\t\tthis.contextRunner\n\t\t\t\t.withPropertyValues("management.endpoints.enabled-by-default=true")\n\t\t\t\t.withUserConfiguration(\n\t\t\t\t\t\tFooEndpointEnabledByDefaultFalseConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(context).hasBean("foo"));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenNoEndpointPropertyAndUserDefinedDefaultIsFalseShouldNotMatch() {\n\t\tthis.contextRunner\n\t\t\t\t.withPropertyValues("management.endpoints.enabled-by-default=false")\n\t\t\t\t.withUserConfiguration(FooEndpointEnabledByDefaultTrueConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(context).doesNotHaveBean("foo"));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenNoPropertiesAndAnnotationIsEnabledByDefaultShouldMatch() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(FooEndpointEnabledByDefaultTrueConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(context).hasBean("foo"));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenNoPropertiesAndAnnotationIsNotEnabledByDefaultShouldNotMatch() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(\n\t\t\t\t\t\tFooEndpointEnabledByDefaultFalseConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(context).doesNotHaveBean("foo"));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenNoPropertiesAndExtensionAnnotationIsEnabledByDefaultShouldMatch() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(\n\t\t\t\t\t\tFooEndpointAndExtensionEnabledByDefaultTrueConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(context).hasBean("foo").hasBean("fooExt"));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenNoPropertiesAndExtensionAnnotationIsNotEnabledByDefaultShouldNotMatch() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(\n\t\t\t\t\t\tFooEndpointAndExtensionEnabledByDefaultFalseConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(context).doesNotHaveBean("foo")\n\t\t\t\t\t\t.doesNotHaveBean("fooExt"));\n\t}\n\n\t@Test\n\tpublic void outcomeWithReferenceWhenNoPropertiesShouldMatch() {\n\t\tthis.contextRunner.withUserConfiguration(FooEndpointEnabledByDefaultTrue.class,\n\t\t\t\tComponentEnabledIfEndpointIsEnabledConfiguration.class).run((context) ->\n\t\t\tassertThat(context).hasBean("fooComponent"));\n\t}\n\n\t@Test\n\tpublic void outcomeWithReferenceWhenEndpointEnabledPropertyIsTrueShouldMatch() {\n\t\tthis.contextRunner.withPropertyValues("management.endpoint.foo.enabled=true")\n\t\t\t\t.withUserConfiguration(FooEndpointEnabledByDefaultTrue.class,\n\t\t\t\t\t\tComponentEnabledIfEndpointIsEnabledConfiguration.class)\n\t\t\t\t.run((context) ->\n\t\t\t\t\t\tassertThat(context).hasBean("fooComponent"));\n\t}\n\n\t@Test\n\tpublic void outcomeWithReferenceWhenEndpointEnabledPropertyIsFalseShouldNotMatch() {\n\t\tthis.contextRunner.withPropertyValues("management.endpoint.foo.enabled=false")\n\t\t\t\t.withUserConfiguration(FooEndpointEnabledByDefaultTrue.class,\n\t\t\t\t\t\tComponentEnabledIfEndpointIsEnabledConfiguration.class)\n\t\t\t\t.run((context) ->\n\t\t\t\t\t\tassertThat(context).doesNotHaveBean("fooComponent"));\n\t}\n\n\t@Test\n\tpublic void outcomeWithNoReferenceShouldFail() {\n\t\tthis.contextRunner.withUserConfiguration(\n\t\t\t\tComponentWithNoEndpointReferenceConfiguration.class).run((context) -> {\n\t\t\tassertThat(context).hasFailed();\n\t\t\tassertThat(context.getStartupFailure().getCause().getMessage()).contains(\n\t\t\t\t\t"No endpoint is specified and the return type of the @Bean method "\n\t\t\t\t\t\t\t+ "is neither an @Endpoint, nor an @EndpointExtension");\n\t\t});\n\t}\n\n\n\t@Endpoint(id = "foo", enableByDefault = true)\n\tstatic class FooEndpointEnabledByDefaultTrue {\n\n\t}\n\n\t@Endpoint(id = "foo", enableByDefault = false)\n\tstatic class FooEndpointEnabledByDefaultFalse {\n\n\t}\n\n\t@EndpointExtension(endpoint = FooEndpointEnabledByDefaultTrue.class, filter = TestFilter.class)\n\tstatic class FooEndpointExtensionEnabledByDefaultTrue {\n\n\t}\n\n\t@EndpointExtension(endpoint = FooEndpointEnabledByDefaultFalse.class, filter = TestFilter.class)\n\tstatic class FooEndpointExtensionEnabledByDefaultFalse {\n\n\t}\n\n\tstatic class TestFilter implements EndpointFilter<ExposableEndpoint<?>> {\n\n\t\t@Override\n\t\tpublic boolean match(ExposableEndpoint<?> endpoint) {\n\t\t\treturn true;\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class FooEndpointEnabledByDefaultTrueConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnEnabledEndpoint\n\t\tpublic FooEndpointEnabledByDefaultTrue foo() {\n\t\t\treturn new FooEndpointEnabledByDefaultTrue();\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class FooEndpointEnabledByDefaultFalseConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnEnabledEndpoint\n\t\tpublic FooEndpointEnabledByDefaultFalse foo() {\n\t\t\treturn new FooEndpointEnabledByDefaultFalse();\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class FooEndpointAndExtensionEnabledByDefaultTrueConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnEnabledEndpoint\n\t\tpublic FooEndpointEnabledByDefaultTrue foo() {\n\t\t\treturn new FooEndpointEnabledByDefaultTrue();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnEnabledEndpoint\n\t\tpublic FooEndpointExtensionEnabledByDefaultTrue fooExt() {\n\t\t\treturn new FooEndpointExtensionEnabledByDefaultTrue();\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class FooEndpointAndExtensionEnabledByDefaultFalseConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnEnabledEndpoint\n\t\tpublic FooEndpointEnabledByDefaultFalse foo() {\n\t\t\treturn new FooEndpointEnabledByDefaultFalse();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnEnabledEndpoint\n\t\tpublic FooEndpointExtensionEnabledByDefaultFalse fooExt() {\n\t\t\treturn new FooEndpointExtensionEnabledByDefaultFalse();\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class ComponentEnabledIfEndpointIsEnabledConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnEnabledEndpoint(endpoint = FooEndpointEnabledByDefaultTrue.class)\n\t\tpublic String fooComponent() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class ComponentWithNoEndpointReferenceConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnEnabledEndpoint\n\t\tpublic String fooComponent() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.endpoint.condition;\n\nimport org.junit.Test;\n\nimport org.springframework.boot.actuate.endpoint.EndpointFilter;\nimport org.springframework.boot.actuate.endpoint.ExposableEndpoint;\nimport org.springframework.boot.actuate.endpoint.annotation.Endpoint;\nimport org.springframework.boot.actuate.endpoint.annotation.EndpointExtension;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link ConditionalOnEnabledEndpoint}.\n *\n * @author Stephane Nicoll\n * @author Andy Wilkinson\n */\npublic class ConditionalOnEnabledEndpointTests {\n\n\tprivate final ApplicationContextRunner contextRunner = new ApplicationContextRunner();\n\n\t@Test\n\tpublic void outcomeWhenEndpointEnabledPropertyIsTrueShouldMatch() {\n\t\tthis.contextRunner.withPropertyValues("management.endpoint.foo.enabled=true")\n\t\t\t\t.withUserConfiguration(\n\t\t\t\t\t\tFooEndpointEnabledByDefaultFalseConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(context).hasBean("foo"));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenEndpointEnabledPropertyIsFalseShouldNotMatch() {\n\t\tthis.contextRunner.withPropertyValues("management.endpoint.foo.enabled=false")\n\t\t\t\t.withUserConfiguration(FooEndpointEnabledByDefaultTrueConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(context).doesNotHaveBean("foo"));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenNoEndpointPropertyAndUserDefinedDefaultIsTrueShouldMatch() {\n\t\tthis.contextRunner\n\t\t\t\t.withPropertyValues("management.endpoints.enabled-by-default=true")\n\t\t\t\t.withUserConfiguration(\n\t\t\t\t\t\tFooEndpointEnabledByDefaultFalseConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(context).hasBean("foo"));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenNoEndpointPropertyAndUserDefinedDefaultIsFalseShouldNotMatch() {\n\t\tthis.contextRunner\n\t\t\t\t.withPropertyValues("management.endpoints.enabled-by-default=false")\n\t\t\t\t.withUserConfiguration(FooEndpointEnabledByDefaultTrueConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(context).doesNotHaveBean("foo"));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenNoPropertiesAndAnnotationIsEnabledByDefaultShouldMatch() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(FooEndpointEnabledByDefaultTrueConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(context).hasBean("foo"));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenNoPropertiesAndAnnotationIsNotEnabledByDefaultShouldNotMatch() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(\n\t\t\t\t\t\tFooEndpointEnabledByDefaultFalseConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(context).doesNotHaveBean("foo"));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenNoPropertiesAndExtensionAnnotationIsEnabledByDefaultShouldMatch() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(\n\t\t\t\t\t\tFooEndpointAndExtensionEnabledByDefaultTrueConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(context).hasBean("foo").hasBean("fooExt"));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenNoPropertiesAndExtensionAnnotationIsNotEnabledByDefaultShouldNotMatch() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(\n\t\t\t\t\t\tFooEndpointAndExtensionEnabledByDefaultFalseConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(context).doesNotHaveBean("foo")\n\t\t\t\t\t\t.doesNotHaveBean("fooExt"));\n\t}\n\n\t@Endpoint(id = "foo", enableByDefault = true)\n\tstatic class FooEndpointEnabledByDefaultTrue {\n\n\t}\n\n\t@Endpoint(id = "foo", enableByDefault = false)\n\tstatic class FooEndpointEnabledByDefaultFalse {\n\n\t}\n\n\t@EndpointExtension(endpoint = FooEndpointEnabledByDefaultTrue.class, filter = TestFilter.class)\n\tstatic class FooEndpointExtensionEnabledByDefaultTrue {\n\n\t}\n\n\t@EndpointExtension(endpoint = FooEndpointEnabledByDefaultFalse.class, filter = TestFilter.class)\n\tstatic class FooEndpointExtensionEnabledByDefaultFalse {\n\n\t}\n\n\tstatic class TestFilter implements EndpointFilter<ExposableEndpoint<?>> {\n\n\t\t@Override\n\t\tpublic boolean match(ExposableEndpoint<?> endpoint) {\n\t\t\treturn true;\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class FooEndpointEnabledByDefaultTrueConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnEnabledEndpoint\n\t\tpublic FooEndpointEnabledByDefaultTrue foo() {\n\t\t\treturn new FooEndpointEnabledByDefaultTrue();\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class FooEndpointEnabledByDefaultFalseConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnEnabledEndpoint\n\t\tpublic FooEndpointEnabledByDefaultFalse foo() {\n\t\t\treturn new FooEndpointEnabledByDefaultFalse();\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class FooEndpointAndExtensionEnabledByDefaultTrueConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnEnabledEndpoint\n\t\tpublic FooEndpointEnabledByDefaultTrue foo() {\n\t\t\treturn new FooEndpointEnabledByDefaultTrue();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnEnabledEndpoint\n\t\tpublic FooEndpointExtensionEnabledByDefaultTrue fooExt() {\n\t\t\treturn new FooEndpointExtensionEnabledByDefaultTrue();\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class FooEndpointAndExtensionEnabledByDefaultFalseConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnEnabledEndpoint\n\t\tpublic FooEndpointEnabledByDefaultFalse foo() {\n\t\t\treturn new FooEndpointEnabledByDefaultFalse();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnEnabledEndpoint\n\t\tpublic FooEndpointExtensionEnabledByDefaultFalse fooExt() {\n\t\t\treturn new FooEndpointExtensionEnabledByDefaultFalse();\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
