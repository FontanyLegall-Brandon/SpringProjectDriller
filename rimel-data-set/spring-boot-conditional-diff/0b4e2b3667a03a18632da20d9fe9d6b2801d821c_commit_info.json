{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/ActiveMQAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/ActiveMQAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -20,7 +20,6 @@ import javax.jms.ConnectionFactory;\n \n import org.apache.activemq.ActiveMQConnectionFactory;\n import org.apache.activemq.transport.vm.VMTransportFactory;\n-\n import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionOutcome;\n@@ -34,17 +33,16 @@ import org.springframework.context.annotation.Import;\n import org.springframework.core.type.AnnotatedTypeMetadata;\n \n /**\n- * {@link EnableAutoConfiguration Auto-configuration} to integrate with\n- * an ActiveMQ broker.\n- *\n- * <p>Validates that the classpath contain the necessary classes before\n- * starting an embedded broker.\n- *\n+ * {@link EnableAutoConfiguration Auto-configuration} to integrate with an ActiveMQ\n+ * broker. Validates that the classpath contain the necessary classes before starting an\n+ * embedded broker.\n+ * \n  * @author Stephane Nicoll\n+ * @since 1.1.0\n  */\n @Configuration\n @AutoConfigureBefore(JmsTemplateAutoConfiguration.class)\n-@ConditionalOnClass({ConnectionFactory.class, ActiveMQConnectionFactory.class})\n+@ConditionalOnClass({ ConnectionFactory.class, ActiveMQConnectionFactory.class })\n @ConditionalOnMissingBean(ConnectionFactory.class)\n public class ActiveMQAutoConfiguration {\n \n@@ -69,18 +67,22 @@ public class ActiveMQAutoConfiguration {\n \t\t}\n \n \t\t@Override\n-\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata metadata) {\n-\t\t\tString brokerUrl = ActiveMQProperties.determineBrokerUrl(context.getEnvironment());\n+\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n+\t\t\t\tAnnotatedTypeMetadata metadata) {\n+\t\t\tString brokerUrl = ActiveMQProperties.determineBrokerUrl(context\n+\t\t\t\t\t.getEnvironment());\n \t\t\tboolean match = brokerUrl.contains("vm://");\n \t\t\tboolean outcome = (match == this.embedded);\n \t\t\treturn new ConditionOutcome(outcome, buildMessage(brokerUrl, outcome));\n \t\t}\n \n \t\tprotected String buildMessage(String brokerUrl, boolean outcome) {\n-\t\t\tString brokerType = embedded ? "Embedded" : "Network";\n+\t\t\tString brokerType = this.embedded ? "Embedded" : "Network";\n \t\t\tString detected = outcome ? "detected" : "not detected";\n-\t\t\treturn brokerType + " ActiveMQ broker " + detected + " - brokerUrl \'" + brokerUrl + "\'";\n+\t\t\treturn brokerType + " ActiveMQ broker " + detected + " - brokerUrl \'"\n+\t\t\t\t\t+ brokerUrl + "\'";\n \t\t}\n+\n \t}\n \n \tstatic class EmbeddedBrokerCondition extends BrokerTypeCondition {\n@@ -88,6 +90,7 @@ public class ActiveMQAutoConfiguration {\n \t\tEmbeddedBrokerCondition() {\n \t\t\tsuper(true);\n \t\t}\n+\n \t}\n \n \tstatic class NonEmbeddedBrokerCondition extends BrokerTypeCondition {\n@@ -95,6 +98,7 @@ public class ActiveMQAutoConfiguration {\n \t\tNonEmbeddedBrokerCondition() {\n \t\t\tsuper(false);\n \t\t}\n+\n \t}\n \n }\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jms;\n\nimport javax.jms.ConnectionFactory;\n\nimport org.apache.activemq.ActiveMQConnectionFactory;\nimport org.apache.activemq.transport.vm.VMTransportFactory;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to integrate with an ActiveMQ\n * broker. Validates that the classpath contain the necessary classes before starting an\n * embedded broker.\n * \n * @author Stephane Nicoll\n * @since 1.1.0\n */\n@Configuration\n@AutoConfigureBefore(JmsTemplateAutoConfiguration.class)\n@ConditionalOnClass({ ConnectionFactory.class, ActiveMQConnectionFactory.class })\n@ConditionalOnMissingBean(ConnectionFactory.class)\npublic class ActiveMQAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnClass(VMTransportFactory.class)\n\t@Conditional(EmbeddedBrokerCondition.class)\n\t@Import(ActiveMQConnectionFactoryConfiguration.class)\n\tprotected static class EmbeddedBroker {\n\t}\n\n\t@Configuration\n\t@Conditional(NonEmbeddedBrokerCondition.class)\n\t@Import(ActiveMQConnectionFactoryConfiguration.class)\n\tprotected static class NetworkBroker {\n\t}\n\n\tstatic abstract class BrokerTypeCondition extends SpringBootCondition {\n\t\tprivate final boolean embedded;\n\n\t\tBrokerTypeCondition(boolean embedded) {\n\t\t\tthis.embedded = embedded;\n\t\t}\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tString brokerUrl = ActiveMQProperties.determineBrokerUrl(context\n\t\t\t\t\t.getEnvironment());\n\t\t\tboolean match = brokerUrl.contains("vm://");\n\t\t\tboolean outcome = (match == this.embedded);\n\t\t\treturn new ConditionOutcome(outcome, buildMessage(brokerUrl, outcome));\n\t\t}\n\n\t\tprotected String buildMessage(String brokerUrl, boolean outcome) {\n\t\t\tString brokerType = this.embedded ? "Embedded" : "Network";\n\t\t\tString detected = outcome ? "detected" : "not detected";\n\t\t\treturn brokerType + " ActiveMQ broker " + detected + " - brokerUrl \'"\n\t\t\t\t\t+ brokerUrl + "\'";\n\t\t}\n\n\t}\n\n\tstatic class EmbeddedBrokerCondition extends BrokerTypeCondition {\n\n\t\tEmbeddedBrokerCondition() {\n\t\t\tsuper(true);\n\t\t}\n\n\t}\n\n\tstatic class NonEmbeddedBrokerCondition extends BrokerTypeCondition {\n\n\t\tNonEmbeddedBrokerCondition() {\n\t\t\tsuper(false);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jms;\n\nimport javax.jms.ConnectionFactory;\n\nimport org.apache.activemq.ActiveMQConnectionFactory;\nimport org.apache.activemq.transport.vm.VMTransportFactory;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to integrate with\n * an ActiveMQ broker.\n *\n * <p>Validates that the classpath contain the necessary classes before\n * starting an embedded broker.\n *\n * @author Stephane Nicoll\n */\n@Configuration\n@AutoConfigureBefore(JmsTemplateAutoConfiguration.class)\n@ConditionalOnClass({ConnectionFactory.class, ActiveMQConnectionFactory.class})\n@ConditionalOnMissingBean(ConnectionFactory.class)\npublic class ActiveMQAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnClass(VMTransportFactory.class)\n\t@Conditional(EmbeddedBrokerCondition.class)\n\t@Import(ActiveMQConnectionFactoryConfiguration.class)\n\tprotected static class EmbeddedBroker {\n\t}\n\n\t@Configuration\n\t@Conditional(NonEmbeddedBrokerCondition.class)\n\t@Import(ActiveMQConnectionFactoryConfiguration.class)\n\tprotected static class NetworkBroker {\n\t}\n\n\tstatic abstract class BrokerTypeCondition extends SpringBootCondition {\n\t\tprivate final boolean embedded;\n\n\t\tBrokerTypeCondition(boolean embedded) {\n\t\t\tthis.embedded = embedded;\n\t\t}\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata metadata) {\n\t\t\tString brokerUrl = ActiveMQProperties.determineBrokerUrl(context.getEnvironment());\n\t\t\tboolean match = brokerUrl.contains("vm://");\n\t\t\tboolean outcome = (match == this.embedded);\n\t\t\treturn new ConditionOutcome(outcome, buildMessage(brokerUrl, outcome));\n\t\t}\n\n\t\tprotected String buildMessage(String brokerUrl, boolean outcome) {\n\t\t\tString brokerType = embedded ? "Embedded" : "Network";\n\t\t\tString detected = outcome ? "detected" : "not detected";\n\t\t\treturn brokerType + " ActiveMQ broker " + detected + " - brokerUrl \'" + brokerUrl + "\'";\n\t\t}\n\t}\n\n\tstatic class EmbeddedBrokerCondition extends BrokerTypeCondition {\n\n\t\tEmbeddedBrokerCondition() {\n\t\t\tsuper(true);\n\t\t}\n\t}\n\n\tstatic class NonEmbeddedBrokerCondition extends BrokerTypeCondition {\n\n\t\tNonEmbeddedBrokerCondition() {\n\t\t\tsuper(false);\n\t\t}\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
