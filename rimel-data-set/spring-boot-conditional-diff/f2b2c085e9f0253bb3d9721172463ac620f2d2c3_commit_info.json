{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/EmbedMongoAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,35 @@\n+package org.springframework.boot.autoconfigure.mongo;\n+\n+import com.mongodb.Mongo;\n+import de.flapdoodle.embed.mongo.MongodExecutable;\n+import de.flapdoodle.embed.mongo.MongodStarter;\n+import de.flapdoodle.embed.mongo.config.IMongodConfig;\n+import de.flapdoodle.embed.mongo.config.MongodConfigBuilder;\n+import de.flapdoodle.embed.mongo.config.Net;\n+import de.flapdoodle.embed.mongo.distribution.Version;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import java.io.IOException;\n+\n+import static de.flapdoodle.embed.process.runtime.Network.localhostIsIPv6;\n+\n+@Configuration\n+@ConditionalOnClass({ Mongo.class, MongodStarter.class})\n+public class EmbedMongoAutoConfiguration {\n+\n+\t@Autowired\n+\tprivate MongoProperties properties;\n+\n+\t@Bean(initMethod = "start", destroyMethod = "stop")\n+\tpublic MongodExecutable embedMongoServer() throws IOException {\n+\t\tIMongodConfig mongodConfig = new MongodConfigBuilder()\n+\t\t\t\t.version(Version.Main.PRODUCTION)\n+\t\t\t\t.net(new Net(properties.getPort(), localhostIsIPv6()))\n+\t\t\t\t.build();\n+\t\treturn MongodStarter.getDefaultInstance().prepare(mongodConfig);\n+\t}\n+\n+}\n', 'source_code': 'package org.springframework.boot.autoconfigure.mongo;\n\nimport com.mongodb.Mongo;\nimport de.flapdoodle.embed.mongo.MongodExecutable;\nimport de.flapdoodle.embed.mongo.MongodStarter;\nimport de.flapdoodle.embed.mongo.config.IMongodConfig;\nimport de.flapdoodle.embed.mongo.config.MongodConfigBuilder;\nimport de.flapdoodle.embed.mongo.config.Net;\nimport de.flapdoodle.embed.mongo.distribution.Version;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.io.IOException;\n\nimport static de.flapdoodle.embed.process.runtime.Network.localhostIsIPv6;\n\n@Configuration\n@ConditionalOnClass({ Mongo.class, MongodStarter.class})\npublic class EmbedMongoAutoConfiguration {\n\n\t@Autowired\n\tprivate MongoProperties properties;\n\n\t@Bean(initMethod = "start", destroyMethod = "stop")\n\tpublic MongodExecutable embedMongoServer() throws IOException {\n\t\tIMongodConfig mongodConfig = new MongodConfigBuilder()\n\t\t\t\t.version(Version.Main.PRODUCTION)\n\t\t\t\t.net(new Net(properties.getPort(), localhostIsIPv6()))\n\t\t\t\t.build();\n\t\treturn MongodStarter.getDefaultInstance().prepare(mongodConfig);\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
