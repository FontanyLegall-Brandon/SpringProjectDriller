@@ -0,0 +1,84 @@
+
+
+package org.springframework.boot.autoconfigure.hazelcast;
+
+import java.io.IOException;
+
+import com.hazelcast.config.Config;
+import com.hazelcast.core.Hazelcast;
+import com.hazelcast.core.HazelcastInstance;
+
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Conditional;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.core.io.Resource;
+
+
+class HazelcastServerConfiguration {
+
+	static final String CONFIG_SYSTEM_PROPERTY = ;
+
+	@Configuration
+	@ConditionalOnMissingBean(Config.class)
+	@Conditional(ConfigAvailableCondition.class)
+	static class HazelcastServerConfigFileConfiguration {
+
+		@Bean
+		public HazelcastInstance hazelcastInstance(HazelcastProperties properties)
+				throws IOException {
+			Resource config = properties.resolveConfigLocation();
+			if (config != null) {
+				return HazelcastInstanceFactory.createHazelcastInstance(config);
+			}
+			return Hazelcast.newHazelcastInstance();
+		}
+
+	}
+
+	@Configuration
+	@ConditionalOnSingleCandidate(Config.class)
+	static class HazelcastServerConfigConfiguration {
+
+		@Bean
+		public HazelcastInstance hazelcastInstance(Config config) {
+			return HazelcastInstanceFactory.createHazelcastInstance(config);
+		}
+
+	}
+
+	
+	static class ConfigAvailableCondition extends HazelcastConfigResourceCondition {
+
+		ConfigAvailableCondition() {
+			super(CONFIG_SYSTEM_PROPERTY, ,
+					);
+		}
+
+	}
+
+}

