{'_old_path': None, '_new_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/jdbc/DataSourceMetadataProvidersConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2012-2014 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.metrics.jdbc;\n+\n+import javax.sql.DataSource;\n+\n+import com.zaxxer.hikari.HikariDataSource;\n+import org.apache.commons.dbcp.BasicDataSource;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Register the {@link DataSourceMetadataProvider} instances for the supported\n+ * data sources.\n+ *\n+ * @author Stephane Nicoll\n+ * @since 1.2.0\n+ */\n+@Configuration\n+public class DataSourceMetadataProvidersConfiguration {\n+\n+\t@Configuration\n+\t@ConditionalOnClass(org.apache.tomcat.jdbc.pool.DataSource.class)\n+\tstatic class TomcatDataSourceProviderConfiguration {\n+\n+\t\t@Bean\n+\t\tpublic DataSourceMetadataProvider tomcatDataSourceProvider() {\n+\t\t\treturn new DataSourceMetadataProvider() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic DataSourceMetadata getDataSourceMetadata(DataSource dataSource) {\n+\t\t\t\t\tif (dataSource instanceof org.apache.tomcat.jdbc.pool.DataSource) {\n+\t\t\t\t\t\treturn new TomcatDataSourceMetadata((org.apache.tomcat.jdbc.pool.DataSource) dataSource);\n+\t\t\t\t\t}\n+\t\t\t\t\treturn null;\n+\t\t\t\t}\n+\t\t\t};\n+\t\t}\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnClass(HikariDataSource.class)\n+\tstatic class HikariDataSourceProviderConfiguration {\n+\n+\t\t@Bean\n+\t\tpublic DataSourceMetadataProvider hikariDataSourceProvider() {\n+\t\t\treturn new DataSourceMetadataProvider() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic DataSourceMetadata getDataSourceMetadata(DataSource dataSource) {\n+\t\t\t\t\tif (dataSource instanceof HikariDataSource) {\n+\t\t\t\t\t\treturn new HikariDataSourceMetadata((HikariDataSource) dataSource);\n+\t\t\t\t\t}\n+\t\t\t\t\treturn null;\n+\t\t\t\t}\n+\t\t\t};\n+\t\t}\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnClass(BasicDataSource.class)\n+\tstatic class CommonsDbcpDataSourceProviderConfiguration {\n+\n+\t\t@Bean\n+\t\tpublic DataSourceMetadataProvider commonsDbcpDataSourceProvider() {\n+\t\t\treturn new DataSourceMetadataProvider() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic DataSourceMetadata getDataSourceMetadata(DataSource dataSource) {\n+\t\t\t\t\tif (dataSource instanceof BasicDataSource) {\n+\t\t\t\t\t\treturn new CommonsDbcpDataSourceMetadata((BasicDataSource) dataSource);\n+\t\t\t\t\t}\n+\t\t\t\t\treturn null;\n+\t\t\t\t}\n+\t\t\t};\n+\t\t}\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.metrics.jdbc;\n\nimport javax.sql.DataSource;\n\nimport com.zaxxer.hikari.HikariDataSource;\nimport org.apache.commons.dbcp.BasicDataSource;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Register the {@link DataSourceMetadataProvider} instances for the supported\n * data sources.\n *\n * @author Stephane Nicoll\n * @since 1.2.0\n */\n@Configuration\npublic class DataSourceMetadataProvidersConfiguration {\n\n\t@Configuration\n\t@ConditionalOnClass(org.apache.tomcat.jdbc.pool.DataSource.class)\n\tstatic class TomcatDataSourceProviderConfiguration {\n\n\t\t@Bean\n\t\tpublic DataSourceMetadataProvider tomcatDataSourceProvider() {\n\t\t\treturn new DataSourceMetadataProvider() {\n\t\t\t\t@Override\n\t\t\t\tpublic DataSourceMetadata getDataSourceMetadata(DataSource dataSource) {\n\t\t\t\t\tif (dataSource instanceof org.apache.tomcat.jdbc.pool.DataSource) {\n\t\t\t\t\t\treturn new TomcatDataSourceMetadata((org.apache.tomcat.jdbc.pool.DataSource) dataSource);\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(HikariDataSource.class)\n\tstatic class HikariDataSourceProviderConfiguration {\n\n\t\t@Bean\n\t\tpublic DataSourceMetadataProvider hikariDataSourceProvider() {\n\t\t\treturn new DataSourceMetadataProvider() {\n\t\t\t\t@Override\n\t\t\t\tpublic DataSourceMetadata getDataSourceMetadata(DataSource dataSource) {\n\t\t\t\t\tif (dataSource instanceof HikariDataSource) {\n\t\t\t\t\t\treturn new HikariDataSourceMetadata((HikariDataSource) dataSource);\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(BasicDataSource.class)\n\tstatic class CommonsDbcpDataSourceProviderConfiguration {\n\n\t\t@Bean\n\t\tpublic DataSourceMetadataProvider commonsDbcpDataSourceProvider() {\n\t\t\treturn new DataSourceMetadataProvider() {\n\t\t\t\t@Override\n\t\t\t\tpublic DataSourceMetadata getDataSourceMetadata(DataSource dataSource) {\n\t\t\t\t\tif (dataSource instanceof BasicDataSource) {\n\t\t\t\t\t\treturn new CommonsDbcpDataSourceMetadata((BasicDataSource) dataSource);\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
