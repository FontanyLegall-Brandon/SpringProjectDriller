{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -23,6 +23,7 @@ import java.util.Set;\n import org.springframework.boot.autoconfigure.MessageSourceAutoConfiguration.ResourceBundleCondition;\n import org.springframework.boot.autoconfigure.condition.ConditionOutcome;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.SearchStrategy;\n import org.springframework.boot.autoconfigure.condition.SpringBootCondition;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n@@ -50,7 +51,7 @@ import static org.springframework.util.StringUtils.trimAllWhitespace;\n  * @author Phillip Webb\n  */\n @Configuration\n-@ConditionalOnMissingBean(MessageSource.class)\n+@ConditionalOnMissingBean(value = MessageSource.class, search = SearchStrategy.CURRENT)\n @Order(Ordered.HIGHEST_PRECEDENCE)\n @Conditional(ResourceBundleCondition.class)\n @EnableConfigurationProperties\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure;\n\nimport java.io.IOException;\nimport java.util.Iterator;\nimport java.util.Set;\n\nimport org.springframework.boot.autoconfigure.MessageSourceAutoConfiguration.ResourceBundleCondition;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.MessageSource;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.support.ResourceBundleMessageSource;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.support.PathMatchingResourcePatternResolver;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.util.ConcurrentReferenceHashMap;\nimport org.springframework.util.StringUtils;\n\nimport static org.springframework.util.StringUtils.commaDelimitedListToStringArray;\nimport static org.springframework.util.StringUtils.trimAllWhitespace;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link MessageSource}.\n *\n * @author Dave Syer\n * @author Phillip Webb\n */\n@Configuration\n@ConditionalOnMissingBean(value = MessageSource.class, search = SearchStrategy.CURRENT)\n@Order(Ordered.HIGHEST_PRECEDENCE)\n@Conditional(ResourceBundleCondition.class)\n@EnableConfigurationProperties\n@ConfigurationProperties(prefix = "spring.messages")\npublic class MessageSourceAutoConfiguration {\n\n\tprivate static final Resource[] NO_RESOURCES = {};\n\n\t/**\n\t * Comma-separated list of basenames, each following the ResourceBundle convention.\n\t * Essentially a fully-qualified classpath location. If it doesn\'t contain a package\n\t * qualifier (such as "org.mypackage"), it will be resolved from the classpath root.\n\t */\n\tprivate String basename = "messages";\n\n\t/**\n\t * Message bundles encoding.\n\t */\n\tprivate String encoding = "utf-8";\n\n\t/**\n\t * Loaded resource bundle files cache expiration, in seconds. When set to -1, bundles\n\t * are cached forever.\n\t */\n\tprivate int cacheSeconds = -1;\n\n\t@Bean\n\tpublic MessageSource messageSource() {\n\t\tResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\n\t\tif (StringUtils.hasText(this.basename)) {\n\t\t\tmessageSource.setBasenames(\n\t\t\t\t\tcommaDelimitedListToStringArray(trimAllWhitespace(this.basename)));\n\t\t}\n\t\tmessageSource.setDefaultEncoding(this.encoding);\n\t\tmessageSource.setCacheSeconds(this.cacheSeconds);\n\t\treturn messageSource;\n\t}\n\n\tpublic String getBasename() {\n\t\treturn this.basename;\n\t}\n\n\tpublic void setBasename(String basename) {\n\t\tthis.basename = basename;\n\t}\n\n\tpublic String getEncoding() {\n\t\treturn this.encoding;\n\t}\n\n\tpublic void setEncoding(String encoding) {\n\t\tthis.encoding = encoding;\n\t}\n\n\tpublic int getCacheSeconds() {\n\t\treturn this.cacheSeconds;\n\t}\n\n\tpublic void setCacheSeconds(int cacheSeconds) {\n\t\tthis.cacheSeconds = cacheSeconds;\n\t}\n\n\tprotected static class ResourceBundleCondition extends SpringBootCondition {\n\n\t\tprivate static ConcurrentReferenceHashMap<String, ConditionOutcome> cache = new ConcurrentReferenceHashMap<String, ConditionOutcome>();\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tString basename = context.getEnvironment()\n\t\t\t\t\t.getProperty("spring.messages.basename", "messages");\n\t\t\tConditionOutcome outcome = cache.get(basename);\n\t\t\tif (outcome == null) {\n\t\t\t\toutcome = getMatchOutcomeForBasename(context, basename);\n\t\t\t\tcache.put(basename, outcome);\n\t\t\t}\n\t\t\treturn outcome;\n\t\t}\n\n\t\tprivate ConditionOutcome getMatchOutcomeForBasename(ConditionContext context,\n\t\t\t\tString basename) {\n\t\t\tfor (String name : commaDelimitedListToStringArray(\n\t\t\t\t\ttrimAllWhitespace(basename))) {\n\t\t\t\tfor (Resource resource : getResources(context.getClassLoader(), name)) {\n\t\t\t\t\tif (resource.exists()) {\n\t\t\t\t\t\treturn ConditionOutcome.match("Bundle found for "\n\t\t\t\t\t\t\t\t+ "spring.messages.basename: " + name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn ConditionOutcome.noMatch(\n\t\t\t\t\t"No bundle found for " + "spring.messages.basename: " + basename);\n\t\t}\n\n\t\tprivate Resource[] getResources(ClassLoader classLoader, String name) {\n\t\t\ttry {\n\t\t\t\treturn new SkipPatternPathMatchingResourcePatternResolver(classLoader)\n\t\t\t\t\t\t.getResources("classpath*:" + name + "*.properties");\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\treturn NO_RESOURCES;\n\t\t\t}\n\t\t}\n\n\t}\n\n\t/**\n\t * {@link PathMatchingResourcePatternResolver} that skips well known JARs that don\'t\n\t * contain messages.properties.\n\t */\n\tprivate static class SkipPatternPathMatchingResourcePatternResolver\n\t\t\textends PathMatchingResourcePatternResolver {\n\n\t\tprivate static final ClassLoader ROOT_CLASSLOADER;\n\n\t\tstatic {\n\t\t\tClassLoader classLoader = null;\n\t\t\ttry {\n\t\t\t\tclassLoader = ClassLoader.getSystemClassLoader();\n\t\t\t\twhile (classLoader.getParent() != null) {\n\t\t\t\t\tclassLoader = classLoader.getParent();\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Throwable ex) {\n\t\t\t}\n\t\t\tROOT_CLASSLOADER = classLoader;\n\t\t}\n\n\t\tprivate static final String[] SKIPPED = { "aspectjweaver-", "hibernate-core-",\n\t\t\t\t"hsqldb-", "jackson-annotations-", "jackson-core-", "jackson-databind-",\n\t\t\t\t"javassist-", "snakeyaml-", "spring-aop-", "spring-beans-",\n\t\t\t\t"spring-boot-", "spring-boot-actuator-", "spring-boot-autoconfigure-",\n\t\t\t\t"spring-core-", "spring-context-", "spring-data-commons-",\n\t\t\t\t"spring-expression-", "spring-jdbc-", "spring-orm-", "spring-tx-",\n\t\t\t\t"spring-web-", "spring-webmvc-", "tomcat-embed-", "joda-time-",\n\t\t\t\t"hibernate-entitymanager-", "hibernate-validator-", "logback-classic-",\n\t\t\t\t"logback-core-", "thymeleaf-" };\n\n\t\tpublic SkipPatternPathMatchingResourcePatternResolver(ClassLoader classLoader) {\n\t\t\tsuper(classLoader);\n\t\t}\n\n\t\t@Override\n\t\tprotected void addAllClassLoaderJarRoots(ClassLoader classLoader,\n\t\t\t\tSet<Resource> result) {\n\t\t\tif (classLoader != ROOT_CLASSLOADER) {\n\t\t\t\tsuper.addAllClassLoaderJarRoots(classLoader, result);\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tprotected Set<Resource> doFindAllClassPathResources(String path)\n\t\t\t\tthrows IOException {\n\t\t\tSet<Resource> resources = super.doFindAllClassPathResources(path);\n\t\t\tfor (Iterator<Resource> iterator = resources.iterator(); iterator\n\t\t\t\t\t.hasNext();) {\n\t\t\t\tResource resource = iterator.next();\n\t\t\t\tfor (String skipped : SKIPPED) {\n\t\t\t\t\tif (resource.getFilename().startsWith(skipped)) {\n\t\t\t\t\t\titerator.remove();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn resources;\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure;\n\nimport java.io.IOException;\nimport java.util.Iterator;\nimport java.util.Set;\n\nimport org.springframework.boot.autoconfigure.MessageSourceAutoConfiguration.ResourceBundleCondition;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.MessageSource;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.support.ResourceBundleMessageSource;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.support.PathMatchingResourcePatternResolver;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.util.ConcurrentReferenceHashMap;\nimport org.springframework.util.StringUtils;\n\nimport static org.springframework.util.StringUtils.commaDelimitedListToStringArray;\nimport static org.springframework.util.StringUtils.trimAllWhitespace;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link MessageSource}.\n *\n * @author Dave Syer\n * @author Phillip Webb\n */\n@Configuration\n@ConditionalOnMissingBean(MessageSource.class)\n@Order(Ordered.HIGHEST_PRECEDENCE)\n@Conditional(ResourceBundleCondition.class)\n@EnableConfigurationProperties\n@ConfigurationProperties(prefix = "spring.messages")\npublic class MessageSourceAutoConfiguration {\n\n\tprivate static final Resource[] NO_RESOURCES = {};\n\n\t/**\n\t * Comma-separated list of basenames, each following the ResourceBundle convention.\n\t * Essentially a fully-qualified classpath location. If it doesn\'t contain a package\n\t * qualifier (such as "org.mypackage"), it will be resolved from the classpath root.\n\t */\n\tprivate String basename = "messages";\n\n\t/**\n\t * Message bundles encoding.\n\t */\n\tprivate String encoding = "utf-8";\n\n\t/**\n\t * Loaded resource bundle files cache expiration, in seconds. When set to -1, bundles\n\t * are cached forever.\n\t */\n\tprivate int cacheSeconds = -1;\n\n\t@Bean\n\tpublic MessageSource messageSource() {\n\t\tResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\n\t\tif (StringUtils.hasText(this.basename)) {\n\t\t\tmessageSource.setBasenames(\n\t\t\t\t\tcommaDelimitedListToStringArray(trimAllWhitespace(this.basename)));\n\t\t}\n\t\tmessageSource.setDefaultEncoding(this.encoding);\n\t\tmessageSource.setCacheSeconds(this.cacheSeconds);\n\t\treturn messageSource;\n\t}\n\n\tpublic String getBasename() {\n\t\treturn this.basename;\n\t}\n\n\tpublic void setBasename(String basename) {\n\t\tthis.basename = basename;\n\t}\n\n\tpublic String getEncoding() {\n\t\treturn this.encoding;\n\t}\n\n\tpublic void setEncoding(String encoding) {\n\t\tthis.encoding = encoding;\n\t}\n\n\tpublic int getCacheSeconds() {\n\t\treturn this.cacheSeconds;\n\t}\n\n\tpublic void setCacheSeconds(int cacheSeconds) {\n\t\tthis.cacheSeconds = cacheSeconds;\n\t}\n\n\tprotected static class ResourceBundleCondition extends SpringBootCondition {\n\n\t\tprivate static ConcurrentReferenceHashMap<String, ConditionOutcome> cache = new ConcurrentReferenceHashMap<String, ConditionOutcome>();\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tString basename = context.getEnvironment()\n\t\t\t\t\t.getProperty("spring.messages.basename", "messages");\n\t\t\tConditionOutcome outcome = cache.get(basename);\n\t\t\tif (outcome == null) {\n\t\t\t\toutcome = getMatchOutcomeForBasename(context, basename);\n\t\t\t\tcache.put(basename, outcome);\n\t\t\t}\n\t\t\treturn outcome;\n\t\t}\n\n\t\tprivate ConditionOutcome getMatchOutcomeForBasename(ConditionContext context,\n\t\t\t\tString basename) {\n\t\t\tfor (String name : commaDelimitedListToStringArray(\n\t\t\t\t\ttrimAllWhitespace(basename))) {\n\t\t\t\tfor (Resource resource : getResources(context.getClassLoader(), name)) {\n\t\t\t\t\tif (resource.exists()) {\n\t\t\t\t\t\treturn ConditionOutcome.match("Bundle found for "\n\t\t\t\t\t\t\t\t+ "spring.messages.basename: " + name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn ConditionOutcome.noMatch(\n\t\t\t\t\t"No bundle found for " + "spring.messages.basename: " + basename);\n\t\t}\n\n\t\tprivate Resource[] getResources(ClassLoader classLoader, String name) {\n\t\t\ttry {\n\t\t\t\treturn new SkipPatternPathMatchingResourcePatternResolver(classLoader)\n\t\t\t\t\t\t.getResources("classpath*:" + name + "*.properties");\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\treturn NO_RESOURCES;\n\t\t\t}\n\t\t}\n\n\t}\n\n\t/**\n\t * {@link PathMatchingResourcePatternResolver} that skips well known JARs that don\'t\n\t * contain messages.properties.\n\t */\n\tprivate static class SkipPatternPathMatchingResourcePatternResolver\n\t\t\textends PathMatchingResourcePatternResolver {\n\n\t\tprivate static final ClassLoader ROOT_CLASSLOADER;\n\n\t\tstatic {\n\t\t\tClassLoader classLoader = null;\n\t\t\ttry {\n\t\t\t\tclassLoader = ClassLoader.getSystemClassLoader();\n\t\t\t\twhile (classLoader.getParent() != null) {\n\t\t\t\t\tclassLoader = classLoader.getParent();\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Throwable ex) {\n\t\t\t}\n\t\t\tROOT_CLASSLOADER = classLoader;\n\t\t}\n\n\t\tprivate static final String[] SKIPPED = { "aspectjweaver-", "hibernate-core-",\n\t\t\t\t"hsqldb-", "jackson-annotations-", "jackson-core-", "jackson-databind-",\n\t\t\t\t"javassist-", "snakeyaml-", "spring-aop-", "spring-beans-",\n\t\t\t\t"spring-boot-", "spring-boot-actuator-", "spring-boot-autoconfigure-",\n\t\t\t\t"spring-core-", "spring-context-", "spring-data-commons-",\n\t\t\t\t"spring-expression-", "spring-jdbc-", "spring-orm-", "spring-tx-",\n\t\t\t\t"spring-web-", "spring-webmvc-", "tomcat-embed-", "joda-time-",\n\t\t\t\t"hibernate-entitymanager-", "hibernate-validator-", "logback-classic-",\n\t\t\t\t"logback-core-", "thymeleaf-" };\n\n\t\tpublic SkipPatternPathMatchingResourcePatternResolver(ClassLoader classLoader) {\n\t\t\tsuper(classLoader);\n\t\t}\n\n\t\t@Override\n\t\tprotected void addAllClassLoaderJarRoots(ClassLoader classLoader,\n\t\t\t\tSet<Resource> result) {\n\t\t\tif (classLoader != ROOT_CLASSLOADER) {\n\t\t\t\tsuper.addAllClassLoaderJarRoots(classLoader, result);\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tprotected Set<Resource> doFindAllClassPathResources(String path)\n\t\t\t\tthrows IOException {\n\t\t\tSet<Resource> resources = super.doFindAllClassPathResources(path);\n\t\t\tfor (Iterator<Resource> iterator = resources.iterator(); iterator\n\t\t\t\t\t.hasNext();) {\n\t\t\t\tResource resource = iterator.next();\n\t\t\t\tfor (String skipped : SKIPPED) {\n\t\t\t\t\tif (resource.getFilename().startsWith(skipped)) {\n\t\t\t\t\t\titerator.remove();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn resources;\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
