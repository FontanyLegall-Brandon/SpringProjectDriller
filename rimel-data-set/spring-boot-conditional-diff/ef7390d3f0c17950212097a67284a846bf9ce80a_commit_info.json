{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/SocialWebAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/SocialWebAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -42,7 +42,7 @@ import org.springframework.web.servlet.view.BeanNameViewResolver;\n  * @since 1.1.0\n  */\n @Configuration\n-@ConditionalOnClass({ ConnectController.class })\n+@ConditionalOnClass({ ConnectController.class, SocialConfigurerAdapter.class })\n @AutoConfigureAfter(WebMvcAutoConfiguration.class)\n public class SocialWebAutoConfiguration {\n \n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.social;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.social.UserIdSource;\nimport org.springframework.social.config.annotation.EnableSocial;\nimport org.springframework.social.config.annotation.SocialConfigurerAdapter;\nimport org.springframework.social.connect.ConnectionFactoryLocator;\nimport org.springframework.social.connect.ConnectionRepository;\nimport org.springframework.social.connect.web.ConnectController;\nimport org.springframework.web.servlet.ViewResolver;\nimport org.springframework.web.servlet.view.BeanNameViewResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Social\'s web connection\n * support.\n * \n * @author Craig Walls\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass({ ConnectController.class, SocialConfigurerAdapter.class })\n@AutoConfigureAfter(WebMvcAutoConfiguration.class)\npublic class SocialWebAutoConfiguration {\n\n\t@Configuration\n\t@EnableSocial\n\t@ConditionalOnWebApplication\n\tprotected static class SocialAutoConfigurationAdapter extends SocialConfigurerAdapter {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(ConnectController.class)\n\t\tpublic ConnectController connectController(\n\t\t\t\tConnectionFactoryLocator connectionFactoryLocator,\n\t\t\t\tConnectionRepository connectionRepository) {\n\t\t\treturn new ConnectController(connectionFactoryLocator, connectionRepository);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(BeanNameViewResolver.class)\n\t\t@ConditionalOnProperty(prefix = "spring.social.", value = "auto-connection-views")\n\t\tpublic ViewResolver beanNameViewResolver() {\n\t\t\tBeanNameViewResolver bnvr = new BeanNameViewResolver();\n\t\t\tbnvr.setOrder(Integer.MIN_VALUE);\n\t\t\treturn bnvr;\n\t\t}\n\n\t\t@Override\n\t\tpublic UserIdSource getUserIdSource() {\n\t\t\treturn new UserIdSource() {\n\t\t\t\t@Override\n\t\t\t\tpublic String getUserId() {\n\t\t\t\t\treturn "anonymous";\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.social;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.social.UserIdSource;\nimport org.springframework.social.config.annotation.EnableSocial;\nimport org.springframework.social.config.annotation.SocialConfigurerAdapter;\nimport org.springframework.social.connect.ConnectionFactoryLocator;\nimport org.springframework.social.connect.ConnectionRepository;\nimport org.springframework.social.connect.web.ConnectController;\nimport org.springframework.web.servlet.ViewResolver;\nimport org.springframework.web.servlet.view.BeanNameViewResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Social\'s web connection\n * support.\n * \n * @author Craig Walls\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass({ ConnectController.class })\n@AutoConfigureAfter(WebMvcAutoConfiguration.class)\npublic class SocialWebAutoConfiguration {\n\n\t@Configuration\n\t@EnableSocial\n\t@ConditionalOnWebApplication\n\tprotected static class SocialAutoConfigurationAdapter extends SocialConfigurerAdapter {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(ConnectController.class)\n\t\tpublic ConnectController connectController(\n\t\t\t\tConnectionFactoryLocator connectionFactoryLocator,\n\t\t\t\tConnectionRepository connectionRepository) {\n\t\t\treturn new ConnectController(connectionFactoryLocator, connectionRepository);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(BeanNameViewResolver.class)\n\t\t@ConditionalOnProperty(prefix = "spring.social.", value = "auto-connection-views")\n\t\tpublic ViewResolver beanNameViewResolver() {\n\t\t\tBeanNameViewResolver bnvr = new BeanNameViewResolver();\n\t\t\tbnvr.setOrder(Integer.MIN_VALUE);\n\t\t\treturn bnvr;\n\t\t}\n\n\t\t@Override\n\t\tpublic UserIdSource getUserIdSource() {\n\t\t\treturn new UserIdSource() {\n\t\t\t\t@Override\n\t\t\t\tpublic String getUserId() {\n\t\t\t\t\treturn "anonymous";\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
