{'_old_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnResourceTests.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnResourceTests.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -59,7 +59,7 @@ public class ConditionalOnResourceTests {\n \t}\n \n \t@Configuration\n-\t@ConditionalOnResource(resources = "logback-test.xml")\n+\t@ConditionalOnResource(resources = "schemq.sqlt")\n \tprotected static class BasicConfiguration {\n \t\t@Bean\n \t\tpublic String foo() {\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport org.junit.Test;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\n/**\n * Tests for {@link ConditionalOnResource}.\n * \n * @author Dave Syer\n */\npublic class ConditionalOnResourceTests {\n\n\tprivate AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n\n\t@Test\n\tpublic void testResourceExists() {\n\t\tthis.context.register(BasicConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertTrue(this.context.containsBean("foo"));\n\t\tassertEquals("foo", this.context.getBean("foo"));\n\t}\n\n\t@Test\n\tpublic void testResourceNotExists() {\n\t\tthis.context.register(MissingConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertFalse(this.context.containsBean("foo"));\n\t}\n\n\t@Configuration\n\t@ConditionalOnResource(resources = "foo")\n\tprotected static class MissingConfiguration {\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnResource(resources = "schemq.sqlt")\n\tprotected static class BasicConfiguration {\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\t}\n}\n', 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport org.junit.Test;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\n/**\n * Tests for {@link ConditionalOnResource}.\n * \n * @author Dave Syer\n */\npublic class ConditionalOnResourceTests {\n\n\tprivate AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n\n\t@Test\n\tpublic void testResourceExists() {\n\t\tthis.context.register(BasicConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertTrue(this.context.containsBean("foo"));\n\t\tassertEquals("foo", this.context.getBean("foo"));\n\t}\n\n\t@Test\n\tpublic void testResourceNotExists() {\n\t\tthis.context.register(MissingConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertFalse(this.context.containsBean("foo"));\n\t}\n\n\t@Configuration\n\t@ConditionalOnResource(resources = "foo")\n\tprotected static class MissingConfiguration {\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnResource(resources = "logback-test.xml")\n\tprotected static class BasicConfiguration {\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\t}\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
