{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2012-2015 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.session;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.autoconfigure.redis.RedisAutoConfiguration;\n+import org.springframework.boot.autoconfigure.web.ServerProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.data.redis.connection.RedisConnectionFactory;\n+import org.springframework.session.Session;\n+import org.springframework.session.data.redis.RedisOperationsSessionRepository;\n+import org.springframework.session.data.redis.config.annotation.web.http.EnableRedisHttpSession;\n+import org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for Spring Session.\n+ *\n+ * @author Andy Wilkinson\n+ * @since 1.3.0\n+ */\n+@Configuration\n+@ConditionalOnClass(Session.class)\n+@EnableConfigurationProperties(ServerProperties.class)\n+@AutoConfigureAfter(RedisAutoConfiguration.class)\n+public class SessionAutoConfiguration {\n+\n+\t@ConditionalOnClass(RedisConnectionFactory.class)\n+\t@ConditionalOnWebApplication\n+\t@ConditionalOnMissingBean(RedisHttpSessionConfiguration.class)\n+\t@EnableRedisHttpSession\n+\t@Configuration\n+\tpublic static class SessionRedisHttpConfiguration {\n+\n+\t\t@Autowired\n+\t\tprivate ServerProperties serverProperties;\n+\n+\t\t@Autowired\n+\t\tprivate RedisOperationsSessionRepository sessionRepository;\n+\n+\t\t@PostConstruct\n+\t\tpublic void applyConfigurationProperties() {\n+\t\t\tif (this.serverProperties.getSessionTimeout() != null) {\n+\t\t\t\tthis.sessionRepository\n+\t\t\t\t\t\t.setDefaultMaxInactiveInterval(this.serverProperties\n+\t\t\t\t\t\t\t\t.getSessionTimeout());\n+\t\t\t}\n+\t\t}\n+\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.session;\n\nimport javax.annotation.PostConstruct;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.redis.RedisAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.ServerProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.session.Session;\nimport org.springframework.session.data.redis.RedisOperationsSessionRepository;\nimport org.springframework.session.data.redis.config.annotation.web.http.EnableRedisHttpSession;\nimport org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Session.\n *\n * @author Andy Wilkinson\n * @since 1.3.0\n */\n@Configuration\n@ConditionalOnClass(Session.class)\n@EnableConfigurationProperties(ServerProperties.class)\n@AutoConfigureAfter(RedisAutoConfiguration.class)\npublic class SessionAutoConfiguration {\n\n\t@ConditionalOnClass(RedisConnectionFactory.class)\n\t@ConditionalOnWebApplication\n\t@ConditionalOnMissingBean(RedisHttpSessionConfiguration.class)\n\t@EnableRedisHttpSession\n\t@Configuration\n\tpublic static class SessionRedisHttpConfiguration {\n\n\t\t@Autowired\n\t\tprivate ServerProperties serverProperties;\n\n\t\t@Autowired\n\t\tprivate RedisOperationsSessionRepository sessionRepository;\n\n\t\t@PostConstruct\n\t\tpublic void applyConfigurationProperties() {\n\t\t\tif (this.serverProperties.getSessionTimeout() != null) {\n\t\t\t\tthis.sessionRepository\n\t\t\t\t\t\t.setDefaultMaxInactiveInterval(this.serverProperties\n\t\t\t\t\t\t\t\t.getSessionTimeout());\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
