{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -20,20 +20,15 @@ import com.fasterxml.jackson.databind.ObjectMapper;\n \n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n-import org.springframework.boot.autoconfigure.condition.ConditionMessage;\n-import org.springframework.boot.autoconfigure.condition.ConditionOutcome;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n-import org.springframework.boot.autoconfigure.condition.SpringBootCondition;\n import org.springframework.boot.autoconfigure.http.HttpProperties;\n import org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.boot.web.codec.CodecCustomizer;\n import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.ConditionContext;\n-import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.core.type.AnnotatedTypeMetadata;\n+import org.springframework.core.annotation.Order;\n import org.springframework.http.codec.CodecConfigurer;\n import org.springframework.http.codec.json.Jackson2JsonDecoder;\n import org.springframework.http.codec.json.Jackson2JsonEncoder;\n@@ -77,7 +72,7 @@ public class CodecsAutoConfiguration {\n \tstatic class LoggingCodecConfiguration {\n \n \t\t@Bean\n-\t\t@Conditional(LogRequestDetailsConfiguredCondition.class)\n+\t\t@Order(0)\n \t\tpublic CodecCustomizer loggingCodecCustomizer(HttpProperties properties) {\n \t\t\treturn (configurer) -> configurer.defaultCodecs()\n \t\t\t\t\t.enableLoggingRequestDetails(properties.isLogRequestDetails());\n@@ -85,23 +80,4 @@ public class CodecsAutoConfiguration {\n \n \t}\n \n-\tstatic class LogRequestDetailsConfiguredCondition extends SpringBootCondition {\n-\n-\t\t@Override\n-\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n-\t\t\t\tAnnotatedTypeMetadata metadata) {\n-\t\t\tConditionMessage.Builder message = ConditionMessage\n-\t\t\t\t\t.forCondition("Log Request Details");\n-\t\t\tString property = context.getEnvironment()\n-\t\t\t\t\t.getProperty("spring.http.log-request-details");\n-\t\t\tif (property == null) {\n-\t\t\t\treturn ConditionOutcome.noMatch(message.because(\n-\t\t\t\t\t\t"did not find spring.http.log-request-details property"));\n-\t\t\t}\n-\t\t\treturn ConditionOutcome\n-\t\t\t\t\t.match(message.because("spring.http.log-request-details property"));\n-\t\t}\n-\n-\t}\n-\n }\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.http.codec;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.http.HttpProperties;\nimport org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.web.codec.CodecCustomizer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.http.codec.CodecConfigurer;\nimport org.springframework.http.codec.json.Jackson2JsonDecoder;\nimport org.springframework.http.codec.json.Jackson2JsonEncoder;\nimport org.springframework.util.MimeType;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for\n * {@link org.springframework.core.codec.Encoder Encoders} and\n * {@link org.springframework.core.codec.Decoder Decoders}.\n *\n * @author Brian Clozel\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass(CodecConfigurer.class)\n@AutoConfigureAfter(JacksonAutoConfiguration.class)\npublic class CodecsAutoConfiguration {\n\n\tprivate static final MimeType[] EMPTY_MIME_TYPES = {};\n\n\t@Configuration\n\t@ConditionalOnClass(ObjectMapper.class)\n\tstatic class JacksonCodecConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnBean(ObjectMapper.class)\n\t\tpublic CodecCustomizer jacksonCodecCustomizer(ObjectMapper objectMapper) {\n\t\t\treturn (configurer) -> {\n\t\t\t\tCodecConfigurer.DefaultCodecs defaults = configurer.defaultCodecs();\n\t\t\t\tdefaults.jackson2JsonDecoder(\n\t\t\t\t\t\tnew Jackson2JsonDecoder(objectMapper, EMPTY_MIME_TYPES));\n\t\t\t\tdefaults.jackson2JsonEncoder(\n\t\t\t\t\t\tnew Jackson2JsonEncoder(objectMapper, EMPTY_MIME_TYPES));\n\t\t\t};\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@EnableConfigurationProperties(HttpProperties.class)\n\tstatic class LoggingCodecConfiguration {\n\n\t\t@Bean\n\t\t@Order(0)\n\t\tpublic CodecCustomizer loggingCodecCustomizer(HttpProperties properties) {\n\t\t\treturn (configurer) -> configurer.defaultCodecs()\n\t\t\t\t\t.enableLoggingRequestDetails(properties.isLogRequestDetails());\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.http.codec;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionMessage;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.autoconfigure.http.HttpProperties;\nimport org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.web.codec.CodecCustomizer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.http.codec.CodecConfigurer;\nimport org.springframework.http.codec.json.Jackson2JsonDecoder;\nimport org.springframework.http.codec.json.Jackson2JsonEncoder;\nimport org.springframework.util.MimeType;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for\n * {@link org.springframework.core.codec.Encoder Encoders} and\n * {@link org.springframework.core.codec.Decoder Decoders}.\n *\n * @author Brian Clozel\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass(CodecConfigurer.class)\n@AutoConfigureAfter(JacksonAutoConfiguration.class)\npublic class CodecsAutoConfiguration {\n\n\tprivate static final MimeType[] EMPTY_MIME_TYPES = {};\n\n\t@Configuration\n\t@ConditionalOnClass(ObjectMapper.class)\n\tstatic class JacksonCodecConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnBean(ObjectMapper.class)\n\t\tpublic CodecCustomizer jacksonCodecCustomizer(ObjectMapper objectMapper) {\n\t\t\treturn (configurer) -> {\n\t\t\t\tCodecConfigurer.DefaultCodecs defaults = configurer.defaultCodecs();\n\t\t\t\tdefaults.jackson2JsonDecoder(\n\t\t\t\t\t\tnew Jackson2JsonDecoder(objectMapper, EMPTY_MIME_TYPES));\n\t\t\t\tdefaults.jackson2JsonEncoder(\n\t\t\t\t\t\tnew Jackson2JsonEncoder(objectMapper, EMPTY_MIME_TYPES));\n\t\t\t};\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@EnableConfigurationProperties(HttpProperties.class)\n\tstatic class LoggingCodecConfiguration {\n\n\t\t@Bean\n\t\t@Conditional(LogRequestDetailsConfiguredCondition.class)\n\t\tpublic CodecCustomizer loggingCodecCustomizer(HttpProperties properties) {\n\t\t\treturn (configurer) -> configurer.defaultCodecs()\n\t\t\t\t\t.enableLoggingRequestDetails(properties.isLogRequestDetails());\n\t\t}\n\n\t}\n\n\tstatic class LogRequestDetailsConfiguredCondition extends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tConditionMessage.Builder message = ConditionMessage\n\t\t\t\t\t.forCondition("Log Request Details");\n\t\t\tString property = context.getEnvironment()\n\t\t\t\t\t.getProperty("spring.http.log-request-details");\n\t\t\tif (property == null) {\n\t\t\t\treturn ConditionOutcome.noMatch(message.because(\n\t\t\t\t\t\t"did not find spring.http.log-request-details property"));\n\t\t\t}\n\t\t\treturn ConditionOutcome\n\t\t\t\t\t.match(message.because("spring.http.log-request-details property"));\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
