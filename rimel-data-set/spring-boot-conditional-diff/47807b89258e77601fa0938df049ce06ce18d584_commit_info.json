{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/sendgrid/SendGridAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/sendgrid/SendGridAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2016 the original author or authors.\n+ * Copyright 2012-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -16,18 +16,17 @@\n \n package org.springframework.boot.autoconfigure.sendgrid;\n \n+import com.sendgrid.Client;\n import com.sendgrid.SendGrid;\n import org.apache.http.HttpHost;\n import org.apache.http.impl.client.HttpClientBuilder;\n \n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n-import org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n \n /**\n@@ -35,11 +34,12 @@ import org.springframework.context.annotation.Configuration;\n  *\n  * @author Maciej Walkowiak\n  * @author Patrick Bray\n+ * @author Andy Wilkinson\n  * @since 1.3.0\n  */\n @Configuration\n @ConditionalOnClass(SendGrid.class)\n-@Conditional(SendGridAutoConfiguration.SendGridPropertyCondition.class)\n+@ConditionalOnProperty(prefix = "spring.sendgrid", value = "api-key")\n @EnableConfigurationProperties(SendGridProperties.class)\n public class SendGridAutoConfiguration {\n \n@@ -52,39 +52,13 @@ public class SendGridAutoConfiguration {\n \t@Bean\n \t@ConditionalOnMissingBean(SendGrid.class)\n \tpublic SendGrid sendGrid() {\n-\t\tSendGrid sendGrid = createSendGrid();\n \t\tif (this.properties.isProxyConfigured()) {\n \t\t\tHttpHost proxy = new HttpHost(this.properties.getProxy().getHost(),\n \t\t\t\t\tthis.properties.getProxy().getPort());\n-\t\t\tsendGrid.setClient(HttpClientBuilder.create().setProxy(proxy)\n-\t\t\t\t\t.setUserAgent("sendgrid/" + sendGrid.getVersion() + ";java").build());\n+\t\t\treturn new SendGrid(this.properties.getApiKey(),\n+\t\t\t\t\tnew Client(HttpClientBuilder.create().setProxy(proxy).build()));\n \t\t}\n-\t\treturn sendGrid;\n-\t}\n-\n-\tprivate SendGrid createSendGrid() {\n-\t\tif (this.properties.getApiKey() != null) {\n-\t\t\treturn new SendGrid(this.properties.getApiKey());\n-\t\t}\n-\t\treturn new SendGrid(this.properties.getUsername(), this.properties.getPassword());\n-\t}\n-\n-\tstatic class SendGridPropertyCondition extends AnyNestedCondition {\n-\n-\t\tSendGridPropertyCondition() {\n-\t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION);\n-\t\t}\n-\n-\t\t@ConditionalOnProperty(prefix = "spring.sendgrid", value = "username")\n-\t\tstatic class SendGridUserProperty {\n-\n-\t\t}\n-\n-\t\t@ConditionalOnProperty(prefix = "spring.sendgrid", value = "api-key")\n-\t\tstatic class SendGridApiKeyProperty {\n-\n-\t\t}\n-\n+\t\treturn new SendGrid(this.properties.getApiKey());\n \t}\n \n }\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.sendgrid;\n\nimport com.sendgrid.Client;\nimport com.sendgrid.SendGrid;\nimport org.apache.http.HttpHost;\nimport org.apache.http.impl.client.HttpClientBuilder;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for SendGrid.\n *\n * @author Maciej Walkowiak\n * @author Patrick Bray\n * @author Andy Wilkinson\n * @since 1.3.0\n */\n@Configuration\n@ConditionalOnClass(SendGrid.class)\n@ConditionalOnProperty(prefix = "spring.sendgrid", value = "api-key")\n@EnableConfigurationProperties(SendGridProperties.class)\npublic class SendGridAutoConfiguration {\n\n\tprivate final SendGridProperties properties;\n\n\tpublic SendGridAutoConfiguration(SendGridProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(SendGrid.class)\n\tpublic SendGrid sendGrid() {\n\t\tif (this.properties.isProxyConfigured()) {\n\t\t\tHttpHost proxy = new HttpHost(this.properties.getProxy().getHost(),\n\t\t\t\t\tthis.properties.getProxy().getPort());\n\t\t\treturn new SendGrid(this.properties.getApiKey(),\n\t\t\t\t\tnew Client(HttpClientBuilder.create().setProxy(proxy).build()));\n\t\t}\n\t\treturn new SendGrid(this.properties.getApiKey());\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.sendgrid;\n\nimport com.sendgrid.SendGrid;\nimport org.apache.http.HttpHost;\nimport org.apache.http.impl.client.HttpClientBuilder;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for SendGrid.\n *\n * @author Maciej Walkowiak\n * @author Patrick Bray\n * @since 1.3.0\n */\n@Configuration\n@ConditionalOnClass(SendGrid.class)\n@Conditional(SendGridAutoConfiguration.SendGridPropertyCondition.class)\n@EnableConfigurationProperties(SendGridProperties.class)\npublic class SendGridAutoConfiguration {\n\n\tprivate final SendGridProperties properties;\n\n\tpublic SendGridAutoConfiguration(SendGridProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(SendGrid.class)\n\tpublic SendGrid sendGrid() {\n\t\tSendGrid sendGrid = createSendGrid();\n\t\tif (this.properties.isProxyConfigured()) {\n\t\t\tHttpHost proxy = new HttpHost(this.properties.getProxy().getHost(),\n\t\t\t\t\tthis.properties.getProxy().getPort());\n\t\t\tsendGrid.setClient(HttpClientBuilder.create().setProxy(proxy)\n\t\t\t\t\t.setUserAgent("sendgrid/" + sendGrid.getVersion() + ";java").build());\n\t\t}\n\t\treturn sendGrid;\n\t}\n\n\tprivate SendGrid createSendGrid() {\n\t\tif (this.properties.getApiKey() != null) {\n\t\t\treturn new SendGrid(this.properties.getApiKey());\n\t\t}\n\t\treturn new SendGrid(this.properties.getUsername(), this.properties.getPassword());\n\t}\n\n\tstatic class SendGridPropertyCondition extends AnyNestedCondition {\n\n\t\tSendGridPropertyCondition() {\n\t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION);\n\t\t}\n\n\t\t@ConditionalOnProperty(prefix = "spring.sendgrid", value = "username")\n\t\tstatic class SendGridUserProperty {\n\n\t\t}\n\n\t\t@ConditionalOnProperty(prefix = "spring.sendgrid", value = "api-key")\n\t\tstatic class SendGridApiKeyProperty {\n\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
