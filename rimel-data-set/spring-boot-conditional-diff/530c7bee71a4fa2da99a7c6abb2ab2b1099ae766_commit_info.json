{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/HttpMessageConvertersAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/HttpMessageConvertersAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2018 the original author or authors.\n+ * Copyright 2012-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -24,11 +24,16 @@ import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\n+import org.springframework.boot.autoconfigure.condition.NoneNestedConditions;\n import org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration;\n+import org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration.NotReactiveWebApplicationCondition;\n import org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;\n import org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Import;\n import org.springframework.http.converter.HttpMessageConverter;\n@@ -49,6 +54,7 @@ import org.springframework.http.converter.StringHttpMessageConverter;\n  */\n @Configuration\n @ConditionalOnClass(HttpMessageConverter.class)\n+@Conditional(NotReactiveWebApplicationCondition.class)\n @AutoConfigureAfter({ GsonAutoConfiguration.class, JacksonAutoConfiguration.class,\n \t\tJsonbAutoConfiguration.class })\n @Import({ JacksonHttpMessageConvertersConfiguration.class,\n@@ -93,4 +99,17 @@ public class HttpMessageConvertersAutoConfiguration {\n \n \t}\n \n+\tstatic class NotReactiveWebApplicationCondition extends NoneNestedConditions {\n+\n+\t\tNotReactiveWebApplicationCondition() {\n+\t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION);\n+\t\t}\n+\n+\t\t@ConditionalOnWebApplication(type = Type.REACTIVE)\n+\t\tprivate static class ReactiveWebApplication {\n+\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.http;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.autoconfigure.condition.NoneNestedConditions;\nimport org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration;\nimport org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration.NotReactiveWebApplicationCondition;\nimport org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.http.converter.StringHttpMessageConverter;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link HttpMessageConverter}s.\n *\n * @author Dave Syer\n * @author Christian Dupuis\n * @author Piotr Maj\n * @author Oliver Gierke\n * @author David Liu\n * @author Andy Wilkinson\n * @author Sebastien Deleuze\n * @author Stephane Nicoll\n * @author Eddú Meléndez\n */\n@Configuration\n@ConditionalOnClass(HttpMessageConverter.class)\n@Conditional(NotReactiveWebApplicationCondition.class)\n@AutoConfigureAfter({ GsonAutoConfiguration.class, JacksonAutoConfiguration.class,\n\t\tJsonbAutoConfiguration.class })\n@Import({ JacksonHttpMessageConvertersConfiguration.class,\n\t\tGsonHttpMessageConvertersConfiguration.class,\n\t\tJsonbHttpMessageConvertersConfiguration.class })\npublic class HttpMessageConvertersAutoConfiguration {\n\n\tstatic final String PREFERRED_MAPPER_PROPERTY = "spring.http.converters.preferred-json-mapper";\n\n\tprivate final List<HttpMessageConverter<?>> converters;\n\n\tpublic HttpMessageConvertersAutoConfiguration(\n\t\t\tObjectProvider<HttpMessageConverter<?>> convertersProvider) {\n\t\tthis.converters = convertersProvider.orderedStream().collect(Collectors.toList());\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic HttpMessageConverters messageConverters() {\n\t\treturn new HttpMessageConverters(this.converters);\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(StringHttpMessageConverter.class)\n\t@EnableConfigurationProperties(HttpProperties.class)\n\tprotected static class StringHttpMessageConverterConfiguration {\n\n\t\tprivate final HttpProperties.Encoding properties;\n\n\t\tprotected StringHttpMessageConverterConfiguration(HttpProperties httpProperties) {\n\t\t\tthis.properties = httpProperties.getEncoding();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic StringHttpMessageConverter stringHttpMessageConverter() {\n\t\t\tStringHttpMessageConverter converter = new StringHttpMessageConverter(\n\t\t\t\t\tthis.properties.getCharset());\n\t\t\tconverter.setWriteAcceptCharset(false);\n\t\t\treturn converter;\n\t\t}\n\n\t}\n\n\tstatic class NotReactiveWebApplicationCondition extends NoneNestedConditions {\n\n\t\tNotReactiveWebApplicationCondition() {\n\t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION);\n\t\t}\n\n\t\t@ConditionalOnWebApplication(type = Type.REACTIVE)\n\t\tprivate static class ReactiveWebApplication {\n\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.http;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.http.converter.StringHttpMessageConverter;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link HttpMessageConverter}s.\n *\n * @author Dave Syer\n * @author Christian Dupuis\n * @author Piotr Maj\n * @author Oliver Gierke\n * @author David Liu\n * @author Andy Wilkinson\n * @author Sebastien Deleuze\n * @author Stephane Nicoll\n * @author Eddú Meléndez\n */\n@Configuration\n@ConditionalOnClass(HttpMessageConverter.class)\n@AutoConfigureAfter({ GsonAutoConfiguration.class, JacksonAutoConfiguration.class,\n\t\tJsonbAutoConfiguration.class })\n@Import({ JacksonHttpMessageConvertersConfiguration.class,\n\t\tGsonHttpMessageConvertersConfiguration.class,\n\t\tJsonbHttpMessageConvertersConfiguration.class })\npublic class HttpMessageConvertersAutoConfiguration {\n\n\tstatic final String PREFERRED_MAPPER_PROPERTY = "spring.http.converters.preferred-json-mapper";\n\n\tprivate final List<HttpMessageConverter<?>> converters;\n\n\tpublic HttpMessageConvertersAutoConfiguration(\n\t\t\tObjectProvider<HttpMessageConverter<?>> convertersProvider) {\n\t\tthis.converters = convertersProvider.orderedStream().collect(Collectors.toList());\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic HttpMessageConverters messageConverters() {\n\t\treturn new HttpMessageConverters(this.converters);\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(StringHttpMessageConverter.class)\n\t@EnableConfigurationProperties(HttpProperties.class)\n\tprotected static class StringHttpMessageConverterConfiguration {\n\n\t\tprivate final HttpProperties.Encoding properties;\n\n\t\tprotected StringHttpMessageConverterConfiguration(HttpProperties httpProperties) {\n\t\t\tthis.properties = httpProperties.getEncoding();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic StringHttpMessageConverter stringHttpMessageConverter() {\n\t\t\tStringHttpMessageConverter converter = new StringHttpMessageConverter(\n\t\t\t\t\tthis.properties.getCharset());\n\t\t\tconverter.setWriteAcceptCharset(false);\n\t\t\treturn converter;\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
