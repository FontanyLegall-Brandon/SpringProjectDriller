{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/solr/SolrHealthIndicatorAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/solr/SolrHealthContributorAutoConfiguration.java'), 'change_type': <ModificationType.RENAME: 3>, 'diff': '@@ -20,10 +20,10 @@ import java.util.Map;\n \n import org.apache.solr.client.solrj.SolrClient;\n \n-import org.springframework.boot.actuate.autoconfigure.health.CompositeHealthIndicatorConfiguration;\n+import org.springframework.boot.actuate.autoconfigure.health.CompositeHealthContributorConfiguration;\n import org.springframework.boot.actuate.autoconfigure.health.ConditionalOnEnabledHealthIndicator;\n-import org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration;\n-import org.springframework.boot.actuate.health.HealthIndicator;\n+import org.springframework.boot.actuate.autoconfigure.health.HealthContributorAutoConfiguration;\n+import org.springframework.boot.actuate.health.HealthContributor;\n import org.springframework.boot.actuate.solr.SolrHealthIndicator;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n@@ -46,15 +46,15 @@ import org.springframework.context.annotation.Configuration;\n @ConditionalOnClass(SolrClient.class)\n @ConditionalOnBean(SolrClient.class)\n @ConditionalOnEnabledHealthIndicator("solr")\n-@AutoConfigureBefore(HealthIndicatorAutoConfiguration.class)\n+@AutoConfigureBefore(HealthContributorAutoConfiguration.class)\n @AutoConfigureAfter(SolrAutoConfiguration.class)\n-public class SolrHealthIndicatorAutoConfiguration\n-\t\textends CompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrClient> {\n+public class SolrHealthContributorAutoConfiguration\n+\t\textends CompositeHealthContributorConfiguration<SolrHealthIndicator, SolrClient> {\n \n \t@Bean\n-\t@ConditionalOnMissingBean(name = "solrHealthIndicator")\n-\tpublic HealthIndicator solrHealthIndicator(Map<String, SolrClient> solrClients) {\n-\t\treturn createHealthIndicator(solrClients);\n+\t@ConditionalOnMissingBean(name = { "solrHealthIndicator", "solrHealthContributor" })\n+\tpublic HealthContributor solrHealthContributor(Map<String, SolrClient> solrClients) {\n+\t\treturn createContributor(solrClients);\n \t}\n \n }\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.solr;\n\nimport java.util.Map;\n\nimport org.apache.solr.client.solrj.SolrClient;\n\nimport org.springframework.boot.actuate.autoconfigure.health.CompositeHealthContributorConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.health.ConditionalOnEnabledHealthIndicator;\nimport org.springframework.boot.actuate.autoconfigure.health.HealthContributorAutoConfiguration;\nimport org.springframework.boot.actuate.health.HealthContributor;\nimport org.springframework.boot.actuate.solr.SolrHealthIndicator;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link SolrHealthIndicator}.\n *\n * @author Andy Wilkinson\n * @author Stephane Nicoll\n * @since 2.0.0\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass(SolrClient.class)\n@ConditionalOnBean(SolrClient.class)\n@ConditionalOnEnabledHealthIndicator("solr")\n@AutoConfigureBefore(HealthContributorAutoConfiguration.class)\n@AutoConfigureAfter(SolrAutoConfiguration.class)\npublic class SolrHealthContributorAutoConfiguration\n\t\textends CompositeHealthContributorConfiguration<SolrHealthIndicator, SolrClient> {\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = { "solrHealthIndicator", "solrHealthContributor" })\n\tpublic HealthContributor solrHealthContributor(Map<String, SolrClient> solrClients) {\n\t\treturn createContributor(solrClients);\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.solr;\n\nimport java.util.Map;\n\nimport org.apache.solr.client.solrj.SolrClient;\n\nimport org.springframework.boot.actuate.autoconfigure.health.CompositeHealthIndicatorConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.health.ConditionalOnEnabledHealthIndicator;\nimport org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration;\nimport org.springframework.boot.actuate.health.HealthIndicator;\nimport org.springframework.boot.actuate.solr.SolrHealthIndicator;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link SolrHealthIndicator}.\n *\n * @author Andy Wilkinson\n * @author Stephane Nicoll\n * @since 2.0.0\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass(SolrClient.class)\n@ConditionalOnBean(SolrClient.class)\n@ConditionalOnEnabledHealthIndicator("solr")\n@AutoConfigureBefore(HealthIndicatorAutoConfiguration.class)\n@AutoConfigureAfter(SolrAutoConfiguration.class)\npublic class SolrHealthIndicatorAutoConfiguration\n\t\textends CompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrClient> {\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "solrHealthIndicator")\n\tpublic HealthIndicator solrHealthIndicator(Map<String, SolrClient> solrClients) {\n\t\treturn createHealthIndicator(solrClients);\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
