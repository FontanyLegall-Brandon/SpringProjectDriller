{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/JndiDataSourceAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/JndiDataSourceAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2015 the original author or authors.\n+ * Copyright 2012-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -44,7 +44,7 @@ import org.springframework.jmx.support.JmxUtils;\n @AutoConfigureBefore({ XADataSourceAutoConfiguration.class,\n \t\tDataSourceAutoConfiguration.class })\n @ConditionalOnClass({ DataSource.class, EmbeddedDatabaseType.class })\n-@ConditionalOnProperty(prefix = DataSourceProperties.PREFIX, name = "jndi-name")\n+@ConditionalOnProperty(prefix = "spring.datasource", name = "jndi-name")\n @EnableConfigurationProperties(DataSourceProperties.class)\n public class JndiDataSourceAutoConfiguration {\n \n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jdbc;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;\nimport org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup;\nimport org.springframework.jmx.export.MBeanExporter;\nimport org.springframework.jmx.support.JmxUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for a JNDI located\n * {@link DataSource}.\n *\n * @author Phillip Webb\n * @author Andy Wilkinson\n * @since 1.2.0\n */\n@Configuration\n@AutoConfigureBefore({ XADataSourceAutoConfiguration.class,\n\t\tDataSourceAutoConfiguration.class })\n@ConditionalOnClass({ DataSource.class, EmbeddedDatabaseType.class })\n@ConditionalOnProperty(prefix = "spring.datasource", name = "jndi-name")\n@EnableConfigurationProperties(DataSourceProperties.class)\npublic class JndiDataSourceAutoConfiguration {\n\n\t@Autowired(required = false)\n\tprivate MBeanExporter mbeanExporter;\n\n\t@Bean(destroyMethod = "")\n\t@ConditionalOnMissingBean\n\tpublic DataSource dataSource(DataSourceProperties properties) {\n\t\tJndiDataSourceLookup dataSourceLookup = new JndiDataSourceLookup();\n\t\tDataSource dataSource = dataSourceLookup.getDataSource(properties.getJndiName());\n\t\texcludeMBeanIfNecessary(dataSource, "dataSource");\n\t\treturn dataSource;\n\t}\n\n\tprivate void excludeMBeanIfNecessary(Object candidate, String beanName) {\n\t\tif (this.mbeanExporter != null && JmxUtils.isMBean(candidate.getClass())) {\n\t\t\tthis.mbeanExporter.addExcludedBean(beanName);\n\t\t}\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jdbc;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;\nimport org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup;\nimport org.springframework.jmx.export.MBeanExporter;\nimport org.springframework.jmx.support.JmxUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for a JNDI located\n * {@link DataSource}.\n *\n * @author Phillip Webb\n * @author Andy Wilkinson\n * @since 1.2.0\n */\n@Configuration\n@AutoConfigureBefore({ XADataSourceAutoConfiguration.class,\n\t\tDataSourceAutoConfiguration.class })\n@ConditionalOnClass({ DataSource.class, EmbeddedDatabaseType.class })\n@ConditionalOnProperty(prefix = DataSourceProperties.PREFIX, name = "jndi-name")\n@EnableConfigurationProperties(DataSourceProperties.class)\npublic class JndiDataSourceAutoConfiguration {\n\n\t@Autowired(required = false)\n\tprivate MBeanExporter mbeanExporter;\n\n\t@Bean(destroyMethod = "")\n\t@ConditionalOnMissingBean\n\tpublic DataSource dataSource(DataSourceProperties properties) {\n\t\tJndiDataSourceLookup dataSourceLookup = new JndiDataSourceLookup();\n\t\tDataSource dataSource = dataSourceLookup.getDataSource(properties.getJndiName());\n\t\texcludeMBeanIfNecessary(dataSource, "dataSource");\n\t\treturn dataSource;\n\t}\n\n\tprivate void excludeMBeanIfNecessary(Object candidate, String beanName) {\n\t\tif (this.mbeanExporter != null && JmxUtils.isMBean(candidate.getClass())) {\n\t\t\tthis.mbeanExporter.addExcludedBean(beanName);\n\t\t}\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
