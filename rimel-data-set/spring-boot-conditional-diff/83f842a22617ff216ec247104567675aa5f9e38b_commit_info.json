{'_old_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -17,6 +17,10 @@\n package org.springframework.boot.actuate.autoconfigure;\n \n import java.io.IOException;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n import java.util.List;\n \n import javax.servlet.Filter;\n@@ -49,15 +53,17 @@ import org.springframework.boot.actuate.endpoint.mvc.ShutdownMvcEndpoint;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.PropertyPlaceholderAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionOutcome;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.autoconfigure.condition.SpringBootCondition;\n import org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration;\n import org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration;\n import org.springframework.boot.autoconfigure.web.ServerProperties;\n import org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\n+import org.springframework.boot.bind.RelaxedPropertyResolver;\n import org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext;\n import org.springframework.boot.context.embedded.EmbeddedServletContainerException;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n@@ -66,10 +72,14 @@ import org.springframework.context.ApplicationContextAware;\n import org.springframework.context.ApplicationListener;\n import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.ConditionContext;\n+import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.event.ContextClosedEvent;\n+import org.springframework.core.annotation.AnnotationAttributes;\n import org.springframework.core.env.ConfigurableEnvironment;\n import org.springframework.core.env.PropertySource;\n+import org.springframework.core.type.AnnotatedTypeMetadata;\n import org.springframework.web.context.WebApplicationContext;\n import org.springframework.web.filter.OncePerRequestFilter;\n import org.springframework.web.servlet.DispatcherServlet;\n@@ -156,14 +166,14 @@ public class EndpointWebMvcAutoConfiguration implements ApplicationContextAware,\n \n \t@Bean\n \t@ConditionalOnBean(EnvironmentEndpoint.class)\n-\t@ConditionalOnExpression("${endpoints.env.enabled:${endpoints.enabled:true}}")\n+\t@ConditionalOnEnabledEndpoint("env")\n \tpublic EnvironmentMvcEndpoint environmentMvcEndpoint(EnvironmentEndpoint delegate) {\n \t\treturn new EnvironmentMvcEndpoint(delegate);\n \t}\n \n \t@Bean\n \t@ConditionalOnBean(HealthEndpoint.class)\n-\t@ConditionalOnExpression("${endpoints.health.enabled:${endpoints.enabled:true}}")\n+\t@ConditionalOnEnabledEndpoint("health")\n \tpublic HealthMvcEndpoint healthMvcEndpoint(HealthEndpoint delegate) {\n \t\tSecurity security = this.managementServerProperties.getSecurity();\n \t\tboolean secure = (security == null || security.isEnabled());\n@@ -177,14 +187,14 @@ public class EndpointWebMvcAutoConfiguration implements ApplicationContextAware,\n \n \t@Bean\n \t@ConditionalOnBean(MetricsEndpoint.class)\n-\t@ConditionalOnExpression("${endpoints.metrics.enabled:${endpoints.enabled:true}}")\n+\t@ConditionalOnEnabledEndpoint("metrics")\n \tpublic MetricsMvcEndpoint metricsMvcEndpoint(MetricsEndpoint delegate) {\n \t\treturn new MetricsMvcEndpoint(delegate);\n \t}\n \n \t@Bean\n \t@ConditionalOnBean(ShutdownEndpoint.class)\n-\t@ConditionalOnExpression("${endpoints.shutdown.enabled:false}")\n+\t@ConditionalOnEnabledEndpoint(value = "shutdown", enabledByDefault = false)\n \tpublic ShutdownMvcEndpoint shutdownMvcEndpoint(ShutdownEndpoint delegate) {\n \t\treturn new ShutdownMvcEndpoint(delegate);\n \t}\n@@ -330,4 +340,77 @@ public class EndpointWebMvcAutoConfiguration implements ApplicationContextAware,\n \n \t}\n \n+\t/**\n+\t * {@link Conditional} that checks whether or not an endpoint is enabled. Matches if\n+\t * the value of the {@code endpoints.<name>.enabled} property is {@code true}. Does\n+\t * not match if the property\'s value or {@code enabledByDefault} is {@code false}.\n+\t * Otherwise, matches if the value of the {@code endpoints.enabled} property is\n+\t * {@code true} or if the property is not configured.\n+\t *\n+\t * @since 1.2.4\n+\t */\n+\t@Conditional(OnEnabledEndpointCondition.class)\n+\t@Retention(RetentionPolicy.RUNTIME)\n+\t@Target(ElementType.METHOD)\n+\tpublic static @interface ConditionalOnEnabledEndpoint {\n+\n+\t\t/**\n+\t\t * The name of the endpoint.\n+\t\t * @return The name of the endpoint\n+\t\t */\n+\t\tpublic String value();\n+\n+\t\t/**\n+\t\t * Returns whether or not the endpoint is enabled by default.\n+\t\t * @return {@code true} if the endpoint is enabled by default, otherwise\n+\t\t * {@code false}\n+\t\t */\n+\t\tpublic boolean enabledByDefault() default true;\n+\n+\t}\n+\n+\tprivate static class OnEnabledEndpointCondition extends SpringBootCondition {\n+\n+\t\t@Override\n+\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n+\t\t\t\tAnnotatedTypeMetadata metadata) {\n+\t\t\tAnnotationAttributes annotationAttributes = AnnotationAttributes\n+\t\t\t\t\t.fromMap(metadata.getAnnotationAttributes(ConditionalOnEnabledEndpoint.class\n+\t\t\t\t\t\t\t.getName()));\n+\t\t\tString endpointName = annotationAttributes.getString("value");\n+\t\t\tboolean enabledByDefault = annotationAttributes\n+\t\t\t\t\t.getBoolean("enabledByDefault");\n+\t\t\tConditionOutcome specificEndpointOutcome = determineSpecificEndpointOutcome(\n+\t\t\t\t\tendpointName, enabledByDefault, context);\n+\t\t\tif (specificEndpointOutcome != null) {\n+\t\t\t\treturn specificEndpointOutcome;\n+\t\t\t}\n+\t\t\treturn determineAllEndpointsOutcome(context);\n+\n+\t\t}\n+\n+\t\tprivate ConditionOutcome determineSpecificEndpointOutcome(String endpointName,\n+\t\t\t\tboolean enabledByDefault, ConditionContext context) {\n+\t\t\tRelaxedPropertyResolver endpointPropertyResolver = new RelaxedPropertyResolver(\n+\t\t\t\t\tcontext.getEnvironment(), "endpoints." + endpointName + ".");\n+\t\t\tif (endpointPropertyResolver.containsProperty("enabled") || !enabledByDefault) {\n+\t\t\t\tboolean match = endpointPropertyResolver.getProperty("enabled",\n+\t\t\t\t\t\tBoolean.class, enabledByDefault);\n+\t\t\t\treturn new ConditionOutcome(match, "The " + endpointName + " is "\n+\t\t\t\t\t\t+ (match ? "enabled" : "disabled"));\n+\t\t\t}\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tprivate ConditionOutcome determineAllEndpointsOutcome(ConditionContext context) {\n+\t\t\tRelaxedPropertyResolver allEndpointsPropertyResolver = new RelaxedPropertyResolver(\n+\t\t\t\t\tcontext.getEnvironment(), "endpoints.");\n+\t\t\tboolean match = Boolean.valueOf(allEndpointsPropertyResolver.getProperty(\n+\t\t\t\t\t"enabled", "true"));\n+\t\t\treturn new ConditionOutcome(match, "All endpoints are "\n+\t\t\t\t\t+ (match ? "enabled" : "disabled") + " by default");\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport java.io.IOException;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\nimport java.util.List;\n\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.Servlet;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.NoSuchBeanDefinitionException;\nimport org.springframework.beans.factory.SmartInitializingSingleton;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuate.autoconfigure.ManagementServerProperties.Security;\nimport org.springframework.boot.actuate.endpoint.Endpoint;\nimport org.springframework.boot.actuate.endpoint.EnvironmentEndpoint;\nimport org.springframework.boot.actuate.endpoint.HealthEndpoint;\nimport org.springframework.boot.actuate.endpoint.MetricsEndpoint;\nimport org.springframework.boot.actuate.endpoint.ShutdownEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping;\nimport org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingCustomizer;\nimport org.springframework.boot.actuate.endpoint.mvc.EnvironmentMvcEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.MetricsMvcEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints;\nimport org.springframework.boot.actuate.endpoint.mvc.ShutdownMvcEndpoint;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.PropertyPlaceholderAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.ServerProperties;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.boot.bind.RelaxedPropertyResolver;\nimport org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext;\nimport org.springframework.boot.context.embedded.EmbeddedServletContainerException;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.context.ApplicationListener;\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.event.ContextClosedEvent;\nimport org.springframework.core.annotation.AnnotationAttributes;\nimport org.springframework.core.env.ConfigurableEnvironment;\nimport org.springframework.core.env.PropertySource;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.web.context.WebApplicationContext;\nimport org.springframework.web.filter.OncePerRequestFilter;\nimport org.springframework.web.servlet.DispatcherServlet;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to enable Spring MVC to handle\n * {@link Endpoint} requests. If the {@link ManagementServerProperties} specifies a\n * different port to {@link ServerProperties} a new child context is created, otherwise it\n * is assumed that endpoint requests will be mapped and handled via an already registered\n * {@link DispatcherServlet}.\n *\n * @author Dave Syer\n * @author Phillip Webb\n * @author Christian Dupuis\n * @author Andy Wilkinson\n */\n@Configuration\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class })\n@ConditionalOnWebApplication\n@AutoConfigureAfter({ PropertyPlaceholderAutoConfiguration.class,\n\t\tEmbeddedServletContainerAutoConfiguration.class, WebMvcAutoConfiguration.class,\n\t\tManagementServerPropertiesAutoConfiguration.class })\n@EnableConfigurationProperties(HealthMvcEndpointProperties.class)\npublic class EndpointWebMvcAutoConfiguration implements ApplicationContextAware,\n\t\tSmartInitializingSingleton {\n\n\tprivate static Log logger = LogFactory.getLog(EndpointWebMvcAutoConfiguration.class);\n\n\tprivate ApplicationContext applicationContext;\n\n\t@Autowired\n\tprivate HealthMvcEndpointProperties healthMvcEndpointProperties;\n\n\t@Autowired\n\tprivate ManagementServerProperties managementServerProperties;\n\n\t@Autowired(required = false)\n\tprivate List<EndpointHandlerMappingCustomizer> mappingCustomizers;\n\n\t@Override\n\tpublic void setApplicationContext(ApplicationContext applicationContext)\n\t\t\tthrows BeansException {\n\t\tthis.applicationContext = applicationContext;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic EndpointHandlerMapping endpointHandlerMapping() {\n\t\tEndpointHandlerMapping mapping = new EndpointHandlerMapping(mvcEndpoints()\n\t\t\t\t.getEndpoints());\n\t\tboolean disabled = ManagementServerPort.get(this.applicationContext) != ManagementServerPort.SAME;\n\t\tmapping.setDisabled(disabled);\n\t\tif (!disabled) {\n\t\t\tmapping.setPrefix(this.managementServerProperties.getContextPath());\n\t\t}\n\t\tif (this.mappingCustomizers != null) {\n\t\t\tfor (EndpointHandlerMappingCustomizer customizer : this.mappingCustomizers) {\n\t\t\t\tcustomizer.customize(mapping);\n\t\t\t}\n\t\t}\n\t\treturn mapping;\n\t}\n\n\t@Override\n\tpublic void afterSingletonsInstantiated() {\n\t\tManagementServerPort managementPort = ManagementServerPort\n\t\t\t\t.get(this.applicationContext);\n\t\tif (managementPort == ManagementServerPort.DIFFERENT\n\t\t\t\t&& this.applicationContext instanceof WebApplicationContext) {\n\t\t\tcreateChildManagementContext();\n\t\t}\n\t\tif (managementPort == ManagementServerPort.SAME\n\t\t\t\t&& this.applicationContext.getEnvironment() instanceof ConfigurableEnvironment) {\n\t\t\taddLocalManagementPortPropertyAlias((ConfigurableEnvironment) this.applicationContext\n\t\t\t\t\t.getEnvironment());\n\t\t}\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic MvcEndpoints mvcEndpoints() {\n\t\treturn new MvcEndpoints();\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(EnvironmentEndpoint.class)\n\t@ConditionalOnEnabledEndpoint("env")\n\tpublic EnvironmentMvcEndpoint environmentMvcEndpoint(EnvironmentEndpoint delegate) {\n\t\treturn new EnvironmentMvcEndpoint(delegate);\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(HealthEndpoint.class)\n\t@ConditionalOnEnabledEndpoint("health")\n\tpublic HealthMvcEndpoint healthMvcEndpoint(HealthEndpoint delegate) {\n\t\tSecurity security = this.managementServerProperties.getSecurity();\n\t\tboolean secure = (security == null || security.isEnabled());\n\t\tHealthMvcEndpoint healthMvcEndpoint = new HealthMvcEndpoint(delegate, secure);\n\t\tif (this.healthMvcEndpointProperties.getMapping() != null) {\n\t\t\thealthMvcEndpoint.addStatusMapping(this.healthMvcEndpointProperties\n\t\t\t\t\t.getMapping());\n\t\t}\n\t\treturn healthMvcEndpoint;\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(MetricsEndpoint.class)\n\t@ConditionalOnEnabledEndpoint("metrics")\n\tpublic MetricsMvcEndpoint metricsMvcEndpoint(MetricsEndpoint delegate) {\n\t\treturn new MetricsMvcEndpoint(delegate);\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(ShutdownEndpoint.class)\n\t@ConditionalOnEnabledEndpoint(value = "shutdown", enabledByDefault = false)\n\tpublic ShutdownMvcEndpoint shutdownMvcEndpoint(ShutdownEndpoint delegate) {\n\t\treturn new ShutdownMvcEndpoint(delegate);\n\t}\n\n\tprivate void createChildManagementContext() {\n\n\t\tfinal AnnotationConfigEmbeddedWebApplicationContext childContext = new AnnotationConfigEmbeddedWebApplicationContext();\n\t\tchildContext.setParent(this.applicationContext);\n\t\tchildContext.setNamespace("management");\n\t\tchildContext.setId(this.applicationContext.getId() + ":management");\n\n\t\t// Register the ManagementServerChildContextConfiguration first followed\n\t\t// by various specific AutoConfiguration classes. NOTE: The child context\n\t\t// is intentionally not completely auto-configured.\n\t\tchildContext.register(EndpointWebMvcChildContextConfiguration.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class,\n\t\t\t\tEmbeddedServletContainerAutoConfiguration.class,\n\t\t\t\tDispatcherServletAutoConfiguration.class);\n\n\t\t// Ensure close on the parent also closes the child\n\t\tif (this.applicationContext instanceof ConfigurableApplicationContext) {\n\t\t\t((ConfigurableApplicationContext) this.applicationContext)\n\t\t\t\t\t.addApplicationListener(new ApplicationListener<ContextClosedEvent>() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onApplicationEvent(ContextClosedEvent event) {\n\t\t\t\t\t\t\tif (event.getApplicationContext() == EndpointWebMvcAutoConfiguration.this.applicationContext) {\n\t\t\t\t\t\t\t\tchildContext.close();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t}\n\t\ttry {\n\t\t\tchildContext.refresh();\n\t\t}\n\t\tcatch (RuntimeException ex) {\n\t\t\t// No support currently for deploying a war with management.port=<different>,\n\t\t\t// and this is the signature of that happening\n\t\t\tif (ex instanceof EmbeddedServletContainerException\n\t\t\t\t\t|| ex.getCause() instanceof EmbeddedServletContainerException) {\n\t\t\t\tlogger.warn("Could not start embedded container (management endpoints are still available through JMX)");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow ex;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Add an alias for \'local.management.port\' that actually resolves using\n\t * \'local.server.port\'.\n\t * @param environment the environment\n\t */\n\tprivate void addLocalManagementPortPropertyAlias(\n\t\t\tfinal ConfigurableEnvironment environment) {\n\t\tenvironment.getPropertySources().addLast(\n\t\t\t\tnew PropertySource<Object>("Management Server") {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object getProperty(String name) {\n\t\t\t\t\t\tif ("local.management.port".equals(name)) {\n\t\t\t\t\t\t\treturn environment.getProperty("local.server.port");\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n\n\t// Put Servlets and Filters in their own nested class so they don\'t force early\n\t// instantiation of ManagementServerProperties.\n\t@Configuration\n\tprotected static class ApplicationContextFilterConfiguration {\n\n\t\t@Bean\n\t\tpublic Filter applicationContextIdFilter(ApplicationContext context) {\n\t\t\treturn new ApplicationContextHeaderFilter(context);\n\t\t}\n\n\t}\n\n\t/**\n\t * {@link OncePerRequestFilter} to add the {@literal X-Application-Context} if\n\t * required.\n\t */\n\tprivate static class ApplicationContextHeaderFilter extends OncePerRequestFilter {\n\n\t\tprivate final ApplicationContext applicationContext;\n\n\t\tprivate ManagementServerProperties properties;\n\n\t\tpublic ApplicationContextHeaderFilter(ApplicationContext applicationContext) {\n\t\t\tthis.applicationContext = applicationContext;\n\t\t}\n\n\t\t@Override\n\t\tprotected void doFilterInternal(HttpServletRequest request,\n\t\t\t\tHttpServletResponse response, FilterChain filterChain)\n\t\t\t\tthrows ServletException, IOException {\n\t\t\tif (this.properties == null) {\n\t\t\t\tthis.properties = this.applicationContext\n\t\t\t\t\t\t.getBean(ManagementServerProperties.class);\n\t\t\t}\n\t\t\tif (this.properties.getAddApplicationContextHeader()) {\n\t\t\t\tresponse.addHeader("X-Application-Context",\n\t\t\t\t\t\tthis.applicationContext.getId());\n\t\t\t}\n\t\t\tfilterChain.doFilter(request, response);\n\t\t}\n\n\t}\n\n\tprotected static enum ManagementServerPort {\n\n\t\tDISABLE, SAME, DIFFERENT;\n\n\t\tpublic static ManagementServerPort get(BeanFactory beanFactory) {\n\t\t\tServerProperties serverProperties;\n\t\t\ttry {\n\t\t\t\tserverProperties = beanFactory.getBean(ServerProperties.class);\n\t\t\t}\n\t\t\tcatch (NoSuchBeanDefinitionException ex) {\n\t\t\t\tserverProperties = new ServerProperties();\n\t\t\t}\n\t\t\tManagementServerProperties managementServerProperties;\n\t\t\ttry {\n\t\t\t\tmanagementServerProperties = beanFactory\n\t\t\t\t\t\t.getBean(ManagementServerProperties.class);\n\t\t\t}\n\t\t\tcatch (NoSuchBeanDefinitionException ex) {\n\t\t\t\tmanagementServerProperties = new ManagementServerProperties();\n\t\t\t}\n\t\t\tInteger port = managementServerProperties.getPort();\n\t\t\tif (port != null && port < 0) {\n\t\t\t\treturn DISABLE;\n\t\t\t}\n\t\t\tif (!(beanFactory instanceof WebApplicationContext)) {\n\t\t\t\t// Current context is not a webapp\n\t\t\t\treturn DIFFERENT;\n\t\t\t}\n\t\t\treturn ((port == null)\n\t\t\t\t\t|| (serverProperties.getPort() == null && port.equals(8080))\n\t\t\t\t\t|| (port != 0 && port.equals(serverProperties.getPort())) ? SAME\n\t\t\t\t\t: DIFFERENT);\n\t\t}\n\n\t}\n\n\t/**\n\t * {@link Conditional} that checks whether or not an endpoint is enabled. Matches if\n\t * the value of the {@code endpoints.<name>.enabled} property is {@code true}. Does\n\t * not match if the property\'s value or {@code enabledByDefault} is {@code false}.\n\t * Otherwise, matches if the value of the {@code endpoints.enabled} property is\n\t * {@code true} or if the property is not configured.\n\t *\n\t * @since 1.2.4\n\t */\n\t@Conditional(OnEnabledEndpointCondition.class)\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Target(ElementType.METHOD)\n\tpublic static @interface ConditionalOnEnabledEndpoint {\n\n\t\t/**\n\t\t * The name of the endpoint.\n\t\t * @return The name of the endpoint\n\t\t */\n\t\tpublic String value();\n\n\t\t/**\n\t\t * Returns whether or not the endpoint is enabled by default.\n\t\t * @return {@code true} if the endpoint is enabled by default, otherwise\n\t\t * {@code false}\n\t\t */\n\t\tpublic boolean enabledByDefault() default true;\n\n\t}\n\n\tprivate static class OnEnabledEndpointCondition extends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tAnnotationAttributes annotationAttributes = AnnotationAttributes\n\t\t\t\t\t.fromMap(metadata.getAnnotationAttributes(ConditionalOnEnabledEndpoint.class\n\t\t\t\t\t\t\t.getName()));\n\t\t\tString endpointName = annotationAttributes.getString("value");\n\t\t\tboolean enabledByDefault = annotationAttributes\n\t\t\t\t\t.getBoolean("enabledByDefault");\n\t\t\tConditionOutcome specificEndpointOutcome = determineSpecificEndpointOutcome(\n\t\t\t\t\tendpointName, enabledByDefault, context);\n\t\t\tif (specificEndpointOutcome != null) {\n\t\t\t\treturn specificEndpointOutcome;\n\t\t\t}\n\t\t\treturn determineAllEndpointsOutcome(context);\n\n\t\t}\n\n\t\tprivate ConditionOutcome determineSpecificEndpointOutcome(String endpointName,\n\t\t\t\tboolean enabledByDefault, ConditionContext context) {\n\t\t\tRelaxedPropertyResolver endpointPropertyResolver = new RelaxedPropertyResolver(\n\t\t\t\t\tcontext.getEnvironment(), "endpoints." + endpointName + ".");\n\t\t\tif (endpointPropertyResolver.containsProperty("enabled") || !enabledByDefault) {\n\t\t\t\tboolean match = endpointPropertyResolver.getProperty("enabled",\n\t\t\t\t\t\tBoolean.class, enabledByDefault);\n\t\t\t\treturn new ConditionOutcome(match, "The " + endpointName + " is "\n\t\t\t\t\t\t+ (match ? "enabled" : "disabled"));\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\tprivate ConditionOutcome determineAllEndpointsOutcome(ConditionContext context) {\n\t\t\tRelaxedPropertyResolver allEndpointsPropertyResolver = new RelaxedPropertyResolver(\n\t\t\t\t\tcontext.getEnvironment(), "endpoints.");\n\t\t\tboolean match = Boolean.valueOf(allEndpointsPropertyResolver.getProperty(\n\t\t\t\t\t"enabled", "true"));\n\t\t\treturn new ConditionOutcome(match, "All endpoints are "\n\t\t\t\t\t+ (match ? "enabled" : "disabled") + " by default");\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport java.io.IOException;\nimport java.util.List;\n\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.Servlet;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.NoSuchBeanDefinitionException;\nimport org.springframework.beans.factory.SmartInitializingSingleton;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuate.autoconfigure.ManagementServerProperties.Security;\nimport org.springframework.boot.actuate.endpoint.Endpoint;\nimport org.springframework.boot.actuate.endpoint.EnvironmentEndpoint;\nimport org.springframework.boot.actuate.endpoint.HealthEndpoint;\nimport org.springframework.boot.actuate.endpoint.MetricsEndpoint;\nimport org.springframework.boot.actuate.endpoint.ShutdownEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping;\nimport org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMappingCustomizer;\nimport org.springframework.boot.actuate.endpoint.mvc.EnvironmentMvcEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.MetricsMvcEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints;\nimport org.springframework.boot.actuate.endpoint.mvc.ShutdownMvcEndpoint;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.PropertyPlaceholderAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.ServerProperties;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext;\nimport org.springframework.boot.context.embedded.EmbeddedServletContainerException;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.context.ApplicationListener;\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.event.ContextClosedEvent;\nimport org.springframework.core.env.ConfigurableEnvironment;\nimport org.springframework.core.env.PropertySource;\nimport org.springframework.web.context.WebApplicationContext;\nimport org.springframework.web.filter.OncePerRequestFilter;\nimport org.springframework.web.servlet.DispatcherServlet;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to enable Spring MVC to handle\n * {@link Endpoint} requests. If the {@link ManagementServerProperties} specifies a\n * different port to {@link ServerProperties} a new child context is created, otherwise it\n * is assumed that endpoint requests will be mapped and handled via an already registered\n * {@link DispatcherServlet}.\n *\n * @author Dave Syer\n * @author Phillip Webb\n * @author Christian Dupuis\n * @author Andy Wilkinson\n */\n@Configuration\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class })\n@ConditionalOnWebApplication\n@AutoConfigureAfter({ PropertyPlaceholderAutoConfiguration.class,\n\t\tEmbeddedServletContainerAutoConfiguration.class, WebMvcAutoConfiguration.class,\n\t\tManagementServerPropertiesAutoConfiguration.class })\n@EnableConfigurationProperties(HealthMvcEndpointProperties.class)\npublic class EndpointWebMvcAutoConfiguration implements ApplicationContextAware,\n\t\tSmartInitializingSingleton {\n\n\tprivate static Log logger = LogFactory.getLog(EndpointWebMvcAutoConfiguration.class);\n\n\tprivate ApplicationContext applicationContext;\n\n\t@Autowired\n\tprivate HealthMvcEndpointProperties healthMvcEndpointProperties;\n\n\t@Autowired\n\tprivate ManagementServerProperties managementServerProperties;\n\n\t@Autowired(required = false)\n\tprivate List<EndpointHandlerMappingCustomizer> mappingCustomizers;\n\n\t@Override\n\tpublic void setApplicationContext(ApplicationContext applicationContext)\n\t\t\tthrows BeansException {\n\t\tthis.applicationContext = applicationContext;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic EndpointHandlerMapping endpointHandlerMapping() {\n\t\tEndpointHandlerMapping mapping = new EndpointHandlerMapping(mvcEndpoints()\n\t\t\t\t.getEndpoints());\n\t\tboolean disabled = ManagementServerPort.get(this.applicationContext) != ManagementServerPort.SAME;\n\t\tmapping.setDisabled(disabled);\n\t\tif (!disabled) {\n\t\t\tmapping.setPrefix(this.managementServerProperties.getContextPath());\n\t\t}\n\t\tif (this.mappingCustomizers != null) {\n\t\t\tfor (EndpointHandlerMappingCustomizer customizer : this.mappingCustomizers) {\n\t\t\t\tcustomizer.customize(mapping);\n\t\t\t}\n\t\t}\n\t\treturn mapping;\n\t}\n\n\t@Override\n\tpublic void afterSingletonsInstantiated() {\n\t\tManagementServerPort managementPort = ManagementServerPort\n\t\t\t\t.get(this.applicationContext);\n\t\tif (managementPort == ManagementServerPort.DIFFERENT\n\t\t\t\t&& this.applicationContext instanceof WebApplicationContext) {\n\t\t\tcreateChildManagementContext();\n\t\t}\n\t\tif (managementPort == ManagementServerPort.SAME\n\t\t\t\t&& this.applicationContext.getEnvironment() instanceof ConfigurableEnvironment) {\n\t\t\taddLocalManagementPortPropertyAlias((ConfigurableEnvironment) this.applicationContext\n\t\t\t\t\t.getEnvironment());\n\t\t}\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic MvcEndpoints mvcEndpoints() {\n\t\treturn new MvcEndpoints();\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(EnvironmentEndpoint.class)\n\t@ConditionalOnExpression("${endpoints.env.enabled:${endpoints.enabled:true}}")\n\tpublic EnvironmentMvcEndpoint environmentMvcEndpoint(EnvironmentEndpoint delegate) {\n\t\treturn new EnvironmentMvcEndpoint(delegate);\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(HealthEndpoint.class)\n\t@ConditionalOnExpression("${endpoints.health.enabled:${endpoints.enabled:true}}")\n\tpublic HealthMvcEndpoint healthMvcEndpoint(HealthEndpoint delegate) {\n\t\tSecurity security = this.managementServerProperties.getSecurity();\n\t\tboolean secure = (security == null || security.isEnabled());\n\t\tHealthMvcEndpoint healthMvcEndpoint = new HealthMvcEndpoint(delegate, secure);\n\t\tif (this.healthMvcEndpointProperties.getMapping() != null) {\n\t\t\thealthMvcEndpoint.addStatusMapping(this.healthMvcEndpointProperties\n\t\t\t\t\t.getMapping());\n\t\t}\n\t\treturn healthMvcEndpoint;\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(MetricsEndpoint.class)\n\t@ConditionalOnExpression("${endpoints.metrics.enabled:${endpoints.enabled:true}}")\n\tpublic MetricsMvcEndpoint metricsMvcEndpoint(MetricsEndpoint delegate) {\n\t\treturn new MetricsMvcEndpoint(delegate);\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(ShutdownEndpoint.class)\n\t@ConditionalOnExpression("${endpoints.shutdown.enabled:false}")\n\tpublic ShutdownMvcEndpoint shutdownMvcEndpoint(ShutdownEndpoint delegate) {\n\t\treturn new ShutdownMvcEndpoint(delegate);\n\t}\n\n\tprivate void createChildManagementContext() {\n\n\t\tfinal AnnotationConfigEmbeddedWebApplicationContext childContext = new AnnotationConfigEmbeddedWebApplicationContext();\n\t\tchildContext.setParent(this.applicationContext);\n\t\tchildContext.setNamespace("management");\n\t\tchildContext.setId(this.applicationContext.getId() + ":management");\n\n\t\t// Register the ManagementServerChildContextConfiguration first followed\n\t\t// by various specific AutoConfiguration classes. NOTE: The child context\n\t\t// is intentionally not completely auto-configured.\n\t\tchildContext.register(EndpointWebMvcChildContextConfiguration.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class,\n\t\t\t\tEmbeddedServletContainerAutoConfiguration.class,\n\t\t\t\tDispatcherServletAutoConfiguration.class);\n\n\t\t// Ensure close on the parent also closes the child\n\t\tif (this.applicationContext instanceof ConfigurableApplicationContext) {\n\t\t\t((ConfigurableApplicationContext) this.applicationContext)\n\t\t\t\t\t.addApplicationListener(new ApplicationListener<ContextClosedEvent>() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onApplicationEvent(ContextClosedEvent event) {\n\t\t\t\t\t\t\tif (event.getApplicationContext() == EndpointWebMvcAutoConfiguration.this.applicationContext) {\n\t\t\t\t\t\t\t\tchildContext.close();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t}\n\t\ttry {\n\t\t\tchildContext.refresh();\n\t\t}\n\t\tcatch (RuntimeException ex) {\n\t\t\t// No support currently for deploying a war with management.port=<different>,\n\t\t\t// and this is the signature of that happening\n\t\t\tif (ex instanceof EmbeddedServletContainerException\n\t\t\t\t\t|| ex.getCause() instanceof EmbeddedServletContainerException) {\n\t\t\t\tlogger.warn("Could not start embedded container (management endpoints are still available through JMX)");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow ex;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Add an alias for \'local.management.port\' that actually resolves using\n\t * \'local.server.port\'.\n\t * @param environment the environment\n\t */\n\tprivate void addLocalManagementPortPropertyAlias(\n\t\t\tfinal ConfigurableEnvironment environment) {\n\t\tenvironment.getPropertySources().addLast(\n\t\t\t\tnew PropertySource<Object>("Management Server") {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object getProperty(String name) {\n\t\t\t\t\t\tif ("local.management.port".equals(name)) {\n\t\t\t\t\t\t\treturn environment.getProperty("local.server.port");\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n\n\t// Put Servlets and Filters in their own nested class so they don\'t force early\n\t// instantiation of ManagementServerProperties.\n\t@Configuration\n\tprotected static class ApplicationContextFilterConfiguration {\n\n\t\t@Bean\n\t\tpublic Filter applicationContextIdFilter(ApplicationContext context) {\n\t\t\treturn new ApplicationContextHeaderFilter(context);\n\t\t}\n\n\t}\n\n\t/**\n\t * {@link OncePerRequestFilter} to add the {@literal X-Application-Context} if\n\t * required.\n\t */\n\tprivate static class ApplicationContextHeaderFilter extends OncePerRequestFilter {\n\n\t\tprivate final ApplicationContext applicationContext;\n\n\t\tprivate ManagementServerProperties properties;\n\n\t\tpublic ApplicationContextHeaderFilter(ApplicationContext applicationContext) {\n\t\t\tthis.applicationContext = applicationContext;\n\t\t}\n\n\t\t@Override\n\t\tprotected void doFilterInternal(HttpServletRequest request,\n\t\t\t\tHttpServletResponse response, FilterChain filterChain)\n\t\t\t\tthrows ServletException, IOException {\n\t\t\tif (this.properties == null) {\n\t\t\t\tthis.properties = this.applicationContext\n\t\t\t\t\t\t.getBean(ManagementServerProperties.class);\n\t\t\t}\n\t\t\tif (this.properties.getAddApplicationContextHeader()) {\n\t\t\t\tresponse.addHeader("X-Application-Context",\n\t\t\t\t\t\tthis.applicationContext.getId());\n\t\t\t}\n\t\t\tfilterChain.doFilter(request, response);\n\t\t}\n\n\t}\n\n\tprotected static enum ManagementServerPort {\n\n\t\tDISABLE, SAME, DIFFERENT;\n\n\t\tpublic static ManagementServerPort get(BeanFactory beanFactory) {\n\t\t\tServerProperties serverProperties;\n\t\t\ttry {\n\t\t\t\tserverProperties = beanFactory.getBean(ServerProperties.class);\n\t\t\t}\n\t\t\tcatch (NoSuchBeanDefinitionException ex) {\n\t\t\t\tserverProperties = new ServerProperties();\n\t\t\t}\n\t\t\tManagementServerProperties managementServerProperties;\n\t\t\ttry {\n\t\t\t\tmanagementServerProperties = beanFactory\n\t\t\t\t\t\t.getBean(ManagementServerProperties.class);\n\t\t\t}\n\t\t\tcatch (NoSuchBeanDefinitionException ex) {\n\t\t\t\tmanagementServerProperties = new ManagementServerProperties();\n\t\t\t}\n\t\t\tInteger port = managementServerProperties.getPort();\n\t\t\tif (port != null && port < 0) {\n\t\t\t\treturn DISABLE;\n\t\t\t}\n\t\t\tif (!(beanFactory instanceof WebApplicationContext)) {\n\t\t\t\t// Current context is not a webapp\n\t\t\t\treturn DIFFERENT;\n\t\t\t}\n\t\t\treturn ((port == null)\n\t\t\t\t\t|| (serverProperties.getPort() == null && port.equals(8080))\n\t\t\t\t\t|| (port != 0 && port.equals(serverProperties.getPort())) ? SAME\n\t\t\t\t\t: DIFFERENT);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
