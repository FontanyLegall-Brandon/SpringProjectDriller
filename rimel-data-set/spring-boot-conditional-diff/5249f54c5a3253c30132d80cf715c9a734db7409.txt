@@ -35,16 +35,15 @@ import org.springframework.boot.autoconfigure.condition.ConditionOutcome;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.SpringBootCondition;
-import org.springframework.boot.bind.RelaxedPropertyResolver;
+import org.springframework.boot.context.properties.ConfigurationProperties;
+import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.ApplicationContext;
-import org.springframework.context.EnvironmentAware;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Condition;
 import org.springframework.context.annotation.ConditionContext;
 import org.springframework.context.annotation.Conditional;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Import;
-import org.springframework.core.env.Environment;
 import org.springframework.core.io.Resource;
 import org.springframework.core.type.AnnotatedTypeMetadata;
 import org.springframework.jdbc.core.JdbcOperations;
@@ -54,7 +53,6 @@ import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
 import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;
 import org.springframework.jdbc.datasource.init.DatabasePopulatorUtils;
 import org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;
-import org.springframework.util.ClassUtils;
 import org.springframework.util.StringUtils;
 
 
 @Configuration
 @ConditionalOnClass(EmbeddedDatabaseType.class)
-public class DataSourceAutoConfiguration implements EnvironmentAware {
+@EnableConfigurationProperties(DataSourceProperties.class)
+public class DataSourceAutoConfiguration {
 
 	private static Log logger = LogFactory.getLog(DataSourceAutoConfiguration.class);
 
@@ -77,26 +76,20 @@ public class DataSourceAutoConfiguration implements EnvironmentAware {
 	@Autowired
 	private ApplicationContext applicationContext;
 
-	private RelaxedPropertyResolver datasourceProperties;
-
-	@Override
-	public void setEnvironment(Environment environment) {
-		this.datasourceProperties = new RelaxedPropertyResolver(environment,
-				CONFIGURATION_PREFIX + );
-	}
+	@Autowired
+	private DataSourceProperties properties;
 
 	@PostConstruct
 	protected void initialize() throws Exception {
-		boolean initialize = this.datasourceProperties.getProperty(,
-				Boolean.class, true);
+		boolean initialize = this.properties.isInitialize();
 		if (this.dataSource == null || !initialize) {
 			logger.debug();
 			return;
 		}
 
-		String schema = this.datasourceProperties.getProperty();
+		String schema = this.properties.getSchema();
 		if (schema == null) {
-			String platform = this.datasourceProperties.getProperty(, );
+			String platform = this.properties.getPlatform();
 			schema =  + platform + ;
 			schema += ;
 			schema +=  + platform + ;
@@ -109,8 +102,7 @@ public class DataSourceAutoConfiguration implements EnvironmentAware {
 					.getResources(schemaLocation)));
 		}
 
-		boolean continueOnError = this.datasourceProperties.getProperty(
-				, Boolean.class, false);
+		boolean continueOnError = this.properties.isContinueOnError();
 		boolean exists = false;
 		ResourceDatabasePopulator populator = new ResourceDatabasePopulator();
 		for (Resource resource : resources) {
@@ -120,7 +112,7 @@ public class DataSourceAutoConfiguration implements EnvironmentAware {
 				populator.setContinueOnError(continueOnError);
 			}
 		}
-		populator.setSeparator(this.datasourceProperties.getProperty(, ));
+		populator.setSeparator(this.properties.getSeparator());
 
 		if (exists) {
 			DatabasePopulatorUtils.execute(populator, this.dataSource);
@@ -151,24 +143,26 @@ public class DataSourceAutoConfiguration implements EnvironmentAware {
 
 	}
 
-	@Conditional(DataSourceAutoConfiguration.TomcatDatabaseCondition.class)
+	@Conditional(DataSourceAutoConfiguration.NonEmbeddedDatabaseCondition.class)
 	@ConditionalOnMissingBean(DataSource.class)
-	@Import(TomcatDataSourceConfiguration.class)
-	protected static class TomcatConfiguration {
+	protected static class NonEmbeddedConfiguration {
 
-	}
+		@Autowired
+		private DataSourceProperties properties;
 
-	@Conditional(DataSourceAutoConfiguration.HikariDatabaseCondition.class)
-	@ConditionalOnMissingBean(DataSource.class)
-	@Import(HikariDataSourceConfiguration.class)
-	protected static class HikariConfiguration {
-
-	}
-
-	@Conditional(DataSourceAutoConfiguration.BasicDatabaseCondition.class)
-	@ConditionalOnMissingBean(DataSource.class)
-	@Import(CommonsDataSourceConfiguration.class)
-	protected static class DbcpConfiguration {
+		@ConfigurationProperties(prefix = DataSourceAutoConfiguration.CONFIGURATION_PREFIX)
+		@Bean
+		public DataSource dataSource() {
+			
+			DataSourceFactory factory = DataSourceFactory
+					.create(this.properties.getClassLoader())
+					.driverClassName(this.properties.getDriverClassName())
+					.url(this.properties.getUrl())
+					.username(this.properties.getUsername())
+					.password(this.properties.getPassword());
+			
+			return factory.build();
+		}
 
 	}
 
@@ -196,35 +190,18 @@ public class DataSourceAutoConfiguration implements EnvironmentAware {
 	
-	static abstract class NonEmbeddedDatabaseCondition extends SpringBootCondition {
-
-		protected abstract String getDataSourceClassName();
+	static class NonEmbeddedDatabaseCondition extends SpringBootCondition {
 
 		@Override
 		public ConditionOutcome getMatchOutcome(ConditionContext context,
 				AnnotatedTypeMetadata metadata) {
 
-			if (!ClassUtils.isPresent(getDataSourceClassName(), context.getClassLoader())) {
-				return ConditionOutcome.noMatch(getDataSourceClassName()
-						+ );
-			}
-
-			String driverClassName = getDriverClassName(context.getEnvironment(),
-					getDataSourceClassLoader(context));
-			if (driverClassName == null) {
-				return ConditionOutcome.noMatch();
-			}
-
-			String url = getUrl(context.getEnvironment(), context.getClassLoader());
-			if (url == null) {
-				return ConditionOutcome.noMatch();
-			}
-
-			if (ClassUtils.isPresent(driverClassName, context.getClassLoader())) {
-				return ConditionOutcome.match( + driverClassName);
+			ClassLoader dataSourceClassLoader = getDataSourceClassLoader(context);
+			if (dataSourceClassLoader != null) {
+				return ConditionOutcome.match();
 			}
 
-			return ConditionOutcome.noMatch( + driverClassName);
+			return ConditionOutcome.noMatch();
 		}
 
 		
 		private ClassLoader getDataSourceClassLoader(ConditionContext context) {
-			try {
-				Class<?> dataSourceClass = ClassUtils.forName(getDataSourceClassName(),
-						context.getClassLoader());
-				return dataSourceClass.getClassLoader();
-			}
-			catch (ClassNotFoundException ex) {
-				throw new IllegalStateException(ex);
-			}
-		}
-
-		private String getDriverClassName(Environment environment, ClassLoader classLoader) {
-			String driverClassName = environment == null ? null : environment
-					.getProperty(CONFIGURATION_PREFIX + );
-			if (driverClassName == null) {
-				driverClassName = EmbeddedDatabaseConnection.get(classLoader)
-						.getDriverClassName();
-			}
-			return driverClassName;
-		}
-
-		private String getUrl(Environment environment, ClassLoader classLoader) {
-			String url = (environment == null ? null : environment
-					.getProperty(CONFIGURATION_PREFIX + ));
-			if (url == null) {
-				url = EmbeddedDatabaseConnection.get(classLoader).getUrl();
-			}
-			return url;
-		}
-
-	}
-
-	
-	static class BasicDatabaseCondition extends NonEmbeddedDatabaseCondition {
-
-		private final Condition hikariCondition = new HikariDatabaseCondition();
-
-		private final Condition tomcatCondition = new TomcatDatabaseCondition();
-
-		@Override
-		protected String getDataSourceClassName() {
-			return ;
-		}
-
-		@Override
-		public ConditionOutcome getMatchOutcome(ConditionContext context,
-				AnnotatedTypeMetadata metadata) {
-			if (anyMatches(context, metadata, this.hikariCondition, this.tomcatCondition)) {
-				return ConditionOutcome.noMatch();
-			}
-			return super.getMatchOutcome(context, metadata);
-		}
-
-	}
-
-	
-	static class HikariDatabaseCondition extends NonEmbeddedDatabaseCondition {
-
-		private final Condition tomcatCondition = new TomcatDatabaseCondition();
-
-		@Override
-		protected String getDataSourceClassName() {
-			return ;
-		}
-
-		@Override
-		public ConditionOutcome getMatchOutcome(ConditionContext context,
-				AnnotatedTypeMetadata metadata) {
-			if (anyMatches(context, metadata, this.tomcatCondition)) {
-				return ConditionOutcome.noMatch();
+			Class<?> dataSourceClass = new DataSourceFactory(context.getClassLoader())
+					.findType();
+			if (dataSourceClass == null) {
+				return null;
 			}
-			return super.getMatchOutcome(context, metadata);
-		}
-
-	}
-
-	
-	static class TomcatDatabaseCondition extends NonEmbeddedDatabaseCondition {
-
-		@Override
-		protected String getDataSourceClassName() {
-			return ;
+			return dataSourceClass.getClassLoader();
 		}
 
 	}
@@ -329,17 +224,12 @@ public class DataSourceAutoConfiguration implements EnvironmentAware {
 	 */
 	static class EmbeddedDatabaseCondition extends SpringBootCondition {
 
-		private final SpringBootCondition hikariCondition = new HikariDatabaseCondition();
-
-		private final SpringBootCondition tomcatCondition = new TomcatDatabaseCondition();
-
-		private final SpringBootCondition dbcpCondition = new BasicDatabaseCondition();
+		private final SpringBootCondition nonEmbedded = new NonEmbeddedDatabaseCondition();
 
 		@Override
 		public ConditionOutcome getMatchOutcome(ConditionContext context,
 				AnnotatedTypeMetadata metadata) {
-			if (anyMatches(context, metadata, this.hikariCondition, this.tomcatCondition,
-					this.dbcpCondition)) {
+			if (anyMatches(context, metadata, this.nonEmbedded)) {
 				return ConditionOutcome
 						.noMatch();
 			}
@@ -358,11 +248,7 @@ public class DataSourceAutoConfiguration implements EnvironmentAware {
 	 */
 	static class DatabaseCondition extends SpringBootCondition {
 
-		private final SpringBootCondition hikariCondition = new HikariDatabaseCondition();
-
-		private final SpringBootCondition tomcatCondition = new TomcatDatabaseCondition();
-
-		private final SpringBootCondition dbcpCondition = new BasicDatabaseCondition();
+		private final SpringBootCondition nonEmbedded = new NonEmbeddedDatabaseCondition();
 
 		private final SpringBootCondition embeddedCondition = new EmbeddedDatabaseCondition();
 
@@ -370,8 +256,7 @@ public class DataSourceAutoConfiguration implements EnvironmentAware {
 		public ConditionOutcome getMatchOutcome(ConditionContext context,
 				AnnotatedTypeMetadata metadata) {
 
-			if (anyMatches(context, metadata, this.hikariCondition, this.tomcatCondition,
-					this.dbcpCondition, this.embeddedCondition)) {
+			if (anyMatches(context, metadata, this.nonEmbedded, this.embeddedCondition)) {
 				return ConditionOutcome.match();
 			}
 

