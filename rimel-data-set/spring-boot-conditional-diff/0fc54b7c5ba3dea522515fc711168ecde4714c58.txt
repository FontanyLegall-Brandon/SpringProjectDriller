@@ -0,0 +1,164 @@
+
+
+package org.springframework.boot.autoconfigure.condition;
+
+import org.junit.After;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.ExpectedException;
+
+import org.springframework.context.annotation.AnnotationConfigApplicationContext;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Primary;
+
+import static org.hamcrest.CoreMatchers.isA;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+
+public class ConditionalOnSingleCandidateTests {
+
+	@Rule
+	public final ExpectedException thrown = ExpectedException.none();
+
+	private final AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();
+
+	@After
+	public void close() {
+		if (this.context != null) {
+			this.context.close();
+		}
+	}
+
+	@Test
+	public void singleCandidateNoCandidate() {
+		load(OnBeanSingleCandidateConfiguration.class);
+		assertFalse(this.context.containsBean());
+	}
+
+	@Test
+	public void singleCandidateOneCandidate() {
+		load(FooConfiguration.class,
+				OnBeanSingleCandidateConfiguration.class);
+		assertTrue(this.context.containsBean());
+		assertEquals(, this.context.getBean());
+	}
+
+	@Test
+	public void singleCandidateMultipleCandidates() {
+		load(FooConfiguration.class, BarConfiguration.class,
+				OnBeanSingleCandidateConfiguration.class);
+		assertFalse(this.context.containsBean());
+	}
+
+	@Test
+	public void singleCandidateMultipleCandidatesOnePrimary() {
+		load(FooPrimaryConfiguration.class, BarConfiguration.class,
+				OnBeanSingleCandidateConfiguration.class);
+		assertTrue(this.context.containsBean());
+		assertEquals(, this.context.getBean());
+	}
+
+	@Test
+	public void singleCandidateMultipleCandidatesMultiplePrimary() {
+		load(FooPrimaryConfiguration.class, BarPrimaryConfiguration.class,
+				OnBeanSingleCandidateConfiguration.class);
+		assertFalse(this.context.containsBean());
+	}
+
+	@Test
+	public void invalidAnnotationTwoTypes() {
+		thrown.expect(IllegalStateException.class);
+		thrown.expectCause(isA(IllegalArgumentException.class));
+		thrown.expectMessage(OnBeanSingleCandidateTwoTypesConfiguration.class.getName());
+		load(OnBeanSingleCandidateTwoTypesConfiguration.class);
+	}
+
+	@Test
+	public void invalidAnnotationNoType() {
+		thrown.expect(IllegalStateException.class);
+		thrown.expectCause(isA(IllegalArgumentException.class));
+		thrown.expectMessage(OnBeanSingleCandidateNoTypeConfiguration.class.getName());
+		load(OnBeanSingleCandidateNoTypeConfiguration.class);
+	}
+
+	private void load(Class<?>... classes) {
+		this.context.register(classes);
+		this.context.refresh();
+	}
+
+	@Configuration
+	@ConditionalOnSingleCandidate(value = String.class)
+	protected static class OnBeanSingleCandidateConfiguration {
+		@Bean
+		public String baz(String s) {
+			return s;
+		}
+	}
+
+	@Configuration
+	@ConditionalOnSingleCandidate(value = String.class, type = )
+	protected static class OnBeanSingleCandidateTwoTypesConfiguration {
+
+	}
+
+	@Configuration
+	@ConditionalOnSingleCandidate
+	protected static class OnBeanSingleCandidateNoTypeConfiguration {
+
+	}
+
+	@Configuration
+	protected static class FooConfiguration {
+		@Bean
+		public String foo() {
+			return ;
+		}
+	}
+
+	@Configuration
+	protected static class FooPrimaryConfiguration {
+		@Bean
+		@Primary
+		public String foo() {
+			return ;
+		}
+	}
+
+	@Configuration
+	protected static class BarConfiguration {
+		@Bean
+		public String bar() {
+			return ;
+		}
+	}
+
+	@Configuration
+	protected static class BarPrimaryConfiguration {
+		@Bean
+		@Primary
+		public String bar() {
+			return ;
+		}
+	}
+}

