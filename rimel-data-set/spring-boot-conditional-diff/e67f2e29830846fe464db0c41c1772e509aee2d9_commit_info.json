{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/couchbase/SpringBootCouchbaseDataConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2012-2016 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.data.couchbase;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.data.couchbase.config.AbstractCouchbaseDataConfiguration;\n+import org.springframework.data.couchbase.config.BeanNames;\n+import org.springframework.data.couchbase.config.CouchbaseConfigurer;\n+import org.springframework.data.couchbase.core.CouchbaseTemplate;\n+import org.springframework.data.couchbase.core.query.Consistency;\n+import org.springframework.data.couchbase.repository.support.IndexManager;\n+\n+/**\n+ * Configure Spring Data\'s couchbase support.\n+ *\n+ * @author Stephane Nicoll\n+ */\n+@Configuration\n+@ConditionalOnMissingBean(AbstractCouchbaseDataConfiguration.class)\n+@ConditionalOnBean(CouchbaseConfigurer.class)\n+class SpringBootCouchbaseDataConfiguration extends AbstractCouchbaseDataConfiguration {\n+\n+\t@Autowired\n+\tprivate CouchbaseDataProperties properties;\n+\n+\t@Autowired(required = false)\n+\tprivate CouchbaseConfigurer couchbaseConfigurer;\n+\n+\t@Override\n+\tprotected CouchbaseConfigurer couchbaseConfigurer() {\n+\t\treturn this.couchbaseConfigurer;\n+\t}\n+\n+\t@Override\n+\tprotected Consistency getDefaultConsistency() {\n+\t\treturn this.properties.getConsistency();\n+\t}\n+\n+\t@Override\n+\t@ConditionalOnMissingBean(name = BeanNames.COUCHBASE_TEMPLATE)\n+\t@Bean(name = BeanNames.COUCHBASE_TEMPLATE)\n+\tpublic CouchbaseTemplate couchbaseTemplate() throws Exception {\n+\t\treturn super.couchbaseTemplate();\n+\t}\n+\n+\t@Override\n+\t@ConditionalOnMissingBean(name = BeanNames.COUCHBASE_INDEX_MANAGER)\n+\t@Bean(name = BeanNames.COUCHBASE_INDEX_MANAGER)\n+\tpublic IndexManager indexManager() {\n+\t\tif (this.properties.isAutoIndex()) {\n+\t\t\treturn new IndexManager(true, true, true);\n+\t\t}\n+\t\telse {\n+\t\t\treturn new IndexManager(false, false, false);\n+\t\t}\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.couchbase;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.couchbase.config.AbstractCouchbaseDataConfiguration;\nimport org.springframework.data.couchbase.config.BeanNames;\nimport org.springframework.data.couchbase.config.CouchbaseConfigurer;\nimport org.springframework.data.couchbase.core.CouchbaseTemplate;\nimport org.springframework.data.couchbase.core.query.Consistency;\nimport org.springframework.data.couchbase.repository.support.IndexManager;\n\n/**\n * Configure Spring Data\'s couchbase support.\n *\n * @author Stephane Nicoll\n */\n@Configuration\n@ConditionalOnMissingBean(AbstractCouchbaseDataConfiguration.class)\n@ConditionalOnBean(CouchbaseConfigurer.class)\nclass SpringBootCouchbaseDataConfiguration extends AbstractCouchbaseDataConfiguration {\n\n\t@Autowired\n\tprivate CouchbaseDataProperties properties;\n\n\t@Autowired(required = false)\n\tprivate CouchbaseConfigurer couchbaseConfigurer;\n\n\t@Override\n\tprotected CouchbaseConfigurer couchbaseConfigurer() {\n\t\treturn this.couchbaseConfigurer;\n\t}\n\n\t@Override\n\tprotected Consistency getDefaultConsistency() {\n\t\treturn this.properties.getConsistency();\n\t}\n\n\t@Override\n\t@ConditionalOnMissingBean(name = BeanNames.COUCHBASE_TEMPLATE)\n\t@Bean(name = BeanNames.COUCHBASE_TEMPLATE)\n\tpublic CouchbaseTemplate couchbaseTemplate() throws Exception {\n\t\treturn super.couchbaseTemplate();\n\t}\n\n\t@Override\n\t@ConditionalOnMissingBean(name = BeanNames.COUCHBASE_INDEX_MANAGER)\n\t@Bean(name = BeanNames.COUCHBASE_INDEX_MANAGER)\n\tpublic IndexManager indexManager() {\n\t\tif (this.properties.isAutoIndex()) {\n\t\t\treturn new IndexManager(true, true, true);\n\t\t}\n\t\telse {\n\t\t\treturn new IndexManager(false, false, false);\n\t\t}\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
