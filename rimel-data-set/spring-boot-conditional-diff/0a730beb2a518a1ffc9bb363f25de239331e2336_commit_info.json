{'_old_path': PosixPath('spring-bootstrap-service/src/main/java/org/springframework/bootstrap/autoconfigure/service/SecurityConfiguration.java'), '_new_path': PosixPath('spring-bootstrap-service/src/main/java/org/springframework/bootstrap/autoconfigure/service/SecurityConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -24,28 +24,39 @@ import org.springframework.bootstrap.context.annotation.EnableConfigurationPrope\n import org.springframework.bootstrap.service.properties.SecurityProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.authentication.AuthenticationEventPublisher;\n import org.springframework.security.authentication.AuthenticationManager;\n+import org.springframework.security.authentication.DefaultAuthenticationEventPublisher;\n+import org.springframework.security.authentication.ProviderManager;\n import org.springframework.security.config.annotation.authentication.AuthenticationBuilder;\n import org.springframework.security.config.annotation.web.EnableWebSecurity;\n import org.springframework.security.config.annotation.web.ExpressionUrlAuthorizations;\n import org.springframework.security.config.annotation.web.HttpConfigurator;\n import org.springframework.security.config.annotation.web.SpringSecurityFilterChainBuilder.IgnoredRequestRegistry;\n-import org.springframework.security.config.annotation.web.WebSecurityConfiguration;\n import org.springframework.security.config.annotation.web.WebSecurityConfigurerAdapter;\n-import org.springframework.stereotype.Component;\n \n /**\n  * @author Dave Syer\n  */\n @Configuration\n @ConditionalOnClass({ EnableWebSecurity.class })\n-@ConditionalOnMissingBean({ WebSecurityConfiguration.class })\n @EnableWebSecurity\n @EnableConfigurationProperties(SecurityProperties.class)\n public class SecurityConfiguration {\n \n-\t@Component\n-\tpublic static class WebSecurityAdapter extends WebSecurityConfigurerAdapter {\n+\t@Bean\n+\t@ConditionalOnMissingBean({ AuthenticationEventPublisher.class })\n+\tpublic AuthenticationEventPublisher authenticationEventPublisher() {\n+\t\treturn new DefaultAuthenticationEventPublisher();\n+\t}\n+\n+\t@Bean\n+\tpublic WebSecurityConfigurerAdapter webSecurityConfigurerAdapter() {\n+\t\treturn new BoostrapWebSecurityConfigurerAdapter();\n+\t}\n+\n+\tprivate static class BoostrapWebSecurityConfigurerAdapter extends\n+\t\t\tWebSecurityConfigurerAdapter {\n \n \t\t@Value("${endpoints.healthz.path:/healthz}")\n \t\tprivate String healthzPath = "/healthz";\n@@ -53,6 +64,9 @@ public class SecurityConfiguration {\n \t\t@Autowired\n \t\tprivate SecurityProperties security;\n \n+\t\t@Autowired\n+\t\tprivate AuthenticationEventPublisher authenticationEventPublisher;\n+\n \t\t@Override\n \t\tprotected void ignoredRequests(IgnoredRequestRegistry ignoredRequests) {\n \t\t\tignoredRequests.antMatchers(this.healthzPath);\n@@ -69,6 +83,17 @@ public class SecurityConfiguration {\n \t\t\tif (this.security.isRequireSsl()) {\n \t\t\t\thttp.requiresChannel().antMatchers("/**").requiresSecure();\n \t\t\t}\n+\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected AuthenticationManager authenticationManager() throws Exception {\n+\t\t\tAuthenticationManager manager = super.authenticationManager();\n+\t\t\tif (manager instanceof ProviderManager) {\n+\t\t\t\t((ProviderManager) manager)\n+\t\t\t\t\t\t.setAuthenticationEventPublisher(this.authenticationEventPublisher);\n+\t\t\t}\n+\t\t\treturn manager;\n \t\t}\n \n \t}\n@@ -84,4 +109,5 @@ public class SecurityConfiguration {\n \t\t}\n \n \t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.bootstrap.autoconfigure.service;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.bootstrap.context.annotation.ConditionalOnClass;\nimport org.springframework.bootstrap.context.annotation.ConditionalOnMissingBean;\nimport org.springframework.bootstrap.context.annotation.EnableConfigurationProperties;\nimport org.springframework.bootstrap.service.properties.SecurityProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationEventPublisher;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.DefaultAuthenticationEventPublisher;\nimport org.springframework.security.authentication.ProviderManager;\nimport org.springframework.security.config.annotation.authentication.AuthenticationBuilder;\nimport org.springframework.security.config.annotation.web.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.ExpressionUrlAuthorizations;\nimport org.springframework.security.config.annotation.web.HttpConfigurator;\nimport org.springframework.security.config.annotation.web.SpringSecurityFilterChainBuilder.IgnoredRequestRegistry;\nimport org.springframework.security.config.annotation.web.WebSecurityConfigurerAdapter;\n\n/**\n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnClass({ EnableWebSecurity.class })\n@EnableWebSecurity\n@EnableConfigurationProperties(SecurityProperties.class)\npublic class SecurityConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean({ AuthenticationEventPublisher.class })\n\tpublic AuthenticationEventPublisher authenticationEventPublisher() {\n\t\treturn new DefaultAuthenticationEventPublisher();\n\t}\n\n\t@Bean\n\tpublic WebSecurityConfigurerAdapter webSecurityConfigurerAdapter() {\n\t\treturn new BoostrapWebSecurityConfigurerAdapter();\n\t}\n\n\tprivate static class BoostrapWebSecurityConfigurerAdapter extends\n\t\t\tWebSecurityConfigurerAdapter {\n\n\t\t@Value("${endpoints.healthz.path:/healthz}")\n\t\tprivate String healthzPath = "/healthz";\n\n\t\t@Autowired\n\t\tprivate SecurityProperties security;\n\n\t\t@Autowired\n\t\tprivate AuthenticationEventPublisher authenticationEventPublisher;\n\n\t\t@Override\n\t\tprotected void ignoredRequests(IgnoredRequestRegistry ignoredRequests) {\n\t\t\tignoredRequests.antMatchers(this.healthzPath);\n\t\t}\n\n\t\t@Override\n\t\tprotected void authorizeUrls(ExpressionUrlAuthorizations interceptUrls) {\n\t\t\tinterceptUrls.antMatchers("/**").hasRole("USER");\n\t\t}\n\n\t\t@Override\n\t\tprotected void configure(HttpConfigurator http) throws Exception {\n\t\t\thttp.antMatcher("/**").httpBasic().and().anonymous().disable();\n\t\t\tif (this.security.isRequireSsl()) {\n\t\t\t\thttp.requiresChannel().antMatchers("/**").requiresSecure();\n\t\t\t}\n\n\t\t}\n\n\t\t@Override\n\t\tprotected AuthenticationManager authenticationManager() throws Exception {\n\t\t\tAuthenticationManager manager = super.authenticationManager();\n\t\t\tif (manager instanceof ProviderManager) {\n\t\t\t\t((ProviderManager) manager)\n\t\t\t\t\t\t.setAuthenticationEventPublisher(this.authenticationEventPublisher);\n\t\t\t}\n\t\t\treturn manager;\n\t\t}\n\n\t}\n\n\t@ConditionalOnMissingBean(AuthenticationManager.class)\n\t@Configuration\n\tpublic static class AuthenticationManagerConfiguration {\n\n\t\t@Bean\n\t\tpublic AuthenticationManager authenticationManager() throws Exception {\n\t\t\treturn new AuthenticationBuilder().inMemoryAuthentication().withUser("user")\n\t\t\t\t\t.password("password").roles("USER").and().and().build();\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.bootstrap.autoconfigure.service;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.bootstrap.context.annotation.ConditionalOnClass;\nimport org.springframework.bootstrap.context.annotation.ConditionalOnMissingBean;\nimport org.springframework.bootstrap.context.annotation.EnableConfigurationProperties;\nimport org.springframework.bootstrap.service.properties.SecurityProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.authentication.AuthenticationBuilder;\nimport org.springframework.security.config.annotation.web.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.ExpressionUrlAuthorizations;\nimport org.springframework.security.config.annotation.web.HttpConfigurator;\nimport org.springframework.security.config.annotation.web.SpringSecurityFilterChainBuilder.IgnoredRequestRegistry;\nimport org.springframework.security.config.annotation.web.WebSecurityConfiguration;\nimport org.springframework.security.config.annotation.web.WebSecurityConfigurerAdapter;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnClass({ EnableWebSecurity.class })\n@ConditionalOnMissingBean({ WebSecurityConfiguration.class })\n@EnableWebSecurity\n@EnableConfigurationProperties(SecurityProperties.class)\npublic class SecurityConfiguration {\n\n\t@Component\n\tpublic static class WebSecurityAdapter extends WebSecurityConfigurerAdapter {\n\n\t\t@Value("${endpoints.healthz.path:/healthz}")\n\t\tprivate String healthzPath = "/healthz";\n\n\t\t@Autowired\n\t\tprivate SecurityProperties security;\n\n\t\t@Override\n\t\tprotected void ignoredRequests(IgnoredRequestRegistry ignoredRequests) {\n\t\t\tignoredRequests.antMatchers(this.healthzPath);\n\t\t}\n\n\t\t@Override\n\t\tprotected void authorizeUrls(ExpressionUrlAuthorizations interceptUrls) {\n\t\t\tinterceptUrls.antMatchers("/**").hasRole("USER");\n\t\t}\n\n\t\t@Override\n\t\tprotected void configure(HttpConfigurator http) throws Exception {\n\t\t\thttp.antMatcher("/**").httpBasic().and().anonymous().disable();\n\t\t\tif (this.security.isRequireSsl()) {\n\t\t\t\thttp.requiresChannel().antMatchers("/**").requiresSecure();\n\t\t\t}\n\t\t}\n\n\t}\n\n\t@ConditionalOnMissingBean(AuthenticationManager.class)\n\t@Configuration\n\tpublic static class AuthenticationManagerConfiguration {\n\n\t\t@Bean\n\t\tpublic AuthenticationManager authenticationManager() throws Exception {\n\t\t\treturn new AuthenticationBuilder().inMemoryAuthentication().withUser("user")\n\t\t\t\t\t.password("password").roles("USER").and().and().build();\n\t\t}\n\n\t}\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
