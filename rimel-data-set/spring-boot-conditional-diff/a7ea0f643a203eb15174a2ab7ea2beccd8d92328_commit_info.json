{'_old_path': PosixPath('spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/autoconfigure/SecurityAutoConfiguration.java'), '_new_path': PosixPath('spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/autoconfigure/SecurityAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -20,7 +20,6 @@ import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n \n-import org.springframework.beans.factory.BeanFactoryUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.bootstrap.actuate.properties.EndpointsProperties;\n import org.springframework.bootstrap.actuate.properties.SecurityProperties;\n@@ -28,16 +27,11 @@ import org.springframework.bootstrap.context.annotation.ConditionalOnClass;\n import org.springframework.bootstrap.context.annotation.ConditionalOnMissingBean;\n import org.springframework.bootstrap.context.annotation.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Condition;\n-import org.springframework.context.annotation.ConditionContext;\n-import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.core.type.AnnotatedTypeMetadata;\n import org.springframework.security.authentication.AuthenticationEventPublisher;\n import org.springframework.security.authentication.AuthenticationManager;\n import org.springframework.security.authentication.DefaultAuthenticationEventPublisher;\n import org.springframework.security.authentication.ProviderManager;\n-import org.springframework.security.config.BeanIds;\n import org.springframework.security.config.annotation.authentication.AuthenticationManagerBuilder;\n import org.springframework.security.config.annotation.web.EnableWebSecurity;\n import org.springframework.security.config.annotation.web.HttpConfiguration;\n@@ -149,7 +143,7 @@ public class SecurityAutoConfiguration {\n \n \t}\n \n-\t@Conditional(NoUserSuppliedAuthenticationManager.class)\n+\t@ConditionalOnMissingBean(AuthenticationManager.class)\n \t@Configuration\n \tpublic static class AuthenticationManagerConfiguration {\n \n@@ -162,21 +156,4 @@ public class SecurityAutoConfiguration {\n \n \t}\n \n-\tprivate static class NoUserSuppliedAuthenticationManager implements Condition {\n-\n-\t\t@Override\n-\t\tpublic boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n-\t\t\tString[] beans = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(\n-\t\t\t\t\tcontext.getBeanFactory(), AuthenticationManager.class, false, false);\n-\t\t\tfor (String bean : beans) {\n-\t\t\t\tif (!BeanIds.AUTHENTICATION_MANAGER.equals(bean)) {\n-\t\t\t\t\t// Not the one supplied by Spring Security automatically\n-\t\t\t\t\treturn false;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn true;\n-\t\t}\n-\n-\t}\n-\n }\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.bootstrap.actuate.autoconfigure;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.bootstrap.actuate.properties.EndpointsProperties;\nimport org.springframework.bootstrap.actuate.properties.SecurityProperties;\nimport org.springframework.bootstrap.context.annotation.ConditionalOnClass;\nimport org.springframework.bootstrap.context.annotation.ConditionalOnMissingBean;\nimport org.springframework.bootstrap.context.annotation.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationEventPublisher;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.DefaultAuthenticationEventPublisher;\nimport org.springframework.security.authentication.ProviderManager;\nimport org.springframework.security.config.annotation.authentication.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.web.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.HttpConfiguration;\nimport org.springframework.security.config.annotation.web.WebSecurityBuilder;\nimport org.springframework.security.config.annotation.web.WebSecurityConfigurerAdapter;\nimport org.springframework.security.web.AuthenticationEntryPoint;\nimport org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint;\n\n/**\n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnClass({ EnableWebSecurity.class })\n@EnableWebSecurity\n@EnableConfigurationProperties\npublic class SecurityAutoConfiguration {\n\n\t@ConditionalOnMissingBean(SecurityProperties.class)\n\t@Bean(name = "org.springframework.bootstrap.actuate.properties.SecurityProperties")\n\tpublic SecurityProperties securityProperties() {\n\t\treturn new SecurityProperties();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean({ AuthenticationEventPublisher.class })\n\tpublic AuthenticationEventPublisher authenticationEventPublisher() {\n\t\treturn new DefaultAuthenticationEventPublisher();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean({ BoostrapWebSecurityConfigurerAdapter.class })\n\tpublic WebSecurityConfigurerAdapter webSecurityConfigurerAdapter() {\n\t\treturn new BoostrapWebSecurityConfigurerAdapter();\n\t}\n\n\tprivate static class BoostrapWebSecurityConfigurerAdapter extends\n\t\t\tWebSecurityConfigurerAdapter {\n\n\t\t@Autowired\n\t\tprivate SecurityProperties security;\n\n\t\t@Autowired\n\t\tprivate EndpointsProperties endpoints;\n\n\t\t@Autowired\n\t\tprivate AuthenticationEventPublisher authenticationEventPublisher;\n\n\t\t@Override\n\t\tprotected void configure(HttpConfiguration http) throws Exception {\n\n\t\t\tif (this.security.isRequireSsl()) {\n\t\t\t\thttp.requiresChannel().anyRequest().requiresSecure();\n\t\t\t}\n\n\t\t\tif (this.security.getBasic().isEnabled()) {\n\n\t\t\t\tString[] paths = getSecurePaths();\n\n\t\t\t\tHttpConfiguration matcher = http.requestMatchers().antMatchers(paths);\n\t\t\t\tmatcher.authenticationEntryPoint(entryPoint()).httpBasic()\n\t\t\t\t\t\t.authenticationEntryPoint(entryPoint()).and().anonymous()\n\t\t\t\t\t\t.disable();\n\t\t\t\tmatcher.authorizeUrls().anyRequest()\n\t\t\t\t\t\t.hasRole(this.security.getBasic().getRole());\n\n\t\t\t}\n\n\t\t\t// No cookies for service endpoints by default\n\t\t\thttp.sessionManagement().sessionCreationPolicy(this.security.getSessions());\n\n\t\t}\n\n\t\tprivate String[] getSecurePaths() {\n\t\t\tList<String> list = new ArrayList<String>();\n\t\t\tfor (String path : this.security.getBasic().getPath()) {\n\t\t\t\tpath = path == null ? "" : path.trim();\n\t\t\t\tif (path.equals("/**")) {\n\t\t\t\t\treturn new String[] { path };\n\t\t\t\t}\n\t\t\t\tif (!path.equals("")) {\n\t\t\t\t\tlist.add(path);\n\t\t\t\t}\n\t\t\t}\n\t\t\tlist.addAll(Arrays.asList(this.endpoints.getSecurePaths()));\n\t\t\treturn list.toArray(new String[list.size()]);\n\t\t}\n\n\t\tprivate AuthenticationEntryPoint entryPoint() {\n\t\t\tBasicAuthenticationEntryPoint entryPoint = new BasicAuthenticationEntryPoint();\n\t\t\tentryPoint.setRealmName(this.security.getBasic().getRealm());\n\t\t\treturn entryPoint;\n\t\t}\n\n\t\t@Override\n\t\tpublic void configure(WebSecurityBuilder builder) throws Exception {\n\t\t\tbuilder.ignoring().antMatchers(this.security.getIgnored())\n\t\t\t\t\t.antMatchers(this.endpoints.getOpenPaths());\n\t\t}\n\n\t\t@Override\n\t\tprotected AuthenticationManager authenticationManager() throws Exception {\n\t\t\tAuthenticationManager manager = super.authenticationManager();\n\t\t\tif (manager instanceof ProviderManager) {\n\t\t\t\t((ProviderManager) manager)\n\t\t\t\t\t\t.setAuthenticationEventPublisher(this.authenticationEventPublisher);\n\t\t\t}\n\t\t\treturn manager;\n\t\t}\n\n\t}\n\n\t@ConditionalOnMissingBean(AuthenticationManager.class)\n\t@Configuration\n\tpublic static class AuthenticationManagerConfiguration {\n\n\t\t@Bean\n\t\tpublic AuthenticationManager authenticationManager() throws Exception {\n\t\t\treturn new AuthenticationManagerBuilder().inMemoryAuthentication()\n\t\t\t\t\t.withUser("user").password("password").roles("USER").and().and()\n\t\t\t\t\t.build();\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.bootstrap.actuate.autoconfigure;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.springframework.beans.factory.BeanFactoryUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.bootstrap.actuate.properties.EndpointsProperties;\nimport org.springframework.bootstrap.actuate.properties.SecurityProperties;\nimport org.springframework.bootstrap.context.annotation.ConditionalOnClass;\nimport org.springframework.bootstrap.context.annotation.ConditionalOnMissingBean;\nimport org.springframework.bootstrap.context.annotation.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Condition;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.security.authentication.AuthenticationEventPublisher;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.DefaultAuthenticationEventPublisher;\nimport org.springframework.security.authentication.ProviderManager;\nimport org.springframework.security.config.BeanIds;\nimport org.springframework.security.config.annotation.authentication.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.web.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.HttpConfiguration;\nimport org.springframework.security.config.annotation.web.WebSecurityBuilder;\nimport org.springframework.security.config.annotation.web.WebSecurityConfigurerAdapter;\nimport org.springframework.security.web.AuthenticationEntryPoint;\nimport org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint;\n\n/**\n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnClass({ EnableWebSecurity.class })\n@EnableWebSecurity\n@EnableConfigurationProperties\npublic class SecurityAutoConfiguration {\n\n\t@ConditionalOnMissingBean(SecurityProperties.class)\n\t@Bean(name = "org.springframework.bootstrap.actuate.properties.SecurityProperties")\n\tpublic SecurityProperties securityProperties() {\n\t\treturn new SecurityProperties();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean({ AuthenticationEventPublisher.class })\n\tpublic AuthenticationEventPublisher authenticationEventPublisher() {\n\t\treturn new DefaultAuthenticationEventPublisher();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean({ BoostrapWebSecurityConfigurerAdapter.class })\n\tpublic WebSecurityConfigurerAdapter webSecurityConfigurerAdapter() {\n\t\treturn new BoostrapWebSecurityConfigurerAdapter();\n\t}\n\n\tprivate static class BoostrapWebSecurityConfigurerAdapter extends\n\t\t\tWebSecurityConfigurerAdapter {\n\n\t\t@Autowired\n\t\tprivate SecurityProperties security;\n\n\t\t@Autowired\n\t\tprivate EndpointsProperties endpoints;\n\n\t\t@Autowired\n\t\tprivate AuthenticationEventPublisher authenticationEventPublisher;\n\n\t\t@Override\n\t\tprotected void configure(HttpConfiguration http) throws Exception {\n\n\t\t\tif (this.security.isRequireSsl()) {\n\t\t\t\thttp.requiresChannel().anyRequest().requiresSecure();\n\t\t\t}\n\n\t\t\tif (this.security.getBasic().isEnabled()) {\n\n\t\t\t\tString[] paths = getSecurePaths();\n\n\t\t\t\tHttpConfiguration matcher = http.requestMatchers().antMatchers(paths);\n\t\t\t\tmatcher.authenticationEntryPoint(entryPoint()).httpBasic()\n\t\t\t\t\t\t.authenticationEntryPoint(entryPoint()).and().anonymous()\n\t\t\t\t\t\t.disable();\n\t\t\t\tmatcher.authorizeUrls().anyRequest()\n\t\t\t\t\t\t.hasRole(this.security.getBasic().getRole());\n\n\t\t\t}\n\n\t\t\t// No cookies for service endpoints by default\n\t\t\thttp.sessionManagement().sessionCreationPolicy(this.security.getSessions());\n\n\t\t}\n\n\t\tprivate String[] getSecurePaths() {\n\t\t\tList<String> list = new ArrayList<String>();\n\t\t\tfor (String path : this.security.getBasic().getPath()) {\n\t\t\t\tpath = path == null ? "" : path.trim();\n\t\t\t\tif (path.equals("/**")) {\n\t\t\t\t\treturn new String[] { path };\n\t\t\t\t}\n\t\t\t\tif (!path.equals("")) {\n\t\t\t\t\tlist.add(path);\n\t\t\t\t}\n\t\t\t}\n\t\t\tlist.addAll(Arrays.asList(this.endpoints.getSecurePaths()));\n\t\t\treturn list.toArray(new String[list.size()]);\n\t\t}\n\n\t\tprivate AuthenticationEntryPoint entryPoint() {\n\t\t\tBasicAuthenticationEntryPoint entryPoint = new BasicAuthenticationEntryPoint();\n\t\t\tentryPoint.setRealmName(this.security.getBasic().getRealm());\n\t\t\treturn entryPoint;\n\t\t}\n\n\t\t@Override\n\t\tpublic void configure(WebSecurityBuilder builder) throws Exception {\n\t\t\tbuilder.ignoring().antMatchers(this.security.getIgnored())\n\t\t\t\t\t.antMatchers(this.endpoints.getOpenPaths());\n\t\t}\n\n\t\t@Override\n\t\tprotected AuthenticationManager authenticationManager() throws Exception {\n\t\t\tAuthenticationManager manager = super.authenticationManager();\n\t\t\tif (manager instanceof ProviderManager) {\n\t\t\t\t((ProviderManager) manager)\n\t\t\t\t\t\t.setAuthenticationEventPublisher(this.authenticationEventPublisher);\n\t\t\t}\n\t\t\treturn manager;\n\t\t}\n\n\t}\n\n\t@Conditional(NoUserSuppliedAuthenticationManager.class)\n\t@Configuration\n\tpublic static class AuthenticationManagerConfiguration {\n\n\t\t@Bean\n\t\tpublic AuthenticationManager authenticationManager() throws Exception {\n\t\t\treturn new AuthenticationManagerBuilder().inMemoryAuthentication()\n\t\t\t\t\t.withUser("user").password("password").roles("USER").and().and()\n\t\t\t\t\t.build();\n\t\t}\n\n\t}\n\n\tprivate static class NoUserSuppliedAuthenticationManager implements Condition {\n\n\t\t@Override\n\t\tpublic boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n\t\t\tString[] beans = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(\n\t\t\t\t\tcontext.getBeanFactory(), AuthenticationManager.class, false, false);\n\t\t\tfor (String bean : beans) {\n\t\t\t\tif (!BeanIds.AUTHENTICATION_MANAGER.equals(bean)) {\n\t\t\t\t\t// Not the one supplied by Spring Security automatically\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
