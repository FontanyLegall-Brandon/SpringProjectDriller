{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/TransactionAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2012-2015 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.transaction;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\n+import org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration;\n+import org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.transaction.PlatformTransactionManager;\n+import org.springframework.transaction.support.TransactionTemplate;\n+\n+/**\n+ * {@link org.springframework.boot.autoconfigure.EnableAutoConfiguration\n+ * Auto-configuration} for Spring transaction.\n+ *\n+ * @author Stephane Nicoll\n+ * @since 1.3.0\n+ */\n+@Configuration\n+@ConditionalOnClass({ TransactionTemplate.class, PlatformTransactionManager.class })\n+@ConditionalOnSingleCandidate(PlatformTransactionManager.class)\n+@AutoConfigureAfter({ JtaAutoConfiguration.class, JpaBaseConfiguration.class,\n+\t\tDataSourceTransactionManagerAutoConfiguration.class })\n+public class TransactionAutoConfiguration {\n+\n+\t@Autowired\n+\tprivate PlatformTransactionManager transactionManager;\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic TransactionTemplate transactionTemplate() {\n+\t\treturn new TransactionTemplate(this.transactionManager);\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.transaction;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration;\nimport org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration;\nimport org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.transaction.support.TransactionTemplate;\n\n/**\n * {@link org.springframework.boot.autoconfigure.EnableAutoConfiguration\n * Auto-configuration} for Spring transaction.\n *\n * @author Stephane Nicoll\n * @since 1.3.0\n */\n@Configuration\n@ConditionalOnClass({ TransactionTemplate.class, PlatformTransactionManager.class })\n@ConditionalOnSingleCandidate(PlatformTransactionManager.class)\n@AutoConfigureAfter({ JtaAutoConfiguration.class, JpaBaseConfiguration.class,\n\t\tDataSourceTransactionManagerAutoConfiguration.class })\npublic class TransactionAutoConfiguration {\n\n\t@Autowired\n\tprivate PlatformTransactionManager transactionManager;\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic TransactionTemplate transactionTemplate() {\n\t\treturn new TransactionTemplate(this.transactionManager);\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
