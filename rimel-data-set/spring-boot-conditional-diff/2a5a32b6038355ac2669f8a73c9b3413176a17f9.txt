@@ -0,0 +1,106 @@
+
+
+package org.springframework.boot.autoconfigure.h2;
+
+import org.h2.server.web.WebServlet;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
+import org.springframework.boot.autoconfigure.security.SecurityAuthorizeMode;
+import org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration;
+import org.springframework.boot.autoconfigure.security.SecurityProperties;
+import org.springframework.boot.context.embedded.ServletRegistrationBean;
+import org.springframework.boot.context.properties.EnableConfigurationProperties;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.core.annotation.Order;
+import org.springframework.security.config.annotation.ObjectPostProcessor;
+import org.springframework.security.config.annotation.web.builders.HttpSecurity;
+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
+
+
+@Configuration
+@ConditionalOnWebApplication
+@ConditionalOnClass(WebServlet.class)
+@ConditionalOnProperty(prefix = , name = , havingValue = , matchIfMissing = false)
+@EnableConfigurationProperties(H2ConsoleProperties.class)
+@AutoConfigureAfter(SecurityAutoConfiguration.class)
+public class H2ConsoleAutoConfiguration {
+
+	@Autowired
+	private H2ConsoleProperties properties;
+
+	@Bean
+	public ServletRegistrationBean h2Console() {
+		return new ServletRegistrationBean(new WebServlet(), this.properties.getPath()
+				.endsWith() ? this.properties.getPath() + 
+				: this.properties.getPath() + );
+	}
+
+	@Configuration
+	@ConditionalOnClass(WebSecurityConfigurerAdapter.class)
+	@ConditionalOnBean(ObjectPostProcessor.class)
+	@ConditionalOnProperty(prefix = , name = , matchIfMissing = true)
+	static class H2ConsoleSecurityConfiguration {
+
+		@Bean
+		public WebSecurityConfigurerAdapter h2ConsoleSecurityConfigurer() {
+			return new H2ConsoleSecurityConfigurer();
+		}
+
+		@Order(SecurityProperties.BASIC_AUTH_ORDER - 10)
+		private static class H2ConsoleSecurityConfigurer extends
+				WebSecurityConfigurerAdapter {
+
+			@Autowired
+			private H2ConsoleProperties console;
+
+			@Autowired
+			private SecurityProperties security;
+
+			@Override
+			public void configure(HttpSecurity http) throws Exception {
+				HttpSecurity h2Console = http.antMatcher(this.console.getPath().endsWith(
+						) ? this.console.getPath() +  : this.console.getPath()
+						+ );
+				h2Console.csrf().disable();
+				h2Console.httpBasic();
+				h2Console.headers().frameOptions().sameOrigin();
+				String[] roles = this.security.getUser().getRole().toArray(new String[0]);
+				SecurityAuthorizeMode mode = this.security.getBasic().getAuthorizeMode();
+				if (mode == null || mode == SecurityAuthorizeMode.ROLE) {
+					http.authorizeRequests().anyRequest().hasAnyRole(roles);
+				}
+				else if (mode == SecurityAuthorizeMode.AUTHENTICATED) {
+					http.authorizeRequests().anyRequest().authenticated();
+				}
+			}
+
+		}
+
+	}
+
+}

