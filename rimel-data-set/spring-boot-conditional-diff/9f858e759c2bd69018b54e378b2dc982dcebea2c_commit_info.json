{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBeanTests.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBeanTests.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -22,6 +22,7 @@ import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n import java.util.Date;\n+import java.util.function.Consumer;\n \n import org.junit.Test;\n \n@@ -33,6 +34,7 @@ import org.springframework.boot.autoconfigure.condition.scan.ScannedFactoryBeanC\n import org.springframework.boot.autoconfigure.condition.scan.ScannedFactoryBeanWithBeanMethodArgumentsConfiguration;\n import org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration;\n import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n+import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.ComponentScan;\n import org.springframework.context.annotation.ComponentScan.Filter;\n@@ -44,6 +46,7 @@ import org.springframework.context.annotation.ImportResource;\n import org.springframework.core.type.AnnotationMetadata;\n import org.springframework.scheduling.annotation.EnableScheduling;\n import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n@@ -304,6 +307,89 @@ public class ConditionalOnMissingBeanTests {\n \t\t\t\t});\n \t}\n \n+\t@Test\n+\tpublic void parameterizedContainerWhenValueIsOfMissingBeanMatches() {\n+\t\tthis.contextRunner\n+\t\t\t\t.withUserConfiguration(ParmeterizedWithoutCustomConfig.class,\n+\t\t\t\t\t\tParmeterizedConditionWithValueConfig.class)\n+\t\t\t\t.run((context) -> assertThat(context).satisfies(exampleBeanRequirement(\n+\t\t\t\t\t\t"otherExampleBean", "conditionalCustomExampleBean")));\n+\t}\n+\n+\t@Test\n+\tpublic void parameterizedContainerWhenValueIsOfExistingBeanDoesNotMatch() {\n+\t\tthis.contextRunner\n+\t\t\t\t.withUserConfiguration(ParmeterizedWithCustomConfig.class,\n+\t\t\t\t\t\tParmeterizedConditionWithValueConfig.class)\n+\t\t\t\t.run((context) -> assertThat(context)\n+\t\t\t\t\t\t.satisfies(exampleBeanRequirement("customExampleBean")));\n+\t}\n+\n+\t@Test\n+\tpublic void parameterizedContainerWhenValueIsOfMissingBeanRegistrationMatches() {\n+\t\tthis.contextRunner\n+\t\t\t\t.withUserConfiguration(ParmeterizedWithoutCustomContainerConfig.class,\n+\t\t\t\t\t\tParmeterizedConditionWithValueConfig.class)\n+\t\t\t\t.run((context) -> assertThat(context).satisfies(exampleBeanRequirement(\n+\t\t\t\t\t\t"otherExampleBean", "conditionalCustomExampleBean")));\n+\t}\n+\n+\t@Test\n+\tpublic void parameterizedContainerWhenValueIsOfExistingBeanRegistrationDoesNotMatch() {\n+\t\tthis.contextRunner\n+\t\t\t\t.withUserConfiguration(ParmeterizedWithCustomContainerConfig.class,\n+\t\t\t\t\t\tParmeterizedConditionWithValueConfig.class)\n+\t\t\t\t.run((context) -> assertThat(context)\n+\t\t\t\t\t\t.satisfies(exampleBeanRequirement("customExampleBean")));\n+\t}\n+\n+\t@Test\n+\tpublic void parameterizedContainerWhenReturnTypeIsOfExistingBeanDoesNotMatch() {\n+\t\tthis.contextRunner\n+\t\t\t\t.withUserConfiguration(ParmeterizedWithCustomConfig.class,\n+\t\t\t\t\t\tParmeterizedConditionWithReturnTypeConfig.class)\n+\t\t\t\t.run((context) -> assertThat(context)\n+\t\t\t\t\t\t.satisfies(exampleBeanRequirement("customExampleBean")));\n+\t}\n+\n+\t@Test\n+\tpublic void parameterizedContainerWhenReturnTypeIsOfExistingBeanRegistrationDoesNotMatch() {\n+\t\tthis.contextRunner\n+\t\t\t\t.withUserConfiguration(ParmeterizedWithCustomContainerConfig.class,\n+\t\t\t\t\t\tParmeterizedConditionWithReturnTypeConfig.class)\n+\t\t\t\t.run((context) -> assertThat(context)\n+\t\t\t\t\t\t.satisfies(exampleBeanRequirement("customExampleBean")));\n+\t}\n+\n+\t@Test\n+\tpublic void parameterizedContainerWhenReturnRegistrationTypeIsOfExistingBeanDoesNotMatch() {\n+\t\tthis.contextRunner\n+\t\t\t\t.withUserConfiguration(ParmeterizedWithCustomConfig.class,\n+\t\t\t\t\t\tParmeterizedConditionWithReturnRegistrationTypeConfig.class)\n+\t\t\t\t.run((context) -> assertThat(context)\n+\t\t\t\t\t\t.satisfies(exampleBeanRequirement("customExampleBean")));\n+\t}\n+\n+\t@Test\n+\tpublic void parameterizedContainerWhenReturnRegistrationTypeIsOfExistingBeanRegistrationDoesNotMatch() {\n+\t\tthis.contextRunner\n+\t\t\t\t.withUserConfiguration(ParmeterizedWithCustomContainerConfig.class,\n+\t\t\t\t\t\tParmeterizedConditionWithReturnRegistrationTypeConfig.class)\n+\t\t\t\t.run((context) -> assertThat(context)\n+\t\t\t\t\t\t.satisfies(exampleBeanRequirement("customExampleBean")));\n+\t}\n+\n+\tprivate Consumer<ConfigurableApplicationContext> exampleBeanRequirement(\n+\t\t\tString... names) {\n+\t\treturn (context) -> {\n+\t\t\tString[] beans = context.getBeanNamesForType(ExampleBean.class);\n+\t\t\tString[] containers = context\n+\t\t\t\t\t.getBeanNamesForType(TestParameterizedContainer.class);\n+\t\t\tassertThat(StringUtils.concatenateStringArrays(beans, containers))\n+\t\t\t\t\t.containsOnly(names);\n+\t\t};\n+\t}\n+\n \t@Configuration\n \tprotected static class OnBeanInAncestorsConfiguration {\n \n@@ -584,30 +670,6 @@ public class ConditionalOnMissingBeanTests {\n \n \t}\n \n-\t@TestAnnotation\n-\tpublic static class ExampleBean {\n-\n-\t\tprivate String value;\n-\n-\t\tpublic ExampleBean(String value) {\n-\t\t\tthis.value = value;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic String toString() {\n-\t\t\treturn this.value;\n-\t\t}\n-\n-\t}\n-\n-\tpublic static class CustomExampleBean extends ExampleBean {\n-\n-\t\tpublic CustomExampleBean() {\n-\t\t\tsuper("custom subclass");\n-\t\t}\n-\n-\t}\n-\n \tpublic static class ExampleFactoryBean implements FactoryBean<ExampleBean> {\n \n \t\tpublic ExampleFactoryBean(String value) {\n@@ -654,6 +716,111 @@ public class ConditionalOnMissingBeanTests {\n \n \t}\n \n+\t@Configuration\n+\tstatic class ParmeterizedWithCustomConfig {\n+\n+\t\t@Bean\n+\t\tpublic CustomExampleBean customExampleBean() {\n+\t\t\treturn new CustomExampleBean();\n+\t\t}\n+\n+\t}\n+\n+\t@Configuration\n+\tstatic class ParmeterizedWithoutCustomConfig {\n+\n+\t\t@Bean\n+\t\tpublic OtherExampleBean otherExampleBean() {\n+\t\t\treturn new OtherExampleBean();\n+\t\t}\n+\n+\t}\n+\n+\t@Configuration\n+\tstatic class ParmeterizedWithoutCustomContainerConfig {\n+\n+\t\t@Bean\n+\t\tpublic TestParameterizedContainer<OtherExampleBean> otherExampleBean() {\n+\t\t\treturn new TestParameterizedContainer<OtherExampleBean>();\n+\t\t}\n+\n+\t}\n+\n+\t@Configuration\n+\tstatic class ParmeterizedWithCustomContainerConfig {\n+\n+\t\t@Bean\n+\t\tpublic TestParameterizedContainer<CustomExampleBean> customExampleBean() {\n+\t\t\treturn new TestParameterizedContainer<CustomExampleBean>();\n+\t\t}\n+\n+\t}\n+\n+\t@Configuration\n+\tstatic class ParmeterizedConditionWithValueConfig {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(value = CustomExampleBean.class, parameterizedContainer = TestParameterizedContainer.class)\n+\t\tpublic CustomExampleBean conditionalCustomExampleBean() {\n+\t\t\treturn new CustomExampleBean();\n+\t\t}\n+\n+\t}\n+\n+\t@Configuration\n+\tstatic class ParmeterizedConditionWithReturnTypeConfig {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(parameterizedContainer = TestParameterizedContainer.class)\n+\t\tpublic CustomExampleBean conditionalCustomExampleBean() {\n+\t\t\treturn new CustomExampleBean();\n+\t\t}\n+\n+\t}\n+\n+\t@Configuration\n+\tstatic class ParmeterizedConditionWithReturnRegistrationTypeConfig {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(parameterizedContainer = TestParameterizedContainer.class)\n+\t\tpublic TestParameterizedContainer<CustomExampleBean> conditionalCustomExampleBean() {\n+\t\t\treturn new TestParameterizedContainer<CustomExampleBean>();\n+\t\t}\n+\n+\t}\n+\n+\t@TestAnnotation\n+\tpublic static class ExampleBean {\n+\n+\t\tprivate String value;\n+\n+\t\tpublic ExampleBean(String value) {\n+\t\t\tthis.value = value;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\treturn this.value;\n+\t\t}\n+\n+\t}\n+\n+\tpublic static class CustomExampleBean extends ExampleBean {\n+\n+\t\tpublic CustomExampleBean() {\n+\t\t\tsuper("custom subclass");\n+\t\t}\n+\n+\t}\n+\n+\tpublic static class OtherExampleBean extends ExampleBean {\n+\n+\t\tpublic OtherExampleBean() {\n+\t\t\tsuper("other subclass");\n+\t\t}\n+\n+\t}\n+\n \t@Target(ElementType.TYPE)\n \t@Retention(RetentionPolicy.RUNTIME)\n \t@Documented\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\nimport java.util.Date;\nimport java.util.function.Consumer;\n\nimport org.junit.Test;\n\nimport org.springframework.beans.factory.FactoryBean;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.beans.factory.support.BeanDefinitionBuilder;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistry;\nimport org.springframework.boot.autoconfigure.condition.scan.ScannedFactoryBeanConfiguration;\nimport org.springframework.boot.autoconfigure.condition.scan.ScannedFactoryBeanWithBeanMethodArgumentsConfiguration;\nimport org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.ComponentScan.Filter;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.FilterType;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.ImportBeanDefinitionRegistrar;\nimport org.springframework.context.annotation.ImportResource;\nimport org.springframework.core.type.AnnotationMetadata;\nimport org.springframework.scheduling.annotation.EnableScheduling;\nimport org.springframework.util.Assert;\nimport org.springframework.util.StringUtils;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link ConditionalOnMissingBean}.\n *\n * @author Dave Syer\n * @author Phillip Webb\n * @author Jakub Kubrynski\n * @author Andy Wilkinson\n */\n@SuppressWarnings("resource")\npublic class ConditionalOnMissingBeanTests {\n\n\tprivate final ApplicationContextRunner contextRunner = new ApplicationContextRunner();\n\n\t@Test\n\tpublic void testNameOnMissingBeanCondition() {\n\t\tthis.contextRunner.withUserConfiguration(FooConfiguration.class,\n\t\t\t\tOnBeanNameConfiguration.class).run((context) -> {\n\t\t\t\t\tassertThat(context).doesNotHaveBean("bar");\n\t\t\t\t\tassertThat(context.getBean("foo")).isEqualTo("foo");\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void testNameOnMissingBeanConditionReverseOrder() {\n\t\tthis.contextRunner.withUserConfiguration(OnBeanNameConfiguration.class,\n\t\t\t\tFooConfiguration.class).run((context) -> {\n\t\t\t\t\t// Ideally this would be doesNotHaveBean, but the ordering is a\n\t\t\t\t\t// problem\n\t\t\t\t\tassertThat(context).hasBean("bar");\n\t\t\t\t\tassertThat(context.getBean("foo")).isEqualTo("foo");\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void testNameAndTypeOnMissingBeanCondition() {\n\t\t// Arguably this should be hasBean, but as things are implemented the conditions\n\t\t// specified in the different attributes of @ConditionalOnBean are combined with\n\t\t// logical OR (not AND) so if any of them match the condition is true.\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(FooConfiguration.class,\n\t\t\t\t\t\tOnBeanNameAndTypeConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(context).doesNotHaveBean("bar"));\n\t}\n\n\t@Test\n\tpublic void hierarchyConsidered() {\n\t\tthis.contextRunner.withUserConfiguration(FooConfiguration.class)\n\t\t\t\t.run((parent) -> new ApplicationContextRunner().withParent(parent)\n\t\t\t\t\t\t.withUserConfiguration(HierarchyConsidered.class)\n\t\t\t\t\t\t.run((context) -> assertThat(context.containsLocalBean("bar"))\n\t\t\t\t\t\t\t\t.isFalse()));\n\t}\n\n\t@Test\n\tpublic void hierarchyNotConsidered() {\n\t\tthis.contextRunner.withUserConfiguration(FooConfiguration.class)\n\t\t\t\t.run((parent) -> new ApplicationContextRunner().withParent(parent)\n\t\t\t\t\t\t.withUserConfiguration(HierarchyNotConsidered.class)\n\t\t\t\t\t\t.run((context) -> assertThat(context.containsLocalBean("bar"))\n\t\t\t\t\t\t\t\t.isTrue()));\n\t}\n\n\t@Test\n\tpublic void impliedOnBeanMethod() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(ExampleBeanConfiguration.class,\n\t\t\t\t\t\tImpliedOnBeanMethod.class)\n\t\t\t\t.run((context) -> assertThat(context).hasSingleBean(ExampleBean.class));\n\t}\n\n\t@Test\n\tpublic void testAnnotationOnMissingBeanCondition() {\n\t\tthis.contextRunner.withUserConfiguration(FooConfiguration.class,\n\t\t\t\tOnAnnotationConfiguration.class).run((context) -> {\n\t\t\t\t\tassertThat(context).doesNotHaveBean("bar");\n\t\t\t\t\tassertThat(context.getBean("foo")).isEqualTo("foo");\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void testAnnotationOnMissingBeanConditionWithEagerFactoryBean() {\n\t\t// Rigorous test for SPR-11069\n\t\tthis.contextRunner.withUserConfiguration(FooConfiguration.class,\n\t\t\t\tOnAnnotationConfiguration.class, FactoryBeanXmlConfiguration.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class).run((context) -> {\n\t\t\t\t\tassertThat(context).doesNotHaveBean("bar");\n\t\t\t\t\tassertThat(context).hasBean("example");\n\t\t\t\t\tassertThat(context.getBean("foo")).isEqualTo("foo");\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithFactoryBean() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(FactoryBeanConfiguration.class,\n\t\t\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\t\t\tPropertyPlaceholderAutoConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(\n\t\t\t\t\t\tcontext.getBean(ExampleBean.class).toString())\n\t\t\t\t\t\t\t\t.isEqualTo("fromFactory"));\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithComponentScannedFactoryBean() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(\n\t\t\t\t\t\tComponentScannedFactoryBeanBeanMethodConfiguration.class,\n\t\t\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\t\t\tPropertyPlaceholderAutoConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(\n\t\t\t\t\t\tcontext.getBean(ExampleBean.class).toString())\n\t\t\t\t\t\t\t\t.isEqualTo("fromFactory"));\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithComponentScannedFactoryBeanWithBeanMethodArguments() {\n\t\tthis.contextRunner.withUserConfiguration(\n\t\t\t\tComponentScannedFactoryBeanBeanMethodWithArgumentsConfiguration.class,\n\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(\n\t\t\t\t\t\tcontext.getBean(ExampleBean.class).toString())\n\t\t\t\t\t\t\t\t.isEqualTo("fromFactory"));\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithFactoryBeanWithBeanMethodArguments() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(\n\t\t\t\t\t\tFactoryBeanWithBeanMethodArgumentsConfiguration.class,\n\t\t\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\t\t\tPropertyPlaceholderAutoConfiguration.class)\n\t\t\t\t.withPropertyValues("theValue=foo")\n\t\t\t\t.run((context) -> assertThat(\n\t\t\t\t\t\tcontext.getBean(ExampleBean.class).toString())\n\t\t\t\t\t\t\t\t.isEqualTo("fromFactory"));\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithConcreteFactoryBean() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(ConcreteFactoryBeanConfiguration.class,\n\t\t\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\t\t\tPropertyPlaceholderAutoConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(\n\t\t\t\t\t\tcontext.getBean(ExampleBean.class).toString())\n\t\t\t\t\t\t\t\t.isEqualTo("fromFactory"));\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithUnhelpfulFactoryBean() {\n\t\t// We could not tell that the FactoryBean would ultimately create an ExampleBean\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(UnhelpfulFactoryBeanConfiguration.class,\n\t\t\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\t\t\tPropertyPlaceholderAutoConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(context).getBeans(ExampleBean.class)\n\t\t\t\t\t\t.hasSize(2));\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithRegisteredFactoryBean() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(RegisteredFactoryBeanConfiguration.class,\n\t\t\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\t\t\tPropertyPlaceholderAutoConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(\n\t\t\t\t\t\tcontext.getBean(ExampleBean.class).toString())\n\t\t\t\t\t\t\t\t.isEqualTo("fromFactory"));\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithNonspecificFactoryBeanWithClassAttribute() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(\n\t\t\t\t\t\tNonspecificFactoryBeanClassAttributeConfiguration.class,\n\t\t\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\t\t\tPropertyPlaceholderAutoConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(\n\t\t\t\t\t\tcontext.getBean(ExampleBean.class).toString())\n\t\t\t\t\t\t\t\t.isEqualTo("fromFactory"));\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithNonspecificFactoryBeanWithStringAttribute() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(\n\t\t\t\t\t\tNonspecificFactoryBeanStringAttributeConfiguration.class,\n\t\t\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\t\t\tPropertyPlaceholderAutoConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(\n\t\t\t\t\t\tcontext.getBean(ExampleBean.class).toString())\n\t\t\t\t\t\t\t\t.isEqualTo("fromFactory"));\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithFactoryBeanInXml() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(FactoryBeanXmlConfiguration.class,\n\t\t\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\t\t\tPropertyPlaceholderAutoConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(\n\t\t\t\t\t\tcontext.getBean(ExampleBean.class).toString())\n\t\t\t\t\t\t\t\t.isEqualTo("fromFactory"));\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithIgnoredSubclass() {\n\t\tthis.contextRunner.withUserConfiguration(CustomExampleBeanConfiguration.class,\n\t\t\t\tConditionalOnIgnoredSubclass.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class).run((context) -> {\n\t\t\t\t\tassertThat(context).getBeans(ExampleBean.class).hasSize(2);\n\t\t\t\t\tassertThat(context).getBeans(CustomExampleBean.class).hasSize(1);\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithIgnoredSubclassByName() {\n\t\tthis.contextRunner.withUserConfiguration(CustomExampleBeanConfiguration.class,\n\t\t\t\tConditionalOnIgnoredSubclassByName.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class).run((context) -> {\n\t\t\t\t\tassertThat(context).getBeans(ExampleBean.class).hasSize(2);\n\t\t\t\t\tassertThat(context).getBeans(CustomExampleBean.class).hasSize(1);\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void grandparentIsConsideredWhenUsingAncestorsStrategy() {\n\t\tthis.contextRunner.withUserConfiguration(ExampleBeanConfiguration.class)\n\t\t\t\t.run((grandparent) -> new ApplicationContextRunner()\n\t\t\t\t\t\t.withParent(grandparent)\n\t\t\t\t\t\t.run((parent) -> new ApplicationContextRunner().withParent(parent)\n\t\t\t\t\t\t\t\t.withUserConfiguration(ExampleBeanConfiguration.class,\n\t\t\t\t\t\t\t\t\t\tOnBeanInAncestorsConfiguration.class)\n\t\t\t\t\t\t\t\t.run((context) -> assertThat(context)\n\t\t\t\t\t\t\t\t\t\t.getBeans(ExampleBean.class).hasSize(1))));\n\t}\n\n\t@Test\n\tpublic void currentContextIsIgnoredWhenUsingAncestorsStrategy() {\n\t\tthis.contextRunner\n\t\t\t\t.run((parent) -> new ApplicationContextRunner().withParent(parent)\n\t\t\t\t\t\t.withUserConfiguration(ExampleBeanConfiguration.class,\n\t\t\t\t\t\t\t\tOnBeanInAncestorsConfiguration.class)\n\t\t\t\t\t\t.run((context) -> assertThat(context).getBeans(ExampleBean.class)\n\t\t\t\t\t\t\t\t.hasSize(2)));\n\t}\n\n\t@Test\n\tpublic void beanProducedByFactoryBeanIsConsideredWhenMatchingOnAnnotation() {\n\t\tthis.contextRunner.withUserConfiguration(ConcreteFactoryBeanConfiguration.class,\n\t\t\t\tOnAnnotationWithFactoryBeanConfiguration.class).run((context) -> {\n\t\t\t\t\tassertThat(context).doesNotHaveBean("bar");\n\t\t\t\t\tassertThat(context).hasSingleBean(ExampleBean.class);\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void parameterizedContainerWhenValueIsOfMissingBeanMatches() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(ParmeterizedWithoutCustomConfig.class,\n\t\t\t\t\t\tParmeterizedConditionWithValueConfig.class)\n\t\t\t\t.run((context) -> assertThat(context).satisfies(exampleBeanRequirement(\n\t\t\t\t\t\t"otherExampleBean", "conditionalCustomExampleBean")));\n\t}\n\n\t@Test\n\tpublic void parameterizedContainerWhenValueIsOfExistingBeanDoesNotMatch() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(ParmeterizedWithCustomConfig.class,\n\t\t\t\t\t\tParmeterizedConditionWithValueConfig.class)\n\t\t\t\t.run((context) -> assertThat(context)\n\t\t\t\t\t\t.satisfies(exampleBeanRequirement("customExampleBean")));\n\t}\n\n\t@Test\n\tpublic void parameterizedContainerWhenValueIsOfMissingBeanRegistrationMatches() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(ParmeterizedWithoutCustomContainerConfig.class,\n\t\t\t\t\t\tParmeterizedConditionWithValueConfig.class)\n\t\t\t\t.run((context) -> assertThat(context).satisfies(exampleBeanRequirement(\n\t\t\t\t\t\t"otherExampleBean", "conditionalCustomExampleBean")));\n\t}\n\n\t@Test\n\tpublic void parameterizedContainerWhenValueIsOfExistingBeanRegistrationDoesNotMatch() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(ParmeterizedWithCustomContainerConfig.class,\n\t\t\t\t\t\tParmeterizedConditionWithValueConfig.class)\n\t\t\t\t.run((context) -> assertThat(context)\n\t\t\t\t\t\t.satisfies(exampleBeanRequirement("customExampleBean")));\n\t}\n\n\t@Test\n\tpublic void parameterizedContainerWhenReturnTypeIsOfExistingBeanDoesNotMatch() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(ParmeterizedWithCustomConfig.class,\n\t\t\t\t\t\tParmeterizedConditionWithReturnTypeConfig.class)\n\t\t\t\t.run((context) -> assertThat(context)\n\t\t\t\t\t\t.satisfies(exampleBeanRequirement("customExampleBean")));\n\t}\n\n\t@Test\n\tpublic void parameterizedContainerWhenReturnTypeIsOfExistingBeanRegistrationDoesNotMatch() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(ParmeterizedWithCustomContainerConfig.class,\n\t\t\t\t\t\tParmeterizedConditionWithReturnTypeConfig.class)\n\t\t\t\t.run((context) -> assertThat(context)\n\t\t\t\t\t\t.satisfies(exampleBeanRequirement("customExampleBean")));\n\t}\n\n\t@Test\n\tpublic void parameterizedContainerWhenReturnRegistrationTypeIsOfExistingBeanDoesNotMatch() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(ParmeterizedWithCustomConfig.class,\n\t\t\t\t\t\tParmeterizedConditionWithReturnRegistrationTypeConfig.class)\n\t\t\t\t.run((context) -> assertThat(context)\n\t\t\t\t\t\t.satisfies(exampleBeanRequirement("customExampleBean")));\n\t}\n\n\t@Test\n\tpublic void parameterizedContainerWhenReturnRegistrationTypeIsOfExistingBeanRegistrationDoesNotMatch() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(ParmeterizedWithCustomContainerConfig.class,\n\t\t\t\t\t\tParmeterizedConditionWithReturnRegistrationTypeConfig.class)\n\t\t\t\t.run((context) -> assertThat(context)\n\t\t\t\t\t\t.satisfies(exampleBeanRequirement("customExampleBean")));\n\t}\n\n\tprivate Consumer<ConfigurableApplicationContext> exampleBeanRequirement(\n\t\t\tString... names) {\n\t\treturn (context) -> {\n\t\t\tString[] beans = context.getBeanNamesForType(ExampleBean.class);\n\t\t\tString[] containers = context\n\t\t\t\t\t.getBeanNamesForType(TestParameterizedContainer.class);\n\t\t\tassertThat(StringUtils.concatenateStringArrays(beans, containers))\n\t\t\t\t\t.containsOnly(names);\n\t\t};\n\t}\n\n\t@Configuration\n\tprotected static class OnBeanInAncestorsConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(search = SearchStrategy.ANCESTORS)\n\t\tpublic ExampleBean exampleBean2() {\n\t\t\treturn new ExampleBean("test");\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(name = "foo")\n\tprotected static class OnBeanNameConfiguration {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(name = "foo", value = Date.class)\n\t@ConditionalOnBean(name = "foo", value = Date.class)\n\tprotected static class OnBeanNameAndTypeConfiguration {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class FactoryBeanConfiguration {\n\n\t\t@Bean\n\t\tpublic FactoryBean<ExampleBean> exampleBeanFactoryBean() {\n\t\t\treturn new ExampleFactoryBean("foo");\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ComponentScan(basePackages = "org.springframework.boot.autoconfigure.condition.scan", includeFilters = @Filter(type = FilterType.ASSIGNABLE_TYPE, classes = ScannedFactoryBeanConfiguration.class))\n\tprotected static class ComponentScannedFactoryBeanBeanMethodConfiguration {\n\n\t}\n\n\t@Configuration\n\t@ComponentScan(basePackages = "org.springframework.boot.autoconfigure.condition.scan", includeFilters = @Filter(type = FilterType.ASSIGNABLE_TYPE, classes = ScannedFactoryBeanWithBeanMethodArgumentsConfiguration.class))\n\tprotected static class ComponentScannedFactoryBeanBeanMethodWithArgumentsConfiguration {\n\n\t}\n\n\t@Configuration\n\tprotected static class FactoryBeanWithBeanMethodArgumentsConfiguration {\n\n\t\t@Bean\n\t\tpublic FactoryBean<ExampleBean> exampleBeanFactoryBean(\n\t\t\t\t@Value("${theValue}") String value) {\n\t\t\treturn new ExampleFactoryBean(value);\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class ConcreteFactoryBeanConfiguration {\n\n\t\t@Bean\n\t\tpublic ExampleFactoryBean exampleBeanFactoryBean() {\n\t\t\treturn new ExampleFactoryBean("foo");\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class UnhelpfulFactoryBeanConfiguration {\n\n\t\t@Bean\n\t\t@SuppressWarnings("rawtypes")\n\t\tpublic FactoryBean exampleBeanFactoryBean() {\n\t\t\treturn new ExampleFactoryBean("foo");\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@Import(NonspecificFactoryBeanClassAttributeRegistrar.class)\n\tprotected static class NonspecificFactoryBeanClassAttributeConfiguration {\n\n\t}\n\n\tprotected static class NonspecificFactoryBeanClassAttributeRegistrar\n\t\t\timplements ImportBeanDefinitionRegistrar {\n\n\t\t@Override\n\t\tpublic void registerBeanDefinitions(AnnotationMetadata meta,\n\t\t\t\tBeanDefinitionRegistry registry) {\n\t\t\tBeanDefinitionBuilder builder = BeanDefinitionBuilder\n\t\t\t\t\t.genericBeanDefinition(NonspecificFactoryBean.class);\n\t\t\tbuilder.addConstructorArgValue("foo");\n\t\t\tbuilder.getBeanDefinition().setAttribute(\n\t\t\t\t\tOnBeanCondition.FACTORY_BEAN_OBJECT_TYPE, ExampleBean.class);\n\t\t\tregistry.registerBeanDefinition("exampleBeanFactoryBean",\n\t\t\t\t\tbuilder.getBeanDefinition());\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@Import(NonspecificFactoryBeanClassAttributeRegistrar.class)\n\tprotected static class NonspecificFactoryBeanStringAttributeConfiguration {\n\n\t}\n\n\tprotected static class NonspecificFactoryBeanStringAttributeRegistrar\n\t\t\timplements ImportBeanDefinitionRegistrar {\n\n\t\t@Override\n\t\tpublic void registerBeanDefinitions(AnnotationMetadata meta,\n\t\t\t\tBeanDefinitionRegistry registry) {\n\t\t\tBeanDefinitionBuilder builder = BeanDefinitionBuilder\n\t\t\t\t\t.genericBeanDefinition(NonspecificFactoryBean.class);\n\t\t\tbuilder.addConstructorArgValue("foo");\n\t\t\tbuilder.getBeanDefinition().setAttribute(\n\t\t\t\t\tOnBeanCondition.FACTORY_BEAN_OBJECT_TYPE,\n\t\t\t\t\tExampleBean.class.getName());\n\t\t\tregistry.registerBeanDefinition("exampleBeanFactoryBean",\n\t\t\t\t\tbuilder.getBeanDefinition());\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@Import(FactoryBeanRegistrar.class)\n\tprotected static class RegisteredFactoryBeanConfiguration {\n\n\t}\n\n\tprotected static class FactoryBeanRegistrar implements ImportBeanDefinitionRegistrar {\n\n\t\t@Override\n\t\tpublic void registerBeanDefinitions(AnnotationMetadata meta,\n\t\t\t\tBeanDefinitionRegistry registry) {\n\t\t\tBeanDefinitionBuilder builder = BeanDefinitionBuilder\n\t\t\t\t\t.genericBeanDefinition(ExampleFactoryBean.class);\n\t\t\tbuilder.addConstructorArgValue("foo");\n\t\t\tregistry.registerBeanDefinition("exampleBeanFactoryBean",\n\t\t\t\t\tbuilder.getBeanDefinition());\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ImportResource("org/springframework/boot/autoconfigure/condition/factorybean.xml")\n\tprotected static class FactoryBeanXmlConfiguration {\n\n\t}\n\n\t@Configuration\n\tprotected static class ConditionalOnFactoryBean {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(ExampleBean.class)\n\t\tpublic ExampleBean createExampleBean() {\n\t\t\treturn new ExampleBean("direct");\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class ConditionalOnIgnoredSubclass {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(value = ExampleBean.class, ignored = CustomExampleBean.class)\n\t\tpublic ExampleBean exampleBean() {\n\t\t\treturn new ExampleBean("test");\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class ConditionalOnIgnoredSubclassByName {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(value = ExampleBean.class, ignoredType = "org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.CustomExampleBean")\n\t\tpublic ExampleBean exampleBean() {\n\t\t\treturn new ExampleBean("test");\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class CustomExampleBeanConfiguration {\n\n\t\t@Bean\n\t\tpublic CustomExampleBean customExampleBean() {\n\t\t\treturn new CustomExampleBean();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(annotation = EnableScheduling.class)\n\tprotected static class OnAnnotationConfiguration {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(annotation = TestAnnotation.class)\n\tprotected static class OnAnnotationWithFactoryBeanConfiguration {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@EnableScheduling\n\tprotected static class FooConfiguration {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(name = "foo")\n\tprotected static class HierarchyConsidered {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(name = "foo", search = SearchStrategy.CURRENT)\n\tprotected static class HierarchyNotConsidered {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class ExampleBeanConfiguration {\n\n\t\t@Bean\n\t\tpublic ExampleBean exampleBean() {\n\t\t\treturn new ExampleBean("test");\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class ImpliedOnBeanMethod {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic ExampleBean exampleBean2() {\n\t\t\treturn new ExampleBean("test");\n\t\t}\n\n\t}\n\n\tpublic static class ExampleFactoryBean implements FactoryBean<ExampleBean> {\n\n\t\tpublic ExampleFactoryBean(String value) {\n\t\t\tAssert.state(!value.contains("$"), "value should not contain \'$\'");\n\t\t}\n\n\t\t@Override\n\t\tpublic ExampleBean getObject() {\n\t\t\treturn new ExampleBean("fromFactory");\n\t\t}\n\n\t\t@Override\n\t\tpublic Class<?> getObjectType() {\n\t\t\treturn ExampleBean.class;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean isSingleton() {\n\t\t\treturn false;\n\t\t}\n\n\t}\n\n\tpublic static class NonspecificFactoryBean implements FactoryBean<Object> {\n\n\t\tpublic NonspecificFactoryBean(String value) {\n\t\t\tAssert.state(!value.contains("$"), "value should not contain \'$\'");\n\t\t}\n\n\t\t@Override\n\t\tpublic ExampleBean getObject() {\n\t\t\treturn new ExampleBean("fromFactory");\n\t\t}\n\n\t\t@Override\n\t\tpublic Class<?> getObjectType() {\n\t\t\treturn ExampleBean.class;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean isSingleton() {\n\t\t\treturn false;\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class ParmeterizedWithCustomConfig {\n\n\t\t@Bean\n\t\tpublic CustomExampleBean customExampleBean() {\n\t\t\treturn new CustomExampleBean();\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class ParmeterizedWithoutCustomConfig {\n\n\t\t@Bean\n\t\tpublic OtherExampleBean otherExampleBean() {\n\t\t\treturn new OtherExampleBean();\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class ParmeterizedWithoutCustomContainerConfig {\n\n\t\t@Bean\n\t\tpublic TestParameterizedContainer<OtherExampleBean> otherExampleBean() {\n\t\t\treturn new TestParameterizedContainer<OtherExampleBean>();\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class ParmeterizedWithCustomContainerConfig {\n\n\t\t@Bean\n\t\tpublic TestParameterizedContainer<CustomExampleBean> customExampleBean() {\n\t\t\treturn new TestParameterizedContainer<CustomExampleBean>();\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class ParmeterizedConditionWithValueConfig {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(value = CustomExampleBean.class, parameterizedContainer = TestParameterizedContainer.class)\n\t\tpublic CustomExampleBean conditionalCustomExampleBean() {\n\t\t\treturn new CustomExampleBean();\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class ParmeterizedConditionWithReturnTypeConfig {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(parameterizedContainer = TestParameterizedContainer.class)\n\t\tpublic CustomExampleBean conditionalCustomExampleBean() {\n\t\t\treturn new CustomExampleBean();\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class ParmeterizedConditionWithReturnRegistrationTypeConfig {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(parameterizedContainer = TestParameterizedContainer.class)\n\t\tpublic TestParameterizedContainer<CustomExampleBean> conditionalCustomExampleBean() {\n\t\t\treturn new TestParameterizedContainer<CustomExampleBean>();\n\t\t}\n\n\t}\n\n\t@TestAnnotation\n\tpublic static class ExampleBean {\n\n\t\tprivate String value;\n\n\t\tpublic ExampleBean(String value) {\n\t\t\tthis.value = value;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn this.value;\n\t\t}\n\n\t}\n\n\tpublic static class CustomExampleBean extends ExampleBean {\n\n\t\tpublic CustomExampleBean() {\n\t\t\tsuper("custom subclass");\n\t\t}\n\n\t}\n\n\tpublic static class OtherExampleBean extends ExampleBean {\n\n\t\tpublic OtherExampleBean() {\n\t\t\tsuper("other subclass");\n\t\t}\n\n\t}\n\n\t@Target(ElementType.TYPE)\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Documented\n\tpublic @interface TestAnnotation {\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\nimport java.util.Date;\n\nimport org.junit.Test;\n\nimport org.springframework.beans.factory.FactoryBean;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.beans.factory.support.BeanDefinitionBuilder;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistry;\nimport org.springframework.boot.autoconfigure.condition.scan.ScannedFactoryBeanConfiguration;\nimport org.springframework.boot.autoconfigure.condition.scan.ScannedFactoryBeanWithBeanMethodArgumentsConfiguration;\nimport org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.ComponentScan.Filter;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.FilterType;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.ImportBeanDefinitionRegistrar;\nimport org.springframework.context.annotation.ImportResource;\nimport org.springframework.core.type.AnnotationMetadata;\nimport org.springframework.scheduling.annotation.EnableScheduling;\nimport org.springframework.util.Assert;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link ConditionalOnMissingBean}.\n *\n * @author Dave Syer\n * @author Phillip Webb\n * @author Jakub Kubrynski\n * @author Andy Wilkinson\n */\n@SuppressWarnings("resource")\npublic class ConditionalOnMissingBeanTests {\n\n\tprivate final ApplicationContextRunner contextRunner = new ApplicationContextRunner();\n\n\t@Test\n\tpublic void testNameOnMissingBeanCondition() {\n\t\tthis.contextRunner.withUserConfiguration(FooConfiguration.class,\n\t\t\t\tOnBeanNameConfiguration.class).run((context) -> {\n\t\t\t\t\tassertThat(context).doesNotHaveBean("bar");\n\t\t\t\t\tassertThat(context.getBean("foo")).isEqualTo("foo");\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void testNameOnMissingBeanConditionReverseOrder() {\n\t\tthis.contextRunner.withUserConfiguration(OnBeanNameConfiguration.class,\n\t\t\t\tFooConfiguration.class).run((context) -> {\n\t\t\t\t\t// Ideally this would be doesNotHaveBean, but the ordering is a\n\t\t\t\t\t// problem\n\t\t\t\t\tassertThat(context).hasBean("bar");\n\t\t\t\t\tassertThat(context.getBean("foo")).isEqualTo("foo");\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void testNameAndTypeOnMissingBeanCondition() {\n\t\t// Arguably this should be hasBean, but as things are implemented the conditions\n\t\t// specified in the different attributes of @ConditionalOnBean are combined with\n\t\t// logical OR (not AND) so if any of them match the condition is true.\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(FooConfiguration.class,\n\t\t\t\t\t\tOnBeanNameAndTypeConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(context).doesNotHaveBean("bar"));\n\t}\n\n\t@Test\n\tpublic void hierarchyConsidered() {\n\t\tthis.contextRunner.withUserConfiguration(FooConfiguration.class)\n\t\t\t\t.run((parent) -> new ApplicationContextRunner().withParent(parent)\n\t\t\t\t\t\t.withUserConfiguration(HierarchyConsidered.class)\n\t\t\t\t\t\t.run((context) -> assertThat(context.containsLocalBean("bar"))\n\t\t\t\t\t\t\t\t.isFalse()));\n\t}\n\n\t@Test\n\tpublic void hierarchyNotConsidered() {\n\t\tthis.contextRunner.withUserConfiguration(FooConfiguration.class)\n\t\t\t\t.run((parent) -> new ApplicationContextRunner().withParent(parent)\n\t\t\t\t\t\t.withUserConfiguration(HierarchyNotConsidered.class)\n\t\t\t\t\t\t.run((context) -> assertThat(context.containsLocalBean("bar"))\n\t\t\t\t\t\t\t\t.isTrue()));\n\t}\n\n\t@Test\n\tpublic void impliedOnBeanMethod() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(ExampleBeanConfiguration.class,\n\t\t\t\t\t\tImpliedOnBeanMethod.class)\n\t\t\t\t.run((context) -> assertThat(context).hasSingleBean(ExampleBean.class));\n\t}\n\n\t@Test\n\tpublic void testAnnotationOnMissingBeanCondition() {\n\t\tthis.contextRunner.withUserConfiguration(FooConfiguration.class,\n\t\t\t\tOnAnnotationConfiguration.class).run((context) -> {\n\t\t\t\t\tassertThat(context).doesNotHaveBean("bar");\n\t\t\t\t\tassertThat(context.getBean("foo")).isEqualTo("foo");\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void testAnnotationOnMissingBeanConditionWithEagerFactoryBean() {\n\t\t// Rigorous test for SPR-11069\n\t\tthis.contextRunner.withUserConfiguration(FooConfiguration.class,\n\t\t\t\tOnAnnotationConfiguration.class, FactoryBeanXmlConfiguration.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class).run((context) -> {\n\t\t\t\t\tassertThat(context).doesNotHaveBean("bar");\n\t\t\t\t\tassertThat(context).hasBean("example");\n\t\t\t\t\tassertThat(context.getBean("foo")).isEqualTo("foo");\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithFactoryBean() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(FactoryBeanConfiguration.class,\n\t\t\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\t\t\tPropertyPlaceholderAutoConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(\n\t\t\t\t\t\tcontext.getBean(ExampleBean.class).toString())\n\t\t\t\t\t\t\t\t.isEqualTo("fromFactory"));\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithComponentScannedFactoryBean() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(\n\t\t\t\t\t\tComponentScannedFactoryBeanBeanMethodConfiguration.class,\n\t\t\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\t\t\tPropertyPlaceholderAutoConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(\n\t\t\t\t\t\tcontext.getBean(ExampleBean.class).toString())\n\t\t\t\t\t\t\t\t.isEqualTo("fromFactory"));\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithComponentScannedFactoryBeanWithBeanMethodArguments() {\n\t\tthis.contextRunner.withUserConfiguration(\n\t\t\t\tComponentScannedFactoryBeanBeanMethodWithArgumentsConfiguration.class,\n\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(\n\t\t\t\t\t\tcontext.getBean(ExampleBean.class).toString())\n\t\t\t\t\t\t\t\t.isEqualTo("fromFactory"));\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithFactoryBeanWithBeanMethodArguments() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(\n\t\t\t\t\t\tFactoryBeanWithBeanMethodArgumentsConfiguration.class,\n\t\t\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\t\t\tPropertyPlaceholderAutoConfiguration.class)\n\t\t\t\t.withPropertyValues("theValue=foo")\n\t\t\t\t.run((context) -> assertThat(\n\t\t\t\t\t\tcontext.getBean(ExampleBean.class).toString())\n\t\t\t\t\t\t\t\t.isEqualTo("fromFactory"));\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithConcreteFactoryBean() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(ConcreteFactoryBeanConfiguration.class,\n\t\t\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\t\t\tPropertyPlaceholderAutoConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(\n\t\t\t\t\t\tcontext.getBean(ExampleBean.class).toString())\n\t\t\t\t\t\t\t\t.isEqualTo("fromFactory"));\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithUnhelpfulFactoryBean() {\n\t\t// We could not tell that the FactoryBean would ultimately create an ExampleBean\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(UnhelpfulFactoryBeanConfiguration.class,\n\t\t\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\t\t\tPropertyPlaceholderAutoConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(context).getBeans(ExampleBean.class)\n\t\t\t\t\t\t.hasSize(2));\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithRegisteredFactoryBean() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(RegisteredFactoryBeanConfiguration.class,\n\t\t\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\t\t\tPropertyPlaceholderAutoConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(\n\t\t\t\t\t\tcontext.getBean(ExampleBean.class).toString())\n\t\t\t\t\t\t\t\t.isEqualTo("fromFactory"));\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithNonspecificFactoryBeanWithClassAttribute() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(\n\t\t\t\t\t\tNonspecificFactoryBeanClassAttributeConfiguration.class,\n\t\t\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\t\t\tPropertyPlaceholderAutoConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(\n\t\t\t\t\t\tcontext.getBean(ExampleBean.class).toString())\n\t\t\t\t\t\t\t\t.isEqualTo("fromFactory"));\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithNonspecificFactoryBeanWithStringAttribute() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(\n\t\t\t\t\t\tNonspecificFactoryBeanStringAttributeConfiguration.class,\n\t\t\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\t\t\tPropertyPlaceholderAutoConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(\n\t\t\t\t\t\tcontext.getBean(ExampleBean.class).toString())\n\t\t\t\t\t\t\t\t.isEqualTo("fromFactory"));\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithFactoryBeanInXml() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(FactoryBeanXmlConfiguration.class,\n\t\t\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\t\t\tPropertyPlaceholderAutoConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(\n\t\t\t\t\t\tcontext.getBean(ExampleBean.class).toString())\n\t\t\t\t\t\t\t\t.isEqualTo("fromFactory"));\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithIgnoredSubclass() {\n\t\tthis.contextRunner.withUserConfiguration(CustomExampleBeanConfiguration.class,\n\t\t\t\tConditionalOnIgnoredSubclass.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class).run((context) -> {\n\t\t\t\t\tassertThat(context).getBeans(ExampleBean.class).hasSize(2);\n\t\t\t\t\tassertThat(context).getBeans(CustomExampleBean.class).hasSize(1);\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithIgnoredSubclassByName() {\n\t\tthis.contextRunner.withUserConfiguration(CustomExampleBeanConfiguration.class,\n\t\t\t\tConditionalOnIgnoredSubclassByName.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class).run((context) -> {\n\t\t\t\t\tassertThat(context).getBeans(ExampleBean.class).hasSize(2);\n\t\t\t\t\tassertThat(context).getBeans(CustomExampleBean.class).hasSize(1);\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void grandparentIsConsideredWhenUsingAncestorsStrategy() {\n\t\tthis.contextRunner.withUserConfiguration(ExampleBeanConfiguration.class)\n\t\t\t\t.run((grandparent) -> new ApplicationContextRunner()\n\t\t\t\t\t\t.withParent(grandparent)\n\t\t\t\t\t\t.run((parent) -> new ApplicationContextRunner().withParent(parent)\n\t\t\t\t\t\t\t\t.withUserConfiguration(ExampleBeanConfiguration.class,\n\t\t\t\t\t\t\t\t\t\tOnBeanInAncestorsConfiguration.class)\n\t\t\t\t\t\t\t\t.run((context) -> assertThat(context)\n\t\t\t\t\t\t\t\t\t\t.getBeans(ExampleBean.class).hasSize(1))));\n\t}\n\n\t@Test\n\tpublic void currentContextIsIgnoredWhenUsingAncestorsStrategy() {\n\t\tthis.contextRunner\n\t\t\t\t.run((parent) -> new ApplicationContextRunner().withParent(parent)\n\t\t\t\t\t\t.withUserConfiguration(ExampleBeanConfiguration.class,\n\t\t\t\t\t\t\t\tOnBeanInAncestorsConfiguration.class)\n\t\t\t\t\t\t.run((context) -> assertThat(context).getBeans(ExampleBean.class)\n\t\t\t\t\t\t\t\t.hasSize(2)));\n\t}\n\n\t@Test\n\tpublic void beanProducedByFactoryBeanIsConsideredWhenMatchingOnAnnotation() {\n\t\tthis.contextRunner.withUserConfiguration(ConcreteFactoryBeanConfiguration.class,\n\t\t\t\tOnAnnotationWithFactoryBeanConfiguration.class).run((context) -> {\n\t\t\t\t\tassertThat(context).doesNotHaveBean("bar");\n\t\t\t\t\tassertThat(context).hasSingleBean(ExampleBean.class);\n\t\t\t\t});\n\t}\n\n\t@Configuration\n\tprotected static class OnBeanInAncestorsConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(search = SearchStrategy.ANCESTORS)\n\t\tpublic ExampleBean exampleBean2() {\n\t\t\treturn new ExampleBean("test");\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(name = "foo")\n\tprotected static class OnBeanNameConfiguration {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(name = "foo", value = Date.class)\n\t@ConditionalOnBean(name = "foo", value = Date.class)\n\tprotected static class OnBeanNameAndTypeConfiguration {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class FactoryBeanConfiguration {\n\n\t\t@Bean\n\t\tpublic FactoryBean<ExampleBean> exampleBeanFactoryBean() {\n\t\t\treturn new ExampleFactoryBean("foo");\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ComponentScan(basePackages = "org.springframework.boot.autoconfigure.condition.scan", includeFilters = @Filter(type = FilterType.ASSIGNABLE_TYPE, classes = ScannedFactoryBeanConfiguration.class))\n\tprotected static class ComponentScannedFactoryBeanBeanMethodConfiguration {\n\n\t}\n\n\t@Configuration\n\t@ComponentScan(basePackages = "org.springframework.boot.autoconfigure.condition.scan", includeFilters = @Filter(type = FilterType.ASSIGNABLE_TYPE, classes = ScannedFactoryBeanWithBeanMethodArgumentsConfiguration.class))\n\tprotected static class ComponentScannedFactoryBeanBeanMethodWithArgumentsConfiguration {\n\n\t}\n\n\t@Configuration\n\tprotected static class FactoryBeanWithBeanMethodArgumentsConfiguration {\n\n\t\t@Bean\n\t\tpublic FactoryBean<ExampleBean> exampleBeanFactoryBean(\n\t\t\t\t@Value("${theValue}") String value) {\n\t\t\treturn new ExampleFactoryBean(value);\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class ConcreteFactoryBeanConfiguration {\n\n\t\t@Bean\n\t\tpublic ExampleFactoryBean exampleBeanFactoryBean() {\n\t\t\treturn new ExampleFactoryBean("foo");\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class UnhelpfulFactoryBeanConfiguration {\n\n\t\t@Bean\n\t\t@SuppressWarnings("rawtypes")\n\t\tpublic FactoryBean exampleBeanFactoryBean() {\n\t\t\treturn new ExampleFactoryBean("foo");\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@Import(NonspecificFactoryBeanClassAttributeRegistrar.class)\n\tprotected static class NonspecificFactoryBeanClassAttributeConfiguration {\n\n\t}\n\n\tprotected static class NonspecificFactoryBeanClassAttributeRegistrar\n\t\t\timplements ImportBeanDefinitionRegistrar {\n\n\t\t@Override\n\t\tpublic void registerBeanDefinitions(AnnotationMetadata meta,\n\t\t\t\tBeanDefinitionRegistry registry) {\n\t\t\tBeanDefinitionBuilder builder = BeanDefinitionBuilder\n\t\t\t\t\t.genericBeanDefinition(NonspecificFactoryBean.class);\n\t\t\tbuilder.addConstructorArgValue("foo");\n\t\t\tbuilder.getBeanDefinition().setAttribute(\n\t\t\t\t\tOnBeanCondition.FACTORY_BEAN_OBJECT_TYPE, ExampleBean.class);\n\t\t\tregistry.registerBeanDefinition("exampleBeanFactoryBean",\n\t\t\t\t\tbuilder.getBeanDefinition());\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@Import(NonspecificFactoryBeanClassAttributeRegistrar.class)\n\tprotected static class NonspecificFactoryBeanStringAttributeConfiguration {\n\n\t}\n\n\tprotected static class NonspecificFactoryBeanStringAttributeRegistrar\n\t\t\timplements ImportBeanDefinitionRegistrar {\n\n\t\t@Override\n\t\tpublic void registerBeanDefinitions(AnnotationMetadata meta,\n\t\t\t\tBeanDefinitionRegistry registry) {\n\t\t\tBeanDefinitionBuilder builder = BeanDefinitionBuilder\n\t\t\t\t\t.genericBeanDefinition(NonspecificFactoryBean.class);\n\t\t\tbuilder.addConstructorArgValue("foo");\n\t\t\tbuilder.getBeanDefinition().setAttribute(\n\t\t\t\t\tOnBeanCondition.FACTORY_BEAN_OBJECT_TYPE,\n\t\t\t\t\tExampleBean.class.getName());\n\t\t\tregistry.registerBeanDefinition("exampleBeanFactoryBean",\n\t\t\t\t\tbuilder.getBeanDefinition());\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@Import(FactoryBeanRegistrar.class)\n\tprotected static class RegisteredFactoryBeanConfiguration {\n\n\t}\n\n\tprotected static class FactoryBeanRegistrar implements ImportBeanDefinitionRegistrar {\n\n\t\t@Override\n\t\tpublic void registerBeanDefinitions(AnnotationMetadata meta,\n\t\t\t\tBeanDefinitionRegistry registry) {\n\t\t\tBeanDefinitionBuilder builder = BeanDefinitionBuilder\n\t\t\t\t\t.genericBeanDefinition(ExampleFactoryBean.class);\n\t\t\tbuilder.addConstructorArgValue("foo");\n\t\t\tregistry.registerBeanDefinition("exampleBeanFactoryBean",\n\t\t\t\t\tbuilder.getBeanDefinition());\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ImportResource("org/springframework/boot/autoconfigure/condition/factorybean.xml")\n\tprotected static class FactoryBeanXmlConfiguration {\n\n\t}\n\n\t@Configuration\n\tprotected static class ConditionalOnFactoryBean {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(ExampleBean.class)\n\t\tpublic ExampleBean createExampleBean() {\n\t\t\treturn new ExampleBean("direct");\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class ConditionalOnIgnoredSubclass {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(value = ExampleBean.class, ignored = CustomExampleBean.class)\n\t\tpublic ExampleBean exampleBean() {\n\t\t\treturn new ExampleBean("test");\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class ConditionalOnIgnoredSubclassByName {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(value = ExampleBean.class, ignoredType = "org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.CustomExampleBean")\n\t\tpublic ExampleBean exampleBean() {\n\t\t\treturn new ExampleBean("test");\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class CustomExampleBeanConfiguration {\n\n\t\t@Bean\n\t\tpublic CustomExampleBean customExampleBean() {\n\t\t\treturn new CustomExampleBean();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(annotation = EnableScheduling.class)\n\tprotected static class OnAnnotationConfiguration {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(annotation = TestAnnotation.class)\n\tprotected static class OnAnnotationWithFactoryBeanConfiguration {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@EnableScheduling\n\tprotected static class FooConfiguration {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(name = "foo")\n\tprotected static class HierarchyConsidered {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(name = "foo", search = SearchStrategy.CURRENT)\n\tprotected static class HierarchyNotConsidered {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class ExampleBeanConfiguration {\n\n\t\t@Bean\n\t\tpublic ExampleBean exampleBean() {\n\t\t\treturn new ExampleBean("test");\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class ImpliedOnBeanMethod {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic ExampleBean exampleBean2() {\n\t\t\treturn new ExampleBean("test");\n\t\t}\n\n\t}\n\n\t@TestAnnotation\n\tpublic static class ExampleBean {\n\n\t\tprivate String value;\n\n\t\tpublic ExampleBean(String value) {\n\t\t\tthis.value = value;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn this.value;\n\t\t}\n\n\t}\n\n\tpublic static class CustomExampleBean extends ExampleBean {\n\n\t\tpublic CustomExampleBean() {\n\t\t\tsuper("custom subclass");\n\t\t}\n\n\t}\n\n\tpublic static class ExampleFactoryBean implements FactoryBean<ExampleBean> {\n\n\t\tpublic ExampleFactoryBean(String value) {\n\t\t\tAssert.state(!value.contains("$"), "value should not contain \'$\'");\n\t\t}\n\n\t\t@Override\n\t\tpublic ExampleBean getObject() {\n\t\t\treturn new ExampleBean("fromFactory");\n\t\t}\n\n\t\t@Override\n\t\tpublic Class<?> getObjectType() {\n\t\t\treturn ExampleBean.class;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean isSingleton() {\n\t\t\treturn false;\n\t\t}\n\n\t}\n\n\tpublic static class NonspecificFactoryBean implements FactoryBean<Object> {\n\n\t\tpublic NonspecificFactoryBean(String value) {\n\t\t\tAssert.state(!value.contains("$"), "value should not contain \'$\'");\n\t\t}\n\n\t\t@Override\n\t\tpublic ExampleBean getObject() {\n\t\t\treturn new ExampleBean("fromFactory");\n\t\t}\n\n\t\t@Override\n\t\tpublic Class<?> getObjectType() {\n\t\t\treturn ExampleBean.class;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean isSingleton() {\n\t\t\treturn false;\n\t\t}\n\n\t}\n\n\t@Target(ElementType.TYPE)\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Documented\n\tpublic @interface TestAnnotation {\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
