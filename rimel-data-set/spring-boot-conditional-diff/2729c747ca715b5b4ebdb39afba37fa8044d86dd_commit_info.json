{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mustache/MustacheAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2013-2014 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.mustache;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.autoconfigure.mustache.web.MustacheViewResolver;\n+import org.springframework.boot.autoconfigure.template.TemplateLocation;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.Ordered;\n+import org.springframework.core.env.Environment;\n+import org.springframework.util.Assert;\n+\n+import com.samskivert.mustache.Mustache;\n+import com.samskivert.mustache.Mustache.Collector;\n+import com.samskivert.mustache.Mustache.Compiler;\n+import com.samskivert.mustache.Mustache.TemplateLoader;\n+\n+/**\n+ * @author Dave Syer\n+ * @since 1.2.2\n+ *\n+ */\n+@Configuration\n+@ConditionalOnClass(Mustache.class)\n+@EnableConfigurationProperties(MustacheProperties.class)\n+public class MustacheAutoConfiguration {\n+\n+\t@Autowired\n+\tprivate MustacheProperties mustache;\n+\n+\t@Autowired\n+\tprivate Environment environment;\n+\n+\t@Autowired\n+\tprivate ApplicationContext applicationContext;\n+\n+\t@PostConstruct\n+\tpublic void checkTemplateLocationExists() {\n+\t\tif (this.mustache.isCheckTemplateLocation()) {\n+\t\t\tTemplateLocation location = new TemplateLocation(this.mustache.getPrefix());\n+\t\t\tAssert.state(location.exists(this.applicationContext),\n+\t\t\t\t\t"Cannot find template location: " + location\n+\t\t\t\t\t\t\t+ " (please add some templates, check your Mustache "\n+\t\t\t\t\t\t\t+ "configuration, or set spring.mustache.template."\n+\t\t\t\t\t\t\t+ "check-template-location=false)");\n+\t\t}\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean(Mustache.Compiler.class)\n+\tpublic Mustache.Compiler mustacheCompiler(TemplateLoader mustacheTemplateLoader) {\n+\t\treturn Mustache.compiler().withLoader(mustacheTemplateLoader)\n+\t\t\t\t.withCollector(collector());\n+\t}\n+\n+\tprivate Collector collector() {\n+\t\tMustacheEnvironmentCollector collector = new MustacheEnvironmentCollector();\n+\t\tcollector.setEnvironment(this.environment);\n+\t\treturn collector;\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean(TemplateLoader.class)\n+\tpublic MustacheResourceTemplateLoader mustacheTemplateLoader() {\n+\t\tMustacheResourceTemplateLoader loader = new MustacheResourceTemplateLoader(\n+\t\t\t\tthis.mustache.getPrefix(), this.mustache.getSuffix());\n+\t\tloader.setCharset(this.mustache.getCharset());\n+\t\treturn loader;\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnWebApplication\n+\tprotected static class MustacheWebConfiguration {\n+\n+\t\t@Autowired\n+\t\tprivate MustacheProperties mustache;\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(MustacheViewResolver.class)\n+\t\tpublic MustacheViewResolver mustacheViewResolver(Compiler mustacheCompiler) {\n+\t\t\tMustacheViewResolver resolver = new MustacheViewResolver();\n+\t\t\tresolver.setPrefix(this.mustache.getPrefix());\n+\t\t\tresolver.setSuffix(this.mustache.getSuffix());\n+\t\t\tresolver.setCache(this.mustache.isCache());\n+\t\t\tresolver.setViewNames(this.mustache.getViewNames());\n+\t\t\tresolver.setContentType(this.mustache.getContentType());\n+\t\t\tresolver.setCompiler(mustacheCompiler);\n+\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 10);\n+\t\t\treturn resolver;\n+\t\t}\n+\n+\t}\n+}\n', 'source_code': '/*\n * Copyright 2013-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.mustache;\n\nimport javax.annotation.PostConstruct;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.mustache.web.MustacheViewResolver;\nimport org.springframework.boot.autoconfigure.template.TemplateLocation;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.env.Environment;\nimport org.springframework.util.Assert;\n\nimport com.samskivert.mustache.Mustache;\nimport com.samskivert.mustache.Mustache.Collector;\nimport com.samskivert.mustache.Mustache.Compiler;\nimport com.samskivert.mustache.Mustache.TemplateLoader;\n\n/**\n * @author Dave Syer\n * @since 1.2.2\n *\n */\n@Configuration\n@ConditionalOnClass(Mustache.class)\n@EnableConfigurationProperties(MustacheProperties.class)\npublic class MustacheAutoConfiguration {\n\n\t@Autowired\n\tprivate MustacheProperties mustache;\n\n\t@Autowired\n\tprivate Environment environment;\n\n\t@Autowired\n\tprivate ApplicationContext applicationContext;\n\n\t@PostConstruct\n\tpublic void checkTemplateLocationExists() {\n\t\tif (this.mustache.isCheckTemplateLocation()) {\n\t\t\tTemplateLocation location = new TemplateLocation(this.mustache.getPrefix());\n\t\t\tAssert.state(location.exists(this.applicationContext),\n\t\t\t\t\t"Cannot find template location: " + location\n\t\t\t\t\t\t\t+ " (please add some templates, check your Mustache "\n\t\t\t\t\t\t\t+ "configuration, or set spring.mustache.template."\n\t\t\t\t\t\t\t+ "check-template-location=false)");\n\t\t}\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(Mustache.Compiler.class)\n\tpublic Mustache.Compiler mustacheCompiler(TemplateLoader mustacheTemplateLoader) {\n\t\treturn Mustache.compiler().withLoader(mustacheTemplateLoader)\n\t\t\t\t.withCollector(collector());\n\t}\n\n\tprivate Collector collector() {\n\t\tMustacheEnvironmentCollector collector = new MustacheEnvironmentCollector();\n\t\tcollector.setEnvironment(this.environment);\n\t\treturn collector;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(TemplateLoader.class)\n\tpublic MustacheResourceTemplateLoader mustacheTemplateLoader() {\n\t\tMustacheResourceTemplateLoader loader = new MustacheResourceTemplateLoader(\n\t\t\t\tthis.mustache.getPrefix(), this.mustache.getSuffix());\n\t\tloader.setCharset(this.mustache.getCharset());\n\t\treturn loader;\n\t}\n\n\t@Configuration\n\t@ConditionalOnWebApplication\n\tprotected static class MustacheWebConfiguration {\n\n\t\t@Autowired\n\t\tprivate MustacheProperties mustache;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(MustacheViewResolver.class)\n\t\tpublic MustacheViewResolver mustacheViewResolver(Compiler mustacheCompiler) {\n\t\t\tMustacheViewResolver resolver = new MustacheViewResolver();\n\t\t\tresolver.setPrefix(this.mustache.getPrefix());\n\t\t\tresolver.setSuffix(this.mustache.getSuffix());\n\t\t\tresolver.setCache(this.mustache.isCache());\n\t\t\tresolver.setViewNames(this.mustache.getViewNames());\n\t\t\tresolver.setContentType(this.mustache.getContentType());\n\t\t\tresolver.setCompiler(mustacheCompiler);\n\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 10);\n\t\t\treturn resolver;\n\t\t}\n\n\t}\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
