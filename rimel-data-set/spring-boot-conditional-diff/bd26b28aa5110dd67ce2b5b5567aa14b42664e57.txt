@@ -14,30 +14,21 @@
  * limitations under the License.
  */
 
-package org.springframework.boot.actuate.autoconfigure;
+package org.springframework.boot.autoconfigure.security;
 
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.LinkedHashSet;
 import java.util.List;
-import java.util.Set;
 
 import javax.servlet.Filter;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.actuate.endpoint.Endpoint;
-import org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping;
-import org.springframework.boot.actuate.properties.ManagementServerProperties;
-import org.springframework.boot.actuate.properties.SecurityProperties;
-import org.springframework.boot.actuate.properties.SecurityProperties.Headers;
-import org.springframework.boot.actuate.properties.SecurityProperties.User;
-import org.springframework.boot.actuate.web.ErrorController;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.security.SecurityProperties.Headers;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -47,10 +38,7 @@ import org.springframework.security.authentication.AuthenticationEventPublisher;
 import org.springframework.security.authentication.AuthenticationManager;
 import org.springframework.security.authentication.DefaultAuthenticationEventPublisher;
 import org.springframework.security.authentication.ProviderManager;
-import org.springframework.security.config.annotation.ObjectPostProcessor;
 import org.springframework.security.config.annotation.SecurityConfigurer;
-import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
-import org.springframework.security.config.annotation.authentication.configurers.provisioning.InMemoryUserDetailsManagerConfigurer;
 import org.springframework.security.config.annotation.web.builders.HttpSecurity;
 import org.springframework.security.config.annotation.web.builders.WebSecurity;
 import org.springframework.security.config.annotation.web.builders.WebSecurity.IgnoredRequestConfigurer;
@@ -76,11 +64,6 @@ import org.springframework.security.web.util.matcher.AnyRequestMatcher;
  * events.
  * 
  * <p>
- * The framework {@link Endpoint}s (used to expose application information to operations)
- * include a {@link Endpoint#isSensitive() sensitive} configuration option which will be
- * used as a security hint by the filter created here.
- * 
- * <p>
  * Some common simple customizations:
  * <ul>
  * <li>Switch off security completely and permanently: remove Spring Security from the
@@ -95,14 +78,15 @@ import org.springframework.security.web.util.matcher.AnyRequestMatcher;
  * @author Dave Syer
  */
 @Configuration
+@EnableConfigurationProperties
 @ConditionalOnClass({ EnableWebSecurity.class })
 @ConditionalOnMissingBean(annotation = EnableWebSecurity.class)
-@EnableConfigurationProperties
 public class SecurityAutoConfiguration {
 
-	private static final String[] NO_PATHS = new String[0];
+	private static List<String> DEFAULT_IGNORED = Arrays.asList(, ,
+			, );
 
-	@Bean(name = )
+	@Bean(name = )
 	@ConditionalOnMissingBean
 	public SecurityProperties securityProperties() {
 		return new SecurityProperties();
@@ -114,41 +98,18 @@ public class SecurityAutoConfiguration {
 		return new DefaultAuthenticationEventPublisher();
 	}
 
-	@Bean
-	@ConditionalOnMissingBean({ ApplicationWebSecurityConfigurerAdapter.class })
-	@ConditionalOnExpression()
-	public WebSecurityConfigurerAdapter applicationWebSecurityConfigurerAdapter() {
-		return new ApplicationWebSecurityConfigurerAdapter();
-	}
-
-	@Bean
-	@ConditionalOnMissingBean({ ManagementWebSecurityConfigurerAdapter.class })
-	@ConditionalOnExpression()
-	public WebSecurityConfigurerAdapter managementWebSecurityConfigurerAdapter() {
-		return new ManagementWebSecurityConfigurerAdapter();
-	}
-
 	@Bean
 	@ConditionalOnMissingBean({ IgnoredPathsWebSecurityConfigurerAdapter.class })
+	@ConditionalOnBean(annotation = EnableWebSecurity.class)
 	public SecurityConfigurer<Filter, WebSecurity> ignoredPathsWebSecurityConfigurerAdapter() {
 		return new IgnoredPathsWebSecurityConfigurerAdapter();
 	}
 
 	
 	@Order(Ordered.HIGHEST_PRECEDENCE)
-	@EnableWebSecurity
 	private static class IgnoredPathsWebSecurityConfigurerAdapter implements
 			SecurityConfigurer<Filter, WebSecurity> {
 
-		private static List<String> DEFAULT_IGNORED = Arrays.asList(, ,
-				, );
-
-		@Autowired(required = false)
-		private ErrorController errorController;
-
-		@Autowired(required = false)
-		private EndpointHandlerMapping endpointHandlerMapping;
-
 		@Autowired
 		private SecurityProperties security;
 
@@ -159,29 +120,18 @@ public class SecurityAutoConfiguration {
 		@Override
 		public void init(WebSecurity builder) throws Exception {
 			IgnoredRequestConfigurer ignoring = builder.ignoring();
-			ignoring.antMatchers(getEndpointPaths(this.endpointHandlerMapping, false));
-			List<String> ignored = new ArrayList<String>(this.security.getIgnored());
-			if (!this.security.getManagement().isEnabled()) {
-				ignored.addAll(Arrays.asList(getEndpointPaths(
-						this.endpointHandlerMapping, true)));
-			}
-			if (ignored.isEmpty()) {
-				ignored.addAll(DEFAULT_IGNORED);
-			}
-			else if (ignored.contains()) {
-				ignored.remove();
-			}
-			if (this.errorController != null) {
-				ignored.add(this.errorController.getErrorPath());
-			}
+			List<String> ignored = getIgnored(this.security);
 			ignoring.antMatchers(ignored.toArray(new String[0]));
 		}
 
 	}
 
-	
+	@ConditionalOnMissingBean({ ApplicationWebSecurityConfigurerAdapter.class })
+	@ConditionalOnExpression()
+	@Configuration
+	@EnableWebSecurity
 	@Order(Ordered.LOWEST_PRECEDENCE - 5)
-	private static class ApplicationWebSecurityConfigurerAdapter extends
+	protected static class ApplicationWebSecurityConfigurerAdapter extends
 			WebSecurityConfigurerAdapter {
 
 		@Autowired
@@ -201,8 +151,10 @@ public class SecurityAutoConfiguration {
 			if (this.security.getBasic().isEnabled() && paths.length > 0) {
 				http.exceptionHandling().authenticationEntryPoint(entryPoint());
 				http.requestMatchers().antMatchers(paths);
-				http.authorizeRequests().anyRequest()
-						.hasRole(this.security.getUser().getRole()) 
+				http.authorizeRequests()
+						.anyRequest()
+						.hasAnyRole(
+								this.security.getUser().getRole().toArray(new String[0])) 
 						.and().httpBasic() 
 						.and().anonymous().disable();
 			}
@@ -247,111 +199,15 @@ public class SecurityAutoConfiguration {
 			return manager;
 		}
 
-	}
-
-	
-	@Order(Ordered.LOWEST_PRECEDENCE - 10)
-	private static class ManagementWebSecurityConfigurerAdapter extends
-			WebSecurityConfigurerAdapter {
-
-		@Autowired
-		private SecurityProperties security;
-
-		@Autowired
-		private ManagementServerProperties management;
-
-		@Autowired(required = false)
-		private EndpointHandlerMapping endpointHandlerMapping;
-
-		@Override
-		protected void configure(HttpSecurity http) throws Exception {
-
-			
-			String[] paths = getEndpointPaths(this.endpointHandlerMapping, true);
-			if (paths.length > 0 && this.security.getManagement().isEnabled()) {
-				
-				if (this.security.isRequireSsl()) {
-					http.requiresChannel().anyRequest().requiresSecure();
-				}
-				http.exceptionHandling().authenticationEntryPoint(entryPoint());
-				http.requestMatchers().antMatchers(paths);
-				http.authorizeRequests().anyRequest()
-						.hasRole(this.security.getManagement().getRole()) 
-						.and().httpBasic() 
-						.and().anonymous().disable();
-
-				
-				http.csrf().disable();
-				http.sessionManagement().sessionCreationPolicy(
-						this.security.getManagement().getSessions());
-
-				SecurityAutoConfiguration.configureHeaders(http.headers(),
-						this.security.getHeaders());
-
-			}
-
-		}
-
-		private AuthenticationEntryPoint entryPoint() {
-			BasicAuthenticationEntryPoint entryPoint = new BasicAuthenticationEntryPoint();
-			entryPoint.setRealmName(this.security.getBasic().getRealm());
-			return entryPoint;
-		}
-
-	}
-
-	@ConditionalOnMissingBean(AuthenticationManager.class)
-	@Configuration
-	public static class AuthenticationManagerConfiguration {
-
-		private static Log logger = LogFactory
-				.getLog(AuthenticationManagerConfiguration.class);
-
-		@Autowired
-		private SecurityProperties security;
-
-		@Bean
-		public AuthenticationManager authenticationManager(
-				ObjectPostProcessor<Object> objectPostProcessor) throws Exception {
-
-			InMemoryUserDetailsManagerConfigurer<AuthenticationManagerBuilder> builder = new AuthenticationManagerBuilder(
-					objectPostProcessor).inMemoryAuthentication();
-			User user = this.security.getUser();
-
-			if (user.isDefaultPassword()) {
-				logger.info(
-						+ user.getPassword() + );
-			}
-
-			Set<String> roles = new LinkedHashSet<String>(Arrays.asList(this.security
-					.getManagement().getRole(), user.getRole()));
-
-			builder.withUser(user.getName()).password(user.getPassword())
-					.roles(roles.toArray(new String[roles.size()]));
-
-			return builder.and().build();
-
+		@Configuration
+		@ConditionalOnMissingBean(AuthenticationManager.class)
+		protected static class ApplicationAuthenticationManagerConfiguration extends
+				AuthenticationManagerConfiguration {
 		}
 
 	}
 
-	private static String[] getEndpointPaths(
-			EndpointHandlerMapping endpointHandlerMapping, boolean secure) {
-		if (endpointHandlerMapping == null) {
-			return NO_PATHS;
-		}
-
-		List<Endpoint<?>> endpoints = endpointHandlerMapping.getEndpoints();
-		List<String> paths = new ArrayList<String>(endpoints.size());
-		for (Endpoint<?> endpoint : endpoints) {
-			if (endpoint.isSensitive() == secure) {
-				paths.add(endpoint.getPath());
-			}
-		}
-		return paths.toArray(new String[paths.size()]);
-	}
-
-	private static void configureHeaders(HeadersConfigurer<?> configurer,
+	public static void configureHeaders(HeadersConfigurer<?> configurer,
 			SecurityProperties.Headers headers) throws Exception {
 		if (headers.getHsts() != Headers.HSTS.none) {
 			boolean includeSubdomains = headers.getHsts() == Headers.HSTS.all;
@@ -373,4 +229,15 @@ public class SecurityAutoConfiguration {
 		}
 	}
 
+	public static List<String> getIgnored(SecurityProperties security) {
+		List<String> ignored = new ArrayList<String>(security.getIgnored());
+		if (ignored.isEmpty()) {
+			ignored.addAll(DEFAULT_IGNORED);
+		}
+		else if (ignored.contains()) {
+			ignored.remove();
+		}
+		return ignored;
+	}
+
 }

