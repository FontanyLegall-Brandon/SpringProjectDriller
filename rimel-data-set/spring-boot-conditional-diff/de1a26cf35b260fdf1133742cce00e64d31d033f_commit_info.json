{'_old_path': None, '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/LegacyHealthEndpointCompatibilityConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2012-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.autoconfigure.health;\n+\n+import reactor.core.publisher.Mono;\n+\n+import org.springframework.boot.actuate.health.HealthAggregator;\n+import org.springframework.boot.actuate.health.HealthContributorRegistry;\n+import org.springframework.boot.actuate.health.HealthIndicatorRegistry;\n+import org.springframework.boot.actuate.health.HealthStatusHttpMapper;\n+import org.springframework.boot.actuate.health.OrderedHealthAggregator;\n+import org.springframework.boot.actuate.health.ReactiveHealthContributorRegistry;\n+import org.springframework.boot.actuate.health.ReactiveHealthIndicatorRegistry;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.util.CollectionUtils;\n+\n+/**\n+ * Configuration to adapt legacy deprecated health endpoint classes and interfaces.\n+ *\n+ * @author Phillip Webb\n+ * @see HealthEndpointAutoConfiguration\n+ */\n+@Configuration(proxyBeanMethods = false)\n+@SuppressWarnings("deprecation")\n+@EnableConfigurationProperties(HealthIndicatorProperties.class)\n+class LegacyHealthEndpointCompatibilityConfiguration {\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tHealthAggregator healthAggregator(HealthIndicatorProperties healthIndicatorProperties) {\n+\t\tOrderedHealthAggregator aggregator = new OrderedHealthAggregator();\n+\t\tif (!CollectionUtils.isEmpty(healthIndicatorProperties.getOrder())) {\n+\t\t\taggregator.setStatusOrder(healthIndicatorProperties.getOrder());\n+\t\t}\n+\t\treturn aggregator;\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tHealthStatusHttpMapper healthStatusHttpMapper(HealthIndicatorProperties healthIndicatorProperties) {\n+\t\tHealthStatusHttpMapper mapper = new HealthStatusHttpMapper();\n+\t\tif (!CollectionUtils.isEmpty(healthIndicatorProperties.getHttpMapping())) {\n+\t\t\tmapper.setStatusMapping(healthIndicatorProperties.getHttpMapping());\n+\t\t}\n+\t\treturn mapper;\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean(HealthIndicatorRegistry.class)\n+\tHealthContributorRegistryHealthIndicatorRegistryAdapter healthIndicatorRegistry(\n+\t\t\tHealthContributorRegistry healthContributorRegistry) {\n+\t\treturn new HealthContributorRegistryHealthIndicatorRegistryAdapter(healthContributorRegistry);\n+\t}\n+\n+\t@Configuration(proxyBeanMethods = false)\n+\t@ConditionalOnClass(Mono.class)\n+\tstatic class LegacyReactiveHealthEndpointCompatibilityConfiguration {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(ReactiveHealthIndicatorRegistry.class)\n+\t\tReactiveHealthContributorRegistryReactiveHealthIndicatorRegistryAdapter reactiveHealthIndicatorRegistry(\n+\t\t\t\tReactiveHealthContributorRegistry reactiveHealthContributorRegistry) {\n+\t\t\treturn new ReactiveHealthContributorRegistryReactiveHealthIndicatorRegistryAdapter(\n+\t\t\t\t\treactiveHealthContributorRegistry);\n+\t\t}\n+\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.health;\n\nimport reactor.core.publisher.Mono;\n\nimport org.springframework.boot.actuate.health.HealthAggregator;\nimport org.springframework.boot.actuate.health.HealthContributorRegistry;\nimport org.springframework.boot.actuate.health.HealthIndicatorRegistry;\nimport org.springframework.boot.actuate.health.HealthStatusHttpMapper;\nimport org.springframework.boot.actuate.health.OrderedHealthAggregator;\nimport org.springframework.boot.actuate.health.ReactiveHealthContributorRegistry;\nimport org.springframework.boot.actuate.health.ReactiveHealthIndicatorRegistry;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.util.CollectionUtils;\n\n/**\n * Configuration to adapt legacy deprecated health endpoint classes and interfaces.\n *\n * @author Phillip Webb\n * @see HealthEndpointAutoConfiguration\n */\n@Configuration(proxyBeanMethods = false)\n@SuppressWarnings("deprecation")\n@EnableConfigurationProperties(HealthIndicatorProperties.class)\nclass LegacyHealthEndpointCompatibilityConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tHealthAggregator healthAggregator(HealthIndicatorProperties healthIndicatorProperties) {\n\t\tOrderedHealthAggregator aggregator = new OrderedHealthAggregator();\n\t\tif (!CollectionUtils.isEmpty(healthIndicatorProperties.getOrder())) {\n\t\t\taggregator.setStatusOrder(healthIndicatorProperties.getOrder());\n\t\t}\n\t\treturn aggregator;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tHealthStatusHttpMapper healthStatusHttpMapper(HealthIndicatorProperties healthIndicatorProperties) {\n\t\tHealthStatusHttpMapper mapper = new HealthStatusHttpMapper();\n\t\tif (!CollectionUtils.isEmpty(healthIndicatorProperties.getHttpMapping())) {\n\t\t\tmapper.setStatusMapping(healthIndicatorProperties.getHttpMapping());\n\t\t}\n\t\treturn mapper;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(HealthIndicatorRegistry.class)\n\tHealthContributorRegistryHealthIndicatorRegistryAdapter healthIndicatorRegistry(\n\t\t\tHealthContributorRegistry healthContributorRegistry) {\n\t\treturn new HealthContributorRegistryHealthIndicatorRegistryAdapter(healthContributorRegistry);\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnClass(Mono.class)\n\tstatic class LegacyReactiveHealthEndpointCompatibilityConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(ReactiveHealthIndicatorRegistry.class)\n\t\tReactiveHealthContributorRegistryReactiveHealthIndicatorRegistryAdapter reactiveHealthIndicatorRegistry(\n\t\t\t\tReactiveHealthContributorRegistry reactiveHealthContributorRegistry) {\n\t\t\treturn new ReactiveHealthContributorRegistryReactiveHealthIndicatorRegistryAdapter(\n\t\t\t\t\treactiveHealthContributorRegistry);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
