{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/error/ErrorMvcAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/error/ErrorMvcAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -140,7 +140,7 @@ public class ErrorMvcAutoConfiguration {\n \n \t\t@Bean\n \t\t@ConditionalOnBean(DispatcherServlet.class)\n-\t\t@ConditionalOnMissingBean\n+\t\t@ConditionalOnMissingBean(ErrorViewResolver.class)\n \t\tpublic DefaultErrorViewResolver conventionErrorViewResolver() {\n \t\t\treturn new DefaultErrorViewResolver(this.applicationContext, this.resourceProperties);\n \t\t}\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web.servlet.error;\n\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\nimport javax.servlet.Servlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport org.springframework.aop.framework.autoproxy.AutoProxyUtils;\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.beans.factory.config.BeanFactoryPostProcessor;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionMessage;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider;\nimport org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders;\nimport org.springframework.boot.autoconfigure.web.ResourceProperties;\nimport org.springframework.boot.autoconfigure.web.ServerProperties;\nimport org.springframework.boot.autoconfigure.web.servlet.DispatcherServletPath;\nimport org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.web.server.ErrorPage;\nimport org.springframework.boot.web.server.ErrorPageRegistrar;\nimport org.springframework.boot.web.server.ErrorPageRegistry;\nimport org.springframework.boot.web.server.WebServerFactoryCustomizer;\nimport org.springframework.boot.web.servlet.error.DefaultErrorAttributes;\nimport org.springframework.boot.web.servlet.error.ErrorAttributes;\nimport org.springframework.boot.web.servlet.error.ErrorController;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.web.servlet.DispatcherServlet;\nimport org.springframework.web.servlet.View;\nimport org.springframework.web.servlet.view.BeanNameViewResolver;\nimport org.springframework.web.util.HtmlUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to render errors via an MVC error\n * controller.\n *\n * @author Dave Syer\n * @author Andy Wilkinson\n * @author Stephane Nicoll\n * @author Brian Clozel\n * @since 1.0.0\n */\n@Configuration\n@ConditionalOnWebApplication(type = Type.SERVLET)\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class })\n// Load before the main WebMvcAutoConfiguration so that the error View is available\n@AutoConfigureBefore(WebMvcAutoConfiguration.class)\n@EnableConfigurationProperties({ ServerProperties.class, ResourceProperties.class, WebMvcProperties.class })\npublic class ErrorMvcAutoConfiguration {\n\n\tprivate final ServerProperties serverProperties;\n\n\tprivate final DispatcherServletPath dispatcherServletPath;\n\n\tprivate final List<ErrorViewResolver> errorViewResolvers;\n\n\tpublic ErrorMvcAutoConfiguration(ServerProperties serverProperties, DispatcherServletPath dispatcherServletPath,\n\t\t\tObjectProvider<ErrorViewResolver> errorViewResolvers) {\n\t\tthis.serverProperties = serverProperties;\n\t\tthis.dispatcherServletPath = dispatcherServletPath;\n\t\tthis.errorViewResolvers = errorViewResolvers.orderedStream().collect(Collectors.toList());\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(value = ErrorAttributes.class, search = SearchStrategy.CURRENT)\n\tpublic DefaultErrorAttributes errorAttributes() {\n\t\treturn new DefaultErrorAttributes(this.serverProperties.getError().isIncludeException());\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(value = ErrorController.class, search = SearchStrategy.CURRENT)\n\tpublic BasicErrorController basicErrorController(ErrorAttributes errorAttributes) {\n\t\treturn new BasicErrorController(errorAttributes, this.serverProperties.getError(), this.errorViewResolvers);\n\t}\n\n\t@Bean\n\tpublic ErrorPageCustomizer errorPageCustomizer() {\n\t\treturn new ErrorPageCustomizer(this.serverProperties, this.dispatcherServletPath);\n\t}\n\n\t@Bean\n\tpublic static PreserveErrorControllerTargetClassPostProcessor preserveErrorControllerTargetClassPostProcessor() {\n\t\treturn new PreserveErrorControllerTargetClassPostProcessor();\n\t}\n\n\t@Configuration\n\tstatic class DefaultErrorViewResolverConfiguration {\n\n\t\tprivate final ApplicationContext applicationContext;\n\n\t\tprivate final ResourceProperties resourceProperties;\n\n\t\tDefaultErrorViewResolverConfiguration(ApplicationContext applicationContext,\n\t\t\t\tResourceProperties resourceProperties) {\n\t\t\tthis.applicationContext = applicationContext;\n\t\t\tthis.resourceProperties = resourceProperties;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnBean(DispatcherServlet.class)\n\t\t@ConditionalOnMissingBean(ErrorViewResolver.class)\n\t\tpublic DefaultErrorViewResolver conventionErrorViewResolver() {\n\t\t\treturn new DefaultErrorViewResolver(this.applicationContext, this.resourceProperties);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "server.error.whitelabel", name = "enabled", matchIfMissing = true)\n\t@Conditional(ErrorTemplateMissingCondition.class)\n\tprotected static class WhitelabelErrorViewConfiguration {\n\n\t\tprivate final StaticView defaultErrorView = new StaticView();\n\n\t\t@Bean(name = "error")\n\t\t@ConditionalOnMissingBean(name = "error")\n\t\tpublic View defaultErrorView() {\n\t\t\treturn this.defaultErrorView;\n\t\t}\n\n\t\t// If the user adds @EnableWebMvc then the bean name view resolver from\n\t\t// WebMvcAutoConfiguration disappears, so add it back in to avoid disappointment.\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic BeanNameViewResolver beanNameViewResolver() {\n\t\t\tBeanNameViewResolver resolver = new BeanNameViewResolver();\n\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 10);\n\t\t\treturn resolver;\n\t\t}\n\n\t}\n\n\t/**\n\t * {@link SpringBootCondition} that matches when no error template view is detected.\n\t */\n\tprivate static class ErrorTemplateMissingCondition extends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata metadata) {\n\t\t\tConditionMessage.Builder message = ConditionMessage.forCondition("ErrorTemplate Missing");\n\t\t\tTemplateAvailabilityProviders providers = new TemplateAvailabilityProviders(context.getClassLoader());\n\t\t\tTemplateAvailabilityProvider provider = providers.getProvider("error", context.getEnvironment(),\n\t\t\t\t\tcontext.getClassLoader(), context.getResourceLoader());\n\t\t\tif (provider != null) {\n\t\t\t\treturn ConditionOutcome.noMatch(message.foundExactly("template from " + provider));\n\t\t\t}\n\t\t\treturn ConditionOutcome.match(message.didNotFind("error template view").atAll());\n\t\t}\n\n\t}\n\n\t/**\n\t * Simple {@link View} implementation that writes a default HTML error page.\n\t */\n\tprivate static class StaticView implements View {\n\n\t\tprivate static final Log logger = LogFactory.getLog(StaticView.class);\n\n\t\t@Override\n\t\tpublic void render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response)\n\t\t\t\tthrows Exception {\n\t\t\tif (response.isCommitted()) {\n\t\t\t\tString message = getMessage(model);\n\t\t\t\tlogger.error(message);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tStringBuilder builder = new StringBuilder();\n\t\t\tDate timestamp = (Date) model.get("timestamp");\n\t\t\tObject message = model.get("message");\n\t\t\tObject trace = model.get("trace");\n\t\t\tif (response.getContentType() == null) {\n\t\t\t\tresponse.setContentType(getContentType());\n\t\t\t}\n\t\t\tbuilder.append("<html><body><h1>Whitelabel Error Page</h1>").append(\n\t\t\t\t\t"<p>This application has no explicit mapping for /error, so you are seeing this as a fallback.</p>")\n\t\t\t\t\t.append("<div id=\'created\'>").append(timestamp).append("</div>")\n\t\t\t\t\t.append("<div>There was an unexpected error (type=").append(htmlEscape(model.get("error")))\n\t\t\t\t\t.append(", status=").append(htmlEscape(model.get("status"))).append(").</div>");\n\t\t\tif (message != null) {\n\t\t\t\tbuilder.append("<div>").append(htmlEscape(message)).append("</div>");\n\t\t\t}\n\t\t\tif (trace != null) {\n\t\t\t\tbuilder.append("<div style=\'white-space:pre-wrap;\'>").append(htmlEscape(trace)).append("</div>");\n\t\t\t}\n\t\t\tbuilder.append("</body></html>");\n\t\t\tresponse.getWriter().append(builder.toString());\n\t\t}\n\n\t\tprivate String htmlEscape(Object input) {\n\t\t\treturn (input != null) ? HtmlUtils.htmlEscape(input.toString()) : null;\n\t\t}\n\n\t\tprivate String getMessage(Map<String, ?> model) {\n\t\t\tObject path = model.get("path");\n\t\t\tString message = "Cannot render error page for request [" + path + "]";\n\t\t\tif (model.get("message") != null) {\n\t\t\t\tmessage += " and exception [" + model.get("message") + "]";\n\t\t\t}\n\t\t\tmessage += " as the response has already been committed.";\n\t\t\tmessage += " As a result, the response may have the wrong status code.";\n\t\t\treturn message;\n\t\t}\n\n\t\t@Override\n\t\tpublic String getContentType() {\n\t\t\treturn "text/html";\n\t\t}\n\n\t}\n\n\t/**\n\t * {@link WebServerFactoryCustomizer} that configures the server\'s error pages.\n\t */\n\tprivate static class ErrorPageCustomizer implements ErrorPageRegistrar, Ordered {\n\n\t\tprivate final ServerProperties properties;\n\n\t\tprivate final DispatcherServletPath dispatcherServletPath;\n\n\t\tprotected ErrorPageCustomizer(ServerProperties properties, DispatcherServletPath dispatcherServletPath) {\n\t\t\tthis.properties = properties;\n\t\t\tthis.dispatcherServletPath = dispatcherServletPath;\n\t\t}\n\n\t\t@Override\n\t\tpublic void registerErrorPages(ErrorPageRegistry errorPageRegistry) {\n\t\t\tErrorPage errorPage = new ErrorPage(\n\t\t\t\t\tthis.dispatcherServletPath.getRelativePath(this.properties.getError().getPath()));\n\t\t\terrorPageRegistry.addErrorPages(errorPage);\n\t\t}\n\n\t\t@Override\n\t\tpublic int getOrder() {\n\t\t\treturn 0;\n\t\t}\n\n\t}\n\n\t/**\n\t * {@link BeanFactoryPostProcessor} to ensure that the target class of ErrorController\n\t * MVC beans are preserved when using AOP.\n\t */\n\tstatic class PreserveErrorControllerTargetClassPostProcessor implements BeanFactoryPostProcessor {\n\n\t\t@Override\n\t\tpublic void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {\n\t\t\tString[] errorControllerBeans = beanFactory.getBeanNamesForType(ErrorController.class, false, false);\n\t\t\tfor (String errorControllerBean : errorControllerBeans) {\n\t\t\t\ttry {\n\t\t\t\t\tbeanFactory.getBeanDefinition(errorControllerBean)\n\t\t\t\t\t\t\t.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE);\n\t\t\t\t}\n\t\t\t\tcatch (Throwable ex) {\n\t\t\t\t\t// Ignore\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web.servlet.error;\n\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\nimport javax.servlet.Servlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport org.springframework.aop.framework.autoproxy.AutoProxyUtils;\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.beans.factory.config.BeanFactoryPostProcessor;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionMessage;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider;\nimport org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders;\nimport org.springframework.boot.autoconfigure.web.ResourceProperties;\nimport org.springframework.boot.autoconfigure.web.ServerProperties;\nimport org.springframework.boot.autoconfigure.web.servlet.DispatcherServletPath;\nimport org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.web.server.ErrorPage;\nimport org.springframework.boot.web.server.ErrorPageRegistrar;\nimport org.springframework.boot.web.server.ErrorPageRegistry;\nimport org.springframework.boot.web.server.WebServerFactoryCustomizer;\nimport org.springframework.boot.web.servlet.error.DefaultErrorAttributes;\nimport org.springframework.boot.web.servlet.error.ErrorAttributes;\nimport org.springframework.boot.web.servlet.error.ErrorController;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.web.servlet.DispatcherServlet;\nimport org.springframework.web.servlet.View;\nimport org.springframework.web.servlet.view.BeanNameViewResolver;\nimport org.springframework.web.util.HtmlUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to render errors via an MVC error\n * controller.\n *\n * @author Dave Syer\n * @author Andy Wilkinson\n * @author Stephane Nicoll\n * @author Brian Clozel\n * @since 1.0.0\n */\n@Configuration\n@ConditionalOnWebApplication(type = Type.SERVLET)\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class })\n// Load before the main WebMvcAutoConfiguration so that the error View is available\n@AutoConfigureBefore(WebMvcAutoConfiguration.class)\n@EnableConfigurationProperties({ ServerProperties.class, ResourceProperties.class, WebMvcProperties.class })\npublic class ErrorMvcAutoConfiguration {\n\n\tprivate final ServerProperties serverProperties;\n\n\tprivate final DispatcherServletPath dispatcherServletPath;\n\n\tprivate final List<ErrorViewResolver> errorViewResolvers;\n\n\tpublic ErrorMvcAutoConfiguration(ServerProperties serverProperties, DispatcherServletPath dispatcherServletPath,\n\t\t\tObjectProvider<ErrorViewResolver> errorViewResolvers) {\n\t\tthis.serverProperties = serverProperties;\n\t\tthis.dispatcherServletPath = dispatcherServletPath;\n\t\tthis.errorViewResolvers = errorViewResolvers.orderedStream().collect(Collectors.toList());\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(value = ErrorAttributes.class, search = SearchStrategy.CURRENT)\n\tpublic DefaultErrorAttributes errorAttributes() {\n\t\treturn new DefaultErrorAttributes(this.serverProperties.getError().isIncludeException());\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(value = ErrorController.class, search = SearchStrategy.CURRENT)\n\tpublic BasicErrorController basicErrorController(ErrorAttributes errorAttributes) {\n\t\treturn new BasicErrorController(errorAttributes, this.serverProperties.getError(), this.errorViewResolvers);\n\t}\n\n\t@Bean\n\tpublic ErrorPageCustomizer errorPageCustomizer() {\n\t\treturn new ErrorPageCustomizer(this.serverProperties, this.dispatcherServletPath);\n\t}\n\n\t@Bean\n\tpublic static PreserveErrorControllerTargetClassPostProcessor preserveErrorControllerTargetClassPostProcessor() {\n\t\treturn new PreserveErrorControllerTargetClassPostProcessor();\n\t}\n\n\t@Configuration\n\tstatic class DefaultErrorViewResolverConfiguration {\n\n\t\tprivate final ApplicationContext applicationContext;\n\n\t\tprivate final ResourceProperties resourceProperties;\n\n\t\tDefaultErrorViewResolverConfiguration(ApplicationContext applicationContext,\n\t\t\t\tResourceProperties resourceProperties) {\n\t\t\tthis.applicationContext = applicationContext;\n\t\t\tthis.resourceProperties = resourceProperties;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnBean(DispatcherServlet.class)\n\t\t@ConditionalOnMissingBean\n\t\tpublic DefaultErrorViewResolver conventionErrorViewResolver() {\n\t\t\treturn new DefaultErrorViewResolver(this.applicationContext, this.resourceProperties);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "server.error.whitelabel", name = "enabled", matchIfMissing = true)\n\t@Conditional(ErrorTemplateMissingCondition.class)\n\tprotected static class WhitelabelErrorViewConfiguration {\n\n\t\tprivate final StaticView defaultErrorView = new StaticView();\n\n\t\t@Bean(name = "error")\n\t\t@ConditionalOnMissingBean(name = "error")\n\t\tpublic View defaultErrorView() {\n\t\t\treturn this.defaultErrorView;\n\t\t}\n\n\t\t// If the user adds @EnableWebMvc then the bean name view resolver from\n\t\t// WebMvcAutoConfiguration disappears, so add it back in to avoid disappointment.\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic BeanNameViewResolver beanNameViewResolver() {\n\t\t\tBeanNameViewResolver resolver = new BeanNameViewResolver();\n\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 10);\n\t\t\treturn resolver;\n\t\t}\n\n\t}\n\n\t/**\n\t * {@link SpringBootCondition} that matches when no error template view is detected.\n\t */\n\tprivate static class ErrorTemplateMissingCondition extends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata metadata) {\n\t\t\tConditionMessage.Builder message = ConditionMessage.forCondition("ErrorTemplate Missing");\n\t\t\tTemplateAvailabilityProviders providers = new TemplateAvailabilityProviders(context.getClassLoader());\n\t\t\tTemplateAvailabilityProvider provider = providers.getProvider("error", context.getEnvironment(),\n\t\t\t\t\tcontext.getClassLoader(), context.getResourceLoader());\n\t\t\tif (provider != null) {\n\t\t\t\treturn ConditionOutcome.noMatch(message.foundExactly("template from " + provider));\n\t\t\t}\n\t\t\treturn ConditionOutcome.match(message.didNotFind("error template view").atAll());\n\t\t}\n\n\t}\n\n\t/**\n\t * Simple {@link View} implementation that writes a default HTML error page.\n\t */\n\tprivate static class StaticView implements View {\n\n\t\tprivate static final Log logger = LogFactory.getLog(StaticView.class);\n\n\t\t@Override\n\t\tpublic void render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response)\n\t\t\t\tthrows Exception {\n\t\t\tif (response.isCommitted()) {\n\t\t\t\tString message = getMessage(model);\n\t\t\t\tlogger.error(message);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tStringBuilder builder = new StringBuilder();\n\t\t\tDate timestamp = (Date) model.get("timestamp");\n\t\t\tObject message = model.get("message");\n\t\t\tObject trace = model.get("trace");\n\t\t\tif (response.getContentType() == null) {\n\t\t\t\tresponse.setContentType(getContentType());\n\t\t\t}\n\t\t\tbuilder.append("<html><body><h1>Whitelabel Error Page</h1>").append(\n\t\t\t\t\t"<p>This application has no explicit mapping for /error, so you are seeing this as a fallback.</p>")\n\t\t\t\t\t.append("<div id=\'created\'>").append(timestamp).append("</div>")\n\t\t\t\t\t.append("<div>There was an unexpected error (type=").append(htmlEscape(model.get("error")))\n\t\t\t\t\t.append(", status=").append(htmlEscape(model.get("status"))).append(").</div>");\n\t\t\tif (message != null) {\n\t\t\t\tbuilder.append("<div>").append(htmlEscape(message)).append("</div>");\n\t\t\t}\n\t\t\tif (trace != null) {\n\t\t\t\tbuilder.append("<div style=\'white-space:pre-wrap;\'>").append(htmlEscape(trace)).append("</div>");\n\t\t\t}\n\t\t\tbuilder.append("</body></html>");\n\t\t\tresponse.getWriter().append(builder.toString());\n\t\t}\n\n\t\tprivate String htmlEscape(Object input) {\n\t\t\treturn (input != null) ? HtmlUtils.htmlEscape(input.toString()) : null;\n\t\t}\n\n\t\tprivate String getMessage(Map<String, ?> model) {\n\t\t\tObject path = model.get("path");\n\t\t\tString message = "Cannot render error page for request [" + path + "]";\n\t\t\tif (model.get("message") != null) {\n\t\t\t\tmessage += " and exception [" + model.get("message") + "]";\n\t\t\t}\n\t\t\tmessage += " as the response has already been committed.";\n\t\t\tmessage += " As a result, the response may have the wrong status code.";\n\t\t\treturn message;\n\t\t}\n\n\t\t@Override\n\t\tpublic String getContentType() {\n\t\t\treturn "text/html";\n\t\t}\n\n\t}\n\n\t/**\n\t * {@link WebServerFactoryCustomizer} that configures the server\'s error pages.\n\t */\n\tprivate static class ErrorPageCustomizer implements ErrorPageRegistrar, Ordered {\n\n\t\tprivate final ServerProperties properties;\n\n\t\tprivate final DispatcherServletPath dispatcherServletPath;\n\n\t\tprotected ErrorPageCustomizer(ServerProperties properties, DispatcherServletPath dispatcherServletPath) {\n\t\t\tthis.properties = properties;\n\t\t\tthis.dispatcherServletPath = dispatcherServletPath;\n\t\t}\n\n\t\t@Override\n\t\tpublic void registerErrorPages(ErrorPageRegistry errorPageRegistry) {\n\t\t\tErrorPage errorPage = new ErrorPage(\n\t\t\t\t\tthis.dispatcherServletPath.getRelativePath(this.properties.getError().getPath()));\n\t\t\terrorPageRegistry.addErrorPages(errorPage);\n\t\t}\n\n\t\t@Override\n\t\tpublic int getOrder() {\n\t\t\treturn 0;\n\t\t}\n\n\t}\n\n\t/**\n\t * {@link BeanFactoryPostProcessor} to ensure that the target class of ErrorController\n\t * MVC beans are preserved when using AOP.\n\t */\n\tstatic class PreserveErrorControllerTargetClassPostProcessor implements BeanFactoryPostProcessor {\n\n\t\t@Override\n\t\tpublic void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {\n\t\t\tString[] errorControllerBeans = beanFactory.getBeanNamesForType(ErrorController.class, false, false);\n\t\t\tfor (String errorControllerBean : errorControllerBeans) {\n\t\t\t\ttry {\n\t\t\t\t\tbeanFactory.getBeanDefinition(errorControllerBean)\n\t\t\t\t\t\t\t.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE);\n\t\t\t\t}\n\t\t\t\tcatch (Throwable ex) {\n\t\t\t\t\t// Ignore\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
