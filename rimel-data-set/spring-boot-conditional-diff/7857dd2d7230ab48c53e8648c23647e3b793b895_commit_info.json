{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -19,7 +19,6 @@ package org.springframework.boot.autoconfigure.rsocket;\n import java.util.stream.Collectors;\n \n import io.rsocket.RSocketFactory;\n-import io.rsocket.SocketAcceptor;\n import io.rsocket.transport.netty.server.TcpServerTransport;\n import reactor.netty.http.server.HttpServer;\n \n@@ -42,8 +41,8 @@ import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.http.client.reactive.ReactorResourceFactory;\n-import org.springframework.messaging.rsocket.MessageHandlerAcceptor;\n import org.springframework.messaging.rsocket.RSocketStrategies;\n+import org.springframework.messaging.rsocket.annotation.support.RSocketMessageHandler;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for RSocket servers. In the case of\n@@ -57,7 +56,7 @@ import org.springframework.messaging.rsocket.RSocketStrategies;\n  */\n @Configuration(proxyBeanMethods = false)\n @ConditionalOnClass({ RSocketFactory.class, RSocketStrategies.class, HttpServer.class, TcpServerTransport.class })\n-@ConditionalOnBean(MessageHandlerAcceptor.class)\n+@ConditionalOnBean(RSocketMessageHandler.class)\n @AutoConfigureAfter(RSocketStrategiesAutoConfiguration.class)\n @EnableConfigurationProperties(RSocketProperties.class)\n public class RSocketServerAutoConfiguration {\n@@ -68,9 +67,9 @@ public class RSocketServerAutoConfiguration {\n \n \t\t@Bean\n \t\tpublic RSocketWebSocketNettyRouteProvider rSocketWebsocketRouteProvider(RSocketProperties properties,\n-\t\t\t\tMessageHandlerAcceptor messageHandlerAcceptor) {\n+\t\t\t\tRSocketMessageHandler messageHandler) {\n \t\t\treturn new RSocketWebSocketNettyRouteProvider(properties.getServer().getMappingPath(),\n-\t\t\t\t\tmessageHandlerAcceptor);\n+\t\t\t\t\tmessageHandler.serverAcceptor());\n \t\t}\n \n \t}\n@@ -100,8 +99,8 @@ public class RSocketServerAutoConfiguration {\n \n \t\t@Bean\n \t\tpublic RSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,\n-\t\t\t\tSocketAcceptor socketAcceptor) {\n-\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, socketAcceptor);\n+\t\t\t\tRSocketMessageHandler rSocketMessageHandler) {\n+\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.serverAcceptor());\n \t\t}\n \n \t}\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.rsocket;\n\nimport java.util.stream.Collectors;\n\nimport io.rsocket.RSocketFactory;\nimport io.rsocket.transport.netty.server.TcpServerTransport;\nimport reactor.netty.http.server.HttpServer;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.AllNestedConditions;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.context.properties.PropertyMapper;\nimport org.springframework.boot.rsocket.netty.NettyRSocketServerFactory;\nimport org.springframework.boot.rsocket.server.RSocketServerBootstrap;\nimport org.springframework.boot.rsocket.server.RSocketServerFactory;\nimport org.springframework.boot.rsocket.server.ServerRSocketFactoryCustomizer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.client.reactive.ReactorResourceFactory;\nimport org.springframework.messaging.rsocket.RSocketStrategies;\nimport org.springframework.messaging.rsocket.annotation.support.RSocketMessageHandler;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for RSocket servers. In the case of\n * {@link org.springframework.boot.WebApplicationType#REACTIVE}, the RSocket server is\n * added as a WebSocket endpoint on the existing\n * {@link org.springframework.boot.web.embedded.netty.NettyWebServer}. If a specific\n * server port is configured, a new standalone RSocket server is created.\n *\n * @author Brian Clozel\n * @since 2.2.0\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass({ RSocketFactory.class, RSocketStrategies.class, HttpServer.class, TcpServerTransport.class })\n@ConditionalOnBean(RSocketMessageHandler.class)\n@AutoConfigureAfter(RSocketStrategiesAutoConfiguration.class)\n@EnableConfigurationProperties(RSocketProperties.class)\npublic class RSocketServerAutoConfiguration {\n\n\t@Conditional(OnRSocketWebServerCondition.class)\n\t@Configuration(proxyBeanMethods = false)\n\tstatic class WebFluxServerAutoConfiguration {\n\n\t\t@Bean\n\t\tpublic RSocketWebSocketNettyRouteProvider rSocketWebsocketRouteProvider(RSocketProperties properties,\n\t\t\t\tRSocketMessageHandler messageHandler) {\n\t\t\treturn new RSocketWebSocketNettyRouteProvider(properties.getServer().getMappingPath(),\n\t\t\t\t\tmessageHandler.serverAcceptor());\n\t\t}\n\n\t}\n\n\t@ConditionalOnProperty(prefix = "spring.rsocket.server", name = "port")\n\t@Configuration(proxyBeanMethods = false)\n\tstatic class EmbeddedServerAutoConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic ReactorResourceFactory reactorResourceFactory() {\n\t\t\treturn new ReactorResourceFactory();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic RSocketServerFactory rSocketServerFactory(RSocketProperties properties,\n\t\t\t\tReactorResourceFactory resourceFactory, ObjectProvider<ServerRSocketFactoryCustomizer> customizers) {\n\t\t\tNettyRSocketServerFactory factory = new NettyRSocketServerFactory();\n\t\t\tfactory.setResourceFactory(resourceFactory);\n\t\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\t\tmap.from(properties.getServer().getAddress()).to(factory::setAddress);\n\t\t\tmap.from(properties.getServer().getPort()).to(factory::setPort);\n\t\t\tfactory.setServerCustomizers(customizers.orderedStream().collect(Collectors.toList()));\n\t\t\treturn factory;\n\t\t}\n\n\t\t@Bean\n\t\tpublic RSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,\n\t\t\t\tRSocketMessageHandler rSocketMessageHandler) {\n\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.serverAcceptor());\n\t\t}\n\n\t}\n\n\tstatic class OnRSocketWebServerCondition extends AllNestedConditions {\n\n\t\tOnRSocketWebServerCondition() {\n\t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION);\n\t\t}\n\n\t\t@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)\n\t\tstatic class IsReactiveWebApplication {\n\n\t\t}\n\n\t\t@ConditionalOnProperty(prefix = "spring.rsocket.server", name = "port", matchIfMissing = true)\n\t\tstatic class HasNoPortConfigured {\n\n\t\t}\n\n\t\t@ConditionalOnProperty(prefix = "spring.rsocket.server", name = "mapping-path")\n\t\tstatic class HasMappingPathConfigured {\n\n\t\t}\n\n\t\t@ConditionalOnProperty(prefix = "spring.rsocket.server", name = "transport", havingValue = "websocket")\n\t\tstatic class HasWebsocketTransportConfigured {\n\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.rsocket;\n\nimport java.util.stream.Collectors;\n\nimport io.rsocket.RSocketFactory;\nimport io.rsocket.SocketAcceptor;\nimport io.rsocket.transport.netty.server.TcpServerTransport;\nimport reactor.netty.http.server.HttpServer;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.AllNestedConditions;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.context.properties.PropertyMapper;\nimport org.springframework.boot.rsocket.netty.NettyRSocketServerFactory;\nimport org.springframework.boot.rsocket.server.RSocketServerBootstrap;\nimport org.springframework.boot.rsocket.server.RSocketServerFactory;\nimport org.springframework.boot.rsocket.server.ServerRSocketFactoryCustomizer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.client.reactive.ReactorResourceFactory;\nimport org.springframework.messaging.rsocket.MessageHandlerAcceptor;\nimport org.springframework.messaging.rsocket.RSocketStrategies;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for RSocket servers. In the case of\n * {@link org.springframework.boot.WebApplicationType#REACTIVE}, the RSocket server is\n * added as a WebSocket endpoint on the existing\n * {@link org.springframework.boot.web.embedded.netty.NettyWebServer}. If a specific\n * server port is configured, a new standalone RSocket server is created.\n *\n * @author Brian Clozel\n * @since 2.2.0\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass({ RSocketFactory.class, RSocketStrategies.class, HttpServer.class, TcpServerTransport.class })\n@ConditionalOnBean(MessageHandlerAcceptor.class)\n@AutoConfigureAfter(RSocketStrategiesAutoConfiguration.class)\n@EnableConfigurationProperties(RSocketProperties.class)\npublic class RSocketServerAutoConfiguration {\n\n\t@Conditional(OnRSocketWebServerCondition.class)\n\t@Configuration(proxyBeanMethods = false)\n\tstatic class WebFluxServerAutoConfiguration {\n\n\t\t@Bean\n\t\tpublic RSocketWebSocketNettyRouteProvider rSocketWebsocketRouteProvider(RSocketProperties properties,\n\t\t\t\tMessageHandlerAcceptor messageHandlerAcceptor) {\n\t\t\treturn new RSocketWebSocketNettyRouteProvider(properties.getServer().getMappingPath(),\n\t\t\t\t\tmessageHandlerAcceptor);\n\t\t}\n\n\t}\n\n\t@ConditionalOnProperty(prefix = "spring.rsocket.server", name = "port")\n\t@Configuration(proxyBeanMethods = false)\n\tstatic class EmbeddedServerAutoConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic ReactorResourceFactory reactorResourceFactory() {\n\t\t\treturn new ReactorResourceFactory();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic RSocketServerFactory rSocketServerFactory(RSocketProperties properties,\n\t\t\t\tReactorResourceFactory resourceFactory, ObjectProvider<ServerRSocketFactoryCustomizer> customizers) {\n\t\t\tNettyRSocketServerFactory factory = new NettyRSocketServerFactory();\n\t\t\tfactory.setResourceFactory(resourceFactory);\n\t\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\t\tmap.from(properties.getServer().getAddress()).to(factory::setAddress);\n\t\t\tmap.from(properties.getServer().getPort()).to(factory::setPort);\n\t\t\tfactory.setServerCustomizers(customizers.orderedStream().collect(Collectors.toList()));\n\t\t\treturn factory;\n\t\t}\n\n\t\t@Bean\n\t\tpublic RSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,\n\t\t\t\tSocketAcceptor socketAcceptor) {\n\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, socketAcceptor);\n\t\t}\n\n\t}\n\n\tstatic class OnRSocketWebServerCondition extends AllNestedConditions {\n\n\t\tOnRSocketWebServerCondition() {\n\t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION);\n\t\t}\n\n\t\t@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)\n\t\tstatic class IsReactiveWebApplication {\n\n\t\t}\n\n\t\t@ConditionalOnProperty(prefix = "spring.rsocket.server", name = "port", matchIfMissing = true)\n\t\tstatic class HasNoPortConfigured {\n\n\t\t}\n\n\t\t@ConditionalOnProperty(prefix = "spring.rsocket.server", name = "mapping-path")\n\t\tstatic class HasMappingPathConfigured {\n\n\t\t}\n\n\t\t@ConditionalOnProperty(prefix = "spring.rsocket.server", name = "transport", havingValue = "websocket")\n\t\tstatic class HasWebsocketTransportConfigured {\n\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
