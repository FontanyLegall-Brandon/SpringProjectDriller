{'_old_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJavaTests.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJavaTests.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -56,40 +56,40 @@ public class ConditionalOnJavaTests {\n \n \t@Test\n \tpublic void doesNotMatchIfLowerIsRequired() {\n-\t\tregisterAndRefresh(Java5Required.class);\n+\t\tregisterAndRefresh(Java7Required.class);\n \t\tassertPresent(false);\n \t}\n \n \t@Test\n \tpublic void matchesIfVersionIsInRange() {\n-\t\tregisterAndRefresh(Java6Required.class);\n+\t\tregisterAndRefresh(Java8Required.class);\n \t\tassertPresent(true);\n \t}\n \n \t@Test\n \tpublic void boundsTests() throws Exception {\n-\t\ttestBounds(Range.EQUAL_OR_NEWER, JavaVersion.SEVEN, JavaVersion.SIX, true);\n-\t\ttestBounds(Range.EQUAL_OR_NEWER, JavaVersion.SEVEN, JavaVersion.SEVEN, true);\n-\t\ttestBounds(Range.EQUAL_OR_NEWER, JavaVersion.SEVEN, JavaVersion.EIGHT, false);\n-\t\ttestBounds(Range.OLDER_THAN, JavaVersion.SEVEN, JavaVersion.SIX, false);\n-\t\ttestBounds(Range.OLDER_THAN, JavaVersion.SEVEN, JavaVersion.SEVEN, false);\n-\t\ttestBounds(Range.OLDER_THAN, JavaVersion.SEVEN, JavaVersion.EIGHT, true);\n+\t\ttestBounds(Range.EQUAL_OR_NEWER, JavaVersion.NINE, JavaVersion.EIGHT, true);\n+\t\ttestBounds(Range.EQUAL_OR_NEWER, JavaVersion.EIGHT, JavaVersion.EIGHT, true);\n+\t\ttestBounds(Range.EQUAL_OR_NEWER, JavaVersion.EIGHT, JavaVersion.NINE, false);\n+\t\ttestBounds(Range.OLDER_THAN, JavaVersion.NINE, JavaVersion.EIGHT, false);\n+\t\ttestBounds(Range.OLDER_THAN, JavaVersion.EIGHT, JavaVersion.EIGHT, false);\n+\t\ttestBounds(Range.OLDER_THAN, JavaVersion.EIGHT, JavaVersion.NINE, true);\n \t}\n \n \t@Test\n \tpublic void equalOrNewerMessage() throws Exception {\n \t\tConditionOutcome outcome = this.condition.getMatchOutcome(Range.EQUAL_OR_NEWER,\n-\t\t\t\tJavaVersion.SEVEN, JavaVersion.SIX);\n+\t\t\t\tJavaVersion.NINE, JavaVersion.EIGHT);\n \t\tassertThat(outcome.getMessage())\n-\t\t\t\t.isEqualTo("@ConditionalOnJava (1.6 or newer) found 1.7");\n+\t\t\t\t.isEqualTo("@ConditionalOnJava (1.8 or newer) found 1.9");\n \t}\n \n \t@Test\n \tpublic void olderThanMessage() throws Exception {\n \t\tConditionOutcome outcome = this.condition.getMatchOutcome(Range.OLDER_THAN,\n-\t\t\t\tJavaVersion.SEVEN, JavaVersion.SIX);\n+\t\t\t\tJavaVersion.NINE, JavaVersion.EIGHT);\n \t\tassertThat(outcome.getMessage())\n-\t\t\t\t.isEqualTo("@ConditionalOnJava (older than 1.6) found 1.7");\n+\t\t\t\t.isEqualTo("@ConditionalOnJava (older than 1.8) found 1.9");\n \t}\n \n \t@Test\n@@ -98,19 +98,9 @@ public class ConditionalOnJavaTests {\n \t}\n \n \t@Test\n-\tpublic void java7IsDetected() throws Exception {\n-\t\tassertThat(getJavaVersion(Function.class)).isEqualTo("1.7");\n-\t}\n-\n-\t@Test\n-\tpublic void java6IsDetected() throws Exception {\n-\t\tassertThat(getJavaVersion(Function.class, Files.class)).isEqualTo("1.6");\n-\t}\n-\n-\t@Test\n-\tpublic void java6IsTheFallback() throws Exception {\n+\tpublic void java8IsTheFallback() throws Exception {\n \t\tassertThat(getJavaVersion(Function.class, Files.class, ServiceLoader.class))\n-\t\t\t\t.isEqualTo("1.6");\n+\t\t\t\t.isEqualTo("1.8");\n \t}\n \n \tprivate String getJavaVersion(Class<?>... hiddenClasses) throws Exception {\n@@ -181,8 +171,8 @@ public class ConditionalOnJavaTests {\n \t}\n \n \t@Configuration\n-\t@ConditionalOnJava(range = Range.OLDER_THAN, value = JavaVersion.SIX)\n-\tstatic class Java5Required {\n+\t@ConditionalOnJava(range = Range.OLDER_THAN, value = JavaVersion.EIGHT)\n+\tstatic class Java7Required {\n \t\t@Bean\n \t\tString foo() {\n \t\t\treturn "foo";\n@@ -190,8 +180,8 @@ public class ConditionalOnJavaTests {\n \t}\n \n \t@Configuration\n-\t@ConditionalOnJava(JavaVersion.SIX)\n-\tstatic class Java6Required {\n+\t@ConditionalOnJava(JavaVersion.EIGHT)\n+\tstatic class Java8Required {\n \t\t@Bean\n \t\tString foo() {\n \t\t\treturn "foo";\n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport java.lang.reflect.Method;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.nio.file.Files;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.ServiceLoader;\nimport java.util.function.Function;\n\nimport org.junit.Test;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnJava.JavaVersion;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnJava.Range;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.util.ReflectionUtils;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link ConditionalOnJava}.\n *\n * @author Oliver Gierke\n * @author Phillip Webb\n */\npublic class ConditionalOnJavaTests {\n\n\tprivate final AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n\n\tprivate final OnJavaCondition condition = new OnJavaCondition();\n\n\t@Test\n\tpublic void doesNotMatchIfBetterVersionIsRequired() {\n\t\tregisterAndRefresh(Java9Required.class);\n\t\tassertPresent(false);\n\t}\n\n\t@Test\n\tpublic void doesNotMatchIfLowerIsRequired() {\n\t\tregisterAndRefresh(Java7Required.class);\n\t\tassertPresent(false);\n\t}\n\n\t@Test\n\tpublic void matchesIfVersionIsInRange() {\n\t\tregisterAndRefresh(Java8Required.class);\n\t\tassertPresent(true);\n\t}\n\n\t@Test\n\tpublic void boundsTests() throws Exception {\n\t\ttestBounds(Range.EQUAL_OR_NEWER, JavaVersion.NINE, JavaVersion.EIGHT, true);\n\t\ttestBounds(Range.EQUAL_OR_NEWER, JavaVersion.EIGHT, JavaVersion.EIGHT, true);\n\t\ttestBounds(Range.EQUAL_OR_NEWER, JavaVersion.EIGHT, JavaVersion.NINE, false);\n\t\ttestBounds(Range.OLDER_THAN, JavaVersion.NINE, JavaVersion.EIGHT, false);\n\t\ttestBounds(Range.OLDER_THAN, JavaVersion.EIGHT, JavaVersion.EIGHT, false);\n\t\ttestBounds(Range.OLDER_THAN, JavaVersion.EIGHT, JavaVersion.NINE, true);\n\t}\n\n\t@Test\n\tpublic void equalOrNewerMessage() throws Exception {\n\t\tConditionOutcome outcome = this.condition.getMatchOutcome(Range.EQUAL_OR_NEWER,\n\t\t\t\tJavaVersion.NINE, JavaVersion.EIGHT);\n\t\tassertThat(outcome.getMessage())\n\t\t\t\t.isEqualTo("@ConditionalOnJava (1.8 or newer) found 1.9");\n\t}\n\n\t@Test\n\tpublic void olderThanMessage() throws Exception {\n\t\tConditionOutcome outcome = this.condition.getMatchOutcome(Range.OLDER_THAN,\n\t\t\t\tJavaVersion.NINE, JavaVersion.EIGHT);\n\t\tassertThat(outcome.getMessage())\n\t\t\t\t.isEqualTo("@ConditionalOnJava (older than 1.8) found 1.9");\n\t}\n\n\t@Test\n\tpublic void java8IsDetected() throws Exception {\n\t\tassertThat(getJavaVersion()).isEqualTo("1.8");\n\t}\n\n\t@Test\n\tpublic void java8IsTheFallback() throws Exception {\n\t\tassertThat(getJavaVersion(Function.class, Files.class, ServiceLoader.class))\n\t\t\t\t.isEqualTo("1.8");\n\t}\n\n\tprivate String getJavaVersion(Class<?>... hiddenClasses) throws Exception {\n\t\tURL[] urls = ((URLClassLoader) getClass().getClassLoader()).getURLs();\n\t\tURLClassLoader classLoader = new ClassHidingClassLoader(urls, hiddenClasses);\n\n\t\tClass<?> javaVersionClass = classLoader\n\t\t\t\t.loadClass(ConditionalOnJava.JavaVersion.class.getName());\n\n\t\tMethod getJavaVersionMethod = ReflectionUtils.findMethod(javaVersionClass,\n\t\t\t\t"getJavaVersion");\n\t\tObject javaVersion = ReflectionUtils.invokeMethod(getJavaVersionMethod, null);\n\t\tclassLoader.close();\n\t\treturn javaVersion.toString();\n\t}\n\n\tprivate void testBounds(Range range, JavaVersion runningVersion, JavaVersion version,\n\t\t\tboolean expected) {\n\t\tConditionOutcome outcome = this.condition.getMatchOutcome(range, runningVersion,\n\t\t\t\tversion);\n\t\tassertThat(outcome.isMatch()).as(outcome.getMessage()).isEqualTo(expected);\n\t}\n\n\tprivate void registerAndRefresh(Class<?> annotatedClasses) {\n\t\tthis.context.register(annotatedClasses);\n\t\tthis.context.refresh();\n\t}\n\n\tprivate void assertPresent(boolean expected) {\n\t\tassertThat(this.context.getBeansOfType(String.class)).hasSize(expected ? 1 : 0);\n\t}\n\n\tprivate final class ClassHidingClassLoader extends URLClassLoader {\n\n\t\tprivate final List<Class<?>> hiddenClasses;\n\n\t\tprivate ClassHidingClassLoader(URL[] urls, Class<?>... hiddenClasses) {\n\t\t\tsuper(urls, null);\n\t\t\tthis.hiddenClasses = Arrays.asList(hiddenClasses);\n\t\t}\n\n\t\t@Override\n\t\tpublic Class<?> loadClass(String name) throws ClassNotFoundException {\n\t\t\tif (isHidden(name)) {\n\t\t\t\tthrow new ClassNotFoundException();\n\t\t\t}\n\t\t\treturn super.loadClass(name);\n\t\t}\n\n\t\tprivate boolean isHidden(String name) {\n\t\t\tfor (Class<?> hiddenClass : this.hiddenClasses) {\n\t\t\t\tif (hiddenClass.getName().equals(name)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnJava(JavaVersion.NINE)\n\tstatic class Java9Required {\n\t\t@Bean\n\t\tString foo() {\n\t\t\treturn "foo";\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnJava(range = Range.OLDER_THAN, value = JavaVersion.EIGHT)\n\tstatic class Java7Required {\n\t\t@Bean\n\t\tString foo() {\n\t\t\treturn "foo";\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnJava(JavaVersion.EIGHT)\n\tstatic class Java8Required {\n\t\t@Bean\n\t\tString foo() {\n\t\t\treturn "foo";\n\t\t}\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport java.lang.reflect.Method;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.nio.file.Files;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.ServiceLoader;\nimport java.util.function.Function;\n\nimport org.junit.Test;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnJava.JavaVersion;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnJava.Range;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.util.ReflectionUtils;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link ConditionalOnJava}.\n *\n * @author Oliver Gierke\n * @author Phillip Webb\n */\npublic class ConditionalOnJavaTests {\n\n\tprivate final AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n\n\tprivate final OnJavaCondition condition = new OnJavaCondition();\n\n\t@Test\n\tpublic void doesNotMatchIfBetterVersionIsRequired() {\n\t\tregisterAndRefresh(Java9Required.class);\n\t\tassertPresent(false);\n\t}\n\n\t@Test\n\tpublic void doesNotMatchIfLowerIsRequired() {\n\t\tregisterAndRefresh(Java5Required.class);\n\t\tassertPresent(false);\n\t}\n\n\t@Test\n\tpublic void matchesIfVersionIsInRange() {\n\t\tregisterAndRefresh(Java6Required.class);\n\t\tassertPresent(true);\n\t}\n\n\t@Test\n\tpublic void boundsTests() throws Exception {\n\t\ttestBounds(Range.EQUAL_OR_NEWER, JavaVersion.SEVEN, JavaVersion.SIX, true);\n\t\ttestBounds(Range.EQUAL_OR_NEWER, JavaVersion.SEVEN, JavaVersion.SEVEN, true);\n\t\ttestBounds(Range.EQUAL_OR_NEWER, JavaVersion.SEVEN, JavaVersion.EIGHT, false);\n\t\ttestBounds(Range.OLDER_THAN, JavaVersion.SEVEN, JavaVersion.SIX, false);\n\t\ttestBounds(Range.OLDER_THAN, JavaVersion.SEVEN, JavaVersion.SEVEN, false);\n\t\ttestBounds(Range.OLDER_THAN, JavaVersion.SEVEN, JavaVersion.EIGHT, true);\n\t}\n\n\t@Test\n\tpublic void equalOrNewerMessage() throws Exception {\n\t\tConditionOutcome outcome = this.condition.getMatchOutcome(Range.EQUAL_OR_NEWER,\n\t\t\t\tJavaVersion.SEVEN, JavaVersion.SIX);\n\t\tassertThat(outcome.getMessage())\n\t\t\t\t.isEqualTo("@ConditionalOnJava (1.6 or newer) found 1.7");\n\t}\n\n\t@Test\n\tpublic void olderThanMessage() throws Exception {\n\t\tConditionOutcome outcome = this.condition.getMatchOutcome(Range.OLDER_THAN,\n\t\t\t\tJavaVersion.SEVEN, JavaVersion.SIX);\n\t\tassertThat(outcome.getMessage())\n\t\t\t\t.isEqualTo("@ConditionalOnJava (older than 1.6) found 1.7");\n\t}\n\n\t@Test\n\tpublic void java8IsDetected() throws Exception {\n\t\tassertThat(getJavaVersion()).isEqualTo("1.8");\n\t}\n\n\t@Test\n\tpublic void java7IsDetected() throws Exception {\n\t\tassertThat(getJavaVersion(Function.class)).isEqualTo("1.7");\n\t}\n\n\t@Test\n\tpublic void java6IsDetected() throws Exception {\n\t\tassertThat(getJavaVersion(Function.class, Files.class)).isEqualTo("1.6");\n\t}\n\n\t@Test\n\tpublic void java6IsTheFallback() throws Exception {\n\t\tassertThat(getJavaVersion(Function.class, Files.class, ServiceLoader.class))\n\t\t\t\t.isEqualTo("1.6");\n\t}\n\n\tprivate String getJavaVersion(Class<?>... hiddenClasses) throws Exception {\n\t\tURL[] urls = ((URLClassLoader) getClass().getClassLoader()).getURLs();\n\t\tURLClassLoader classLoader = new ClassHidingClassLoader(urls, hiddenClasses);\n\n\t\tClass<?> javaVersionClass = classLoader\n\t\t\t\t.loadClass(ConditionalOnJava.JavaVersion.class.getName());\n\n\t\tMethod getJavaVersionMethod = ReflectionUtils.findMethod(javaVersionClass,\n\t\t\t\t"getJavaVersion");\n\t\tObject javaVersion = ReflectionUtils.invokeMethod(getJavaVersionMethod, null);\n\t\tclassLoader.close();\n\t\treturn javaVersion.toString();\n\t}\n\n\tprivate void testBounds(Range range, JavaVersion runningVersion, JavaVersion version,\n\t\t\tboolean expected) {\n\t\tConditionOutcome outcome = this.condition.getMatchOutcome(range, runningVersion,\n\t\t\t\tversion);\n\t\tassertThat(outcome.isMatch()).as(outcome.getMessage()).isEqualTo(expected);\n\t}\n\n\tprivate void registerAndRefresh(Class<?> annotatedClasses) {\n\t\tthis.context.register(annotatedClasses);\n\t\tthis.context.refresh();\n\t}\n\n\tprivate void assertPresent(boolean expected) {\n\t\tassertThat(this.context.getBeansOfType(String.class)).hasSize(expected ? 1 : 0);\n\t}\n\n\tprivate final class ClassHidingClassLoader extends URLClassLoader {\n\n\t\tprivate final List<Class<?>> hiddenClasses;\n\n\t\tprivate ClassHidingClassLoader(URL[] urls, Class<?>... hiddenClasses) {\n\t\t\tsuper(urls, null);\n\t\t\tthis.hiddenClasses = Arrays.asList(hiddenClasses);\n\t\t}\n\n\t\t@Override\n\t\tpublic Class<?> loadClass(String name) throws ClassNotFoundException {\n\t\t\tif (isHidden(name)) {\n\t\t\t\tthrow new ClassNotFoundException();\n\t\t\t}\n\t\t\treturn super.loadClass(name);\n\t\t}\n\n\t\tprivate boolean isHidden(String name) {\n\t\t\tfor (Class<?> hiddenClass : this.hiddenClasses) {\n\t\t\t\tif (hiddenClass.getName().equals(name)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnJava(JavaVersion.NINE)\n\tstatic class Java9Required {\n\t\t@Bean\n\t\tString foo() {\n\t\t\treturn "foo";\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnJava(range = Range.OLDER_THAN, value = JavaVersion.SIX)\n\tstatic class Java5Required {\n\t\t@Bean\n\t\tString foo() {\n\t\t\treturn "foo";\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnJava(JavaVersion.SIX)\n\tstatic class Java6Required {\n\t\t@Bean\n\t\tString foo() {\n\t\t\treturn "foo";\n\t\t}\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
