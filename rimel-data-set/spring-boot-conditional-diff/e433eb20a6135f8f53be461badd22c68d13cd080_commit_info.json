{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/CouchbaseRepositoriesAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/CouchbaseRepositoriesAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': "@@ -16,24 +16,15 @@\n \n package org.springframework.boot.autoconfigure.data;\n \n-import java.io.IOException;\n-import java.net.URISyntaxException;\n-\n-import javax.annotation.PreDestroy;\n-\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.boot.context.properties.EnableConfigurationProperties;\n-import org.springframework.context.annotation.Bean;\n+import org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Import;\n-import org.springframework.data.couchbase.core.CouchbaseTemplate;\n import org.springframework.data.couchbase.repository.CouchbaseRepository;\n import org.springframework.data.couchbase.repository.config.EnableCouchbaseRepositories;\n-\n-import com.couchbase.client.CouchbaseClient;\n+import org.springframework.data.couchbase.repository.support.CouchbaseRepositoryFactoryBean;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for Spring Data's Couchbase\n@@ -45,29 +36,9 @@ import com.couchbase.client.CouchbaseClient;\n  * @see EnableCouchbaseRepositories\n  */\n @Configuration\n-@ConditionalOnClass({ CouchbaseClient.class, CouchbaseRepository.class })\n+@ConditionalOnClass({ CouchbaseRepository.class })\n+@ConditionalOnMissingBean(CouchbaseRepositoryFactoryBean.class)\n @Import(CouchbaseRepositoriesAutoConfigureRegistrar.class)\n-@EnableConfigurationProperties(CouchbaseProperties.class)\n public class CouchbaseRepositoriesAutoConfiguration {\n \n-\t@Autowired\n-\tprivate CouchbaseProperties properties;\n-\n-\t@PreDestroy\n-\tpublic void close() throws URISyntaxException, IOException {\n-\t\tcouchbaseClient().shutdown();\n-\t}\n-\n-\t@Bean\n-\t@ConditionalOnMissingBean(CouchbaseClient.class)\n-\tCouchbaseClient couchbaseClient() throws URISyntaxException, IOException {\n-\t\treturn this.properties.createClient();\n-\t}\n-\n-\t@Bean\n-\t@ConditionalOnMissingBean(CouchbaseTemplate.class)\n-\tCouchbaseTemplate couchbaseTemplate(CouchbaseClient couchbaseClient) {\n-\t\treturn new CouchbaseTemplate(couchbaseClient);\n-\t}\n-\n }\n", 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.data.couchbase.repository.CouchbaseRepository;\nimport org.springframework.data.couchbase.repository.config.EnableCouchbaseRepositories;\nimport org.springframework.data.couchbase.repository.support.CouchbaseRepositoryFactoryBean;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s Couchbase\n * Repositories.\n * \n * @author Michael Nitschinger\n * @since 1.1.0\n * @see CouchbaseProperties\n * @see EnableCouchbaseRepositories\n */\n@Configuration\n@ConditionalOnClass({ CouchbaseRepository.class })\n@ConditionalOnMissingBean(CouchbaseRepositoryFactoryBean.class)\n@Import(CouchbaseRepositoriesAutoConfigureRegistrar.class)\npublic class CouchbaseRepositoriesAutoConfiguration {\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data;\n\nimport java.io.IOException;\nimport java.net.URISyntaxException;\n\nimport javax.annotation.PreDestroy;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.data.couchbase.core.CouchbaseTemplate;\nimport org.springframework.data.couchbase.repository.CouchbaseRepository;\nimport org.springframework.data.couchbase.repository.config.EnableCouchbaseRepositories;\n\nimport com.couchbase.client.CouchbaseClient;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s Couchbase\n * Repositories.\n * \n * @author Michael Nitschinger\n * @since 1.1.0\n * @see CouchbaseProperties\n * @see EnableCouchbaseRepositories\n */\n@Configuration\n@ConditionalOnClass({ CouchbaseClient.class, CouchbaseRepository.class })\n@Import(CouchbaseRepositoriesAutoConfigureRegistrar.class)\n@EnableConfigurationProperties(CouchbaseProperties.class)\npublic class CouchbaseRepositoriesAutoConfiguration {\n\n\t@Autowired\n\tprivate CouchbaseProperties properties;\n\n\t@PreDestroy\n\tpublic void close() throws URISyntaxException, IOException {\n\t\tcouchbaseClient().shutdown();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(CouchbaseClient.class)\n\tCouchbaseClient couchbaseClient() throws URISyntaxException, IOException {\n\t\treturn this.properties.createClient();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(CouchbaseTemplate.class)\n\tCouchbaseTemplate couchbaseTemplate(CouchbaseClient couchbaseClient) {\n\t\treturn new CouchbaseTemplate(couchbaseClient);\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
