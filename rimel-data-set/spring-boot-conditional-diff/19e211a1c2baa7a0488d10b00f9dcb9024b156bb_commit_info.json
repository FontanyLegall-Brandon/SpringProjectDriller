{'_old_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointManagementContextConfiguration.java'), '_new_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointManagementContextConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -20,10 +20,13 @@ import org.springframework.boot.actuate.autoconfigure.ManagementContextConfigura\n import org.springframework.boot.actuate.autoconfigure.endpoint.ConditionalOnEnabledEndpoint;\n import org.springframework.boot.actuate.endpoint.AuditEventsEndpoint;\n import org.springframework.boot.actuate.endpoint.HealthEndpoint;\n+import org.springframework.boot.actuate.endpoint.StatusEndpoint;\n import org.springframework.boot.actuate.endpoint.web.AuditEventsWebEndpointExtension;\n+import org.springframework.boot.actuate.endpoint.web.HealthStatusHttpMapper;\n import org.springframework.boot.actuate.endpoint.web.HealthWebEndpointExtension;\n import org.springframework.boot.actuate.endpoint.web.HeapDumpWebEndpoint;\n import org.springframework.boot.actuate.endpoint.web.LogFileWebEndpoint;\n+import org.springframework.boot.actuate.endpoint.web.StatusWebEndpointExtension;\n import org.springframework.boot.autoconfigure.condition.ConditionMessage;\n import org.springframework.boot.autoconfigure.condition.ConditionOutcome;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n@@ -61,12 +64,27 @@ public class WebEndpointManagementContextConfiguration {\n \t@ConditionalOnBean(value = HealthEndpoint.class, search = SearchStrategy.CURRENT)\n \tpublic HealthWebEndpointExtension healthWebEndpointExtension(HealthEndpoint delegate,\n \t\t\tHealthWebEndpointExtensionProperties extensionProperties) {\n-\t\tHealthWebEndpointExtension webExtension = new HealthWebEndpointExtension(\n-\t\t\t\tdelegate);\n+\t\treturn new HealthWebEndpointExtension(delegate,\n+\t\t\t\tcreateHealthStatusHttpMapper(extensionProperties));\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\t@ConditionalOnEnabledEndpoint\n+\t@ConditionalOnBean(value = StatusEndpoint.class, search = SearchStrategy.CURRENT)\n+\tpublic StatusWebEndpointExtension statusWebEndpointExtension(StatusEndpoint delegate,\n+\t\t\tHealthWebEndpointExtensionProperties extensionProperties) {\n+\t\treturn new StatusWebEndpointExtension(delegate,\n+\t\t\t\tcreateHealthStatusHttpMapper(extensionProperties));\n+\t}\n+\n+\tprivate HealthStatusHttpMapper createHealthStatusHttpMapper(\n+\t\t\tHealthWebEndpointExtensionProperties extensionProperties) {\n+\t\tHealthStatusHttpMapper statusHttpMapper = new HealthStatusHttpMapper();\n \t\tif (extensionProperties.getMapping() != null) {\n-\t\t\twebExtension.addStatusMapping(extensionProperties.getMapping());\n+\t\t\tstatusHttpMapper.addStatusMapping(extensionProperties.getMapping());\n \t\t}\n-\t\treturn webExtension;\n+\t\treturn statusHttpMapper;\n \t}\n \n \t@Bean\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.endpoint.web;\n\nimport org.springframework.boot.actuate.autoconfigure.ManagementContextConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.endpoint.ConditionalOnEnabledEndpoint;\nimport org.springframework.boot.actuate.endpoint.AuditEventsEndpoint;\nimport org.springframework.boot.actuate.endpoint.HealthEndpoint;\nimport org.springframework.boot.actuate.endpoint.StatusEndpoint;\nimport org.springframework.boot.actuate.endpoint.web.AuditEventsWebEndpointExtension;\nimport org.springframework.boot.actuate.endpoint.web.HealthStatusHttpMapper;\nimport org.springframework.boot.actuate.endpoint.web.HealthWebEndpointExtension;\nimport org.springframework.boot.actuate.endpoint.web.HeapDumpWebEndpoint;\nimport org.springframework.boot.actuate.endpoint.web.LogFileWebEndpoint;\nimport org.springframework.boot.actuate.endpoint.web.StatusWebEndpointExtension;\nimport org.springframework.boot.autoconfigure.condition.ConditionMessage;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.core.env.Environment;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.util.StringUtils;\n\n/**\n * Configuration for web-specific endpoint functionality.\n *\n * @author Andy Wilkinson\n * @since 2.0.0\n */\n@ManagementContextConfiguration\n@EnableConfigurationProperties(HealthWebEndpointExtensionProperties.class)\npublic class WebEndpointManagementContextConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnEnabledEndpoint\n\tpublic HeapDumpWebEndpoint heapDumpWebEndpoint() {\n\t\treturn new HeapDumpWebEndpoint();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnEnabledEndpoint\n\t@ConditionalOnBean(value = HealthEndpoint.class, search = SearchStrategy.CURRENT)\n\tpublic HealthWebEndpointExtension healthWebEndpointExtension(HealthEndpoint delegate,\n\t\t\tHealthWebEndpointExtensionProperties extensionProperties) {\n\t\treturn new HealthWebEndpointExtension(delegate,\n\t\t\t\tcreateHealthStatusHttpMapper(extensionProperties));\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnEnabledEndpoint\n\t@ConditionalOnBean(value = StatusEndpoint.class, search = SearchStrategy.CURRENT)\n\tpublic StatusWebEndpointExtension statusWebEndpointExtension(StatusEndpoint delegate,\n\t\t\tHealthWebEndpointExtensionProperties extensionProperties) {\n\t\treturn new StatusWebEndpointExtension(delegate,\n\t\t\t\tcreateHealthStatusHttpMapper(extensionProperties));\n\t}\n\n\tprivate HealthStatusHttpMapper createHealthStatusHttpMapper(\n\t\t\tHealthWebEndpointExtensionProperties extensionProperties) {\n\t\tHealthStatusHttpMapper statusHttpMapper = new HealthStatusHttpMapper();\n\t\tif (extensionProperties.getMapping() != null) {\n\t\t\tstatusHttpMapper.addStatusMapping(extensionProperties.getMapping());\n\t\t}\n\t\treturn statusHttpMapper;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnEnabledEndpoint\n\t@ConditionalOnBean(value = AuditEventsEndpoint.class, search = SearchStrategy.CURRENT)\n\tpublic AuditEventsWebEndpointExtension auditEventsWebEndpointExtension(\n\t\t\tAuditEventsEndpoint delegate) {\n\t\treturn new AuditEventsWebEndpointExtension(delegate);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@Conditional(LogFileCondition.class)\n\tpublic LogFileWebEndpoint logfileWebEndpoint(Environment environment) {\n\t\treturn new LogFileWebEndpoint(environment);\n\t}\n\n\tprivate static class LogFileCondition extends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tEnvironment environment = context.getEnvironment();\n\t\t\tString config = environment.resolvePlaceholders("${logging.file:}");\n\t\t\tConditionMessage.Builder message = ConditionMessage.forCondition("Log File");\n\t\t\tif (StringUtils.hasText(config)) {\n\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t.match(message.found("logging.file").items(config));\n\t\t\t}\n\t\t\tconfig = environment.resolvePlaceholders("${logging.path:}");\n\t\t\tif (StringUtils.hasText(config)) {\n\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t.match(message.found("logging.path").items(config));\n\t\t\t}\n\t\t\tconfig = environment.getProperty("endpoints.logfile.external-file");\n\t\t\tif (StringUtils.hasText(config)) {\n\t\t\t\treturn ConditionOutcome.match(\n\t\t\t\t\t\tmessage.found("endpoints.logfile.external-file").items(config));\n\t\t\t}\n\t\t\treturn ConditionOutcome.noMatch(message.didNotFind("logging file").atAll());\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.endpoint.web;\n\nimport org.springframework.boot.actuate.autoconfigure.ManagementContextConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.endpoint.ConditionalOnEnabledEndpoint;\nimport org.springframework.boot.actuate.endpoint.AuditEventsEndpoint;\nimport org.springframework.boot.actuate.endpoint.HealthEndpoint;\nimport org.springframework.boot.actuate.endpoint.web.AuditEventsWebEndpointExtension;\nimport org.springframework.boot.actuate.endpoint.web.HealthWebEndpointExtension;\nimport org.springframework.boot.actuate.endpoint.web.HeapDumpWebEndpoint;\nimport org.springframework.boot.actuate.endpoint.web.LogFileWebEndpoint;\nimport org.springframework.boot.autoconfigure.condition.ConditionMessage;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.core.env.Environment;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.util.StringUtils;\n\n/**\n * Configuration for web-specific endpoint functionality.\n *\n * @author Andy Wilkinson\n * @since 2.0.0\n */\n@ManagementContextConfiguration\n@EnableConfigurationProperties(HealthWebEndpointExtensionProperties.class)\npublic class WebEndpointManagementContextConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnEnabledEndpoint\n\tpublic HeapDumpWebEndpoint heapDumpWebEndpoint() {\n\t\treturn new HeapDumpWebEndpoint();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnEnabledEndpoint\n\t@ConditionalOnBean(value = HealthEndpoint.class, search = SearchStrategy.CURRENT)\n\tpublic HealthWebEndpointExtension healthWebEndpointExtension(HealthEndpoint delegate,\n\t\t\tHealthWebEndpointExtensionProperties extensionProperties) {\n\t\tHealthWebEndpointExtension webExtension = new HealthWebEndpointExtension(\n\t\t\t\tdelegate);\n\t\tif (extensionProperties.getMapping() != null) {\n\t\t\twebExtension.addStatusMapping(extensionProperties.getMapping());\n\t\t}\n\t\treturn webExtension;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnEnabledEndpoint\n\t@ConditionalOnBean(value = AuditEventsEndpoint.class, search = SearchStrategy.CURRENT)\n\tpublic AuditEventsWebEndpointExtension auditEventsWebEndpointExtension(\n\t\t\tAuditEventsEndpoint delegate) {\n\t\treturn new AuditEventsWebEndpointExtension(delegate);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@Conditional(LogFileCondition.class)\n\tpublic LogFileWebEndpoint logfileWebEndpoint(Environment environment) {\n\t\treturn new LogFileWebEndpoint(environment);\n\t}\n\n\tprivate static class LogFileCondition extends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tEnvironment environment = context.getEnvironment();\n\t\t\tString config = environment.resolvePlaceholders("${logging.file:}");\n\t\t\tConditionMessage.Builder message = ConditionMessage.forCondition("Log File");\n\t\t\tif (StringUtils.hasText(config)) {\n\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t.match(message.found("logging.file").items(config));\n\t\t\t}\n\t\t\tconfig = environment.resolvePlaceholders("${logging.path:}");\n\t\t\tif (StringUtils.hasText(config)) {\n\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t.match(message.found("logging.path").items(config));\n\t\t\t}\n\t\t\tconfig = environment.getProperty("endpoints.logfile.external-file");\n\t\t\tif (StringUtils.hasText(config)) {\n\t\t\t\treturn ConditionOutcome.match(\n\t\t\t\t\t\tmessage.found("endpoints.logfile.external-file").items(config));\n\t\t\t}\n\t\t\treturn ConditionOutcome.noMatch(message.didNotFind("logging file").atAll());\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
