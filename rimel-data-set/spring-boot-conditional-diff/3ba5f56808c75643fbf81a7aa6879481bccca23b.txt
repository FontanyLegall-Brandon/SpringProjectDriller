@@ -0,0 +1,51 @@
+package org.springframework.bootstrap.sample.ui;
+
+import java.util.Date;
+import java.util.Map;
+
+import org.springframework.bootstrap.SpringApplication;
+import org.springframework.bootstrap.actuate.autoconfigure.ConditionalOnManagementContext;
+import org.springframework.bootstrap.actuate.autoconfigure.ManagementAutoConfiguration;
+import org.springframework.bootstrap.actuate.autoconfigure.SecurityAutoConfiguration;
+import org.springframework.bootstrap.context.annotation.ConditionalOnExpression;
+import org.springframework.bootstrap.context.annotation.EnableAutoConfiguration;
+import org.springframework.context.annotation.ComponentScan;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Import;
+import org.springframework.stereotype.Controller;
+import org.springframework.web.bind.annotation.RequestMapping;
+
+@EnableAutoConfiguration(exclude = { SecurityAutoConfiguration.class,
+		ManagementAutoConfiguration.class })
+@ComponentScan
+@Controller
+public class ActuatorUiBootstrapApplication {
+
+	@RequestMapping()
+	public String home(Map<String, Object> model) {
+		model.put(, );
+		model.put(, );
+		model.put(, new Date());
+		return ;
+	}
+
+	public static void main(String[] args) throws Exception {
+		SpringApplication.run(ActuatorUiBootstrapApplication.class, args);
+	}
+
+	@Configuration
+	@ConditionalOnExpression()
+	@Import(ManagementAutoConfiguration.class)
+	protected static class ManagementConfiguration {
+
+	}
+
+	@Configuration
+	@ConditionalOnExpression()
+	@ConditionalOnManagementContext
+	@Import(SecurityAutoConfiguration.class)
+	protected static class ManagementSecurityConfiguration {
+
+	}
+
+}

