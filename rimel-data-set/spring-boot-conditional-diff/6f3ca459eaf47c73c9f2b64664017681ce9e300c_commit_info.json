{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/MongoReactiveSessionConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/MongoReactiveSessionConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -27,6 +27,7 @@ import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.data.mongodb.core.ReactiveMongoOperations;\n import org.springframework.session.ReactiveSessionRepository;\n+import org.springframework.session.data.mongo.ReactiveMongoOperationsSessionRepository;\n import org.springframework.session.data.mongo.config.annotation.web.reactive.ReactiveMongoWebSessionConfiguration;\n \n /**\n@@ -35,7 +36,8 @@ import org.springframework.session.data.mongo.config.annotation.web.reactive.Rea\n  * @author Andy Wilkinson\n  */\n @Configuration\n-@ConditionalOnClass(ReactiveMongoWebSessionConfiguration.class)\n+@ConditionalOnClass({ ReactiveMongoOperations.class,\n+\t\tReactiveMongoOperationsSessionRepository.class })\n @ConditionalOnMissingBean(ReactiveSessionRepository.class)\n @ConditionalOnBean(ReactiveMongoOperations.class)\n @Conditional(ReactiveSessionCondition.class)\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.session;\n\nimport java.time.Duration;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.mongodb.core.ReactiveMongoOperations;\nimport org.springframework.session.ReactiveSessionRepository;\nimport org.springframework.session.data.mongo.ReactiveMongoOperationsSessionRepository;\nimport org.springframework.session.data.mongo.config.annotation.web.reactive.ReactiveMongoWebSessionConfiguration;\n\n/**\n * Mongo-backed reactive session configuration.\n *\n * @author Andy Wilkinson\n */\n@Configuration\n@ConditionalOnClass({ ReactiveMongoOperations.class,\n\t\tReactiveMongoOperationsSessionRepository.class })\n@ConditionalOnMissingBean(ReactiveSessionRepository.class)\n@ConditionalOnBean(ReactiveMongoOperations.class)\n@Conditional(ReactiveSessionCondition.class)\n@EnableConfigurationProperties(MongoSessionProperties.class)\nclass MongoReactiveSessionConfiguration {\n\n\t@Configuration\n\tstatic class SpringBootReactiveMongoWebSessionConfiguration\n\t\t\textends ReactiveMongoWebSessionConfiguration {\n\n\t\t@Autowired\n\t\tpublic void customize(SessionProperties sessionProperties,\n\t\t\t\tMongoSessionProperties mongoSessionProperties) {\n\t\t\tDuration timeout = sessionProperties.getTimeout();\n\t\t\tif (timeout != null) {\n\t\t\t\tsetMaxInactiveIntervalInSeconds((int) timeout.getSeconds());\n\t\t\t}\n\t\t\tsetCollectionName(mongoSessionProperties.getCollectionName());\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.session;\n\nimport java.time.Duration;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.mongodb.core.ReactiveMongoOperations;\nimport org.springframework.session.ReactiveSessionRepository;\nimport org.springframework.session.data.mongo.config.annotation.web.reactive.ReactiveMongoWebSessionConfiguration;\n\n/**\n * Mongo-backed reactive session configuration.\n *\n * @author Andy Wilkinson\n */\n@Configuration\n@ConditionalOnClass(ReactiveMongoWebSessionConfiguration.class)\n@ConditionalOnMissingBean(ReactiveSessionRepository.class)\n@ConditionalOnBean(ReactiveMongoOperations.class)\n@Conditional(ReactiveSessionCondition.class)\n@EnableConfigurationProperties(MongoSessionProperties.class)\nclass MongoReactiveSessionConfiguration {\n\n\t@Configuration\n\tstatic class SpringBootReactiveMongoWebSessionConfiguration\n\t\t\textends ReactiveMongoWebSessionConfiguration {\n\n\t\t@Autowired\n\t\tpublic void customize(SessionProperties sessionProperties,\n\t\t\t\tMongoSessionProperties mongoSessionProperties) {\n\t\t\tDuration timeout = sessionProperties.getTimeout();\n\t\t\tif (timeout != null) {\n\t\t\t\tsetMaxInactiveIntervalInSeconds((int) timeout.getSeconds());\n\t\t\t}\n\t\t\tsetCollectionName(mongoSessionProperties.getCollectionName());\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
