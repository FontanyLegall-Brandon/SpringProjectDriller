{'_old_path': None, '_new_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/PublicMetricsAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2012-2014 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.autoconfigure;\n+\n+import javax.sql.DataSource;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.actuate.endpoint.DataSourcePublicMetrics;\n+import org.springframework.boot.actuate.endpoint.MetricReaderPublicMetrics;\n+import org.springframework.boot.actuate.endpoint.PublicMetrics;\n+import org.springframework.boot.actuate.endpoint.RichGaugeReaderPublicMetrics;\n+import org.springframework.boot.actuate.endpoint.SystemPublicMetrics;\n+import org.springframework.boot.actuate.metrics.reader.MetricReader;\n+import org.springframework.boot.actuate.metrics.repository.InMemoryMetricRepository;\n+import org.springframework.boot.actuate.metrics.rich.RichGaugeReader;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\n+import org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvider;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for {@link PublicMetrics}.\n+ *\n+ * @author Stephane Nicoll\n+ * @author Phillip Webb\n+ * @since 1.2.0\n+ */\n+@Configuration\n+@AutoConfigureAfter({ DataSourceAutoConfiguration.class,\n+\t\tMetricRepositoryAutoConfiguration.class })\n+@AutoConfigureBefore(EndpointAutoConfiguration.class)\n+public class PublicMetricsAutoConfiguration {\n+\n+\t@Autowired(required = false)\n+\tprivate MetricReader metricReader = new InMemoryMetricRepository();\n+\n+\t@Bean\n+\tpublic SystemPublicMetrics systemPublicMetrics() {\n+\t\treturn new SystemPublicMetrics();\n+\t}\n+\n+\t@Bean\n+\tpublic MetricReaderPublicMetrics metricReaderPublicMetrics() {\n+\t\treturn new MetricReaderPublicMetrics(this.metricReader);\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnBean(RichGaugeReader.class)\n+\tpublic RichGaugeReaderPublicMetrics richGaugePublicMetrics(\n+\t\t\tRichGaugeReader richGaugeReader) {\n+\t\treturn new RichGaugeReaderPublicMetrics(richGaugeReader);\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnClass(DataSource.class)\n+\t@ConditionalOnBean(DataSource.class)\n+\tstatic class DataSourceMetricsConfiguration {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean\n+\t\t@ConditionalOnBean(DataSourcePoolMetadataProvider.class)\n+\t\tpublic DataSourcePublicMetrics dataSourcePublicMetrics() {\n+\t\t\treturn new DataSourcePublicMetrics();\n+\t\t}\n+\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuate.endpoint.DataSourcePublicMetrics;\nimport org.springframework.boot.actuate.endpoint.MetricReaderPublicMetrics;\nimport org.springframework.boot.actuate.endpoint.PublicMetrics;\nimport org.springframework.boot.actuate.endpoint.RichGaugeReaderPublicMetrics;\nimport org.springframework.boot.actuate.endpoint.SystemPublicMetrics;\nimport org.springframework.boot.actuate.metrics.reader.MetricReader;\nimport org.springframework.boot.actuate.metrics.repository.InMemoryMetricRepository;\nimport org.springframework.boot.actuate.metrics.rich.RichGaugeReader;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvider;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link PublicMetrics}.\n *\n * @author Stephane Nicoll\n * @author Phillip Webb\n * @since 1.2.0\n */\n@Configuration\n@AutoConfigureAfter({ DataSourceAutoConfiguration.class,\n\t\tMetricRepositoryAutoConfiguration.class })\n@AutoConfigureBefore(EndpointAutoConfiguration.class)\npublic class PublicMetricsAutoConfiguration {\n\n\t@Autowired(required = false)\n\tprivate MetricReader metricReader = new InMemoryMetricRepository();\n\n\t@Bean\n\tpublic SystemPublicMetrics systemPublicMetrics() {\n\t\treturn new SystemPublicMetrics();\n\t}\n\n\t@Bean\n\tpublic MetricReaderPublicMetrics metricReaderPublicMetrics() {\n\t\treturn new MetricReaderPublicMetrics(this.metricReader);\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(RichGaugeReader.class)\n\tpublic RichGaugeReaderPublicMetrics richGaugePublicMetrics(\n\t\t\tRichGaugeReader richGaugeReader) {\n\t\treturn new RichGaugeReaderPublicMetrics(richGaugeReader);\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(DataSource.class)\n\t@ConditionalOnBean(DataSource.class)\n\tstatic class DataSourceMetricsConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnBean(DataSourcePoolMetadataProvider.class)\n\t\tpublic DataSourcePublicMetrics dataSourcePublicMetrics() {\n\t\t\treturn new DataSourcePublicMetrics();\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
