{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/aop/AopAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/aop/AopAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,11 +16,13 @@\n \n package org.springframework.boot.autoconfigure.aop;\n \n-import org.aspectj.lang.annotation.Aspect;\n-import org.aspectj.lang.reflect.Advice;\n-import org.aspectj.weaver.AnnotatedElement;\n+import org.aspectj.weaver.Advice;\n \n+import org.springframework.aop.config.AopConfigUtils;\n+import org.springframework.beans.factory.BeanFactory;\n+import org.springframework.beans.factory.support.BeanDefinitionRegistry;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.EnableAspectJAutoProxy;\n@@ -40,23 +42,44 @@ import org.springframework.context.annotation.EnableAspectJAutoProxy;\n  * @see EnableAspectJAutoProxy\n  */\n @Configuration(proxyBeanMethods = false)\n-@ConditionalOnClass({ EnableAspectJAutoProxy.class, Aspect.class, Advice.class, AnnotatedElement.class })\n @ConditionalOnProperty(prefix = "spring.aop", name = "auto", havingValue = "true", matchIfMissing = true)\n public class AopAutoConfiguration {\n \n \t@Configuration(proxyBeanMethods = false)\n-\t@EnableAspectJAutoProxy(proxyTargetClass = false)\n-\t@ConditionalOnProperty(prefix = "spring.aop", name = "proxy-target-class", havingValue = "false",\n-\t\t\tmatchIfMissing = false)\n-\tpublic static class JdkDynamicAutoProxyConfiguration {\n+\t@ConditionalOnClass(Advice.class)\n+\tstatic class AspectJAutoProxyingConfiguration {\n+\n+\t\t@Configuration(proxyBeanMethods = false)\n+\t\t@EnableAspectJAutoProxy(proxyTargetClass = false)\n+\t\t@ConditionalOnProperty(prefix = "spring.aop", name = "proxy-target-class", havingValue = "false",\n+\t\t\t\tmatchIfMissing = false)\n+\t\tstatic class JdkDynamicAutoProxyConfiguration {\n+\n+\t\t}\n+\n+\t\t@Configuration(proxyBeanMethods = false)\n+\t\t@EnableAspectJAutoProxy(proxyTargetClass = true)\n+\t\t@ConditionalOnProperty(prefix = "spring.aop", name = "proxy-target-class", havingValue = "true",\n+\t\t\t\tmatchIfMissing = true)\n+\t\tstatic class CglibAutoProxyConfiguration {\n+\n+\t\t}\n \n \t}\n \n \t@Configuration(proxyBeanMethods = false)\n-\t@EnableAspectJAutoProxy(proxyTargetClass = true)\n+\t@ConditionalOnMissingClass("org.aspectj.weaver.Advice")\n \t@ConditionalOnProperty(prefix = "spring.aop", name = "proxy-target-class", havingValue = "true",\n \t\t\tmatchIfMissing = true)\n-\tpublic static class CglibAutoProxyConfiguration {\n+\tstatic class ClassProxyingConfiguration {\n+\n+\t\tClassProxyingConfiguration(BeanFactory beanFactory) {\n+\t\t\tif (beanFactory instanceof BeanDefinitionRegistry) {\n+\t\t\t\tBeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory;\n+\t\t\t\tAopConfigUtils.registerAutoProxyCreatorIfNecessary(registry);\n+\t\t\t\tAopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry);\n+\t\t\t}\n+\t\t}\n \n \t}\n \n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.aop;\n\nimport org.aspectj.weaver.Advice;\n\nimport org.springframework.aop.config.AopConfigUtils;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistry;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.EnableAspectJAutoProxy;\n\n/**\n * {@link org.springframework.boot.autoconfigure.EnableAutoConfiguration\n * Auto-configuration} for Spring\'s AOP support. Equivalent to enabling\n * {@link EnableAspectJAutoProxy @EnableAspectJAutoProxy} in your configuration.\n * <p>\n * The configuration will not be activated if {@literal spring.aop.auto=false}. The\n * {@literal proxyTargetClass} attribute will be {@literal true}, by default, but can be\n * overridden by specifying {@literal spring.aop.proxy-target-class=false}.\n *\n * @author Dave Syer\n * @author Josh Long\n * @since 1.0.0\n * @see EnableAspectJAutoProxy\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnProperty(prefix = "spring.aop", name = "auto", havingValue = "true", matchIfMissing = true)\npublic class AopAutoConfiguration {\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnClass(Advice.class)\n\tstatic class AspectJAutoProxyingConfiguration {\n\n\t\t@Configuration(proxyBeanMethods = false)\n\t\t@EnableAspectJAutoProxy(proxyTargetClass = false)\n\t\t@ConditionalOnProperty(prefix = "spring.aop", name = "proxy-target-class", havingValue = "false",\n\t\t\t\tmatchIfMissing = false)\n\t\tstatic class JdkDynamicAutoProxyConfiguration {\n\n\t\t}\n\n\t\t@Configuration(proxyBeanMethods = false)\n\t\t@EnableAspectJAutoProxy(proxyTargetClass = true)\n\t\t@ConditionalOnProperty(prefix = "spring.aop", name = "proxy-target-class", havingValue = "true",\n\t\t\t\tmatchIfMissing = true)\n\t\tstatic class CglibAutoProxyConfiguration {\n\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnMissingClass("org.aspectj.weaver.Advice")\n\t@ConditionalOnProperty(prefix = "spring.aop", name = "proxy-target-class", havingValue = "true",\n\t\t\tmatchIfMissing = true)\n\tstatic class ClassProxyingConfiguration {\n\n\t\tClassProxyingConfiguration(BeanFactory beanFactory) {\n\t\t\tif (beanFactory instanceof BeanDefinitionRegistry) {\n\t\t\t\tBeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory;\n\t\t\t\tAopConfigUtils.registerAutoProxyCreatorIfNecessary(registry);\n\t\t\t\tAopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry);\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.aop;\n\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.reflect.Advice;\nimport org.aspectj.weaver.AnnotatedElement;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.EnableAspectJAutoProxy;\n\n/**\n * {@link org.springframework.boot.autoconfigure.EnableAutoConfiguration\n * Auto-configuration} for Spring\'s AOP support. Equivalent to enabling\n * {@link EnableAspectJAutoProxy @EnableAspectJAutoProxy} in your configuration.\n * <p>\n * The configuration will not be activated if {@literal spring.aop.auto=false}. The\n * {@literal proxyTargetClass} attribute will be {@literal true}, by default, but can be\n * overridden by specifying {@literal spring.aop.proxy-target-class=false}.\n *\n * @author Dave Syer\n * @author Josh Long\n * @since 1.0.0\n * @see EnableAspectJAutoProxy\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass({ EnableAspectJAutoProxy.class, Aspect.class, Advice.class, AnnotatedElement.class })\n@ConditionalOnProperty(prefix = "spring.aop", name = "auto", havingValue = "true", matchIfMissing = true)\npublic class AopAutoConfiguration {\n\n\t@Configuration(proxyBeanMethods = false)\n\t@EnableAspectJAutoProxy(proxyTargetClass = false)\n\t@ConditionalOnProperty(prefix = "spring.aop", name = "proxy-target-class", havingValue = "false",\n\t\t\tmatchIfMissing = false)\n\tpublic static class JdkDynamicAutoProxyConfiguration {\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@EnableAspectJAutoProxy(proxyTargetClass = true)\n\t@ConditionalOnProperty(prefix = "spring.aop", name = "proxy-target-class", havingValue = "true",\n\t\t\tmatchIfMissing = true)\n\tpublic static class CglibAutoProxyConfiguration {\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
