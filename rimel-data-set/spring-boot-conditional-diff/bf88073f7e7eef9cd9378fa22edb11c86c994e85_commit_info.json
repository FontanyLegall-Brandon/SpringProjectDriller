{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -24,6 +24,7 @@ import javax.annotation.PostConstruct;\n import javax.persistence.EntityManagerFactory;\n import javax.sql.DataSource;\n \n+import liquibase.change.DatabaseChange;\n import liquibase.exception.LiquibaseException;\n import liquibase.integration.spring.SpringLiquibase;\n \n@@ -60,7 +61,7 @@ import org.springframework.util.ReflectionUtils;\n  * @since 1.1.0\n  */\n @Configuration\n-@ConditionalOnClass(SpringLiquibase.class)\n+@ConditionalOnClass({ SpringLiquibase.class, DatabaseChange.class })\n @ConditionalOnBean(DataSource.class)\n @ConditionalOnProperty(prefix = "spring.liquibase", name = "enabled", matchIfMissing = true)\n @AutoConfigureAfter({ DataSourceAutoConfiguration.class,\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.liquibase;\n\nimport java.lang.reflect.Method;\nimport java.util.Collections;\nimport java.util.List;\n\nimport javax.annotation.PostConstruct;\nimport javax.persistence.EntityManagerFactory;\nimport javax.sql.DataSource;\n\nimport liquibase.change.DatabaseChange;\nimport liquibase.exception.LiquibaseException;\nimport liquibase.integration.spring.SpringLiquibase;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.data.jpa.EntityManagerFactoryDependsOnPostProcessor;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.jdbc.DataSourceBuilder;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.orm.jpa.AbstractEntityManagerFactoryBean;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.util.Assert;\nimport org.springframework.util.ReflectionUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Liquibase.\n *\n * @author Marcel Overdijk\n * @author Dave Syer\n * @author Phillip Webb\n * @author Eddú Meléndez\n * @author Andy Wilkinson\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass({ SpringLiquibase.class, DatabaseChange.class })\n@ConditionalOnBean(DataSource.class)\n@ConditionalOnProperty(prefix = "spring.liquibase", name = "enabled", matchIfMissing = true)\n@AutoConfigureAfter({ DataSourceAutoConfiguration.class,\n\t\tHibernateJpaAutoConfiguration.class })\npublic class LiquibaseAutoConfiguration {\n\n\t@Bean\n\tpublic LiquibaseSchemaManagementProvider liquibaseDefaultDdlModeProvider(\n\t\t\tObjectProvider<List<SpringLiquibase>> liquibases) {\n\t\treturn new LiquibaseSchemaManagementProvider(\n\t\t\t\tliquibases.getIfAvailable(Collections::emptyList));\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(SpringLiquibase.class)\n\t@EnableConfigurationProperties(LiquibaseProperties.class)\n\t@Import(LiquibaseJpaDependencyConfiguration.class)\n\tpublic static class LiquibaseConfiguration {\n\n\t\tprivate final LiquibaseProperties properties;\n\n\t\tprivate final ResourceLoader resourceLoader;\n\n\t\tprivate final DataSource dataSource;\n\n\t\tprivate final DataSource liquibaseDataSource;\n\n\t\tpublic LiquibaseConfiguration(LiquibaseProperties properties,\n\t\t\t\tResourceLoader resourceLoader, ObjectProvider<DataSource> dataSource,\n\t\t\t\t@LiquibaseDataSource ObjectProvider<DataSource> liquibaseDataSource) {\n\t\t\tthis.properties = properties;\n\t\t\tthis.resourceLoader = resourceLoader;\n\t\t\tthis.dataSource = dataSource.getIfUnique();\n\t\t\tthis.liquibaseDataSource = liquibaseDataSource.getIfAvailable();\n\t\t}\n\n\t\t@PostConstruct\n\t\tpublic void checkChangelogExists() {\n\t\t\tif (this.properties.isCheckChangeLogLocation()) {\n\t\t\t\tResource resource = this.resourceLoader\n\t\t\t\t\t\t.getResource(this.properties.getChangeLog());\n\t\t\t\tAssert.state(resource.exists(),\n\t\t\t\t\t\t() -> "Cannot find changelog location: " + resource\n\t\t\t\t\t\t\t\t+ " (please add changelog or check your Liquibase "\n\t\t\t\t\t\t\t\t+ "configuration)");\n\t\t\t}\n\t\t}\n\n\t\t@Bean\n\t\tpublic SpringLiquibase liquibase() {\n\t\t\tSpringLiquibase liquibase = createSpringLiquibase();\n\t\t\tliquibase.setChangeLog(this.properties.getChangeLog());\n\t\t\tliquibase.setContexts(this.properties.getContexts());\n\t\t\tliquibase.setDefaultSchema(this.properties.getDefaultSchema());\n\t\t\tliquibase.setDropFirst(this.properties.isDropFirst());\n\t\t\tliquibase.setShouldRun(this.properties.isEnabled());\n\t\t\tliquibase.setLabels(this.properties.getLabels());\n\t\t\tliquibase.setChangeLogParameters(this.properties.getParameters());\n\t\t\tliquibase.setRollbackFile(this.properties.getRollbackFile());\n\t\t\treturn liquibase;\n\t\t}\n\n\t\tprivate SpringLiquibase createSpringLiquibase() {\n\t\t\tDataSource liquibaseDataSource = getDataSource();\n\t\t\tif (liquibaseDataSource != null) {\n\t\t\t\tSpringLiquibase liquibase = new SpringLiquibase();\n\t\t\t\tliquibase.setDataSource(liquibaseDataSource);\n\t\t\t\treturn liquibase;\n\t\t\t}\n\t\t\tSpringLiquibase liquibase = new DataSourceClosingSpringLiquibase();\n\t\t\tliquibase.setDataSource(createNewDataSource());\n\t\t\treturn liquibase;\n\t\t}\n\n\t\tprivate DataSource getDataSource() {\n\t\t\tif (this.liquibaseDataSource != null) {\n\t\t\t\treturn this.liquibaseDataSource;\n\t\t\t}\n\t\t\tif (this.properties.getUrl() == null) {\n\t\t\t\treturn this.dataSource;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\tprivate DataSource createNewDataSource() {\n\t\t\treturn DataSourceBuilder.create().url(this.properties.getUrl())\n\t\t\t\t\t.username(this.properties.getUser())\n\t\t\t\t\t.password(this.properties.getPassword()).build();\n\t\t}\n\n\t}\n\n\t/**\n\t * Additional configuration to ensure that {@link EntityManagerFactory} beans\n\t * depend-on the liquibase bean.\n\t */\n\t@Configuration\n\t@ConditionalOnClass(LocalContainerEntityManagerFactoryBean.class)\n\t@ConditionalOnBean(AbstractEntityManagerFactoryBean.class)\n\tprotected static class LiquibaseJpaDependencyConfiguration\n\t\t\textends EntityManagerFactoryDependsOnPostProcessor {\n\n\t\tpublic LiquibaseJpaDependencyConfiguration() {\n\t\t\tsuper("liquibase");\n\t\t}\n\n\t}\n\n\t/**\n\t * A custom {@link SpringLiquibase} extension that closes the underlying\n\t * {@link DataSource} once the database has been migrated.\n\t */\n\tprivate static final class DataSourceClosingSpringLiquibase extends SpringLiquibase {\n\n\t\t@Override\n\t\tpublic void afterPropertiesSet() throws LiquibaseException {\n\t\t\tsuper.afterPropertiesSet();\n\t\t\tcloseDataSource();\n\t\t}\n\n\t\tprivate void closeDataSource() {\n\t\t\tClass<?> dataSourceClass = getDataSource().getClass();\n\t\t\tMethod closeMethod = ReflectionUtils.findMethod(dataSourceClass, "close");\n\t\t\tif (closeMethod != null) {\n\t\t\t\tReflectionUtils.invokeMethod(closeMethod, getDataSource());\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.liquibase;\n\nimport java.lang.reflect.Method;\nimport java.util.Collections;\nimport java.util.List;\n\nimport javax.annotation.PostConstruct;\nimport javax.persistence.EntityManagerFactory;\nimport javax.sql.DataSource;\n\nimport liquibase.exception.LiquibaseException;\nimport liquibase.integration.spring.SpringLiquibase;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.data.jpa.EntityManagerFactoryDependsOnPostProcessor;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.jdbc.DataSourceBuilder;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.orm.jpa.AbstractEntityManagerFactoryBean;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.util.Assert;\nimport org.springframework.util.ReflectionUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Liquibase.\n *\n * @author Marcel Overdijk\n * @author Dave Syer\n * @author Phillip Webb\n * @author Eddú Meléndez\n * @author Andy Wilkinson\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass(SpringLiquibase.class)\n@ConditionalOnBean(DataSource.class)\n@ConditionalOnProperty(prefix = "spring.liquibase", name = "enabled", matchIfMissing = true)\n@AutoConfigureAfter({ DataSourceAutoConfiguration.class,\n\t\tHibernateJpaAutoConfiguration.class })\npublic class LiquibaseAutoConfiguration {\n\n\t@Bean\n\tpublic LiquibaseSchemaManagementProvider liquibaseDefaultDdlModeProvider(\n\t\t\tObjectProvider<List<SpringLiquibase>> liquibases) {\n\t\treturn new LiquibaseSchemaManagementProvider(\n\t\t\t\tliquibases.getIfAvailable(Collections::emptyList));\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(SpringLiquibase.class)\n\t@EnableConfigurationProperties(LiquibaseProperties.class)\n\t@Import(LiquibaseJpaDependencyConfiguration.class)\n\tpublic static class LiquibaseConfiguration {\n\n\t\tprivate final LiquibaseProperties properties;\n\n\t\tprivate final ResourceLoader resourceLoader;\n\n\t\tprivate final DataSource dataSource;\n\n\t\tprivate final DataSource liquibaseDataSource;\n\n\t\tpublic LiquibaseConfiguration(LiquibaseProperties properties,\n\t\t\t\tResourceLoader resourceLoader, ObjectProvider<DataSource> dataSource,\n\t\t\t\t@LiquibaseDataSource ObjectProvider<DataSource> liquibaseDataSource) {\n\t\t\tthis.properties = properties;\n\t\t\tthis.resourceLoader = resourceLoader;\n\t\t\tthis.dataSource = dataSource.getIfUnique();\n\t\t\tthis.liquibaseDataSource = liquibaseDataSource.getIfAvailable();\n\t\t}\n\n\t\t@PostConstruct\n\t\tpublic void checkChangelogExists() {\n\t\t\tif (this.properties.isCheckChangeLogLocation()) {\n\t\t\t\tResource resource = this.resourceLoader\n\t\t\t\t\t\t.getResource(this.properties.getChangeLog());\n\t\t\t\tAssert.state(resource.exists(),\n\t\t\t\t\t\t() -> "Cannot find changelog location: " + resource\n\t\t\t\t\t\t\t\t+ " (please add changelog or check your Liquibase "\n\t\t\t\t\t\t\t\t+ "configuration)");\n\t\t\t}\n\t\t}\n\n\t\t@Bean\n\t\tpublic SpringLiquibase liquibase() {\n\t\t\tSpringLiquibase liquibase = createSpringLiquibase();\n\t\t\tliquibase.setChangeLog(this.properties.getChangeLog());\n\t\t\tliquibase.setContexts(this.properties.getContexts());\n\t\t\tliquibase.setDefaultSchema(this.properties.getDefaultSchema());\n\t\t\tliquibase.setDropFirst(this.properties.isDropFirst());\n\t\t\tliquibase.setShouldRun(this.properties.isEnabled());\n\t\t\tliquibase.setLabels(this.properties.getLabels());\n\t\t\tliquibase.setChangeLogParameters(this.properties.getParameters());\n\t\t\tliquibase.setRollbackFile(this.properties.getRollbackFile());\n\t\t\treturn liquibase;\n\t\t}\n\n\t\tprivate SpringLiquibase createSpringLiquibase() {\n\t\t\tDataSource liquibaseDataSource = getDataSource();\n\t\t\tif (liquibaseDataSource != null) {\n\t\t\t\tSpringLiquibase liquibase = new SpringLiquibase();\n\t\t\t\tliquibase.setDataSource(liquibaseDataSource);\n\t\t\t\treturn liquibase;\n\t\t\t}\n\t\t\tSpringLiquibase liquibase = new DataSourceClosingSpringLiquibase();\n\t\t\tliquibase.setDataSource(createNewDataSource());\n\t\t\treturn liquibase;\n\t\t}\n\n\t\tprivate DataSource getDataSource() {\n\t\t\tif (this.liquibaseDataSource != null) {\n\t\t\t\treturn this.liquibaseDataSource;\n\t\t\t}\n\t\t\tif (this.properties.getUrl() == null) {\n\t\t\t\treturn this.dataSource;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\tprivate DataSource createNewDataSource() {\n\t\t\treturn DataSourceBuilder.create().url(this.properties.getUrl())\n\t\t\t\t\t.username(this.properties.getUser())\n\t\t\t\t\t.password(this.properties.getPassword()).build();\n\t\t}\n\n\t}\n\n\t/**\n\t * Additional configuration to ensure that {@link EntityManagerFactory} beans\n\t * depend-on the liquibase bean.\n\t */\n\t@Configuration\n\t@ConditionalOnClass(LocalContainerEntityManagerFactoryBean.class)\n\t@ConditionalOnBean(AbstractEntityManagerFactoryBean.class)\n\tprotected static class LiquibaseJpaDependencyConfiguration\n\t\t\textends EntityManagerFactoryDependsOnPostProcessor {\n\n\t\tpublic LiquibaseJpaDependencyConfiguration() {\n\t\t\tsuper("liquibase");\n\t\t}\n\n\t}\n\n\t/**\n\t * A custom {@link SpringLiquibase} extension that closes the underlying\n\t * {@link DataSource} once the database has been migrated.\n\t */\n\tprivate static final class DataSourceClosingSpringLiquibase extends SpringLiquibase {\n\n\t\t@Override\n\t\tpublic void afterPropertiesSet() throws LiquibaseException {\n\t\t\tsuper.afterPropertiesSet();\n\t\t\tcloseDataSource();\n\t\t}\n\n\t\tprivate void closeDataSource() {\n\t\t\tClass<?> dataSourceClass = getDataSource().getClass();\n\t\t\tMethod closeMethod = ReflectionUtils.findMethod(dataSourceClass, "close");\n\t\t\tif (closeMethod != null) {\n\t\t\t\tReflectionUtils.invokeMethod(closeMethod, getDataSource());\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
