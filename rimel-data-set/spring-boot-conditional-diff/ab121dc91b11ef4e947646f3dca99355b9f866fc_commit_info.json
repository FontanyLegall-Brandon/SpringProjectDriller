{'_old_path': None, '_new_path': PosixPath('spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/jdbc/DataSourceTransactionManagerAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2012-2013 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.bootstrap.autoconfigure.jdbc;\n+\n+import javax.sql.DataSource;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.bootstrap.context.annotation.ConditionalOnBean;\n+import org.springframework.bootstrap.context.annotation.ConditionalOnClass;\n+import org.springframework.bootstrap.context.annotation.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.Ordered;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.datasource.DataSourceTransactionManager;\n+import org.springframework.transaction.PlatformTransactionManager;\n+\n+/**\n+ * @author Dave Syer\n+ * \n+ */\n+@Configuration\n+@ConditionalOnClass({ JdbcTemplate.class, PlatformTransactionManager.class })\n+public class DataSourceTransactionManagerAutoConfiguration implements Ordered {\n+\n+\t@Override\n+\tpublic int getOrder() {\n+\t\treturn Integer.MAX_VALUE;\n+\t}\n+\n+\t@Autowired(required = false)\n+\tprivate DataSource dataSource;\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean(name = "transactionManager")\n+\t@ConditionalOnBean(DataSource.class)\n+\tpublic PlatformTransactionManager transactionManager() {\n+\t\treturn new DataSourceTransactionManager(this.dataSource);\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.bootstrap.autoconfigure.jdbc;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.bootstrap.context.annotation.ConditionalOnBean;\nimport org.springframework.bootstrap.context.annotation.ConditionalOnClass;\nimport org.springframework.bootstrap.context.annotation.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.datasource.DataSourceTransactionManager;\nimport org.springframework.transaction.PlatformTransactionManager;\n\n/**\n * @author Dave Syer\n * \n */\n@Configuration\n@ConditionalOnClass({ JdbcTemplate.class, PlatformTransactionManager.class })\npublic class DataSourceTransactionManagerAutoConfiguration implements Ordered {\n\n\t@Override\n\tpublic int getOrder() {\n\t\treturn Integer.MAX_VALUE;\n\t}\n\n\t@Autowired(required = false)\n\tprivate DataSource dataSource;\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "transactionManager")\n\t@ConditionalOnBean(DataSource.class)\n\tpublic PlatformTransactionManager transactionManager() {\n\t\treturn new DataSourceTransactionManager(this.dataSource);\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
