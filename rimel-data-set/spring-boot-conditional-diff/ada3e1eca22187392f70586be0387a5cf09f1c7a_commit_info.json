{'_old_path': None, '_new_path': PosixPath('spring-boot-developer-tools/src/main/java/org/springframework/boot/developertools/autoconfigure/RemoteDeveloperToolsAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2012-2015 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.developertools.autoconfigure;\n+\n+import java.util.Collection;\n+\n+import javax.servlet.Filter;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.developertools.remote.server.AccessManager;\n+import org.springframework.boot.developertools.remote.server.Dispatcher;\n+import org.springframework.boot.developertools.remote.server.DispatcherFilter;\n+import org.springframework.boot.developertools.remote.server.Handler;\n+import org.springframework.boot.developertools.remote.server.HandlerMapper;\n+import org.springframework.boot.developertools.remote.server.HttpStatusHandler;\n+import org.springframework.boot.developertools.remote.server.UrlHandlerMapper;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.http.server.ServerHttpRequest;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for remote development support.\n+ *\n+ * @author Phillip Webb\n+ * @author Rob Winch\n+ * @since 1.3.0\n+ */\n+@Configuration\n+@ConditionalOnProperty(prefix = "spring.developertools.remote", name = "enabled")\n+@ConditionalOnClass({ Filter.class, ServerHttpRequest.class })\n+@EnableConfigurationProperties(DeveloperToolsProperties.class)\n+public class RemoteDeveloperToolsAutoConfiguration {\n+\n+\t@Autowired\n+\tprivate DeveloperToolsProperties properties;\n+\n+\t@Bean\n+\tpublic HandlerMapper remoteDeveloperToolsHealthCheckHandlerMapper() {\n+\t\tHandler handler = new HttpStatusHandler();\n+\t\treturn new UrlHandlerMapper(this.properties.getRemote().getContextPath(), handler);\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic DispatcherFilter remoteDeveloperToolsDispatcherFilter(\n+\t\t\tCollection<HandlerMapper> mappers) {\n+\t\tDispatcher dispatcher = new Dispatcher(AccessManager.PERMIT_ALL, mappers);\n+\t\treturn new DispatcherFilter(dispatcher);\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.developertools.autoconfigure;\n\nimport java.util.Collection;\n\nimport javax.servlet.Filter;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.developertools.remote.server.AccessManager;\nimport org.springframework.boot.developertools.remote.server.Dispatcher;\nimport org.springframework.boot.developertools.remote.server.DispatcherFilter;\nimport org.springframework.boot.developertools.remote.server.Handler;\nimport org.springframework.boot.developertools.remote.server.HandlerMapper;\nimport org.springframework.boot.developertools.remote.server.HttpStatusHandler;\nimport org.springframework.boot.developertools.remote.server.UrlHandlerMapper;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.server.ServerHttpRequest;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for remote development support.\n *\n * @author Phillip Webb\n * @author Rob Winch\n * @since 1.3.0\n */\n@Configuration\n@ConditionalOnProperty(prefix = "spring.developertools.remote", name = "enabled")\n@ConditionalOnClass({ Filter.class, ServerHttpRequest.class })\n@EnableConfigurationProperties(DeveloperToolsProperties.class)\npublic class RemoteDeveloperToolsAutoConfiguration {\n\n\t@Autowired\n\tprivate DeveloperToolsProperties properties;\n\n\t@Bean\n\tpublic HandlerMapper remoteDeveloperToolsHealthCheckHandlerMapper() {\n\t\tHandler handler = new HttpStatusHandler();\n\t\treturn new UrlHandlerMapper(this.properties.getRemote().getContextPath(), handler);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic DispatcherFilter remoteDeveloperToolsDispatcherFilter(\n\t\t\tCollection<HandlerMapper> mappers) {\n\t\tDispatcher dispatcher = new Dispatcher(AccessManager.PERMIT_ALL, mappers);\n\t\treturn new DispatcherFilter(dispatcher);\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
