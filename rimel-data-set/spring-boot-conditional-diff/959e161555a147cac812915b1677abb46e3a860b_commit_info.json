{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/ServletWebServerFactoryAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/ServletWebServerFactoryAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,6 +16,7 @@\n \n package org.springframework.boot.autoconfigure.web.servlet;\n \n+import javax.servlet.DispatcherType;\n import javax.servlet.ServletRequest;\n \n import org.springframework.beans.BeansException;\n@@ -27,12 +28,14 @@ import org.springframework.beans.factory.support.RootBeanDefinition;\n import org.springframework.boot.autoconfigure.AutoConfigureOrder;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\n import org.springframework.boot.autoconfigure.web.ServerProperties;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.boot.web.server.ErrorPageRegistrarBeanPostProcessor;\n import org.springframework.boot.web.server.WebServerFactoryCustomizerBeanPostProcessor;\n+import org.springframework.boot.web.servlet.FilterRegistrationBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Import;\n@@ -40,6 +43,7 @@ import org.springframework.context.annotation.ImportBeanDefinitionRegistrar;\n import org.springframework.core.Ordered;\n import org.springframework.core.type.AnnotationMetadata;\n import org.springframework.util.ObjectUtils;\n+import org.springframework.web.filter.ForwardedHeaderFilter;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for servlet web servers.\n@@ -74,6 +78,19 @@ public class ServletWebServerFactoryAutoConfiguration {\n \t\treturn new TomcatServletWebServerFactoryCustomizer(serverProperties);\n \t}\n \n+\t@Bean\n+\t@ConditionalOnProperty(value = "server.forward-headers-strategy",\n+\t\t\thavingValue = "framework")\n+\tpublic FilterRegistrationBean<ForwardedHeaderFilter> forwardedHeaderFilter() {\n+\t\tForwardedHeaderFilter filter = new ForwardedHeaderFilter();\n+\t\tFilterRegistrationBean<ForwardedHeaderFilter> registration = new FilterRegistrationBean<>(\n+\t\t\t\tfilter);\n+\t\tregistration.setDispatcherTypes(DispatcherType.REQUEST, DispatcherType.ASYNC,\n+\t\t\t\tDispatcherType.ERROR);\n+\t\tregistration.setOrder(Ordered.HIGHEST_PRECEDENCE);\n+\t\treturn registration;\n+\t}\n+\n \t/**\n \t * Registers a {@link WebServerFactoryCustomizerBeanPostProcessor}. Registered via\n \t * {@link ImportBeanDefinitionRegistrar} for early registration.\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web.servlet;\n\nimport javax.servlet.DispatcherType;\nimport javax.servlet.ServletRequest;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistry;\nimport org.springframework.beans.factory.support.RootBeanDefinition;\nimport org.springframework.boot.autoconfigure.AutoConfigureOrder;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.autoconfigure.web.ServerProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.web.server.ErrorPageRegistrarBeanPostProcessor;\nimport org.springframework.boot.web.server.WebServerFactoryCustomizerBeanPostProcessor;\nimport org.springframework.boot.web.servlet.FilterRegistrationBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.ImportBeanDefinitionRegistrar;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.type.AnnotationMetadata;\nimport org.springframework.util.ObjectUtils;\nimport org.springframework.web.filter.ForwardedHeaderFilter;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for servlet web servers.\n *\n * @author Phillip Webb\n * @author Dave Syer\n * @author Ivan Sopov\n * @author Brian Clozel\n * @author Stephane Nicoll\n */\n@Configuration(proxyBeanMethods = false)\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)\n@ConditionalOnClass(ServletRequest.class)\n@ConditionalOnWebApplication(type = Type.SERVLET)\n@EnableConfigurationProperties(ServerProperties.class)\n@Import({ ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar.class,\n\t\tServletWebServerFactoryConfiguration.EmbeddedTomcat.class,\n\t\tServletWebServerFactoryConfiguration.EmbeddedJetty.class,\n\t\tServletWebServerFactoryConfiguration.EmbeddedUndertow.class })\npublic class ServletWebServerFactoryAutoConfiguration {\n\n\t@Bean\n\tpublic ServletWebServerFactoryCustomizer servletWebServerFactoryCustomizer(\n\t\t\tServerProperties serverProperties) {\n\t\treturn new ServletWebServerFactoryCustomizer(serverProperties);\n\t}\n\n\t@Bean\n\t@ConditionalOnClass(name = "org.apache.catalina.startup.Tomcat")\n\tpublic TomcatServletWebServerFactoryCustomizer tomcatServletWebServerFactoryCustomizer(\n\t\t\tServerProperties serverProperties) {\n\t\treturn new TomcatServletWebServerFactoryCustomizer(serverProperties);\n\t}\n\n\t@Bean\n\t@ConditionalOnProperty(value = "server.forward-headers-strategy",\n\t\t\thavingValue = "framework")\n\tpublic FilterRegistrationBean<ForwardedHeaderFilter> forwardedHeaderFilter() {\n\t\tForwardedHeaderFilter filter = new ForwardedHeaderFilter();\n\t\tFilterRegistrationBean<ForwardedHeaderFilter> registration = new FilterRegistrationBean<>(\n\t\t\t\tfilter);\n\t\tregistration.setDispatcherTypes(DispatcherType.REQUEST, DispatcherType.ASYNC,\n\t\t\t\tDispatcherType.ERROR);\n\t\tregistration.setOrder(Ordered.HIGHEST_PRECEDENCE);\n\t\treturn registration;\n\t}\n\n\t/**\n\t * Registers a {@link WebServerFactoryCustomizerBeanPostProcessor}. Registered via\n\t * {@link ImportBeanDefinitionRegistrar} for early registration.\n\t */\n\tpublic static class BeanPostProcessorsRegistrar\n\t\t\timplements ImportBeanDefinitionRegistrar, BeanFactoryAware {\n\n\t\tprivate ConfigurableListableBeanFactory beanFactory;\n\n\t\t@Override\n\t\tpublic void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n\t\t\tif (beanFactory instanceof ConfigurableListableBeanFactory) {\n\t\t\t\tthis.beanFactory = (ConfigurableListableBeanFactory) beanFactory;\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void registerBeanDefinitions(AnnotationMetadata importingClassMetadata,\n\t\t\t\tBeanDefinitionRegistry registry) {\n\t\t\tif (this.beanFactory == null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tregisterSyntheticBeanIfMissing(registry,\n\t\t\t\t\t"webServerFactoryCustomizerBeanPostProcessor",\n\t\t\t\t\tWebServerFactoryCustomizerBeanPostProcessor.class);\n\t\t\tregisterSyntheticBeanIfMissing(registry,\n\t\t\t\t\t"errorPageRegistrarBeanPostProcessor",\n\t\t\t\t\tErrorPageRegistrarBeanPostProcessor.class);\n\t\t}\n\n\t\tprivate void registerSyntheticBeanIfMissing(BeanDefinitionRegistry registry,\n\t\t\t\tString name, Class<?> beanClass) {\n\t\t\tif (ObjectUtils.isEmpty(\n\t\t\t\t\tthis.beanFactory.getBeanNamesForType(beanClass, true, false))) {\n\t\t\t\tRootBeanDefinition beanDefinition = new RootBeanDefinition(beanClass);\n\t\t\t\tbeanDefinition.setSynthetic(true);\n\t\t\t\tregistry.registerBeanDefinition(name, beanDefinition);\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web.servlet;\n\nimport javax.servlet.ServletRequest;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistry;\nimport org.springframework.beans.factory.support.RootBeanDefinition;\nimport org.springframework.boot.autoconfigure.AutoConfigureOrder;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.autoconfigure.web.ServerProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.web.server.ErrorPageRegistrarBeanPostProcessor;\nimport org.springframework.boot.web.server.WebServerFactoryCustomizerBeanPostProcessor;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.ImportBeanDefinitionRegistrar;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.type.AnnotationMetadata;\nimport org.springframework.util.ObjectUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for servlet web servers.\n *\n * @author Phillip Webb\n * @author Dave Syer\n * @author Ivan Sopov\n * @author Brian Clozel\n * @author Stephane Nicoll\n */\n@Configuration(proxyBeanMethods = false)\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)\n@ConditionalOnClass(ServletRequest.class)\n@ConditionalOnWebApplication(type = Type.SERVLET)\n@EnableConfigurationProperties(ServerProperties.class)\n@Import({ ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar.class,\n\t\tServletWebServerFactoryConfiguration.EmbeddedTomcat.class,\n\t\tServletWebServerFactoryConfiguration.EmbeddedJetty.class,\n\t\tServletWebServerFactoryConfiguration.EmbeddedUndertow.class })\npublic class ServletWebServerFactoryAutoConfiguration {\n\n\t@Bean\n\tpublic ServletWebServerFactoryCustomizer servletWebServerFactoryCustomizer(\n\t\t\tServerProperties serverProperties) {\n\t\treturn new ServletWebServerFactoryCustomizer(serverProperties);\n\t}\n\n\t@Bean\n\t@ConditionalOnClass(name = "org.apache.catalina.startup.Tomcat")\n\tpublic TomcatServletWebServerFactoryCustomizer tomcatServletWebServerFactoryCustomizer(\n\t\t\tServerProperties serverProperties) {\n\t\treturn new TomcatServletWebServerFactoryCustomizer(serverProperties);\n\t}\n\n\t/**\n\t * Registers a {@link WebServerFactoryCustomizerBeanPostProcessor}. Registered via\n\t * {@link ImportBeanDefinitionRegistrar} for early registration.\n\t */\n\tpublic static class BeanPostProcessorsRegistrar\n\t\t\timplements ImportBeanDefinitionRegistrar, BeanFactoryAware {\n\n\t\tprivate ConfigurableListableBeanFactory beanFactory;\n\n\t\t@Override\n\t\tpublic void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n\t\t\tif (beanFactory instanceof ConfigurableListableBeanFactory) {\n\t\t\t\tthis.beanFactory = (ConfigurableListableBeanFactory) beanFactory;\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void registerBeanDefinitions(AnnotationMetadata importingClassMetadata,\n\t\t\t\tBeanDefinitionRegistry registry) {\n\t\t\tif (this.beanFactory == null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tregisterSyntheticBeanIfMissing(registry,\n\t\t\t\t\t"webServerFactoryCustomizerBeanPostProcessor",\n\t\t\t\t\tWebServerFactoryCustomizerBeanPostProcessor.class);\n\t\t\tregisterSyntheticBeanIfMissing(registry,\n\t\t\t\t\t"errorPageRegistrarBeanPostProcessor",\n\t\t\t\t\tErrorPageRegistrarBeanPostProcessor.class);\n\t\t}\n\n\t\tprivate void registerSyntheticBeanIfMissing(BeanDefinitionRegistry registry,\n\t\t\t\tString name, Class<?> beanClass) {\n\t\t\tif (ObjectUtils.isEmpty(\n\t\t\t\t\tthis.beanFactory.getBeanNamesForType(beanClass, true, false))) {\n\t\t\t\tRootBeanDefinition beanDefinition = new RootBeanDefinition(beanClass);\n\t\t\t\tbeanDefinition.setSynthetic(true);\n\t\t\t\tregistry.registerBeanDefinition(name, beanDefinition);\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
