{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2015 the original author or authors.\n+ * Copyright 2012-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -33,6 +33,7 @@ import org.springframework.boot.context.properties.EnableConfigurationProperties\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;\n+import org.springframework.security.config.http.SessionCreationPolicy;\n import org.springframework.security.web.context.AbstractSecurityWebApplicationInitializer;\n \n /**\n@@ -49,7 +50,8 @@ import org.springframework.security.web.context.AbstractSecurityWebApplicationIn\n @Configuration\n @ConditionalOnWebApplication\n @EnableConfigurationProperties\n-@ConditionalOnClass(AbstractSecurityWebApplicationInitializer.class)\n+@ConditionalOnClass({ AbstractSecurityWebApplicationInitializer.class,\n+\t\tSessionCreationPolicy.class })\n @AutoConfigureAfter(SpringBootWebSecurityConfiguration.class)\n public class SecurityFilterAutoConfiguration {\n \n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security;\n\nimport java.util.EnumSet;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport javax.servlet.DispatcherType;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.context.embedded.DelegatingFilterProxyRegistrationBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.web.context.AbstractSecurityWebApplicationInitializer;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Security\'s Filter.\n * Configured separately from {@link SpringBootWebSecurityConfiguration} to ensure that\n * the filter\'s order is still configured when a user-provided\n * {@link WebSecurityConfiguration} exists.\n *\n * @author Rob Winch\n * @author Phillip Webb\n * @author Andy Wilkinson\n * @since 1.3\n */\n@Configuration\n@ConditionalOnWebApplication\n@EnableConfigurationProperties\n@ConditionalOnClass({ AbstractSecurityWebApplicationInitializer.class,\n\t\tSessionCreationPolicy.class })\n@AutoConfigureAfter(SpringBootWebSecurityConfiguration.class)\npublic class SecurityFilterAutoConfiguration {\n\n\tprivate static final String DEFAULT_FILTER_NAME = AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME;\n\n\t@Bean\n\t@ConditionalOnBean(name = DEFAULT_FILTER_NAME)\n\tpublic DelegatingFilterProxyRegistrationBean securityFilterChainRegistration(\n\t\t\tSecurityProperties securityProperties) {\n\t\tDelegatingFilterProxyRegistrationBean registration = new DelegatingFilterProxyRegistrationBean(\n\t\t\t\tDEFAULT_FILTER_NAME);\n\t\tregistration.setOrder(securityProperties.getFilterOrder());\n\t\tregistration.setDispatcherTypes(getDispatcherTypes(securityProperties));\n\t\treturn registration;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic SecurityProperties securityProperties() {\n\t\treturn new SecurityProperties();\n\t}\n\n\tprivate EnumSet<DispatcherType> getDispatcherTypes(\n\t\t\tSecurityProperties securityProperties) {\n\t\tif (securityProperties.getFilterDispatcherTypes() == null) {\n\t\t\treturn null;\n\t\t}\n\t\tSet<DispatcherType> dispatcherTypes = new HashSet<DispatcherType>();\n\t\tfor (String dispatcherType : securityProperties.getFilterDispatcherTypes()) {\n\t\t\tdispatcherTypes.add(DispatcherType.valueOf(dispatcherType));\n\t\t}\n\t\treturn EnumSet.copyOf(dispatcherTypes);\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security;\n\nimport java.util.EnumSet;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport javax.servlet.DispatcherType;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.context.embedded.DelegatingFilterProxyRegistrationBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;\nimport org.springframework.security.web.context.AbstractSecurityWebApplicationInitializer;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Security\'s Filter.\n * Configured separately from {@link SpringBootWebSecurityConfiguration} to ensure that\n * the filter\'s order is still configured when a user-provided\n * {@link WebSecurityConfiguration} exists.\n *\n * @author Rob Winch\n * @author Phillip Webb\n * @author Andy Wilkinson\n * @since 1.3\n */\n@Configuration\n@ConditionalOnWebApplication\n@EnableConfigurationProperties\n@ConditionalOnClass(AbstractSecurityWebApplicationInitializer.class)\n@AutoConfigureAfter(SpringBootWebSecurityConfiguration.class)\npublic class SecurityFilterAutoConfiguration {\n\n\tprivate static final String DEFAULT_FILTER_NAME = AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME;\n\n\t@Bean\n\t@ConditionalOnBean(name = DEFAULT_FILTER_NAME)\n\tpublic DelegatingFilterProxyRegistrationBean securityFilterChainRegistration(\n\t\t\tSecurityProperties securityProperties) {\n\t\tDelegatingFilterProxyRegistrationBean registration = new DelegatingFilterProxyRegistrationBean(\n\t\t\t\tDEFAULT_FILTER_NAME);\n\t\tregistration.setOrder(securityProperties.getFilterOrder());\n\t\tregistration.setDispatcherTypes(getDispatcherTypes(securityProperties));\n\t\treturn registration;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic SecurityProperties securityProperties() {\n\t\treturn new SecurityProperties();\n\t}\n\n\tprivate EnumSet<DispatcherType> getDispatcherTypes(\n\t\t\tSecurityProperties securityProperties) {\n\t\tif (securityProperties.getFilterDispatcherTypes() == null) {\n\t\t\treturn null;\n\t\t}\n\t\tSet<DispatcherType> dispatcherTypes = new HashSet<DispatcherType>();\n\t\tfor (String dispatcherType : securityProperties.getFilterDispatcherTypes()) {\n\t\t\tdispatcherTypes.add(DispatcherType.valueOf(dispatcherType));\n\t\t}\n\t\treturn EnumSet.copyOf(dispatcherTypes);\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
