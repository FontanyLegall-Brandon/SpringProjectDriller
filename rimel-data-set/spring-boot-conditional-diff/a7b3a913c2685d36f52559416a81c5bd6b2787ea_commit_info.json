{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ws/WsAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2012-2016 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.ws;\n+\n+import java.util.Map;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration;\n+import org.springframework.boot.context.embedded.ServletRegistrationBean;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.ws.config.annotation.DelegatingWsConfiguration;\n+import org.springframework.ws.config.annotation.WsConfigurationSupport;\n+import org.springframework.ws.transport.http.MessageDispatcherServlet;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for Spring Web Services.\n+ *\n+ * @author Vedran Pavic\n+ * @since 1.4.0\n+ */\n+@Configuration\n+@ConditionalOnWebApplication\n+@ConditionalOnClass(MessageDispatcherServlet.class)\n+@ConditionalOnMissingBean(WsConfigurationSupport.class)\n+@EnableConfigurationProperties(WsProperties.class)\n+@AutoConfigureAfter(EmbeddedServletContainerAutoConfiguration.class)\n+public class WsAutoConfiguration {\n+\n+\tprivate WsProperties properties;\n+\n+\tpublic WsAutoConfiguration(WsProperties properties) {\n+\t\tthis.properties = properties;\n+\t}\n+\n+\t@Bean\n+\tpublic ServletRegistrationBean messageDispatcherServlet(\n+\t\t\tApplicationContext applicationContext) {\n+\t\tMessageDispatcherServlet servlet = new MessageDispatcherServlet();\n+\t\tservlet.setApplicationContext(applicationContext);\n+\t\tString path = this.properties.getPath();\n+\t\tString urlMapping = (path.endsWith("/") ? path + "*" : path + "/*");\n+\t\tServletRegistrationBean registration = new ServletRegistrationBean(\n+\t\t\t\tservlet, urlMapping);\n+\t\tregistration.setLoadOnStartup(this.properties.getServlet().getLoadOnStartup());\n+\t\tfor (Map.Entry<String, String> entry : this.properties.getInit().entrySet()) {\n+\t\t\tregistration.addInitParameter(entry.getKey(), entry.getValue());\n+\t\t}\n+\t\treturn registration;\n+\t}\n+\n+\t@Configuration\n+\t@Import(DelegatingWsConfiguration.class)\n+\tprotected static class WsConfiguration {\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.ws;\n\nimport java.util.Map;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration;\nimport org.springframework.boot.context.embedded.ServletRegistrationBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.ws.config.annotation.DelegatingWsConfiguration;\nimport org.springframework.ws.config.annotation.WsConfigurationSupport;\nimport org.springframework.ws.transport.http.MessageDispatcherServlet;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Web Services.\n *\n * @author Vedran Pavic\n * @since 1.4.0\n */\n@Configuration\n@ConditionalOnWebApplication\n@ConditionalOnClass(MessageDispatcherServlet.class)\n@ConditionalOnMissingBean(WsConfigurationSupport.class)\n@EnableConfigurationProperties(WsProperties.class)\n@AutoConfigureAfter(EmbeddedServletContainerAutoConfiguration.class)\npublic class WsAutoConfiguration {\n\n\tprivate WsProperties properties;\n\n\tpublic WsAutoConfiguration(WsProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\tpublic ServletRegistrationBean messageDispatcherServlet(\n\t\t\tApplicationContext applicationContext) {\n\t\tMessageDispatcherServlet servlet = new MessageDispatcherServlet();\n\t\tservlet.setApplicationContext(applicationContext);\n\t\tString path = this.properties.getPath();\n\t\tString urlMapping = (path.endsWith("/") ? path + "*" : path + "/*");\n\t\tServletRegistrationBean registration = new ServletRegistrationBean(\n\t\t\t\tservlet, urlMapping);\n\t\tregistration.setLoadOnStartup(this.properties.getServlet().getLoadOnStartup());\n\t\tfor (Map.Entry<String, String> entry : this.properties.getInit().entrySet()) {\n\t\t\tregistration.addInitParameter(entry.getKey(), entry.getValue());\n\t\t}\n\t\treturn registration;\n\t}\n\n\t@Configuration\n\t@Import(DelegatingWsConfiguration.class)\n\tprotected static class WsConfiguration {\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
