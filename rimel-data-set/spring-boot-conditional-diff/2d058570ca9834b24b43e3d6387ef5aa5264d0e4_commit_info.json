{'_old_path': None, '_new_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/JolokiaAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2013 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.autoconfigure;\n+\n+import java.util.Map;\n+\n+import org.jolokia.http.AgentServlet;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.actuate.endpoint.JolokiaEndpoint;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration;\n+import org.springframework.boot.bind.RelaxedPropertyResolver;\n+import org.springframework.boot.context.embedded.EmbeddedServletContainerFactory;\n+import org.springframework.boot.context.embedded.ServletRegistrationBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for embedding Jolokia, a JMX-HTTP\n+ * bridge giving an alternative to JSR-160 connectors.\n+ * \n+ * <p>\n+ * This configuration will get automatically enabled as soon as the Jolokia\n+ * {@link AgentServlet} is on the classpath. To disable set\n+ * <code>endpoints.jolokia.enabled: false</code>.\n+ * \n+ * <p>\n+ * Additional configuration parameters for Jolokia can be provided by specifying\n+ * <code>jolokia.config. ...</code> properties. See the <a\n+ * href="http://jolokia.org">http://jolokia.org</a> web site for more information on\n+ * supported configuration parameters.\n+ * \n+ * @author Christian Dupuis\n+ */\n+@Configuration\n+@ConditionalOnWebApplication\n+@ConditionalOnClass({ AgentServlet.class })\n+@ConditionalOnBean(EmbeddedServletContainerFactory.class)\n+@AutoConfigureBefore(ManagementSecurityAutoConfiguration.class)\n+@AutoConfigureAfter(EmbeddedServletContainerAutoConfiguration.class)\n+@ConditionalOnExpression("${endpoints.jolokia.enabled:true}")\n+public class JolokiaAutoConfiguration {\n+\n+\tprivate RelaxedPropertyResolver environment;\n+\n+\t@Autowired\n+\tpublic void setEnvironment(Environment environment) {\n+\t\tthis.environment = new RelaxedPropertyResolver(environment);\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean({ AgentServlet.class })\n+\tpublic AgentServlet jolokiaServlet() {\n+\t\treturn new AgentServlet();\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean()\n+\tpublic ServletRegistrationBean jolokiaServletRegistration() {\n+\t\tServletRegistrationBean registrationBean = new ServletRegistrationBean(\n+\t\t\t\tjolokiaServlet(), this.environment.getProperty("endpoints.jolokia.path",\n+\t\t\t\t\t\t"/jolokia") + "/*");\n+\t\taddInitParameters(registrationBean);\n+\t\treturn registrationBean;\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic JolokiaEndpoint jolokiaEndpoint() {\n+\t\treturn new JolokiaEndpoint();\n+\t}\n+\n+\tprotected void addInitParameters(ServletRegistrationBean registrationBean) {\n+\t\tMap<String, Object> configParameters = this.environment\n+\t\t\t\t.getSubProperties("jolokia.config.");\n+\t\tfor (Map.Entry<String, Object> configParameter : configParameters.entrySet()) {\n+\t\t\tregistrationBean.addInitParameter(configParameter.getKey(), configParameter\n+\t\t\t\t\t.getValue().toString());\n+\t\t}\n+\t}\n+}\n', 'source_code': '/*\n * Copyright 2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport java.util.Map;\n\nimport org.jolokia.http.AgentServlet;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuate.endpoint.JolokiaEndpoint;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration;\nimport org.springframework.boot.bind.RelaxedPropertyResolver;\nimport org.springframework.boot.context.embedded.EmbeddedServletContainerFactory;\nimport org.springframework.boot.context.embedded.ServletRegistrationBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for embedding Jolokia, a JMX-HTTP\n * bridge giving an alternative to JSR-160 connectors.\n * \n * <p>\n * This configuration will get automatically enabled as soon as the Jolokia\n * {@link AgentServlet} is on the classpath. To disable set\n * <code>endpoints.jolokia.enabled: false</code>.\n * \n * <p>\n * Additional configuration parameters for Jolokia can be provided by specifying\n * <code>jolokia.config. ...</code> properties. See the <a\n * href="http://jolokia.org">http://jolokia.org</a> web site for more information on\n * supported configuration parameters.\n * \n * @author Christian Dupuis\n */\n@Configuration\n@ConditionalOnWebApplication\n@ConditionalOnClass({ AgentServlet.class })\n@ConditionalOnBean(EmbeddedServletContainerFactory.class)\n@AutoConfigureBefore(ManagementSecurityAutoConfiguration.class)\n@AutoConfigureAfter(EmbeddedServletContainerAutoConfiguration.class)\n@ConditionalOnExpression("${endpoints.jolokia.enabled:true}")\npublic class JolokiaAutoConfiguration {\n\n\tprivate RelaxedPropertyResolver environment;\n\n\t@Autowired\n\tpublic void setEnvironment(Environment environment) {\n\t\tthis.environment = new RelaxedPropertyResolver(environment);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean({ AgentServlet.class })\n\tpublic AgentServlet jolokiaServlet() {\n\t\treturn new AgentServlet();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean()\n\tpublic ServletRegistrationBean jolokiaServletRegistration() {\n\t\tServletRegistrationBean registrationBean = new ServletRegistrationBean(\n\t\t\t\tjolokiaServlet(), this.environment.getProperty("endpoints.jolokia.path",\n\t\t\t\t\t\t"/jolokia") + "/*");\n\t\taddInitParameters(registrationBean);\n\t\treturn registrationBean;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic JolokiaEndpoint jolokiaEndpoint() {\n\t\treturn new JolokiaEndpoint();\n\t}\n\n\tprotected void addInitParameters(ServletRegistrationBean registrationBean) {\n\t\tMap<String, Object> configParameters = this.environment\n\t\t\t\t.getSubProperties("jolokia.config.");\n\t\tfor (Map.Entry<String, Object> configParameter : configParameters.entrySet()) {\n\t\t\tregistrationBean.addInitParameter(configParameter.getKey(), configParameter\n\t\t\t\t\t.getValue().toString());\n\t\t}\n\t}\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
