{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/ResourceServerTokenServicesConfiguration.java'), '_new_path': None, 'change_type': <ModificationType.DELETE: 4>, 'diff': '@@ -1,443 +0,0 @@\n-/*\n- * Copyright 2012-2017 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the "License");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an "AS IS" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.boot.autoconfigure.security.oauth2.resource;\n-\n-import java.io.IOException;\n-import java.util.Arrays;\n-import java.util.Base64;\n-import java.util.List;\n-import java.util.Map;\n-\n-import org.springframework.beans.factory.ObjectProvider;\n-import org.springframework.boot.autoconfigure.condition.ConditionMessage;\n-import org.springframework.boot.autoconfigure.condition.ConditionOutcome;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;\n-import org.springframework.boot.autoconfigure.condition.NoneNestedConditions;\n-import org.springframework.boot.autoconfigure.condition.SpringBootCondition;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.ConditionContext;\n-import org.springframework.context.annotation.Conditional;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.core.annotation.AnnotationAwareOrderComparator;\n-import org.springframework.core.env.Environment;\n-import org.springframework.core.type.AnnotatedTypeMetadata;\n-import org.springframework.http.HttpEntity;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpMethod;\n-import org.springframework.http.HttpRequest;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.client.ClientHttpRequestExecution;\n-import org.springframework.http.client.ClientHttpRequestInterceptor;\n-import org.springframework.http.client.ClientHttpResponse;\n-import org.springframework.security.oauth2.client.OAuth2ClientContext;\n-import org.springframework.security.oauth2.client.OAuth2RestOperations;\n-import org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails;\n-import org.springframework.security.oauth2.client.token.AccessTokenRequest;\n-import org.springframework.security.oauth2.client.token.RequestEnhancer;\n-import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration;\n-import org.springframework.security.oauth2.provider.token.DefaultTokenServices;\n-import org.springframework.security.oauth2.provider.token.RemoteTokenServices;\n-import org.springframework.security.oauth2.provider.token.ResourceServerTokenServices;\n-import org.springframework.security.oauth2.provider.token.TokenStore;\n-import org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;\n-import org.springframework.security.oauth2.provider.token.store.JwtTokenStore;\n-import org.springframework.security.oauth2.provider.token.store.jwk.JwkTokenStore;\n-import org.springframework.social.connect.ConnectionFactoryLocator;\n-import org.springframework.social.connect.support.OAuth2ConnectionFactory;\n-import org.springframework.util.CollectionUtils;\n-import org.springframework.util.MultiValueMap;\n-import org.springframework.util.StringUtils;\n-import org.springframework.web.client.RestTemplate;\n-\n-/**\n- * Configuration for an OAuth2 resource server.\n- *\n- * @author Dave Syer\n- * @author Madhura Bhave\n- * @author Eddú Meléndez\n- * @since 1.3.0\n- */\n-@Configuration\n-@ConditionalOnMissingBean(AuthorizationServerEndpointsConfiguration.class)\n-public class ResourceServerTokenServicesConfiguration {\n-\n-\t@Bean\n-\t@ConditionalOnMissingBean\n-\tpublic UserInfoRestTemplateFactory userInfoRestTemplateFactory(\n-\t\t\tObjectProvider<List<UserInfoRestTemplateCustomizer>> customizers,\n-\t\t\tObjectProvider<OAuth2ProtectedResourceDetails> details,\n-\t\t\tObjectProvider<OAuth2ClientContext> oauth2ClientContext) {\n-\t\treturn new DefaultUserInfoRestTemplateFactory(customizers, details,\n-\t\t\t\toauth2ClientContext);\n-\t}\n-\n-\t@Configuration\n-\t@Conditional(RemoteTokenCondition.class)\n-\tprotected static class RemoteTokenServicesConfiguration {\n-\n-\t\t@Configuration\n-\t\t@Conditional(TokenInfoCondition.class)\n-\t\tprotected static class TokenInfoServicesConfiguration {\n-\n-\t\t\tprivate final ResourceServerProperties resource;\n-\n-\t\t\tprotected TokenInfoServicesConfiguration(ResourceServerProperties resource) {\n-\t\t\t\tthis.resource = resource;\n-\t\t\t}\n-\n-\t\t\t@Bean\n-\t\t\tpublic RemoteTokenServices remoteTokenServices() {\n-\t\t\t\tRemoteTokenServices services = new RemoteTokenServices();\n-\t\t\t\tservices.setCheckTokenEndpointUrl(this.resource.getTokenInfoUri());\n-\t\t\t\tservices.setClientId(this.resource.getClientId());\n-\t\t\t\tservices.setClientSecret(this.resource.getClientSecret());\n-\t\t\t\treturn services;\n-\t\t\t}\n-\n-\t\t}\n-\n-\t\t@Configuration\n-\t\t@ConditionalOnClass(OAuth2ConnectionFactory.class)\n-\t\t@Conditional(NotTokenInfoCondition.class)\n-\t\tprotected static class SocialTokenServicesConfiguration {\n-\n-\t\t\tprivate final ResourceServerProperties sso;\n-\n-\t\t\tprivate final OAuth2ConnectionFactory<?> connectionFactory;\n-\n-\t\t\tprivate final OAuth2RestOperations restTemplate;\n-\n-\t\t\tprivate final AuthoritiesExtractor authoritiesExtractor;\n-\n-\t\t\tprivate final PrincipalExtractor principalExtractor;\n-\n-\t\t\tpublic SocialTokenServicesConfiguration(ResourceServerProperties sso,\n-\t\t\t\t\tObjectProvider<OAuth2ConnectionFactory<?>> connectionFactory,\n-\t\t\t\t\tUserInfoRestTemplateFactory restTemplateFactory,\n-\t\t\t\t\tObjectProvider<AuthoritiesExtractor> authoritiesExtractor,\n-\t\t\t\t\tObjectProvider<PrincipalExtractor> principalExtractor) {\n-\t\t\t\tthis.sso = sso;\n-\t\t\t\tthis.connectionFactory = connectionFactory.getIfAvailable();\n-\t\t\t\tthis.restTemplate = restTemplateFactory.getUserInfoRestTemplate();\n-\t\t\t\tthis.authoritiesExtractor = authoritiesExtractor.getIfAvailable();\n-\t\t\t\tthis.principalExtractor = principalExtractor.getIfAvailable();\n-\t\t\t}\n-\n-\t\t\t@Bean\n-\t\t\t@ConditionalOnBean(ConnectionFactoryLocator.class)\n-\t\t\t@ConditionalOnMissingBean(ResourceServerTokenServices.class)\n-\t\t\tpublic SpringSocialTokenServices socialTokenServices() {\n-\t\t\t\treturn new SpringSocialTokenServices(this.connectionFactory,\n-\t\t\t\t\t\tthis.sso.getClientId());\n-\t\t\t}\n-\n-\t\t\t@Bean\n-\t\t\t@ConditionalOnMissingBean({ ConnectionFactoryLocator.class,\n-\t\t\t\t\tResourceServerTokenServices.class })\n-\t\t\tpublic UserInfoTokenServices userInfoTokenServices() {\n-\t\t\t\tUserInfoTokenServices services = new UserInfoTokenServices(\n-\t\t\t\t\t\tthis.sso.getUserInfoUri(), this.sso.getClientId());\n-\t\t\t\tservices.setTokenType(this.sso.getTokenType());\n-\t\t\t\tservices.setRestTemplate(this.restTemplate);\n-\t\t\t\tif (this.authoritiesExtractor != null) {\n-\t\t\t\t\tservices.setAuthoritiesExtractor(this.authoritiesExtractor);\n-\t\t\t\t}\n-\t\t\t\tif (this.principalExtractor != null) {\n-\t\t\t\t\tservices.setPrincipalExtractor(this.principalExtractor);\n-\t\t\t\t}\n-\t\t\t\treturn services;\n-\t\t\t}\n-\n-\t\t}\n-\n-\t\t@Configuration\n-\t\t@ConditionalOnMissingClass("org.springframework.social.connect.support.OAuth2ConnectionFactory")\n-\t\t@Conditional(NotTokenInfoCondition.class)\n-\t\tprotected static class UserInfoTokenServicesConfiguration {\n-\n-\t\t\tprivate final ResourceServerProperties sso;\n-\n-\t\t\tprivate final OAuth2RestOperations restTemplate;\n-\n-\t\t\tprivate final AuthoritiesExtractor authoritiesExtractor;\n-\n-\t\t\tprivate final PrincipalExtractor principalExtractor;\n-\n-\t\t\tpublic UserInfoTokenServicesConfiguration(ResourceServerProperties sso,\n-\t\t\t\t\tUserInfoRestTemplateFactory restTemplateFactory,\n-\t\t\t\t\tObjectProvider<AuthoritiesExtractor> authoritiesExtractor,\n-\t\t\t\t\tObjectProvider<PrincipalExtractor> principalExtractor) {\n-\t\t\t\tthis.sso = sso;\n-\t\t\t\tthis.restTemplate = restTemplateFactory.getUserInfoRestTemplate();\n-\t\t\t\tthis.authoritiesExtractor = authoritiesExtractor.getIfAvailable();\n-\t\t\t\tthis.principalExtractor = principalExtractor.getIfAvailable();\n-\t\t\t}\n-\n-\t\t\t@Bean\n-\t\t\t@ConditionalOnMissingBean(ResourceServerTokenServices.class)\n-\t\t\tpublic UserInfoTokenServices userInfoTokenServices() {\n-\t\t\t\tUserInfoTokenServices services = new UserInfoTokenServices(\n-\t\t\t\t\t\tthis.sso.getUserInfoUri(), this.sso.getClientId());\n-\t\t\t\tservices.setRestTemplate(this.restTemplate);\n-\t\t\t\tservices.setTokenType(this.sso.getTokenType());\n-\t\t\t\tif (this.authoritiesExtractor != null) {\n-\t\t\t\t\tservices.setAuthoritiesExtractor(this.authoritiesExtractor);\n-\t\t\t\t}\n-\t\t\t\tif (this.principalExtractor != null) {\n-\t\t\t\t\tservices.setPrincipalExtractor(this.principalExtractor);\n-\t\t\t\t}\n-\t\t\t\treturn services;\n-\t\t\t}\n-\n-\t\t}\n-\n-\t}\n-\n-\t@Configuration\n-\t@Conditional(JwkCondition.class)\n-\tprotected static class JwkTokenStoreConfiguration {\n-\n-\t\tprivate final ResourceServerProperties resource;\n-\n-\t\tpublic JwkTokenStoreConfiguration(ResourceServerProperties resource) {\n-\t\t\tthis.resource = resource;\n-\t\t}\n-\n-\t\t@Bean\n-\t\t@ConditionalOnMissingBean(ResourceServerTokenServices.class)\n-\t\tpublic DefaultTokenServices jwkTokenServices(TokenStore jwkTokenStore) {\n-\t\t\tDefaultTokenServices services = new DefaultTokenServices();\n-\t\t\tservices.setTokenStore(jwkTokenStore);\n-\t\t\treturn services;\n-\t\t}\n-\n-\t\t@Bean\n-\t\t@ConditionalOnMissingBean(TokenStore.class)\n-\t\tpublic TokenStore jwkTokenStore() {\n-\t\t\treturn new JwkTokenStore(this.resource.getJwk().getKeySetUri());\n-\t\t}\n-\t}\n-\n-\t@Configuration\n-\t@Conditional(JwtTokenCondition.class)\n-\tprotected static class JwtTokenServicesConfiguration {\n-\n-\t\tprivate final ResourceServerProperties resource;\n-\n-\t\tprivate final List<JwtAccessTokenConverterConfigurer> configurers;\n-\n-\t\tprivate final List<JwtAccessTokenConverterRestTemplateCustomizer> customizers;\n-\n-\t\tpublic JwtTokenServicesConfiguration(ResourceServerProperties resource,\n-\t\t\t\tObjectProvider<List<JwtAccessTokenConverterConfigurer>> configurers,\n-\t\t\t\tObjectProvider<List<JwtAccessTokenConverterRestTemplateCustomizer>> customizers) {\n-\t\t\tthis.resource = resource;\n-\t\t\tthis.configurers = configurers.getIfAvailable();\n-\t\t\tthis.customizers = customizers.getIfAvailable();\n-\t\t}\n-\n-\t\t@Bean\n-\t\t@ConditionalOnMissingBean(ResourceServerTokenServices.class)\n-\t\tpublic DefaultTokenServices jwtTokenServices(TokenStore jwtTokenStore) {\n-\t\t\tDefaultTokenServices services = new DefaultTokenServices();\n-\t\t\tservices.setTokenStore(jwtTokenStore);\n-\t\t\treturn services;\n-\t\t}\n-\n-\t\t@Bean\n-\t\t@ConditionalOnMissingBean(TokenStore.class)\n-\t\tpublic TokenStore jwtTokenStore() {\n-\t\t\treturn new JwtTokenStore(jwtTokenEnhancer());\n-\t\t}\n-\n-\t\t@Bean\n-\t\tpublic JwtAccessTokenConverter jwtTokenEnhancer() {\n-\t\t\tJwtAccessTokenConverter converter = new JwtAccessTokenConverter();\n-\t\t\tString keyValue = this.resource.getJwt().getKeyValue();\n-\t\t\tif (!StringUtils.hasText(keyValue)) {\n-\t\t\t\tkeyValue = getKeyFromServer();\n-\t\t\t}\n-\t\t\tif (StringUtils.hasText(keyValue) && !keyValue.startsWith("-----BEGIN")) {\n-\t\t\t\tconverter.setSigningKey(keyValue);\n-\t\t\t}\n-\t\t\tif (keyValue != null) {\n-\t\t\t\tconverter.setVerifierKey(keyValue);\n-\t\t\t}\n-\t\t\tif (!CollectionUtils.isEmpty(this.configurers)) {\n-\t\t\t\tAnnotationAwareOrderComparator.sort(this.configurers);\n-\t\t\t\tfor (JwtAccessTokenConverterConfigurer configurer : this.configurers) {\n-\t\t\t\t\tconfigurer.configure(converter);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn converter;\n-\t\t}\n-\n-\t\tprivate String getKeyFromServer() {\n-\t\t\tRestTemplate keyUriRestTemplate = new RestTemplate();\n-\t\t\tif (!CollectionUtils.isEmpty(this.customizers)) {\n-\t\t\t\tfor (JwtAccessTokenConverterRestTemplateCustomizer customizer : this.customizers) {\n-\t\t\t\t\tcustomizer.customize(keyUriRestTemplate);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tHttpHeaders headers = new HttpHeaders();\n-\t\t\tString username = this.resource.getClientId();\n-\t\t\tString password = this.resource.getClientSecret();\n-\t\t\tif (username != null && password != null) {\n-\t\t\t\tbyte[] token = Base64.getEncoder()\n-\t\t\t\t\t\t.encode((username + ":" + password).getBytes());\n-\t\t\t\theaders.add("Authorization", "Basic " + new String(token));\n-\t\t\t}\n-\t\t\tHttpEntity<Void> request = new HttpEntity<>(headers);\n-\t\t\tString url = this.resource.getJwt().getKeyUri();\n-\t\t\treturn (String) keyUriRestTemplate\n-\t\t\t\t\t.exchange(url, HttpMethod.GET, request, Map.class).getBody()\n-\t\t\t\t\t.get("value");\n-\t\t}\n-\n-\t}\n-\n-\tprivate static class TokenInfoCondition extends SpringBootCondition {\n-\n-\t\t@Override\n-\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n-\t\t\t\tAnnotatedTypeMetadata metadata) {\n-\t\t\tConditionMessage.Builder message = ConditionMessage\n-\t\t\t\t\t.forCondition("OAuth TokenInfo Condition");\n-\t\t\tEnvironment environment = context.getEnvironment();\n-\t\t\tBoolean preferTokenInfo = environment.getProperty(\n-\t\t\t\t\t"security.oauth2.resource.prefer-token-info", Boolean.class);\n-\t\t\tif (preferTokenInfo == null) {\n-\t\t\t\tpreferTokenInfo = environment\n-\t\t\t\t\t\t.resolvePlaceholders("${OAUTH2_RESOURCE_PREFERTOKENINFO:true}")\n-\t\t\t\t\t\t.equals("true");\n-\t\t\t}\n-\t\t\tString tokenInfoUri = environment\n-\t\t\t\t\t.getProperty("security.oauth2.resource.token-info-uri");\n-\t\t\tString userInfoUri = environment\n-\t\t\t\t\t.getProperty("security.oauth2.resource.user-info-uri");\n-\t\t\tif (!StringUtils.hasLength(userInfoUri)\n-\t\t\t\t\t&& !StringUtils.hasLength(tokenInfoUri)) {\n-\t\t\t\treturn ConditionOutcome\n-\t\t\t\t\t\t.match(message.didNotFind("user-info-uri property").atAll());\n-\t\t\t}\n-\t\t\tif (StringUtils.hasLength(tokenInfoUri) && preferTokenInfo) {\n-\t\t\t\treturn ConditionOutcome\n-\t\t\t\t\t\t.match(message.foundExactly("preferred token-info-uri property"));\n-\t\t\t}\n-\t\t\treturn ConditionOutcome.noMatch(message.didNotFind("token info").atAll());\n-\t\t}\n-\n-\t}\n-\n-\tprivate static class JwtTokenCondition extends SpringBootCondition {\n-\n-\t\t@Override\n-\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n-\t\t\t\tAnnotatedTypeMetadata metadata) {\n-\t\t\tConditionMessage.Builder message = ConditionMessage\n-\t\t\t\t\t.forCondition("OAuth JWT Condition");\n-\t\t\tEnvironment environment = context.getEnvironment();\n-\t\t\tString keyValue = environment\n-\t\t\t\t\t.getProperty("security.oauth2.resource.jwt.key-value");\n-\t\t\tString keyUri = environment\n-\t\t\t\t\t.getProperty("security.oauth2.resource.jwt.key-uri");\n-\t\t\tif (StringUtils.hasText(keyValue) || StringUtils.hasText(keyUri)) {\n-\t\t\t\treturn ConditionOutcome\n-\t\t\t\t\t\t.match(message.foundExactly("provided public key"));\n-\t\t\t}\n-\t\t\treturn ConditionOutcome\n-\t\t\t\t\t.noMatch(message.didNotFind("provided public key").atAll());\n-\t\t}\n-\n-\t}\n-\n-\tprivate static class JwkCondition extends SpringBootCondition {\n-\n-\t\t@Override\n-\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n-\t\t\t\tAnnotatedTypeMetadata metadata) {\n-\t\t\tConditionMessage.Builder message = ConditionMessage\n-\t\t\t\t\t.forCondition("OAuth JWK Condition");\n-\t\t\tEnvironment environment = context.getEnvironment();\n-\t\t\tString keyUri = environment\n-\t\t\t\t\t.getProperty("security.oauth2.resource.jwk.key-set-uri");\n-\t\t\tif (StringUtils.hasText(keyUri)) {\n-\t\t\t\treturn ConditionOutcome\n-\t\t\t\t\t\t.match(message.foundExactly("provided jwk key set URI"));\n-\t\t\t}\n-\t\t\treturn ConditionOutcome\n-\t\t\t\t\t.noMatch(message.didNotFind("key jwk set URI not provided").atAll());\n-\t\t}\n-\n-\t}\n-\n-\tprivate static class NotTokenInfoCondition extends SpringBootCondition {\n-\n-\t\tprivate TokenInfoCondition tokenInfoCondition = new TokenInfoCondition();\n-\n-\t\t@Override\n-\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n-\t\t\t\tAnnotatedTypeMetadata metadata) {\n-\t\t\treturn ConditionOutcome\n-\t\t\t\t\t.inverse(this.tokenInfoCondition.getMatchOutcome(context, metadata));\n-\t\t}\n-\n-\t}\n-\n-\tprivate static class RemoteTokenCondition extends NoneNestedConditions {\n-\n-\t\tRemoteTokenCondition() {\n-\t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION);\n-\t\t}\n-\n-\t\t@Conditional(JwtTokenCondition.class)\n-\t\tstatic class HasJwtConfiguration {\n-\n-\t\t}\n-\n-\t\t@Conditional(JwkCondition.class)\n-\t\tstatic class HasJwkConfiguration {\n-\n-\t\t}\n-\t}\n-\n-\tstatic class AcceptJsonRequestInterceptor implements ClientHttpRequestInterceptor {\n-\n-\t\t@Override\n-\t\tpublic ClientHttpResponse intercept(HttpRequest request, byte[] body,\n-\t\t\t\tClientHttpRequestExecution execution) throws IOException {\n-\t\t\trequest.getHeaders().setAccept(Arrays.asList(MediaType.APPLICATION_JSON));\n-\t\t\treturn execution.execute(request, body);\n-\t\t}\n-\n-\t}\n-\n-\tstatic class AcceptJsonRequestEnhancer implements RequestEnhancer {\n-\n-\t\t@Override\n-\t\tpublic void enhance(AccessTokenRequest request,\n-\t\t\t\tOAuth2ProtectedResourceDetails resource,\n-\t\t\t\tMultiValueMap<String, String> form, HttpHeaders headers) {\n-\t\t\theaders.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));\n-\t\t}\n-\n-\t}\n-\n-}\n', 'source_code': None, 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security.oauth2.resource;\n\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.Base64;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.condition.ConditionMessage;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;\nimport org.springframework.boot.autoconfigure.condition.NoneNestedConditions;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.AnnotationAwareOrderComparator;\nimport org.springframework.core.env.Environment;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.http.HttpEntity;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.http.HttpRequest;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.client.ClientHttpRequestExecution;\nimport org.springframework.http.client.ClientHttpRequestInterceptor;\nimport org.springframework.http.client.ClientHttpResponse;\nimport org.springframework.security.oauth2.client.OAuth2ClientContext;\nimport org.springframework.security.oauth2.client.OAuth2RestOperations;\nimport org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails;\nimport org.springframework.security.oauth2.client.token.AccessTokenRequest;\nimport org.springframework.security.oauth2.client.token.RequestEnhancer;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration;\nimport org.springframework.security.oauth2.provider.token.DefaultTokenServices;\nimport org.springframework.security.oauth2.provider.token.RemoteTokenServices;\nimport org.springframework.security.oauth2.provider.token.ResourceServerTokenServices;\nimport org.springframework.security.oauth2.provider.token.TokenStore;\nimport org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;\nimport org.springframework.security.oauth2.provider.token.store.JwtTokenStore;\nimport org.springframework.security.oauth2.provider.token.store.jwk.JwkTokenStore;\nimport org.springframework.social.connect.ConnectionFactoryLocator;\nimport org.springframework.social.connect.support.OAuth2ConnectionFactory;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.util.MultiValueMap;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.client.RestTemplate;\n\n/**\n * Configuration for an OAuth2 resource server.\n *\n * @author Dave Syer\n * @author Madhura Bhave\n * @author Eddú Meléndez\n * @since 1.3.0\n */\n@Configuration\n@ConditionalOnMissingBean(AuthorizationServerEndpointsConfiguration.class)\npublic class ResourceServerTokenServicesConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic UserInfoRestTemplateFactory userInfoRestTemplateFactory(\n\t\t\tObjectProvider<List<UserInfoRestTemplateCustomizer>> customizers,\n\t\t\tObjectProvider<OAuth2ProtectedResourceDetails> details,\n\t\t\tObjectProvider<OAuth2ClientContext> oauth2ClientContext) {\n\t\treturn new DefaultUserInfoRestTemplateFactory(customizers, details,\n\t\t\t\toauth2ClientContext);\n\t}\n\n\t@Configuration\n\t@Conditional(RemoteTokenCondition.class)\n\tprotected static class RemoteTokenServicesConfiguration {\n\n\t\t@Configuration\n\t\t@Conditional(TokenInfoCondition.class)\n\t\tprotected static class TokenInfoServicesConfiguration {\n\n\t\t\tprivate final ResourceServerProperties resource;\n\n\t\t\tprotected TokenInfoServicesConfiguration(ResourceServerProperties resource) {\n\t\t\t\tthis.resource = resource;\n\t\t\t}\n\n\t\t\t@Bean\n\t\t\tpublic RemoteTokenServices remoteTokenServices() {\n\t\t\t\tRemoteTokenServices services = new RemoteTokenServices();\n\t\t\t\tservices.setCheckTokenEndpointUrl(this.resource.getTokenInfoUri());\n\t\t\t\tservices.setClientId(this.resource.getClientId());\n\t\t\t\tservices.setClientSecret(this.resource.getClientSecret());\n\t\t\t\treturn services;\n\t\t\t}\n\n\t\t}\n\n\t\t@Configuration\n\t\t@ConditionalOnClass(OAuth2ConnectionFactory.class)\n\t\t@Conditional(NotTokenInfoCondition.class)\n\t\tprotected static class SocialTokenServicesConfiguration {\n\n\t\t\tprivate final ResourceServerProperties sso;\n\n\t\t\tprivate final OAuth2ConnectionFactory<?> connectionFactory;\n\n\t\t\tprivate final OAuth2RestOperations restTemplate;\n\n\t\t\tprivate final AuthoritiesExtractor authoritiesExtractor;\n\n\t\t\tprivate final PrincipalExtractor principalExtractor;\n\n\t\t\tpublic SocialTokenServicesConfiguration(ResourceServerProperties sso,\n\t\t\t\t\tObjectProvider<OAuth2ConnectionFactory<?>> connectionFactory,\n\t\t\t\t\tUserInfoRestTemplateFactory restTemplateFactory,\n\t\t\t\t\tObjectProvider<AuthoritiesExtractor> authoritiesExtractor,\n\t\t\t\t\tObjectProvider<PrincipalExtractor> principalExtractor) {\n\t\t\t\tthis.sso = sso;\n\t\t\t\tthis.connectionFactory = connectionFactory.getIfAvailable();\n\t\t\t\tthis.restTemplate = restTemplateFactory.getUserInfoRestTemplate();\n\t\t\t\tthis.authoritiesExtractor = authoritiesExtractor.getIfAvailable();\n\t\t\t\tthis.principalExtractor = principalExtractor.getIfAvailable();\n\t\t\t}\n\n\t\t\t@Bean\n\t\t\t@ConditionalOnBean(ConnectionFactoryLocator.class)\n\t\t\t@ConditionalOnMissingBean(ResourceServerTokenServices.class)\n\t\t\tpublic SpringSocialTokenServices socialTokenServices() {\n\t\t\t\treturn new SpringSocialTokenServices(this.connectionFactory,\n\t\t\t\t\t\tthis.sso.getClientId());\n\t\t\t}\n\n\t\t\t@Bean\n\t\t\t@ConditionalOnMissingBean({ ConnectionFactoryLocator.class,\n\t\t\t\t\tResourceServerTokenServices.class })\n\t\t\tpublic UserInfoTokenServices userInfoTokenServices() {\n\t\t\t\tUserInfoTokenServices services = new UserInfoTokenServices(\n\t\t\t\t\t\tthis.sso.getUserInfoUri(), this.sso.getClientId());\n\t\t\t\tservices.setTokenType(this.sso.getTokenType());\n\t\t\t\tservices.setRestTemplate(this.restTemplate);\n\t\t\t\tif (this.authoritiesExtractor != null) {\n\t\t\t\t\tservices.setAuthoritiesExtractor(this.authoritiesExtractor);\n\t\t\t\t}\n\t\t\t\tif (this.principalExtractor != null) {\n\t\t\t\t\tservices.setPrincipalExtractor(this.principalExtractor);\n\t\t\t\t}\n\t\t\t\treturn services;\n\t\t\t}\n\n\t\t}\n\n\t\t@Configuration\n\t\t@ConditionalOnMissingClass("org.springframework.social.connect.support.OAuth2ConnectionFactory")\n\t\t@Conditional(NotTokenInfoCondition.class)\n\t\tprotected static class UserInfoTokenServicesConfiguration {\n\n\t\t\tprivate final ResourceServerProperties sso;\n\n\t\t\tprivate final OAuth2RestOperations restTemplate;\n\n\t\t\tprivate final AuthoritiesExtractor authoritiesExtractor;\n\n\t\t\tprivate final PrincipalExtractor principalExtractor;\n\n\t\t\tpublic UserInfoTokenServicesConfiguration(ResourceServerProperties sso,\n\t\t\t\t\tUserInfoRestTemplateFactory restTemplateFactory,\n\t\t\t\t\tObjectProvider<AuthoritiesExtractor> authoritiesExtractor,\n\t\t\t\t\tObjectProvider<PrincipalExtractor> principalExtractor) {\n\t\t\t\tthis.sso = sso;\n\t\t\t\tthis.restTemplate = restTemplateFactory.getUserInfoRestTemplate();\n\t\t\t\tthis.authoritiesExtractor = authoritiesExtractor.getIfAvailable();\n\t\t\t\tthis.principalExtractor = principalExtractor.getIfAvailable();\n\t\t\t}\n\n\t\t\t@Bean\n\t\t\t@ConditionalOnMissingBean(ResourceServerTokenServices.class)\n\t\t\tpublic UserInfoTokenServices userInfoTokenServices() {\n\t\t\t\tUserInfoTokenServices services = new UserInfoTokenServices(\n\t\t\t\t\t\tthis.sso.getUserInfoUri(), this.sso.getClientId());\n\t\t\t\tservices.setRestTemplate(this.restTemplate);\n\t\t\t\tservices.setTokenType(this.sso.getTokenType());\n\t\t\t\tif (this.authoritiesExtractor != null) {\n\t\t\t\t\tservices.setAuthoritiesExtractor(this.authoritiesExtractor);\n\t\t\t\t}\n\t\t\t\tif (this.principalExtractor != null) {\n\t\t\t\t\tservices.setPrincipalExtractor(this.principalExtractor);\n\t\t\t\t}\n\t\t\t\treturn services;\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@Conditional(JwkCondition.class)\n\tprotected static class JwkTokenStoreConfiguration {\n\n\t\tprivate final ResourceServerProperties resource;\n\n\t\tpublic JwkTokenStoreConfiguration(ResourceServerProperties resource) {\n\t\t\tthis.resource = resource;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(ResourceServerTokenServices.class)\n\t\tpublic DefaultTokenServices jwkTokenServices(TokenStore jwkTokenStore) {\n\t\t\tDefaultTokenServices services = new DefaultTokenServices();\n\t\t\tservices.setTokenStore(jwkTokenStore);\n\t\t\treturn services;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(TokenStore.class)\n\t\tpublic TokenStore jwkTokenStore() {\n\t\t\treturn new JwkTokenStore(this.resource.getJwk().getKeySetUri());\n\t\t}\n\t}\n\n\t@Configuration\n\t@Conditional(JwtTokenCondition.class)\n\tprotected static class JwtTokenServicesConfiguration {\n\n\t\tprivate final ResourceServerProperties resource;\n\n\t\tprivate final List<JwtAccessTokenConverterConfigurer> configurers;\n\n\t\tprivate final List<JwtAccessTokenConverterRestTemplateCustomizer> customizers;\n\n\t\tpublic JwtTokenServicesConfiguration(ResourceServerProperties resource,\n\t\t\t\tObjectProvider<List<JwtAccessTokenConverterConfigurer>> configurers,\n\t\t\t\tObjectProvider<List<JwtAccessTokenConverterRestTemplateCustomizer>> customizers) {\n\t\t\tthis.resource = resource;\n\t\t\tthis.configurers = configurers.getIfAvailable();\n\t\t\tthis.customizers = customizers.getIfAvailable();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(ResourceServerTokenServices.class)\n\t\tpublic DefaultTokenServices jwtTokenServices(TokenStore jwtTokenStore) {\n\t\t\tDefaultTokenServices services = new DefaultTokenServices();\n\t\t\tservices.setTokenStore(jwtTokenStore);\n\t\t\treturn services;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(TokenStore.class)\n\t\tpublic TokenStore jwtTokenStore() {\n\t\t\treturn new JwtTokenStore(jwtTokenEnhancer());\n\t\t}\n\n\t\t@Bean\n\t\tpublic JwtAccessTokenConverter jwtTokenEnhancer() {\n\t\t\tJwtAccessTokenConverter converter = new JwtAccessTokenConverter();\n\t\t\tString keyValue = this.resource.getJwt().getKeyValue();\n\t\t\tif (!StringUtils.hasText(keyValue)) {\n\t\t\t\tkeyValue = getKeyFromServer();\n\t\t\t}\n\t\t\tif (StringUtils.hasText(keyValue) && !keyValue.startsWith("-----BEGIN")) {\n\t\t\t\tconverter.setSigningKey(keyValue);\n\t\t\t}\n\t\t\tif (keyValue != null) {\n\t\t\t\tconverter.setVerifierKey(keyValue);\n\t\t\t}\n\t\t\tif (!CollectionUtils.isEmpty(this.configurers)) {\n\t\t\t\tAnnotationAwareOrderComparator.sort(this.configurers);\n\t\t\t\tfor (JwtAccessTokenConverterConfigurer configurer : this.configurers) {\n\t\t\t\t\tconfigurer.configure(converter);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn converter;\n\t\t}\n\n\t\tprivate String getKeyFromServer() {\n\t\t\tRestTemplate keyUriRestTemplate = new RestTemplate();\n\t\t\tif (!CollectionUtils.isEmpty(this.customizers)) {\n\t\t\t\tfor (JwtAccessTokenConverterRestTemplateCustomizer customizer : this.customizers) {\n\t\t\t\t\tcustomizer.customize(keyUriRestTemplate);\n\t\t\t\t}\n\t\t\t}\n\t\t\tHttpHeaders headers = new HttpHeaders();\n\t\t\tString username = this.resource.getClientId();\n\t\t\tString password = this.resource.getClientSecret();\n\t\t\tif (username != null && password != null) {\n\t\t\t\tbyte[] token = Base64.getEncoder()\n\t\t\t\t\t\t.encode((username + ":" + password).getBytes());\n\t\t\t\theaders.add("Authorization", "Basic " + new String(token));\n\t\t\t}\n\t\t\tHttpEntity<Void> request = new HttpEntity<>(headers);\n\t\t\tString url = this.resource.getJwt().getKeyUri();\n\t\t\treturn (String) keyUriRestTemplate\n\t\t\t\t\t.exchange(url, HttpMethod.GET, request, Map.class).getBody()\n\t\t\t\t\t.get("value");\n\t\t}\n\n\t}\n\n\tprivate static class TokenInfoCondition extends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tConditionMessage.Builder message = ConditionMessage\n\t\t\t\t\t.forCondition("OAuth TokenInfo Condition");\n\t\t\tEnvironment environment = context.getEnvironment();\n\t\t\tBoolean preferTokenInfo = environment.getProperty(\n\t\t\t\t\t"security.oauth2.resource.prefer-token-info", Boolean.class);\n\t\t\tif (preferTokenInfo == null) {\n\t\t\t\tpreferTokenInfo = environment\n\t\t\t\t\t\t.resolvePlaceholders("${OAUTH2_RESOURCE_PREFERTOKENINFO:true}")\n\t\t\t\t\t\t.equals("true");\n\t\t\t}\n\t\t\tString tokenInfoUri = environment\n\t\t\t\t\t.getProperty("security.oauth2.resource.token-info-uri");\n\t\t\tString userInfoUri = environment\n\t\t\t\t\t.getProperty("security.oauth2.resource.user-info-uri");\n\t\t\tif (!StringUtils.hasLength(userInfoUri)\n\t\t\t\t\t&& !StringUtils.hasLength(tokenInfoUri)) {\n\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t.match(message.didNotFind("user-info-uri property").atAll());\n\t\t\t}\n\t\t\tif (StringUtils.hasLength(tokenInfoUri) && preferTokenInfo) {\n\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t.match(message.foundExactly("preferred token-info-uri property"));\n\t\t\t}\n\t\t\treturn ConditionOutcome.noMatch(message.didNotFind("token info").atAll());\n\t\t}\n\n\t}\n\n\tprivate static class JwtTokenCondition extends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tConditionMessage.Builder message = ConditionMessage\n\t\t\t\t\t.forCondition("OAuth JWT Condition");\n\t\t\tEnvironment environment = context.getEnvironment();\n\t\t\tString keyValue = environment\n\t\t\t\t\t.getProperty("security.oauth2.resource.jwt.key-value");\n\t\t\tString keyUri = environment\n\t\t\t\t\t.getProperty("security.oauth2.resource.jwt.key-uri");\n\t\t\tif (StringUtils.hasText(keyValue) || StringUtils.hasText(keyUri)) {\n\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t.match(message.foundExactly("provided public key"));\n\t\t\t}\n\t\t\treturn ConditionOutcome\n\t\t\t\t\t.noMatch(message.didNotFind("provided public key").atAll());\n\t\t}\n\n\t}\n\n\tprivate static class JwkCondition extends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tConditionMessage.Builder message = ConditionMessage\n\t\t\t\t\t.forCondition("OAuth JWK Condition");\n\t\t\tEnvironment environment = context.getEnvironment();\n\t\t\tString keyUri = environment\n\t\t\t\t\t.getProperty("security.oauth2.resource.jwk.key-set-uri");\n\t\t\tif (StringUtils.hasText(keyUri)) {\n\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t.match(message.foundExactly("provided jwk key set URI"));\n\t\t\t}\n\t\t\treturn ConditionOutcome\n\t\t\t\t\t.noMatch(message.didNotFind("key jwk set URI not provided").atAll());\n\t\t}\n\n\t}\n\n\tprivate static class NotTokenInfoCondition extends SpringBootCondition {\n\n\t\tprivate TokenInfoCondition tokenInfoCondition = new TokenInfoCondition();\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\treturn ConditionOutcome\n\t\t\t\t\t.inverse(this.tokenInfoCondition.getMatchOutcome(context, metadata));\n\t\t}\n\n\t}\n\n\tprivate static class RemoteTokenCondition extends NoneNestedConditions {\n\n\t\tRemoteTokenCondition() {\n\t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION);\n\t\t}\n\n\t\t@Conditional(JwtTokenCondition.class)\n\t\tstatic class HasJwtConfiguration {\n\n\t\t}\n\n\t\t@Conditional(JwkCondition.class)\n\t\tstatic class HasJwkConfiguration {\n\n\t\t}\n\t}\n\n\tstatic class AcceptJsonRequestInterceptor implements ClientHttpRequestInterceptor {\n\n\t\t@Override\n\t\tpublic ClientHttpResponse intercept(HttpRequest request, byte[] body,\n\t\t\t\tClientHttpRequestExecution execution) throws IOException {\n\t\t\trequest.getHeaders().setAccept(Arrays.asList(MediaType.APPLICATION_JSON));\n\t\t\treturn execution.execute(request, body);\n\t\t}\n\n\t}\n\n\tstatic class AcceptJsonRequestEnhancer implements RequestEnhancer {\n\n\t\t@Override\n\t\tpublic void enhance(AccessTokenRequest request,\n\t\t\t\tOAuth2ProtectedResourceDetails resource,\n\t\t\t\tMultiValueMap<String, String> form, HttpHeaders headers) {\n\t\t\theaders.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
