{'_old_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBeanTests.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBeanTests.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,6 +16,7 @@\n \n package org.springframework.boot.autoconfigure.condition;\n \n+import org.junit.Ignore;\n import org.junit.Test;\n import org.springframework.beans.factory.FactoryBean;\n import org.springframework.boot.autoconfigure.PropertyPlaceholderAutoConfiguration;\n@@ -109,6 +110,25 @@ public class ConditionalOnMissingBeanTests {\n \t\tassertEquals("foo", this.context.getBean("foo"));\n \t}\n \n+\t@Test\n+\t@Ignore("This will never work - you need to use XML for FactoryBeans, or else call getObject() inside the @Bean method")\n+\tpublic void testOnMissingBeanConditionWithFactoryBean() {\n+\t\tthis.context.register(ExampleBeanAndFactoryBeanConfiguration.class,\n+\t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n+\t\tthis.context.refresh();\n+\t\t// There should be only one\n+\t\tthis.context.getBean(ExampleBean.class);\n+\t}\n+\n+\t@Test\n+\tpublic void testOnMissingBeanConditionWithFactoryBeanInXml() {\n+\t\tthis.context.register(ConfigurationWithFactoryBean.class,\n+\t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n+\t\tthis.context.refresh();\n+\t\t// There should be only one\n+\t\tthis.context.getBean(ExampleBean.class);\n+\t}\n+\n \t@Configuration\n \t@ConditionalOnMissingBean(name = "foo")\n \tprotected static class OnBeanNameConfiguration {\n@@ -118,6 +138,21 @@ public class ConditionalOnMissingBeanTests {\n \t\t}\n \t}\n \n+\t@Configuration\n+\tprotected static class ExampleBeanAndFactoryBeanConfiguration {\n+\n+\t\t@Bean\n+\t\tpublic FactoryBean<ExampleBean> exampleBeanFactoryBean() {\n+\t\t\treturn new ExampleFactoryBean("foo");\n+\t\t}\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(ExampleBean.class)\n+\t\tpublic ExampleBean createExampleBean() {\n+\t\t\treturn new ExampleBean();\n+\t\t}\n+\t}\n+\n \t@Configuration\n \t@ConditionalOnMissingBean(annotation = EnableScheduling.class)\n \tprotected static class OnAnnotationConfiguration {\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport org.junit.Ignore;\nimport org.junit.Test;\nimport org.springframework.beans.factory.FactoryBean;\nimport org.springframework.boot.autoconfigure.PropertyPlaceholderAutoConfiguration;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.ImportResource;\nimport org.springframework.scheduling.annotation.EnableScheduling;\nimport org.springframework.util.Assert;\n\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertThat;\nimport static org.junit.Assert.assertTrue;\n\n/**\n * Tests for {@link ConditionalOnMissingBean}.\n * \n * @author Dave Syer\n * @author Phillip Webb\n */\n@SuppressWarnings("resource")\npublic class ConditionalOnMissingBeanTests {\n\n\tprivate final AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n\n\t@Test\n\tpublic void testNameOnMissingBeanCondition() {\n\t\tthis.context.register(FooConfiguration.class, OnBeanNameConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertFalse(this.context.containsBean("bar"));\n\t\tassertEquals("foo", this.context.getBean("foo"));\n\t}\n\n\t@Test\n\tpublic void testNameOnMissingBeanConditionReverseOrder() {\n\t\tthis.context.register(OnBeanNameConfiguration.class, FooConfiguration.class);\n\t\tthis.context.refresh();\n\t\t// FIXME: ideally this would be false, but the ordering is a problem\n\t\tassertTrue(this.context.containsBean("bar"));\n\t\tassertEquals("foo", this.context.getBean("foo"));\n\t}\n\n\t@Test\n\tpublic void hierarchyConsidered() throws Exception {\n\t\tthis.context.register(FooConfiguration.class);\n\t\tthis.context.refresh();\n\t\tAnnotationConfigApplicationContext childContext = new AnnotationConfigApplicationContext();\n\t\tchildContext.setParent(this.context);\n\t\tchildContext.register(HierarchyConsidered.class);\n\t\tchildContext.refresh();\n\t\tassertFalse(childContext.containsLocalBean("bar"));\n\t}\n\n\t@Test\n\tpublic void hierarchyNotConsidered() throws Exception {\n\t\tthis.context.register(FooConfiguration.class);\n\t\tthis.context.refresh();\n\t\tAnnotationConfigApplicationContext childContext = new AnnotationConfigApplicationContext();\n\t\tchildContext.setParent(this.context);\n\t\tchildContext.register(HierarchyNotConsidered.class);\n\t\tchildContext.refresh();\n\t\tassertTrue(childContext.containsLocalBean("bar"));\n\t}\n\n\t@Test\n\tpublic void impliedOnBeanMethod() throws Exception {\n\t\tthis.context.register(ExampleBeanConfiguration.class, ImpliedOnBeanMethod.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.getBeansOfType(ExampleBean.class).size(), equalTo(1));\n\t}\n\n\t@Test\n\tpublic void testAnnotationOnMissingBeanCondition() {\n\t\tthis.context.register(FooConfiguration.class, OnAnnotationConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertFalse(this.context.containsBean("bar"));\n\t\tassertEquals("foo", this.context.getBean("foo"));\n\t}\n\n\t// Rigorous test for SPR-11069\n\t@Test\n\tpublic void testAnnotationOnMissingBeanConditionWithEagerFactoryBean() {\n\t\tthis.context.register(FooConfiguration.class, OnAnnotationConfiguration.class,\n\t\t\t\tConfigurationWithFactoryBean.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertFalse(this.context.containsBean("bar"));\n\t\tassertTrue(this.context.containsBean("example"));\n\t\tassertEquals("foo", this.context.getBean("foo"));\n\t}\n\n\t@Test\n\t@Ignore("This will never work - you need to use XML for FactoryBeans, or else call getObject() inside the @Bean method")\n\tpublic void testOnMissingBeanConditionWithFactoryBean() {\n\t\tthis.context.register(ExampleBeanAndFactoryBeanConfiguration.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n\t\tthis.context.refresh();\n\t\t// There should be only one\n\t\tthis.context.getBean(ExampleBean.class);\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithFactoryBeanInXml() {\n\t\tthis.context.register(ConfigurationWithFactoryBean.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n\t\tthis.context.refresh();\n\t\t// There should be only one\n\t\tthis.context.getBean(ExampleBean.class);\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(name = "foo")\n\tprotected static class OnBeanNameConfiguration {\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\t}\n\n\t@Configuration\n\tprotected static class ExampleBeanAndFactoryBeanConfiguration {\n\n\t\t@Bean\n\t\tpublic FactoryBean<ExampleBean> exampleBeanFactoryBean() {\n\t\t\treturn new ExampleFactoryBean("foo");\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(ExampleBean.class)\n\t\tpublic ExampleBean createExampleBean() {\n\t\t\treturn new ExampleBean();\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(annotation = EnableScheduling.class)\n\tprotected static class OnAnnotationConfiguration {\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\t}\n\n\t@Configuration\n\t@ImportResource("org/springframework/boot/autoconfigure/condition/factorybean.xml")\n\tprotected static class ConfigurationWithFactoryBean {\n\t}\n\n\t@Configuration\n\t@EnableScheduling\n\tprotected static class FooConfiguration {\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(name = "foo")\n\tprotected static class HierarchyConsidered {\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(name = "foo", search = SearchStrategy.CURRENT)\n\tprotected static class HierarchyNotConsidered {\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\t}\n\n\t@Configuration\n\tprotected static class ExampleBeanConfiguration {\n\t\t@Bean\n\t\tpublic ExampleBean exampleBean() {\n\t\t\treturn new ExampleBean();\n\t\t}\n\t}\n\n\t@Configuration\n\tprotected static class ImpliedOnBeanMethod {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic ExampleBean exampleBean2() {\n\t\t\treturn new ExampleBean();\n\t\t}\n\n\t}\n\n\tpublic static class ExampleBean {\n\t}\n\n\tpublic static class ExampleFactoryBean implements FactoryBean<ExampleBean> {\n\n\t\tpublic ExampleFactoryBean(String value) {\n\t\t\tAssert.state(!value.contains("$"));\n\t\t}\n\n\t\t@Override\n\t\tpublic ExampleBean getObject() throws Exception {\n\t\t\treturn new ExampleBean();\n\t\t}\n\n\t\t@Override\n\t\tpublic Class<?> getObjectType() {\n\t\t\treturn ExampleBean.class;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean isSingleton() {\n\t\t\treturn false;\n\t\t}\n\n\t}\n}\n', 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport org.junit.Test;\nimport org.springframework.beans.factory.FactoryBean;\nimport org.springframework.boot.autoconfigure.PropertyPlaceholderAutoConfiguration;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.ImportResource;\nimport org.springframework.scheduling.annotation.EnableScheduling;\nimport org.springframework.util.Assert;\n\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertThat;\nimport static org.junit.Assert.assertTrue;\n\n/**\n * Tests for {@link ConditionalOnMissingBean}.\n * \n * @author Dave Syer\n * @author Phillip Webb\n */\n@SuppressWarnings("resource")\npublic class ConditionalOnMissingBeanTests {\n\n\tprivate final AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n\n\t@Test\n\tpublic void testNameOnMissingBeanCondition() {\n\t\tthis.context.register(FooConfiguration.class, OnBeanNameConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertFalse(this.context.containsBean("bar"));\n\t\tassertEquals("foo", this.context.getBean("foo"));\n\t}\n\n\t@Test\n\tpublic void testNameOnMissingBeanConditionReverseOrder() {\n\t\tthis.context.register(OnBeanNameConfiguration.class, FooConfiguration.class);\n\t\tthis.context.refresh();\n\t\t// FIXME: ideally this would be false, but the ordering is a problem\n\t\tassertTrue(this.context.containsBean("bar"));\n\t\tassertEquals("foo", this.context.getBean("foo"));\n\t}\n\n\t@Test\n\tpublic void hierarchyConsidered() throws Exception {\n\t\tthis.context.register(FooConfiguration.class);\n\t\tthis.context.refresh();\n\t\tAnnotationConfigApplicationContext childContext = new AnnotationConfigApplicationContext();\n\t\tchildContext.setParent(this.context);\n\t\tchildContext.register(HierarchyConsidered.class);\n\t\tchildContext.refresh();\n\t\tassertFalse(childContext.containsLocalBean("bar"));\n\t}\n\n\t@Test\n\tpublic void hierarchyNotConsidered() throws Exception {\n\t\tthis.context.register(FooConfiguration.class);\n\t\tthis.context.refresh();\n\t\tAnnotationConfigApplicationContext childContext = new AnnotationConfigApplicationContext();\n\t\tchildContext.setParent(this.context);\n\t\tchildContext.register(HierarchyNotConsidered.class);\n\t\tchildContext.refresh();\n\t\tassertTrue(childContext.containsLocalBean("bar"));\n\t}\n\n\t@Test\n\tpublic void impliedOnBeanMethod() throws Exception {\n\t\tthis.context.register(ExampleBeanConfiguration.class, ImpliedOnBeanMethod.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.getBeansOfType(ExampleBean.class).size(), equalTo(1));\n\t}\n\n\t@Test\n\tpublic void testAnnotationOnMissingBeanCondition() {\n\t\tthis.context.register(FooConfiguration.class, OnAnnotationConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertFalse(this.context.containsBean("bar"));\n\t\tassertEquals("foo", this.context.getBean("foo"));\n\t}\n\n\t// Rigorous test for SPR-11069\n\t@Test\n\tpublic void testAnnotationOnMissingBeanConditionWithEagerFactoryBean() {\n\t\tthis.context.register(FooConfiguration.class, OnAnnotationConfiguration.class,\n\t\t\t\tConfigurationWithFactoryBean.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertFalse(this.context.containsBean("bar"));\n\t\tassertTrue(this.context.containsBean("example"));\n\t\tassertEquals("foo", this.context.getBean("foo"));\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(name = "foo")\n\tprotected static class OnBeanNameConfiguration {\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(annotation = EnableScheduling.class)\n\tprotected static class OnAnnotationConfiguration {\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\t}\n\n\t@Configuration\n\t@ImportResource("org/springframework/boot/autoconfigure/condition/factorybean.xml")\n\tprotected static class ConfigurationWithFactoryBean {\n\t}\n\n\t@Configuration\n\t@EnableScheduling\n\tprotected static class FooConfiguration {\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(name = "foo")\n\tprotected static class HierarchyConsidered {\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(name = "foo", search = SearchStrategy.CURRENT)\n\tprotected static class HierarchyNotConsidered {\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\t}\n\n\t@Configuration\n\tprotected static class ExampleBeanConfiguration {\n\t\t@Bean\n\t\tpublic ExampleBean exampleBean() {\n\t\t\treturn new ExampleBean();\n\t\t}\n\t}\n\n\t@Configuration\n\tprotected static class ImpliedOnBeanMethod {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic ExampleBean exampleBean2() {\n\t\t\treturn new ExampleBean();\n\t\t}\n\n\t}\n\n\tpublic static class ExampleBean {\n\t}\n\n\tpublic static class ExampleFactoryBean implements FactoryBean<ExampleBean> {\n\n\t\tpublic ExampleFactoryBean(String value) {\n\t\t\tAssert.state(!value.contains("$"));\n\t\t}\n\n\t\t@Override\n\t\tpublic ExampleBean getObject() throws Exception {\n\t\t\treturn new ExampleBean();\n\t\t}\n\n\t\t@Override\n\t\tpublic Class<?> getObjectType() {\n\t\t\treturn ExampleBean.class;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean isSingleton() {\n\t\t\treturn false;\n\t\t}\n\n\t}\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
