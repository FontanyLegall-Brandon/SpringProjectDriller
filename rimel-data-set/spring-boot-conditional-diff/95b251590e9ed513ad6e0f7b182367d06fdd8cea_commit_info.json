{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,13 +16,13 @@\n \n package org.springframework.boot.actuate.autoconfigure.health;\n \n-import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\n+import org.springframework.boot.actuate.health.CompositeHealthIndicator;\n import org.springframework.boot.actuate.health.HealthAggregator;\n import org.springframework.boot.actuate.health.HealthEndpoint;\n import org.springframework.boot.actuate.health.HealthIndicatorRegistry;\n-import org.springframework.boot.actuate.health.OrderedHealthAggregator;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n@@ -30,27 +30,18 @@ import org.springframework.context.annotation.Configuration;\n  * Configuration for {@link HealthEndpoint}.\n  *\n  * @author Stephane Nicoll\n- * @author Vedran Pavic\n  */\n @Configuration\n+@ConditionalOnSingleCandidate(HealthIndicatorRegistry.class)\n class HealthEndpointConfiguration {\n \n-\tprivate final HealthAggregator healthAggregator;\n-\n-\tprivate final HealthIndicatorRegistry healthIndicatorRegistry;\n-\n-\tHealthEndpointConfiguration(ObjectProvider<HealthAggregator> healthAggregator,\n-\t\t\tObjectProvider<HealthIndicatorRegistry> healthIndicatorRegistry) {\n-\t\tthis.healthAggregator = healthAggregator\n-\t\t\t\t.getIfAvailable(OrderedHealthAggregator::new);\n-\t\tthis.healthIndicatorRegistry = healthIndicatorRegistry.getObject();\n-\t}\n-\n \t@Bean\n \t@ConditionalOnMissingBean\n \t@ConditionalOnEnabledEndpoint\n-\tpublic HealthEndpoint healthEndpoint() {\n-\t\treturn new HealthEndpoint(this.healthAggregator, this.healthIndicatorRegistry);\n+\tpublic HealthEndpoint healthEndpoint(HealthAggregator healthAggregator,\n+\t\t\tHealthIndicatorRegistry registry) {\n+\t\treturn new HealthEndpoint(\n+\t\t\t\tnew CompositeHealthIndicator(healthAggregator, registry));\n \t}\n \n }\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.health;\n\nimport org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\nimport org.springframework.boot.actuate.health.CompositeHealthIndicator;\nimport org.springframework.boot.actuate.health.HealthAggregator;\nimport org.springframework.boot.actuate.health.HealthEndpoint;\nimport org.springframework.boot.actuate.health.HealthIndicatorRegistry;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Configuration for {@link HealthEndpoint}.\n *\n * @author Stephane Nicoll\n */\n@Configuration\n@ConditionalOnSingleCandidate(HealthIndicatorRegistry.class)\nclass HealthEndpointConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnEnabledEndpoint\n\tpublic HealthEndpoint healthEndpoint(HealthAggregator healthAggregator,\n\t\t\tHealthIndicatorRegistry registry) {\n\t\treturn new HealthEndpoint(\n\t\t\t\tnew CompositeHealthIndicator(healthAggregator, registry));\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.health;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\nimport org.springframework.boot.actuate.health.HealthAggregator;\nimport org.springframework.boot.actuate.health.HealthEndpoint;\nimport org.springframework.boot.actuate.health.HealthIndicatorRegistry;\nimport org.springframework.boot.actuate.health.OrderedHealthAggregator;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Configuration for {@link HealthEndpoint}.\n *\n * @author Stephane Nicoll\n * @author Vedran Pavic\n */\n@Configuration\nclass HealthEndpointConfiguration {\n\n\tprivate final HealthAggregator healthAggregator;\n\n\tprivate final HealthIndicatorRegistry healthIndicatorRegistry;\n\n\tHealthEndpointConfiguration(ObjectProvider<HealthAggregator> healthAggregator,\n\t\t\tObjectProvider<HealthIndicatorRegistry> healthIndicatorRegistry) {\n\t\tthis.healthAggregator = healthAggregator\n\t\t\t\t.getIfAvailable(OrderedHealthAggregator::new);\n\t\tthis.healthIndicatorRegistry = healthIndicatorRegistry.getObject();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnEnabledEndpoint\n\tpublic HealthEndpoint healthEndpoint() {\n\t\treturn new HealthEndpoint(this.healthAggregator, this.healthIndicatorRegistry);\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
