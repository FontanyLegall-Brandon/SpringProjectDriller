{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -166,8 +166,8 @@ public class QuartzAutoConfiguration {\n \n \t\t/**\n \t\t * Additional configuration to ensure that {@link SchedulerFactoryBean} and\n-\t\t * {@link Scheduler} beans depend on the {@link QuartzDataSourceInitializer}\n-\t\t * bean(s).\n+\t\t * {@link Scheduler} beans depend on any beans that perform data source\n+\t\t * initialization.\n \t\t */\n \t\t@Configuration\n \t\tstatic class QuartzSchedulerDependencyConfiguration {\n@@ -183,10 +183,16 @@ public class QuartzAutoConfiguration {\n \t\t\t\treturn new SchedulerDependsOnBeanFactoryPostProcessor(FlywayMigrationInitializer.class);\n \t\t\t}\n \n-\t\t\t@Bean\n-\t\t\t@ConditionalOnBean(SpringLiquibase.class)\n-\t\t\tpublic static SchedulerDependsOnBeanFactoryPostProcessor quartzSchedulerLiquibaseDependsOnBeanFactoryPostProcessor() {\n-\t\t\t\treturn new SchedulerDependsOnBeanFactoryPostProcessor(SpringLiquibase.class);\n+\t\t\t@Configuration\n+\t\t\t@ConditionalOnClass(SpringLiquibase.class)\n+\t\t\tstatic class LiquibaseQuartzSchedulerDependencyConfiguration {\n+\n+\t\t\t\t@Bean\n+\t\t\t\t@ConditionalOnBean(SpringLiquibase.class)\n+\t\t\t\tpublic static SchedulerDependsOnBeanFactoryPostProcessor quartzSchedulerLiquibaseDependsOnBeanFactoryPostProcessor() {\n+\t\t\t\t\treturn new SchedulerDependsOnBeanFactoryPostProcessor(SpringLiquibase.class);\n+\t\t\t\t}\n+\n \t\t\t}\n \n \t\t}\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.quartz;\n\nimport java.util.Map;\nimport java.util.Properties;\n\nimport javax.sql.DataSource;\n\nimport liquibase.integration.spring.SpringLiquibase;\nimport org.quartz.Calendar;\nimport org.quartz.JobDetail;\nimport org.quartz.Scheduler;\nimport org.quartz.Trigger;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AbstractDependsOnBeanFactoryPostProcessor;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\nimport org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration;\nimport org.springframework.boot.autoconfigure.flyway.FlywayMigrationInitializer;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration;\nimport org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.scheduling.quartz.SchedulerFactoryBean;\nimport org.springframework.scheduling.quartz.SpringBeanJobFactory;\nimport org.springframework.transaction.PlatformTransactionManager;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Quartz Scheduler.\n *\n * @author Vedran Pavic\n * @author Stephane Nicoll\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass({ Scheduler.class, SchedulerFactoryBean.class, PlatformTransactionManager.class })\n@EnableConfigurationProperties(QuartzProperties.class)\n@AutoConfigureAfter({ DataSourceAutoConfiguration.class, HibernateJpaAutoConfiguration.class,\n\t\tLiquibaseAutoConfiguration.class, FlywayAutoConfiguration.class })\npublic class QuartzAutoConfiguration {\n\n\tprivate final QuartzProperties properties;\n\n\tprivate final ObjectProvider<SchedulerFactoryBeanCustomizer> customizers;\n\n\tprivate final JobDetail[] jobDetails;\n\n\tprivate final Map<String, Calendar> calendars;\n\n\tprivate final Trigger[] triggers;\n\n\tprivate final ApplicationContext applicationContext;\n\n\tpublic QuartzAutoConfiguration(QuartzProperties properties,\n\t\t\tObjectProvider<SchedulerFactoryBeanCustomizer> customizers, ObjectProvider<JobDetail[]> jobDetails,\n\t\t\tMap<String, Calendar> calendars, ObjectProvider<Trigger[]> triggers,\n\t\t\tApplicationContext applicationContext) {\n\t\tthis.properties = properties;\n\t\tthis.customizers = customizers;\n\t\tthis.jobDetails = jobDetails.getIfAvailable();\n\t\tthis.calendars = calendars;\n\t\tthis.triggers = triggers.getIfAvailable();\n\t\tthis.applicationContext = applicationContext;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic SchedulerFactoryBean quartzScheduler() {\n\t\tSchedulerFactoryBean schedulerFactoryBean = new SchedulerFactoryBean();\n\t\tSpringBeanJobFactory jobFactory = new SpringBeanJobFactory();\n\t\tjobFactory.setApplicationContext(this.applicationContext);\n\t\tschedulerFactoryBean.setJobFactory(jobFactory);\n\t\tif (this.properties.getSchedulerName() != null) {\n\t\t\tschedulerFactoryBean.setSchedulerName(this.properties.getSchedulerName());\n\t\t}\n\t\tschedulerFactoryBean.setAutoStartup(this.properties.isAutoStartup());\n\t\tschedulerFactoryBean.setStartupDelay((int) this.properties.getStartupDelay().getSeconds());\n\t\tschedulerFactoryBean.setWaitForJobsToCompleteOnShutdown(this.properties.isWaitForJobsToCompleteOnShutdown());\n\t\tschedulerFactoryBean.setOverwriteExistingJobs(this.properties.isOverwriteExistingJobs());\n\t\tif (!this.properties.getProperties().isEmpty()) {\n\t\t\tschedulerFactoryBean.setQuartzProperties(asProperties(this.properties.getProperties()));\n\t\t}\n\t\tif (this.jobDetails != null && this.jobDetails.length > 0) {\n\t\t\tschedulerFactoryBean.setJobDetails(this.jobDetails);\n\t\t}\n\t\tif (this.calendars != null && !this.calendars.isEmpty()) {\n\t\t\tschedulerFactoryBean.setCalendars(this.calendars);\n\t\t}\n\t\tif (this.triggers != null && this.triggers.length > 0) {\n\t\t\tschedulerFactoryBean.setTriggers(this.triggers);\n\t\t}\n\t\tcustomize(schedulerFactoryBean);\n\t\treturn schedulerFactoryBean;\n\t}\n\n\tprivate Properties asProperties(Map<String, String> source) {\n\t\tProperties properties = new Properties();\n\t\tproperties.putAll(source);\n\t\treturn properties;\n\t}\n\n\tprivate void customize(SchedulerFactoryBean schedulerFactoryBean) {\n\t\tthis.customizers.orderedStream().forEach((customizer) -> customizer.customize(schedulerFactoryBean));\n\t}\n\n\t@Configuration\n\t@ConditionalOnSingleCandidate(DataSource.class)\n\t@ConditionalOnProperty(prefix = "spring.quartz", name = "job-store-type", havingValue = "jdbc")\n\tprotected static class JdbcStoreTypeConfiguration {\n\n\t\t@Bean\n\t\t@Order(0)\n\t\tpublic SchedulerFactoryBeanCustomizer dataSourceCustomizer(QuartzProperties properties, DataSource dataSource,\n\t\t\t\t@QuartzDataSource ObjectProvider<DataSource> quartzDataSource,\n\t\t\t\tObjectProvider<PlatformTransactionManager> transactionManager) {\n\t\t\treturn (schedulerFactoryBean) -> {\n\t\t\t\tDataSource dataSourceToUse = getDataSource(dataSource, quartzDataSource);\n\t\t\t\tschedulerFactoryBean.setDataSource(dataSourceToUse);\n\t\t\t\tPlatformTransactionManager txManager = transactionManager.getIfUnique();\n\t\t\t\tif (txManager != null) {\n\t\t\t\t\tschedulerFactoryBean.setTransactionManager(txManager);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tprivate DataSource getDataSource(DataSource dataSource, ObjectProvider<DataSource> quartzDataSource) {\n\t\t\tDataSource dataSourceIfAvailable = quartzDataSource.getIfAvailable();\n\t\t\treturn (dataSourceIfAvailable != null) ? dataSourceIfAvailable : dataSource;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic QuartzDataSourceInitializer quartzDataSourceInitializer(DataSource dataSource,\n\t\t\t\t@QuartzDataSource ObjectProvider<DataSource> quartzDataSource, ResourceLoader resourceLoader,\n\t\t\t\tQuartzProperties properties) {\n\t\t\tDataSource dataSourceToUse = getDataSource(dataSource, quartzDataSource);\n\t\t\treturn new QuartzDataSourceInitializer(dataSourceToUse, resourceLoader, properties);\n\n\t\t}\n\n\t\t/**\n\t\t * Additional configuration to ensure that {@link SchedulerFactoryBean} and\n\t\t * {@link Scheduler} beans depend on any beans that perform data source\n\t\t * initialization.\n\t\t */\n\t\t@Configuration\n\t\tstatic class QuartzSchedulerDependencyConfiguration {\n\n\t\t\t@Bean\n\t\t\tpublic static SchedulerDependsOnBeanFactoryPostProcessor quartzSchedulerDataSourceInitializerDependsOnBeanFactoryPostProcessor() {\n\t\t\t\treturn new SchedulerDependsOnBeanFactoryPostProcessor(QuartzDataSourceInitializer.class);\n\t\t\t}\n\n\t\t\t@Bean\n\t\t\t@ConditionalOnBean(FlywayMigrationInitializer.class)\n\t\t\tpublic static SchedulerDependsOnBeanFactoryPostProcessor quartzSchedulerFlywayDependsOnBeanFactoryPostProcessor() {\n\t\t\t\treturn new SchedulerDependsOnBeanFactoryPostProcessor(FlywayMigrationInitializer.class);\n\t\t\t}\n\n\t\t\t@Configuration\n\t\t\t@ConditionalOnClass(SpringLiquibase.class)\n\t\t\tstatic class LiquibaseQuartzSchedulerDependencyConfiguration {\n\n\t\t\t\t@Bean\n\t\t\t\t@ConditionalOnBean(SpringLiquibase.class)\n\t\t\t\tpublic static SchedulerDependsOnBeanFactoryPostProcessor quartzSchedulerLiquibaseDependsOnBeanFactoryPostProcessor() {\n\t\t\t\t\treturn new SchedulerDependsOnBeanFactoryPostProcessor(SpringLiquibase.class);\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * {@link AbstractDependsOnBeanFactoryPostProcessor} for Quartz {@link Scheduler} and\n\t * {@link SchedulerFactoryBean}.\n\t */\n\tprivate static class SchedulerDependsOnBeanFactoryPostProcessor extends AbstractDependsOnBeanFactoryPostProcessor {\n\n\t\tSchedulerDependsOnBeanFactoryPostProcessor(Class<?>... dependencyTypes) {\n\t\t\tsuper(Scheduler.class, SchedulerFactoryBean.class, dependencyTypes);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.quartz;\n\nimport java.util.Map;\nimport java.util.Properties;\n\nimport javax.sql.DataSource;\n\nimport liquibase.integration.spring.SpringLiquibase;\nimport org.quartz.Calendar;\nimport org.quartz.JobDetail;\nimport org.quartz.Scheduler;\nimport org.quartz.Trigger;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AbstractDependsOnBeanFactoryPostProcessor;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\nimport org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration;\nimport org.springframework.boot.autoconfigure.flyway.FlywayMigrationInitializer;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration;\nimport org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.scheduling.quartz.SchedulerFactoryBean;\nimport org.springframework.scheduling.quartz.SpringBeanJobFactory;\nimport org.springframework.transaction.PlatformTransactionManager;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Quartz Scheduler.\n *\n * @author Vedran Pavic\n * @author Stephane Nicoll\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass({ Scheduler.class, SchedulerFactoryBean.class, PlatformTransactionManager.class })\n@EnableConfigurationProperties(QuartzProperties.class)\n@AutoConfigureAfter({ DataSourceAutoConfiguration.class, HibernateJpaAutoConfiguration.class,\n\t\tLiquibaseAutoConfiguration.class, FlywayAutoConfiguration.class })\npublic class QuartzAutoConfiguration {\n\n\tprivate final QuartzProperties properties;\n\n\tprivate final ObjectProvider<SchedulerFactoryBeanCustomizer> customizers;\n\n\tprivate final JobDetail[] jobDetails;\n\n\tprivate final Map<String, Calendar> calendars;\n\n\tprivate final Trigger[] triggers;\n\n\tprivate final ApplicationContext applicationContext;\n\n\tpublic QuartzAutoConfiguration(QuartzProperties properties,\n\t\t\tObjectProvider<SchedulerFactoryBeanCustomizer> customizers, ObjectProvider<JobDetail[]> jobDetails,\n\t\t\tMap<String, Calendar> calendars, ObjectProvider<Trigger[]> triggers,\n\t\t\tApplicationContext applicationContext) {\n\t\tthis.properties = properties;\n\t\tthis.customizers = customizers;\n\t\tthis.jobDetails = jobDetails.getIfAvailable();\n\t\tthis.calendars = calendars;\n\t\tthis.triggers = triggers.getIfAvailable();\n\t\tthis.applicationContext = applicationContext;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic SchedulerFactoryBean quartzScheduler() {\n\t\tSchedulerFactoryBean schedulerFactoryBean = new SchedulerFactoryBean();\n\t\tSpringBeanJobFactory jobFactory = new SpringBeanJobFactory();\n\t\tjobFactory.setApplicationContext(this.applicationContext);\n\t\tschedulerFactoryBean.setJobFactory(jobFactory);\n\t\tif (this.properties.getSchedulerName() != null) {\n\t\t\tschedulerFactoryBean.setSchedulerName(this.properties.getSchedulerName());\n\t\t}\n\t\tschedulerFactoryBean.setAutoStartup(this.properties.isAutoStartup());\n\t\tschedulerFactoryBean.setStartupDelay((int) this.properties.getStartupDelay().getSeconds());\n\t\tschedulerFactoryBean.setWaitForJobsToCompleteOnShutdown(this.properties.isWaitForJobsToCompleteOnShutdown());\n\t\tschedulerFactoryBean.setOverwriteExistingJobs(this.properties.isOverwriteExistingJobs());\n\t\tif (!this.properties.getProperties().isEmpty()) {\n\t\t\tschedulerFactoryBean.setQuartzProperties(asProperties(this.properties.getProperties()));\n\t\t}\n\t\tif (this.jobDetails != null && this.jobDetails.length > 0) {\n\t\t\tschedulerFactoryBean.setJobDetails(this.jobDetails);\n\t\t}\n\t\tif (this.calendars != null && !this.calendars.isEmpty()) {\n\t\t\tschedulerFactoryBean.setCalendars(this.calendars);\n\t\t}\n\t\tif (this.triggers != null && this.triggers.length > 0) {\n\t\t\tschedulerFactoryBean.setTriggers(this.triggers);\n\t\t}\n\t\tcustomize(schedulerFactoryBean);\n\t\treturn schedulerFactoryBean;\n\t}\n\n\tprivate Properties asProperties(Map<String, String> source) {\n\t\tProperties properties = new Properties();\n\t\tproperties.putAll(source);\n\t\treturn properties;\n\t}\n\n\tprivate void customize(SchedulerFactoryBean schedulerFactoryBean) {\n\t\tthis.customizers.orderedStream().forEach((customizer) -> customizer.customize(schedulerFactoryBean));\n\t}\n\n\t@Configuration\n\t@ConditionalOnSingleCandidate(DataSource.class)\n\t@ConditionalOnProperty(prefix = "spring.quartz", name = "job-store-type", havingValue = "jdbc")\n\tprotected static class JdbcStoreTypeConfiguration {\n\n\t\t@Bean\n\t\t@Order(0)\n\t\tpublic SchedulerFactoryBeanCustomizer dataSourceCustomizer(QuartzProperties properties, DataSource dataSource,\n\t\t\t\t@QuartzDataSource ObjectProvider<DataSource> quartzDataSource,\n\t\t\t\tObjectProvider<PlatformTransactionManager> transactionManager) {\n\t\t\treturn (schedulerFactoryBean) -> {\n\t\t\t\tDataSource dataSourceToUse = getDataSource(dataSource, quartzDataSource);\n\t\t\t\tschedulerFactoryBean.setDataSource(dataSourceToUse);\n\t\t\t\tPlatformTransactionManager txManager = transactionManager.getIfUnique();\n\t\t\t\tif (txManager != null) {\n\t\t\t\t\tschedulerFactoryBean.setTransactionManager(txManager);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tprivate DataSource getDataSource(DataSource dataSource, ObjectProvider<DataSource> quartzDataSource) {\n\t\t\tDataSource dataSourceIfAvailable = quartzDataSource.getIfAvailable();\n\t\t\treturn (dataSourceIfAvailable != null) ? dataSourceIfAvailable : dataSource;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic QuartzDataSourceInitializer quartzDataSourceInitializer(DataSource dataSource,\n\t\t\t\t@QuartzDataSource ObjectProvider<DataSource> quartzDataSource, ResourceLoader resourceLoader,\n\t\t\t\tQuartzProperties properties) {\n\t\t\tDataSource dataSourceToUse = getDataSource(dataSource, quartzDataSource);\n\t\t\treturn new QuartzDataSourceInitializer(dataSourceToUse, resourceLoader, properties);\n\n\t\t}\n\n\t\t/**\n\t\t * Additional configuration to ensure that {@link SchedulerFactoryBean} and\n\t\t * {@link Scheduler} beans depend on the {@link QuartzDataSourceInitializer}\n\t\t * bean(s).\n\t\t */\n\t\t@Configuration\n\t\tstatic class QuartzSchedulerDependencyConfiguration {\n\n\t\t\t@Bean\n\t\t\tpublic static SchedulerDependsOnBeanFactoryPostProcessor quartzSchedulerDataSourceInitializerDependsOnBeanFactoryPostProcessor() {\n\t\t\t\treturn new SchedulerDependsOnBeanFactoryPostProcessor(QuartzDataSourceInitializer.class);\n\t\t\t}\n\n\t\t\t@Bean\n\t\t\t@ConditionalOnBean(FlywayMigrationInitializer.class)\n\t\t\tpublic static SchedulerDependsOnBeanFactoryPostProcessor quartzSchedulerFlywayDependsOnBeanFactoryPostProcessor() {\n\t\t\t\treturn new SchedulerDependsOnBeanFactoryPostProcessor(FlywayMigrationInitializer.class);\n\t\t\t}\n\n\t\t\t@Bean\n\t\t\t@ConditionalOnBean(SpringLiquibase.class)\n\t\t\tpublic static SchedulerDependsOnBeanFactoryPostProcessor quartzSchedulerLiquibaseDependsOnBeanFactoryPostProcessor() {\n\t\t\t\treturn new SchedulerDependsOnBeanFactoryPostProcessor(SpringLiquibase.class);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * {@link AbstractDependsOnBeanFactoryPostProcessor} for Quartz {@link Scheduler} and\n\t * {@link SchedulerFactoryBean}.\n\t */\n\tprivate static class SchedulerDependsOnBeanFactoryPostProcessor extends AbstractDependsOnBeanFactoryPostProcessor {\n\n\t\tSchedulerDependsOnBeanFactoryPostProcessor(Class<?>... dependencyTypes) {\n\t\t\tsuper(Scheduler.class, SchedulerFactoryBean.class, dependencyTypes);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
