{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/websocket/WebSocketAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/websocket/WebSocketAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -23,7 +23,11 @@ import org.apache.catalina.deploy.ApplicationListener;\n import org.apache.catalina.startup.Tomcat;\n import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration;\n+import org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainer;\n+import org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;\n+import org.springframework.boot.context.embedded.tomcat.TomcatContextCustomizer;\n import org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n@@ -47,14 +51,31 @@ public class WebSocketAutoConfiguration {\n \t\t\t"org.apache.tomcat.websocket.server.WsContextListener", false);\n \n \t@Bean\n-\tpublic TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() {\n-\t\tTomcatEmbeddedServletContainerFactory factory = new TomcatEmbeddedServletContainerFactory() {\n+\t@ConditionalOnMissingBean(name = "websocketContainerCustomizer")\n+\tpublic EmbeddedServletContainerCustomizer websocketContainerCustomizer() {\n+\n+\t\tEmbeddedServletContainerCustomizer customizer = new EmbeddedServletContainerCustomizer() {\n+\n \t\t\t@Override\n-\t\t\tprotected void postProcessContext(Context context) {\n-\t\t\t\tcontext.addApplicationListener(WS_APPLICATION_LISTENER);\n+\t\t\tpublic void customize(ConfigurableEmbeddedServletContainer container) {\n+\t\t\t\tif (!(container instanceof TomcatEmbeddedServletContainerFactory)) {\n+\t\t\t\t\tthrow new IllegalStateException(\n+\t\t\t\t\t\t\t"Websockets are currently only supported in Tomcat (found "\n+\t\t\t\t\t\t\t\t\t+ container.getClass() + ")");\n+\t\t\t\t}\n+\t\t\t\t((TomcatEmbeddedServletContainerFactory) container)\n+\t\t\t\t\t\t.addContextCustomizers(new TomcatContextCustomizer() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic void customize(Context context) {\n+\t\t\t\t\t\t\t\tcontext.addApplicationListener(WS_APPLICATION_LISTENER);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t});\n \t\t\t}\n+\n \t\t};\n-\t\treturn factory;\n+\n+\t\treturn customizer;\n+\n \t}\n \n }\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.websocket;\n\nimport javax.servlet.Servlet;\n\nimport org.apache.catalina.Context;\nimport org.apache.catalina.deploy.ApplicationListener;\nimport org.apache.catalina.startup.Tomcat;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration;\nimport org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainer;\nimport org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;\nimport org.springframework.boot.context.embedded.tomcat.TomcatContextCustomizer;\nimport org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.socket.WebSocketHandler;\n\n/**\n * Auto configuration for websocket server in embedded Tomcat. If\n * <code>spring-websocket</code> is detected on the classpath then we add a listener that\n * installs the Tomcat Websocket initializer. In a non-embedded container it should\n * already be there.\n * \n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnClass(name = "org.apache.tomcat.websocket.server.WsSci", value = {\n\t\tServlet.class, Tomcat.class, WebSocketHandler.class })\n@AutoConfigureBefore(EmbeddedServletContainerAutoConfiguration.class)\npublic class WebSocketAutoConfiguration {\n\n\tprivate static final ApplicationListener WS_APPLICATION_LISTENER = new ApplicationListener(\n\t\t\t"org.apache.tomcat.websocket.server.WsContextListener", false);\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "websocketContainerCustomizer")\n\tpublic EmbeddedServletContainerCustomizer websocketContainerCustomizer() {\n\n\t\tEmbeddedServletContainerCustomizer customizer = new EmbeddedServletContainerCustomizer() {\n\n\t\t\t@Override\n\t\t\tpublic void customize(ConfigurableEmbeddedServletContainer container) {\n\t\t\t\tif (!(container instanceof TomcatEmbeddedServletContainerFactory)) {\n\t\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t\t"Websockets are currently only supported in Tomcat (found "\n\t\t\t\t\t\t\t\t\t+ container.getClass() + ")");\n\t\t\t\t}\n\t\t\t\t((TomcatEmbeddedServletContainerFactory) container)\n\t\t\t\t\t\t.addContextCustomizers(new TomcatContextCustomizer() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void customize(Context context) {\n\t\t\t\t\t\t\t\tcontext.addApplicationListener(WS_APPLICATION_LISTENER);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t}\n\n\t\t};\n\n\t\treturn customizer;\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.websocket;\n\nimport javax.servlet.Servlet;\n\nimport org.apache.catalina.Context;\nimport org.apache.catalina.deploy.ApplicationListener;\nimport org.apache.catalina.startup.Tomcat;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration;\nimport org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.socket.WebSocketHandler;\n\n/**\n * Auto configuration for websocket server in embedded Tomcat. If\n * <code>spring-websocket</code> is detected on the classpath then we add a listener that\n * installs the Tomcat Websocket initializer. In a non-embedded container it should\n * already be there.\n * \n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnClass(name = "org.apache.tomcat.websocket.server.WsSci", value = {\n\t\tServlet.class, Tomcat.class, WebSocketHandler.class })\n@AutoConfigureBefore(EmbeddedServletContainerAutoConfiguration.class)\npublic class WebSocketAutoConfiguration {\n\n\tprivate static final ApplicationListener WS_APPLICATION_LISTENER = new ApplicationListener(\n\t\t\t"org.apache.tomcat.websocket.server.WsContextListener", false);\n\n\t@Bean\n\tpublic TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() {\n\t\tTomcatEmbeddedServletContainerFactory factory = new TomcatEmbeddedServletContainerFactory() {\n\t\t\t@Override\n\t\t\tprotected void postProcessContext(Context context) {\n\t\t\t\tcontext.addApplicationListener(WS_APPLICATION_LISTENER);\n\t\t\t}\n\t\t};\n\t\treturn factory;\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
