@@ -0,0 +1,88 @@
+
+
+package org.springframework.boot.actuate.autoconfigure;
+
+import javax.sql.DataSource;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.actuate.endpoint.DataSourcePublicMetrics;
+import org.springframework.boot.actuate.endpoint.MetricReaderPublicMetrics;
+import org.springframework.boot.actuate.endpoint.PublicMetrics;
+import org.springframework.boot.actuate.endpoint.RichGaugeReaderPublicMetrics;
+import org.springframework.boot.actuate.endpoint.SystemPublicMetrics;
+import org.springframework.boot.actuate.metrics.reader.MetricReader;
+import org.springframework.boot.actuate.metrics.repository.InMemoryMetricRepository;
+import org.springframework.boot.actuate.metrics.rich.RichGaugeReader;
+import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.AutoConfigureBefore;
+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;
+import org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvider;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+
+@Configuration
+@AutoConfigureAfter({ DataSourceAutoConfiguration.class,
+		MetricRepositoryAutoConfiguration.class })
+@AutoConfigureBefore(EndpointAutoConfiguration.class)
+public class PublicMetricsAutoConfiguration {
+
+	@Autowired(required = false)
+	private MetricReader metricReader = new InMemoryMetricRepository();
+
+	@Bean
+	public SystemPublicMetrics systemPublicMetrics() {
+		return new SystemPublicMetrics();
+	}
+
+	@Bean
+	public MetricReaderPublicMetrics metricReaderPublicMetrics() {
+		return new MetricReaderPublicMetrics(this.metricReader);
+	}
+
+	@Bean
+	@ConditionalOnBean(RichGaugeReader.class)
+	public RichGaugeReaderPublicMetrics richGaugePublicMetrics(
+			RichGaugeReader richGaugeReader) {
+		return new RichGaugeReaderPublicMetrics(richGaugeReader);
+	}
+
+	@Configuration
+	@ConditionalOnClass(DataSource.class)
+	@ConditionalOnBean(DataSource.class)
+	static class DataSourceMetricsConfiguration {
+
+		@Bean
+		@ConditionalOnMissingBean
+		@ConditionalOnBean(DataSourcePoolMetadataProvider.class)
+		public DataSourcePublicMetrics dataSourcePublicMetrics() {
+			return new DataSourcePublicMetrics();
+		}
+
+	}
+
+}

