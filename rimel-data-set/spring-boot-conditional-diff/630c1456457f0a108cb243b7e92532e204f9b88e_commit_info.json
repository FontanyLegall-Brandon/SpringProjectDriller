{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -19,10 +19,14 @@ package org.springframework.boot.autoconfigure.jms.hornetq;\n import javax.jms.ConnectionFactory;\n \n import org.hornetq.api.jms.HornetQJMSClient;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration;\n+import org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration;\n+import org.springframework.boot.autoconfigure.jta.JtaAutoConfiguration;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Import;\n@@ -40,7 +44,10 @@ import org.springframework.context.annotation.Import;\n  */\n @Configuration\n @AutoConfigureBefore(JmsAutoConfiguration.class)\n+@AutoConfigureAfter({ JtaAutoConfiguration.class,\n+\t\tJndiConnectionFactoryAutoConfiguration.class })\n @ConditionalOnClass({ ConnectionFactory.class, HornetQJMSClient.class })\n+@ConditionalOnMissingBean(ConnectionFactory.class)\n @EnableConfigurationProperties(HornetQProperties.class)\n @Import({ HornetQEmbeddedServerConfiguration.class,\n \t\tHornetQXAConnectionFactoryConfiguration.class,\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jms.hornetq;\n\nimport javax.jms.ConnectionFactory;\n\nimport org.hornetq.api.jms.HornetQJMSClient;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jta.JtaAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to integrate with an HornetQ broker.\n * If the necessary classes are present, embed the broker in the application by default.\n * Otherwise, connect to a broker available on the local machine with the default\n * settings.\n *\n * @author Stephane Nicoll\n * @author Phillip Webb\n * @since 1.1.0\n * @see HornetQProperties\n */\n@Configuration\n@AutoConfigureBefore(JmsAutoConfiguration.class)\n@AutoConfigureAfter({ JtaAutoConfiguration.class,\n\t\tJndiConnectionFactoryAutoConfiguration.class })\n@ConditionalOnClass({ ConnectionFactory.class, HornetQJMSClient.class })\n@ConditionalOnMissingBean(ConnectionFactory.class)\n@EnableConfigurationProperties(HornetQProperties.class)\n@Import({ HornetQEmbeddedServerConfiguration.class,\n\t\tHornetQXAConnectionFactoryConfiguration.class,\n\t\tHornetQConnectionFactoryConfiguration.class })\npublic class HornetQAutoConfiguration {\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jms.hornetq;\n\nimport javax.jms.ConnectionFactory;\n\nimport org.hornetq.api.jms.HornetQJMSClient;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to integrate with an HornetQ broker.\n * If the necessary classes are present, embed the broker in the application by default.\n * Otherwise, connect to a broker available on the local machine with the default\n * settings.\n *\n * @author Stephane Nicoll\n * @author Phillip Webb\n * @since 1.1.0\n * @see HornetQProperties\n */\n@Configuration\n@AutoConfigureBefore(JmsAutoConfiguration.class)\n@ConditionalOnClass({ ConnectionFactory.class, HornetQJMSClient.class })\n@EnableConfigurationProperties(HornetQProperties.class)\n@Import({ HornetQEmbeddedServerConfiguration.class,\n\t\tHornetQXAConnectionFactoryConfiguration.class,\n\t\tHornetQConnectionFactoryConfiguration.class })\npublic class HornetQAutoConfiguration {\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
