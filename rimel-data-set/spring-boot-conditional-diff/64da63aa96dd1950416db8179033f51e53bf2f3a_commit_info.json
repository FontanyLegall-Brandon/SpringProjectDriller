{'_old_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/NoneNestedConditionsTests.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/NoneNestedConditionsTests.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -21,8 +21,11 @@ import org.junit.Test;\n import org.springframework.boot.test.util.EnvironmentTestUtils;\n import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Condition;\n+import org.springframework.context.annotation.ConditionContext;\n import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.type.AnnotatedTypeMetadata;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n@@ -94,6 +97,20 @@ public class NoneNestedConditionsTests {\n \n \t\t}\n \n+\t\t@Conditional(NonSpringBootCondition.class)\n+\t\tstatic class SubClassC {\n+\n+\t\t}\n+\n+\t}\n+\n+\tstatic class NonSpringBootCondition implements Condition {\n+\n+\t\t@Override\n+\t\tpublic boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n+\t\t\treturn false;\n+\t\t}\n+\n \t}\n \n }\n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport org.junit.Test;\n\nimport org.springframework.boot.test.util.EnvironmentTestUtils;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Condition;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link NoneNestedConditions}.\n */\npublic class NoneNestedConditionsTests {\n\n\t@Test\n\tpublic void neither() throws Exception {\n\t\tAnnotationConfigApplicationContext context = load(Config.class);\n\t\tassertThat(context.containsBean("myBean")).isTrue();\n\t\tcontext.close();\n\t}\n\n\t@Test\n\tpublic void propertyA() throws Exception {\n\t\tAnnotationConfigApplicationContext context = load(Config.class, "a:a");\n\t\tassertThat(context.containsBean("myBean")).isFalse();\n\t\tcontext.close();\n\t}\n\n\t@Test\n\tpublic void propertyB() throws Exception {\n\t\tAnnotationConfigApplicationContext context = load(Config.class, "b:b");\n\t\tassertThat(context.containsBean("myBean")).isFalse();\n\t\tcontext.close();\n\t}\n\n\t@Test\n\tpublic void both() throws Exception {\n\t\tAnnotationConfigApplicationContext context = load(Config.class, "a:a", "b:b");\n\t\tassertThat(context.containsBean("myBean")).isFalse();\n\t\tcontext.close();\n\t}\n\n\tprivate AnnotationConfigApplicationContext load(Class<?> config, String... env) {\n\t\tAnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n\t\tEnvironmentTestUtils.addEnvironment(context, env);\n\t\tcontext.register(config);\n\t\tcontext.refresh();\n\t\treturn context;\n\t}\n\n\t@Configuration\n\t@Conditional(NeitherPropertyANorPropertyBCondition.class)\n\tpublic static class Config {\n\n\t\t@Bean\n\t\tpublic String myBean() {\n\t\t\treturn "myBean";\n\t\t}\n\n\t}\n\n\tstatic class NeitherPropertyANorPropertyBCondition extends NoneNestedConditions {\n\n\t\tNeitherPropertyANorPropertyBCondition() {\n\t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION);\n\t\t}\n\n\t\t@ConditionalOnProperty("a")\n\t\tstatic class HasPropertyA {\n\n\t\t}\n\n\t\t@ConditionalOnProperty("b")\n\t\tstatic class HasPropertyB {\n\n\t\t}\n\n\t\t@Conditional(NonSpringBootCondition.class)\n\t\tstatic class SubClassC {\n\n\t\t}\n\n\t}\n\n\tstatic class NonSpringBootCondition implements Condition {\n\n\t\t@Override\n\t\tpublic boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n\t\t\treturn false;\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport org.junit.Test;\n\nimport org.springframework.boot.test.util.EnvironmentTestUtils;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link NoneNestedConditions}.\n */\npublic class NoneNestedConditionsTests {\n\n\t@Test\n\tpublic void neither() throws Exception {\n\t\tAnnotationConfigApplicationContext context = load(Config.class);\n\t\tassertThat(context.containsBean("myBean")).isTrue();\n\t\tcontext.close();\n\t}\n\n\t@Test\n\tpublic void propertyA() throws Exception {\n\t\tAnnotationConfigApplicationContext context = load(Config.class, "a:a");\n\t\tassertThat(context.containsBean("myBean")).isFalse();\n\t\tcontext.close();\n\t}\n\n\t@Test\n\tpublic void propertyB() throws Exception {\n\t\tAnnotationConfigApplicationContext context = load(Config.class, "b:b");\n\t\tassertThat(context.containsBean("myBean")).isFalse();\n\t\tcontext.close();\n\t}\n\n\t@Test\n\tpublic void both() throws Exception {\n\t\tAnnotationConfigApplicationContext context = load(Config.class, "a:a", "b:b");\n\t\tassertThat(context.containsBean("myBean")).isFalse();\n\t\tcontext.close();\n\t}\n\n\tprivate AnnotationConfigApplicationContext load(Class<?> config, String... env) {\n\t\tAnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n\t\tEnvironmentTestUtils.addEnvironment(context, env);\n\t\tcontext.register(config);\n\t\tcontext.refresh();\n\t\treturn context;\n\t}\n\n\t@Configuration\n\t@Conditional(NeitherPropertyANorPropertyBCondition.class)\n\tpublic static class Config {\n\n\t\t@Bean\n\t\tpublic String myBean() {\n\t\t\treturn "myBean";\n\t\t}\n\n\t}\n\n\tstatic class NeitherPropertyANorPropertyBCondition extends NoneNestedConditions {\n\n\t\tNeitherPropertyANorPropertyBCondition() {\n\t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION);\n\t\t}\n\n\t\t@ConditionalOnProperty("a")\n\t\tstatic class HasPropertyA {\n\n\t\t}\n\n\t\t@ConditionalOnProperty("b")\n\t\tstatic class HasPropertyB {\n\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
