{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQConnectionFactoryConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQConnectionFactoryConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -48,47 +48,45 @@ import org.springframework.jms.connection.CachingConnectionFactory;\n @ConditionalOnMissingBean(ConnectionFactory.class)\n class ActiveMQConnectionFactoryConfiguration {\n \n+\tprivate static ActiveMQConnectionFactory createConnectionFactory(ActiveMQProperties properties,\n+\t\t\tList<ActiveMQConnectionFactoryCustomizer> connectionFactoryCustomizers) {\n+\t\treturn new ActiveMQConnectionFactoryFactory(properties, connectionFactoryCustomizers)\n+\t\t\t\t.createConnectionFactory(ActiveMQConnectionFactory.class);\n+\t}\n+\n \t@Configuration\n-\t@ConditionalOnClass(CachingConnectionFactory.class)\n \t@ConditionalOnProperty(prefix = "spring.activemq.pool", name = "enabled", havingValue = "false",\n \t\t\tmatchIfMissing = true)\n \tstatic class SimpleConnectionFactoryConfiguration {\n \n-\t\tprivate final JmsProperties jmsProperties;\n-\n-\t\tprivate final ActiveMQProperties properties;\n-\n-\t\tprivate final List<ActiveMQConnectionFactoryCustomizer> connectionFactoryCustomizers;\n-\n-\t\tSimpleConnectionFactoryConfiguration(JmsProperties jmsProperties, ActiveMQProperties properties,\n+\t\t@Bean\n+\t\t@ConditionalOnProperty(prefix = "spring.jms.cache", name = "enabled", havingValue = "false")\n+\t\tpublic ActiveMQConnectionFactory jmsConnectionFactory(ActiveMQProperties properties,\n \t\t\t\tObjectProvider<ActiveMQConnectionFactoryCustomizer> connectionFactoryCustomizers) {\n-\t\t\tthis.jmsProperties = jmsProperties;\n-\t\t\tthis.properties = properties;\n-\t\t\tthis.connectionFactoryCustomizers = connectionFactoryCustomizers.orderedStream()\n-\t\t\t\t\t.collect(Collectors.toList());\n+\t\t\treturn createConnectionFactory(properties,\n+\t\t\t\t\tconnectionFactoryCustomizers.orderedStream().collect(Collectors.toList()));\n \t\t}\n \n-\t\t@Bean\n+\t\t@ConditionalOnClass(CachingConnectionFactory.class)\n \t\t@ConditionalOnProperty(prefix = "spring.jms.cache", name = "enabled", havingValue = "true",\n \t\t\t\tmatchIfMissing = true)\n-\t\tpublic CachingConnectionFactory cachingJmsConnectionFactory() {\n-\t\t\tJmsProperties.Cache cacheProperties = this.jmsProperties.getCache();\n-\t\t\tCachingConnectionFactory connectionFactory = new CachingConnectionFactory(createConnectionFactory());\n-\t\t\tconnectionFactory.setCacheConsumers(cacheProperties.isConsumers());\n-\t\t\tconnectionFactory.setCacheProducers(cacheProperties.isProducers());\n-\t\t\tconnectionFactory.setSessionCacheSize(cacheProperties.getSessionCacheSize());\n-\t\t\treturn connectionFactory;\n-\t\t}\n-\n-\t\t@Bean\n-\t\t@ConditionalOnProperty(prefix = "spring.jms.cache", name = "enabled", havingValue = "false")\n-\t\tpublic ActiveMQConnectionFactory jmsConnectionFactory() {\n-\t\t\treturn createConnectionFactory();\n-\t\t}\n+\t\tstatic class CachingConnectionFactoryConfiguration {\n+\n+\t\t\t@Bean\n+\t\t\t@ConditionalOnProperty(prefix = "spring.jms.cache", name = "enabled", havingValue = "true",\n+\t\t\t\t\tmatchIfMissing = true)\n+\t\t\tpublic CachingConnectionFactory cachingJmsConnectionFactory(JmsProperties jmsProperties,\n+\t\t\t\t\tActiveMQProperties properties,\n+\t\t\t\t\tObjectProvider<ActiveMQConnectionFactoryCustomizer> connectionFactoryCustomizers) {\n+\t\t\t\tJmsProperties.Cache cacheProperties = jmsProperties.getCache();\n+\t\t\t\tCachingConnectionFactory connectionFactory = new CachingConnectionFactory(createConnectionFactory(\n+\t\t\t\t\t\tproperties, connectionFactoryCustomizers.orderedStream().collect(Collectors.toList())));\n+\t\t\t\tconnectionFactory.setCacheConsumers(cacheProperties.isConsumers());\n+\t\t\t\tconnectionFactory.setCacheProducers(cacheProperties.isProducers());\n+\t\t\t\tconnectionFactory.setSessionCacheSize(cacheProperties.getSessionCacheSize());\n+\t\t\t\treturn connectionFactory;\n+\t\t\t}\n \n-\t\tprivate ActiveMQConnectionFactory createConnectionFactory() {\n-\t\t\treturn new ActiveMQConnectionFactoryFactory(this.properties, this.connectionFactoryCustomizers)\n-\t\t\t\t\t.createConnectionFactory(ActiveMQConnectionFactory.class);\n \t\t}\n \n \t}\n@@ -98,13 +96,11 @@ class ActiveMQConnectionFactoryConfiguration {\n \tstatic class PooledConnectionFactoryConfiguration {\n \n \t\t@Bean(destroyMethod = "stop")\n-\t\t@ConditionalOnProperty(prefix = "spring.activemq.pool", name = "enabled", havingValue = "true",\n-\t\t\t\tmatchIfMissing = false)\n+\t\t@ConditionalOnProperty(prefix = "spring.activemq.pool", name = "enabled", havingValue = "true")\n \t\tpublic JmsPoolConnectionFactory pooledJmsConnectionFactory(ActiveMQProperties properties,\n \t\t\t\tObjectProvider<ActiveMQConnectionFactoryCustomizer> factoryCustomizers) {\n-\t\t\tActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactoryFactory(properties,\n-\t\t\t\t\tfactoryCustomizers.orderedStream().collect(Collectors.toList()))\n-\t\t\t\t\t\t\t.createConnectionFactory(ActiveMQConnectionFactory.class);\n+\t\t\tActiveMQConnectionFactory connectionFactory = createConnectionFactory(properties,\n+\t\t\t\t\tfactoryCustomizers.orderedStream().collect(Collectors.toList()));\n \t\t\treturn new JmsPoolConnectionFactoryFactory(properties.getPool())\n \t\t\t\t\t.createPooledConnectionFactory(connectionFactory);\n \t\t}\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jms.activemq;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nimport javax.jms.ConnectionFactory;\n\nimport org.apache.activemq.ActiveMQConnectionFactory;\nimport org.apache.commons.pool2.PooledObject;\nimport org.messaginghub.pooled.jms.JmsPoolConnectionFactory;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.jms.JmsPoolConnectionFactoryFactory;\nimport org.springframework.boot.autoconfigure.jms.JmsProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jms.connection.CachingConnectionFactory;\n\n/**\n * Configuration for ActiveMQ {@link ConnectionFactory}.\n *\n * @author Greg Turnquist\n * @author Stephane Nicoll\n * @author Phillip Webb\n * @author Andy Wilkinson\n * @author Aur√©lien Leboulanger\n */\n@Configuration\n@ConditionalOnMissingBean(ConnectionFactory.class)\nclass ActiveMQConnectionFactoryConfiguration {\n\n\tprivate static ActiveMQConnectionFactory createConnectionFactory(ActiveMQProperties properties,\n\t\t\tList<ActiveMQConnectionFactoryCustomizer> connectionFactoryCustomizers) {\n\t\treturn new ActiveMQConnectionFactoryFactory(properties, connectionFactoryCustomizers)\n\t\t\t\t.createConnectionFactory(ActiveMQConnectionFactory.class);\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "spring.activemq.pool", name = "enabled", havingValue = "false",\n\t\t\tmatchIfMissing = true)\n\tstatic class SimpleConnectionFactoryConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnProperty(prefix = "spring.jms.cache", name = "enabled", havingValue = "false")\n\t\tpublic ActiveMQConnectionFactory jmsConnectionFactory(ActiveMQProperties properties,\n\t\t\t\tObjectProvider<ActiveMQConnectionFactoryCustomizer> connectionFactoryCustomizers) {\n\t\t\treturn createConnectionFactory(properties,\n\t\t\t\t\tconnectionFactoryCustomizers.orderedStream().collect(Collectors.toList()));\n\t\t}\n\n\t\t@ConditionalOnClass(CachingConnectionFactory.class)\n\t\t@ConditionalOnProperty(prefix = "spring.jms.cache", name = "enabled", havingValue = "true",\n\t\t\t\tmatchIfMissing = true)\n\t\tstatic class CachingConnectionFactoryConfiguration {\n\n\t\t\t@Bean\n\t\t\t@ConditionalOnProperty(prefix = "spring.jms.cache", name = "enabled", havingValue = "true",\n\t\t\t\t\tmatchIfMissing = true)\n\t\t\tpublic CachingConnectionFactory cachingJmsConnectionFactory(JmsProperties jmsProperties,\n\t\t\t\t\tActiveMQProperties properties,\n\t\t\t\t\tObjectProvider<ActiveMQConnectionFactoryCustomizer> connectionFactoryCustomizers) {\n\t\t\t\tJmsProperties.Cache cacheProperties = jmsProperties.getCache();\n\t\t\t\tCachingConnectionFactory connectionFactory = new CachingConnectionFactory(createConnectionFactory(\n\t\t\t\t\t\tproperties, connectionFactoryCustomizers.orderedStream().collect(Collectors.toList())));\n\t\t\t\tconnectionFactory.setCacheConsumers(cacheProperties.isConsumers());\n\t\t\t\tconnectionFactory.setCacheProducers(cacheProperties.isProducers());\n\t\t\t\tconnectionFactory.setSessionCacheSize(cacheProperties.getSessionCacheSize());\n\t\t\t\treturn connectionFactory;\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ JmsPoolConnectionFactory.class, PooledObject.class })\n\tstatic class PooledConnectionFactoryConfiguration {\n\n\t\t@Bean(destroyMethod = "stop")\n\t\t@ConditionalOnProperty(prefix = "spring.activemq.pool", name = "enabled", havingValue = "true")\n\t\tpublic JmsPoolConnectionFactory pooledJmsConnectionFactory(ActiveMQProperties properties,\n\t\t\t\tObjectProvider<ActiveMQConnectionFactoryCustomizer> factoryCustomizers) {\n\t\t\tActiveMQConnectionFactory connectionFactory = createConnectionFactory(properties,\n\t\t\t\t\tfactoryCustomizers.orderedStream().collect(Collectors.toList()));\n\t\t\treturn new JmsPoolConnectionFactoryFactory(properties.getPool())\n\t\t\t\t\t.createPooledConnectionFactory(connectionFactory);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jms.activemq;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nimport javax.jms.ConnectionFactory;\n\nimport org.apache.activemq.ActiveMQConnectionFactory;\nimport org.apache.commons.pool2.PooledObject;\nimport org.messaginghub.pooled.jms.JmsPoolConnectionFactory;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.jms.JmsPoolConnectionFactoryFactory;\nimport org.springframework.boot.autoconfigure.jms.JmsProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jms.connection.CachingConnectionFactory;\n\n/**\n * Configuration for ActiveMQ {@link ConnectionFactory}.\n *\n * @author Greg Turnquist\n * @author Stephane Nicoll\n * @author Phillip Webb\n * @author Andy Wilkinson\n * @author Aur√©lien Leboulanger\n */\n@Configuration\n@ConditionalOnMissingBean(ConnectionFactory.class)\nclass ActiveMQConnectionFactoryConfiguration {\n\n\t@Configuration\n\t@ConditionalOnClass(CachingConnectionFactory.class)\n\t@ConditionalOnProperty(prefix = "spring.activemq.pool", name = "enabled", havingValue = "false",\n\t\t\tmatchIfMissing = true)\n\tstatic class SimpleConnectionFactoryConfiguration {\n\n\t\tprivate final JmsProperties jmsProperties;\n\n\t\tprivate final ActiveMQProperties properties;\n\n\t\tprivate final List<ActiveMQConnectionFactoryCustomizer> connectionFactoryCustomizers;\n\n\t\tSimpleConnectionFactoryConfiguration(JmsProperties jmsProperties, ActiveMQProperties properties,\n\t\t\t\tObjectProvider<ActiveMQConnectionFactoryCustomizer> connectionFactoryCustomizers) {\n\t\t\tthis.jmsProperties = jmsProperties;\n\t\t\tthis.properties = properties;\n\t\t\tthis.connectionFactoryCustomizers = connectionFactoryCustomizers.orderedStream()\n\t\t\t\t\t.collect(Collectors.toList());\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnProperty(prefix = "spring.jms.cache", name = "enabled", havingValue = "true",\n\t\t\t\tmatchIfMissing = true)\n\t\tpublic CachingConnectionFactory cachingJmsConnectionFactory() {\n\t\t\tJmsProperties.Cache cacheProperties = this.jmsProperties.getCache();\n\t\t\tCachingConnectionFactory connectionFactory = new CachingConnectionFactory(createConnectionFactory());\n\t\t\tconnectionFactory.setCacheConsumers(cacheProperties.isConsumers());\n\t\t\tconnectionFactory.setCacheProducers(cacheProperties.isProducers());\n\t\t\tconnectionFactory.setSessionCacheSize(cacheProperties.getSessionCacheSize());\n\t\t\treturn connectionFactory;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnProperty(prefix = "spring.jms.cache", name = "enabled", havingValue = "false")\n\t\tpublic ActiveMQConnectionFactory jmsConnectionFactory() {\n\t\t\treturn createConnectionFactory();\n\t\t}\n\n\t\tprivate ActiveMQConnectionFactory createConnectionFactory() {\n\t\t\treturn new ActiveMQConnectionFactoryFactory(this.properties, this.connectionFactoryCustomizers)\n\t\t\t\t\t.createConnectionFactory(ActiveMQConnectionFactory.class);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ JmsPoolConnectionFactory.class, PooledObject.class })\n\tstatic class PooledConnectionFactoryConfiguration {\n\n\t\t@Bean(destroyMethod = "stop")\n\t\t@ConditionalOnProperty(prefix = "spring.activemq.pool", name = "enabled", havingValue = "true",\n\t\t\t\tmatchIfMissing = false)\n\t\tpublic JmsPoolConnectionFactory pooledJmsConnectionFactory(ActiveMQProperties properties,\n\t\t\t\tObjectProvider<ActiveMQConnectionFactoryCustomizer> factoryCustomizers) {\n\t\t\tActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactoryFactory(properties,\n\t\t\t\t\tfactoryCustomizers.orderedStream().collect(Collectors.toList()))\n\t\t\t\t\t\t\t.createConnectionFactory(ActiveMQConnectionFactory.class);\n\t\t\treturn new JmsPoolConnectionFactoryFactory(properties.getPool())\n\t\t\t\t\t.createPooledConnectionFactory(connectionFactory);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
