{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jmx/JmxAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jmx/JmxAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -18,6 +18,8 @@ package org.springframework.boot.autoconfigure.jmx;\n \n import javax.management.MBeanServer;\n \n+import org.springframework.beans.factory.BeanFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n@@ -26,7 +28,13 @@ import org.springframework.boot.autoconfigure.condition.SearchStrategy;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.EnableMBeanExport;\n+import org.springframework.context.annotation.MBeanExportConfiguration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.core.type.StandardAnnotationMetadata;\n import org.springframework.jmx.export.MBeanExporter;\n+import org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource;\n+import org.springframework.jmx.export.annotation.AnnotationMBeanExporter;\n+import org.springframework.jmx.export.naming.ObjectNamingStrategy;\n import org.springframework.jmx.support.MBeanServerFactoryBean;\n \n /**\n@@ -42,10 +50,33 @@ import org.springframework.jmx.support.MBeanServerFactoryBean;\n @ConditionalOnExpression("${spring.jmx.enabled:true}")\n public class JmxAutoConfiguration {\n \n-\t@Configuration\n+\t@Autowired\n+\tprivate Environment environment;\n+\n+\t@Autowired\n+\tprivate BeanFactory beanFactory;\n+\n+\t@Autowired\n+\tprivate ObjectNamingStrategy namingStrategy;\n+\n+\t@Bean\n \t@ConditionalOnMissingBean(value = MBeanExporter.class, search = SearchStrategy.CURRENT)\n-\t@EnableMBeanExport(defaultDomain = "${spring.jmx.default_domain:}", server = "${spring.jmx.server:mbeanServer}")\n-\tpublic static class MBeanExport {\n+\tpublic AnnotationMBeanExporter mbeanExporter() {\n+\t\t// Re-use the @EnableMBeanExport configuration\n+\t\tMBeanExportConfiguration config = new MBeanExportConfiguration();\n+\t\tconfig.setEnvironment(this.environment);\n+\t\tconfig.setBeanFactory(this.beanFactory);\n+\t\tconfig.setImportMetadata(new StandardAnnotationMetadata(Empty.class));\n+\t\t// But add a custom naming strategy\n+\t\tAnnotationMBeanExporter exporter = config.mbeanExporter();\n+\t\texporter.setNamingStrategy(this.namingStrategy);\n+\t\treturn exporter;\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean(ObjectNamingStrategy.class)\n+\tpublic ParentAwareNamingStrategy objectNamingStrategy() {\n+\t\treturn new ParentAwareNamingStrategy(new AnnotationJmxAttributeSource());\n \t}\n \n \t@Bean\n@@ -56,4 +87,9 @@ public class JmxAutoConfiguration {\n \t\treturn factory;\n \t}\n \n+\t@EnableMBeanExport(defaultDomain = "${spring.jmx.default_domain:}", server = "${spring.jmx.server:mbeanServer}")\n+\tprivate static class Empty {\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jmx;\n\nimport javax.management.MBeanServer;\n\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.EnableMBeanExport;\nimport org.springframework.context.annotation.MBeanExportConfiguration;\nimport org.springframework.core.env.Environment;\nimport org.springframework.core.type.StandardAnnotationMetadata;\nimport org.springframework.jmx.export.MBeanExporter;\nimport org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource;\nimport org.springframework.jmx.export.annotation.AnnotationMBeanExporter;\nimport org.springframework.jmx.export.naming.ObjectNamingStrategy;\nimport org.springframework.jmx.support.MBeanServerFactoryBean;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to enable/disable Spring\'s\n * {@link EnableMBeanExport} mechanism based on configuration properties.\n * <p>\n * To disable auto export of annotation beans set <code>spring.jmx.enabled: false</code>.\n * \n * @author Christian Dupuis\n */\n@Configuration\n@ConditionalOnClass({ MBeanExporter.class })\n@ConditionalOnExpression("${spring.jmx.enabled:true}")\npublic class JmxAutoConfiguration {\n\n\t@Autowired\n\tprivate Environment environment;\n\n\t@Autowired\n\tprivate BeanFactory beanFactory;\n\n\t@Autowired\n\tprivate ObjectNamingStrategy namingStrategy;\n\n\t@Bean\n\t@ConditionalOnMissingBean(value = MBeanExporter.class, search = SearchStrategy.CURRENT)\n\tpublic AnnotationMBeanExporter mbeanExporter() {\n\t\t// Re-use the @EnableMBeanExport configuration\n\t\tMBeanExportConfiguration config = new MBeanExportConfiguration();\n\t\tconfig.setEnvironment(this.environment);\n\t\tconfig.setBeanFactory(this.beanFactory);\n\t\tconfig.setImportMetadata(new StandardAnnotationMetadata(Empty.class));\n\t\t// But add a custom naming strategy\n\t\tAnnotationMBeanExporter exporter = config.mbeanExporter();\n\t\texporter.setNamingStrategy(this.namingStrategy);\n\t\treturn exporter;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(ObjectNamingStrategy.class)\n\tpublic ParentAwareNamingStrategy objectNamingStrategy() {\n\t\treturn new ParentAwareNamingStrategy(new AnnotationJmxAttributeSource());\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(MBeanServer.class)\n\tpublic MBeanServerFactoryBean mbeanServer() {\n\t\tMBeanServerFactoryBean factory = new MBeanServerFactoryBean();\n\t\tfactory.setLocateExistingServerIfPossible(true);\n\t\treturn factory;\n\t}\n\n\t@EnableMBeanExport(defaultDomain = "${spring.jmx.default_domain:}", server = "${spring.jmx.server:mbeanServer}")\n\tprivate static class Empty {\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jmx;\n\nimport javax.management.MBeanServer;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.EnableMBeanExport;\nimport org.springframework.jmx.export.MBeanExporter;\nimport org.springframework.jmx.support.MBeanServerFactoryBean;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to enable/disable Spring\'s\n * {@link EnableMBeanExport} mechanism based on configuration properties.\n * <p>\n * To disable auto export of annotation beans set <code>spring.jmx.enabled: false</code>.\n * \n * @author Christian Dupuis\n */\n@Configuration\n@ConditionalOnClass({ MBeanExporter.class })\n@ConditionalOnExpression("${spring.jmx.enabled:true}")\npublic class JmxAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnMissingBean(value = MBeanExporter.class, search = SearchStrategy.CURRENT)\n\t@EnableMBeanExport(defaultDomain = "${spring.jmx.default_domain:}", server = "${spring.jmx.server:mbeanServer}")\n\tpublic static class MBeanExport {\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(MBeanServer.class)\n\tpublic MBeanServerFactoryBean mbeanServer() {\n\t\tMBeanServerFactoryBean factory = new MBeanServerFactoryBean();\n\t\tfactory.setLocateExistingServerIfPossible(true);\n\t\treturn factory;\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
