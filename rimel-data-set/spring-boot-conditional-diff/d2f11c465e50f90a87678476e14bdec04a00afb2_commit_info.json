{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/GuavaCacheConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/GuavaCacheConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -40,7 +40,7 @@ import com.google.common.cache.CacheLoader;\n  * @since 1.3.0\n  */\n @Configuration\n-@ConditionalOnClass({CacheBuilder.class,GuavaCacheManager.class})\n+@ConditionalOnClass({ CacheBuilder.class, GuavaCacheManager.class })\n @ConditionalOnMissingBean(CacheManager.class)\n @Conditional(CacheCondition.class)\n class GuavaCacheConfiguration {\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.cache;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.cache.CacheManager;\nimport org.springframework.cache.guava.GuavaCacheManager;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.util.StringUtils;\n\nimport com.google.common.cache.CacheBuilder;\nimport com.google.common.cache.CacheBuilderSpec;\nimport com.google.common.cache.CacheLoader;\n\n/**\n * Guava cache configuration.\n *\n * @author Stephane Nicoll\n * @since 1.3.0\n */\n@Configuration\n@ConditionalOnClass({ CacheBuilder.class, GuavaCacheManager.class })\n@ConditionalOnMissingBean(CacheManager.class)\n@Conditional(CacheCondition.class)\nclass GuavaCacheConfiguration {\n\n\t@Autowired\n\tprivate CacheProperties cacheProperties;\n\n\t@Autowired(required = false)\n\tprivate CacheBuilder<Object, Object> cacheBuilder;\n\n\t@Autowired(required = false)\n\tprivate CacheBuilderSpec cacheBuilderSpec;\n\n\t@Autowired(required = false)\n\tprivate CacheLoader<Object, Object> cacheLoader;\n\n\t@Bean\n\tpublic GuavaCacheManager cacheManager() {\n\t\tGuavaCacheManager cacheManager = createCacheManager();\n\t\tList<String> cacheNames = this.cacheProperties.getCacheNames();\n\t\tif (!CollectionUtils.isEmpty(cacheNames)) {\n\t\t\tcacheManager.setCacheNames(cacheNames);\n\t\t}\n\t\treturn cacheManager;\n\t}\n\n\tprivate GuavaCacheManager createCacheManager() {\n\t\tGuavaCacheManager cacheManager = new GuavaCacheManager();\n\t\tsetCacheBuilder(cacheManager);\n\t\tif (this.cacheLoader != null) {\n\t\t\tcacheManager.setCacheLoader(this.cacheLoader);\n\t\t}\n\t\treturn cacheManager;\n\t}\n\n\tprivate void setCacheBuilder(GuavaCacheManager cacheManager) {\n\t\tString specification = this.cacheProperties.getGuava().getSpec();\n\t\tif (StringUtils.hasText(specification)) {\n\t\t\tcacheManager.setCacheSpecification(specification);\n\t\t}\n\t\telse if (this.cacheBuilderSpec != null) {\n\t\t\tcacheManager.setCacheBuilderSpec(this.cacheBuilderSpec);\n\t\t}\n\t\telse if (this.cacheBuilder != null) {\n\t\t\tcacheManager.setCacheBuilder(this.cacheBuilder);\n\t\t}\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.cache;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.cache.CacheManager;\nimport org.springframework.cache.guava.GuavaCacheManager;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.util.StringUtils;\n\nimport com.google.common.cache.CacheBuilder;\nimport com.google.common.cache.CacheBuilderSpec;\nimport com.google.common.cache.CacheLoader;\n\n/**\n * Guava cache configuration.\n *\n * @author Stephane Nicoll\n * @since 1.3.0\n */\n@Configuration\n@ConditionalOnClass({CacheBuilder.class,GuavaCacheManager.class})\n@ConditionalOnMissingBean(CacheManager.class)\n@Conditional(CacheCondition.class)\nclass GuavaCacheConfiguration {\n\n\t@Autowired\n\tprivate CacheProperties cacheProperties;\n\n\t@Autowired(required = false)\n\tprivate CacheBuilder<Object, Object> cacheBuilder;\n\n\t@Autowired(required = false)\n\tprivate CacheBuilderSpec cacheBuilderSpec;\n\n\t@Autowired(required = false)\n\tprivate CacheLoader<Object, Object> cacheLoader;\n\n\t@Bean\n\tpublic GuavaCacheManager cacheManager() {\n\t\tGuavaCacheManager cacheManager = createCacheManager();\n\t\tList<String> cacheNames = this.cacheProperties.getCacheNames();\n\t\tif (!CollectionUtils.isEmpty(cacheNames)) {\n\t\t\tcacheManager.setCacheNames(cacheNames);\n\t\t}\n\t\treturn cacheManager;\n\t}\n\n\tprivate GuavaCacheManager createCacheManager() {\n\t\tGuavaCacheManager cacheManager = new GuavaCacheManager();\n\t\tsetCacheBuilder(cacheManager);\n\t\tif (this.cacheLoader != null) {\n\t\t\tcacheManager.setCacheLoader(this.cacheLoader);\n\t\t}\n\t\treturn cacheManager;\n\t}\n\n\tprivate void setCacheBuilder(GuavaCacheManager cacheManager) {\n\t\tString specification = this.cacheProperties.getGuava().getSpec();\n\t\tif (StringUtils.hasText(specification)) {\n\t\t\tcacheManager.setCacheSpecification(specification);\n\t\t}\n\t\telse if (this.cacheBuilderSpec != null) {\n\t\t\tcacheManager.setCacheBuilderSpec(this.cacheBuilderSpec);\n\t\t}\n\t\telse if (this.cacheBuilder != null) {\n\t\t\tcacheManager.setCacheBuilder(this.cacheBuilder);\n\t\t}\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
