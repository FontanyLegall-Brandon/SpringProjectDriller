@@ -0,0 +1,80 @@
+
+
+package org.springframework.boot.actuate.autoconfigure.kafka;
+
+import java.time.Duration;
+import java.util.Map;
+
+import org.springframework.boot.actuate.autoconfigure.health.CompositeHealthIndicatorConfiguration;
+import org.springframework.boot.actuate.autoconfigure.health.ConditionalOnEnabledHealthIndicator;
+import org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration;
+import org.springframework.boot.actuate.health.HealthIndicator;
+import org.springframework.boot.actuate.kafka.KafkaHealthIndicator;
+import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.AutoConfigureBefore;
+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration;
+import org.springframework.boot.context.properties.EnableConfigurationProperties;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.kafka.core.KafkaAdmin;
+
+
+@Configuration
+@ConditionalOnEnabledHealthIndicator()
+@AutoConfigureBefore(HealthIndicatorAutoConfiguration.class)
+@AutoConfigureAfter(KafkaAutoConfiguration.class)
+public class KafkaHealthIndicatorAutoConfiguration {
+
+	@Configuration
+	@ConditionalOnBean(KafkaAdmin.class)
+	@EnableConfigurationProperties(KafkaHealthIndicatorProperties.class)
+	static class KafkaClientHealthIndicatorConfiguration extends
+			CompositeHealthIndicatorConfiguration<KafkaHealthIndicator, KafkaAdmin> {
+
+		private final Map<String, KafkaAdmin> admins;
+
+		private final KafkaHealthIndicatorProperties properties;
+
+		KafkaClientHealthIndicatorConfiguration(Map<String, KafkaAdmin> admins,
+				KafkaHealthIndicatorProperties properties) {
+			this.admins = admins;
+			this.properties = properties;
+		}
+
+		@Bean
+		@ConditionalOnMissingBean(name = )
+		public HealthIndicator kafkaHealthIndicator() {
+			return createHealthIndicator(this.admins);
+		}
+
+		@Override
+		protected KafkaHealthIndicator createHealthIndicator(KafkaAdmin source) {
+			Duration responseTimeout = this.properties.getResponseTimeout();
+
+			return new KafkaHealthIndicator(source,
+					responseTimeout == null ? 100L : responseTimeout.toMillis());
+		}
+	}
+
+}

