{'_old_path': PosixPath('spring-autoconfigure/src/main/java/org/springframework/autoconfigure/orm/jpa/JpaBaseConfiguration.java'), '_new_path': PosixPath('spring-autoconfigure/src/main/java/org/springframework/autoconfigure/orm/jpa/JpaBaseConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -54,8 +54,8 @@ import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter\n  * @author Phillip Webb\n  * @author Dave Syer\n  */\n-@ConditionalOnClass({ LocalContainerEntityManagerFactoryBean.class, EnableTransactionManagement.class,\n-\t\tEntityManager.class })\n+@ConditionalOnClass({ LocalContainerEntityManagerFactoryBean.class,\n+\t\tEnableTransactionManagement.class, EntityManager.class })\n @ConditionalOnBean(DataSource.class)\n public abstract class JpaBaseConfiguration implements BeanFactoryAware {\n \n@@ -78,13 +78,14 @@ public abstract class JpaBaseConfiguration implements BeanFactoryAware {\n \n \t@Configuration\n \t@ConditionalOnWebApplication\n-\t@ConditionalOnMissingBean({ OpenEntityManagerInViewInterceptor.class, OpenEntityManagerInViewFilter.class })\n+\t@ConditionalOnMissingBean({ OpenEntityManagerInViewInterceptor.class,\n+\t\t\tOpenEntityManagerInViewFilter.class })\n \t@ConditionalOnExpression("${spring.jpa.openInView:${spring.jpa.open_in_view:true}}")\n \tprotected static class JpaWebConfiguration extends WebMvcConfigurerAdapter {\n \n \t\t@Override\n \t\tpublic void addInterceptors(InterceptorRegistry registry) {\n-\t\t\tsuper.addInterceptors(registry);\n+\t\t\tregistry.addWebRequestInterceptor(openEntityManagerInViewInterceptor());\n \t\t}\n \n \t\t@Bean\n@@ -95,14 +96,18 @@ public abstract class JpaBaseConfiguration implements BeanFactoryAware {\n \t}\n \n \t/**\n-\t * Determines if the {@code dataSource} being used by Spring was created from {@link EmbeddedDatabaseConfiguration}.\n+\t * Determines if the {@code dataSource} being used by Spring was created from\n+\t * {@link EmbeddedDatabaseConfiguration}.\n \t * @return true if the data source was auto-configured.\n \t */\n \tprotected boolean isAutoConfiguredDataSource() {\n \t\ttry {\n-\t\t\tBeanDefinition beanDefinition = this.beanFactory.getBeanDefinition("dataSource");\n-\t\t\treturn EmbeddedDatabaseConfiguration.class.getName().equals(beanDefinition.getFactoryBeanName());\n-\t\t} catch (NoSuchBeanDefinitionException ex) {\n+\t\t\tBeanDefinition beanDefinition = this.beanFactory\n+\t\t\t\t\t.getBeanDefinition("dataSource");\n+\t\t\treturn EmbeddedDatabaseConfiguration.class.getName().equals(\n+\t\t\t\t\tbeanDefinition.getFactoryBeanName());\n+\t\t}\n+\t\tcatch (NoSuchBeanDefinitionException ex) {\n \t\t\treturn false;\n \t\t}\n \t}\n@@ -113,19 +118,23 @@ public abstract class JpaBaseConfiguration implements BeanFactoryAware {\n \tprotected DataSource getDataSource() {\n \t\ttry {\n \t\t\treturn this.beanFactory.getBean("dataSource", DataSource.class);\n-\t\t} catch (RuntimeException ex) {\n+\t\t}\n+\t\tcatch (RuntimeException ex) {\n \t\t\treturn this.beanFactory.getBean(DataSource.class);\n \t\t}\n \t}\n \n \tprotected String[] getPackagesToScan() {\n-\t\tList<String> basePackages = AutoConfigurationUtils.getBasePackages(this.beanFactory);\n-\t\tAssert.notEmpty(basePackages, "Unable to find JPA packages to scan, please define "\n-\t\t\t\t+ "a @ComponentScan annotation or disable JpaAutoConfiguration");\n+\t\tList<String> basePackages = AutoConfigurationUtils\n+\t\t\t\t.getBasePackages(this.beanFactory);\n+\t\tAssert.notEmpty(basePackages,\n+\t\t\t\t"Unable to find JPA packages to scan, please define "\n+\t\t\t\t\t\t+ "a @ComponentScan annotation or disable JpaAutoConfiguration");\n \t\treturn basePackages.toArray(new String[basePackages.size()]);\n \t}\n \n-\tprotected void configure(LocalContainerEntityManagerFactoryBean entityManagerFactoryBean) {\n+\tprotected void configure(\n+\t\t\tLocalContainerEntityManagerFactoryBean entityManagerFactoryBean) {\n \t}\n \n \t@Override\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.autoconfigure.orm.jpa;\n\nimport java.util.List;\n\nimport javax.persistence.EntityManager;\nimport javax.sql.DataSource;\n\nimport org.springframework.autoconfigure.AutoConfigurationUtils;\nimport org.springframework.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.autoconfigure.jdbc.EmbeddedDatabaseConfiguration;\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.beans.factory.NoSuchBeanDefinitionException;\nimport org.springframework.beans.factory.config.BeanDefinition;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.bootstrap.context.condition.ConditionalOnBean;\nimport org.springframework.bootstrap.context.condition.ConditionalOnClass;\nimport org.springframework.bootstrap.context.condition.ConditionalOnExpression;\nimport org.springframework.bootstrap.context.condition.ConditionalOnMissingBean;\nimport org.springframework.bootstrap.context.condition.ConditionalOnWebApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.orm.jpa.JpaTransactionManager;\nimport org.springframework.orm.jpa.JpaVendorAdapter;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter;\nimport org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\nimport org.springframework.util.Assert;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\n\n/**\n * Base {@link EnableAutoConfiguration Auto-configuration} for JPA.\n * \n * @author Phillip Webb\n * @author Dave Syer\n */\n@ConditionalOnClass({ LocalContainerEntityManagerFactoryBean.class,\n\t\tEnableTransactionManagement.class, EntityManager.class })\n@ConditionalOnBean(DataSource.class)\npublic abstract class JpaBaseConfiguration implements BeanFactoryAware {\n\n\tprivate ConfigurableListableBeanFactory beanFactory;\n\n\t@Bean\n\tpublic PlatformTransactionManager transactionManager() {\n\t\treturn new JpaTransactionManager(entityManagerFactory().getObject());\n\t}\n\n\t@Bean\n\tpublic LocalContainerEntityManagerFactoryBean entityManagerFactory() {\n\t\tLocalContainerEntityManagerFactoryBean entityManagerFactoryBean = new LocalContainerEntityManagerFactoryBean();\n\t\tentityManagerFactoryBean.setJpaVendorAdapter(jpaVendorAdapter());\n\t\tentityManagerFactoryBean.setDataSource(getDataSource());\n\t\tentityManagerFactoryBean.setPackagesToScan(getPackagesToScan());\n\t\tconfigure(entityManagerFactoryBean);\n\t\treturn entityManagerFactoryBean;\n\t}\n\n\t@Configuration\n\t@ConditionalOnWebApplication\n\t@ConditionalOnMissingBean({ OpenEntityManagerInViewInterceptor.class,\n\t\t\tOpenEntityManagerInViewFilter.class })\n\t@ConditionalOnExpression("${spring.jpa.openInView:${spring.jpa.open_in_view:true}}")\n\tprotected static class JpaWebConfiguration extends WebMvcConfigurerAdapter {\n\n\t\t@Override\n\t\tpublic void addInterceptors(InterceptorRegistry registry) {\n\t\t\tregistry.addWebRequestInterceptor(openEntityManagerInViewInterceptor());\n\t\t}\n\n\t\t@Bean\n\t\tpublic OpenEntityManagerInViewInterceptor openEntityManagerInViewInterceptor() {\n\t\t\treturn new OpenEntityManagerInViewInterceptor();\n\t\t}\n\n\t}\n\n\t/**\n\t * Determines if the {@code dataSource} being used by Spring was created from\n\t * {@link EmbeddedDatabaseConfiguration}.\n\t * @return true if the data source was auto-configured.\n\t */\n\tprotected boolean isAutoConfiguredDataSource() {\n\t\ttry {\n\t\t\tBeanDefinition beanDefinition = this.beanFactory\n\t\t\t\t\t.getBeanDefinition("dataSource");\n\t\t\treturn EmbeddedDatabaseConfiguration.class.getName().equals(\n\t\t\t\t\tbeanDefinition.getFactoryBeanName());\n\t\t}\n\t\tcatch (NoSuchBeanDefinitionException ex) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t@Bean\n\tpublic abstract JpaVendorAdapter jpaVendorAdapter();\n\n\tprotected DataSource getDataSource() {\n\t\ttry {\n\t\t\treturn this.beanFactory.getBean("dataSource", DataSource.class);\n\t\t}\n\t\tcatch (RuntimeException ex) {\n\t\t\treturn this.beanFactory.getBean(DataSource.class);\n\t\t}\n\t}\n\n\tprotected String[] getPackagesToScan() {\n\t\tList<String> basePackages = AutoConfigurationUtils\n\t\t\t\t.getBasePackages(this.beanFactory);\n\t\tAssert.notEmpty(basePackages,\n\t\t\t\t"Unable to find JPA packages to scan, please define "\n\t\t\t\t\t\t+ "a @ComponentScan annotation or disable JpaAutoConfiguration");\n\t\treturn basePackages.toArray(new String[basePackages.size()]);\n\t}\n\n\tprotected void configure(\n\t\t\tLocalContainerEntityManagerFactoryBean entityManagerFactoryBean) {\n\t}\n\n\t@Override\n\tpublic void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n\t\tthis.beanFactory = (ConfigurableListableBeanFactory) beanFactory;\n\t}\n}\n', 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.autoconfigure.orm.jpa;\n\nimport java.util.List;\n\nimport javax.persistence.EntityManager;\nimport javax.sql.DataSource;\n\nimport org.springframework.autoconfigure.AutoConfigurationUtils;\nimport org.springframework.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.autoconfigure.jdbc.EmbeddedDatabaseConfiguration;\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.beans.factory.NoSuchBeanDefinitionException;\nimport org.springframework.beans.factory.config.BeanDefinition;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.bootstrap.context.condition.ConditionalOnBean;\nimport org.springframework.bootstrap.context.condition.ConditionalOnClass;\nimport org.springframework.bootstrap.context.condition.ConditionalOnExpression;\nimport org.springframework.bootstrap.context.condition.ConditionalOnMissingBean;\nimport org.springframework.bootstrap.context.condition.ConditionalOnWebApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.orm.jpa.JpaTransactionManager;\nimport org.springframework.orm.jpa.JpaVendorAdapter;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter;\nimport org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\nimport org.springframework.util.Assert;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\n\n/**\n * Base {@link EnableAutoConfiguration Auto-configuration} for JPA.\n * \n * @author Phillip Webb\n * @author Dave Syer\n */\n@ConditionalOnClass({ LocalContainerEntityManagerFactoryBean.class, EnableTransactionManagement.class,\n\t\tEntityManager.class })\n@ConditionalOnBean(DataSource.class)\npublic abstract class JpaBaseConfiguration implements BeanFactoryAware {\n\n\tprivate ConfigurableListableBeanFactory beanFactory;\n\n\t@Bean\n\tpublic PlatformTransactionManager transactionManager() {\n\t\treturn new JpaTransactionManager(entityManagerFactory().getObject());\n\t}\n\n\t@Bean\n\tpublic LocalContainerEntityManagerFactoryBean entityManagerFactory() {\n\t\tLocalContainerEntityManagerFactoryBean entityManagerFactoryBean = new LocalContainerEntityManagerFactoryBean();\n\t\tentityManagerFactoryBean.setJpaVendorAdapter(jpaVendorAdapter());\n\t\tentityManagerFactoryBean.setDataSource(getDataSource());\n\t\tentityManagerFactoryBean.setPackagesToScan(getPackagesToScan());\n\t\tconfigure(entityManagerFactoryBean);\n\t\treturn entityManagerFactoryBean;\n\t}\n\n\t@Configuration\n\t@ConditionalOnWebApplication\n\t@ConditionalOnMissingBean({ OpenEntityManagerInViewInterceptor.class, OpenEntityManagerInViewFilter.class })\n\t@ConditionalOnExpression("${spring.jpa.openInView:${spring.jpa.open_in_view:true}}")\n\tprotected static class JpaWebConfiguration extends WebMvcConfigurerAdapter {\n\n\t\t@Override\n\t\tpublic void addInterceptors(InterceptorRegistry registry) {\n\t\t\tsuper.addInterceptors(registry);\n\t\t}\n\n\t\t@Bean\n\t\tpublic OpenEntityManagerInViewInterceptor openEntityManagerInViewInterceptor() {\n\t\t\treturn new OpenEntityManagerInViewInterceptor();\n\t\t}\n\n\t}\n\n\t/**\n\t * Determines if the {@code dataSource} being used by Spring was created from {@link EmbeddedDatabaseConfiguration}.\n\t * @return true if the data source was auto-configured.\n\t */\n\tprotected boolean isAutoConfiguredDataSource() {\n\t\ttry {\n\t\t\tBeanDefinition beanDefinition = this.beanFactory.getBeanDefinition("dataSource");\n\t\t\treturn EmbeddedDatabaseConfiguration.class.getName().equals(beanDefinition.getFactoryBeanName());\n\t\t} catch (NoSuchBeanDefinitionException ex) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t@Bean\n\tpublic abstract JpaVendorAdapter jpaVendorAdapter();\n\n\tprotected DataSource getDataSource() {\n\t\ttry {\n\t\t\treturn this.beanFactory.getBean("dataSource", DataSource.class);\n\t\t} catch (RuntimeException ex) {\n\t\t\treturn this.beanFactory.getBean(DataSource.class);\n\t\t}\n\t}\n\n\tprotected String[] getPackagesToScan() {\n\t\tList<String> basePackages = AutoConfigurationUtils.getBasePackages(this.beanFactory);\n\t\tAssert.notEmpty(basePackages, "Unable to find JPA packages to scan, please define "\n\t\t\t\t+ "a @ComponentScan annotation or disable JpaAutoConfiguration");\n\t\treturn basePackages.toArray(new String[basePackages.size()]);\n\t}\n\n\tprotected void configure(LocalContainerEntityManagerFactoryBean entityManagerFactoryBean) {\n\t}\n\n\t@Override\n\tpublic void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n\t\tthis.beanFactory = (ConfigurableListableBeanFactory) beanFactory;\n\t}\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
