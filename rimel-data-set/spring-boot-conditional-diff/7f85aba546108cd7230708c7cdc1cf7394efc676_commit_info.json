{'_old_path': None, '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoDbFactoryDependentConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2012-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.data.mongo;\n+\n+import com.mongodb.ClientSessionOptions;\n+import com.mongodb.DB;\n+import com.mongodb.client.ClientSession;\n+import com.mongodb.client.MongoDatabase;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.mongo.MongoProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.dao.support.PersistenceExceptionTranslator;\n+import org.springframework.data.mongodb.MongoDbFactory;\n+import org.springframework.data.mongodb.core.MongoTemplate;\n+import org.springframework.data.mongodb.core.convert.DbRefResolver;\n+import org.springframework.data.mongodb.core.convert.DefaultDbRefResolver;\n+import org.springframework.data.mongodb.core.convert.MappingMongoConverter;\n+import org.springframework.data.mongodb.core.convert.MongoConverter;\n+import org.springframework.data.mongodb.core.convert.MongoCustomConversions;\n+import org.springframework.data.mongodb.core.mapping.MongoMappingContext;\n+import org.springframework.data.mongodb.gridfs.GridFsTemplate;\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Configuration for Mongo-related beans that depend on a {@link MongoDbFactory}.\n+ *\n+ * @author Andy Wilkinson\n+ */\n+@Configuration\n+@ConditionalOnBean(MongoDbFactory.class)\n+class MongoDbFactoryDependentConfiguration {\n+\n+\tprivate final MongoProperties properties;\n+\n+\tMongoDbFactoryDependentConfiguration(MongoProperties properties) {\n+\t\tthis.properties = properties;\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic MongoTemplate mongoTemplate(MongoDbFactory mongoDbFactory, MongoConverter converter) {\n+\t\treturn new MongoTemplate(mongoDbFactory, converter);\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean(MongoConverter.class)\n+\tpublic MappingMongoConverter mappingMongoConverter(MongoDbFactory factory, MongoMappingContext context,\n+\t\t\tMongoCustomConversions conversions) {\n+\t\tDbRefResolver dbRefResolver = new DefaultDbRefResolver(factory);\n+\t\tMappingMongoConverter mappingConverter = new MappingMongoConverter(dbRefResolver, context);\n+\t\tmappingConverter.setCustomConversions(conversions);\n+\t\treturn mappingConverter;\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic GridFsTemplate gridFsTemplate(MongoDbFactory mongoDbFactory, MongoTemplate mongoTemplate) {\n+\t\treturn new GridFsTemplate(new GridFsMongoDbFactory(mongoDbFactory, this.properties),\n+\t\t\t\tmongoTemplate.getConverter());\n+\t}\n+\n+\t/**\n+\t * {@link MongoDbFactory} decorator to respect\n+\t * {@link MongoProperties#getGridFsDatabase()} if set.\n+\t */\n+\tstatic class GridFsMongoDbFactory implements MongoDbFactory {\n+\n+\t\tprivate final MongoDbFactory mongoDbFactory;\n+\n+\t\tprivate final MongoProperties properties;\n+\n+\t\tGridFsMongoDbFactory(MongoDbFactory mongoDbFactory, MongoProperties properties) {\n+\t\t\tAssert.notNull(mongoDbFactory, "MongoDbFactory must not be null");\n+\t\t\tAssert.notNull(properties, "Properties must not be null");\n+\t\t\tthis.mongoDbFactory = mongoDbFactory;\n+\t\t\tthis.properties = properties;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic MongoDatabase getDb() throws DataAccessException {\n+\t\t\tString gridFsDatabase = this.properties.getGridFsDatabase();\n+\t\t\tif (StringUtils.hasText(gridFsDatabase)) {\n+\t\t\t\treturn this.mongoDbFactory.getDb(gridFsDatabase);\n+\t\t\t}\n+\t\t\treturn this.mongoDbFactory.getDb();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic MongoDatabase getDb(String dbName) throws DataAccessException {\n+\t\t\treturn this.mongoDbFactory.getDb(dbName);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic PersistenceExceptionTranslator getExceptionTranslator() {\n+\t\t\treturn this.mongoDbFactory.getExceptionTranslator();\n+\t\t}\n+\n+\t\t@Override\n+\t\t@Deprecated\n+\t\tpublic DB getLegacyDb() {\n+\t\t\treturn this.mongoDbFactory.getLegacyDb();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic ClientSession getSession(ClientSessionOptions options) {\n+\t\t\treturn this.mongoDbFactory.getSession(options);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic MongoDbFactory withSession(ClientSession session) {\n+\t\t\treturn this.mongoDbFactory.withSession(session);\n+\t\t}\n+\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.mongo;\n\nimport com.mongodb.ClientSessionOptions;\nimport com.mongodb.DB;\nimport com.mongodb.client.ClientSession;\nimport com.mongodb.client.MongoDatabase;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.mongo.MongoProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.dao.DataAccessException;\nimport org.springframework.dao.support.PersistenceExceptionTranslator;\nimport org.springframework.data.mongodb.MongoDbFactory;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.data.mongodb.core.convert.DbRefResolver;\nimport org.springframework.data.mongodb.core.convert.DefaultDbRefResolver;\nimport org.springframework.data.mongodb.core.convert.MappingMongoConverter;\nimport org.springframework.data.mongodb.core.convert.MongoConverter;\nimport org.springframework.data.mongodb.core.convert.MongoCustomConversions;\nimport org.springframework.data.mongodb.core.mapping.MongoMappingContext;\nimport org.springframework.data.mongodb.gridfs.GridFsTemplate;\nimport org.springframework.util.Assert;\nimport org.springframework.util.StringUtils;\n\n/**\n * Configuration for Mongo-related beans that depend on a {@link MongoDbFactory}.\n *\n * @author Andy Wilkinson\n */\n@Configuration\n@ConditionalOnBean(MongoDbFactory.class)\nclass MongoDbFactoryDependentConfiguration {\n\n\tprivate final MongoProperties properties;\n\n\tMongoDbFactoryDependentConfiguration(MongoProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic MongoTemplate mongoTemplate(MongoDbFactory mongoDbFactory, MongoConverter converter) {\n\t\treturn new MongoTemplate(mongoDbFactory, converter);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(MongoConverter.class)\n\tpublic MappingMongoConverter mappingMongoConverter(MongoDbFactory factory, MongoMappingContext context,\n\t\t\tMongoCustomConversions conversions) {\n\t\tDbRefResolver dbRefResolver = new DefaultDbRefResolver(factory);\n\t\tMappingMongoConverter mappingConverter = new MappingMongoConverter(dbRefResolver, context);\n\t\tmappingConverter.setCustomConversions(conversions);\n\t\treturn mappingConverter;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic GridFsTemplate gridFsTemplate(MongoDbFactory mongoDbFactory, MongoTemplate mongoTemplate) {\n\t\treturn new GridFsTemplate(new GridFsMongoDbFactory(mongoDbFactory, this.properties),\n\t\t\t\tmongoTemplate.getConverter());\n\t}\n\n\t/**\n\t * {@link MongoDbFactory} decorator to respect\n\t * {@link MongoProperties#getGridFsDatabase()} if set.\n\t */\n\tstatic class GridFsMongoDbFactory implements MongoDbFactory {\n\n\t\tprivate final MongoDbFactory mongoDbFactory;\n\n\t\tprivate final MongoProperties properties;\n\n\t\tGridFsMongoDbFactory(MongoDbFactory mongoDbFactory, MongoProperties properties) {\n\t\t\tAssert.notNull(mongoDbFactory, "MongoDbFactory must not be null");\n\t\t\tAssert.notNull(properties, "Properties must not be null");\n\t\t\tthis.mongoDbFactory = mongoDbFactory;\n\t\t\tthis.properties = properties;\n\t\t}\n\n\t\t@Override\n\t\tpublic MongoDatabase getDb() throws DataAccessException {\n\t\t\tString gridFsDatabase = this.properties.getGridFsDatabase();\n\t\t\tif (StringUtils.hasText(gridFsDatabase)) {\n\t\t\t\treturn this.mongoDbFactory.getDb(gridFsDatabase);\n\t\t\t}\n\t\t\treturn this.mongoDbFactory.getDb();\n\t\t}\n\n\t\t@Override\n\t\tpublic MongoDatabase getDb(String dbName) throws DataAccessException {\n\t\t\treturn this.mongoDbFactory.getDb(dbName);\n\t\t}\n\n\t\t@Override\n\t\tpublic PersistenceExceptionTranslator getExceptionTranslator() {\n\t\t\treturn this.mongoDbFactory.getExceptionTranslator();\n\t\t}\n\n\t\t@Override\n\t\t@Deprecated\n\t\tpublic DB getLegacyDb() {\n\t\t\treturn this.mongoDbFactory.getLegacyDb();\n\t\t}\n\n\t\t@Override\n\t\tpublic ClientSession getSession(ClientSessionOptions options) {\n\t\t\treturn this.mongoDbFactory.getSession(options);\n\t\t}\n\n\t\t@Override\n\t\tpublic MongoDbFactory withSession(ClientSession session) {\n\t\t\treturn this.mongoDbFactory.withSession(session);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
