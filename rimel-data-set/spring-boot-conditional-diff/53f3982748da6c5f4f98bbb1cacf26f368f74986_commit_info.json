{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/function/client/ClientHttpConnectorConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/function/client/ClientHttpConnectorConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -23,6 +23,8 @@ import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.http.client.reactive.ClientHttpConnector;\n+import org.springframework.http.client.reactive.JettyClientHttpConnector;\n+import org.springframework.http.client.reactive.JettyResourceFactory;\n import org.springframework.http.client.reactive.ReactorClientHttpConnector;\n import org.springframework.http.client.reactive.ReactorResourceFactory;\n \n@@ -59,4 +61,24 @@ class ClientHttpConnectorConfiguration {\n \n \t}\n \n+\t@Configuration\n+\t@ConditionalOnClass(org.eclipse.jetty.reactive.client.ReactiveRequest.class)\n+\t@ConditionalOnMissingBean(ClientHttpConnector.class)\n+\tpublic static class JettyClient {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean\n+\t\tpublic JettyResourceFactory jettyResourceFactory() {\n+\t\t\treturn new JettyResourceFactory();\n+\t\t}\n+\n+\t\t@Bean\n+\t\tpublic JettyClientHttpConnector jettyClientHttpConnector(\n+\t\t\t\tJettyResourceFactory jettyResourceFactory) {\n+\t\t\treturn new JettyClientHttpConnector(jettyResourceFactory, (httpClient) -> {\n+\t\t\t});\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web.reactive.function.client;\n\nimport java.util.function.Function;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.client.reactive.ClientHttpConnector;\nimport org.springframework.http.client.reactive.JettyClientHttpConnector;\nimport org.springframework.http.client.reactive.JettyResourceFactory;\nimport org.springframework.http.client.reactive.ReactorClientHttpConnector;\nimport org.springframework.http.client.reactive.ReactorResourceFactory;\n\n/**\n * Configuration classes for WebClient client connectors.\n * <p>\n * Those should be {@code @Import} in a regular auto-configuration class to guarantee\n * their order of execution.\n *\n * @author Brian Clozel\n */\n@Configuration\nclass ClientHttpConnectorConfiguration {\n\n\t@Configuration\n\t@ConditionalOnClass(reactor.netty.http.client.HttpClient.class)\n\t@ConditionalOnMissingBean(ClientHttpConnector.class)\n\tpublic static class ReactorNetty {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic ReactorResourceFactory reactorResourceFactory() {\n\t\t\tReactorResourceFactory factory = new ReactorResourceFactory();\n\t\t\tfactory.setGlobalResources(false);\n\t\t\treturn factory;\n\t\t}\n\n\t\t@Bean\n\t\tpublic ReactorClientHttpConnector reactorClientHttpConnector(\n\t\t\t\tReactorResourceFactory reactorResourceFactory) {\n\t\t\treturn new ReactorClientHttpConnector(reactorResourceFactory,\n\t\t\t\t\tFunction.identity());\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(org.eclipse.jetty.reactive.client.ReactiveRequest.class)\n\t@ConditionalOnMissingBean(ClientHttpConnector.class)\n\tpublic static class JettyClient {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic JettyResourceFactory jettyResourceFactory() {\n\t\t\treturn new JettyResourceFactory();\n\t\t}\n\n\t\t@Bean\n\t\tpublic JettyClientHttpConnector jettyClientHttpConnector(\n\t\t\t\tJettyResourceFactory jettyResourceFactory) {\n\t\t\treturn new JettyClientHttpConnector(jettyResourceFactory, (httpClient) -> {\n\t\t\t});\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web.reactive.function.client;\n\nimport java.util.function.Function;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.client.reactive.ClientHttpConnector;\nimport org.springframework.http.client.reactive.ReactorClientHttpConnector;\nimport org.springframework.http.client.reactive.ReactorResourceFactory;\n\n/**\n * Configuration classes for WebClient client connectors.\n * <p>\n * Those should be {@code @Import} in a regular auto-configuration class to guarantee\n * their order of execution.\n *\n * @author Brian Clozel\n */\n@Configuration\nclass ClientHttpConnectorConfiguration {\n\n\t@Configuration\n\t@ConditionalOnClass(reactor.netty.http.client.HttpClient.class)\n\t@ConditionalOnMissingBean(ClientHttpConnector.class)\n\tpublic static class ReactorNetty {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic ReactorResourceFactory reactorResourceFactory() {\n\t\t\tReactorResourceFactory factory = new ReactorResourceFactory();\n\t\t\tfactory.setGlobalResources(false);\n\t\t\treturn factory;\n\t\t}\n\n\t\t@Bean\n\t\tpublic ReactorClientHttpConnector reactorClientHttpConnector(\n\t\t\t\tReactorResourceFactory reactorResourceFactory) {\n\t\t\treturn new ReactorClientHttpConnector(reactorResourceFactory,\n\t\t\t\t\tFunction.identity());\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
