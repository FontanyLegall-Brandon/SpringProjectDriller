{'_old_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -17,8 +17,6 @@\n package org.springframework.boot.actuate.autoconfigure;\n \n import java.io.IOException;\n-import java.util.HashMap;\n-import java.util.Map;\n \n import javax.servlet.Filter;\n import javax.servlet.FilterChain;\n@@ -30,23 +28,20 @@ import javax.servlet.http.HttpServletResponse;\n import org.springframework.beans.BeansException;\n import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n-import org.springframework.beans.factory.support.BeanDefinitionBuilder;\n-import org.springframework.beans.factory.support.BeanDefinitionRegistry;\n-import org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;\n import org.springframework.boot.actuate.endpoint.Endpoint;\n import org.springframework.boot.actuate.endpoint.EnvironmentEndpoint;\n import org.springframework.boot.actuate.endpoint.MetricsEndpoint;\n import org.springframework.boot.actuate.endpoint.ShutdownEndpoint;\n import org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping;\n import org.springframework.boot.actuate.endpoint.mvc.EnvironmentMvcEndpoint;\n-import org.springframework.boot.actuate.endpoint.mvc.GenericMvcEndpoint;\n import org.springframework.boot.actuate.endpoint.mvc.MetricsMvcEndpoint;\n+import org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints;\n import org.springframework.boot.actuate.endpoint.mvc.ShutdownMvcEndpoint;\n import org.springframework.boot.actuate.properties.ManagementServerProperties;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.PropertyPlaceholderAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n@@ -63,7 +58,6 @@ import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.event.ContextClosedEvent;\n import org.springframework.context.event.ContextRefreshedEvent;\n-import org.springframework.stereotype.Component;\n import org.springframework.web.context.WebApplicationContext;\n import org.springframework.web.filter.OncePerRequestFilter;\n import org.springframework.web.servlet.DispatcherServlet;\n@@ -97,7 +91,8 @@ public class EndpointWebMvcAutoConfiguration implements ApplicationContextAware,\n \t@Bean\n \t@ConditionalOnMissingBean\n \tpublic EndpointHandlerMapping endpointHandlerMapping() {\n-\t\tEndpointHandlerMapping mapping = new EndpointHandlerMapping();\n+\t\tEndpointHandlerMapping mapping = new EndpointHandlerMapping(mvcEndpoints()\n+\t\t\t\t.getEndpoints());\n \t\tmapping.setDisabled(ManagementServerPort.get(this.applicationContext) != ManagementServerPort.SAME);\n \t\tmapping.setPrefix(this.managementServerProperties.getContextPath());\n \t\treturn mapping;\n@@ -133,48 +128,28 @@ public class EndpointWebMvcAutoConfiguration implements ApplicationContextAware,\n \t\t};\n \t}\n \n-\t@Component\n-\tprotected static class GenericEndpointPostProcessor implements\n-\t\t\tBeanDefinitionRegistryPostProcessor {\n-\n-\t\tprivate BeanDefinitionRegistry registry;\n-\n-\t\tprivate Map<Class<? extends Endpoint<?>>, Class<?>> endpointTypes = new HashMap<Class<? extends Endpoint<?>>, Class<?>>();\n-\n-\t\tpublic GenericEndpointPostProcessor() {\n-\t\t\tthis.endpointTypes.put(EnvironmentEndpoint.class,\n-\t\t\t\t\tEnvironmentMvcEndpoint.class);\n-\t\t\tthis.endpointTypes.put(MetricsEndpoint.class, MetricsMvcEndpoint.class);\n-\t\t\tthis.endpointTypes.put(ShutdownEndpoint.class, ShutdownMvcEndpoint.class);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)\n-\t\t\t\tthrows BeansException {\n-\t\t\tfor (String name : beanFactory.getBeanNamesForType(Endpoint.class)) {\n-\t\t\t\tClass<?> type = getTypeForEndpoint(beanFactory.getType(name));\n-\t\t\t\tBeanDefinitionBuilder bean = BeanDefinitionBuilder\n-\t\t\t\t\t\t.genericBeanDefinition(type);\n-\t\t\t\tbean.addConstructorArgReference(name);\n-\t\t\t\tthis.registry.registerBeanDefinition("mvc." + name,\n-\t\t\t\t\t\tbean.getBeanDefinition());\n-\t\t\t}\n-\t\t}\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic MvcEndpoints mvcEndpoints() {\n+\t\treturn new MvcEndpoints();\n+\t}\n \n-\t\tprotected Class<?> getTypeForEndpoint(Class<?> endpoint) {\n-\t\t\tClass<?> type = GenericMvcEndpoint.class;\n-\t\t\tif (this.endpointTypes.containsKey(endpoint)) {\n-\t\t\t\ttype = this.endpointTypes.get(endpoint);\n-\t\t\t}\n-\t\t\treturn type;\n-\t\t}\n+\t@Bean\n+\t@ConditionalOnBean(EnvironmentEndpoint.class)\n+\tpublic EnvironmentMvcEndpoint environmentMvcEndpoint(EnvironmentEndpoint delegate) {\n+\t\treturn new EnvironmentMvcEndpoint(delegate);\n+\t}\n \n-\t\t@Override\n-\t\tpublic void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry)\n-\t\t\t\tthrows BeansException {\n-\t\t\tthis.registry = registry;\n-\t\t}\n+\t@Bean\n+\t@ConditionalOnBean(MetricsEndpoint.class)\n+\tpublic MetricsMvcEndpoint metricsMvcEndpoint(MetricsEndpoint delegate) {\n+\t\treturn new MetricsMvcEndpoint(delegate);\n+\t}\n \n+\t@Bean\n+\t@ConditionalOnBean(ShutdownEndpoint.class)\n+\tpublic ShutdownMvcEndpoint shutdownMvcEndpoint(ShutdownEndpoint delegate) {\n+\t\treturn new ShutdownMvcEndpoint(delegate);\n \t}\n \n \tprivate void createChildManagementContext() {\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport java.io.IOException;\n\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.Servlet;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.NoSuchBeanDefinitionException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuate.endpoint.Endpoint;\nimport org.springframework.boot.actuate.endpoint.EnvironmentEndpoint;\nimport org.springframework.boot.actuate.endpoint.MetricsEndpoint;\nimport org.springframework.boot.actuate.endpoint.ShutdownEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping;\nimport org.springframework.boot.actuate.endpoint.mvc.EnvironmentMvcEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.MetricsMvcEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints;\nimport org.springframework.boot.actuate.endpoint.mvc.ShutdownMvcEndpoint;\nimport org.springframework.boot.actuate.properties.ManagementServerProperties;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.PropertyPlaceholderAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.ServerProperties;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.context.ApplicationListener;\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.event.ContextClosedEvent;\nimport org.springframework.context.event.ContextRefreshedEvent;\nimport org.springframework.web.context.WebApplicationContext;\nimport org.springframework.web.filter.OncePerRequestFilter;\nimport org.springframework.web.servlet.DispatcherServlet;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to enable Spring MVC to handle\n * {@link Endpoint} requests. If the {@link ManagementServerProperties} specifies a\n * different port to {@link ServerProperties} a new child context is created, otherwise it\n * is assumed that endpoint requests will be mapped and handled via an already registered\n * {@link DispatcherServlet}.\n * \n * @author Dave Syer\n * @author Phillip Webb\n */\n@Configuration\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class })\n@ConditionalOnWebApplication\n@AutoConfigureAfter({ PropertyPlaceholderAutoConfiguration.class,\n\t\tEmbeddedServletContainerAutoConfiguration.class, WebMvcAutoConfiguration.class,\n\t\tManagementServerPropertiesAutoConfiguration.class })\npublic class EndpointWebMvcAutoConfiguration implements ApplicationContextAware,\n\t\tApplicationListener<ContextRefreshedEvent> {\n\n\tprivate static final Integer DISABLED_PORT = Integer.valueOf(0);\n\n\tprivate ApplicationContext applicationContext;\n\n\t@Autowired(required = false)\n\tprivate ManagementServerProperties managementServerProperties = new ManagementServerProperties();\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic EndpointHandlerMapping endpointHandlerMapping() {\n\t\tEndpointHandlerMapping mapping = new EndpointHandlerMapping(mvcEndpoints()\n\t\t\t\t.getEndpoints());\n\t\tmapping.setDisabled(ManagementServerPort.get(this.applicationContext) != ManagementServerPort.SAME);\n\t\tmapping.setPrefix(this.managementServerProperties.getContextPath());\n\t\treturn mapping;\n\t}\n\n\t@Override\n\tpublic void setApplicationContext(ApplicationContext applicationContext)\n\t\t\tthrows BeansException {\n\t\tthis.applicationContext = applicationContext;\n\t}\n\n\t@Override\n\tpublic void onApplicationEvent(ContextRefreshedEvent event) {\n\t\tif (event.getApplicationContext() == this.applicationContext) {\n\t\t\tif (ManagementServerPort.get(this.applicationContext) == ManagementServerPort.DIFFERENT\n\t\t\t\t\t&& this.applicationContext instanceof WebApplicationContext) {\n\t\t\t\tcreateChildManagementContext();\n\t\t\t}\n\t\t}\n\t}\n\n\t@Bean\n\tpublic Filter applicationContextIdFilter(ApplicationContext context) {\n\t\tfinal String id = context.getId();\n\t\treturn new OncePerRequestFilter() {\n\t\t\t@Override\n\t\t\tprotected void doFilterInternal(HttpServletRequest request,\n\t\t\t\t\tHttpServletResponse response, FilterChain filterChain)\n\t\t\t\t\tthrows ServletException, IOException {\n\t\t\t\tresponse.addHeader("X-Application-Context", id);\n\t\t\t\tfilterChain.doFilter(request, response);\n\t\t\t}\n\t\t};\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic MvcEndpoints mvcEndpoints() {\n\t\treturn new MvcEndpoints();\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(EnvironmentEndpoint.class)\n\tpublic EnvironmentMvcEndpoint environmentMvcEndpoint(EnvironmentEndpoint delegate) {\n\t\treturn new EnvironmentMvcEndpoint(delegate);\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(MetricsEndpoint.class)\n\tpublic MetricsMvcEndpoint metricsMvcEndpoint(MetricsEndpoint delegate) {\n\t\treturn new MetricsMvcEndpoint(delegate);\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(ShutdownEndpoint.class)\n\tpublic ShutdownMvcEndpoint shutdownMvcEndpoint(ShutdownEndpoint delegate) {\n\t\treturn new ShutdownMvcEndpoint(delegate);\n\t}\n\n\tprivate void createChildManagementContext() {\n\n\t\tfinal AnnotationConfigEmbeddedWebApplicationContext childContext = new AnnotationConfigEmbeddedWebApplicationContext();\n\t\tchildContext.setParent(this.applicationContext);\n\t\tchildContext.setId(this.applicationContext.getId() + ":management");\n\n\t\t// Register the ManagementServerChildContextConfiguration first followed\n\t\t// by various specific AutoConfiguration classes. NOTE: The child context\n\t\t// is intentionally not completely auto-configured.\n\t\tchildContext.register(EndpointWebMvcChildContextConfiguration.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class,\n\t\t\t\tEmbeddedServletContainerAutoConfiguration.class,\n\t\t\t\tDispatcherServletAutoConfiguration.class);\n\n\t\t// Ensure close on the parent also closes the child\n\t\tif (this.applicationContext instanceof ConfigurableApplicationContext) {\n\t\t\t((ConfigurableApplicationContext) this.applicationContext)\n\t\t\t\t\t.addApplicationListener(new ApplicationListener<ContextClosedEvent>() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onApplicationEvent(ContextClosedEvent event) {\n\t\t\t\t\t\t\tif (event.getApplicationContext() == EndpointWebMvcAutoConfiguration.this.applicationContext) {\n\t\t\t\t\t\t\t\tchildContext.close();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t}\n\t\tchildContext.refresh();\n\t}\n\n\tprivate enum ManagementServerPort {\n\n\t\tDISABLE, SAME, DIFFERENT;\n\n\t\tpublic static ManagementServerPort get(ApplicationContext beanFactory) {\n\n\t\t\tServerProperties serverProperties;\n\t\t\ttry {\n\t\t\t\tserverProperties = beanFactory.getBean(ServerProperties.class);\n\t\t\t}\n\t\t\tcatch (NoSuchBeanDefinitionException ex) {\n\t\t\t\tserverProperties = new ServerProperties();\n\t\t\t}\n\n\t\t\tManagementServerProperties managementServerProperties;\n\t\t\ttry {\n\t\t\t\tmanagementServerProperties = beanFactory\n\t\t\t\t\t\t.getBean(ManagementServerProperties.class);\n\t\t\t}\n\t\t\tcatch (NoSuchBeanDefinitionException ex) {\n\t\t\t\tmanagementServerProperties = new ManagementServerProperties();\n\t\t\t}\n\n\t\t\tif (DISABLED_PORT.equals(managementServerProperties.getPort())) {\n\t\t\t\treturn DISABLE;\n\t\t\t}\n\t\t\tif (!(beanFactory instanceof WebApplicationContext)) {\n\t\t\t\t// Current context is no a a webapp\n\t\t\t\treturn DIFFERENT;\n\t\t\t}\n\t\t\treturn managementServerProperties.getPort() == null\n\t\t\t\t\t|| serverProperties.getPort() == null\n\t\t\t\t\t&& managementServerProperties.getPort().equals(8080)\n\t\t\t\t\t|| managementServerProperties.getPort().equals(\n\t\t\t\t\t\t\tserverProperties.getPort()) ? SAME : DIFFERENT;\n\t\t}\n\t};\n}\n', 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.Servlet;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.NoSuchBeanDefinitionException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.beans.factory.support.BeanDefinitionBuilder;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistry;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;\nimport org.springframework.boot.actuate.endpoint.Endpoint;\nimport org.springframework.boot.actuate.endpoint.EnvironmentEndpoint;\nimport org.springframework.boot.actuate.endpoint.MetricsEndpoint;\nimport org.springframework.boot.actuate.endpoint.ShutdownEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping;\nimport org.springframework.boot.actuate.endpoint.mvc.EnvironmentMvcEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.GenericMvcEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.MetricsMvcEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.ShutdownMvcEndpoint;\nimport org.springframework.boot.actuate.properties.ManagementServerProperties;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.PropertyPlaceholderAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.ServerProperties;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.context.ApplicationListener;\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.event.ContextClosedEvent;\nimport org.springframework.context.event.ContextRefreshedEvent;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.context.WebApplicationContext;\nimport org.springframework.web.filter.OncePerRequestFilter;\nimport org.springframework.web.servlet.DispatcherServlet;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to enable Spring MVC to handle\n * {@link Endpoint} requests. If the {@link ManagementServerProperties} specifies a\n * different port to {@link ServerProperties} a new child context is created, otherwise it\n * is assumed that endpoint requests will be mapped and handled via an already registered\n * {@link DispatcherServlet}.\n * \n * @author Dave Syer\n * @author Phillip Webb\n */\n@Configuration\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class })\n@ConditionalOnWebApplication\n@AutoConfigureAfter({ PropertyPlaceholderAutoConfiguration.class,\n\t\tEmbeddedServletContainerAutoConfiguration.class, WebMvcAutoConfiguration.class,\n\t\tManagementServerPropertiesAutoConfiguration.class })\npublic class EndpointWebMvcAutoConfiguration implements ApplicationContextAware,\n\t\tApplicationListener<ContextRefreshedEvent> {\n\n\tprivate static final Integer DISABLED_PORT = Integer.valueOf(0);\n\n\tprivate ApplicationContext applicationContext;\n\n\t@Autowired(required = false)\n\tprivate ManagementServerProperties managementServerProperties = new ManagementServerProperties();\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic EndpointHandlerMapping endpointHandlerMapping() {\n\t\tEndpointHandlerMapping mapping = new EndpointHandlerMapping();\n\t\tmapping.setDisabled(ManagementServerPort.get(this.applicationContext) != ManagementServerPort.SAME);\n\t\tmapping.setPrefix(this.managementServerProperties.getContextPath());\n\t\treturn mapping;\n\t}\n\n\t@Override\n\tpublic void setApplicationContext(ApplicationContext applicationContext)\n\t\t\tthrows BeansException {\n\t\tthis.applicationContext = applicationContext;\n\t}\n\n\t@Override\n\tpublic void onApplicationEvent(ContextRefreshedEvent event) {\n\t\tif (event.getApplicationContext() == this.applicationContext) {\n\t\t\tif (ManagementServerPort.get(this.applicationContext) == ManagementServerPort.DIFFERENT\n\t\t\t\t\t&& this.applicationContext instanceof WebApplicationContext) {\n\t\t\t\tcreateChildManagementContext();\n\t\t\t}\n\t\t}\n\t}\n\n\t@Bean\n\tpublic Filter applicationContextIdFilter(ApplicationContext context) {\n\t\tfinal String id = context.getId();\n\t\treturn new OncePerRequestFilter() {\n\t\t\t@Override\n\t\t\tprotected void doFilterInternal(HttpServletRequest request,\n\t\t\t\t\tHttpServletResponse response, FilterChain filterChain)\n\t\t\t\t\tthrows ServletException, IOException {\n\t\t\t\tresponse.addHeader("X-Application-Context", id);\n\t\t\t\tfilterChain.doFilter(request, response);\n\t\t\t}\n\t\t};\n\t}\n\n\t@Component\n\tprotected static class GenericEndpointPostProcessor implements\n\t\t\tBeanDefinitionRegistryPostProcessor {\n\n\t\tprivate BeanDefinitionRegistry registry;\n\n\t\tprivate Map<Class<? extends Endpoint<?>>, Class<?>> endpointTypes = new HashMap<Class<? extends Endpoint<?>>, Class<?>>();\n\n\t\tpublic GenericEndpointPostProcessor() {\n\t\t\tthis.endpointTypes.put(EnvironmentEndpoint.class,\n\t\t\t\t\tEnvironmentMvcEndpoint.class);\n\t\t\tthis.endpointTypes.put(MetricsEndpoint.class, MetricsMvcEndpoint.class);\n\t\t\tthis.endpointTypes.put(ShutdownEndpoint.class, ShutdownMvcEndpoint.class);\n\t\t}\n\n\t\t@Override\n\t\tpublic void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)\n\t\t\t\tthrows BeansException {\n\t\t\tfor (String name : beanFactory.getBeanNamesForType(Endpoint.class)) {\n\t\t\t\tClass<?> type = getTypeForEndpoint(beanFactory.getType(name));\n\t\t\t\tBeanDefinitionBuilder bean = BeanDefinitionBuilder\n\t\t\t\t\t\t.genericBeanDefinition(type);\n\t\t\t\tbean.addConstructorArgReference(name);\n\t\t\t\tthis.registry.registerBeanDefinition("mvc." + name,\n\t\t\t\t\t\tbean.getBeanDefinition());\n\t\t\t}\n\t\t}\n\n\t\tprotected Class<?> getTypeForEndpoint(Class<?> endpoint) {\n\t\t\tClass<?> type = GenericMvcEndpoint.class;\n\t\t\tif (this.endpointTypes.containsKey(endpoint)) {\n\t\t\t\ttype = this.endpointTypes.get(endpoint);\n\t\t\t}\n\t\t\treturn type;\n\t\t}\n\n\t\t@Override\n\t\tpublic void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry)\n\t\t\t\tthrows BeansException {\n\t\t\tthis.registry = registry;\n\t\t}\n\n\t}\n\n\tprivate void createChildManagementContext() {\n\n\t\tfinal AnnotationConfigEmbeddedWebApplicationContext childContext = new AnnotationConfigEmbeddedWebApplicationContext();\n\t\tchildContext.setParent(this.applicationContext);\n\t\tchildContext.setId(this.applicationContext.getId() + ":management");\n\n\t\t// Register the ManagementServerChildContextConfiguration first followed\n\t\t// by various specific AutoConfiguration classes. NOTE: The child context\n\t\t// is intentionally not completely auto-configured.\n\t\tchildContext.register(EndpointWebMvcChildContextConfiguration.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class,\n\t\t\t\tEmbeddedServletContainerAutoConfiguration.class,\n\t\t\t\tDispatcherServletAutoConfiguration.class);\n\n\t\t// Ensure close on the parent also closes the child\n\t\tif (this.applicationContext instanceof ConfigurableApplicationContext) {\n\t\t\t((ConfigurableApplicationContext) this.applicationContext)\n\t\t\t\t\t.addApplicationListener(new ApplicationListener<ContextClosedEvent>() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onApplicationEvent(ContextClosedEvent event) {\n\t\t\t\t\t\t\tif (event.getApplicationContext() == EndpointWebMvcAutoConfiguration.this.applicationContext) {\n\t\t\t\t\t\t\t\tchildContext.close();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t}\n\t\tchildContext.refresh();\n\t}\n\n\tprivate enum ManagementServerPort {\n\n\t\tDISABLE, SAME, DIFFERENT;\n\n\t\tpublic static ManagementServerPort get(ApplicationContext beanFactory) {\n\n\t\t\tServerProperties serverProperties;\n\t\t\ttry {\n\t\t\t\tserverProperties = beanFactory.getBean(ServerProperties.class);\n\t\t\t}\n\t\t\tcatch (NoSuchBeanDefinitionException ex) {\n\t\t\t\tserverProperties = new ServerProperties();\n\t\t\t}\n\n\t\t\tManagementServerProperties managementServerProperties;\n\t\t\ttry {\n\t\t\t\tmanagementServerProperties = beanFactory\n\t\t\t\t\t\t.getBean(ManagementServerProperties.class);\n\t\t\t}\n\t\t\tcatch (NoSuchBeanDefinitionException ex) {\n\t\t\t\tmanagementServerProperties = new ManagementServerProperties();\n\t\t\t}\n\n\t\t\tif (DISABLED_PORT.equals(managementServerProperties.getPort())) {\n\t\t\t\treturn DISABLE;\n\t\t\t}\n\t\t\tif (!(beanFactory instanceof WebApplicationContext)) {\n\t\t\t\t// Current context is no a a webapp\n\t\t\t\treturn DIFFERENT;\n\t\t\t}\n\t\t\treturn managementServerProperties.getPort() == null\n\t\t\t\t\t|| serverProperties.getPort() == null\n\t\t\t\t\t&& managementServerProperties.getPort().equals(8080)\n\t\t\t\t\t|| managementServerProperties.getPort().equals(\n\t\t\t\t\t\t\tserverProperties.getPort()) ? SAME : DIFFERENT;\n\t\t}\n\t};\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
