{'_old_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/AuditAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/AuditAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -21,6 +21,8 @@ import org.springframework.boot.actuate.audit.AuditEvent;\n import org.springframework.boot.actuate.audit.AuditEventRepository;\n import org.springframework.boot.actuate.audit.InMemoryAuditEventRepository;\n import org.springframework.boot.actuate.audit.listener.AuditListener;\n+import org.springframework.boot.actuate.security.AbstractAuthenticationAuditListener;\n+import org.springframework.boot.actuate.security.AbstractAuthorizationAuditListener;\n import org.springframework.boot.actuate.security.AuthenticationAuditListener;\n import org.springframework.boot.actuate.security.AuthorizationAuditListener;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n@@ -33,6 +35,7 @@ import org.springframework.context.annotation.Configuration;\n  * {@link EnableAutoConfiguration Auto-configuration} for {@link AuditEvent}s.\n  *\n  * @author Dave Syer\n+ * @author Vedran Pavic\n  */\n @Configuration\n public class AuditAutoConfiguration {\n@@ -47,12 +50,14 @@ public class AuditAutoConfiguration {\n \n \t@Bean\n \t@ConditionalOnClass(name = "org.springframework.security.authentication.event.AbstractAuthenticationEvent")\n+\t@ConditionalOnMissingBean(AbstractAuthenticationAuditListener.class)\n \tpublic AuthenticationAuditListener authenticationAuditListener() throws Exception {\n \t\treturn new AuthenticationAuditListener();\n \t}\n \n \t@Bean\n \t@ConditionalOnClass(name = "org.springframework.security.access.event.AbstractAuthorizationEvent")\n+\t@ConditionalOnMissingBean(AbstractAuthorizationAuditListener.class)\n \tpublic AuthorizationAuditListener authorizationAuditListener() throws Exception {\n \t\treturn new AuthorizationAuditListener();\n \t}\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuate.audit.AuditEvent;\nimport org.springframework.boot.actuate.audit.AuditEventRepository;\nimport org.springframework.boot.actuate.audit.InMemoryAuditEventRepository;\nimport org.springframework.boot.actuate.audit.listener.AuditListener;\nimport org.springframework.boot.actuate.security.AbstractAuthenticationAuditListener;\nimport org.springframework.boot.actuate.security.AbstractAuthorizationAuditListener;\nimport org.springframework.boot.actuate.security.AuthenticationAuditListener;\nimport org.springframework.boot.actuate.security.AuthorizationAuditListener;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link AuditEvent}s.\n *\n * @author Dave Syer\n * @author Vedran Pavic\n */\n@Configuration\npublic class AuditAutoConfiguration {\n\n\t@Autowired(required = false)\n\tprivate final AuditEventRepository auditEventRepository = new InMemoryAuditEventRepository();\n\n\t@Bean\n\tpublic AuditListener auditListener() throws Exception {\n\t\treturn new AuditListener(this.auditEventRepository);\n\t}\n\n\t@Bean\n\t@ConditionalOnClass(name = "org.springframework.security.authentication.event.AbstractAuthenticationEvent")\n\t@ConditionalOnMissingBean(AbstractAuthenticationAuditListener.class)\n\tpublic AuthenticationAuditListener authenticationAuditListener() throws Exception {\n\t\treturn new AuthenticationAuditListener();\n\t}\n\n\t@Bean\n\t@ConditionalOnClass(name = "org.springframework.security.access.event.AbstractAuthorizationEvent")\n\t@ConditionalOnMissingBean(AbstractAuthorizationAuditListener.class)\n\tpublic AuthorizationAuditListener authorizationAuditListener() throws Exception {\n\t\treturn new AuthorizationAuditListener();\n\t}\n\n\t@ConditionalOnMissingBean(AuditEventRepository.class)\n\tprotected static class AuditEventRepositoryConfiguration {\n\t\t@Bean\n\t\tpublic InMemoryAuditEventRepository auditEventRepository() throws Exception {\n\t\t\treturn new InMemoryAuditEventRepository();\n\t\t}\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuate.audit.AuditEvent;\nimport org.springframework.boot.actuate.audit.AuditEventRepository;\nimport org.springframework.boot.actuate.audit.InMemoryAuditEventRepository;\nimport org.springframework.boot.actuate.audit.listener.AuditListener;\nimport org.springframework.boot.actuate.security.AuthenticationAuditListener;\nimport org.springframework.boot.actuate.security.AuthorizationAuditListener;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link AuditEvent}s.\n *\n * @author Dave Syer\n */\n@Configuration\npublic class AuditAutoConfiguration {\n\n\t@Autowired(required = false)\n\tprivate final AuditEventRepository auditEventRepository = new InMemoryAuditEventRepository();\n\n\t@Bean\n\tpublic AuditListener auditListener() throws Exception {\n\t\treturn new AuditListener(this.auditEventRepository);\n\t}\n\n\t@Bean\n\t@ConditionalOnClass(name = "org.springframework.security.authentication.event.AbstractAuthenticationEvent")\n\tpublic AuthenticationAuditListener authenticationAuditListener() throws Exception {\n\t\treturn new AuthenticationAuditListener();\n\t}\n\n\t@Bean\n\t@ConditionalOnClass(name = "org.springframework.security.access.event.AbstractAuthorizationEvent")\n\tpublic AuthorizationAuditListener authorizationAuditListener() throws Exception {\n\t\treturn new AuthorizationAuditListener();\n\t}\n\n\t@ConditionalOnMissingBean(AuditEventRepository.class)\n\tprotected static class AuditEventRepositoryConfiguration {\n\t\t@Bean\n\t\tpublic InMemoryAuditEventRepository auditEventRepository() throws Exception {\n\t\t\treturn new InMemoryAuditEventRepository();\n\t\t}\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
