{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -28,6 +28,7 @@ import org.elasticsearch.client.RestHighLevelClient;\n \n import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n@@ -92,4 +93,28 @@ public class RestClientAutoConfiguration {\n \n \t}\n \n+\t/**\n+\t * Configuration to configure a {@link RestClient} bean from a\n+\t * {@link RestHighLevelClient} if such a bean has been registered by the application.\n+\t * If {@link RestHighLevelClient} is not unique or does not exist then\n+\t * {@link RestClientBuilder#build()} will be used.\n+\t */\n+\t@Configuration(proxyBeanMethods = false)\n+\t@ConditionalOnClass(RestHighLevelClient.class)\n+\t@ConditionalOnBean(RestHighLevelClient.class)\n+\tpublic static class RestClientConfiguration {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean\n+\t\tpublic RestClient restClient(ObjectProvider<RestHighLevelClient> restHighLevelClient,\n+\t\t\t\tRestClientBuilder builder) {\n+\t\t\tRestHighLevelClient client = restHighLevelClient.getIfUnique();\n+\t\t\tif (client != null) {\n+\t\t\t\treturn client.getLowLevelClient();\n+\t\t\t}\n+\t\t\treturn builder.build();\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.elasticsearch.rest;\n\nimport org.apache.http.HttpHost;\nimport org.apache.http.auth.AuthScope;\nimport org.apache.http.auth.Credentials;\nimport org.apache.http.auth.UsernamePasswordCredentials;\nimport org.apache.http.client.CredentialsProvider;\nimport org.apache.http.impl.client.BasicCredentialsProvider;\nimport org.elasticsearch.client.RestClient;\nimport org.elasticsearch.client.RestClientBuilder;\nimport org.elasticsearch.client.RestHighLevelClient;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.context.properties.PropertyMapper;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Elasticsearch REST clients.\n *\n * @author Brian Clozel\n * @since 2.1.0\n */\n@Configuration\n@ConditionalOnClass(RestClient.class)\n@EnableConfigurationProperties(RestClientProperties.class)\npublic class RestClientAutoConfiguration {\n\n\tprivate final RestClientProperties properties;\n\n\tprivate final ObjectProvider<RestClientBuilderCustomizer> builderCustomizers;\n\n\tpublic RestClientAutoConfiguration(RestClientProperties properties,\n\t\t\tObjectProvider<RestClientBuilderCustomizer> builderCustomizers) {\n\t\tthis.properties = properties;\n\t\tthis.builderCustomizers = builderCustomizers;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic RestClient restClient(RestClientBuilder builder) {\n\t\treturn builder.build();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic RestClientBuilder restClientBuilder() {\n\t\tHttpHost[] hosts = this.properties.getUris().stream().map(HttpHost::create).toArray(HttpHost[]::new);\n\t\tRestClientBuilder builder = RestClient.builder(hosts);\n\t\tPropertyMapper map = PropertyMapper.get();\n\t\tmap.from(this.properties::getUsername).whenHasText().to((username) -> {\n\t\t\tCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n\t\t\tCredentials credentials = new UsernamePasswordCredentials(this.properties.getUsername(),\n\t\t\t\t\tthis.properties.getPassword());\n\t\t\tcredentialsProvider.setCredentials(AuthScope.ANY, credentials);\n\t\t\tbuilder.setHttpClientConfigCallback(\n\t\t\t\t\t(httpClientBuilder) -> httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider));\n\t\t});\n\t\tthis.builderCustomizers.orderedStream().forEach((customizer) -> customizer.customize(builder));\n\t\treturn builder;\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(RestHighLevelClient.class)\n\tpublic static class RestHighLevelClientConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic RestHighLevelClient restHighLevelClient(RestClientBuilder restClientBuilder) {\n\t\t\treturn new RestHighLevelClient(restClientBuilder);\n\t\t}\n\n\t}\n\n\t/**\n\t * Configuration to configure a {@link RestClient} bean from a\n\t * {@link RestHighLevelClient} if such a bean has been registered by the application.\n\t * If {@link RestHighLevelClient} is not unique or does not exist then\n\t * {@link RestClientBuilder#build()} will be used.\n\t */\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnClass(RestHighLevelClient.class)\n\t@ConditionalOnBean(RestHighLevelClient.class)\n\tpublic static class RestClientConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic RestClient restClient(ObjectProvider<RestHighLevelClient> restHighLevelClient,\n\t\t\t\tRestClientBuilder builder) {\n\t\t\tRestHighLevelClient client = restHighLevelClient.getIfUnique();\n\t\t\tif (client != null) {\n\t\t\t\treturn client.getLowLevelClient();\n\t\t\t}\n\t\t\treturn builder.build();\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.elasticsearch.rest;\n\nimport org.apache.http.HttpHost;\nimport org.apache.http.auth.AuthScope;\nimport org.apache.http.auth.Credentials;\nimport org.apache.http.auth.UsernamePasswordCredentials;\nimport org.apache.http.client.CredentialsProvider;\nimport org.apache.http.impl.client.BasicCredentialsProvider;\nimport org.elasticsearch.client.RestClient;\nimport org.elasticsearch.client.RestClientBuilder;\nimport org.elasticsearch.client.RestHighLevelClient;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.context.properties.PropertyMapper;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Elasticsearch REST clients.\n *\n * @author Brian Clozel\n * @since 2.1.0\n */\n@Configuration\n@ConditionalOnClass(RestClient.class)\n@EnableConfigurationProperties(RestClientProperties.class)\npublic class RestClientAutoConfiguration {\n\n\tprivate final RestClientProperties properties;\n\n\tprivate final ObjectProvider<RestClientBuilderCustomizer> builderCustomizers;\n\n\tpublic RestClientAutoConfiguration(RestClientProperties properties,\n\t\t\tObjectProvider<RestClientBuilderCustomizer> builderCustomizers) {\n\t\tthis.properties = properties;\n\t\tthis.builderCustomizers = builderCustomizers;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic RestClient restClient(RestClientBuilder builder) {\n\t\treturn builder.build();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic RestClientBuilder restClientBuilder() {\n\t\tHttpHost[] hosts = this.properties.getUris().stream().map(HttpHost::create).toArray(HttpHost[]::new);\n\t\tRestClientBuilder builder = RestClient.builder(hosts);\n\t\tPropertyMapper map = PropertyMapper.get();\n\t\tmap.from(this.properties::getUsername).whenHasText().to((username) -> {\n\t\t\tCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n\t\t\tCredentials credentials = new UsernamePasswordCredentials(this.properties.getUsername(),\n\t\t\t\t\tthis.properties.getPassword());\n\t\t\tcredentialsProvider.setCredentials(AuthScope.ANY, credentials);\n\t\t\tbuilder.setHttpClientConfigCallback(\n\t\t\t\t\t(httpClientBuilder) -> httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider));\n\t\t});\n\t\tthis.builderCustomizers.orderedStream().forEach((customizer) -> customizer.customize(builder));\n\t\treturn builder;\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(RestHighLevelClient.class)\n\tpublic static class RestHighLevelClientConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic RestHighLevelClient restHighLevelClient(RestClientBuilder restClientBuilder) {\n\t\t\treturn new RestHighLevelClient(restClientBuilder);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
