@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.boot.actuate.autoconfigure.cloudfoundry;
+package org.springframework.boot.actuate.autoconfigure.cloudfoundry.servlet;
 
 import java.util.Arrays;
 
@@ -26,11 +26,9 @@ import org.springframework.boot.actuate.endpoint.web.EndpointPathResolver;
 import org.springframework.boot.actuate.endpoint.web.annotation.WebAnnotationEndpointDiscoverer;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.boot.autoconfigure.security.SecurityProperties;
 import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.boot.endpoint.web.EndpointMapping;
@@ -45,7 +43,6 @@ import org.springframework.security.config.annotation.web.WebSecurityConfigurer;
 import org.springframework.security.config.annotation.web.builders.WebSecurity;
 import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
 import org.springframework.web.cors.CorsConfiguration;
-import org.springframework.web.servlet.DispatcherServlet;
 
 
-	@Configuration
-	@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)
-	@ConditionalOnClass(DispatcherServlet.class)
-	@ConditionalOnBean(DispatcherServlet.class)
-	static class MvcWebEndpointConfiguration {
-
-		private final ApplicationContext applicationContext;
+	private final ApplicationContext applicationContext;
 
-		MvcWebEndpointConfiguration(ApplicationContext applicationContext) {
-			this.applicationContext = applicationContext;
-		}
-
-		@Bean
-		public CloudFoundryWebEndpointServletHandlerMapping cloudFoundryWebEndpointServletHandlerMapping(
-				ParameterMapper parameterMapper,
-				DefaultCachingConfigurationFactory cachingConfigurationFactory,
-				EndpointMediaTypes endpointMediaTypes, Environment environment,
-				RestTemplateBuilder builder) {
-			WebAnnotationEndpointDiscoverer endpointDiscoverer = new WebAnnotationEndpointDiscoverer(
-					this.applicationContext, parameterMapper, cachingConfigurationFactory,
-					endpointMediaTypes, EndpointPathResolver.useEndpointId());
-			return new CloudFoundryWebEndpointServletHandlerMapping(
-					new EndpointMapping(),
-					endpointDiscoverer.discoverEndpoints(), endpointMediaTypes,
-					getCorsConfiguration(), getSecurityInterceptor(builder, environment));
-		}
+	CloudFoundryActuatorAutoConfiguration(ApplicationContext applicationContext) {
+		this.applicationContext = applicationContext;
+	}
 
-		private CloudFoundrySecurityInterceptor getSecurityInterceptor(
-				RestTemplateBuilder restTemplateBuilder, Environment environment) {
-			CloudFoundrySecurityService cloudfoundrySecurityService = getCloudFoundrySecurityService(
-					restTemplateBuilder, environment);
-			TokenValidator tokenValidator = new TokenValidator(
-					cloudfoundrySecurityService);
-			return new CloudFoundrySecurityInterceptor(tokenValidator,
-					cloudfoundrySecurityService,
-					environment.getProperty());
-		}
+	@Bean
+	public CloudFoundryWebEndpointServletHandlerMapping cloudFoundryWebEndpointServletHandlerMapping(
+			ParameterMapper parameterMapper,
+			DefaultCachingConfigurationFactory cachingConfigurationFactory,
+			EndpointMediaTypes endpointMediaTypes, Environment environment,
+			RestTemplateBuilder builder) {
+		WebAnnotationEndpointDiscoverer endpointDiscoverer = new WebAnnotationEndpointDiscoverer(
+				this.applicationContext, parameterMapper, cachingConfigurationFactory,
+				endpointMediaTypes, EndpointPathResolver.useEndpointId());
+		return new CloudFoundryWebEndpointServletHandlerMapping(
+				new EndpointMapping(),
+				endpointDiscoverer.discoverEndpoints(), endpointMediaTypes,
+				getCorsConfiguration(), getSecurityInterceptor(builder, environment));
+	}
 
-		private CloudFoundrySecurityService getCloudFoundrySecurityService(
-				RestTemplateBuilder restTemplateBuilder, Environment environment) {
-			String cloudControllerUrl = environment
-					.getProperty();
-			boolean skipSslValidation = environment.getProperty(
-					, Boolean.class, false);
-			return (cloudControllerUrl == null ? null
-					: new CloudFoundrySecurityService(restTemplateBuilder,
-							cloudControllerUrl, skipSslValidation));
-		}
+	private CloudFoundrySecurityInterceptor getSecurityInterceptor(
+			RestTemplateBuilder restTemplateBuilder, Environment environment) {
+		CloudFoundrySecurityService cloudfoundrySecurityService = getCloudFoundrySecurityService(
+				restTemplateBuilder, environment);
+		TokenValidator tokenValidator = new TokenValidator(
+				cloudfoundrySecurityService);
+		return new CloudFoundrySecurityInterceptor(tokenValidator,
+				cloudfoundrySecurityService,
+				environment.getProperty());
+	}
 
-		private CorsConfiguration getCorsConfiguration() {
-			CorsConfiguration corsConfiguration = new CorsConfiguration();
-			corsConfiguration.addAllowedOrigin(CorsConfiguration.ALL);
-			corsConfiguration.setAllowedMethods(
-					Arrays.asList(HttpMethod.GET.name(), HttpMethod.POST.name()));
-			corsConfiguration.setAllowedHeaders(
-					Arrays.asList(, , ));
-			return corsConfiguration;
-		}
+	private CloudFoundrySecurityService getCloudFoundrySecurityService(
+			RestTemplateBuilder restTemplateBuilder, Environment environment) {
+		String cloudControllerUrl = environment
+				.getProperty();
+		boolean skipSslValidation = environment.getProperty(
+				, Boolean.class, false);
+		return (cloudControllerUrl == null ? null
+				: new CloudFoundrySecurityService(restTemplateBuilder,
+						cloudControllerUrl, skipSslValidation));
+	}
 
+	private CorsConfiguration getCorsConfiguration() {
+		CorsConfiguration corsConfiguration = new CorsConfiguration();
+		corsConfiguration.addAllowedOrigin(CorsConfiguration.ALL);
+		corsConfiguration.setAllowedMethods(
+				Arrays.asList(HttpMethod.GET.name(), HttpMethod.POST.name()));
+		corsConfiguration.setAllowedHeaders(
+				Arrays.asList(, , ));
+		return corsConfiguration;
 	}
 
 	/**

