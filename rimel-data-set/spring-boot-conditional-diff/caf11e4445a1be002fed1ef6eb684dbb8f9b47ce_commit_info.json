{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CouchbaseCacheConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2012-2016 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.cache;\n+\n+import java.util.List;\n+\n+import com.couchbase.client.java.Bucket;\n+import com.couchbase.client.spring.cache.CacheBuilder;\n+import com.couchbase.client.spring.cache.CouchbaseCacheManager;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\n+import org.springframework.cache.CacheManager;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Conditional;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Couchbase cache configuration.\n+ *\n+ * @author Stephane Nicoll\n+ * @since 1.4.0\n+ */\n+@Configuration\n+@ConditionalOnClass({Bucket.class, CouchbaseCacheManager.class})\n+@ConditionalOnMissingBean(CacheManager.class)\n+@ConditionalOnSingleCandidate(Bucket.class)\n+@Conditional(CacheCondition.class)\n+public class CouchbaseCacheConfiguration {\n+\n+\tprivate final CacheProperties cacheProperties;\n+\n+\tprivate final CacheManagerCustomizers customizers;\n+\n+\tprivate final Bucket bucket;\n+\n+\tpublic CouchbaseCacheConfiguration(CacheProperties cacheProperties,\n+\t\t\tCacheManagerCustomizers customizers, Bucket bucket) {\n+\t\tthis.cacheProperties = cacheProperties;\n+\t\tthis.customizers = customizers;\n+\t\tthis.bucket = bucket;\n+\t}\n+\n+\t@Bean\n+\tpublic CouchbaseCacheManager cacheManager() {\n+\t\tList<String> cacheNames = this.cacheProperties.getCacheNames();\n+\t\tCouchbaseCacheManager cacheManager = new CouchbaseCacheManager(\n+\t\t\t\tCacheBuilder.newInstance(this.bucket)\n+\t\t\t\t\t\t.withExpirationInMillis(this.cacheProperties.getCouchbase().getExpiration()),\n+\t\t\t\tcacheNames.toArray(new String[cacheNames.size()]));\n+\t\treturn this.customizers.customize(cacheManager);\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.cache;\n\nimport java.util.List;\n\nimport com.couchbase.client.java.Bucket;\nimport com.couchbase.client.spring.cache.CacheBuilder;\nimport com.couchbase.client.spring.cache.CouchbaseCacheManager;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\nimport org.springframework.cache.CacheManager;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Couchbase cache configuration.\n *\n * @author Stephane Nicoll\n * @since 1.4.0\n */\n@Configuration\n@ConditionalOnClass({Bucket.class, CouchbaseCacheManager.class})\n@ConditionalOnMissingBean(CacheManager.class)\n@ConditionalOnSingleCandidate(Bucket.class)\n@Conditional(CacheCondition.class)\npublic class CouchbaseCacheConfiguration {\n\n\tprivate final CacheProperties cacheProperties;\n\n\tprivate final CacheManagerCustomizers customizers;\n\n\tprivate final Bucket bucket;\n\n\tpublic CouchbaseCacheConfiguration(CacheProperties cacheProperties,\n\t\t\tCacheManagerCustomizers customizers, Bucket bucket) {\n\t\tthis.cacheProperties = cacheProperties;\n\t\tthis.customizers = customizers;\n\t\tthis.bucket = bucket;\n\t}\n\n\t@Bean\n\tpublic CouchbaseCacheManager cacheManager() {\n\t\tList<String> cacheNames = this.cacheProperties.getCacheNames();\n\t\tCouchbaseCacheManager cacheManager = new CouchbaseCacheManager(\n\t\t\t\tCacheBuilder.newInstance(this.bucket)\n\t\t\t\t\t\t.withExpirationInMillis(this.cacheProperties.getCouchbase().getExpiration()),\n\t\t\t\tcacheNames.toArray(new String[cacheNames.size()]));\n\t\treturn this.customizers.customize(cacheManager);\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
