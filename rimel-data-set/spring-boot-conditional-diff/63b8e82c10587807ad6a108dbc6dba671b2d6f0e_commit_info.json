{'_old_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnSingleCandidateTests.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnSingleCandidateTests.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -64,6 +64,46 @@ public class ConditionalOnSingleCandidateTests {\n \t\tassertEquals("foo", this.context.getBean("baz"));\n \t}\n \n+\t@Test\n+\tpublic void singleCandidateInParentsOneCandidateInCurrent() {\n+\t\tload();\n+\t\tAnnotationConfigApplicationContext child = new AnnotationConfigApplicationContext();\n+\t\tchild.register(FooConfiguration.class,\n+\t\t\t\tOnBeanSingleCandidateInParentsConfiguration.class);\n+\t\tchild.setParent(this.context);\n+\t\tchild.refresh();\n+\t\tassertFalse(child.containsBean("baz"));\n+\t\tchild.close();\n+\t}\n+\n+\t@Test\n+\tpublic void singleCandidateInParentsOneCandidateInParent() {\n+\t\tload(FooConfiguration.class);\n+\t\tAnnotationConfigApplicationContext child = new AnnotationConfigApplicationContext();\n+\t\tchild.register(OnBeanSingleCandidateInParentsConfiguration.class);\n+\t\tchild.setParent(this.context);\n+\t\tchild.refresh();\n+\t\tassertTrue(child.containsBean("baz"));\n+\t\tassertEquals("foo", child.getBean("baz"));\n+\t\tchild.close();\n+\t}\n+\n+\t@Test\n+\tpublic void singleCandidateInParentsOneCandidateInGrandparent() {\n+\t\tload(FooConfiguration.class);\n+\t\tAnnotationConfigApplicationContext parent = new AnnotationConfigApplicationContext();\n+\t\tparent.setParent(this.context);\n+\t\tparent.refresh();\n+\t\tAnnotationConfigApplicationContext child = new AnnotationConfigApplicationContext();\n+\t\tchild.register(OnBeanSingleCandidateInParentsConfiguration.class);\n+\t\tchild.setParent(parent);\n+\t\tchild.refresh();\n+\t\tassertTrue(child.containsBean("baz"));\n+\t\tassertEquals("foo", child.getBean("baz"));\n+\t\tchild.close();\n+\t\tparent.close();\n+\t}\n+\n \t@Test\n \tpublic void singleCandidateMultipleCandidates() {\n \t\tload(FooConfiguration.class, BarConfiguration.class,\n@@ -121,7 +161,9 @@ public class ConditionalOnSingleCandidateTests {\n \t}\n \n \tprivate void load(Class<?>... classes) {\n-\t\tthis.context.register(classes);\n+\t\tif (classes.length > 0) {\n+\t\t\tthis.context.register(classes);\n+\t\t}\n \t\tthis.context.refresh();\n \t}\n \n@@ -136,6 +178,17 @@ public class ConditionalOnSingleCandidateTests {\n \n \t}\n \n+\t@Configuration\n+\t@ConditionalOnSingleCandidate(value = String.class, search = SearchStrategy.PARENTS)\n+\tprotected static class OnBeanSingleCandidateInParentsConfiguration {\n+\n+\t\t@Bean\n+\t\tpublic String baz(String s) {\n+\t\t\treturn s;\n+\t\t}\n+\n+\t}\n+\n \t@Configuration\n \t@ConditionalOnSingleCandidate(value = String.class, type = "java.lang.String")\n \tprotected static class OnBeanSingleCandidateTwoTypesConfiguration {\n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport org.junit.After;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExpectedException;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\n\nimport static org.hamcrest.CoreMatchers.isA;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\n/**\n * Tests for {@link ConditionalOnSingleCandidate}.\n *\n * @author Stephane Nicoll\n * @author Andy Wilkinson\n */\npublic class ConditionalOnSingleCandidateTests {\n\n\t@Rule\n\tpublic final ExpectedException thrown = ExpectedException.none();\n\n\tprivate final AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n\n\t@After\n\tpublic void close() {\n\t\tif (this.context != null) {\n\t\t\tthis.context.close();\n\t\t}\n\t}\n\n\t@Test\n\tpublic void singleCandidateNoCandidate() {\n\t\tload(OnBeanSingleCandidateConfiguration.class);\n\t\tassertFalse(this.context.containsBean("baz"));\n\t}\n\n\t@Test\n\tpublic void singleCandidateOneCandidate() {\n\t\tload(FooConfiguration.class, OnBeanSingleCandidateConfiguration.class);\n\t\tassertTrue(this.context.containsBean("baz"));\n\t\tassertEquals("foo", this.context.getBean("baz"));\n\t}\n\n\t@Test\n\tpublic void singleCandidateInParentsOneCandidateInCurrent() {\n\t\tload();\n\t\tAnnotationConfigApplicationContext child = new AnnotationConfigApplicationContext();\n\t\tchild.register(FooConfiguration.class,\n\t\t\t\tOnBeanSingleCandidateInParentsConfiguration.class);\n\t\tchild.setParent(this.context);\n\t\tchild.refresh();\n\t\tassertFalse(child.containsBean("baz"));\n\t\tchild.close();\n\t}\n\n\t@Test\n\tpublic void singleCandidateInParentsOneCandidateInParent() {\n\t\tload(FooConfiguration.class);\n\t\tAnnotationConfigApplicationContext child = new AnnotationConfigApplicationContext();\n\t\tchild.register(OnBeanSingleCandidateInParentsConfiguration.class);\n\t\tchild.setParent(this.context);\n\t\tchild.refresh();\n\t\tassertTrue(child.containsBean("baz"));\n\t\tassertEquals("foo", child.getBean("baz"));\n\t\tchild.close();\n\t}\n\n\t@Test\n\tpublic void singleCandidateInParentsOneCandidateInGrandparent() {\n\t\tload(FooConfiguration.class);\n\t\tAnnotationConfigApplicationContext parent = new AnnotationConfigApplicationContext();\n\t\tparent.setParent(this.context);\n\t\tparent.refresh();\n\t\tAnnotationConfigApplicationContext child = new AnnotationConfigApplicationContext();\n\t\tchild.register(OnBeanSingleCandidateInParentsConfiguration.class);\n\t\tchild.setParent(parent);\n\t\tchild.refresh();\n\t\tassertTrue(child.containsBean("baz"));\n\t\tassertEquals("foo", child.getBean("baz"));\n\t\tchild.close();\n\t\tparent.close();\n\t}\n\n\t@Test\n\tpublic void singleCandidateMultipleCandidates() {\n\t\tload(FooConfiguration.class, BarConfiguration.class,\n\t\t\t\tOnBeanSingleCandidateConfiguration.class);\n\t\tassertFalse(this.context.containsBean("baz"));\n\t}\n\n\t@Test\n\tpublic void singleCandidateMultipleCandidatesOnePrimary() {\n\t\tload(FooPrimaryConfiguration.class, BarConfiguration.class,\n\t\t\t\tOnBeanSingleCandidateConfiguration.class);\n\t\tassertTrue(this.context.containsBean("baz"));\n\t\tassertEquals("foo", this.context.getBean("baz"));\n\t}\n\n\t@Test\n\tpublic void singleCandidateMultipleCandidatesMultiplePrimary() {\n\t\tload(FooPrimaryConfiguration.class, BarPrimaryConfiguration.class,\n\t\t\t\tOnBeanSingleCandidateConfiguration.class);\n\t\tassertFalse(this.context.containsBean("baz"));\n\t}\n\n\t@Test\n\tpublic void invalidAnnotationTwoTypes() {\n\t\tthis.thrown.expect(IllegalStateException.class);\n\t\tthis.thrown.expectCause(isA(IllegalArgumentException.class));\n\t\tthis.thrown.expectMessage(\n\t\t\t\tOnBeanSingleCandidateTwoTypesConfiguration.class.getName());\n\t\tload(OnBeanSingleCandidateTwoTypesConfiguration.class);\n\t}\n\n\t@Test\n\tpublic void invalidAnnotationNoType() {\n\t\tthis.thrown.expect(IllegalStateException.class);\n\t\tthis.thrown.expectCause(isA(IllegalArgumentException.class));\n\t\tthis.thrown\n\t\t\t\t.expectMessage(OnBeanSingleCandidateNoTypeConfiguration.class.getName());\n\t\tload(OnBeanSingleCandidateNoTypeConfiguration.class);\n\t}\n\n\t@Test\n\tpublic void singleCandidateMultipleCandidatesInContextHierarchy() {\n\t\tload(FooPrimaryConfiguration.class, BarConfiguration.class);\n\t\tAnnotationConfigApplicationContext child = new AnnotationConfigApplicationContext();\n\t\tchild.setParent(this.context);\n\t\tchild.register(OnBeanSingleCandidateConfiguration.class);\n\t\ttry {\n\t\t\tchild.refresh();\n\t\t\tassertTrue(child.containsBean("baz"));\n\t\t\tassertEquals("foo", child.getBean("baz"));\n\t\t}\n\t\tfinally {\n\t\t\tchild.close();\n\t\t}\n\t}\n\n\tprivate void load(Class<?>... classes) {\n\t\tif (classes.length > 0) {\n\t\t\tthis.context.register(classes);\n\t\t}\n\t\tthis.context.refresh();\n\t}\n\n\t@Configuration\n\t@ConditionalOnSingleCandidate(String.class)\n\tprotected static class OnBeanSingleCandidateConfiguration {\n\n\t\t@Bean\n\t\tpublic String baz(String s) {\n\t\t\treturn s;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnSingleCandidate(value = String.class, search = SearchStrategy.PARENTS)\n\tprotected static class OnBeanSingleCandidateInParentsConfiguration {\n\n\t\t@Bean\n\t\tpublic String baz(String s) {\n\t\t\treturn s;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnSingleCandidate(value = String.class, type = "java.lang.String")\n\tprotected static class OnBeanSingleCandidateTwoTypesConfiguration {\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnSingleCandidate\n\tprotected static class OnBeanSingleCandidateNoTypeConfiguration {\n\n\t}\n\n\t@Configuration\n\tprotected static class FooConfiguration {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class FooPrimaryConfiguration {\n\n\t\t@Bean\n\t\t@Primary\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class BarConfiguration {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class BarPrimaryConfiguration {\n\n\t\t@Bean\n\t\t@Primary\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport org.junit.After;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExpectedException;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\n\nimport static org.hamcrest.CoreMatchers.isA;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\n/**\n * Tests for {@link ConditionalOnSingleCandidate}.\n *\n * @author Stephane Nicoll\n * @author Andy Wilkinson\n */\npublic class ConditionalOnSingleCandidateTests {\n\n\t@Rule\n\tpublic final ExpectedException thrown = ExpectedException.none();\n\n\tprivate final AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n\n\t@After\n\tpublic void close() {\n\t\tif (this.context != null) {\n\t\t\tthis.context.close();\n\t\t}\n\t}\n\n\t@Test\n\tpublic void singleCandidateNoCandidate() {\n\t\tload(OnBeanSingleCandidateConfiguration.class);\n\t\tassertFalse(this.context.containsBean("baz"));\n\t}\n\n\t@Test\n\tpublic void singleCandidateOneCandidate() {\n\t\tload(FooConfiguration.class, OnBeanSingleCandidateConfiguration.class);\n\t\tassertTrue(this.context.containsBean("baz"));\n\t\tassertEquals("foo", this.context.getBean("baz"));\n\t}\n\n\t@Test\n\tpublic void singleCandidateMultipleCandidates() {\n\t\tload(FooConfiguration.class, BarConfiguration.class,\n\t\t\t\tOnBeanSingleCandidateConfiguration.class);\n\t\tassertFalse(this.context.containsBean("baz"));\n\t}\n\n\t@Test\n\tpublic void singleCandidateMultipleCandidatesOnePrimary() {\n\t\tload(FooPrimaryConfiguration.class, BarConfiguration.class,\n\t\t\t\tOnBeanSingleCandidateConfiguration.class);\n\t\tassertTrue(this.context.containsBean("baz"));\n\t\tassertEquals("foo", this.context.getBean("baz"));\n\t}\n\n\t@Test\n\tpublic void singleCandidateMultipleCandidatesMultiplePrimary() {\n\t\tload(FooPrimaryConfiguration.class, BarPrimaryConfiguration.class,\n\t\t\t\tOnBeanSingleCandidateConfiguration.class);\n\t\tassertFalse(this.context.containsBean("baz"));\n\t}\n\n\t@Test\n\tpublic void invalidAnnotationTwoTypes() {\n\t\tthis.thrown.expect(IllegalStateException.class);\n\t\tthis.thrown.expectCause(isA(IllegalArgumentException.class));\n\t\tthis.thrown.expectMessage(\n\t\t\t\tOnBeanSingleCandidateTwoTypesConfiguration.class.getName());\n\t\tload(OnBeanSingleCandidateTwoTypesConfiguration.class);\n\t}\n\n\t@Test\n\tpublic void invalidAnnotationNoType() {\n\t\tthis.thrown.expect(IllegalStateException.class);\n\t\tthis.thrown.expectCause(isA(IllegalArgumentException.class));\n\t\tthis.thrown\n\t\t\t\t.expectMessage(OnBeanSingleCandidateNoTypeConfiguration.class.getName());\n\t\tload(OnBeanSingleCandidateNoTypeConfiguration.class);\n\t}\n\n\t@Test\n\tpublic void singleCandidateMultipleCandidatesInContextHierarchy() {\n\t\tload(FooPrimaryConfiguration.class, BarConfiguration.class);\n\t\tAnnotationConfigApplicationContext child = new AnnotationConfigApplicationContext();\n\t\tchild.setParent(this.context);\n\t\tchild.register(OnBeanSingleCandidateConfiguration.class);\n\t\ttry {\n\t\t\tchild.refresh();\n\t\t\tassertTrue(child.containsBean("baz"));\n\t\t\tassertEquals("foo", child.getBean("baz"));\n\t\t}\n\t\tfinally {\n\t\t\tchild.close();\n\t\t}\n\t}\n\n\tprivate void load(Class<?>... classes) {\n\t\tthis.context.register(classes);\n\t\tthis.context.refresh();\n\t}\n\n\t@Configuration\n\t@ConditionalOnSingleCandidate(String.class)\n\tprotected static class OnBeanSingleCandidateConfiguration {\n\n\t\t@Bean\n\t\tpublic String baz(String s) {\n\t\t\treturn s;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnSingleCandidate(value = String.class, type = "java.lang.String")\n\tprotected static class OnBeanSingleCandidateTwoTypesConfiguration {\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnSingleCandidate\n\tprotected static class OnBeanSingleCandidateNoTypeConfiguration {\n\n\t}\n\n\t@Configuration\n\tprotected static class FooConfiguration {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class FooPrimaryConfiguration {\n\n\t\t@Bean\n\t\t@Primary\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class BarConfiguration {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class BarPrimaryConfiguration {\n\n\t\t@Bean\n\t\t@Primary\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
