{'_old_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/PublicMetricsAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/PublicMetricsAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,6 +16,9 @@\n \n package org.springframework.boot.actuate.autoconfigure;\n \n+import java.util.Collections;\n+import java.util.List;\n+\n import javax.servlet.Servlet;\n import javax.sql.DataSource;\n \n@@ -29,8 +32,9 @@ import org.springframework.boot.actuate.endpoint.PublicMetrics;\n import org.springframework.boot.actuate.endpoint.RichGaugeReaderPublicMetrics;\n import org.springframework.boot.actuate.endpoint.SystemPublicMetrics;\n import org.springframework.boot.actuate.endpoint.TomcatPublicMetrics;\n+import org.springframework.boot.actuate.metrics.integration.SpringIntegrationMetricReader;\n+import org.springframework.boot.actuate.metrics.reader.CompositeMetricReader;\n import org.springframework.boot.actuate.metrics.reader.MetricReader;\n-import org.springframework.boot.actuate.metrics.repository.InMemoryMetricRepository;\n import org.springframework.boot.actuate.metrics.rich.RichGaugeReader;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n@@ -38,12 +42,17 @@ import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnJava;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnJava.JavaVersion;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration;\n import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\n import org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvider;\n import org.springframework.cache.CacheManager;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.integration.monitor.IntegrationMBeanExporter;\n+import org.springframework.lang.UsesJava7;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for {@link PublicMetrics}.\n@@ -56,12 +65,13 @@ import org.springframework.context.annotation.Configuration;\n @Configuration\n @AutoConfigureBefore(EndpointAutoConfiguration.class)\n @AutoConfigureAfter({ DataSourceAutoConfiguration.class, CacheAutoConfiguration.class,\n-\t\tMetricRepositoryAutoConfiguration.class, CacheStatisticsAutoConfiguration.class })\n+\t\tMetricRepositoryAutoConfiguration.class, CacheStatisticsAutoConfiguration.class,\n+\t\tIntegrationAutoConfiguration.class })\n public class PublicMetricsAutoConfiguration {\n \n \t@Autowired(required = false)\n-\t@ActuatorMetricRepository\n-\tprivate MetricReader metricReader = new InMemoryMetricRepository();\n+\t@ActuatorMetricReader\n+\tprivate List<MetricReader> metricReaders = Collections.emptyList();\n \n \t@Bean\n \tpublic SystemPublicMetrics systemPublicMetrics() {\n@@ -70,7 +80,7 @@ public class PublicMetricsAutoConfiguration {\n \n \t@Bean\n \tpublic MetricReaderPublicMetrics metricReaderPublicMetrics() {\n-\t\treturn new MetricReaderPublicMetrics(this.metricReader);\n+\t\treturn new MetricReaderPublicMetrics(new CompositeMetricReader(this.metricReaders.toArray(new MetricReader[0])));\n \t}\n \n \t@Bean\n@@ -120,4 +130,21 @@ public class PublicMetricsAutoConfiguration {\n \n \t}\n \n+\t@Configuration\n+\t@ConditionalOnClass(IntegrationMBeanExporter.class)\n+\t@ConditionalOnBean(IntegrationMBeanExporter.class)\n+\t@ConditionalOnJava(JavaVersion.SEVEN)\n+\t@UsesJava7\n+\tstatic class IntegrationMetricsConfiguration {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean\n+\t\tpublic MetricReaderPublicMetrics springIntegrationPublicMetrics(\n+\t\t\t\tIntegrationMBeanExporter exporter) {\n+\t\t\treturn new MetricReaderPublicMetrics(new SpringIntegrationMetricReader(\n+\t\t\t\t\texporter));\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport java.util.Collections;\nimport java.util.List;\n\nimport javax.servlet.Servlet;\nimport javax.sql.DataSource;\n\nimport org.apache.catalina.startup.Tomcat;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuate.cache.CacheStatisticsProvider;\nimport org.springframework.boot.actuate.endpoint.CachePublicMetrics;\nimport org.springframework.boot.actuate.endpoint.DataSourcePublicMetrics;\nimport org.springframework.boot.actuate.endpoint.MetricReaderPublicMetrics;\nimport org.springframework.boot.actuate.endpoint.PublicMetrics;\nimport org.springframework.boot.actuate.endpoint.RichGaugeReaderPublicMetrics;\nimport org.springframework.boot.actuate.endpoint.SystemPublicMetrics;\nimport org.springframework.boot.actuate.endpoint.TomcatPublicMetrics;\nimport org.springframework.boot.actuate.metrics.integration.SpringIntegrationMetricReader;\nimport org.springframework.boot.actuate.metrics.reader.CompositeMetricReader;\nimport org.springframework.boot.actuate.metrics.reader.MetricReader;\nimport org.springframework.boot.actuate.metrics.rich.RichGaugeReader;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnJava;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnJava.JavaVersion;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvider;\nimport org.springframework.cache.CacheManager;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.integration.monitor.IntegrationMBeanExporter;\nimport org.springframework.lang.UsesJava7;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link PublicMetrics}.\n *\n * @author Stephane Nicoll\n * @author Phillip Webb\n * @author Johannes Stelzer\n * @since 1.2.0\n */\n@Configuration\n@AutoConfigureBefore(EndpointAutoConfiguration.class)\n@AutoConfigureAfter({ DataSourceAutoConfiguration.class, CacheAutoConfiguration.class,\n\t\tMetricRepositoryAutoConfiguration.class, CacheStatisticsAutoConfiguration.class,\n\t\tIntegrationAutoConfiguration.class })\npublic class PublicMetricsAutoConfiguration {\n\n\t@Autowired(required = false)\n\t@ActuatorMetricReader\n\tprivate List<MetricReader> metricReaders = Collections.emptyList();\n\n\t@Bean\n\tpublic SystemPublicMetrics systemPublicMetrics() {\n\t\treturn new SystemPublicMetrics();\n\t}\n\n\t@Bean\n\tpublic MetricReaderPublicMetrics metricReaderPublicMetrics() {\n\t\treturn new MetricReaderPublicMetrics(new CompositeMetricReader(this.metricReaders.toArray(new MetricReader[0])));\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(RichGaugeReader.class)\n\tpublic RichGaugeReaderPublicMetrics richGaugePublicMetrics(\n\t\t\tRichGaugeReader richGaugeReader) {\n\t\treturn new RichGaugeReaderPublicMetrics(richGaugeReader);\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(DataSource.class)\n\t@ConditionalOnBean(DataSource.class)\n\tstatic class DataSourceMetricsConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnBean(DataSourcePoolMetadataProvider.class)\n\t\tpublic DataSourcePublicMetrics dataSourcePublicMetrics() {\n\t\t\treturn new DataSourcePublicMetrics();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ Servlet.class, Tomcat.class })\n\tstatic class TomcatMetricsConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic TomcatPublicMetrics tomcatPublicMetrics() {\n\t\t\treturn new TomcatPublicMetrics();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(CacheManager.class)\n\t@ConditionalOnBean(CacheManager.class)\n\tstatic class CacheStatisticsConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnBean(CacheStatisticsProvider.class)\n\t\tpublic CachePublicMetrics cachePublicMetrics() {\n\t\t\treturn new CachePublicMetrics();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(IntegrationMBeanExporter.class)\n\t@ConditionalOnBean(IntegrationMBeanExporter.class)\n\t@ConditionalOnJava(JavaVersion.SEVEN)\n\t@UsesJava7\n\tstatic class IntegrationMetricsConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic MetricReaderPublicMetrics springIntegrationPublicMetrics(\n\t\t\t\tIntegrationMBeanExporter exporter) {\n\t\t\treturn new MetricReaderPublicMetrics(new SpringIntegrationMetricReader(\n\t\t\t\t\texporter));\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport javax.servlet.Servlet;\nimport javax.sql.DataSource;\n\nimport org.apache.catalina.startup.Tomcat;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuate.cache.CacheStatisticsProvider;\nimport org.springframework.boot.actuate.endpoint.CachePublicMetrics;\nimport org.springframework.boot.actuate.endpoint.DataSourcePublicMetrics;\nimport org.springframework.boot.actuate.endpoint.MetricReaderPublicMetrics;\nimport org.springframework.boot.actuate.endpoint.PublicMetrics;\nimport org.springframework.boot.actuate.endpoint.RichGaugeReaderPublicMetrics;\nimport org.springframework.boot.actuate.endpoint.SystemPublicMetrics;\nimport org.springframework.boot.actuate.endpoint.TomcatPublicMetrics;\nimport org.springframework.boot.actuate.metrics.reader.MetricReader;\nimport org.springframework.boot.actuate.metrics.repository.InMemoryMetricRepository;\nimport org.springframework.boot.actuate.metrics.rich.RichGaugeReader;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvider;\nimport org.springframework.cache.CacheManager;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link PublicMetrics}.\n *\n * @author Stephane Nicoll\n * @author Phillip Webb\n * @author Johannes Stelzer\n * @since 1.2.0\n */\n@Configuration\n@AutoConfigureBefore(EndpointAutoConfiguration.class)\n@AutoConfigureAfter({ DataSourceAutoConfiguration.class, CacheAutoConfiguration.class,\n\t\tMetricRepositoryAutoConfiguration.class, CacheStatisticsAutoConfiguration.class })\npublic class PublicMetricsAutoConfiguration {\n\n\t@Autowired(required = false)\n\t@ActuatorMetricRepository\n\tprivate MetricReader metricReader = new InMemoryMetricRepository();\n\n\t@Bean\n\tpublic SystemPublicMetrics systemPublicMetrics() {\n\t\treturn new SystemPublicMetrics();\n\t}\n\n\t@Bean\n\tpublic MetricReaderPublicMetrics metricReaderPublicMetrics() {\n\t\treturn new MetricReaderPublicMetrics(this.metricReader);\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(RichGaugeReader.class)\n\tpublic RichGaugeReaderPublicMetrics richGaugePublicMetrics(\n\t\t\tRichGaugeReader richGaugeReader) {\n\t\treturn new RichGaugeReaderPublicMetrics(richGaugeReader);\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(DataSource.class)\n\t@ConditionalOnBean(DataSource.class)\n\tstatic class DataSourceMetricsConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnBean(DataSourcePoolMetadataProvider.class)\n\t\tpublic DataSourcePublicMetrics dataSourcePublicMetrics() {\n\t\t\treturn new DataSourcePublicMetrics();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ Servlet.class, Tomcat.class })\n\tstatic class TomcatMetricsConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic TomcatPublicMetrics tomcatPublicMetrics() {\n\t\t\treturn new TomcatPublicMetrics();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(CacheManager.class)\n\t@ConditionalOnBean(CacheManager.class)\n\tstatic class CacheStatisticsConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnBean(CacheStatisticsProvider.class)\n\t\tpublic CachePublicMetrics cachePublicMetrics() {\n\t\t\treturn new CachePublicMetrics();\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
