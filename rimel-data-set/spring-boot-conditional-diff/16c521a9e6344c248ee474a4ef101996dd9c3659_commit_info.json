{'_old_path': None, '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/elasticsearch/ReactiveRestClientAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2012-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.data.elasticsearch;\n+\n+import reactor.netty.http.client.HttpClient;\n+\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.context.properties.PropertyMapper;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.data.elasticsearch.client.ClientConfiguration;\n+import org.springframework.data.elasticsearch.client.reactive.ReactiveElasticsearchClient;\n+import org.springframework.data.elasticsearch.client.reactive.ReactiveRestClients;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.web.reactive.function.client.WebClient;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for Elasticsearch Reactive REST\n+ * clients.\n+ *\n+ * @author Brian Clozel\n+ * @since 2.2.0\n+ */\n+@Configuration(proxyBeanMethods = false)\n+@ConditionalOnClass({ ReactiveRestClients.class, WebClient.class, HttpClient.class })\n+@EnableConfigurationProperties(ReactiveRestClientProperties.class)\n+public class ReactiveRestClientAutoConfiguration {\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic ClientConfiguration clientConfiguration(\n+\t\t\tReactiveRestClientProperties properties) {\n+\t\tClientConfiguration.MaybeSecureClientConfigurationBuilder builder = ClientConfiguration\n+\t\t\t\t.builder().connectedTo(properties.getEndpoints().toArray(new String[0]));\n+\t\tif (properties.isUseSsl()) {\n+\t\t\tbuilder.usingSsl();\n+\t\t}\n+\t\tconfigureTimeouts(builder, properties);\n+\t\treturn builder.build();\n+\t}\n+\n+\tprivate void configureTimeouts(\n+\t\t\tClientConfiguration.TerminalClientConfigurationBuilder builder,\n+\t\t\tReactiveRestClientProperties properties) {\n+\t\tPropertyMapper map = PropertyMapper.get();\n+\t\tmap.from(properties.getConnectionTimeout()).whenNonNull()\n+\t\t\t\t.to(builder::withConnectTimeout);\n+\t\tmap.from(properties.getSocketTimeout()).whenNonNull()\n+\t\t\t\t.to(builder::withSocketTimeout);\n+\t\tmap.from(properties.getUsername()).whenHasText().to((username) -> {\n+\t\t\tHttpHeaders headers = new HttpHeaders();\n+\t\t\theaders.setBasicAuth(username, properties.getPassword());\n+\t\t\tbuilder.withDefaultHeaders(headers);\n+\t\t});\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic ReactiveElasticsearchClient reactiveElasticsearchClient(\n+\t\t\tClientConfiguration clientConfiguration) {\n+\t\treturn ReactiveRestClients.create(clientConfiguration);\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.elasticsearch;\n\nimport reactor.netty.http.client.HttpClient;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.context.properties.PropertyMapper;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.elasticsearch.client.ClientConfiguration;\nimport org.springframework.data.elasticsearch.client.reactive.ReactiveElasticsearchClient;\nimport org.springframework.data.elasticsearch.client.reactive.ReactiveRestClients;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.web.reactive.function.client.WebClient;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Elasticsearch Reactive REST\n * clients.\n *\n * @author Brian Clozel\n * @since 2.2.0\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass({ ReactiveRestClients.class, WebClient.class, HttpClient.class })\n@EnableConfigurationProperties(ReactiveRestClientProperties.class)\npublic class ReactiveRestClientAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic ClientConfiguration clientConfiguration(\n\t\t\tReactiveRestClientProperties properties) {\n\t\tClientConfiguration.MaybeSecureClientConfigurationBuilder builder = ClientConfiguration\n\t\t\t\t.builder().connectedTo(properties.getEndpoints().toArray(new String[0]));\n\t\tif (properties.isUseSsl()) {\n\t\t\tbuilder.usingSsl();\n\t\t}\n\t\tconfigureTimeouts(builder, properties);\n\t\treturn builder.build();\n\t}\n\n\tprivate void configureTimeouts(\n\t\t\tClientConfiguration.TerminalClientConfigurationBuilder builder,\n\t\t\tReactiveRestClientProperties properties) {\n\t\tPropertyMapper map = PropertyMapper.get();\n\t\tmap.from(properties.getConnectionTimeout()).whenNonNull()\n\t\t\t\t.to(builder::withConnectTimeout);\n\t\tmap.from(properties.getSocketTimeout()).whenNonNull()\n\t\t\t\t.to(builder::withSocketTimeout);\n\t\tmap.from(properties.getUsername()).whenHasText().to((username) -> {\n\t\t\tHttpHeaders headers = new HttpHeaders();\n\t\t\theaders.setBasicAuth(username, properties.getPassword());\n\t\t\tbuilder.withDefaultHeaders(headers);\n\t\t});\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic ReactiveElasticsearchClient reactiveElasticsearchClient(\n\t\t\tClientConfiguration clientConfiguration) {\n\t\treturn ReactiveRestClients.create(clientConfiguration);\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
