{'_old_path': PosixPath('spring-bootstrap-service/src/main/java/org/springframework/bootstrap/autoconfigure/service/ManagementAutoConfiguration.java'), '_new_path': PosixPath('spring-bootstrap-service/src/main/java/org/springframework/bootstrap/autoconfigure/service/ManagementAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -15,7 +15,6 @@\n  */\n package org.springframework.bootstrap.autoconfigure.service;\n \n-\n import org.springframework.beans.BeansException;\n import org.springframework.beans.factory.DisposableBean;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -41,7 +40,7 @@ public class ManagementAutoConfiguration implements ApplicationContextAware,\n \tprivate ApplicationContext parent;\n \tprivate ConfigurableApplicationContext context;\n \n-\t@ConditionalOnExpression("${container.port} == ${container.management_port}")\n+\t@ConditionalOnExpression("${container.port:8080} == ${container.management_port:8080}")\n \t@Configuration\n \t@Import({ VarzAutoConfiguration.class, HealthzAutoConfiguration.class })\n \tpublic static class ManagementEndpointsConfiguration {\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.bootstrap.autoconfigure.service;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.DisposableBean;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.bootstrap.context.annotation.ConditionalOnExpression;\nimport org.springframework.bootstrap.context.embedded.AnnotationConfigEmbeddedWebApplicationContext;\nimport org.springframework.bootstrap.service.properties.ContainerProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.context.ApplicationListener;\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.event.ContextRefreshedEvent;\n\n/**\n * @author Dave Syer\n * \n */\n@Configuration\npublic class ManagementAutoConfiguration implements ApplicationContextAware,\n\t\tDisposableBean, ApplicationListener<ContextRefreshedEvent> {\n\n\tprivate ApplicationContext parent;\n\tprivate ConfigurableApplicationContext context;\n\n\t@ConditionalOnExpression("${container.port:8080} == ${container.management_port:8080}")\n\t@Configuration\n\t@Import({ VarzAutoConfiguration.class, HealthzAutoConfiguration.class })\n\tpublic static class ManagementEndpointsConfiguration {\n\t}\n\n\t@Autowired\n\tprivate ContainerProperties configuration = new ContainerProperties();\n\n\t@Override\n\tpublic void setApplicationContext(ApplicationContext applicationContext)\n\t\t\tthrows BeansException {\n\t\tthis.parent = applicationContext;\n\t}\n\n\t@Override\n\tpublic void destroy() throws Exception {\n\t\tif (this.context != null) {\n\t\t\tthis.context.close();\n\t\t}\n\t}\n\n\t@Override\n\tpublic void onApplicationEvent(ContextRefreshedEvent event) {\n\t\tif (event.getSource() != this.parent) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.configuration.getPort() != this.configuration.getManagementPort()) {\n\t\t\tAnnotationConfigEmbeddedWebApplicationContext context = new AnnotationConfigEmbeddedWebApplicationContext();\n\t\t\tcontext.setParent(this.parent);\n\t\t\tcontext.register(ManagementContainerConfiguration.class,\n\t\t\t\t\tVarzAutoConfiguration.class, HealthzAutoConfiguration.class);\n\t\t\tcontext.refresh();\n\t\t\tthis.context = context;\n\t\t}\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.bootstrap.autoconfigure.service;\n\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.DisposableBean;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.bootstrap.context.annotation.ConditionalOnExpression;\nimport org.springframework.bootstrap.context.embedded.AnnotationConfigEmbeddedWebApplicationContext;\nimport org.springframework.bootstrap.service.properties.ContainerProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.context.ApplicationListener;\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.event.ContextRefreshedEvent;\n\n/**\n * @author Dave Syer\n * \n */\n@Configuration\npublic class ManagementAutoConfiguration implements ApplicationContextAware,\n\t\tDisposableBean, ApplicationListener<ContextRefreshedEvent> {\n\n\tprivate ApplicationContext parent;\n\tprivate ConfigurableApplicationContext context;\n\n\t@ConditionalOnExpression("${container.port} == ${container.management_port}")\n\t@Configuration\n\t@Import({ VarzAutoConfiguration.class, HealthzAutoConfiguration.class })\n\tpublic static class ManagementEndpointsConfiguration {\n\t}\n\n\t@Autowired\n\tprivate ContainerProperties configuration = new ContainerProperties();\n\n\t@Override\n\tpublic void setApplicationContext(ApplicationContext applicationContext)\n\t\t\tthrows BeansException {\n\t\tthis.parent = applicationContext;\n\t}\n\n\t@Override\n\tpublic void destroy() throws Exception {\n\t\tif (this.context != null) {\n\t\t\tthis.context.close();\n\t\t}\n\t}\n\n\t@Override\n\tpublic void onApplicationEvent(ContextRefreshedEvent event) {\n\t\tif (event.getSource() != this.parent) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.configuration.getPort() != this.configuration.getManagementPort()) {\n\t\t\tAnnotationConfigEmbeddedWebApplicationContext context = new AnnotationConfigEmbeddedWebApplicationContext();\n\t\t\tcontext.setParent(this.parent);\n\t\t\tcontext.register(ManagementContainerConfiguration.class,\n\t\t\t\t\tVarzAutoConfiguration.class, HealthzAutoConfiguration.class);\n\t\t\tcontext.refresh();\n\t\t\tthis.context = context;\n\t\t}\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
