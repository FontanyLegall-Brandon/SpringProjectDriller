@@ -0,0 +1,132 @@
+
+
+package org.springframework.boot.actuate.cloudfoundry;
+
+import java.util.Arrays;
+
+import org.springframework.boot.actuate.autoconfigure.endpoint.infrastructure.EndpointProvider;
+import org.springframework.boot.actuate.autoconfigure.endpoint.infrastructure.ServletEndpointAutoConfiguration;
+import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
+import org.springframework.boot.autoconfigure.security.SecurityProperties;
+import org.springframework.boot.cloud.CloudPlatform;
+import org.springframework.boot.endpoint.web.WebEndpointOperation;
+import org.springframework.boot.web.client.RestTemplateBuilder;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.core.annotation.Order;
+import org.springframework.core.env.Environment;
+import org.springframework.http.HttpMethod;
+import org.springframework.security.config.annotation.web.WebSecurityConfigurer;
+import org.springframework.security.config.annotation.web.builders.WebSecurity;
+import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
+import org.springframework.web.cors.CorsConfiguration;
+import org.springframework.web.servlet.DispatcherServlet;
+
+
+@Configuration
+@ConditionalOnProperty(prefix = , name = , matchIfMissing = true)
+@AutoConfigureAfter(ServletEndpointAutoConfiguration.class)
+@ConditionalOnCloudPlatform(CloudPlatform.CLOUD_FOUNDRY)
+public class CloudFoundryActuatorAutoConfiguration {
+
+	
+	@Configuration
+	@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)
+	@ConditionalOnClass(DispatcherServlet.class)
+	@ConditionalOnBean(DispatcherServlet.class)
+	static class MvcWebEndpointConfiguration {
+
+		@Bean
+		public CloudFoundryWebEndpointServletHandlerMapping cloudFoundryWebEndpointServletHandlerMapping(
+				EndpointProvider<WebEndpointOperation> provider,
+				Environment environment, RestTemplateBuilder builder) {
+			CloudFoundryWebEndpointServletHandlerMapping handlerMapping = new CloudFoundryWebEndpointServletHandlerMapping(
+					, provider.getEndpoints(),
+					getCorsConfiguration(), getSecurityInterceptor(builder, environment));
+			return handlerMapping;
+		}
+
+		private CloudFoundrySecurityInterceptor getSecurityInterceptor(
+				RestTemplateBuilder restTemplateBuilder, Environment environment) {
+			CloudFoundrySecurityService cloudfoundrySecurityService = getCloudFoundrySecurityService(
+					restTemplateBuilder, environment);
+			TokenValidator tokenValidator = new TokenValidator(cloudfoundrySecurityService);
+			return new CloudFoundrySecurityInterceptor(
+					tokenValidator, cloudfoundrySecurityService,
+					environment.getProperty());
+		}
+
+		private CloudFoundrySecurityService getCloudFoundrySecurityService(
+				RestTemplateBuilder restTemplateBuilder, Environment environment) {
+			String cloudControllerUrl = environment.getProperty();
+			boolean skipSslValidation = environment.getProperty(
+					, Boolean.class, false);
+			return cloudControllerUrl == null ? null
+					: new CloudFoundrySecurityService(restTemplateBuilder, cloudControllerUrl,
+					skipSslValidation);
+		}
+
+		private CorsConfiguration getCorsConfiguration() {
+			CorsConfiguration corsConfiguration = new CorsConfiguration();
+			corsConfiguration.addAllowedOrigin(CorsConfiguration.ALL);
+			corsConfiguration.setAllowedMethods(
+					Arrays.asList(HttpMethod.GET.name(), HttpMethod.POST.name()));
+			corsConfiguration.setAllowedHeaders(
+					Arrays.asList(, , ));
+			return corsConfiguration;
+		}
+
+	}
+
+	
+	@ConditionalOnClass(WebSecurity.class)
+	@Order(SecurityProperties.IGNORED_ORDER)
+	@Configuration
+	public static class IgnoredPathsWebSecurityConfigurer
+			implements WebSecurityConfigurer<WebSecurity> {
+
+		@Override
+		public void init(WebSecurity builder) throws Exception {
+			builder.ignoring().requestMatchers(new AntPathRequestMatcher());
+		}
+
+		@Override
+		public void configure(WebSecurity builder) throws Exception {
+
+		}
+
+	}
+
+}

