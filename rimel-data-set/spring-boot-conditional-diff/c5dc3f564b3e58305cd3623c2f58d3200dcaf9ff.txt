@@ -0,0 +1,100 @@
+
+
+package org.springframework.boot.autoconfigure.security.oauth2.client;
+
+import org.springframework.beans.factory.BeanFactory;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.autoconfigure.condition.ConditionOutcome;
+import org.springframework.boot.autoconfigure.condition.SpringBootCondition;
+import org.springframework.boot.autoconfigure.security.SecurityProperties;
+import org.springframework.boot.context.properties.EnableConfigurationProperties;
+import org.springframework.context.annotation.ConditionContext;
+import org.springframework.context.annotation.Conditional;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.core.Ordered;
+import org.springframework.core.type.AnnotatedTypeMetadata;
+import org.springframework.security.config.annotation.web.builders.HttpSecurity;
+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
+import org.springframework.util.ClassUtils;
+
+
+@Configuration
+@EnableConfigurationProperties(OAuth2SsoProperties.class)
+public class OAuth2SsoDefaultConfiguration {
+
+	@Configuration
+	@Conditional(NeedsWebSecurityCondition.class)
+	protected static class WebSecurityConfiguration extends WebSecurityConfigurerAdapter
+			implements Ordered {
+
+		@Autowired
+		BeanFactory beanFactory;
+
+		@Autowired
+		OAuth2SsoProperties sso;
+
+		@Override
+		protected void configure(HttpSecurity http) throws Exception {
+			http.antMatcher().authorizeRequests().anyRequest().authenticated();
+			new SsoSecurityConfigurer(beanFactory).configure(http);
+		}
+
+		@Override
+		public int getOrder() {
+			if (sso.getFilterOrder() != null) {
+				return sso.getFilterOrder();
+			}
+			if (ClassUtils
+					.isPresent(
+							,
+							null)) {
+				
+				
+				
+				return SecurityProperties.ACCESS_OVERRIDE_ORDER - 5;
+			}
+			return SecurityProperties.ACCESS_OVERRIDE_ORDER;
+		}
+
+	}
+
+	private static class NeedsWebSecurityCondition extends SpringBootCondition {
+		@Override
+		public ConditionOutcome getMatchOutcome(ConditionContext context,
+				AnnotatedTypeMetadata metadata) {
+			String[] enablers = context.getBeanFactory().getBeanNamesForAnnotation(
+					EnableOAuth2Sso.class);
+			for (String name : enablers) {
+				if (context.getBeanFactory().isTypeMatch(name,
+						WebSecurityConfigurerAdapter.class)) {
+					return ConditionOutcome
+							.noMatch();
+				}
+			}
+			return ConditionOutcome
+					.match();
+		}
+	}
+
+}

