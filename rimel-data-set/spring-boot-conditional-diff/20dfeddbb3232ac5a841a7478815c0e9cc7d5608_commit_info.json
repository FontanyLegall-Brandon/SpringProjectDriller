{'_old_path': None, '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketRequesterAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2012-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.rsocket;\n+\n+import io.rsocket.RSocketFactory;\n+import io.rsocket.transport.netty.server.TcpServerTransport;\n+import reactor.netty.http.server.HttpServer;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.messaging.rsocket.RSocketRequester;\n+import org.springframework.messaging.rsocket.RSocketStrategies;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for\n+ * {@link org.springframework.messaging.rsocket.RSocketRequester}. This auto-configuration\n+ * creates {@link org.springframework.messaging.rsocket.RSocketRequester.Builder}\n+ * prototype beans, as the builders are stateful and should not be reused to build\n+ * requester instances with different configurations.\n+ *\n+ * @author Brian Clozel\n+ * @since 2.2.0\n+ */\n+@Configuration(proxyBeanMethods = false)\n+@ConditionalOnClass({ RSocketRequester.class, RSocketFactory.class, HttpServer.class,\n+\t\tTcpServerTransport.class })\n+@AutoConfigureAfter(RSocketStrategiesAutoConfiguration.class)\n+public class RSocketRequesterAutoConfiguration {\n+\n+\t@Bean\n+\t@Scope("prototype")\n+\t@ConditionalOnMissingBean\n+\tpublic RSocketRequester.Builder rsocketRequesterBuilder(\n+\t\t\tRSocketStrategies strategies) {\n+\t\treturn RSocketRequester.builder().rsocketStrategies(strategies);\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.rsocket;\n\nimport io.rsocket.RSocketFactory;\nimport io.rsocket.transport.netty.server.TcpServerTransport;\nimport reactor.netty.http.server.HttpServer;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.messaging.rsocket.RSocketRequester;\nimport org.springframework.messaging.rsocket.RSocketStrategies;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for\n * {@link org.springframework.messaging.rsocket.RSocketRequester}. This auto-configuration\n * creates {@link org.springframework.messaging.rsocket.RSocketRequester.Builder}\n * prototype beans, as the builders are stateful and should not be reused to build\n * requester instances with different configurations.\n *\n * @author Brian Clozel\n * @since 2.2.0\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass({ RSocketRequester.class, RSocketFactory.class, HttpServer.class,\n\t\tTcpServerTransport.class })\n@AutoConfigureAfter(RSocketStrategiesAutoConfiguration.class)\npublic class RSocketRequesterAutoConfiguration {\n\n\t@Bean\n\t@Scope("prototype")\n\t@ConditionalOnMissingBean\n\tpublic RSocketRequester.Builder rsocketRequesterBuilder(\n\t\t\tRSocketStrategies strategies) {\n\t\treturn RSocketRequester.builder().rsocketStrategies(strategies);\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
