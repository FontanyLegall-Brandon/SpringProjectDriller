{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/couchbase/CouchbaseHealthIndicatorAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/couchbase/CouchbaseHealthIndicatorAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -18,7 +18,7 @@ package org.springframework.boot.actuate.autoconfigure.couchbase;\n \n import java.util.Map;\n \n-import com.couchbase.client.java.Bucket;\n+import com.couchbase.client.java.Cluster;\n \n import org.springframework.boot.actuate.autoconfigure.health.CompositeHealthIndicatorConfiguration;\n import org.springframework.boot.actuate.autoconfigure.health.ConditionalOnEnabledHealthIndicator;\n@@ -31,11 +31,9 @@ import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration;\n-import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.data.couchbase.core.CouchbaseOperations;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for\n@@ -43,40 +41,33 @@ import org.springframework.data.couchbase.core.CouchbaseOperations;\n  *\n  * @author Eddú Meléndez\n  * @author Stephane Nicoll\n+ * @author Andy Wilkinson Nicoll\n  * @since 2.0.0\n  */\n @Configuration\n-@ConditionalOnClass({ CouchbaseOperations.class, Bucket.class })\n-@ConditionalOnBean(CouchbaseOperations.class)\n+@ConditionalOnClass(Cluster.class)\n+@ConditionalOnBean(Cluster.class)\n @ConditionalOnEnabledHealthIndicator("couchbase")\n @AutoConfigureBefore(HealthIndicatorAutoConfiguration.class)\n-@AutoConfigureAfter(CouchbaseDataAutoConfiguration.class)\n-@EnableConfigurationProperties(CouchbaseHealthIndicatorProperties.class)\n-public class CouchbaseHealthIndicatorAutoConfiguration extends\n-\t\tCompositeHealthIndicatorConfiguration<CouchbaseHealthIndicator, CouchbaseOperations> {\n+@AutoConfigureAfter(CouchbaseAutoConfiguration.class)\n+public class CouchbaseHealthIndicatorAutoConfiguration\n+\t\textends CompositeHealthIndicatorConfiguration<CouchbaseHealthIndicator, Cluster> {\n \n-\tprivate final Map<String, CouchbaseOperations> couchbaseOperations;\n+\tprivate final Map<String, Cluster> clusters;\n \n-\tprivate final CouchbaseHealthIndicatorProperties properties;\n-\n-\tpublic CouchbaseHealthIndicatorAutoConfiguration(\n-\t\t\tMap<String, CouchbaseOperations> couchbaseOperations,\n-\t\t\tCouchbaseHealthIndicatorProperties properties) {\n-\t\tthis.couchbaseOperations = couchbaseOperations;\n-\t\tthis.properties = properties;\n+\tpublic CouchbaseHealthIndicatorAutoConfiguration(Map<String, Cluster> clusters) {\n+\t\tthis.clusters = clusters;\n \t}\n \n \t@Bean\n \t@ConditionalOnMissingBean(name = "couchbaseHealthIndicator")\n \tpublic HealthIndicator couchbaseHealthIndicator() {\n-\t\treturn createHealthIndicator(this.couchbaseOperations);\n+\t\treturn createHealthIndicator(this.clusters);\n \t}\n \n \t@Override\n-\tprotected CouchbaseHealthIndicator createHealthIndicator(\n-\t\t\tCouchbaseOperations couchbaseOperations) {\n-\t\treturn new CouchbaseHealthIndicator(couchbaseOperations,\n-\t\t\t\tthis.properties.getTimeout());\n+\tprotected CouchbaseHealthIndicator createHealthIndicator(Cluster cluster) {\n+\t\treturn new CouchbaseHealthIndicator(cluster);\n \t}\n \n }\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.couchbase;\n\nimport java.util.Map;\n\nimport com.couchbase.client.java.Cluster;\n\nimport org.springframework.boot.actuate.autoconfigure.health.CompositeHealthIndicatorConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.health.ConditionalOnEnabledHealthIndicator;\nimport org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration;\nimport org.springframework.boot.actuate.couchbase.CouchbaseHealthIndicator;\nimport org.springframework.boot.actuate.health.HealthIndicator;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for\n * {@link CouchbaseHealthIndicator}.\n *\n * @author Eddú Meléndez\n * @author Stephane Nicoll\n * @author Andy Wilkinson Nicoll\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass(Cluster.class)\n@ConditionalOnBean(Cluster.class)\n@ConditionalOnEnabledHealthIndicator("couchbase")\n@AutoConfigureBefore(HealthIndicatorAutoConfiguration.class)\n@AutoConfigureAfter(CouchbaseAutoConfiguration.class)\npublic class CouchbaseHealthIndicatorAutoConfiguration\n\t\textends CompositeHealthIndicatorConfiguration<CouchbaseHealthIndicator, Cluster> {\n\n\tprivate final Map<String, Cluster> clusters;\n\n\tpublic CouchbaseHealthIndicatorAutoConfiguration(Map<String, Cluster> clusters) {\n\t\tthis.clusters = clusters;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "couchbaseHealthIndicator")\n\tpublic HealthIndicator couchbaseHealthIndicator() {\n\t\treturn createHealthIndicator(this.clusters);\n\t}\n\n\t@Override\n\tprotected CouchbaseHealthIndicator createHealthIndicator(Cluster cluster) {\n\t\treturn new CouchbaseHealthIndicator(cluster);\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.couchbase;\n\nimport java.util.Map;\n\nimport com.couchbase.client.java.Bucket;\n\nimport org.springframework.boot.actuate.autoconfigure.health.CompositeHealthIndicatorConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.health.ConditionalOnEnabledHealthIndicator;\nimport org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration;\nimport org.springframework.boot.actuate.couchbase.CouchbaseHealthIndicator;\nimport org.springframework.boot.actuate.health.HealthIndicator;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.couchbase.core.CouchbaseOperations;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for\n * {@link CouchbaseHealthIndicator}.\n *\n * @author Eddú Meléndez\n * @author Stephane Nicoll\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass({ CouchbaseOperations.class, Bucket.class })\n@ConditionalOnBean(CouchbaseOperations.class)\n@ConditionalOnEnabledHealthIndicator("couchbase")\n@AutoConfigureBefore(HealthIndicatorAutoConfiguration.class)\n@AutoConfigureAfter(CouchbaseDataAutoConfiguration.class)\n@EnableConfigurationProperties(CouchbaseHealthIndicatorProperties.class)\npublic class CouchbaseHealthIndicatorAutoConfiguration extends\n\t\tCompositeHealthIndicatorConfiguration<CouchbaseHealthIndicator, CouchbaseOperations> {\n\n\tprivate final Map<String, CouchbaseOperations> couchbaseOperations;\n\n\tprivate final CouchbaseHealthIndicatorProperties properties;\n\n\tpublic CouchbaseHealthIndicatorAutoConfiguration(\n\t\t\tMap<String, CouchbaseOperations> couchbaseOperations,\n\t\t\tCouchbaseHealthIndicatorProperties properties) {\n\t\tthis.couchbaseOperations = couchbaseOperations;\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "couchbaseHealthIndicator")\n\tpublic HealthIndicator couchbaseHealthIndicator() {\n\t\treturn createHealthIndicator(this.couchbaseOperations);\n\t}\n\n\t@Override\n\tprotected CouchbaseHealthIndicator createHealthIndicator(\n\t\t\tCouchbaseOperations couchbaseOperations) {\n\t\treturn new CouchbaseHealthIndicator(couchbaseOperations,\n\t\t\t\tthis.properties.getTimeout());\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
