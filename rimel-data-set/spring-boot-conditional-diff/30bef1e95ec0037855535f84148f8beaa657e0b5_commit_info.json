{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJavaTests.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2012-2014 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.condition;\n+\n+import org.hamcrest.Matcher;\n+import org.junit.Test;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnJava.JavaVersion;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnJava.Range;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.iterableWithSize;\n+import static org.junit.Assert.assertThat;\n+\n+/**\n+ * Tests for {@link ConditionalOnJava}.\n+ *\n+ * @author Oliver Gierke\n+ */\n+public class ConditionalOnJavaTests {\n+\n+\tprivate final AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n+\n+\t@Test\n+\tpublic void doesNotMatchIfBetterVersionIsRequired() {\n+\n+\t\tthis.context.register(Java9Required.class);\n+\t\tthis.context.refresh();\n+\n+\t\tassertPresent(false);\n+\t}\n+\n+\t@Test\n+\tpublic void doesNotMatchIfLowerIsRequired() {\n+\n+\t\tthis.context.register(Java5Required.class);\n+\t\tthis.context.refresh();\n+\n+\t\tassertPresent(false);\n+\t}\n+\n+\t@Test\n+\tpublic void matchesIfVersionIsInRange() {\n+\n+\t\tthis.context.register(Java6Required.class);\n+\t\tthis.context.refresh();\n+\n+\t\tassertPresent(true);\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnJava(JavaVersion.NINE)\n+\tstatic class Java9Required {\n+\n+\t\t@Bean\n+\t\tString foo() {\n+\t\t\treturn "foo";\n+\t\t}\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnJava(value = JavaVersion.SIX, range = Range.OLDER_THAN)\n+\tstatic class Java5Required {\n+\n+\t\t@Bean\n+\t\tString foo() {\n+\t\t\treturn "foo";\n+\t\t}\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnJava(JavaVersion.SIX)\n+\tstatic class Java6Required {\n+\n+\t\t@Bean\n+\t\tString foo() {\n+\t\t\treturn "foo";\n+\t\t}\n+\t}\n+\n+\tprivate void assertPresent(boolean expected) {\n+\n+\t\tint expectedNumber = expected ? 1 : 0;\n+\t\tMatcher<Iterable<String>> matcher = iterableWithSize(expectedNumber);\n+\n+\t\tassertThat(this.context.getBeansOfType(String.class).values(), is(matcher));\n+\t}\n+}\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport org.hamcrest.Matcher;\nimport org.junit.Test;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnJava.JavaVersion;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnJava.Range;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport static org.hamcrest.Matchers.is;\nimport static org.hamcrest.Matchers.iterableWithSize;\nimport static org.junit.Assert.assertThat;\n\n/**\n * Tests for {@link ConditionalOnJava}.\n *\n * @author Oliver Gierke\n */\npublic class ConditionalOnJavaTests {\n\n\tprivate final AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n\n\t@Test\n\tpublic void doesNotMatchIfBetterVersionIsRequired() {\n\n\t\tthis.context.register(Java9Required.class);\n\t\tthis.context.refresh();\n\n\t\tassertPresent(false);\n\t}\n\n\t@Test\n\tpublic void doesNotMatchIfLowerIsRequired() {\n\n\t\tthis.context.register(Java5Required.class);\n\t\tthis.context.refresh();\n\n\t\tassertPresent(false);\n\t}\n\n\t@Test\n\tpublic void matchesIfVersionIsInRange() {\n\n\t\tthis.context.register(Java6Required.class);\n\t\tthis.context.refresh();\n\n\t\tassertPresent(true);\n\t}\n\n\t@Configuration\n\t@ConditionalOnJava(JavaVersion.NINE)\n\tstatic class Java9Required {\n\n\t\t@Bean\n\t\tString foo() {\n\t\t\treturn "foo";\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnJava(value = JavaVersion.SIX, range = Range.OLDER_THAN)\n\tstatic class Java5Required {\n\n\t\t@Bean\n\t\tString foo() {\n\t\t\treturn "foo";\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnJava(JavaVersion.SIX)\n\tstatic class Java6Required {\n\n\t\t@Bean\n\t\tString foo() {\n\t\t\treturn "foo";\n\t\t}\n\t}\n\n\tprivate void assertPresent(boolean expected) {\n\n\t\tint expectedNumber = expected ? 1 : 0;\n\t\tMatcher<Iterable<String>> matcher = iterableWithSize(expectedNumber);\n\n\t\tassertThat(this.context.getBeansOfType(String.class).values(), is(matcher));\n\t}\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
