@@ -0,0 +1,84 @@
+
+
+package org.springframework.boot.autoconfigure.condition;
+
+import org.junit.Test;
+
+import org.springframework.boot.cloud.CloudPlatform;
+import org.springframework.boot.test.util.EnvironmentTestUtils;
+import org.springframework.context.annotation.AnnotationConfigApplicationContext;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+
+public class ConditionalOnCloudPlatformTests {
+
+	private final AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();
+
+	@Test
+	public void outcomeWhenCloudfoundryPlatformNotPresentShouldNotMatch()
+			throws Exception {
+		load(CloudFoundryPlatformConfig.class, );
+		assertThat(this.context.containsBean()).isFalse();
+	}
+
+	@Test
+	public void outcomeWhenCloudfoundryPlatformPresentShouldMatch() throws Exception {
+		load(CloudFoundryPlatformConfig.class, );
+		assertThat(this.context.containsBean()).isTrue();
+	}
+
+	@Test
+	public void outcomeWhenCloudfoundryPlatformPresentAndMethodTargetShouldMatch()
+			throws Exception {
+		load(CloudFoundryPlatformOnMethodConfig.class, );
+		assertThat(this.context.containsBean()).isTrue();
+	}
+
+	private void load(Class<?> config, String... environment) {
+		EnvironmentTestUtils.addEnvironment(this.context, environment);
+		this.context.register(config);
+		this.context.refresh();
+	}
+
+	@Configuration
+	@ConditionalOnCloudPlatform(CloudPlatform.CLOUD_FOUNDRY)
+	static class CloudFoundryPlatformConfig {
+
+		@Bean
+		public String foo() {
+			return ;
+		}
+
+	}
+
+	@Configuration
+	static class CloudFoundryPlatformOnMethodConfig {
+
+		@Bean
+		@ConditionalOnCloudPlatform(CloudPlatform.CLOUD_FOUNDRY)
+		public String foo() {
+			return ;
+		}
+
+	}
+
+}

