@@ -38,31 +38,28 @@ import org.springframework.web.reactive.function.client.WebClient;
  * @since 2.0.0
  */
 @Configuration
-@ConditionalOnClass({WebClient.class, WebTestClient.class})
+@ConditionalOnClass({ WebClient.class, WebTestClient.class })
 @AutoConfigureAfter(CodecsAutoConfiguration.class)
 public class WebTestClientAutoConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean
 	public WebTestClient webTestClient(ApplicationContext applicationContext) {
-
-		WebTestClient.Builder clientBuilder = WebTestClient
+		WebTestClient.Builder builder = WebTestClient
 				.bindToApplicationContext(applicationContext).configureClient();
-		customizeWebTestClientCodecs(clientBuilder, applicationContext);
-		return clientBuilder.build();
+		customizeWebTestClientCodecs(builder, applicationContext);
+		return builder.build();
 	}
 
-	private void customizeWebTestClientCodecs(WebTestClient.Builder clientBuilder,
+	private void customizeWebTestClientCodecs(WebTestClient.Builder builder,
 			ApplicationContext applicationContext) {
-
 		Collection<CodecCustomizer> codecCustomizers = applicationContext
 				.getBeansOfType(CodecCustomizer.class).values();
 		if (!CollectionUtils.isEmpty(codecCustomizers)) {
-			clientBuilder.exchangeStrategies(ExchangeStrategies.builder()
-					.codecs(codecs -> {
-						codecCustomizers.forEach(codecCustomizer -> codecCustomizer.customize(codecs));
-					})
-					.build());
+			builder.exchangeStrategies(ExchangeStrategies.builder().codecs((codecs) -> {
+				codecCustomizers
+						.forEach((codecCustomizer) -> codecCustomizer.customize(codecs));
+			}).build());
 		}
 	}
 

