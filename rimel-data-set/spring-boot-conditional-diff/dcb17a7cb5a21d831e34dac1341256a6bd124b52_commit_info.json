{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jmx/JmxAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jmx/JmxAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -22,6 +22,7 @@ import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.SearchStrategy;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.EnableMBeanExport;\n@@ -42,7 +43,7 @@ import org.springframework.jmx.support.MBeanServerFactoryBean;\n public class JmxAutoConfiguration {\n \n \t@Configuration\n-\t@ConditionalOnMissingBean({ MBeanExporter.class })\n+\t@ConditionalOnMissingBean(value = MBeanExporter.class, search = SearchStrategy.CURRENT)\n \t@EnableMBeanExport(defaultDomain = "${spring.jmx.default_domain:}", server = "${spring.jmx.server:mbeanServer}")\n \tpublic static class MBeanExport {\n \t}\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jmx;\n\nimport javax.management.MBeanServer;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.EnableMBeanExport;\nimport org.springframework.jmx.export.MBeanExporter;\nimport org.springframework.jmx.support.MBeanServerFactoryBean;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to enable/disable Spring\'s\n * {@link EnableMBeanExport} mechanism based on configuration properties.\n * <p>\n * To disable auto export of annotation beans set <code>spring.jmx.enabled: false</code>.\n * \n * @author Christian Dupuis\n */\n@Configuration\n@ConditionalOnClass({ MBeanExporter.class })\n@ConditionalOnExpression("${spring.jmx.enabled:true}")\npublic class JmxAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnMissingBean(value = MBeanExporter.class, search = SearchStrategy.CURRENT)\n\t@EnableMBeanExport(defaultDomain = "${spring.jmx.default_domain:}", server = "${spring.jmx.server:mbeanServer}")\n\tpublic static class MBeanExport {\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(MBeanServer.class)\n\tpublic MBeanServerFactoryBean mbeanServer() {\n\t\tMBeanServerFactoryBean factory = new MBeanServerFactoryBean();\n\t\tfactory.setLocateExistingServerIfPossible(true);\n\t\treturn factory;\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jmx;\n\nimport javax.management.MBeanServer;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.EnableMBeanExport;\nimport org.springframework.jmx.export.MBeanExporter;\nimport org.springframework.jmx.support.MBeanServerFactoryBean;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to enable/disable Spring\'s\n * {@link EnableMBeanExport} mechanism based on configuration properties.\n * <p>\n * To disable auto export of annotation beans set <code>spring.jmx.enabled: false</code>.\n * \n * @author Christian Dupuis\n */\n@Configuration\n@ConditionalOnClass({ MBeanExporter.class })\n@ConditionalOnExpression("${spring.jmx.enabled:true}")\npublic class JmxAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnMissingBean({ MBeanExporter.class })\n\t@EnableMBeanExport(defaultDomain = "${spring.jmx.default_domain:}", server = "${spring.jmx.server:mbeanServer}")\n\tpublic static class MBeanExport {\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(MBeanServer.class)\n\tpublic MBeanServerFactoryBean mbeanServer() {\n\t\tMBeanServerFactoryBean factory = new MBeanServerFactoryBean();\n\t\tfactory.setLocateExistingServerIfPossible(true);\n\t\treturn factory;\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
