{'_old_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/AnyNestedConditionTests.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/AnyNestedConditionTests.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -31,12 +31,13 @@ import static org.junit.Assert.assertThat;\n  * Tests for {@link AnyNestedCondition}.\n  *\n  * @author Phillip Webb\n+ * @author Dave Syer\n  */\n public class AnyNestedConditionTests {\n \n \t@Test\n \tpublic void neither() throws Exception {\n-\t\tAnnotationConfigApplicationContext context = load(OnPropertyAorBCondition.class);\n+\t\tAnnotationConfigApplicationContext context = load(Config.class);\n \t\tassertThat(context.containsBean("myBean"), equalTo(false));\n \t\tcontext.close();\n \t}\n@@ -92,6 +93,7 @@ public class AnyNestedConditionTests {\n \n \t\t}\n \n+\t\t@ConditionalOnExpression("true")\n \t\t@ConditionalOnProperty("b")\n \t\tstatic class HasPropertyB {\n \n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport org.junit.Test;\n\nimport org.springframework.boot.test.EnvironmentTestUtils;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\n\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.junit.Assert.assertThat;\n\n/**\n * Tests for {@link AnyNestedCondition}.\n *\n * @author Phillip Webb\n * @author Dave Syer\n */\npublic class AnyNestedConditionTests {\n\n\t@Test\n\tpublic void neither() throws Exception {\n\t\tAnnotationConfigApplicationContext context = load(Config.class);\n\t\tassertThat(context.containsBean("myBean"), equalTo(false));\n\t\tcontext.close();\n\t}\n\n\t@Test\n\tpublic void propertyA() throws Exception {\n\t\tAnnotationConfigApplicationContext context = load(Config.class, "a:a");\n\t\tassertThat(context.containsBean("myBean"), equalTo(true));\n\t\tcontext.close();\n\t}\n\n\t@Test\n\tpublic void propertyB() throws Exception {\n\t\tAnnotationConfigApplicationContext context = load(Config.class, "b:b");\n\t\tassertThat(context.containsBean("myBean"), equalTo(true));\n\t\tcontext.close();\n\t}\n\n\t@Test\n\tpublic void both() throws Exception {\n\t\tAnnotationConfigApplicationContext context = load(Config.class, "a:a", "b:b");\n\t\tassertThat(context.containsBean("myBean"), equalTo(true));\n\t\tcontext.close();\n\t}\n\n\tprivate AnnotationConfigApplicationContext load(Class<?> config, String... env) {\n\t\tAnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n\t\tEnvironmentTestUtils.addEnvironment(context, env);\n\t\tcontext.register(config);\n\t\tcontext.refresh();\n\t\treturn context;\n\t}\n\n\t@Configuration\n\t@Conditional(OnPropertyAorBCondition.class)\n\tpublic static class Config {\n\n\t\t@Bean\n\t\tpublic String myBean() {\n\t\t\treturn "myBean";\n\t\t}\n\n\t}\n\n\tstatic class OnPropertyAorBCondition extends AnyNestedCondition {\n\n\t\tOnPropertyAorBCondition() {\n\t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION);\n\t\t}\n\n\t\t@ConditionalOnProperty("a")\n\t\tstatic class HasPropertyA {\n\n\t\t}\n\n\t\t@ConditionalOnExpression("true")\n\t\t@ConditionalOnProperty("b")\n\t\tstatic class HasPropertyB {\n\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport org.junit.Test;\n\nimport org.springframework.boot.test.EnvironmentTestUtils;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\n\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.junit.Assert.assertThat;\n\n/**\n * Tests for {@link AnyNestedCondition}.\n *\n * @author Phillip Webb\n */\npublic class AnyNestedConditionTests {\n\n\t@Test\n\tpublic void neither() throws Exception {\n\t\tAnnotationConfigApplicationContext context = load(OnPropertyAorBCondition.class);\n\t\tassertThat(context.containsBean("myBean"), equalTo(false));\n\t\tcontext.close();\n\t}\n\n\t@Test\n\tpublic void propertyA() throws Exception {\n\t\tAnnotationConfigApplicationContext context = load(Config.class, "a:a");\n\t\tassertThat(context.containsBean("myBean"), equalTo(true));\n\t\tcontext.close();\n\t}\n\n\t@Test\n\tpublic void propertyB() throws Exception {\n\t\tAnnotationConfigApplicationContext context = load(Config.class, "b:b");\n\t\tassertThat(context.containsBean("myBean"), equalTo(true));\n\t\tcontext.close();\n\t}\n\n\t@Test\n\tpublic void both() throws Exception {\n\t\tAnnotationConfigApplicationContext context = load(Config.class, "a:a", "b:b");\n\t\tassertThat(context.containsBean("myBean"), equalTo(true));\n\t\tcontext.close();\n\t}\n\n\tprivate AnnotationConfigApplicationContext load(Class<?> config, String... env) {\n\t\tAnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n\t\tEnvironmentTestUtils.addEnvironment(context, env);\n\t\tcontext.register(config);\n\t\tcontext.refresh();\n\t\treturn context;\n\t}\n\n\t@Configuration\n\t@Conditional(OnPropertyAorBCondition.class)\n\tpublic static class Config {\n\n\t\t@Bean\n\t\tpublic String myBean() {\n\t\t\treturn "myBean";\n\t\t}\n\n\t}\n\n\tstatic class OnPropertyAorBCondition extends AnyNestedCondition {\n\n\t\tOnPropertyAorBCondition() {\n\t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION);\n\t\t}\n\n\t\t@ConditionalOnProperty("a")\n\t\tstatic class HasPropertyA {\n\n\t\t}\n\n\t\t@ConditionalOnProperty("b")\n\t\tstatic class HasPropertyB {\n\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
