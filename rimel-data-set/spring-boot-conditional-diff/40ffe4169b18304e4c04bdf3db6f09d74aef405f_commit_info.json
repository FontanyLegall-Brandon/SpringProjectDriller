{'_old_path': PosixPath('spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/DevToolsDataSourceAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/DevToolsDataSourceAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -27,6 +27,8 @@ import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.AllNestedConditions;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.data.jpa.EntityManagerFactoryDependsOnPostProcessor;\n import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\n import org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;\n import org.springframework.boot.devtools.autoconfigure.DevToolsDataSourceAutoConfiguration.DevToolsDataSourceCondition;\n@@ -34,6 +36,8 @@ import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.jdbc.datasource.embedded.EmbeddedDatabase;\n+import org.springframework.orm.jpa.AbstractEntityManagerFactoryBean;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for DevTools-specific\n@@ -54,6 +58,23 @@ public class DevToolsDataSourceAutoConfiguration {\n \t\t\t\tdataSourceProperties);\n \t}\n \n+\t/**\n+\t * Additional configuration to ensure that\n+\t * {@link javax.persistence.EntityManagerFactory} beans depend on the\n+\t * {@code inMemoryDatabaseShutdownExecutor} bean.\n+\t */\n+\t@Configuration\n+\t@ConditionalOnClass(LocalContainerEntityManagerFactoryBean.class)\n+\t@ConditionalOnBean(AbstractEntityManagerFactoryBean.class)\n+\tstatic class DatabaseShutdownExecutorJpaDependencyConfiguration\n+\t\t\textends EntityManagerFactoryDependsOnPostProcessor {\n+\n+\t\tDatabaseShutdownExecutorJpaDependencyConfiguration() {\n+\t\t\tsuper("inMemoryDatabaseShutdownExecutor");\n+\t\t}\n+\n+\t}\n+\n \tstatic final class NonEmbeddedInMemoryDatabaseShutdownExecutor\n \t\t\timplements DisposableBean {\n \n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.devtools.autoconfigure;\n\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.beans.factory.DisposableBean;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.AllNestedConditions;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.data.jpa.EntityManagerFactoryDependsOnPostProcessor;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;\nimport org.springframework.boot.devtools.autoconfigure.DevToolsDataSourceAutoConfiguration.DevToolsDataSourceCondition;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jdbc.datasource.embedded.EmbeddedDatabase;\nimport org.springframework.orm.jpa.AbstractEntityManagerFactoryBean;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for DevTools-specific\n * {@link DataSource} configuration.\n *\n * @author Andy Wilkinson\n * @since 1.3.3\n */\n@AutoConfigureAfter(DataSourceAutoConfiguration.class)\n@Conditional(DevToolsDataSourceCondition.class)\n@Configuration\npublic class DevToolsDataSourceAutoConfiguration {\n\n\t@Bean\n\tNonEmbeddedInMemoryDatabaseShutdownExecutor inMemoryDatabaseShutdownExecutor(\n\t\t\tDataSource dataSource, DataSourceProperties dataSourceProperties) {\n\t\treturn new NonEmbeddedInMemoryDatabaseShutdownExecutor(dataSource,\n\t\t\t\tdataSourceProperties);\n\t}\n\n\t/**\n\t * Additional configuration to ensure that\n\t * {@link javax.persistence.EntityManagerFactory} beans depend on the\n\t * {@code inMemoryDatabaseShutdownExecutor} bean.\n\t */\n\t@Configuration\n\t@ConditionalOnClass(LocalContainerEntityManagerFactoryBean.class)\n\t@ConditionalOnBean(AbstractEntityManagerFactoryBean.class)\n\tstatic class DatabaseShutdownExecutorJpaDependencyConfiguration\n\t\t\textends EntityManagerFactoryDependsOnPostProcessor {\n\n\t\tDatabaseShutdownExecutorJpaDependencyConfiguration() {\n\t\t\tsuper("inMemoryDatabaseShutdownExecutor");\n\t\t}\n\n\t}\n\n\tstatic final class NonEmbeddedInMemoryDatabaseShutdownExecutor\n\t\t\timplements DisposableBean {\n\n\t\tprivate static final Set<String> IN_MEMORY_DRIVER_CLASS_NAMES = new HashSet<String>(\n\t\t\t\tArrays.asList("org.apache.derby.jdbc.EmbeddedDriver", "org.h2.Driver",\n\t\t\t\t\t\t"org.h2.jdbcx.JdbcDataSource", "org.hsqldb.jdbcDriver",\n\t\t\t\t\t\t"org.hsqldb.jdbc.JDBCDriver",\n\t\t\t\t\t\t"org.hsqldb.jdbc.pool.JDBCXADataSource"));\n\n\t\tprivate final DataSource dataSource;\n\n\t\tprivate final DataSourceProperties dataSourceProperties;\n\n\t\tNonEmbeddedInMemoryDatabaseShutdownExecutor(DataSource dataSource,\n\t\t\t\tDataSourceProperties dataSourceProperties) {\n\t\t\tthis.dataSource = dataSource;\n\t\t\tthis.dataSourceProperties = dataSourceProperties;\n\t\t}\n\n\t\t@Override\n\t\tpublic void destroy() throws Exception {\n\t\t\tif (dataSourceRequiresShutdown()) {\n\t\t\t\tthis.dataSource.getConnection().createStatement().execute("SHUTDOWN");\n\t\t\t}\n\t\t}\n\n\t\tprivate boolean dataSourceRequiresShutdown() {\n\t\t\treturn IN_MEMORY_DRIVER_CLASS_NAMES\n\t\t\t\t\t.contains(this.dataSourceProperties.getDriverClassName())\n\t\t\t\t\t&& (!(this.dataSource instanceof EmbeddedDatabase));\n\t\t}\n\n\t}\n\n\tstatic class DevToolsDataSourceCondition extends AllNestedConditions {\n\n\t\tDevToolsDataSourceCondition() {\n\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n\t\t}\n\n\t\t@ConditionalOnBean(DataSource.class)\n\t\tstatic final class DataSourceBean {\n\n\t\t}\n\n\t\t@ConditionalOnBean(DataSourceProperties.class)\n\t\tstatic final class DataSourcePropertiesBean {\n\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.devtools.autoconfigure;\n\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.beans.factory.DisposableBean;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.AllNestedConditions;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;\nimport org.springframework.boot.devtools.autoconfigure.DevToolsDataSourceAutoConfiguration.DevToolsDataSourceCondition;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jdbc.datasource.embedded.EmbeddedDatabase;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for DevTools-specific\n * {@link DataSource} configuration.\n *\n * @author Andy Wilkinson\n * @since 1.3.3\n */\n@AutoConfigureAfter(DataSourceAutoConfiguration.class)\n@Conditional(DevToolsDataSourceCondition.class)\n@Configuration\npublic class DevToolsDataSourceAutoConfiguration {\n\n\t@Bean\n\tNonEmbeddedInMemoryDatabaseShutdownExecutor inMemoryDatabaseShutdownExecutor(\n\t\t\tDataSource dataSource, DataSourceProperties dataSourceProperties) {\n\t\treturn new NonEmbeddedInMemoryDatabaseShutdownExecutor(dataSource,\n\t\t\t\tdataSourceProperties);\n\t}\n\n\tstatic final class NonEmbeddedInMemoryDatabaseShutdownExecutor\n\t\t\timplements DisposableBean {\n\n\t\tprivate static final Set<String> IN_MEMORY_DRIVER_CLASS_NAMES = new HashSet<String>(\n\t\t\t\tArrays.asList("org.apache.derby.jdbc.EmbeddedDriver", "org.h2.Driver",\n\t\t\t\t\t\t"org.h2.jdbcx.JdbcDataSource", "org.hsqldb.jdbcDriver",\n\t\t\t\t\t\t"org.hsqldb.jdbc.JDBCDriver",\n\t\t\t\t\t\t"org.hsqldb.jdbc.pool.JDBCXADataSource"));\n\n\t\tprivate final DataSource dataSource;\n\n\t\tprivate final DataSourceProperties dataSourceProperties;\n\n\t\tNonEmbeddedInMemoryDatabaseShutdownExecutor(DataSource dataSource,\n\t\t\t\tDataSourceProperties dataSourceProperties) {\n\t\t\tthis.dataSource = dataSource;\n\t\t\tthis.dataSourceProperties = dataSourceProperties;\n\t\t}\n\n\t\t@Override\n\t\tpublic void destroy() throws Exception {\n\t\t\tif (dataSourceRequiresShutdown()) {\n\t\t\t\tthis.dataSource.getConnection().createStatement().execute("SHUTDOWN");\n\t\t\t}\n\t\t}\n\n\t\tprivate boolean dataSourceRequiresShutdown() {\n\t\t\treturn IN_MEMORY_DRIVER_CLASS_NAMES\n\t\t\t\t\t.contains(this.dataSourceProperties.getDriverClassName())\n\t\t\t\t\t&& (!(this.dataSource instanceof EmbeddedDatabase));\n\t\t}\n\n\t}\n\n\tstatic class DevToolsDataSourceCondition extends AllNestedConditions {\n\n\t\tDevToolsDataSourceCondition() {\n\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n\t\t}\n\n\t\t@ConditionalOnBean(DataSource.class)\n\t\tstatic final class DataSourceBean {\n\n\t\t}\n\n\t\t@ConditionalOnBean(DataSourceProperties.class)\n\t\tstatic final class DataSourcePropertiesBean {\n\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
