{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceJmxConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceJmxConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -48,23 +48,33 @@ class DataSourceJmxConfiguration {\n \n \t@Configuration\n \t@ConditionalOnClass(HikariDataSource.class)\n-\t@ConditionalOnSingleCandidate(HikariDataSource.class)\n+\t@ConditionalOnSingleCandidate(DataSource.class)\n \tstatic class Hikari {\n \n-\t\tprivate final HikariDataSource dataSource;\n+\t\tprivate final DataSource dataSource;\n \n \t\tprivate final ObjectProvider<MBeanExporter> mBeanExporter;\n \n-\t\tHikari(HikariDataSource dataSource, ObjectProvider<MBeanExporter> mBeanExporter) {\n+\t\tHikari(DataSource dataSource, ObjectProvider<MBeanExporter> mBeanExporter) {\n \t\t\tthis.dataSource = dataSource;\n \t\t\tthis.mBeanExporter = mBeanExporter;\n \t\t}\n \n \t\t@PostConstruct\n \t\tpublic void validateMBeans() {\n-\t\t\tMBeanExporter exporter = this.mBeanExporter.getIfUnique();\n-\t\t\tif (exporter != null && this.dataSource.isRegisterMbeans()) {\n-\t\t\t\texporter.addExcludedBean("dataSource");\n+\t\t\tHikariDataSource hikariDataSource = unwrapHikariDataSource();\n+\t\t\tif (hikariDataSource != null && hikariDataSource.isRegisterMbeans()) {\n+\t\t\t\tthis.mBeanExporter.ifUnique((exporter) ->\n+\t\t\t\t\t\texporter.addExcludedBean("dataSource"));\n+\t\t\t}\n+\t\t}\n+\n+\t\tprivate HikariDataSource unwrapHikariDataSource() {\n+\t\t\ttry {\n+\t\t\t\treturn this.dataSource.unwrap(HikariDataSource.class);\n+\t\t\t}\n+\t\t\tcatch (SQLException ex) {\n+\t\t\t\treturn null;\n \t\t\t}\n \t\t}\n \n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jdbc;\n\nimport java.sql.SQLException;\n\nimport javax.annotation.PostConstruct;\nimport javax.sql.DataSource;\n\nimport com.zaxxer.hikari.HikariDataSource;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.tomcat.jdbc.pool.DataSourceProxy;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jmx.export.MBeanExporter;\n\n/**\n * Configures DataSource related MBeans.\n *\n * @author Stephane Nicoll\n */\n@Configuration\n@ConditionalOnProperty(prefix = "spring.jmx", name = "enabled", havingValue = "true", matchIfMissing = true)\nclass DataSourceJmxConfiguration {\n\n\tprivate static final Log logger = LogFactory.getLog(DataSourceJmxConfiguration.class);\n\n\t@Configuration\n\t@ConditionalOnClass(HikariDataSource.class)\n\t@ConditionalOnSingleCandidate(DataSource.class)\n\tstatic class Hikari {\n\n\t\tprivate final DataSource dataSource;\n\n\t\tprivate final ObjectProvider<MBeanExporter> mBeanExporter;\n\n\t\tHikari(DataSource dataSource, ObjectProvider<MBeanExporter> mBeanExporter) {\n\t\t\tthis.dataSource = dataSource;\n\t\t\tthis.mBeanExporter = mBeanExporter;\n\t\t}\n\n\t\t@PostConstruct\n\t\tpublic void validateMBeans() {\n\t\t\tHikariDataSource hikariDataSource = unwrapHikariDataSource();\n\t\t\tif (hikariDataSource != null && hikariDataSource.isRegisterMbeans()) {\n\t\t\t\tthis.mBeanExporter.ifUnique((exporter) ->\n\t\t\t\t\t\texporter.addExcludedBean("dataSource"));\n\t\t\t}\n\t\t}\n\n\t\tprivate HikariDataSource unwrapHikariDataSource() {\n\t\t\ttry {\n\t\t\t\treturn this.dataSource.unwrap(HikariDataSource.class);\n\t\t\t}\n\t\t\tcatch (SQLException ex) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "spring.datasource", name = "jmx-enabled")\n\t@ConditionalOnClass(name = "org.apache.tomcat.jdbc.pool.DataSourceProxy")\n\t@ConditionalOnSingleCandidate(DataSource.class)\n\tstatic class TomcatDataSourceJmxConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "dataSourceMBean")\n\t\tpublic Object dataSourceMBean(DataSource dataSource) {\n\t\t\tif (dataSource instanceof DataSourceProxy) {\n\t\t\t\ttry {\n\t\t\t\t\treturn ((DataSourceProxy) dataSource).createPool().getJmxPool();\n\t\t\t\t}\n\t\t\t\tcatch (SQLException ex) {\n\t\t\t\t\tlogger.warn("Cannot expose DataSource to JMX (could not connect)");\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jdbc;\n\nimport java.sql.SQLException;\n\nimport javax.annotation.PostConstruct;\nimport javax.sql.DataSource;\n\nimport com.zaxxer.hikari.HikariDataSource;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.tomcat.jdbc.pool.DataSourceProxy;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jmx.export.MBeanExporter;\n\n/**\n * Configures DataSource related MBeans.\n *\n * @author Stephane Nicoll\n */\n@Configuration\n@ConditionalOnProperty(prefix = "spring.jmx", name = "enabled", havingValue = "true", matchIfMissing = true)\nclass DataSourceJmxConfiguration {\n\n\tprivate static final Log logger = LogFactory.getLog(DataSourceJmxConfiguration.class);\n\n\t@Configuration\n\t@ConditionalOnClass(HikariDataSource.class)\n\t@ConditionalOnSingleCandidate(HikariDataSource.class)\n\tstatic class Hikari {\n\n\t\tprivate final HikariDataSource dataSource;\n\n\t\tprivate final ObjectProvider<MBeanExporter> mBeanExporter;\n\n\t\tHikari(HikariDataSource dataSource, ObjectProvider<MBeanExporter> mBeanExporter) {\n\t\t\tthis.dataSource = dataSource;\n\t\t\tthis.mBeanExporter = mBeanExporter;\n\t\t}\n\n\t\t@PostConstruct\n\t\tpublic void validateMBeans() {\n\t\t\tMBeanExporter exporter = this.mBeanExporter.getIfUnique();\n\t\t\tif (exporter != null && this.dataSource.isRegisterMbeans()) {\n\t\t\t\texporter.addExcludedBean("dataSource");\n\t\t\t}\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "spring.datasource", name = "jmx-enabled")\n\t@ConditionalOnClass(name = "org.apache.tomcat.jdbc.pool.DataSourceProxy")\n\t@ConditionalOnSingleCandidate(DataSource.class)\n\tstatic class TomcatDataSourceJmxConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "dataSourceMBean")\n\t\tpublic Object dataSourceMBean(DataSource dataSource) {\n\t\t\tif (dataSource instanceof DataSourceProxy) {\n\t\t\t\ttry {\n\t\t\t\t\treturn ((DataSourceProxy) dataSource).createPool().getJmxPool();\n\t\t\t\t}\n\t\t\t\tcatch (SQLException ex) {\n\t\t\t\t\tlogger.warn("Cannot expose DataSource to JMX (could not connect)");\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
