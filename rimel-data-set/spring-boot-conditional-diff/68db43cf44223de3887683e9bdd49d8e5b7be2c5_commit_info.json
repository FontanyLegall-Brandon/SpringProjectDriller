{'_old_path': None, '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/ErrorWebFluxAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,96 @@\n+/*\n+ * Copyright 2012-2017 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.web.reactive.error;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.autoconfigure.condition.SearchStrategy;\n+import org.springframework.boot.autoconfigure.web.ResourceProperties;\n+import org.springframework.boot.autoconfigure.web.ServerProperties;\n+import org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.http.codec.ServerCodecConfigurer;\n+import org.springframework.web.reactive.config.WebFluxConfigurer;\n+import org.springframework.web.reactive.result.view.ViewResolver;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} to render errors via a\n+ * WebFlux {@link org.springframework.web.server.WebExceptionHandler}.\n+ *\n+ * @author Brian Clozel\n+ * @since 2.0.0\n+ */\n+@Configuration\n+@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)\n+@ConditionalOnClass(WebFluxConfigurer.class)\n+@AutoConfigureBefore(WebFluxAutoConfiguration.class)\n+@EnableConfigurationProperties({ServerProperties.class, ResourceProperties.class})\n+public class ErrorWebFluxAutoConfiguration {\n+\n+\tprivate final ServerProperties serverProperties;\n+\n+\tprivate final ApplicationContext applicationContext;\n+\n+\tprivate final ResourceProperties resourceProperties;\n+\n+\tprivate final List<ViewResolver> viewResolvers;\n+\n+\tprivate final ServerCodecConfigurer serverCodecConfigurer;\n+\n+\tpublic ErrorWebFluxAutoConfiguration(ServerProperties serverProperties,\n+\t\t\tResourceProperties resourceProperties,\n+\t\t\tObjectProvider<List<ViewResolver>> viewResolversProvider,\n+\t\t\tServerCodecConfigurer serverCodecConfigurer,\n+\t\t\tApplicationContext applicationContext) {\n+\t\tthis.serverProperties = serverProperties;\n+\t\tthis.applicationContext = applicationContext;\n+\t\tthis.resourceProperties = resourceProperties;\n+\t\tthis.viewResolvers = viewResolversProvider.getIfAvailable(() -> Collections.emptyList());\n+\t\tthis.serverCodecConfigurer = serverCodecConfigurer;\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean(value = ErrorWebExceptionHandler.class, search = SearchStrategy.CURRENT)\n+\t@Order(-1)\n+\tpublic ErrorWebExceptionHandler errorWebExceptionHandler(ErrorAttributes errorAttributes) {\n+\t\tDefaultErrorWebExceptionHandler exceptionHandler =\n+\t\t\t\tnew DefaultErrorWebExceptionHandler(errorAttributes, this.resourceProperties,\n+\t\t\t\t\t\tthis.serverProperties.getError(), this.applicationContext);\n+\t\texceptionHandler.setViewResolvers(this.viewResolvers);\n+\t\texceptionHandler.setMessageWriters(this.serverCodecConfigurer.getWriters());\n+\t\texceptionHandler.setMessageReaders(this.serverCodecConfigurer.getReaders());\n+\t\treturn exceptionHandler;\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean(value = ErrorAttributes.class, search = SearchStrategy.CURRENT)\n+\tpublic DefaultErrorAttributes errorAttributes() {\n+\t\treturn new DefaultErrorAttributes(this.serverProperties.getError().isIncludeException());\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web.reactive.error;\n\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.boot.autoconfigure.web.ResourceProperties;\nimport org.springframework.boot.autoconfigure.web.ServerProperties;\nimport org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.http.codec.ServerCodecConfigurer;\nimport org.springframework.web.reactive.config.WebFluxConfigurer;\nimport org.springframework.web.reactive.result.view.ViewResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to render errors via a\n * WebFlux {@link org.springframework.web.server.WebExceptionHandler}.\n *\n * @author Brian Clozel\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)\n@ConditionalOnClass(WebFluxConfigurer.class)\n@AutoConfigureBefore(WebFluxAutoConfiguration.class)\n@EnableConfigurationProperties({ServerProperties.class, ResourceProperties.class})\npublic class ErrorWebFluxAutoConfiguration {\n\n\tprivate final ServerProperties serverProperties;\n\n\tprivate final ApplicationContext applicationContext;\n\n\tprivate final ResourceProperties resourceProperties;\n\n\tprivate final List<ViewResolver> viewResolvers;\n\n\tprivate final ServerCodecConfigurer serverCodecConfigurer;\n\n\tpublic ErrorWebFluxAutoConfiguration(ServerProperties serverProperties,\n\t\t\tResourceProperties resourceProperties,\n\t\t\tObjectProvider<List<ViewResolver>> viewResolversProvider,\n\t\t\tServerCodecConfigurer serverCodecConfigurer,\n\t\t\tApplicationContext applicationContext) {\n\t\tthis.serverProperties = serverProperties;\n\t\tthis.applicationContext = applicationContext;\n\t\tthis.resourceProperties = resourceProperties;\n\t\tthis.viewResolvers = viewResolversProvider.getIfAvailable(() -> Collections.emptyList());\n\t\tthis.serverCodecConfigurer = serverCodecConfigurer;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(value = ErrorWebExceptionHandler.class, search = SearchStrategy.CURRENT)\n\t@Order(-1)\n\tpublic ErrorWebExceptionHandler errorWebExceptionHandler(ErrorAttributes errorAttributes) {\n\t\tDefaultErrorWebExceptionHandler exceptionHandler =\n\t\t\t\tnew DefaultErrorWebExceptionHandler(errorAttributes, this.resourceProperties,\n\t\t\t\t\t\tthis.serverProperties.getError(), this.applicationContext);\n\t\texceptionHandler.setViewResolvers(this.viewResolvers);\n\t\texceptionHandler.setMessageWriters(this.serverCodecConfigurer.getWriters());\n\t\texceptionHandler.setMessageReaders(this.serverCodecConfigurer.getReaders());\n\t\treturn exceptionHandler;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(value = ErrorAttributes.class, search = SearchStrategy.CURRENT)\n\tpublic DefaultErrorAttributes errorAttributes() {\n\t\treturn new DefaultErrorAttributes(this.serverProperties.getError().isIncludeException());\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
