{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/statsd/StatsdExportConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/statsd/StatsdMetricsExportAutoConfiguration.java'), 'change_type': <ModificationType.RENAME: 3>, 'diff': '@@ -21,23 +21,32 @@ import io.micrometer.core.instrument.util.HierarchicalNameMapper;\n import io.micrometer.statsd.StatsdConfig;\n import io.micrometer.statsd.StatsdMeterRegistry;\n \n+import org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration;\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n /**\n- * Configuration for exporting metrics to StatsD.\n+ * {@link EnableAutoConfiguration Auto-configuration} for exporting metrics to StatsD.\n  *\n  * @author Jon Schneider\n  * @since 2.0.0\n  */\n @Configuration\n+@AutoConfigureBefore(MetricsAutoConfiguration.class)\n @ConditionalOnClass(StatsdMeterRegistry.class)\n @EnableConfigurationProperties(StatsdProperties.class)\n-public class StatsdExportConfiguration {\n+public class StatsdMetricsExportAutoConfiguration {\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic Clock micrometerClock() {\n+\t\treturn Clock.SYSTEM;\n+\t}\n \n \t@Bean\n \t@ConditionalOnMissingBean(StatsdConfig.class)\n@@ -46,7 +55,6 @@ public class StatsdExportConfiguration {\n \t}\n \n \t@Bean\n-\t@ConditionalOnProperty(value = "management.metrics.export.statsd.enabled", matchIfMissing = true)\n \tpublic StatsdMeterRegistry statsdMeterRegistry(StatsdConfig statsdConfig,\n \t\t\tHierarchicalNameMapper hierarchicalNameMapper, Clock clock) {\n \t\treturn new StatsdMeterRegistry(statsdConfig, hierarchicalNameMapper, clock);\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics.export.statsd;\n\nimport io.micrometer.core.instrument.Clock;\nimport io.micrometer.core.instrument.util.HierarchicalNameMapper;\nimport io.micrometer.statsd.StatsdConfig;\nimport io.micrometer.statsd.StatsdMeterRegistry;\n\nimport org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for exporting metrics to StatsD.\n *\n * @author Jon Schneider\n * @since 2.0.0\n */\n@Configuration\n@AutoConfigureBefore(MetricsAutoConfiguration.class)\n@ConditionalOnClass(StatsdMeterRegistry.class)\n@EnableConfigurationProperties(StatsdProperties.class)\npublic class StatsdMetricsExportAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic Clock micrometerClock() {\n\t\treturn Clock.SYSTEM;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(StatsdConfig.class)\n\tpublic StatsdConfig statsdConfig(StatsdProperties statsdProperties) {\n\t\treturn new StatsdPropertiesConfigAdapter(statsdProperties);\n\t}\n\n\t@Bean\n\tpublic StatsdMeterRegistry statsdMeterRegistry(StatsdConfig statsdConfig,\n\t\t\tHierarchicalNameMapper hierarchicalNameMapper, Clock clock) {\n\t\treturn new StatsdMeterRegistry(statsdConfig, hierarchicalNameMapper, clock);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic HierarchicalNameMapper hierarchicalNameMapper() {\n\t\treturn HierarchicalNameMapper.DEFAULT;\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics.export.statsd;\n\nimport io.micrometer.core.instrument.Clock;\nimport io.micrometer.core.instrument.util.HierarchicalNameMapper;\nimport io.micrometer.statsd.StatsdConfig;\nimport io.micrometer.statsd.StatsdMeterRegistry;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Configuration for exporting metrics to StatsD.\n *\n * @author Jon Schneider\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass(StatsdMeterRegistry.class)\n@EnableConfigurationProperties(StatsdProperties.class)\npublic class StatsdExportConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean(StatsdConfig.class)\n\tpublic StatsdConfig statsdConfig(StatsdProperties statsdProperties) {\n\t\treturn new StatsdPropertiesConfigAdapter(statsdProperties);\n\t}\n\n\t@Bean\n\t@ConditionalOnProperty(value = "management.metrics.export.statsd.enabled", matchIfMissing = true)\n\tpublic StatsdMeterRegistry statsdMeterRegistry(StatsdConfig statsdConfig,\n\t\t\tHierarchicalNameMapper hierarchicalNameMapper, Clock clock) {\n\t\treturn new StatsdMeterRegistry(statsdConfig, hierarchicalNameMapper, clock);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic HierarchicalNameMapper hierarchicalNameMapper() {\n\t\treturn HierarchicalNameMapper.DEFAULT;\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
