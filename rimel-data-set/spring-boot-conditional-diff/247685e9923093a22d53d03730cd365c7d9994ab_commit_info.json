{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnProperty.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnProperty.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2015 the original author or authors.\n+ * Copyright 2012-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -16,6 +16,7 @@\n \n package org.springframework.boot.autoconfigure.condition;\n \n+import java.lang.annotation.Documented;\n import java.lang.annotation.ElementType;\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n@@ -76,9 +77,10 @@ import org.springframework.core.env.Environment;\n  * @author Phillip Webb\n  * @since 1.1.0\n  */\n-@Conditional(OnPropertyCondition.class)\n @Retention(RetentionPolicy.RUNTIME)\n @Target({ ElementType.TYPE, ElementType.METHOD })\n+@Documented\n+@Conditional(OnPropertyCondition.class)\n public @interface ConditionalOnProperty {\n \n \t/**\n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.core.env.Environment;\n\n/**\n * {@link Conditional} that checks if the specified properties have a specific value. By\n * default the properties must be present in the {@link Environment} and\n * <strong>not</strong> equal to {@code false}. The {@link #havingValue()} and\n * {@link #matchIfMissing()} attributes allow further customizations.\n *\n * <p>\n * The {@link #havingValue} attribute can be used to specify the value that the property\n * should have. The table below shows when a condition matches according to the property\n * value and the {@link #havingValue()} attribute:\n *\n * <table summary="having values" border="1">\n * <tr>\n * <th>Property Value</th>\n * <th>{@code havingValue=""}</th>\n * <th>{@code havingValue="true"}</th>\n * <th>{@code havingValue="false"}</th>\n * <th>{@code havingValue="foo"}</th>\n * </tr>\n * <tr>\n * <td>{@code "true"}</td>\n * <td>yes</td>\n * <td>yes</td>\n * <td>no</td>\n * <td>no</td>\n * </tr>\n * <tr>\n * <td>{@code "false"}</td>\n * <td>no</td>\n * <td>no</td>\n * <td>yes</td>\n * <td>no</td>\n * </tr>\n * <tr>\n * <td>{@code "foo"}</td>\n * <td>yes</td>\n * <td>no</td>\n * <td>no</td>\n * <td>yes</td>\n * </tr>\n * </table>\n *\n * <p>\n * If the property is not contained in the {@link Environment} at all, the\n * {@link #matchIfMissing()} attribute is consulted. By default missing attributes do not\n * match.\n *\n * @author Maciej Walkowiak\n * @author Stephane Nicoll\n * @author Phillip Webb\n * @since 1.1.0\n */\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ ElementType.TYPE, ElementType.METHOD })\n@Documented\n@Conditional(OnPropertyCondition.class)\npublic @interface ConditionalOnProperty {\n\n\t/**\n\t * Alias for {@link #name()}.\n\t * @return the names\n\t */\n\tString[] value() default {};\n\n\t/**\n\t * A prefix that should be applied to each property. The prefix automatically ends\n\t * with a dot if not specified.\n\t * @return the prefix\n\t */\n\tString prefix() default "";\n\n\t/**\n\t * The name of the properties to test. If a prefix has been defined, it is applied to\n\t * compute the full key of each property. For instance if the prefix is\n\t * {@code app.config} and one value is {@code my-value}, the fully key would be\n\t * {@code app.config.my-value}\n\t * <p>\n\t * Use the dashed notation to specify each property, that is all lower case with a "-"\n\t * to separate words (e.g. {@code my-long-property}).\n\t * @return the names\n\t */\n\tString[] name() default {};\n\n\t/**\n\t * The string representation of the expected value for the properties. If not\n\t * specified, the property must <strong>not</strong> be equals to {@code false}.\n\t * @return the expected value\n\t */\n\tString havingValue() default "";\n\n\t/**\n\t * Specify if the condition should match if the property is not set. Defaults to\n\t * {@code false}.\n\t * @return if should match if the property is missing\n\t */\n\tboolean matchIfMissing() default false;\n\n\t/**\n\t * If relaxed names should be checked. Defaults to {@code true}.\n\t * @return if relaxed names are used\n\t */\n\tboolean relaxedNames() default true;\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.core.env.Environment;\n\n/**\n * {@link Conditional} that checks if the specified properties have a specific value. By\n * default the properties must be present in the {@link Environment} and\n * <strong>not</strong> equal to {@code false}. The {@link #havingValue()} and\n * {@link #matchIfMissing()} attributes allow further customizations.\n *\n * <p>\n * The {@link #havingValue} attribute can be used to specify the value that the property\n * should have. The table below shows when a condition matches according to the property\n * value and the {@link #havingValue()} attribute:\n *\n * <table summary="having values" border="1">\n * <tr>\n * <th>Property Value</th>\n * <th>{@code havingValue=""}</th>\n * <th>{@code havingValue="true"}</th>\n * <th>{@code havingValue="false"}</th>\n * <th>{@code havingValue="foo"}</th>\n * </tr>\n * <tr>\n * <td>{@code "true"}</td>\n * <td>yes</td>\n * <td>yes</td>\n * <td>no</td>\n * <td>no</td>\n * </tr>\n * <tr>\n * <td>{@code "false"}</td>\n * <td>no</td>\n * <td>no</td>\n * <td>yes</td>\n * <td>no</td>\n * </tr>\n * <tr>\n * <td>{@code "foo"}</td>\n * <td>yes</td>\n * <td>no</td>\n * <td>no</td>\n * <td>yes</td>\n * </tr>\n * </table>\n *\n * <p>\n * If the property is not contained in the {@link Environment} at all, the\n * {@link #matchIfMissing()} attribute is consulted. By default missing attributes do not\n * match.\n *\n * @author Maciej Walkowiak\n * @author Stephane Nicoll\n * @author Phillip Webb\n * @since 1.1.0\n */\n@Conditional(OnPropertyCondition.class)\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ ElementType.TYPE, ElementType.METHOD })\npublic @interface ConditionalOnProperty {\n\n\t/**\n\t * Alias for {@link #name()}.\n\t * @return the names\n\t */\n\tString[] value() default {};\n\n\t/**\n\t * A prefix that should be applied to each property. The prefix automatically ends\n\t * with a dot if not specified.\n\t * @return the prefix\n\t */\n\tString prefix() default "";\n\n\t/**\n\t * The name of the properties to test. If a prefix has been defined, it is applied to\n\t * compute the full key of each property. For instance if the prefix is\n\t * {@code app.config} and one value is {@code my-value}, the fully key would be\n\t * {@code app.config.my-value}\n\t * <p>\n\t * Use the dashed notation to specify each property, that is all lower case with a "-"\n\t * to separate words (e.g. {@code my-long-property}).\n\t * @return the names\n\t */\n\tString[] name() default {};\n\n\t/**\n\t * The string representation of the expected value for the properties. If not\n\t * specified, the property must <strong>not</strong> be equals to {@code false}.\n\t * @return the expected value\n\t */\n\tString havingValue() default "";\n\n\t/**\n\t * Specify if the condition should match if the property is not set. Defaults to\n\t * {@code false}.\n\t * @return if should match if the property is missing\n\t */\n\tboolean matchIfMissing() default false;\n\n\t/**\n\t * If relaxed names should be checked. Defaults to {@code true}.\n\t * @return if relaxed names are used\n\t */\n\tboolean relaxedNames() default true;\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
