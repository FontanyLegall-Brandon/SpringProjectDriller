{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/reactive/WebClientMetricsAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/client/WebClientMetricsConfiguration.java'), 'change_type': <ModificationType.RENAME: 3>, 'diff': '@@ -14,46 +14,29 @@\n  * limitations under the License.\n  */\n \n-package org.springframework.boot.actuate.autoconfigure.metrics.web.reactive;\n+package org.springframework.boot.actuate.autoconfigure.metrics.web.client;\n \n import io.micrometer.core.instrument.MeterRegistry;\n \n-import org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration;\n import org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties;\n-import org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration;\n-import org.springframework.boot.actuate.autoconfigure.metrics.web.client.RestTemplateMetricsAutoConfiguration;\n import org.springframework.boot.actuate.metrics.web.reactive.client.DefaultWebClientExchangeTagsProvider;\n import org.springframework.boot.actuate.metrics.web.reactive.client.MetricsWebClientCustomizer;\n import org.springframework.boot.actuate.metrics.web.reactive.client.WebClientExchangeTagsProvider;\n-import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n-import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n-import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.web.reactive.function.client.WebClient;\n \n /**\n- * {@link EnableAutoConfiguration Auto-configuration} for instrumentation of\n- * {@link org.springframework.web.reactive.function.client.WebClient}.\n- * <p>\n- * This is reusing the {@link io.micrometer.core.instrument.config.MeterFilter} defined in\n- * {@link RestTemplateMetricsAutoConfiguration} for limiting the cardinality of "uri"\n- * tags.\n+ * Configure the instrumentation of {@link WebClient}.\n  *\n  * @author Brian Clozel\n- * @since 2.1.0\n+ * @author Stephane Nicoll\n  */\n @Configuration\n @ConditionalOnClass(WebClient.class)\n-@AutoConfigureAfter({ MetricsAutoConfiguration.class,\n-\t\tSimpleMetricsExportAutoConfiguration.class })\n-@AutoConfigureBefore(WebClientAutoConfiguration.class)\n-@ConditionalOnBean(MeterRegistry.class)\n-public class WebClientMetricsAutoConfiguration {\n+class WebClientMetricsConfiguration {\n \n \t@Bean\n \t@ConditionalOnMissingBean\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics.web.client;\n\nimport io.micrometer.core.instrument.MeterRegistry;\n\nimport org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties;\nimport org.springframework.boot.actuate.metrics.web.reactive.client.DefaultWebClientExchangeTagsProvider;\nimport org.springframework.boot.actuate.metrics.web.reactive.client.MetricsWebClientCustomizer;\nimport org.springframework.boot.actuate.metrics.web.reactive.client.WebClientExchangeTagsProvider;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.reactive.function.client.WebClient;\n\n/**\n * Configure the instrumentation of {@link WebClient}.\n *\n * @author Brian Clozel\n * @author Stephane Nicoll\n */\n@Configuration\n@ConditionalOnClass(WebClient.class)\nclass WebClientMetricsConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic WebClientExchangeTagsProvider defaultWebClientExchangeTagsProvider() {\n\t\treturn new DefaultWebClientExchangeTagsProvider();\n\t}\n\n\t@Bean\n\tpublic MetricsWebClientCustomizer metricsWebClientCustomizer(\n\t\t\tMeterRegistry meterRegistry, WebClientExchangeTagsProvider tagsProvider,\n\t\t\tMetricsProperties properties) {\n\t\treturn new MetricsWebClientCustomizer(meterRegistry, tagsProvider,\n\t\t\t\tproperties.getWeb().getClient().getRequestsMetricName());\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics.web.reactive;\n\nimport io.micrometer.core.instrument.MeterRegistry;\n\nimport org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties;\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.web.client.RestTemplateMetricsAutoConfiguration;\nimport org.springframework.boot.actuate.metrics.web.reactive.client.DefaultWebClientExchangeTagsProvider;\nimport org.springframework.boot.actuate.metrics.web.reactive.client.MetricsWebClientCustomizer;\nimport org.springframework.boot.actuate.metrics.web.reactive.client.WebClientExchangeTagsProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.reactive.function.client.WebClient;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for instrumentation of\n * {@link org.springframework.web.reactive.function.client.WebClient}.\n * <p>\n * This is reusing the {@link io.micrometer.core.instrument.config.MeterFilter} defined in\n * {@link RestTemplateMetricsAutoConfiguration} for limiting the cardinality of "uri"\n * tags.\n *\n * @author Brian Clozel\n * @since 2.1.0\n */\n@Configuration\n@ConditionalOnClass(WebClient.class)\n@AutoConfigureAfter({ MetricsAutoConfiguration.class,\n\t\tSimpleMetricsExportAutoConfiguration.class })\n@AutoConfigureBefore(WebClientAutoConfiguration.class)\n@ConditionalOnBean(MeterRegistry.class)\npublic class WebClientMetricsAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic WebClientExchangeTagsProvider defaultWebClientExchangeTagsProvider() {\n\t\treturn new DefaultWebClientExchangeTagsProvider();\n\t}\n\n\t@Bean\n\tpublic MetricsWebClientCustomizer metricsWebClientCustomizer(\n\t\t\tMeterRegistry meterRegistry, WebClientExchangeTagsProvider tagsProvider,\n\t\t\tMetricsProperties properties) {\n\t\treturn new MetricsWebClientCustomizer(meterRegistry, tagsProvider,\n\t\t\t\tproperties.getWeb().getClient().getRequestsMetricName());\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
