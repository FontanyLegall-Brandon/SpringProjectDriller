@@ -20,14 +20,18 @@ import java.util.Properties;
 
 import javax.activation.MimeType;
 import javax.mail.internet.MimeMessage;
+import javax.mail.Session;
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.AnyNestedCondition;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
+import org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration.PropertiesCondition;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Conditional;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.mail.MailSender;
 import org.springframework.mail.javamail.JavaMailSenderImpl;
@@ -37,34 +41,61 @@ import org.springframework.mail.javamail.JavaMailSenderImpl;
  *
  * @author Oliver Gierke
  * @author Stephane Nicoll
+ * @author Eddú Meléndez
  * @since 1.2.0
  */
 @Configuration
 @ConditionalOnClass({ MimeMessage.class, MimeType.class })
-@ConditionalOnProperty(prefix = , value = )
 @ConditionalOnMissingBean(MailSender.class)
+@Conditional(PropertiesCondition.class)
 @EnableConfigurationProperties(MailProperties.class)
 public class MailSenderAutoConfiguration {
 
+	@Autowired(required = false)
+	private Session session;
+
 	@Autowired
 	private MailProperties properties;
 
 	@Bean
 	public JavaMailSenderImpl mailSender() {
 		JavaMailSenderImpl sender = new JavaMailSenderImpl();
-		sender.setHost(this.properties.getHost());
-		if (this.properties.getPort() != null) {
-			sender.setPort(this.properties.getPort());
-		}
-		sender.setUsername(this.properties.getUsername());
-		sender.setPassword(this.properties.getPassword());
-		sender.setDefaultEncoding(this.properties.getDefaultEncoding());
-		if (!this.properties.getProperties().isEmpty()) {
-			Properties properties = new Properties();
-			properties.putAll(this.properties.getProperties());
-			sender.setJavaMailProperties(properties);
+		if (this.session != null) {
+			sender.setSession(this.session);
+		} else {
+			sender.setHost(this.properties.getHost());
+			if (this.properties.getPort() != null) {
+				sender.setPort(this.properties.getPort());
+			}
+			sender.setUsername(this.properties.getUsername());
+			sender.setPassword(this.properties.getPassword());
+			sender.setDefaultEncoding(this.properties.getDefaultEncoding());
+			if (!this.properties.getProperties().isEmpty()) {
+				Properties properties = new Properties();
+				properties.putAll(this.properties.getProperties());
+				sender.setJavaMailProperties(properties);
+			}
 		}
 		return sender;
 	}
 
+	
+	static class PropertiesCondition extends AnyNestedCondition {
+
+		public PropertiesCondition() {
+			super(ConfigurationPhase.PARSE_CONFIGURATION);
+		}
+
+		@ConditionalOnProperty(prefix = , name = )
+		static class JndiNameProperty {
+		}
+
+		@ConditionalOnProperty(prefix = , name = )
+		static class HostProperty {
+		}
+
+	}
+
 }

