{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJndiTests.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,202 @@\n+/*\n+ * Copyright 2012-2014 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.condition;\n+\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import javax.naming.Context;\n+import javax.naming.InitialContext;\n+import javax.naming.NamingException;\n+import javax.naming.spi.InitialContextFactory;\n+\n+import org.hamcrest.Matcher;\n+import org.junit.After;\n+import org.junit.Test;\n+\n+import org.springframework.boot.test.EnvironmentTestUtils;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.iterableWithSize;\n+import static org.junit.Assert.assertThat;\n+\n+/**\n+ * Tests for {@link ConditionalOnJndi}\n+ *\n+ * @author Stephane Nicoll\n+ */\n+public class ConditionalOnJndiTests {\n+\n+\tprivate String initialContextFactory;\n+\n+\tprivate ConfigurableApplicationContext context;\n+\n+\t@After\n+\tpublic void close() {\n+\t\tTestableInitialContextFactory.clearAll();\n+\t\tif (this.initialContextFactory != null) {\n+\t\t\tSystem.setProperty(Context.INITIAL_CONTEXT_FACTORY, this.initialContextFactory);\n+\t\t}\n+\t\telse {\n+\t\t\tSystem.clearProperty(Context.INITIAL_CONTEXT_FACTORY);\n+\t\t}\n+\t\tif (this.context != null) {\n+\t\t\tthis.context.close();\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void jndiNotAvailable() {\n+\t\tload(JndiAvailableConfiguration.class);\n+\t\tassertPresent(false);\n+\t}\n+\n+\t@Test\n+\tpublic void jndiAvailable() {\n+\t\tsetupJndi();\n+\t\tload(JndiAvailableConfiguration.class);\n+\t\tassertPresent(true);\n+\t}\n+\n+\t@Test\n+\tpublic void jndiLocationNotBound() {\n+\t\tsetupJndi();\n+\t\tload(JndiConditionConfiguration.class);\n+\t\tassertPresent(false);\n+\t}\n+\n+\t@Test\n+\tpublic void jndiLocationBound() {\n+\t\tsetupJndi();\n+\t\tTestableInitialContextFactory.bind("java:/FooManager", new Object());\n+\t\tload(JndiConditionConfiguration.class);\n+\t\tassertPresent(true);\n+\t}\n+\n+\tprivate void setupJndi() {\n+\t\tthis.initialContextFactory = System.getProperty(Context.INITIAL_CONTEXT_FACTORY);\n+\t\tSystem.setProperty(Context.INITIAL_CONTEXT_FACTORY,\n+\t\t\t\tTestableInitialContextFactory.class.getName());\n+\t}\n+\n+\n+\tprivate void assertPresent(boolean expected) {\n+\t\tint expectedNumber = expected ? 1 : 0;\n+\t\tMatcher<Iterable<String>> matcher = iterableWithSize(expectedNumber);\n+\t\tassertThat(this.context.getBeansOfType(String.class).values(), is(matcher));\n+\t}\n+\n+\tprivate void load(Class<?> config, String... environment) {\n+\t\tAnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext();\n+\t\tEnvironmentTestUtils.addEnvironment(applicationContext, environment);\n+\t\tapplicationContext.register(config);\n+\t\tapplicationContext.register(JndiConditionConfiguration.class);\n+\t\tapplicationContext.refresh();\n+\t\tthis.context = applicationContext;\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnJndi\n+\tstatic class JndiAvailableConfiguration {\n+\n+\t\t@Bean\n+\t\tpublic String foo() {\n+\t\t\treturn "foo";\n+\t\t}\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnJndi("java:/FooManager")\n+\tstatic class JndiConditionConfiguration {\n+\n+\t\t@Bean\n+\t\tpublic String foo() {\n+\t\t\treturn "foo";\n+\t\t}\n+\t}\n+\n+\n+\tpublic static class TestableInitialContextFactory implements InitialContextFactory {\n+\n+\t\tprivate static TestableContext context;\n+\n+\t\tpublic Context getInitialContext(Hashtable<?, ?> environment)\n+\t\t\t\tthrows NamingException {\n+\t\t\treturn getContext();\n+\t\t}\n+\n+\t\tpublic static void bind(String name, Object obj) {\n+\t\t\ttry {\n+\t\t\t\tgetContext().bind(name, obj);\n+\t\t\t}\n+\t\t\tcatch (NamingException o_O) {\n+\t\t\t\tthrow new IllegalStateException(o_O);\n+\t\t\t}\n+\t\t}\n+\n+\t\tpublic static void clearAll() {\n+\t\t\tgetContext().clearAll();\n+\t\t}\n+\n+\t\tprivate static TestableContext getContext() {\n+\t\t\tif (context == null) {\n+\t\t\t\ttry {\n+\t\t\t\t\tcontext = new TestableContext();\n+\t\t\t\t}\n+\t\t\t\tcatch (NamingException o_O) {\n+\t\t\t\t\tthrow new IllegalStateException(o_O);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn context;\n+\t\t}\n+\n+\n+\t\tprivate static class TestableContext extends InitialContext {\n+\n+\t\t\tprivate final Map<String, Object> bindings = new HashMap<String, Object>();\n+\n+\t\t\tprivate TestableContext() throws NamingException {\n+\t\t\t\tsuper(true);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void bind(String name, Object obj)\n+\t\t\t\t\tthrows NamingException {\n+\t\t\t\tthis.bindings.put(name, obj);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic Object lookup(String name) throws NamingException {\n+\t\t\t\treturn this.bindings.get(name);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic Hashtable<?, ?> getEnvironment() throws NamingException {\n+\t\t\t\treturn new Hashtable<Object, Object>(); // Used to detect if JNDI is available\n+\t\t\t}\n+\n+\t\t\tpublic void clearAll() {\n+\t\t\t\tthis.bindings.clear();\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport java.util.HashMap;\nimport java.util.Hashtable;\nimport java.util.Map;\nimport javax.naming.Context;\nimport javax.naming.InitialContext;\nimport javax.naming.NamingException;\nimport javax.naming.spi.InitialContextFactory;\n\nimport org.hamcrest.Matcher;\nimport org.junit.After;\nimport org.junit.Test;\n\nimport org.springframework.boot.test.EnvironmentTestUtils;\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport static org.hamcrest.Matchers.is;\nimport static org.hamcrest.Matchers.iterableWithSize;\nimport static org.junit.Assert.assertThat;\n\n/**\n * Tests for {@link ConditionalOnJndi}\n *\n * @author Stephane Nicoll\n */\npublic class ConditionalOnJndiTests {\n\n\tprivate String initialContextFactory;\n\n\tprivate ConfigurableApplicationContext context;\n\n\t@After\n\tpublic void close() {\n\t\tTestableInitialContextFactory.clearAll();\n\t\tif (this.initialContextFactory != null) {\n\t\t\tSystem.setProperty(Context.INITIAL_CONTEXT_FACTORY, this.initialContextFactory);\n\t\t}\n\t\telse {\n\t\t\tSystem.clearProperty(Context.INITIAL_CONTEXT_FACTORY);\n\t\t}\n\t\tif (this.context != null) {\n\t\t\tthis.context.close();\n\t\t}\n\t}\n\n\t@Test\n\tpublic void jndiNotAvailable() {\n\t\tload(JndiAvailableConfiguration.class);\n\t\tassertPresent(false);\n\t}\n\n\t@Test\n\tpublic void jndiAvailable() {\n\t\tsetupJndi();\n\t\tload(JndiAvailableConfiguration.class);\n\t\tassertPresent(true);\n\t}\n\n\t@Test\n\tpublic void jndiLocationNotBound() {\n\t\tsetupJndi();\n\t\tload(JndiConditionConfiguration.class);\n\t\tassertPresent(false);\n\t}\n\n\t@Test\n\tpublic void jndiLocationBound() {\n\t\tsetupJndi();\n\t\tTestableInitialContextFactory.bind("java:/FooManager", new Object());\n\t\tload(JndiConditionConfiguration.class);\n\t\tassertPresent(true);\n\t}\n\n\tprivate void setupJndi() {\n\t\tthis.initialContextFactory = System.getProperty(Context.INITIAL_CONTEXT_FACTORY);\n\t\tSystem.setProperty(Context.INITIAL_CONTEXT_FACTORY,\n\t\t\t\tTestableInitialContextFactory.class.getName());\n\t}\n\n\n\tprivate void assertPresent(boolean expected) {\n\t\tint expectedNumber = expected ? 1 : 0;\n\t\tMatcher<Iterable<String>> matcher = iterableWithSize(expectedNumber);\n\t\tassertThat(this.context.getBeansOfType(String.class).values(), is(matcher));\n\t}\n\n\tprivate void load(Class<?> config, String... environment) {\n\t\tAnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext();\n\t\tEnvironmentTestUtils.addEnvironment(applicationContext, environment);\n\t\tapplicationContext.register(config);\n\t\tapplicationContext.register(JndiConditionConfiguration.class);\n\t\tapplicationContext.refresh();\n\t\tthis.context = applicationContext;\n\t}\n\n\t@Configuration\n\t@ConditionalOnJndi\n\tstatic class JndiAvailableConfiguration {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnJndi("java:/FooManager")\n\tstatic class JndiConditionConfiguration {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\t}\n\n\n\tpublic static class TestableInitialContextFactory implements InitialContextFactory {\n\n\t\tprivate static TestableContext context;\n\n\t\tpublic Context getInitialContext(Hashtable<?, ?> environment)\n\t\t\t\tthrows NamingException {\n\t\t\treturn getContext();\n\t\t}\n\n\t\tpublic static void bind(String name, Object obj) {\n\t\t\ttry {\n\t\t\t\tgetContext().bind(name, obj);\n\t\t\t}\n\t\t\tcatch (NamingException o_O) {\n\t\t\t\tthrow new IllegalStateException(o_O);\n\t\t\t}\n\t\t}\n\n\t\tpublic static void clearAll() {\n\t\t\tgetContext().clearAll();\n\t\t}\n\n\t\tprivate static TestableContext getContext() {\n\t\t\tif (context == null) {\n\t\t\t\ttry {\n\t\t\t\t\tcontext = new TestableContext();\n\t\t\t\t}\n\t\t\t\tcatch (NamingException o_O) {\n\t\t\t\t\tthrow new IllegalStateException(o_O);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn context;\n\t\t}\n\n\n\t\tprivate static class TestableContext extends InitialContext {\n\n\t\t\tprivate final Map<String, Object> bindings = new HashMap<String, Object>();\n\n\t\t\tprivate TestableContext() throws NamingException {\n\t\t\t\tsuper(true);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void bind(String name, Object obj)\n\t\t\t\t\tthrows NamingException {\n\t\t\t\tthis.bindings.put(name, obj);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic Object lookup(String name) throws NamingException {\n\t\t\t\treturn this.bindings.get(name);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic Hashtable<?, ?> getEnvironment() throws NamingException {\n\t\t\t\treturn new Hashtable<Object, Object>(); // Used to detect if JNDI is available\n\t\t\t}\n\n\t\t\tpublic void clearAll() {\n\t\t\t\tthis.bindings.clear();\n\t\t\t}\n\t\t}\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
