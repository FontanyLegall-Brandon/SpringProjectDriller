@@ -23,7 +23,9 @@ import java.util.HashSet;
 import java.util.List;
 
 import org.glassfish.jersey.server.ResourceConfig;
+import org.glassfish.jersey.servlet.ServletContainer;
 
+import org.springframework.beans.factory.ObjectProvider;
 import org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties;
 import org.springframework.boot.actuate.autoconfigure.web.ManagementContextConfiguration;
 import org.springframework.boot.actuate.endpoint.ExposableEndpoint;
@@ -40,8 +42,14 @@ import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;
+import org.springframework.boot.autoconfigure.jersey.JerseyProperties;
 import org.springframework.boot.autoconfigure.jersey.ResourceConfigCustomizer;
+import org.springframework.boot.autoconfigure.web.servlet.DefaultJerseyApplicationPath;
+import org.springframework.boot.autoconfigure.web.servlet.JerseyApplicationPath;
+import org.springframework.boot.context.properties.EnableConfigurationProperties;
+import org.springframework.boot.web.servlet.ServletRegistrationBean;
 import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
 
 
 @ManagementContextConfiguration
 @ConditionalOnWebApplication(type = Type.SERVLET)
@@ -57,12 +66,6 @@ import org.springframework.context.annotation.Bean;
 @ConditionalOnMissingBean(type = )
 class JerseyWebEndpointManagementContextConfiguration {
 
-	@ConditionalOnMissingBean(ResourceConfig.class)
-	@Bean
-	public ResourceConfig resourceConfig() {
-		return new ResourceConfig();
-	}
-
 	@Bean
 	public ResourceConfigCustomizer webEndpointRegistrar(
 			WebEndpointsSupplier webEndpointsSupplier,
@@ -85,4 +88,37 @@ class JerseyWebEndpointManagementContextConfiguration {
 		};
 	}
 
+	@Configuration
+	@ConditionalOnMissingBean(ResourceConfig.class)
+	@EnableConfigurationProperties(JerseyProperties.class)
+	static class ResourceConfigConfiguration {
+
+		@Bean
+		public ResourceConfig resourceConfig(
+				ObjectProvider<ResourceConfigCustomizer> resourceConfigCustomizers) {
+			ResourceConfig resourceConfig = new ResourceConfig();
+			resourceConfigCustomizers.orderedStream()
+					.forEach((customizer) -> customizer.customize(resourceConfig));
+			return resourceConfig;
+		}
+
+		@Bean
+		@ConditionalOnMissingBean
+		public JerseyApplicationPath jerseyApplicationPath(JerseyProperties properties,
+				ResourceConfig config) {
+			return new DefaultJerseyApplicationPath(properties.getApplicationPath(),
+					config);
+		}
+
+		@Bean
+		public ServletRegistrationBean<ServletContainer> jerseyServletRegistration(
+				ObjectProvider<ResourceConfigCustomizer> resourceConfigCustomizers,
+				JerseyApplicationPath jerseyApplicationPath) {
+			return new ServletRegistrationBean<>(
+					new ServletContainer(resourceConfig(resourceConfigCustomizers)),
+					jerseyApplicationPath.getUrlMapping());
+		}
+
+	}
+
 }

