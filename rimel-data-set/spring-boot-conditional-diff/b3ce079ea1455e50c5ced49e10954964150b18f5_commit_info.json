{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsAnnotationDrivenConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsAnnotationDrivenConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -19,14 +19,15 @@ package org.springframework.boot.autoconfigure.jms;\n import javax.jms.ConnectionFactory;\n \n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n import org.springframework.jms.annotation.EnableJms;\n-import org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor;\n+import org.springframework.jms.annotation.JmsBootstrapConfiguration;\n import org.springframework.jms.config.DefaultJmsListenerContainerFactory;\n+import org.springframework.jms.config.JmsListenerConfigUtils;\n import org.springframework.jms.support.destination.DestinationResolver;\n import org.springframework.transaction.PlatformTransactionManager;\n \n@@ -39,7 +40,7 @@ import org.springframework.transaction.PlatformTransactionManager;\n  */\n @Configuration\n @ConditionalOnClass(EnableJms.class)\n-@ConditionalOnBean(JmsListenerAnnotationBeanPostProcessor.class)\n+@Import(JmsBootstrapConfiguration.class)\n class JmsAnnotationDrivenConfiguration {\n \n \t@Autowired(required = false)\n@@ -63,4 +64,10 @@ class JmsAnnotationDrivenConfiguration {\n \t\treturn factory;\n \t}\n \n+\t@EnableJms\n+\t@ConditionalOnMissingBean(name = JmsListenerConfigUtils.JMS_LISTENER_ANNOTATION_PROCESSOR_BEAN_NAME)\n+\tprotected static class EnableJmsConfiguration {\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jms;\n\nimport javax.jms.ConnectionFactory;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.jms.annotation.EnableJms;\nimport org.springframework.jms.annotation.JmsBootstrapConfiguration;\nimport org.springframework.jms.config.DefaultJmsListenerContainerFactory;\nimport org.springframework.jms.config.JmsListenerConfigUtils;\nimport org.springframework.jms.support.destination.DestinationResolver;\nimport org.springframework.transaction.PlatformTransactionManager;\n\n/**\n * Configuration for Spring 4.1 annotation driven JMS.\n *\n * @author Phillip Webb\n * @author Stephane Nicoll\n * @since 1.2.0\n */\n@Configuration\n@ConditionalOnClass(EnableJms.class)\n@Import(JmsBootstrapConfiguration.class)\nclass JmsAnnotationDrivenConfiguration {\n\n\t@Autowired(required = false)\n\tprivate DestinationResolver destinationResolver;\n\n\t@Autowired(required = false)\n\tprivate PlatformTransactionManager transactionManager;\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "jmsListenerContainerFactory")\n\tpublic DefaultJmsListenerContainerFactory jmsListenerContainerFactory(\n\t\t\tConnectionFactory connectionFactory) {\n\t\tDefaultJmsListenerContainerFactory factory = new DefaultJmsListenerContainerFactory();\n\t\tfactory.setConnectionFactory(connectionFactory);\n\t\tif (this.transactionManager != null) {\n\t\t\tfactory.setTransactionManager(this.transactionManager);\n\t\t}\n\t\tif (this.destinationResolver != null) {\n\t\t\tfactory.setDestinationResolver(this.destinationResolver);\n\t\t}\n\t\treturn factory;\n\t}\n\n\t@EnableJms\n\t@ConditionalOnMissingBean(name = JmsListenerConfigUtils.JMS_LISTENER_ANNOTATION_PROCESSOR_BEAN_NAME)\n\tprotected static class EnableJmsConfiguration {\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jms;\n\nimport javax.jms.ConnectionFactory;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jms.annotation.EnableJms;\nimport org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor;\nimport org.springframework.jms.config.DefaultJmsListenerContainerFactory;\nimport org.springframework.jms.support.destination.DestinationResolver;\nimport org.springframework.transaction.PlatformTransactionManager;\n\n/**\n * Configuration for Spring 4.1 annotation driven JMS.\n *\n * @author Phillip Webb\n * @author Stephane Nicoll\n * @since 1.2.0\n */\n@Configuration\n@ConditionalOnClass(EnableJms.class)\n@ConditionalOnBean(JmsListenerAnnotationBeanPostProcessor.class)\nclass JmsAnnotationDrivenConfiguration {\n\n\t@Autowired(required = false)\n\tprivate DestinationResolver destinationResolver;\n\n\t@Autowired(required = false)\n\tprivate PlatformTransactionManager transactionManager;\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "jmsListenerContainerFactory")\n\tpublic DefaultJmsListenerContainerFactory jmsListenerContainerFactory(\n\t\t\tConnectionFactory connectionFactory) {\n\t\tDefaultJmsListenerContainerFactory factory = new DefaultJmsListenerContainerFactory();\n\t\tfactory.setConnectionFactory(connectionFactory);\n\t\tif (this.transactionManager != null) {\n\t\t\tfactory.setTransactionManager(this.transactionManager);\n\t\t}\n\t\tif (this.destinationResolver != null) {\n\t\t\tfactory.setDestinationResolver(this.destinationResolver);\n\t\t}\n\t\treturn factory;\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
