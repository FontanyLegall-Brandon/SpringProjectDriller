{'_old_path': PosixPath('spring-autoconfigure/src/main/java/org/springframework/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java'), '_new_path': PosixPath('spring-autoconfigure/src/main/java/org/springframework/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -21,7 +21,6 @@ import java.io.InputStream;\n import java.util.Collection;\n import java.util.Collections;\n \n-import javax.annotation.PostConstruct;\n import javax.servlet.Servlet;\n \n import nz.net.ultraq.thymeleaf.LayoutDialect;\n@@ -33,12 +32,12 @@ import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.bootstrap.context.condition.ConditionalOnClass;\n import org.springframework.bootstrap.context.condition.ConditionalOnMissingBean;\n-import org.springframework.bootstrap.context.condition.ConditionalOnMissingClass;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.core.io.DefaultResourceLoader;\n import org.springframework.core.io.ResourceLoader;\n import org.thymeleaf.TemplateProcessingParameters;\n+import org.thymeleaf.dialect.IDialect;\n import org.thymeleaf.extras.springsecurity3.dialect.SpringSecurityDialect;\n import org.thymeleaf.resourceresolver.IResourceResolver;\n import org.thymeleaf.spring3.SpringTemplateEngine;\n@@ -107,19 +106,24 @@ public class ThymeleafAutoConfiguration {\n \t}\n \n \t@Configuration\n-\t@ConditionalOnMissingClass("nz.net.ultraq.thymeleaf.LayoutDialect")\n \t@ConditionalOnMissingBean(SpringTemplateEngine.class)\n \tprotected static class ThymeleafDefaultConfiguration {\n \n \t\t@Autowired\n \t\tprivate Collection<ITemplateResolver> templateResolvers = Collections.emptySet();\n \n+\t\t@Autowired(required = false)\n+\t\tprivate Collection<IDialect> dialects = Collections.emptySet();\n+\n \t\t@Bean\n \t\tpublic SpringTemplateEngine templateEngine() {\n \t\t\tSpringTemplateEngine engine = new SpringTemplateEngine();\n \t\t\tfor (ITemplateResolver templateResolver : this.templateResolvers) {\n \t\t\t\tengine.addTemplateResolver(templateResolver);\n \t\t\t}\n+\t\t\tfor (IDialect dialect : this.dialects) {\n+\t\t\t\tengine.addDialect(dialect);\n+\t\t\t}\n \t\t\treturn engine;\n \t\t}\n \n@@ -127,20 +131,11 @@ public class ThymeleafAutoConfiguration {\n \n \t@Configuration\n \t@ConditionalOnClass(name = "nz.net.ultraq.thymeleaf.LayoutDialect")\n-\t@ConditionalOnMissingBean(SpringTemplateEngine.class)\n \tprotected static class ThymeleafWebLayoutConfiguration {\n \n-\t\t@Autowired\n-\t\tprivate Collection<ITemplateResolver> templateResolvers = Collections.emptySet();\n-\n \t\t@Bean\n-\t\tpublic SpringTemplateEngine templateEngine() {\n-\t\t\tSpringTemplateEngine engine = new SpringTemplateEngine();\n-\t\t\tfor (ITemplateResolver templateResolver : this.templateResolvers) {\n-\t\t\t\tengine.addTemplateResolver(templateResolver);\n-\t\t\t}\n-\t\t\tengine.addDialect(new LayoutDialect());\n-\t\t\treturn engine;\n+\t\tpublic LayoutDialect layoutDialect() {\n+\t\t\treturn new LayoutDialect();\n \t\t}\n \n \t}\n@@ -167,12 +162,9 @@ public class ThymeleafAutoConfiguration {\n \t@ConditionalOnClass({ SpringSecurityDialect.class })\n \tprotected static class ThymeleafSecurityDialectConfiguration {\n \n-\t\t@Autowired\n-\t\tprivate SpringTemplateEngine templateEngine;\n-\n-\t\t@PostConstruct\n-\t\tpublic void configureThymeleafSecurity() {\n-\t\t\tthis.templateEngine.addDialect(new SpringSecurityDialect());\n+\t\t@Bean\n+\t\tpublic SpringSecurityDialect securityDialect() {\n+\t\t\treturn new SpringSecurityDialect();\n \t\t}\n \t}\n \n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.autoconfigure.thymeleaf;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Collection;\nimport java.util.Collections;\n\nimport javax.servlet.Servlet;\n\nimport nz.net.ultraq.thymeleaf.LayoutDialect;\n\nimport org.springframework.autoconfigure.AutoConfigureAfter;\nimport org.springframework.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.bootstrap.context.condition.ConditionalOnClass;\nimport org.springframework.bootstrap.context.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.core.io.ResourceLoader;\nimport org.thymeleaf.TemplateProcessingParameters;\nimport org.thymeleaf.dialect.IDialect;\nimport org.thymeleaf.extras.springsecurity3.dialect.SpringSecurityDialect;\nimport org.thymeleaf.resourceresolver.IResourceResolver;\nimport org.thymeleaf.spring3.SpringTemplateEngine;\nimport org.thymeleaf.spring3.view.ThymeleafViewResolver;\nimport org.thymeleaf.templateresolver.ITemplateResolver;\nimport org.thymeleaf.templateresolver.TemplateResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Thymeleaf templating.\n * \n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnClass(SpringTemplateEngine.class)\n@AutoConfigureAfter(WebMvcAutoConfiguration.class)\npublic class ThymeleafAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnMissingBean(name = "defaultTemplateResolver")\n\tprotected static class DefaultTemplateResolverConfiguration {\n\n\t\t@Autowired\n\t\tprivate ResourceLoader resourceLoader = new DefaultResourceLoader();\n\n\t\t@Value("${spring.template.prefix:classpath:/templates/}")\n\t\tprivate String prefix = "classpath:/templates/";\n\n\t\t@Value("${spring.template.suffix:.html}")\n\t\tprivate String suffix = ".html";\n\n\t\t@Value("${spring.template.cache:true}")\n\t\tprivate boolean cacheable;\n\n\t\t@Value("${spring.template.mode:HTML5}")\n\t\tprivate String templateMode = "HTML5";\n\n\t\t@Bean\n\t\tpublic ITemplateResolver defaultTemplateResolver() {\n\t\t\tTemplateResolver resolver = new TemplateResolver();\n\t\t\tresolver.setResourceResolver(new IResourceResolver() {\n\t\t\t\t@Override\n\t\t\t\tpublic InputStream getResourceAsStream(\n\t\t\t\t\t\tTemplateProcessingParameters templateProcessingParameters,\n\t\t\t\t\t\tString resourceName) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn DefaultTemplateResolverConfiguration.this.resourceLoader\n\t\t\t\t\t\t\t\t.getResource(resourceName).getInputStream();\n\t\t\t\t\t}\n\t\t\t\t\tcatch (IOException ex) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic String getName() {\n\t\t\t\t\treturn "SPRING";\n\t\t\t\t}\n\t\t\t});\n\t\t\tresolver.setPrefix(this.prefix);\n\t\t\tresolver.setSuffix(this.suffix);\n\t\t\tresolver.setTemplateMode(this.templateMode);\n\t\t\tresolver.setCacheable(this.cacheable);\n\t\t\treturn resolver;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(SpringTemplateEngine.class)\n\tprotected static class ThymeleafDefaultConfiguration {\n\n\t\t@Autowired\n\t\tprivate Collection<ITemplateResolver> templateResolvers = Collections.emptySet();\n\n\t\t@Autowired(required = false)\n\t\tprivate Collection<IDialect> dialects = Collections.emptySet();\n\n\t\t@Bean\n\t\tpublic SpringTemplateEngine templateEngine() {\n\t\t\tSpringTemplateEngine engine = new SpringTemplateEngine();\n\t\t\tfor (ITemplateResolver templateResolver : this.templateResolvers) {\n\t\t\t\tengine.addTemplateResolver(templateResolver);\n\t\t\t}\n\t\t\tfor (IDialect dialect : this.dialects) {\n\t\t\t\tengine.addDialect(dialect);\n\t\t\t}\n\t\t\treturn engine;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(name = "nz.net.ultraq.thymeleaf.LayoutDialect")\n\tprotected static class ThymeleafWebLayoutConfiguration {\n\n\t\t@Bean\n\t\tpublic LayoutDialect layoutDialect() {\n\t\t\treturn new LayoutDialect();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ Servlet.class })\n\tprotected static class ThymeleafViewResolverConfiguration {\n\n\t\t@Autowired\n\t\tprivate SpringTemplateEngine templateEngine;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "thymeleafViewResolver")\n\t\tpublic ThymeleafViewResolver thymeleafViewResolver() {\n\t\t\tThymeleafViewResolver resolver = new ThymeleafViewResolver();\n\t\t\tresolver.setTemplateEngine(this.templateEngine);\n\t\t\tresolver.setCharacterEncoding("UTF-8");\n\t\t\treturn resolver;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ SpringSecurityDialect.class })\n\tprotected static class ThymeleafSecurityDialectConfiguration {\n\n\t\t@Bean\n\t\tpublic SpringSecurityDialect securityDialect() {\n\t\t\treturn new SpringSecurityDialect();\n\t\t}\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.autoconfigure.thymeleaf;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Collection;\nimport java.util.Collections;\n\nimport javax.annotation.PostConstruct;\nimport javax.servlet.Servlet;\n\nimport nz.net.ultraq.thymeleaf.LayoutDialect;\n\nimport org.springframework.autoconfigure.AutoConfigureAfter;\nimport org.springframework.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.bootstrap.context.condition.ConditionalOnClass;\nimport org.springframework.bootstrap.context.condition.ConditionalOnMissingBean;\nimport org.springframework.bootstrap.context.condition.ConditionalOnMissingClass;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.core.io.ResourceLoader;\nimport org.thymeleaf.TemplateProcessingParameters;\nimport org.thymeleaf.extras.springsecurity3.dialect.SpringSecurityDialect;\nimport org.thymeleaf.resourceresolver.IResourceResolver;\nimport org.thymeleaf.spring3.SpringTemplateEngine;\nimport org.thymeleaf.spring3.view.ThymeleafViewResolver;\nimport org.thymeleaf.templateresolver.ITemplateResolver;\nimport org.thymeleaf.templateresolver.TemplateResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Thymeleaf templating.\n * \n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnClass(SpringTemplateEngine.class)\n@AutoConfigureAfter(WebMvcAutoConfiguration.class)\npublic class ThymeleafAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnMissingBean(name = "defaultTemplateResolver")\n\tprotected static class DefaultTemplateResolverConfiguration {\n\n\t\t@Autowired\n\t\tprivate ResourceLoader resourceLoader = new DefaultResourceLoader();\n\n\t\t@Value("${spring.template.prefix:classpath:/templates/}")\n\t\tprivate String prefix = "classpath:/templates/";\n\n\t\t@Value("${spring.template.suffix:.html}")\n\t\tprivate String suffix = ".html";\n\n\t\t@Value("${spring.template.cache:true}")\n\t\tprivate boolean cacheable;\n\n\t\t@Value("${spring.template.mode:HTML5}")\n\t\tprivate String templateMode = "HTML5";\n\n\t\t@Bean\n\t\tpublic ITemplateResolver defaultTemplateResolver() {\n\t\t\tTemplateResolver resolver = new TemplateResolver();\n\t\t\tresolver.setResourceResolver(new IResourceResolver() {\n\t\t\t\t@Override\n\t\t\t\tpublic InputStream getResourceAsStream(\n\t\t\t\t\t\tTemplateProcessingParameters templateProcessingParameters,\n\t\t\t\t\t\tString resourceName) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn DefaultTemplateResolverConfiguration.this.resourceLoader\n\t\t\t\t\t\t\t\t.getResource(resourceName).getInputStream();\n\t\t\t\t\t}\n\t\t\t\t\tcatch (IOException ex) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic String getName() {\n\t\t\t\t\treturn "SPRING";\n\t\t\t\t}\n\t\t\t});\n\t\t\tresolver.setPrefix(this.prefix);\n\t\t\tresolver.setSuffix(this.suffix);\n\t\t\tresolver.setTemplateMode(this.templateMode);\n\t\t\tresolver.setCacheable(this.cacheable);\n\t\t\treturn resolver;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingClass("nz.net.ultraq.thymeleaf.LayoutDialect")\n\t@ConditionalOnMissingBean(SpringTemplateEngine.class)\n\tprotected static class ThymeleafDefaultConfiguration {\n\n\t\t@Autowired\n\t\tprivate Collection<ITemplateResolver> templateResolvers = Collections.emptySet();\n\n\t\t@Bean\n\t\tpublic SpringTemplateEngine templateEngine() {\n\t\t\tSpringTemplateEngine engine = new SpringTemplateEngine();\n\t\t\tfor (ITemplateResolver templateResolver : this.templateResolvers) {\n\t\t\t\tengine.addTemplateResolver(templateResolver);\n\t\t\t}\n\t\t\treturn engine;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(name = "nz.net.ultraq.thymeleaf.LayoutDialect")\n\t@ConditionalOnMissingBean(SpringTemplateEngine.class)\n\tprotected static class ThymeleafWebLayoutConfiguration {\n\n\t\t@Autowired\n\t\tprivate Collection<ITemplateResolver> templateResolvers = Collections.emptySet();\n\n\t\t@Bean\n\t\tpublic SpringTemplateEngine templateEngine() {\n\t\t\tSpringTemplateEngine engine = new SpringTemplateEngine();\n\t\t\tfor (ITemplateResolver templateResolver : this.templateResolvers) {\n\t\t\t\tengine.addTemplateResolver(templateResolver);\n\t\t\t}\n\t\t\tengine.addDialect(new LayoutDialect());\n\t\t\treturn engine;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ Servlet.class })\n\tprotected static class ThymeleafViewResolverConfiguration {\n\n\t\t@Autowired\n\t\tprivate SpringTemplateEngine templateEngine;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "thymeleafViewResolver")\n\t\tpublic ThymeleafViewResolver thymeleafViewResolver() {\n\t\t\tThymeleafViewResolver resolver = new ThymeleafViewResolver();\n\t\t\tresolver.setTemplateEngine(this.templateEngine);\n\t\t\tresolver.setCharacterEncoding("UTF-8");\n\t\t\treturn resolver;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ SpringSecurityDialect.class })\n\tprotected static class ThymeleafSecurityDialectConfiguration {\n\n\t\t@Autowired\n\t\tprivate SpringTemplateEngine templateEngine;\n\n\t\t@PostConstruct\n\t\tpublic void configureThymeleafSecurity() {\n\t\t\tthis.templateEngine.addDialect(new SpringSecurityDialect());\n\t\t}\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
