@@ -0,0 +1,63 @@
+
+
+package org.springframework.boot.autoconfigure.jms.hornetq;
+
+import javax.jms.ConnectionFactory;
+import javax.transaction.TransactionManager;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.hornetq.jms.client.HornetQXAConnectionFactory;
+import org.hornetq.jms.server.embedded.EmbeddedJMS;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.jta.XAConnectionFactoryWrapper;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+
+@Configuration
+@ConditionalOnMissingBean(ConnectionFactory.class)
+@ConditionalOnClass(TransactionManager.class)
+@ConditionalOnBean(XAConnectionFactoryWrapper.class)
+class HornetQXAConnectionFactoryConfiguration {
+
+	private static Log logger = LogFactory
+			.getLog(HornetQEmbeddedServerConfiguration.class);
+
+	
+	@Autowired(required = false)
+	private EmbeddedJMS embeddedJMS;
+
+	@Bean
+	public ConnectionFactory jmsConnectionFactory(HornetQProperties properties,
+			XAConnectionFactoryWrapper wrapper) throws Exception {
+		if (this.embeddedJMS != null && logger.isDebugEnabled()) {
+			logger.debug();
+		}
+		return wrapper.wrapConnectionFactory(new HornetQConnectionFactoryFactory(
+				properties).createConnectionFactory(HornetQXAConnectionFactory.class));
+	}
+
+}

