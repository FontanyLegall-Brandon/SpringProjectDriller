{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerPropertiesAutoConfiguration.java'), '_new_path': None, 'change_type': <ModificationType.DELETE: 4>, 'diff': '@@ -1,91 +0,0 @@\n-/*\n- * Copyright 2012-2015 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the "License");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an "AS IS" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.boot.autoconfigure.web;\n-\n-import org.springframework.beans.BeansException;\n-import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n-import org.springframework.boot.autoconfigure.condition.SearchStrategy;\n-import org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainer;\n-import org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;\n-import org.springframework.boot.context.properties.EnableConfigurationProperties;\n-import org.springframework.context.ApplicationContext;\n-import org.springframework.context.ApplicationContextAware;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.core.Ordered;\n-import org.springframework.util.Assert;\n-import org.springframework.util.StringUtils;\n-\n-/**\n- * {@link EnableAutoConfiguration Auto-configuration} that configures the\n- * {@link ConfigurableEmbeddedServletContainer} from a {@link ServerProperties} bean.\n- *\n- * @author Dave Syer\n- * @author Andy Wilkinson\n- */\n-@Configuration\n-@EnableConfigurationProperties\n-@ConditionalOnWebApplication\n-public class ServerPropertiesAutoConfiguration {\n-\n-\t@Bean\n-\t@ConditionalOnMissingBean(search = SearchStrategy.CURRENT)\n-\tpublic ServerProperties serverProperties() {\n-\t\treturn new ServerProperties();\n-\t}\n-\n-\t@Bean\n-\tpublic DuplicateServerPropertiesDetector duplicateServerPropertiesDetector() {\n-\t\treturn new DuplicateServerPropertiesDetector();\n-\t}\n-\n-\t/**\n-\t * {@link EmbeddedServletContainerCustomizer} that ensures there is exactly one\n-\t * {@link ServerProperties} bean in the application context.\n-\t */\n-\tprivate static class DuplicateServerPropertiesDetector implements\n-\t\t\tEmbeddedServletContainerCustomizer, Ordered, ApplicationContextAware {\n-\n-\t\tprivate ApplicationContext applicationContext;\n-\n-\t\t@Override\n-\t\tpublic int getOrder() {\n-\t\t\treturn 0;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void setApplicationContext(ApplicationContext applicationContext)\n-\t\t\t\tthrows BeansException {\n-\t\t\tthis.applicationContext = applicationContext;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void customize(ConfigurableEmbeddedServletContainer container) {\n-\t\t\t// ServerProperties handles customization, this just checks we only have\n-\t\t\t// a single bean\n-\t\t\tString[] serverPropertiesBeans = this.applicationContext\n-\t\t\t\t\t.getBeanNamesForType(ServerProperties.class);\n-\t\t\tAssert.state(serverPropertiesBeans.length == 1,\n-\t\t\t\t\t"Multiple ServerProperties beans registered " + StringUtils\n-\t\t\t\t\t\t\t.arrayToCommaDelimitedString(serverPropertiesBeans));\n-\t\t}\n-\n-\t}\n-\n-}\n', 'source_code': None, 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainer;\nimport org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.util.Assert;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} that configures the\n * {@link ConfigurableEmbeddedServletContainer} from a {@link ServerProperties} bean.\n *\n * @author Dave Syer\n * @author Andy Wilkinson\n */\n@Configuration\n@EnableConfigurationProperties\n@ConditionalOnWebApplication\npublic class ServerPropertiesAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean(search = SearchStrategy.CURRENT)\n\tpublic ServerProperties serverProperties() {\n\t\treturn new ServerProperties();\n\t}\n\n\t@Bean\n\tpublic DuplicateServerPropertiesDetector duplicateServerPropertiesDetector() {\n\t\treturn new DuplicateServerPropertiesDetector();\n\t}\n\n\t/**\n\t * {@link EmbeddedServletContainerCustomizer} that ensures there is exactly one\n\t * {@link ServerProperties} bean in the application context.\n\t */\n\tprivate static class DuplicateServerPropertiesDetector implements\n\t\t\tEmbeddedServletContainerCustomizer, Ordered, ApplicationContextAware {\n\n\t\tprivate ApplicationContext applicationContext;\n\n\t\t@Override\n\t\tpublic int getOrder() {\n\t\t\treturn 0;\n\t\t}\n\n\t\t@Override\n\t\tpublic void setApplicationContext(ApplicationContext applicationContext)\n\t\t\t\tthrows BeansException {\n\t\t\tthis.applicationContext = applicationContext;\n\t\t}\n\n\t\t@Override\n\t\tpublic void customize(ConfigurableEmbeddedServletContainer container) {\n\t\t\t// ServerProperties handles customization, this just checks we only have\n\t\t\t// a single bean\n\t\t\tString[] serverPropertiesBeans = this.applicationContext\n\t\t\t\t\t.getBeanNamesForType(ServerProperties.class);\n\t\t\tAssert.state(serverPropertiesBeans.length == 1,\n\t\t\t\t\t"Multiple ServerProperties beans registered " + StringUtils\n\t\t\t\t\t\t\t.arrayToCommaDelimitedString(serverPropertiesBeans));\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
