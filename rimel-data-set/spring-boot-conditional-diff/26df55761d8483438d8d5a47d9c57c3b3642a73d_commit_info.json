{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/condition/ConditionalOnExposedEndpointTests.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/condition/ConditionalOnAvailableEndpointTests.java'), 'change_type': <ModificationType.RENAME: 3>, 'diff': '@@ -29,11 +29,11 @@ import org.springframework.context.annotation.Configuration;\n import static org.assertj.core.api.Assertions.assertThat;\n \n /**\n- * Tests for {@link ConditionalOnExposedEndpoint @ConditionalOnExposedEndpoint}.\n+ * Tests for {@link ConditionalOnAvailableEndpoint @ConditionalOnAvailableEndpoint}.\n  *\n  * @author Brian Clozel\n  */\n-public class ConditionalOnExposedEndpointTests {\n+public class ConditionalOnAvailableEndpointTests {\n \n \tprivate final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n \t\t\t.withUserConfiguration(AllEndpointsConfiguration.class);\n@@ -41,15 +41,45 @@ public class ConditionalOnExposedEndpointTests {\n \t@Test\n \tpublic void outcomeShouldMatchDefaults() {\n \t\tthis.contextRunner.run((context) -> assertThat(context).hasBean("info")\n-\t\t\t\t.hasBean("health").doesNotHaveBean("spring").doesNotHaveBean("test"));\n+\t\t\t\t.hasBean("health").doesNotHaveBean("spring").doesNotHaveBean("test")\n+\t\t\t\t.doesNotHaveBean("shutdown"));\n \t}\n \n \t@Test\n-\tpublic void outcomeWhenIncludeAllWebShouldMatch() {\n+\tpublic void outcomeWithEnabledByDefaultSetToFalseShouldNotMatchAnything() {\n+\t\tthis.contextRunner\n+\t\t\t\t.withPropertyValues("management.endpoints.enabled-by-default=false")\n+\t\t\t\t.run((context) -> assertThat(context).doesNotHaveBean("info")\n+\t\t\t\t\t\t.doesNotHaveBean("health").doesNotHaveBean("spring")\n+\t\t\t\t\t\t.doesNotHaveBean("test").doesNotHaveBean("shutdown"));\n+\t}\n+\n+\t@Test\n+\tpublic void outcomeWhenIncludeAllWebShouldMatchEnabledEndpoints() {\n \t\tthis.contextRunner\n \t\t\t\t.withPropertyValues("management.endpoints.web.exposure.include=*")\n \t\t\t\t.run((context) -> assertThat(context).hasBean("info").hasBean("health")\n-\t\t\t\t\t\t.hasBean("test").hasBean("spring"));\n+\t\t\t\t\t\t.hasBean("test").hasBean("spring").doesNotHaveBean("shutdown"));\n+\t}\n+\n+\t@Test\n+\tpublic void outcomeWhenIncludeAllWebAndDisablingEndpointShouldMatchEnabledEndpoints() {\n+\t\tthis.contextRunner\n+\t\t\t\t.withPropertyValues("management.endpoints.web.exposure.include=*",\n+\t\t\t\t\t\t"management.endpoint.test.enabled=false",\n+\t\t\t\t\t\t"management.endpoint.health.enabled=false")\n+\t\t\t\t.run((context) -> assertThat(context).hasBean("info")\n+\t\t\t\t\t\t.doesNotHaveBean("health").doesNotHaveBean("test")\n+\t\t\t\t\t\t.hasBean("spring").doesNotHaveBean("shutdown"));\n+\t}\n+\n+\t@Test\n+\tpublic void outcomeWhenIncludeAllWebAndEnablingEndpointDisabledByDefaultShouldMatchAll() {\n+\t\tthis.contextRunner\n+\t\t\t\t.withPropertyValues("management.endpoints.web.exposure.include=*",\n+\t\t\t\t\t\t"management.endpoint.shutdown.enabled=true")\n+\t\t\t\t.run((context) -> assertThat(context).hasBean("info").hasBean("health")\n+\t\t\t\t\t\t.hasBean("test").hasBean("spring").hasBean("shutdown"));\n \t}\n \n \t@Test\n@@ -57,16 +87,27 @@ public class ConditionalOnExposedEndpointTests {\n \t\tthis.contextRunner\n \t\t\t\t.withPropertyValues("management.endpoints.jmx.exposure.include=*")\n \t\t\t\t.run((context) -> assertThat(context).hasBean("info").hasBean("health")\n-\t\t\t\t\t\t.doesNotHaveBean("spring").doesNotHaveBean("test"));\n+\t\t\t\t\t\t.doesNotHaveBean("spring").doesNotHaveBean("test")\n+\t\t\t\t\t\t.doesNotHaveBean("shutdown"));\n \t}\n \n \t@Test\n-\tpublic void outcomeWhenIncludeAllJmxAndJmxEnabledShouldMatch() {\n+\tpublic void outcomeWhenIncludeAllJmxAndJmxEnabledShouldMatchEnabledEndpoints() {\n \t\tthis.contextRunner\n \t\t\t\t.withPropertyValues("management.endpoints.jmx.exposure.include=*",\n \t\t\t\t\t\t"spring.jmx.enabled=true")\n \t\t\t\t.run((context) -> assertThat(context).hasBean("info").hasBean("health")\n-\t\t\t\t\t\t.hasBean("test").hasBean("spring"));\n+\t\t\t\t\t\t.hasBean("test").hasBean("spring").doesNotHaveBean("shutdown"));\n+\t}\n+\n+\t@Test\n+\tpublic void outcomeWhenIncludeAllJmxAndJmxEnabledAndEnablingEndpointDisabledByDefaultShouldMatchAll() {\n+\t\tthis.contextRunner\n+\t\t\t\t.withPropertyValues("management.endpoints.jmx.exposure.include=*",\n+\t\t\t\t\t\t"spring.jmx.enabled=true",\n+\t\t\t\t\t\t"management.endpoint.shutdown.enabled=true")\n+\t\t\t\t.run((context) -> assertThat(context).hasBean("info").hasBean("health")\n+\t\t\t\t\t\t.hasBean("test").hasBean("spring").hasBean("shutdown"));\n \t}\n \n \t@Test\n@@ -75,7 +116,8 @@ public class ConditionalOnExposedEndpointTests {\n \t\t\t\t.withPropertyValues("management.endpoints.web.exposure.include=*",\n \t\t\t\t\t\t"management.endpoints.web.exposure.exclude=spring,info")\n \t\t\t\t.run((context) -> assertThat(context).hasBean("health").hasBean("test")\n-\t\t\t\t\t\t.doesNotHaveBean("info").doesNotHaveBean("spring"));\n+\t\t\t\t\t\t.doesNotHaveBean("info").doesNotHaveBean("spring")\n+\t\t\t\t\t\t.doesNotHaveBean("shutdown"));\n \t}\n \n \t@Test\n@@ -84,16 +126,36 @@ public class ConditionalOnExposedEndpointTests {\n \t\t\t\t"management.endpoints.web.exposure.include=info,health,spring,test",\n \t\t\t\t"management.endpoints.web.exposure.exclude=spring,info")\n \t\t\t\t.run((context) -> assertThat(context).hasBean("health").hasBean("test")\n-\t\t\t\t\t\t.doesNotHaveBean("info").doesNotHaveBean("spring"));\n+\t\t\t\t\t\t.doesNotHaveBean("info").doesNotHaveBean("spring")\n+\t\t\t\t\t\t.doesNotHaveBean("shutdown"));\n \t}\n \n \t@Test\n-\tpublic void outcomeWhenIncludeMatchesShouldMatch() {\n+\tpublic void outcomeWhenIncludeMatchesShouldMatchEnabledEndpoints() {\n \t\tthis.contextRunner\n \t\t\t\t.withPropertyValues("management.endpoints.web.exposure.include=spring")\n \t\t\t\t.run((context) -> assertThat(context).hasBean("spring")\n \t\t\t\t\t\t.doesNotHaveBean("health").doesNotHaveBean("info")\n-\t\t\t\t\t\t.doesNotHaveBean("test"));\n+\t\t\t\t\t\t.doesNotHaveBean("test").doesNotHaveBean("shutdown"));\n+\t}\n+\n+\t@Test\n+\tpublic void outcomeWhenIncludeMatchOnDisabledEndpointShouldNotMatch() {\n+\t\tthis.contextRunner\n+\t\t\t\t.withPropertyValues("management.endpoints.web.exposure.include=shutdown")\n+\t\t\t\t.run((context) -> assertThat(context).doesNotHaveBean("spring")\n+\t\t\t\t\t\t.doesNotHaveBean("health").doesNotHaveBean("info")\n+\t\t\t\t\t\t.doesNotHaveBean("test").doesNotHaveBean("shutdown"));\n+\t}\n+\n+\t@Test\n+\tpublic void outcomeWhenIncludeMatchOnEnabledEndpointShouldNotMatch() {\n+\t\tthis.contextRunner\n+\t\t\t\t.withPropertyValues("management.endpoints.web.exposure.include=shutdown",\n+\t\t\t\t\t\t"management.endpoint.shutdown.enabled=true")\n+\t\t\t\t.run((context) -> assertThat(context).doesNotHaveBean("spring")\n+\t\t\t\t\t\t.doesNotHaveBean("health").doesNotHaveBean("info")\n+\t\t\t\t\t\t.doesNotHaveBean("test").hasBean("shutdown"));\n \t}\n \n \t@Test\n@@ -102,7 +164,7 @@ public class ConditionalOnExposedEndpointTests {\n \t\t\t\t.withPropertyValues("management.endpoints.web.exposure.include=sPRing")\n \t\t\t\t.run((context) -> assertThat(context).hasBean("spring")\n \t\t\t\t\t\t.doesNotHaveBean("health").doesNotHaveBean("info")\n-\t\t\t\t\t\t.doesNotHaveBean("test"));\n+\t\t\t\t\t\t.doesNotHaveBean("test").doesNotHaveBean("shutdown"));\n \t}\n \n \t@Test\n@@ -112,11 +174,11 @@ public class ConditionalOnExposedEndpointTests {\n \t\t\t\t"management.endpoints.web.exposure.exclude=*")\n \t\t\t\t.run((context) -> assertThat(context).doesNotHaveBean("health")\n \t\t\t\t\t\t.doesNotHaveBean("info").doesNotHaveBean("spring")\n-\t\t\t\t\t\t.doesNotHaveBean("test"));\n+\t\t\t\t\t\t.doesNotHaveBean("test").doesNotHaveBean("shutdown"));\n \t}\n \n \t@Test\n-\tpublic void outcomeWhenIncludeMatchesShoulMatchWithExtensionsAndComponents() {\n+\tpublic void outcomeWhenIncludeMatchesShouldMatchWithExtensionsAndComponents() {\n \t\tthis.contextRunner\n \t\t\t\t.withUserConfiguration(\n \t\t\t\t\t\tComponentEnabledIfEndpointIsExposedConfiguration.class)\n@@ -124,7 +186,7 @@ public class ConditionalOnExposedEndpointTests {\n \t\t\t\t.run((context) -> assertThat(context).hasBean("spring")\n \t\t\t\t\t\t.hasBean("springComponent").hasBean("springExtension")\n \t\t\t\t\t\t.doesNotHaveBean("info").doesNotHaveBean("health")\n-\t\t\t\t\t\t.doesNotHaveBean("test"));\n+\t\t\t\t\t\t.doesNotHaveBean("test").doesNotHaveBean("shutdown"));\n \t}\n \n \t@Test\n@@ -169,6 +231,11 @@ public class ConditionalOnExposedEndpointTests {\n \n \t}\n \n+\t@Endpoint(id = "shutdown", enableByDefault = false)\n+\tstatic class ShutdownEndpoint {\n+\n+\t}\n+\n \t@EndpointExtension(endpoint = SpringEndpoint.class, filter = TestFilter.class)\n \tstatic class SpringEndpointExtension {\n \n@@ -187,42 +254,48 @@ public class ConditionalOnExposedEndpointTests {\n \tstatic class AllEndpointsConfiguration {\n \n \t\t@Bean\n-\t\t@ConditionalOnExposedEndpoint\n+\t\t@ConditionalOnAvailableEndpoint\n \t\tpublic HealthEndpoint health() {\n \t\t\treturn new HealthEndpoint();\n \t\t}\n \n \t\t@Bean\n-\t\t@ConditionalOnExposedEndpoint\n+\t\t@ConditionalOnAvailableEndpoint\n \t\tpublic InfoEndpoint info() {\n \t\t\treturn new InfoEndpoint();\n \t\t}\n \n \t\t@Bean\n-\t\t@ConditionalOnExposedEndpoint\n+\t\t@ConditionalOnAvailableEndpoint\n \t\tpublic SpringEndpoint spring() {\n \t\t\treturn new SpringEndpoint();\n \t\t}\n \n \t\t@Bean\n-\t\t@ConditionalOnExposedEndpoint\n+\t\t@ConditionalOnAvailableEndpoint\n \t\tpublic TestEndpoint test() {\n \t\t\treturn new TestEndpoint();\n \t\t}\n \n+\t\t@Bean\n+\t\t@ConditionalOnAvailableEndpoint\n+\t\tpublic ShutdownEndpoint shutdown() {\n+\t\t\treturn new ShutdownEndpoint();\n+\t\t}\n+\n \t}\n \n \t@Configuration(proxyBeanMethods = false)\n \tstatic class ComponentEnabledIfEndpointIsExposedConfiguration {\n \n \t\t@Bean\n-\t\t@ConditionalOnExposedEndpoint(endpoint = SpringEndpoint.class)\n+\t\t@ConditionalOnAvailableEndpoint(endpoint = SpringEndpoint.class)\n \t\tpublic String springComponent() {\n \t\t\treturn "springComponent";\n \t\t}\n \n \t\t@Bean\n-\t\t@ConditionalOnExposedEndpoint\n+\t\t@ConditionalOnAvailableEndpoint\n \t\tpublic SpringEndpointExtension springExtension() {\n \t\t\treturn new SpringEndpointExtension();\n \t\t}\n@@ -233,7 +306,7 @@ public class ConditionalOnExposedEndpointTests {\n \tstatic class ComponentWithNoEndpointReferenceConfiguration {\n \n \t\t@Bean\n-\t\t@ConditionalOnExposedEndpoint\n+\t\t@ConditionalOnAvailableEndpoint\n \t\tpublic String springcomp() {\n \t\t\treturn "springcomp";\n \t\t}\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.endpoint.condition;\n\nimport org.junit.Test;\n\nimport org.springframework.boot.actuate.endpoint.EndpointFilter;\nimport org.springframework.boot.actuate.endpoint.ExposableEndpoint;\nimport org.springframework.boot.actuate.endpoint.annotation.Endpoint;\nimport org.springframework.boot.actuate.endpoint.annotation.EndpointExtension;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link ConditionalOnAvailableEndpoint @ConditionalOnAvailableEndpoint}.\n *\n * @author Brian Clozel\n */\npublic class ConditionalOnAvailableEndpointTests {\n\n\tprivate final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t\t.withUserConfiguration(AllEndpointsConfiguration.class);\n\n\t@Test\n\tpublic void outcomeShouldMatchDefaults() {\n\t\tthis.contextRunner.run((context) -> assertThat(context).hasBean("info")\n\t\t\t\t.hasBean("health").doesNotHaveBean("spring").doesNotHaveBean("test")\n\t\t\t\t.doesNotHaveBean("shutdown"));\n\t}\n\n\t@Test\n\tpublic void outcomeWithEnabledByDefaultSetToFalseShouldNotMatchAnything() {\n\t\tthis.contextRunner\n\t\t\t\t.withPropertyValues("management.endpoints.enabled-by-default=false")\n\t\t\t\t.run((context) -> assertThat(context).doesNotHaveBean("info")\n\t\t\t\t\t\t.doesNotHaveBean("health").doesNotHaveBean("spring")\n\t\t\t\t\t\t.doesNotHaveBean("test").doesNotHaveBean("shutdown"));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenIncludeAllWebShouldMatchEnabledEndpoints() {\n\t\tthis.contextRunner\n\t\t\t\t.withPropertyValues("management.endpoints.web.exposure.include=*")\n\t\t\t\t.run((context) -> assertThat(context).hasBean("info").hasBean("health")\n\t\t\t\t\t\t.hasBean("test").hasBean("spring").doesNotHaveBean("shutdown"));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenIncludeAllWebAndDisablingEndpointShouldMatchEnabledEndpoints() {\n\t\tthis.contextRunner\n\t\t\t\t.withPropertyValues("management.endpoints.web.exposure.include=*",\n\t\t\t\t\t\t"management.endpoint.test.enabled=false",\n\t\t\t\t\t\t"management.endpoint.health.enabled=false")\n\t\t\t\t.run((context) -> assertThat(context).hasBean("info")\n\t\t\t\t\t\t.doesNotHaveBean("health").doesNotHaveBean("test")\n\t\t\t\t\t\t.hasBean("spring").doesNotHaveBean("shutdown"));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenIncludeAllWebAndEnablingEndpointDisabledByDefaultShouldMatchAll() {\n\t\tthis.contextRunner\n\t\t\t\t.withPropertyValues("management.endpoints.web.exposure.include=*",\n\t\t\t\t\t\t"management.endpoint.shutdown.enabled=true")\n\t\t\t\t.run((context) -> assertThat(context).hasBean("info").hasBean("health")\n\t\t\t\t\t\t.hasBean("test").hasBean("spring").hasBean("shutdown"));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenIncludeAllJmxButJmxDisabledShouldMatchDefaults() {\n\t\tthis.contextRunner\n\t\t\t\t.withPropertyValues("management.endpoints.jmx.exposure.include=*")\n\t\t\t\t.run((context) -> assertThat(context).hasBean("info").hasBean("health")\n\t\t\t\t\t\t.doesNotHaveBean("spring").doesNotHaveBean("test")\n\t\t\t\t\t\t.doesNotHaveBean("shutdown"));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenIncludeAllJmxAndJmxEnabledShouldMatchEnabledEndpoints() {\n\t\tthis.contextRunner\n\t\t\t\t.withPropertyValues("management.endpoints.jmx.exposure.include=*",\n\t\t\t\t\t\t"spring.jmx.enabled=true")\n\t\t\t\t.run((context) -> assertThat(context).hasBean("info").hasBean("health")\n\t\t\t\t\t\t.hasBean("test").hasBean("spring").doesNotHaveBean("shutdown"));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenIncludeAllJmxAndJmxEnabledAndEnablingEndpointDisabledByDefaultShouldMatchAll() {\n\t\tthis.contextRunner\n\t\t\t\t.withPropertyValues("management.endpoints.jmx.exposure.include=*",\n\t\t\t\t\t\t"spring.jmx.enabled=true",\n\t\t\t\t\t\t"management.endpoint.shutdown.enabled=true")\n\t\t\t\t.run((context) -> assertThat(context).hasBean("info").hasBean("health")\n\t\t\t\t\t\t.hasBean("test").hasBean("spring").hasBean("shutdown"));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenIncludeAllWebAndExcludeMatchesShouldNotMatch() {\n\t\tthis.contextRunner\n\t\t\t\t.withPropertyValues("management.endpoints.web.exposure.include=*",\n\t\t\t\t\t\t"management.endpoints.web.exposure.exclude=spring,info")\n\t\t\t\t.run((context) -> assertThat(context).hasBean("health").hasBean("test")\n\t\t\t\t\t\t.doesNotHaveBean("info").doesNotHaveBean("spring")\n\t\t\t\t\t\t.doesNotHaveBean("shutdown"));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenIncludeMatchesAndExcludeMatchesShouldNotMatch() {\n\t\tthis.contextRunner.withPropertyValues(\n\t\t\t\t"management.endpoints.web.exposure.include=info,health,spring,test",\n\t\t\t\t"management.endpoints.web.exposure.exclude=spring,info")\n\t\t\t\t.run((context) -> assertThat(context).hasBean("health").hasBean("test")\n\t\t\t\t\t\t.doesNotHaveBean("info").doesNotHaveBean("spring")\n\t\t\t\t\t\t.doesNotHaveBean("shutdown"));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenIncludeMatchesShouldMatchEnabledEndpoints() {\n\t\tthis.contextRunner\n\t\t\t\t.withPropertyValues("management.endpoints.web.exposure.include=spring")\n\t\t\t\t.run((context) -> assertThat(context).hasBean("spring")\n\t\t\t\t\t\t.doesNotHaveBean("health").doesNotHaveBean("info")\n\t\t\t\t\t\t.doesNotHaveBean("test").doesNotHaveBean("shutdown"));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenIncludeMatchOnDisabledEndpointShouldNotMatch() {\n\t\tthis.contextRunner\n\t\t\t\t.withPropertyValues("management.endpoints.web.exposure.include=shutdown")\n\t\t\t\t.run((context) -> assertThat(context).doesNotHaveBean("spring")\n\t\t\t\t\t\t.doesNotHaveBean("health").doesNotHaveBean("info")\n\t\t\t\t\t\t.doesNotHaveBean("test").doesNotHaveBean("shutdown"));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenIncludeMatchOnEnabledEndpointShouldNotMatch() {\n\t\tthis.contextRunner\n\t\t\t\t.withPropertyValues("management.endpoints.web.exposure.include=shutdown",\n\t\t\t\t\t\t"management.endpoint.shutdown.enabled=true")\n\t\t\t\t.run((context) -> assertThat(context).doesNotHaveBean("spring")\n\t\t\t\t\t\t.doesNotHaveBean("health").doesNotHaveBean("info")\n\t\t\t\t\t\t.doesNotHaveBean("test").hasBean("shutdown"));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenIncludeMatchesWithCaseShouldMatch() {\n\t\tthis.contextRunner\n\t\t\t\t.withPropertyValues("management.endpoints.web.exposure.include=sPRing")\n\t\t\t\t.run((context) -> assertThat(context).hasBean("spring")\n\t\t\t\t\t\t.doesNotHaveBean("health").doesNotHaveBean("info")\n\t\t\t\t\t\t.doesNotHaveBean("test").doesNotHaveBean("shutdown"));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenIncludeMatchesAndExcludeAllShouldNotMatch() {\n\t\tthis.contextRunner.withPropertyValues(\n\t\t\t\t"management.endpoints.web.exposure.include=info,health,spring,test",\n\t\t\t\t"management.endpoints.web.exposure.exclude=*")\n\t\t\t\t.run((context) -> assertThat(context).doesNotHaveBean("health")\n\t\t\t\t\t\t.doesNotHaveBean("info").doesNotHaveBean("spring")\n\t\t\t\t\t\t.doesNotHaveBean("test").doesNotHaveBean("shutdown"));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenIncludeMatchesShouldMatchWithExtensionsAndComponents() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(\n\t\t\t\t\t\tComponentEnabledIfEndpointIsExposedConfiguration.class)\n\t\t\t\t.withPropertyValues("management.endpoints.web.exposure.include=spring")\n\t\t\t\t.run((context) -> assertThat(context).hasBean("spring")\n\t\t\t\t\t\t.hasBean("springComponent").hasBean("springExtension")\n\t\t\t\t\t\t.doesNotHaveBean("info").doesNotHaveBean("health")\n\t\t\t\t\t\t.doesNotHaveBean("test").doesNotHaveBean("shutdown"));\n\t}\n\n\t@Test\n\tpublic void outcomeWithNoEndpointReferenceShouldFail() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(\n\t\t\t\t\t\tComponentWithNoEndpointReferenceConfiguration.class)\n\t\t\t\t.withPropertyValues("management.endpoints.web.exposure.include=*")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tassertThat(context).hasFailed();\n\t\t\t\t\tassertThat(context.getStartupFailure().getCause().getMessage())\n\t\t\t\t\t\t\t.contains(\n\t\t\t\t\t\t\t\t\t"No endpoint is specified and the return type of the @Bean method "\n\t\t\t\t\t\t\t\t\t\t\t+ "is neither an @Endpoint, nor an @EndpointExtension");\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void outcomeOnCloudFoundryShouldMatchAll() {\n\t\tthis.contextRunner.withPropertyValues("VCAP_APPLICATION:---")\n\t\t\t\t.run((context) -> assertThat(context).hasBean("info").hasBean("health")\n\t\t\t\t\t\t.hasBean("spring").hasBean("test"));\n\t}\n\n\t@Endpoint(id = "health")\n\tstatic class HealthEndpoint {\n\n\t}\n\n\t@Endpoint(id = "info")\n\tstatic class InfoEndpoint {\n\n\t}\n\n\t@Endpoint(id = "spring")\n\tstatic class SpringEndpoint {\n\n\t}\n\n\t@Endpoint(id = "test")\n\tstatic class TestEndpoint {\n\n\t}\n\n\t@Endpoint(id = "shutdown", enableByDefault = false)\n\tstatic class ShutdownEndpoint {\n\n\t}\n\n\t@EndpointExtension(endpoint = SpringEndpoint.class, filter = TestFilter.class)\n\tstatic class SpringEndpointExtension {\n\n\t}\n\n\tstatic class TestFilter implements EndpointFilter<ExposableEndpoint<?>> {\n\n\t\t@Override\n\t\tpublic boolean match(ExposableEndpoint<?> endpoint) {\n\t\t\treturn true;\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\tstatic class AllEndpointsConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnAvailableEndpoint\n\t\tpublic HealthEndpoint health() {\n\t\t\treturn new HealthEndpoint();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnAvailableEndpoint\n\t\tpublic InfoEndpoint info() {\n\t\t\treturn new InfoEndpoint();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnAvailableEndpoint\n\t\tpublic SpringEndpoint spring() {\n\t\t\treturn new SpringEndpoint();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnAvailableEndpoint\n\t\tpublic TestEndpoint test() {\n\t\t\treturn new TestEndpoint();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnAvailableEndpoint\n\t\tpublic ShutdownEndpoint shutdown() {\n\t\t\treturn new ShutdownEndpoint();\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\tstatic class ComponentEnabledIfEndpointIsExposedConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnAvailableEndpoint(endpoint = SpringEndpoint.class)\n\t\tpublic String springComponent() {\n\t\t\treturn "springComponent";\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnAvailableEndpoint\n\t\tpublic SpringEndpointExtension springExtension() {\n\t\t\treturn new SpringEndpointExtension();\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\tstatic class ComponentWithNoEndpointReferenceConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnAvailableEndpoint\n\t\tpublic String springcomp() {\n\t\t\treturn "springcomp";\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.endpoint.condition;\n\nimport org.junit.Test;\n\nimport org.springframework.boot.actuate.endpoint.EndpointFilter;\nimport org.springframework.boot.actuate.endpoint.ExposableEndpoint;\nimport org.springframework.boot.actuate.endpoint.annotation.Endpoint;\nimport org.springframework.boot.actuate.endpoint.annotation.EndpointExtension;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link ConditionalOnExposedEndpoint @ConditionalOnExposedEndpoint}.\n *\n * @author Brian Clozel\n */\npublic class ConditionalOnExposedEndpointTests {\n\n\tprivate final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t\t.withUserConfiguration(AllEndpointsConfiguration.class);\n\n\t@Test\n\tpublic void outcomeShouldMatchDefaults() {\n\t\tthis.contextRunner.run((context) -> assertThat(context).hasBean("info")\n\t\t\t\t.hasBean("health").doesNotHaveBean("spring").doesNotHaveBean("test"));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenIncludeAllWebShouldMatch() {\n\t\tthis.contextRunner\n\t\t\t\t.withPropertyValues("management.endpoints.web.exposure.include=*")\n\t\t\t\t.run((context) -> assertThat(context).hasBean("info").hasBean("health")\n\t\t\t\t\t\t.hasBean("test").hasBean("spring"));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenIncludeAllJmxButJmxDisabledShouldMatchDefaults() {\n\t\tthis.contextRunner\n\t\t\t\t.withPropertyValues("management.endpoints.jmx.exposure.include=*")\n\t\t\t\t.run((context) -> assertThat(context).hasBean("info").hasBean("health")\n\t\t\t\t\t\t.doesNotHaveBean("spring").doesNotHaveBean("test"));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenIncludeAllJmxAndJmxEnabledShouldMatch() {\n\t\tthis.contextRunner\n\t\t\t\t.withPropertyValues("management.endpoints.jmx.exposure.include=*",\n\t\t\t\t\t\t"spring.jmx.enabled=true")\n\t\t\t\t.run((context) -> assertThat(context).hasBean("info").hasBean("health")\n\t\t\t\t\t\t.hasBean("test").hasBean("spring"));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenIncludeAllWebAndExcludeMatchesShouldNotMatch() {\n\t\tthis.contextRunner\n\t\t\t\t.withPropertyValues("management.endpoints.web.exposure.include=*",\n\t\t\t\t\t\t"management.endpoints.web.exposure.exclude=spring,info")\n\t\t\t\t.run((context) -> assertThat(context).hasBean("health").hasBean("test")\n\t\t\t\t\t\t.doesNotHaveBean("info").doesNotHaveBean("spring"));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenIncludeMatchesAndExcludeMatchesShouldNotMatch() {\n\t\tthis.contextRunner.withPropertyValues(\n\t\t\t\t"management.endpoints.web.exposure.include=info,health,spring,test",\n\t\t\t\t"management.endpoints.web.exposure.exclude=spring,info")\n\t\t\t\t.run((context) -> assertThat(context).hasBean("health").hasBean("test")\n\t\t\t\t\t\t.doesNotHaveBean("info").doesNotHaveBean("spring"));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenIncludeMatchesShouldMatch() {\n\t\tthis.contextRunner\n\t\t\t\t.withPropertyValues("management.endpoints.web.exposure.include=spring")\n\t\t\t\t.run((context) -> assertThat(context).hasBean("spring")\n\t\t\t\t\t\t.doesNotHaveBean("health").doesNotHaveBean("info")\n\t\t\t\t\t\t.doesNotHaveBean("test"));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenIncludeMatchesWithCaseShouldMatch() {\n\t\tthis.contextRunner\n\t\t\t\t.withPropertyValues("management.endpoints.web.exposure.include=sPRing")\n\t\t\t\t.run((context) -> assertThat(context).hasBean("spring")\n\t\t\t\t\t\t.doesNotHaveBean("health").doesNotHaveBean("info")\n\t\t\t\t\t\t.doesNotHaveBean("test"));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenIncludeMatchesAndExcludeAllShouldNotMatch() {\n\t\tthis.contextRunner.withPropertyValues(\n\t\t\t\t"management.endpoints.web.exposure.include=info,health,spring,test",\n\t\t\t\t"management.endpoints.web.exposure.exclude=*")\n\t\t\t\t.run((context) -> assertThat(context).doesNotHaveBean("health")\n\t\t\t\t\t\t.doesNotHaveBean("info").doesNotHaveBean("spring")\n\t\t\t\t\t\t.doesNotHaveBean("test"));\n\t}\n\n\t@Test\n\tpublic void outcomeWhenIncludeMatchesShoulMatchWithExtensionsAndComponents() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(\n\t\t\t\t\t\tComponentEnabledIfEndpointIsExposedConfiguration.class)\n\t\t\t\t.withPropertyValues("management.endpoints.web.exposure.include=spring")\n\t\t\t\t.run((context) -> assertThat(context).hasBean("spring")\n\t\t\t\t\t\t.hasBean("springComponent").hasBean("springExtension")\n\t\t\t\t\t\t.doesNotHaveBean("info").doesNotHaveBean("health")\n\t\t\t\t\t\t.doesNotHaveBean("test"));\n\t}\n\n\t@Test\n\tpublic void outcomeWithNoEndpointReferenceShouldFail() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(\n\t\t\t\t\t\tComponentWithNoEndpointReferenceConfiguration.class)\n\t\t\t\t.withPropertyValues("management.endpoints.web.exposure.include=*")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tassertThat(context).hasFailed();\n\t\t\t\t\tassertThat(context.getStartupFailure().getCause().getMessage())\n\t\t\t\t\t\t\t.contains(\n\t\t\t\t\t\t\t\t\t"No endpoint is specified and the return type of the @Bean method "\n\t\t\t\t\t\t\t\t\t\t\t+ "is neither an @Endpoint, nor an @EndpointExtension");\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void outcomeOnCloudFoundryShouldMatchAll() {\n\t\tthis.contextRunner.withPropertyValues("VCAP_APPLICATION:---")\n\t\t\t\t.run((context) -> assertThat(context).hasBean("info").hasBean("health")\n\t\t\t\t\t\t.hasBean("spring").hasBean("test"));\n\t}\n\n\t@Endpoint(id = "health")\n\tstatic class HealthEndpoint {\n\n\t}\n\n\t@Endpoint(id = "info")\n\tstatic class InfoEndpoint {\n\n\t}\n\n\t@Endpoint(id = "spring")\n\tstatic class SpringEndpoint {\n\n\t}\n\n\t@Endpoint(id = "test")\n\tstatic class TestEndpoint {\n\n\t}\n\n\t@EndpointExtension(endpoint = SpringEndpoint.class, filter = TestFilter.class)\n\tstatic class SpringEndpointExtension {\n\n\t}\n\n\tstatic class TestFilter implements EndpointFilter<ExposableEndpoint<?>> {\n\n\t\t@Override\n\t\tpublic boolean match(ExposableEndpoint<?> endpoint) {\n\t\t\treturn true;\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\tstatic class AllEndpointsConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnExposedEndpoint\n\t\tpublic HealthEndpoint health() {\n\t\t\treturn new HealthEndpoint();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnExposedEndpoint\n\t\tpublic InfoEndpoint info() {\n\t\t\treturn new InfoEndpoint();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnExposedEndpoint\n\t\tpublic SpringEndpoint spring() {\n\t\t\treturn new SpringEndpoint();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnExposedEndpoint\n\t\tpublic TestEndpoint test() {\n\t\t\treturn new TestEndpoint();\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\tstatic class ComponentEnabledIfEndpointIsExposedConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnExposedEndpoint(endpoint = SpringEndpoint.class)\n\t\tpublic String springComponent() {\n\t\t\treturn "springComponent";\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnExposedEndpoint\n\t\tpublic SpringEndpointExtension springExtension() {\n\t\t\treturn new SpringEndpointExtension();\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\tstatic class ComponentWithNoEndpointReferenceConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnExposedEndpoint\n\t\tpublic String springcomp() {\n\t\t\treturn "springcomp";\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
