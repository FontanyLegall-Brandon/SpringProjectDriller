@@ -16,10 +16,22 @@
 
 package org.springframework.boot.developertools.remote.client;
 
+import java.net.URL;
+
+import javax.annotation.PostConstruct;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Value;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.boot.developertools.autoconfigure.DeveloperToolsProperties;
+import org.springframework.boot.developertools.autoconfigure.RemoteDeveloperToolsProperties;
+import org.springframework.boot.developertools.classpath.ClassPathFileSystemWatcher;
+import org.springframework.boot.developertools.classpath.ClassPathRestartStrategy;
+import org.springframework.boot.developertools.classpath.PatternClassPathRestartStrategy;
+import org.springframework.boot.developertools.restart.DefaultRestartInitializer;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;
@@ -37,6 +49,8 @@ import org.springframework.http.client.SimpleClientHttpRequestFactory;
 @EnableConfigurationProperties(DeveloperToolsProperties.class)
 public class RemoteClientConfiguration {
 
+	private static final Log logger = LogFactory.getLog(RemoteClientConfiguration.class);
+
 	@Autowired
 	private DeveloperToolsProperties properties;
 
@@ -53,4 +67,50 @@ public class RemoteClientConfiguration {
 		return new SimpleClientHttpRequestFactory();
 	}
 
+	@PostConstruct
+	private void logWarnings() {
+		RemoteDeveloperToolsProperties remoteProperties = this.properties.getRemote();
+		if (!remoteProperties.getRestart().isEnabled()) {
+			logger.warn();
+		}
+	}
+
+	
+	@ConditionalOnProperty(prefix = , name = , matchIfMissing = true)
+	static class RemoteRestartClientConfiguration {
+
+		@Autowired
+		private DeveloperToolsProperties properties;
+
+		@Value()
+		private String remoteUrl;
+
+		@Bean
+		public ClassPathFileSystemWatcher classPathFileSystemWatcher() {
+			DefaultRestartInitializer restartInitializer = new DefaultRestartInitializer();
+			URL[] urls = restartInitializer.getInitialUrls(Thread.currentThread());
+			if (urls == null) {
+				urls = new URL[0];
+			}
+			return new ClassPathFileSystemWatcher(classPathRestartStrategy(), urls);
+		}
+
+		@Bean
+		public ClassPathRestartStrategy classPathRestartStrategy() {
+			return new PatternClassPathRestartStrategy(this.properties.getRestart()
+					.getExclude());
+		}
+
+		@Bean
+		public ClassPathChangeUploader classPathChangeUploader(
+				ClientHttpRequestFactory requestFactory) {
+			String url = this.remoteUrl + this.properties.getRemote().getContextPath()
+					+ ;
+			return new ClassPathChangeUploader(url, requestFactory);
+		}
+
+	}
+
 }

