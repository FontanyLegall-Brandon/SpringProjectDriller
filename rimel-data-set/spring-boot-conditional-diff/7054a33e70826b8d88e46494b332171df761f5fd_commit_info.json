{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/servlet/OAuth2ResourceServerJwtConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/servlet/OAuth2ResourceServerJwtConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -15,20 +15,29 @@\n  */\n package org.springframework.boot.autoconfigure.security.oauth2.resource.servlet;\n \n+import java.io.InputStreamReader;\n+import java.security.KeyFactory;\n+import java.security.interfaces.RSAPublicKey;\n+import java.security.spec.X509EncodedKeySpec;\n+import java.util.Base64;\n+\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.autoconfigure.security.oauth2.resource.IssuerUriCondition;\n+import org.springframework.boot.autoconfigure.security.oauth2.resource.KeyValueCondition;\n import org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ResourceServerProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.security.oauth2.jwt.JwtDecoder;\n import org.springframework.security.oauth2.jwt.JwtDecoders;\n-import org.springframework.security.oauth2.jwt.NimbusJwtDecoderJwkSupport;\n+import org.springframework.security.oauth2.jwt.NimbusJwtDecoder;\n+import org.springframework.util.FileCopyUtils;\n+import org.springframework.util.ResourceUtils;\n \n /**\n- * Configures a {@link JwtDecoder} when a JWK Set URI or OpenID Connect Issuer URI is\n- * available.\n+ * Configures a {@link JwtDecoder} when a JWK Set URI, OpenID Connect Issuer URI or Public\n+ * Key configuration is available.\n  *\n  * @author Madhura Bhave\n  * @author Artsiom Yudovin\n@@ -46,8 +55,25 @@ class OAuth2ResourceServerJwtConfiguration {\n \t@ConditionalOnProperty(name = "spring.security.oauth2.resourceserver.jwt.jwk-set-uri")\n \t@ConditionalOnMissingBean\n \tpublic JwtDecoder jwtDecoderByJwkKeySetUri() {\n-\t\treturn new NimbusJwtDecoderJwkSupport(this.properties.getJwkSetUri(),\n-\t\t\t\tthis.properties.getJwsAlgorithm());\n+\t\treturn NimbusJwtDecoder.withJwkSetUri(this.properties.getJwkSetUri())\n+\t\t\t\t.jwsAlgorithm(this.properties.getJwsAlgorithm()).build();\n+\t}\n+\n+\t@Bean\n+\t@Conditional(KeyValueCondition.class)\n+\t@ConditionalOnMissingBean\n+\tpublic JwtDecoder jwtDecoderByPublicKeyValue() throws Exception {\n+\t\tString keyValue = FileCopyUtils.copyToString(new InputStreamReader(ResourceUtils\n+\t\t\t\t.getURL(this.properties.getPublicKeyLocation()).openStream()));\n+\t\tRSAPublicKey publicKey = (RSAPublicKey) KeyFactory.getInstance("RSA")\n+\t\t\t\t.generatePublic(new X509EncodedKeySpec(getKeySpec(keyValue)));\n+\t\treturn NimbusJwtDecoder.withPublicKey(publicKey).build();\n+\t}\n+\n+\tprivate byte[] getKeySpec(String keyValue) {\n+\t\tkeyValue = keyValue.replace("-----BEGIN PUBLIC KEY-----", "")\n+\t\t\t\t.replace("-----END PUBLIC KEY-----", "").replace("\\n", "");\n+\t\treturn Base64.getDecoder().decode(keyValue);\n \t}\n \n \t@Bean\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.boot.autoconfigure.security.oauth2.resource.servlet;\n\nimport java.io.InputStreamReader;\nimport java.security.KeyFactory;\nimport java.security.interfaces.RSAPublicKey;\nimport java.security.spec.X509EncodedKeySpec;\nimport java.util.Base64;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.security.oauth2.resource.IssuerUriCondition;\nimport org.springframework.boot.autoconfigure.security.oauth2.resource.KeyValueCondition;\nimport org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ResourceServerProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.oauth2.jwt.JwtDecoder;\nimport org.springframework.security.oauth2.jwt.JwtDecoders;\nimport org.springframework.security.oauth2.jwt.NimbusJwtDecoder;\nimport org.springframework.util.FileCopyUtils;\nimport org.springframework.util.ResourceUtils;\n\n/**\n * Configures a {@link JwtDecoder} when a JWK Set URI, OpenID Connect Issuer URI or Public\n * Key configuration is available.\n *\n * @author Madhura Bhave\n * @author Artsiom Yudovin\n */\n@Configuration(proxyBeanMethods = false)\nclass OAuth2ResourceServerJwtConfiguration {\n\n\tprivate final OAuth2ResourceServerProperties.Jwt properties;\n\n\tOAuth2ResourceServerJwtConfiguration(OAuth2ResourceServerProperties properties) {\n\t\tthis.properties = properties.getJwt();\n\t}\n\n\t@Bean\n\t@ConditionalOnProperty(name = "spring.security.oauth2.resourceserver.jwt.jwk-set-uri")\n\t@ConditionalOnMissingBean\n\tpublic JwtDecoder jwtDecoderByJwkKeySetUri() {\n\t\treturn NimbusJwtDecoder.withJwkSetUri(this.properties.getJwkSetUri())\n\t\t\t\t.jwsAlgorithm(this.properties.getJwsAlgorithm()).build();\n\t}\n\n\t@Bean\n\t@Conditional(KeyValueCondition.class)\n\t@ConditionalOnMissingBean\n\tpublic JwtDecoder jwtDecoderByPublicKeyValue() throws Exception {\n\t\tString keyValue = FileCopyUtils.copyToString(new InputStreamReader(ResourceUtils\n\t\t\t\t.getURL(this.properties.getPublicKeyLocation()).openStream()));\n\t\tRSAPublicKey publicKey = (RSAPublicKey) KeyFactory.getInstance("RSA")\n\t\t\t\t.generatePublic(new X509EncodedKeySpec(getKeySpec(keyValue)));\n\t\treturn NimbusJwtDecoder.withPublicKey(publicKey).build();\n\t}\n\n\tprivate byte[] getKeySpec(String keyValue) {\n\t\tkeyValue = keyValue.replace("-----BEGIN PUBLIC KEY-----", "")\n\t\t\t\t.replace("-----END PUBLIC KEY-----", "").replace("\\n", "");\n\t\treturn Base64.getDecoder().decode(keyValue);\n\t}\n\n\t@Bean\n\t@Conditional(IssuerUriCondition.class)\n\t@ConditionalOnMissingBean\n\tpublic JwtDecoder jwtDecoderByIssuerUri() {\n\t\treturn JwtDecoders.fromOidcIssuerLocation(this.properties.getIssuerUri());\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.boot.autoconfigure.security.oauth2.resource.servlet;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.security.oauth2.resource.IssuerUriCondition;\nimport org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ResourceServerProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.oauth2.jwt.JwtDecoder;\nimport org.springframework.security.oauth2.jwt.JwtDecoders;\nimport org.springframework.security.oauth2.jwt.NimbusJwtDecoderJwkSupport;\n\n/**\n * Configures a {@link JwtDecoder} when a JWK Set URI or OpenID Connect Issuer URI is\n * available.\n *\n * @author Madhura Bhave\n * @author Artsiom Yudovin\n */\n@Configuration(proxyBeanMethods = false)\nclass OAuth2ResourceServerJwtConfiguration {\n\n\tprivate final OAuth2ResourceServerProperties.Jwt properties;\n\n\tOAuth2ResourceServerJwtConfiguration(OAuth2ResourceServerProperties properties) {\n\t\tthis.properties = properties.getJwt();\n\t}\n\n\t@Bean\n\t@ConditionalOnProperty(name = "spring.security.oauth2.resourceserver.jwt.jwk-set-uri")\n\t@ConditionalOnMissingBean\n\tpublic JwtDecoder jwtDecoderByJwkKeySetUri() {\n\t\treturn new NimbusJwtDecoderJwkSupport(this.properties.getJwkSetUri(),\n\t\t\t\tthis.properties.getJwsAlgorithm());\n\t}\n\n\t@Bean\n\t@Conditional(IssuerUriCondition.class)\n\t@ConditionalOnMissingBean\n\tpublic JwtDecoder jwtDecoderByIssuerUri() {\n\t\treturn JwtDecoders.fromOidcIssuerLocation(this.properties.getIssuerUri());\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
