{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/velocity/VelocityAutoConfiguration.java'), '_new_path': None, 'change_type': <ModificationType.DELETE: 4>, 'diff': '@@ -1,165 +0,0 @@\n-/*\n- * Copyright 2012-2016 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the "License");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an "AS IS" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.boot.autoconfigure.velocity;\n-\n-import java.io.IOException;\n-import java.util.Properties;\n-\n-import javax.annotation.PostConstruct;\n-import javax.servlet.Servlet;\n-\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n-import org.apache.velocity.app.VelocityEngine;\n-import org.apache.velocity.exception.VelocityException;\n-\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n-import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnNotWebApplication;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n-import org.springframework.boot.autoconfigure.template.TemplateLocation;\n-import org.springframework.boot.autoconfigure.web.ConditionalOnEnabledResourceChain;\n-import org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\n-import org.springframework.boot.context.properties.EnableConfigurationProperties;\n-import org.springframework.boot.web.servlet.view.velocity.EmbeddedVelocityViewResolver;\n-import org.springframework.context.ApplicationContext;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.ui.velocity.VelocityEngineFactory;\n-import org.springframework.ui.velocity.VelocityEngineFactoryBean;\n-import org.springframework.web.servlet.resource.ResourceUrlEncodingFilter;\n-import org.springframework.web.servlet.view.velocity.VelocityConfig;\n-import org.springframework.web.servlet.view.velocity.VelocityConfigurer;\n-\n-/**\n- * {@link EnableAutoConfiguration Auto-configuration} for Velocity.\n- *\n- * @author Andy Wilkinson\n- * @author Brian Clozel\n- * @since 1.1.0\n- * @deprecated as of 1.4 following the deprecation of Velocity support in Spring Framework\n- * 4.3\n- */\n-@Configuration\n-@ConditionalOnClass({ VelocityEngine.class, VelocityEngineFactory.class })\n-@AutoConfigureAfter(WebMvcAutoConfiguration.class)\n-@EnableConfigurationProperties(VelocityProperties.class)\n-@Deprecated\n-public class VelocityAutoConfiguration {\n-\n-\tprivate static final Log logger = LogFactory.getLog(VelocityAutoConfiguration.class);\n-\n-\tprivate final ApplicationContext applicationContext;\n-\n-\tprivate final VelocityProperties properties;\n-\n-\tpublic VelocityAutoConfiguration(ApplicationContext applicationContext,\n-\t\t\tVelocityProperties properties) {\n-\t\tthis.applicationContext = applicationContext;\n-\t\tthis.properties = properties;\n-\t}\n-\n-\t@PostConstruct\n-\tpublic void checkTemplateLocationExists() {\n-\t\tif (this.properties.isCheckTemplateLocation()) {\n-\t\t\tTemplateLocation location = new TemplateLocation(\n-\t\t\t\t\tthis.properties.getResourceLoaderPath());\n-\t\t\tif (!location.exists(this.applicationContext)) {\n-\t\t\t\tlogger.warn("Cannot find template location: " + location\n-\t\t\t\t\t\t+ " (please add some templates, check your Velocity "\n-\t\t\t\t\t\t+ "configuration, or set spring.velocity."\n-\t\t\t\t\t\t+ "checkTemplateLocation=false)");\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Deprecated\n-\tprotected static class VelocityConfiguration {\n-\n-\t\t@Autowired\n-\t\tprotected VelocityProperties properties;\n-\n-\t\tprotected void applyProperties(VelocityEngineFactory factory) {\n-\t\t\tfactory.setResourceLoaderPath(this.properties.getResourceLoaderPath());\n-\t\t\tfactory.setPreferFileSystemAccess(this.properties.isPreferFileSystemAccess());\n-\t\t\tProperties velocityProperties = new Properties();\n-\t\t\tvelocityProperties.setProperty("input.encoding",\n-\t\t\t\t\tthis.properties.getCharsetName());\n-\t\t\tvelocityProperties.putAll(this.properties.getProperties());\n-\t\t\tfactory.setVelocityProperties(velocityProperties);\n-\t\t}\n-\n-\t}\n-\n-\t@Configuration\n-\t@ConditionalOnNotWebApplication\n-\t@Deprecated\n-\tpublic static class VelocityNonWebConfiguration extends VelocityConfiguration {\n-\n-\t\t@Bean\n-\t\t@ConditionalOnMissingBean\n-\t\tpublic VelocityEngineFactoryBean velocityConfiguration() {\n-\t\t\tVelocityEngineFactoryBean velocityEngineFactoryBean = new VelocityEngineFactoryBean();\n-\t\t\tapplyProperties(velocityEngineFactoryBean);\n-\t\t\treturn velocityEngineFactoryBean;\n-\t\t}\n-\n-\t}\n-\n-\t@Configuration\n-\t@ConditionalOnClass(Servlet.class)\n-\t@ConditionalOnWebApplication\n-\t@Deprecated\n-\tpublic static class VelocityWebConfiguration extends VelocityConfiguration {\n-\n-\t\t@Bean\n-\t\t@ConditionalOnMissingBean(VelocityConfig.class)\n-\t\tpublic VelocityConfigurer velocityConfigurer() {\n-\t\t\tVelocityConfigurer configurer = new VelocityConfigurer();\n-\t\t\tapplyProperties(configurer);\n-\t\t\treturn configurer;\n-\t\t}\n-\n-\t\t@Bean\n-\t\tpublic VelocityEngine velocityEngine(VelocityConfigurer configurer)\n-\t\t\t\tthrows VelocityException, IOException {\n-\t\t\treturn configurer.getVelocityEngine();\n-\t\t}\n-\n-\t\t@Bean\n-\t\t@ConditionalOnMissingBean(name = "velocityViewResolver")\n-\t\t@ConditionalOnProperty(name = "spring.velocity.enabled", matchIfMissing = true)\n-\t\tpublic EmbeddedVelocityViewResolver velocityViewResolver() {\n-\t\t\tEmbeddedVelocityViewResolver resolver = new EmbeddedVelocityViewResolver();\n-\t\t\tthis.properties.applyToViewResolver(resolver);\n-\t\t\treturn resolver;\n-\t\t}\n-\n-\t\t@Bean\n-\t\t@ConditionalOnMissingBean\n-\t\t@ConditionalOnEnabledResourceChain\n-\t\tpublic ResourceUrlEncodingFilter resourceUrlEncodingFilter() {\n-\t\t\treturn new ResourceUrlEncodingFilter();\n-\t\t}\n-\n-\t}\n-\n-}\n', 'source_code': None, 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.velocity;\n\nimport java.io.IOException;\nimport java.util.Properties;\n\nimport javax.annotation.PostConstruct;\nimport javax.servlet.Servlet;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.velocity.app.VelocityEngine;\nimport org.apache.velocity.exception.VelocityException;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnNotWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.template.TemplateLocation;\nimport org.springframework.boot.autoconfigure.web.ConditionalOnEnabledResourceChain;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.web.servlet.view.velocity.EmbeddedVelocityViewResolver;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.ui.velocity.VelocityEngineFactory;\nimport org.springframework.ui.velocity.VelocityEngineFactoryBean;\nimport org.springframework.web.servlet.resource.ResourceUrlEncodingFilter;\nimport org.springframework.web.servlet.view.velocity.VelocityConfig;\nimport org.springframework.web.servlet.view.velocity.VelocityConfigurer;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Velocity.\n *\n * @author Andy Wilkinson\n * @author Brian Clozel\n * @since 1.1.0\n * @deprecated as of 1.4 following the deprecation of Velocity support in Spring Framework\n * 4.3\n */\n@Configuration\n@ConditionalOnClass({ VelocityEngine.class, VelocityEngineFactory.class })\n@AutoConfigureAfter(WebMvcAutoConfiguration.class)\n@EnableConfigurationProperties(VelocityProperties.class)\n@Deprecated\npublic class VelocityAutoConfiguration {\n\n\tprivate static final Log logger = LogFactory.getLog(VelocityAutoConfiguration.class);\n\n\tprivate final ApplicationContext applicationContext;\n\n\tprivate final VelocityProperties properties;\n\n\tpublic VelocityAutoConfiguration(ApplicationContext applicationContext,\n\t\t\tVelocityProperties properties) {\n\t\tthis.applicationContext = applicationContext;\n\t\tthis.properties = properties;\n\t}\n\n\t@PostConstruct\n\tpublic void checkTemplateLocationExists() {\n\t\tif (this.properties.isCheckTemplateLocation()) {\n\t\t\tTemplateLocation location = new TemplateLocation(\n\t\t\t\t\tthis.properties.getResourceLoaderPath());\n\t\t\tif (!location.exists(this.applicationContext)) {\n\t\t\t\tlogger.warn("Cannot find template location: " + location\n\t\t\t\t\t\t+ " (please add some templates, check your Velocity "\n\t\t\t\t\t\t+ "configuration, or set spring.velocity."\n\t\t\t\t\t\t+ "checkTemplateLocation=false)");\n\t\t\t}\n\t\t}\n\t}\n\n\t@Deprecated\n\tprotected static class VelocityConfiguration {\n\n\t\t@Autowired\n\t\tprotected VelocityProperties properties;\n\n\t\tprotected void applyProperties(VelocityEngineFactory factory) {\n\t\t\tfactory.setResourceLoaderPath(this.properties.getResourceLoaderPath());\n\t\t\tfactory.setPreferFileSystemAccess(this.properties.isPreferFileSystemAccess());\n\t\t\tProperties velocityProperties = new Properties();\n\t\t\tvelocityProperties.setProperty("input.encoding",\n\t\t\t\t\tthis.properties.getCharsetName());\n\t\t\tvelocityProperties.putAll(this.properties.getProperties());\n\t\t\tfactory.setVelocityProperties(velocityProperties);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnNotWebApplication\n\t@Deprecated\n\tpublic static class VelocityNonWebConfiguration extends VelocityConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic VelocityEngineFactoryBean velocityConfiguration() {\n\t\t\tVelocityEngineFactoryBean velocityEngineFactoryBean = new VelocityEngineFactoryBean();\n\t\t\tapplyProperties(velocityEngineFactoryBean);\n\t\t\treturn velocityEngineFactoryBean;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(Servlet.class)\n\t@ConditionalOnWebApplication\n\t@Deprecated\n\tpublic static class VelocityWebConfiguration extends VelocityConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(VelocityConfig.class)\n\t\tpublic VelocityConfigurer velocityConfigurer() {\n\t\t\tVelocityConfigurer configurer = new VelocityConfigurer();\n\t\t\tapplyProperties(configurer);\n\t\t\treturn configurer;\n\t\t}\n\n\t\t@Bean\n\t\tpublic VelocityEngine velocityEngine(VelocityConfigurer configurer)\n\t\t\t\tthrows VelocityException, IOException {\n\t\t\treturn configurer.getVelocityEngine();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "velocityViewResolver")\n\t\t@ConditionalOnProperty(name = "spring.velocity.enabled", matchIfMissing = true)\n\t\tpublic EmbeddedVelocityViewResolver velocityViewResolver() {\n\t\t\tEmbeddedVelocityViewResolver resolver = new EmbeddedVelocityViewResolver();\n\t\t\tthis.properties.applyToViewResolver(resolver);\n\t\t\treturn resolver;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnEnabledResourceChain\n\t\tpublic ResourceUrlEncodingFilter resourceUrlEncodingFilter() {\n\t\t\treturn new ResourceUrlEncodingFilter();\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
