{'_old_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnPropertyTests.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnPropertyTests.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2016 the original author or authors.\n+ * Copyright 2012-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -26,10 +26,14 @@ import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.ExpectedException;\n \n+import org.springframework.boot.WebApplicationType;\n+import org.springframework.boot.builder.SpringApplicationBuilder;\n import org.springframework.boot.test.util.EnvironmentTestUtils;\n-import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.core.env.StandardEnvironment;\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.hamcrest.Matchers.containsString;\n@@ -48,7 +52,9 @@ public class ConditionalOnPropertyTests {\n \t@Rule\n \tpublic ExpectedException thrown = ExpectedException.none();\n \n-\tprivate AnnotationConfigApplicationContext context;\n+\tprivate ConfigurableApplicationContext context;\n+\n+\tprivate ConfigurableEnvironment environment = new StandardEnvironment();\n \n \t@After\n \tpublic void tearDown() {\n@@ -98,13 +104,6 @@ public class ConditionalOnPropertyTests {\n \t\tassertThat(this.context.containsBean("foo")).isTrue();\n \t}\n \n-\t@Test\n-\tpublic void nonRelaxedName() throws Exception {\n-\t\tload(NonRelaxedPropertiesRequiredConfiguration.class,\n-\t\t\t\t"theRelaxedProperty=value1");\n-\t\tassertThat(this.context.containsBean("foo")).isFalse();\n-\t}\n-\n \t@Test\n \t// Enabled by default\n \tpublic void enabledIfNotConfiguredOtherwise() {\n@@ -185,18 +184,6 @@ public class ConditionalOnPropertyTests {\n \t\tassertThat(this.context.containsBean("foo")).isTrue();\n \t}\n \n-\t@Test\n-\tpublic void strictNameMatch() {\n-\t\tload(StrictNameConfig.class, "simple.my-property:bar");\n-\t\tassertThat(this.context.containsBean("foo")).isTrue();\n-\t}\n-\n-\t@Test\n-\tpublic void strictNameNoMatch() {\n-\t\tload(StrictNameConfig.class, "simple.myProperty:bar");\n-\t\tassertThat(this.context.containsBean("foo")).isFalse();\n-\t}\n-\n \t@Test\n \tpublic void multiValuesAllSet() {\n \t\tload(MultiValuesConfig.class, "simple.my-property:bar",\n@@ -271,10 +258,9 @@ public class ConditionalOnPropertyTests {\n \t}\n \n \tprivate void load(Class<?> config, String... environment) {\n-\t\tthis.context = new AnnotationConfigApplicationContext();\n-\t\tEnvironmentTestUtils.addEnvironment(this.context, environment);\n-\t\tthis.context.register(config);\n-\t\tthis.context.refresh();\n+\t\tEnvironmentTestUtils.addEnvironment(this.environment, environment);\n+\t\tthis.context = new SpringApplicationBuilder(config).environment(this.environment)\n+\t\t\t\t.web(WebApplicationType.NONE).run();\n \t}\n \n \t@Configuration\n@@ -310,17 +296,6 @@ public class ConditionalOnPropertyTests {\n \n \t}\n \n-\t@Configuration\n-\t@ConditionalOnProperty(name = "the-relaxed-property", relaxedNames = false)\n-\tprotected static class NonRelaxedPropertiesRequiredConfiguration {\n-\n-\t\t@Bean\n-\t\tpublic String foo() {\n-\t\t\treturn "foo";\n-\t\t}\n-\n-\t}\n-\n \t@Configuration\n \t// i.e ${simple.myProperty:true}\n \t@ConditionalOnProperty(prefix = "simple", name = "my-property", havingValue = "true", matchIfMissing = true)\n@@ -378,17 +353,6 @@ public class ConditionalOnPropertyTests {\n \n \t}\n \n-\t@Configuration\n-\t@ConditionalOnProperty(prefix = "simple", name = "my-property", havingValue = "bar", relaxedNames = false)\n-\tstatic class StrictNameConfig {\n-\n-\t\t@Bean\n-\t\tpublic String foo() {\n-\t\t\treturn "foo";\n-\t\t}\n-\n-\t}\n-\n \t@Configuration\n \t@ConditionalOnProperty(prefix = "simple", name = { "my-property",\n \t\t\t"my-another-property" }, havingValue = "bar")\n@@ -434,6 +398,7 @@ public class ConditionalOnPropertyTests {\n \n \t}\n \n+\t@Configuration\n \t@ConditionalOnMyFeature\n \tprotected static class MetaAnnotation {\n \n@@ -444,6 +409,7 @@ public class ConditionalOnPropertyTests {\n \n \t}\n \n+\t@Configuration\n \t@ConditionalOnMyFeature\n \t@ConditionalOnProperty(prefix = "my.other.feature", name = "enabled", havingValue = "true", matchIfMissing = false)\n \tprotected static class MetaAnnotationAndDirectAnnotation {\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\nimport org.junit.After;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExpectedException;\n\nimport org.springframework.boot.WebApplicationType;\nimport org.springframework.boot.builder.SpringApplicationBuilder;\nimport org.springframework.boot.test.util.EnvironmentTestUtils;\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.ConfigurableEnvironment;\nimport org.springframework.core.env.StandardEnvironment;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.hamcrest.Matchers.containsString;\nimport static org.junit.internal.matchers.ThrowableMessageMatcher.hasMessage;\n\n/**\n * Tests for {@link ConditionalOnProperty}.\n *\n * @author Maciej Walkowiak\n * @author Stephane Nicoll\n * @author Phillip Webb\n * @author Andy Wilkinson\n */\npublic class ConditionalOnPropertyTests {\n\n\t@Rule\n\tpublic ExpectedException thrown = ExpectedException.none();\n\n\tprivate ConfigurableApplicationContext context;\n\n\tprivate ConfigurableEnvironment environment = new StandardEnvironment();\n\n\t@After\n\tpublic void tearDown() {\n\t\tif (this.context != null) {\n\t\t\tthis.context.close();\n\t\t}\n\t}\n\n\t@Test\n\tpublic void allPropertiesAreDefined() {\n\t\tload(MultiplePropertiesRequiredConfiguration.class, "property1=value1",\n\t\t\t\t"property2=value2");\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t}\n\n\t@Test\n\tpublic void notAllPropertiesAreDefined() {\n\t\tload(MultiplePropertiesRequiredConfiguration.class, "property1=value1");\n\t\tassertThat(this.context.containsBean("foo")).isFalse();\n\t}\n\n\t@Test\n\tpublic void propertyValueEqualsFalse() {\n\t\tload(MultiplePropertiesRequiredConfiguration.class, "property1=false",\n\t\t\t\t"property2=value2");\n\t\tassertThat(this.context.containsBean("foo")).isFalse();\n\t}\n\n\t@Test\n\tpublic void propertyValueEqualsFALSE() {\n\t\tload(MultiplePropertiesRequiredConfiguration.class, "property1=FALSE",\n\t\t\t\t"property2=value2");\n\t\tassertThat(this.context.containsBean("foo")).isFalse();\n\t}\n\n\t@Test\n\tpublic void relaxedName() {\n\t\tload(RelaxedPropertiesRequiredConfiguration.class,\n\t\t\t\t"spring.theRelaxedProperty=value1");\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t}\n\n\t@Test\n\tpublic void prefixWithoutPeriod() throws Exception {\n\t\tload(RelaxedPropertiesRequiredConfigurationWithShortPrefix.class,\n\t\t\t\t"spring.property=value1");\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t}\n\n\t@Test\n\t// Enabled by default\n\tpublic void enabledIfNotConfiguredOtherwise() {\n\t\tload(EnabledIfNotConfiguredOtherwiseConfig.class);\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t}\n\n\t@Test\n\tpublic void enabledIfNotConfiguredOtherwiseWithConfig() {\n\t\tload(EnabledIfNotConfiguredOtherwiseConfig.class, "simple.myProperty:false");\n\t\tassertThat(this.context.containsBean("foo")).isFalse();\n\t}\n\n\t@Test\n\tpublic void enabledIfNotConfiguredOtherwiseWithConfigDifferentCase() {\n\t\tload(EnabledIfNotConfiguredOtherwiseConfig.class, "simple.my-property:FALSE");\n\t\tassertThat(this.context.containsBean("foo")).isFalse();\n\t}\n\n\t@Test\n\t// Disabled by default\n\tpublic void disableIfNotConfiguredOtherwise() {\n\t\tload(DisabledIfNotConfiguredOtherwiseConfig.class);\n\t\tassertThat(this.context.containsBean("foo")).isFalse();\n\t}\n\n\t@Test\n\tpublic void disableIfNotConfiguredOtherwiseWithConfig() {\n\t\tload(DisabledIfNotConfiguredOtherwiseConfig.class, "simple.myProperty:true");\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t}\n\n\t@Test\n\tpublic void disableIfNotConfiguredOtherwiseWithConfigDifferentCase() {\n\t\tload(DisabledIfNotConfiguredOtherwiseConfig.class, "simple.myproperty:TrUe");\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t}\n\n\t@Test\n\tpublic void simpleValueIsSet() {\n\t\tload(SimpleValueConfig.class, "simple.myProperty:bar");\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t}\n\n\t@Test\n\tpublic void caseInsensitive() {\n\t\tload(SimpleValueConfig.class, "simple.myProperty:BaR");\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t}\n\n\t@Test\n\tpublic void defaultValueIsSet() {\n\t\tload(DefaultValueConfig.class, "simple.myProperty:bar");\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t}\n\n\t@Test\n\tpublic void defaultValueIsNotSet() {\n\t\tload(DefaultValueConfig.class);\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t}\n\n\t@Test\n\tpublic void defaultValueIsSetDifferentValue() {\n\t\tload(DefaultValueConfig.class, "simple.myProperty:another");\n\t\tassertThat(this.context.containsBean("foo")).isFalse();\n\t}\n\n\t@Test\n\tpublic void prefix() {\n\t\tload(PrefixValueConfig.class, "simple.myProperty:bar");\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t}\n\n\t@Test\n\tpublic void relaxedEnabledByDefault() {\n\t\tload(PrefixValueConfig.class, "simple.myProperty:bar");\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t}\n\n\t@Test\n\tpublic void multiValuesAllSet() {\n\t\tload(MultiValuesConfig.class, "simple.my-property:bar",\n\t\t\t\t"simple.my-another-property:bar");\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t}\n\n\t@Test\n\tpublic void multiValuesOnlyOneSet() {\n\t\tload(MultiValuesConfig.class, "simple.my-property:bar");\n\t\tassertThat(this.context.containsBean("foo")).isFalse();\n\t}\n\n\t@Test\n\tpublic void usingValueAttribute() throws Exception {\n\t\tload(ValueAttribute.class, "some.property");\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t}\n\n\t@Test\n\tpublic void nameOrValueMustBeSpecified() throws Exception {\n\t\tthis.thrown.expect(IllegalStateException.class);\n\t\tthis.thrown.expectCause(hasMessage(containsString("The name or "\n\t\t\t\t+ "value attribute of @ConditionalOnProperty must be specified")));\n\t\tload(NoNameOrValueAttribute.class, "some.property");\n\t}\n\n\t@Test\n\tpublic void nameAndValueMustNotBeSpecified() throws Exception {\n\t\tthis.thrown.expect(IllegalStateException.class);\n\t\tthis.thrown.expectCause(hasMessage(containsString("The name and "\n\t\t\t\t+ "value attributes of @ConditionalOnProperty are exclusive")));\n\t\tload(NameAndValueAttribute.class, "some.property");\n\t}\n\n\t@Test\n\tpublic void metaAnnotationConditionMatchesWhenPropertyIsSet() throws Exception {\n\t\tload(MetaAnnotation.class, "my.feature.enabled=true");\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t}\n\n\t@Test\n\tpublic void metaAnnotationConditionDoesNotMatchWhenPropertyIsNotSet()\n\t\t\tthrows Exception {\n\t\tload(MetaAnnotation.class);\n\t\tassertThat(this.context.containsBean("foo")).isFalse();\n\t}\n\n\t@Test\n\tpublic void metaAndDirectAnnotationConditionDoesNotMatchWhenOnlyDirectPropertyIsSet() {\n\t\tload(MetaAnnotationAndDirectAnnotation.class, "my.other.feature.enabled=true");\n\t\tassertThat(this.context.containsBean("foo")).isFalse();\n\t}\n\n\t@Test\n\tpublic void metaAndDirectAnnotationConditionDoesNotMatchWhenOnlyMetaPropertyIsSet() {\n\t\tload(MetaAnnotationAndDirectAnnotation.class, "my.feature.enabled=true");\n\t\tassertThat(this.context.containsBean("foo")).isFalse();\n\t}\n\n\t@Test\n\tpublic void metaAndDirectAnnotationConditionDoesNotMatchWhenNeitherPropertyIsSet() {\n\t\tload(MetaAnnotationAndDirectAnnotation.class);\n\t\tassertThat(this.context.containsBean("foo")).isFalse();\n\t}\n\n\t@Test\n\tpublic void metaAndDirectAnnotationConditionMatchesWhenBothPropertiesAreSet() {\n\t\tload(MetaAnnotationAndDirectAnnotation.class, "my.feature.enabled=true",\n\t\t\t\t"my.other.feature.enabled=true");\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t}\n\n\tprivate void load(Class<?> config, String... environment) {\n\t\tEnvironmentTestUtils.addEnvironment(this.environment, environment);\n\t\tthis.context = new SpringApplicationBuilder(config).environment(this.environment)\n\t\t\t\t.web(WebApplicationType.NONE).run();\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(name = { "property1", "property2" })\n\tprotected static class MultiplePropertiesRequiredConfiguration {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "spring.", name = "the-relaxed-property")\n\tprotected static class RelaxedPropertiesRequiredConfiguration {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "spring", name = "property")\n\tprotected static class RelaxedPropertiesRequiredConfigurationWithShortPrefix {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t// i.e ${simple.myProperty:true}\n\t@ConditionalOnProperty(prefix = "simple", name = "my-property", havingValue = "true", matchIfMissing = true)\n\tstatic class EnabledIfNotConfiguredOtherwiseConfig {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t// i.e ${simple.myProperty:false}\n\t@ConditionalOnProperty(prefix = "simple", name = "my-property", havingValue = "true", matchIfMissing = false)\n\tstatic class DisabledIfNotConfiguredOtherwiseConfig {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "simple", name = "my-property", havingValue = "bar")\n\tstatic class SimpleValueConfig {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(name = "simple.myProperty", havingValue = "bar", matchIfMissing = true)\n\tstatic class DefaultValueConfig {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "simple", name = "my-property", havingValue = "bar")\n\tstatic class PrefixValueConfig {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "simple", name = { "my-property",\n\t\t\t"my-another-property" }, havingValue = "bar")\n\tstatic class MultiValuesConfig {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty("some.property")\n\tprotected static class ValueAttribute {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty\n\tprotected static class NoNameOrValueAttribute {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(value = "x", name = "y")\n\tprotected static class NameAndValueAttribute {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMyFeature\n\tprotected static class MetaAnnotation {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMyFeature\n\t@ConditionalOnProperty(prefix = "my.other.feature", name = "enabled", havingValue = "true", matchIfMissing = false)\n\tprotected static class MetaAnnotationAndDirectAnnotation {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Target({ ElementType.TYPE, ElementType.METHOD })\n\t@ConditionalOnProperty(prefix = "my.feature", name = "enabled", havingValue = "true", matchIfMissing = false)\n\tpublic @interface ConditionalOnMyFeature {\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\nimport org.junit.After;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExpectedException;\n\nimport org.springframework.boot.test.util.EnvironmentTestUtils;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.hamcrest.Matchers.containsString;\nimport static org.junit.internal.matchers.ThrowableMessageMatcher.hasMessage;\n\n/**\n * Tests for {@link ConditionalOnProperty}.\n *\n * @author Maciej Walkowiak\n * @author Stephane Nicoll\n * @author Phillip Webb\n * @author Andy Wilkinson\n */\npublic class ConditionalOnPropertyTests {\n\n\t@Rule\n\tpublic ExpectedException thrown = ExpectedException.none();\n\n\tprivate AnnotationConfigApplicationContext context;\n\n\t@After\n\tpublic void tearDown() {\n\t\tif (this.context != null) {\n\t\t\tthis.context.close();\n\t\t}\n\t}\n\n\t@Test\n\tpublic void allPropertiesAreDefined() {\n\t\tload(MultiplePropertiesRequiredConfiguration.class, "property1=value1",\n\t\t\t\t"property2=value2");\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t}\n\n\t@Test\n\tpublic void notAllPropertiesAreDefined() {\n\t\tload(MultiplePropertiesRequiredConfiguration.class, "property1=value1");\n\t\tassertThat(this.context.containsBean("foo")).isFalse();\n\t}\n\n\t@Test\n\tpublic void propertyValueEqualsFalse() {\n\t\tload(MultiplePropertiesRequiredConfiguration.class, "property1=false",\n\t\t\t\t"property2=value2");\n\t\tassertThat(this.context.containsBean("foo")).isFalse();\n\t}\n\n\t@Test\n\tpublic void propertyValueEqualsFALSE() {\n\t\tload(MultiplePropertiesRequiredConfiguration.class, "property1=FALSE",\n\t\t\t\t"property2=value2");\n\t\tassertThat(this.context.containsBean("foo")).isFalse();\n\t}\n\n\t@Test\n\tpublic void relaxedName() {\n\t\tload(RelaxedPropertiesRequiredConfiguration.class,\n\t\t\t\t"spring.theRelaxedProperty=value1");\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t}\n\n\t@Test\n\tpublic void prefixWithoutPeriod() throws Exception {\n\t\tload(RelaxedPropertiesRequiredConfigurationWithShortPrefix.class,\n\t\t\t\t"spring.property=value1");\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t}\n\n\t@Test\n\tpublic void nonRelaxedName() throws Exception {\n\t\tload(NonRelaxedPropertiesRequiredConfiguration.class,\n\t\t\t\t"theRelaxedProperty=value1");\n\t\tassertThat(this.context.containsBean("foo")).isFalse();\n\t}\n\n\t@Test\n\t// Enabled by default\n\tpublic void enabledIfNotConfiguredOtherwise() {\n\t\tload(EnabledIfNotConfiguredOtherwiseConfig.class);\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t}\n\n\t@Test\n\tpublic void enabledIfNotConfiguredOtherwiseWithConfig() {\n\t\tload(EnabledIfNotConfiguredOtherwiseConfig.class, "simple.myProperty:false");\n\t\tassertThat(this.context.containsBean("foo")).isFalse();\n\t}\n\n\t@Test\n\tpublic void enabledIfNotConfiguredOtherwiseWithConfigDifferentCase() {\n\t\tload(EnabledIfNotConfiguredOtherwiseConfig.class, "simple.my-property:FALSE");\n\t\tassertThat(this.context.containsBean("foo")).isFalse();\n\t}\n\n\t@Test\n\t// Disabled by default\n\tpublic void disableIfNotConfiguredOtherwise() {\n\t\tload(DisabledIfNotConfiguredOtherwiseConfig.class);\n\t\tassertThat(this.context.containsBean("foo")).isFalse();\n\t}\n\n\t@Test\n\tpublic void disableIfNotConfiguredOtherwiseWithConfig() {\n\t\tload(DisabledIfNotConfiguredOtherwiseConfig.class, "simple.myProperty:true");\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t}\n\n\t@Test\n\tpublic void disableIfNotConfiguredOtherwiseWithConfigDifferentCase() {\n\t\tload(DisabledIfNotConfiguredOtherwiseConfig.class, "simple.myproperty:TrUe");\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t}\n\n\t@Test\n\tpublic void simpleValueIsSet() {\n\t\tload(SimpleValueConfig.class, "simple.myProperty:bar");\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t}\n\n\t@Test\n\tpublic void caseInsensitive() {\n\t\tload(SimpleValueConfig.class, "simple.myProperty:BaR");\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t}\n\n\t@Test\n\tpublic void defaultValueIsSet() {\n\t\tload(DefaultValueConfig.class, "simple.myProperty:bar");\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t}\n\n\t@Test\n\tpublic void defaultValueIsNotSet() {\n\t\tload(DefaultValueConfig.class);\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t}\n\n\t@Test\n\tpublic void defaultValueIsSetDifferentValue() {\n\t\tload(DefaultValueConfig.class, "simple.myProperty:another");\n\t\tassertThat(this.context.containsBean("foo")).isFalse();\n\t}\n\n\t@Test\n\tpublic void prefix() {\n\t\tload(PrefixValueConfig.class, "simple.myProperty:bar");\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t}\n\n\t@Test\n\tpublic void relaxedEnabledByDefault() {\n\t\tload(PrefixValueConfig.class, "simple.myProperty:bar");\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t}\n\n\t@Test\n\tpublic void strictNameMatch() {\n\t\tload(StrictNameConfig.class, "simple.my-property:bar");\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t}\n\n\t@Test\n\tpublic void strictNameNoMatch() {\n\t\tload(StrictNameConfig.class, "simple.myProperty:bar");\n\t\tassertThat(this.context.containsBean("foo")).isFalse();\n\t}\n\n\t@Test\n\tpublic void multiValuesAllSet() {\n\t\tload(MultiValuesConfig.class, "simple.my-property:bar",\n\t\t\t\t"simple.my-another-property:bar");\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t}\n\n\t@Test\n\tpublic void multiValuesOnlyOneSet() {\n\t\tload(MultiValuesConfig.class, "simple.my-property:bar");\n\t\tassertThat(this.context.containsBean("foo")).isFalse();\n\t}\n\n\t@Test\n\tpublic void usingValueAttribute() throws Exception {\n\t\tload(ValueAttribute.class, "some.property");\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t}\n\n\t@Test\n\tpublic void nameOrValueMustBeSpecified() throws Exception {\n\t\tthis.thrown.expect(IllegalStateException.class);\n\t\tthis.thrown.expectCause(hasMessage(containsString("The name or "\n\t\t\t\t+ "value attribute of @ConditionalOnProperty must be specified")));\n\t\tload(NoNameOrValueAttribute.class, "some.property");\n\t}\n\n\t@Test\n\tpublic void nameAndValueMustNotBeSpecified() throws Exception {\n\t\tthis.thrown.expect(IllegalStateException.class);\n\t\tthis.thrown.expectCause(hasMessage(containsString("The name and "\n\t\t\t\t+ "value attributes of @ConditionalOnProperty are exclusive")));\n\t\tload(NameAndValueAttribute.class, "some.property");\n\t}\n\n\t@Test\n\tpublic void metaAnnotationConditionMatchesWhenPropertyIsSet() throws Exception {\n\t\tload(MetaAnnotation.class, "my.feature.enabled=true");\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t}\n\n\t@Test\n\tpublic void metaAnnotationConditionDoesNotMatchWhenPropertyIsNotSet()\n\t\t\tthrows Exception {\n\t\tload(MetaAnnotation.class);\n\t\tassertThat(this.context.containsBean("foo")).isFalse();\n\t}\n\n\t@Test\n\tpublic void metaAndDirectAnnotationConditionDoesNotMatchWhenOnlyDirectPropertyIsSet() {\n\t\tload(MetaAnnotationAndDirectAnnotation.class, "my.other.feature.enabled=true");\n\t\tassertThat(this.context.containsBean("foo")).isFalse();\n\t}\n\n\t@Test\n\tpublic void metaAndDirectAnnotationConditionDoesNotMatchWhenOnlyMetaPropertyIsSet() {\n\t\tload(MetaAnnotationAndDirectAnnotation.class, "my.feature.enabled=true");\n\t\tassertThat(this.context.containsBean("foo")).isFalse();\n\t}\n\n\t@Test\n\tpublic void metaAndDirectAnnotationConditionDoesNotMatchWhenNeitherPropertyIsSet() {\n\t\tload(MetaAnnotationAndDirectAnnotation.class);\n\t\tassertThat(this.context.containsBean("foo")).isFalse();\n\t}\n\n\t@Test\n\tpublic void metaAndDirectAnnotationConditionMatchesWhenBothPropertiesAreSet() {\n\t\tload(MetaAnnotationAndDirectAnnotation.class, "my.feature.enabled=true",\n\t\t\t\t"my.other.feature.enabled=true");\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t}\n\n\tprivate void load(Class<?> config, String... environment) {\n\t\tthis.context = new AnnotationConfigApplicationContext();\n\t\tEnvironmentTestUtils.addEnvironment(this.context, environment);\n\t\tthis.context.register(config);\n\t\tthis.context.refresh();\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(name = { "property1", "property2" })\n\tprotected static class MultiplePropertiesRequiredConfiguration {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "spring.", name = "the-relaxed-property")\n\tprotected static class RelaxedPropertiesRequiredConfiguration {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "spring", name = "property")\n\tprotected static class RelaxedPropertiesRequiredConfigurationWithShortPrefix {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(name = "the-relaxed-property", relaxedNames = false)\n\tprotected static class NonRelaxedPropertiesRequiredConfiguration {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t// i.e ${simple.myProperty:true}\n\t@ConditionalOnProperty(prefix = "simple", name = "my-property", havingValue = "true", matchIfMissing = true)\n\tstatic class EnabledIfNotConfiguredOtherwiseConfig {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t// i.e ${simple.myProperty:false}\n\t@ConditionalOnProperty(prefix = "simple", name = "my-property", havingValue = "true", matchIfMissing = false)\n\tstatic class DisabledIfNotConfiguredOtherwiseConfig {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "simple", name = "my-property", havingValue = "bar")\n\tstatic class SimpleValueConfig {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(name = "simple.myProperty", havingValue = "bar", matchIfMissing = true)\n\tstatic class DefaultValueConfig {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "simple", name = "my-property", havingValue = "bar")\n\tstatic class PrefixValueConfig {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "simple", name = "my-property", havingValue = "bar", relaxedNames = false)\n\tstatic class StrictNameConfig {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "simple", name = { "my-property",\n\t\t\t"my-another-property" }, havingValue = "bar")\n\tstatic class MultiValuesConfig {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty("some.property")\n\tprotected static class ValueAttribute {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty\n\tprotected static class NoNameOrValueAttribute {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(value = "x", name = "y")\n\tprotected static class NameAndValueAttribute {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@ConditionalOnMyFeature\n\tprotected static class MetaAnnotation {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@ConditionalOnMyFeature\n\t@ConditionalOnProperty(prefix = "my.other.feature", name = "enabled", havingValue = "true", matchIfMissing = false)\n\tprotected static class MetaAnnotationAndDirectAnnotation {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Target({ ElementType.TYPE, ElementType.METHOD })\n\t@ConditionalOnProperty(prefix = "my.feature", name = "enabled", havingValue = "true", matchIfMissing = false)\n\tpublic @interface ConditionalOnMyFeature {\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
