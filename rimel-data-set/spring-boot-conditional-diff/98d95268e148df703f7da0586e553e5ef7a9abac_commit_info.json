{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/couchbase/CouchbaseReactiveHealthIndicatorAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/couchbase/CouchbaseReactiveHealthIndicatorAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -17,7 +17,7 @@ package org.springframework.boot.actuate.autoconfigure.couchbase;\n \n import java.util.Map;\n \n-import com.couchbase.client.java.Bucket;\n+import com.couchbase.client.java.Cluster;\n import reactor.core.publisher.Flux;\n \n import org.springframework.boot.actuate.autoconfigure.health.CompositeReactiveHealthIndicatorConfiguration;\n@@ -31,10 +31,9 @@ import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration;\n+import org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.data.couchbase.core.RxJavaCouchbaseOperations;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for\n@@ -45,31 +44,30 @@ import org.springframework.data.couchbase.core.RxJavaCouchbaseOperations;\n  * @since 2.1.0\n  */\n @Configuration\n-@ConditionalOnClass({ Bucket.class, RxJavaCouchbaseOperations.class, Flux.class })\n-@ConditionalOnBean(RxJavaCouchbaseOperations.class)\n+@ConditionalOnClass({ Cluster.class, Flux.class })\n+@ConditionalOnBean(Cluster.class)\n @ConditionalOnEnabledHealthIndicator("couchbase")\n @AutoConfigureBefore(HealthIndicatorAutoConfiguration.class)\n-@AutoConfigureAfter(CouchbaseReactiveDataAutoConfiguration.class)\n+@AutoConfigureAfter(CouchbaseAutoConfiguration.class)\n public class CouchbaseReactiveHealthIndicatorAutoConfiguration extends\n-\t\tCompositeReactiveHealthIndicatorConfiguration<CouchbaseReactiveHealthIndicator, RxJavaCouchbaseOperations> {\n+\t\tCompositeReactiveHealthIndicatorConfiguration<CouchbaseReactiveHealthIndicator, Cluster> {\n \n-\tprivate final Map<String, RxJavaCouchbaseOperations> couchbaseOperations;\n+\tprivate final Map<String, Cluster> clusters;\n \n \tpublic CouchbaseReactiveHealthIndicatorAutoConfiguration(\n-\t\t\tMap<String, RxJavaCouchbaseOperations> couchbaseOperations) {\n-\t\tthis.couchbaseOperations = couchbaseOperations;\n+\t\t\tMap<String, Cluster> clusters) {\n+\t\tthis.clusters = clusters;\n \t}\n \n \t@Bean\n \t@ConditionalOnMissingBean(name = "couchbaseReactiveHealthIndicator")\n \tpublic ReactiveHealthIndicator couchbaseReactiveHealthIndicator() {\n-\t\treturn createHealthIndicator(this.couchbaseOperations);\n+\t\treturn createHealthIndicator(this.clusters);\n \t}\n \n \t@Override\n-\tprotected CouchbaseReactiveHealthIndicator createHealthIndicator(\n-\t\t\tRxJavaCouchbaseOperations couchbaseOperations) {\n-\t\treturn new CouchbaseReactiveHealthIndicator(couchbaseOperations);\n+\tprotected CouchbaseReactiveHealthIndicator createHealthIndicator(Cluster cluster) {\n+\t\treturn new CouchbaseReactiveHealthIndicator(cluster);\n \t}\n \n }\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.boot.actuate.autoconfigure.couchbase;\n\nimport java.util.Map;\n\nimport com.couchbase.client.java.Cluster;\nimport reactor.core.publisher.Flux;\n\nimport org.springframework.boot.actuate.autoconfigure.health.CompositeReactiveHealthIndicatorConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.health.ConditionalOnEnabledHealthIndicator;\nimport org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration;\nimport org.springframework.boot.actuate.couchbase.CouchbaseReactiveHealthIndicator;\nimport org.springframework.boot.actuate.health.ReactiveHealthIndicator;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for\n * {@link CouchbaseReactiveHealthIndicator}.\n *\n * @author Mikalai Lushchytski\n * @author Stephane Nicoll\n * @since 2.1.0\n */\n@Configuration\n@ConditionalOnClass({ Cluster.class, Flux.class })\n@ConditionalOnBean(Cluster.class)\n@ConditionalOnEnabledHealthIndicator("couchbase")\n@AutoConfigureBefore(HealthIndicatorAutoConfiguration.class)\n@AutoConfigureAfter(CouchbaseAutoConfiguration.class)\npublic class CouchbaseReactiveHealthIndicatorAutoConfiguration extends\n\t\tCompositeReactiveHealthIndicatorConfiguration<CouchbaseReactiveHealthIndicator, Cluster> {\n\n\tprivate final Map<String, Cluster> clusters;\n\n\tpublic CouchbaseReactiveHealthIndicatorAutoConfiguration(\n\t\t\tMap<String, Cluster> clusters) {\n\t\tthis.clusters = clusters;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "couchbaseReactiveHealthIndicator")\n\tpublic ReactiveHealthIndicator couchbaseReactiveHealthIndicator() {\n\t\treturn createHealthIndicator(this.clusters);\n\t}\n\n\t@Override\n\tprotected CouchbaseReactiveHealthIndicator createHealthIndicator(Cluster cluster) {\n\t\treturn new CouchbaseReactiveHealthIndicator(cluster);\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.boot.actuate.autoconfigure.couchbase;\n\nimport java.util.Map;\n\nimport com.couchbase.client.java.Bucket;\nimport reactor.core.publisher.Flux;\n\nimport org.springframework.boot.actuate.autoconfigure.health.CompositeReactiveHealthIndicatorConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.health.ConditionalOnEnabledHealthIndicator;\nimport org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration;\nimport org.springframework.boot.actuate.couchbase.CouchbaseReactiveHealthIndicator;\nimport org.springframework.boot.actuate.health.ReactiveHealthIndicator;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.couchbase.core.RxJavaCouchbaseOperations;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for\n * {@link CouchbaseReactiveHealthIndicator}.\n *\n * @author Mikalai Lushchytski\n * @author Stephane Nicoll\n * @since 2.1.0\n */\n@Configuration\n@ConditionalOnClass({ Bucket.class, RxJavaCouchbaseOperations.class, Flux.class })\n@ConditionalOnBean(RxJavaCouchbaseOperations.class)\n@ConditionalOnEnabledHealthIndicator("couchbase")\n@AutoConfigureBefore(HealthIndicatorAutoConfiguration.class)\n@AutoConfigureAfter(CouchbaseReactiveDataAutoConfiguration.class)\npublic class CouchbaseReactiveHealthIndicatorAutoConfiguration extends\n\t\tCompositeReactiveHealthIndicatorConfiguration<CouchbaseReactiveHealthIndicator, RxJavaCouchbaseOperations> {\n\n\tprivate final Map<String, RxJavaCouchbaseOperations> couchbaseOperations;\n\n\tpublic CouchbaseReactiveHealthIndicatorAutoConfiguration(\n\t\t\tMap<String, RxJavaCouchbaseOperations> couchbaseOperations) {\n\t\tthis.couchbaseOperations = couchbaseOperations;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "couchbaseReactiveHealthIndicator")\n\tpublic ReactiveHealthIndicator couchbaseReactiveHealthIndicator() {\n\t\treturn createHealthIndicator(this.couchbaseOperations);\n\t}\n\n\t@Override\n\tprotected CouchbaseReactiveHealthIndicator createHealthIndicator(\n\t\t\tRxJavaCouchbaseOperations couchbaseOperations) {\n\t\treturn new CouchbaseReactiveHealthIndicator(couchbaseOperations);\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
