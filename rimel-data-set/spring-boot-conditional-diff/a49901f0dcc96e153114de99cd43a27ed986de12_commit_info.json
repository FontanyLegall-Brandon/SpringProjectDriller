{'_old_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -90,7 +90,7 @@ public class MetricRepositoryAutoConfiguration {\n \tstatic class LegacyMetricServicesConfiguration {\n \n \t\t@Autowired\n-\t\t@ActuatorMetricReader\n+\t\t@ActuatorMetricWriter\n \t\tprivate MetricWriter writer;\n \n \t\t@Bean\n@@ -147,11 +147,12 @@ public class MetricRepositoryAutoConfiguration {\n \n \t@Configuration\n \t@ConditionalOnJava(value = JavaVersion.EIGHT, range = Range.OLDER_THAN)\n-\t@ConditionalOnMissingBean(MetricRepository.class)\n+\t@ConditionalOnMissingBean(name = "actuatorMetricRepository")\n \tstatic class LegacyMetricRepositoryConfiguration {\n \n \t\t@Bean\n \t\t@ActuatorMetricReader\n+\t\t@ActuatorMetricWriter\n \t\tpublic InMemoryMetricRepository actuatorMetricRepository() {\n \t\t\treturn new InMemoryMetricRepository();\n \t\t}\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuate.metrics.CounterService;\nimport org.springframework.boot.actuate.metrics.GaugeService;\nimport org.springframework.boot.actuate.metrics.buffer.BufferCounterService;\nimport org.springframework.boot.actuate.metrics.buffer.BufferGaugeService;\nimport org.springframework.boot.actuate.metrics.buffer.BufferMetricReader;\nimport org.springframework.boot.actuate.metrics.buffer.CounterBuffers;\nimport org.springframework.boot.actuate.metrics.buffer.GaugeBuffers;\nimport org.springframework.boot.actuate.metrics.export.Exporter;\nimport org.springframework.boot.actuate.metrics.export.MetricCopyExporter;\nimport org.springframework.boot.actuate.metrics.export.MetricExportProperties;\nimport org.springframework.boot.actuate.metrics.repository.InMemoryMetricRepository;\nimport org.springframework.boot.actuate.metrics.repository.MetricRepository;\nimport org.springframework.boot.actuate.metrics.writer.DefaultCounterService;\nimport org.springframework.boot.actuate.metrics.writer.DefaultGaugeService;\nimport org.springframework.boot.actuate.metrics.writer.MetricWriter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnJava;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnJava.JavaVersion;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnJava.Range;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.messaging.MessageChannel;\n\nimport com.codahale.metrics.MetricRegistry;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for metrics services. Creates\n * user-facing {@link GaugeService} and {@link CounterService} instances, and also back\n * end repositories to catch the data pumped into them.\n * <p>\n * An {@link InMemoryMetricRepository} is always created unless another\n * {@link MetricRepository} is already provided by the user. In general, even if metric\n * data needs to be stored and analysed remotely, it is recommended to use an in-memory\n * repository to buffer metric updates locally. The values can be exported (e.g. on a\n * periodic basis) using an {@link Exporter}, most implementations of which have\n * optimizations for sending data to remote repositories.\n * <p>\n * If Spring Messaging is on the classpath and a {@link MessageChannel} called\n * "metricsChannel" is also available, all metric update events are published additionally\n * as messages on that channel. Additional analysis or actions can be taken by clients\n * subscribing to that channel.\n * <p>\n * In addition if Dropwizard\'s metrics library is on the classpath a\n * {@link MetricRegistry} will be created and the default counter and gauge services will\n * switch to using it instead of the default repository. Users can create "special"\n * Dropwizard metrics by prefixing their metric names with the appropriate type (e.g.\n * "histogram.*", "meter.*". "timer.*") and sending them to the <code>GaugeService</code>\n * or <code>CounterService</code>.\n * <p>\n * By default all metric updates go to all {@link MetricWriter} instances in the\n * application context via a {@link MetricCopyExporter} firing every 5 seconds (disable\n * this by setting <code>spring.metrics.export.enabled=false</code>).\n *\n * @see GaugeService\n * @see CounterService\n * @see MetricWriter\n * @see InMemoryMetricRepository\n * @see Exporter\n *\n * @author Dave Syer\n */\n@Configuration\n@EnableConfigurationProperties(MetricExportProperties.class)\npublic class MetricRepositoryAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnJava(value = JavaVersion.EIGHT, range = Range.OLDER_THAN)\n\t@ConditionalOnMissingBean(GaugeService.class)\n\tstatic class LegacyMetricServicesConfiguration {\n\n\t\t@Autowired\n\t\t@ActuatorMetricWriter\n\t\tprivate MetricWriter writer;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic CounterService counterService() {\n\t\t\treturn new DefaultCounterService(this.writer);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic GaugeService gaugeService() {\n\t\t\treturn new DefaultGaugeService(this.writer);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnJava(value = JavaVersion.EIGHT)\n\t@ConditionalOnMissingBean(GaugeService.class)\n\tstatic class FastMetricServicesConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic CounterBuffers counterBuffers() {\n\t\t\treturn new CounterBuffers();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic GaugeBuffers gaugeBuffers() {\n\t\t\treturn new GaugeBuffers();\n\t\t}\n\n\t\t@Bean\n\t\t@ActuatorMetricReader\n\t\t@ConditionalOnMissingBean\n\t\tpublic BufferMetricReader actuatorMetricReader(CounterBuffers counters,\n\t\t\t\tGaugeBuffers gauges) {\n\t\t\treturn new BufferMetricReader(counters, gauges);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic CounterService counterService(CounterBuffers writer) {\n\t\t\treturn new BufferCounterService(writer);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic GaugeService gaugeService(GaugeBuffers writer) {\n\t\t\treturn new BufferGaugeService(writer);\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnJava(value = JavaVersion.EIGHT, range = Range.OLDER_THAN)\n\t@ConditionalOnMissingBean(name = "actuatorMetricRepository")\n\tstatic class LegacyMetricRepositoryConfiguration {\n\n\t\t@Bean\n\t\t@ActuatorMetricReader\n\t\t@ActuatorMetricWriter\n\t\tpublic InMemoryMetricRepository actuatorMetricRepository() {\n\t\t\treturn new InMemoryMetricRepository();\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuate.metrics.CounterService;\nimport org.springframework.boot.actuate.metrics.GaugeService;\nimport org.springframework.boot.actuate.metrics.buffer.BufferCounterService;\nimport org.springframework.boot.actuate.metrics.buffer.BufferGaugeService;\nimport org.springframework.boot.actuate.metrics.buffer.BufferMetricReader;\nimport org.springframework.boot.actuate.metrics.buffer.CounterBuffers;\nimport org.springframework.boot.actuate.metrics.buffer.GaugeBuffers;\nimport org.springframework.boot.actuate.metrics.export.Exporter;\nimport org.springframework.boot.actuate.metrics.export.MetricCopyExporter;\nimport org.springframework.boot.actuate.metrics.export.MetricExportProperties;\nimport org.springframework.boot.actuate.metrics.repository.InMemoryMetricRepository;\nimport org.springframework.boot.actuate.metrics.repository.MetricRepository;\nimport org.springframework.boot.actuate.metrics.writer.DefaultCounterService;\nimport org.springframework.boot.actuate.metrics.writer.DefaultGaugeService;\nimport org.springframework.boot.actuate.metrics.writer.MetricWriter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnJava;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnJava.JavaVersion;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnJava.Range;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.messaging.MessageChannel;\n\nimport com.codahale.metrics.MetricRegistry;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for metrics services. Creates\n * user-facing {@link GaugeService} and {@link CounterService} instances, and also back\n * end repositories to catch the data pumped into them.\n * <p>\n * An {@link InMemoryMetricRepository} is always created unless another\n * {@link MetricRepository} is already provided by the user. In general, even if metric\n * data needs to be stored and analysed remotely, it is recommended to use an in-memory\n * repository to buffer metric updates locally. The values can be exported (e.g. on a\n * periodic basis) using an {@link Exporter}, most implementations of which have\n * optimizations for sending data to remote repositories.\n * <p>\n * If Spring Messaging is on the classpath and a {@link MessageChannel} called\n * "metricsChannel" is also available, all metric update events are published additionally\n * as messages on that channel. Additional analysis or actions can be taken by clients\n * subscribing to that channel.\n * <p>\n * In addition if Dropwizard\'s metrics library is on the classpath a\n * {@link MetricRegistry} will be created and the default counter and gauge services will\n * switch to using it instead of the default repository. Users can create "special"\n * Dropwizard metrics by prefixing their metric names with the appropriate type (e.g.\n * "histogram.*", "meter.*". "timer.*") and sending them to the <code>GaugeService</code>\n * or <code>CounterService</code>.\n * <p>\n * By default all metric updates go to all {@link MetricWriter} instances in the\n * application context via a {@link MetricCopyExporter} firing every 5 seconds (disable\n * this by setting <code>spring.metrics.export.enabled=false</code>).\n *\n * @see GaugeService\n * @see CounterService\n * @see MetricWriter\n * @see InMemoryMetricRepository\n * @see Exporter\n *\n * @author Dave Syer\n */\n@Configuration\n@EnableConfigurationProperties(MetricExportProperties.class)\npublic class MetricRepositoryAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnJava(value = JavaVersion.EIGHT, range = Range.OLDER_THAN)\n\t@ConditionalOnMissingBean(GaugeService.class)\n\tstatic class LegacyMetricServicesConfiguration {\n\n\t\t@Autowired\n\t\t@ActuatorMetricReader\n\t\tprivate MetricWriter writer;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic CounterService counterService() {\n\t\t\treturn new DefaultCounterService(this.writer);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic GaugeService gaugeService() {\n\t\t\treturn new DefaultGaugeService(this.writer);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnJava(value = JavaVersion.EIGHT)\n\t@ConditionalOnMissingBean(GaugeService.class)\n\tstatic class FastMetricServicesConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic CounterBuffers counterBuffers() {\n\t\t\treturn new CounterBuffers();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic GaugeBuffers gaugeBuffers() {\n\t\t\treturn new GaugeBuffers();\n\t\t}\n\n\t\t@Bean\n\t\t@ActuatorMetricReader\n\t\t@ConditionalOnMissingBean\n\t\tpublic BufferMetricReader actuatorMetricReader(CounterBuffers counters,\n\t\t\t\tGaugeBuffers gauges) {\n\t\t\treturn new BufferMetricReader(counters, gauges);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic CounterService counterService(CounterBuffers writer) {\n\t\t\treturn new BufferCounterService(writer);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic GaugeService gaugeService(GaugeBuffers writer) {\n\t\t\treturn new BufferGaugeService(writer);\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnJava(value = JavaVersion.EIGHT, range = Range.OLDER_THAN)\n\t@ConditionalOnMissingBean(MetricRepository.class)\n\tstatic class LegacyMetricRepositoryConfiguration {\n\n\t\t@Bean\n\t\t@ActuatorMetricReader\n\t\tpublic InMemoryMetricRepository actuatorMetricRepository() {\n\t\t\treturn new InMemoryMetricRepository();\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
