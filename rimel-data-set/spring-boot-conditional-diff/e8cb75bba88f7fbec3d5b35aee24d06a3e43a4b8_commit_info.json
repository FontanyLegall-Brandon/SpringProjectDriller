{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -21,11 +21,13 @@ import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.stream.Collectors;\n \n import org.springframework.boot.actuate.autoconfigure.cloudfoundry.CloudFoundryWebEndpointDiscoverer;\n import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\n import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnExposedEndpoint;\n import org.springframework.boot.actuate.autoconfigure.health.HealthEndpointAutoConfiguration;\n+import org.springframework.boot.actuate.autoconfigure.info.InfoEndpointAutoConfiguration;\n import org.springframework.boot.actuate.autoconfigure.web.servlet.ServletManagementContextAutoConfiguration;\n import org.springframework.boot.actuate.endpoint.ExposableEndpoint;\n import org.springframework.boot.actuate.endpoint.invoke.ParameterValueMapper;\n@@ -37,6 +39,10 @@ import org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpoi\n import org.springframework.boot.actuate.endpoint.web.annotation.ServletEndpointsSupplier;\n import org.springframework.boot.actuate.health.HealthEndpoint;\n import org.springframework.boot.actuate.health.HealthEndpointWebExtension;\n+import org.springframework.boot.actuate.info.GitInfoContributor;\n+import org.springframework.boot.actuate.info.InfoContributor;\n+import org.springframework.boot.actuate.info.InfoEndpoint;\n+import org.springframework.boot.actuate.info.InfoPropertiesInfoContributor;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n@@ -47,6 +53,7 @@ import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n import org.springframework.boot.autoconfigure.security.SecurityProperties;\n import org.springframework.boot.cloud.CloudPlatform;\n+import org.springframework.boot.info.GitProperties;\n import org.springframework.boot.web.client.RestTemplateBuilder;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Bean;\n@@ -70,7 +77,7 @@ import org.springframework.web.servlet.DispatcherServlet;\n @Configuration(proxyBeanMethods = false)\n @ConditionalOnProperty(prefix = "management.cloudfoundry", name = "enabled", matchIfMissing = true)\n @AutoConfigureAfter({ ServletManagementContextAutoConfiguration.class,\n-\t\tHealthEndpointAutoConfiguration.class })\n+\t\tHealthEndpointAutoConfiguration.class, InfoEndpointAutoConfiguration.class })\n @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n @ConditionalOnClass(DispatcherServlet.class)\n @ConditionalOnBean(DispatcherServlet.class)\n@@ -87,6 +94,25 @@ public class CloudFoundryActuatorAutoConfiguration {\n \t\treturn new CloudFoundryHealthEndpointWebExtension(healthEndpointWebExtension);\n \t}\n \n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\t@ConditionalOnEnabledEndpoint\n+\t@ConditionalOnExposedEndpoint\n+\t@ConditionalOnBean({ InfoEndpoint.class, GitProperties.class })\n+\tpublic CloudFoundryInfoEndpointWebExtension cloudFoundryInfoEndpointWebExtension(\n+\t\t\tInfoEndpoint infoEndpoint, GitProperties properties) {\n+\t\tList<InfoContributor> existingContributors = infoEndpoint.getInfoContributors();\n+\t\tList<InfoContributor> contributors = existingContributors.stream()\n+\t\t\t\t.map((infoContributor) -> {\n+\t\t\t\t\tif (infoContributor instanceof GitInfoContributor) {\n+\t\t\t\t\t\treturn new GitInfoContributor(properties,\n+\t\t\t\t\t\t\t\tInfoPropertiesInfoContributor.Mode.FULL);\n+\t\t\t\t\t}\n+\t\t\t\t\treturn infoContributor;\n+\t\t\t\t}).collect(Collectors.toList());\n+\t\treturn new CloudFoundryInfoEndpointWebExtension(new InfoEndpoint(contributors));\n+\t}\n+\n \t@Bean\n \tpublic CloudFoundryWebEndpointServletHandlerMapping cloudFoundryWebEndpointServletHandlerMapping(\n \t\t\tParameterValueMapper parameterMapper, EndpointMediaTypes endpointMediaTypes,\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.cloudfoundry.servlet;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nimport org.springframework.boot.actuate.autoconfigure.cloudfoundry.CloudFoundryWebEndpointDiscoverer;\nimport org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\nimport org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnExposedEndpoint;\nimport org.springframework.boot.actuate.autoconfigure.health.HealthEndpointAutoConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.info.InfoEndpointAutoConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.web.servlet.ServletManagementContextAutoConfiguration;\nimport org.springframework.boot.actuate.endpoint.ExposableEndpoint;\nimport org.springframework.boot.actuate.endpoint.invoke.ParameterValueMapper;\nimport org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver;\nimport org.springframework.boot.actuate.endpoint.web.EndpointMapping;\nimport org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes;\nimport org.springframework.boot.actuate.endpoint.web.ExposableWebEndpoint;\nimport org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointsSupplier;\nimport org.springframework.boot.actuate.endpoint.web.annotation.ServletEndpointsSupplier;\nimport org.springframework.boot.actuate.health.HealthEndpoint;\nimport org.springframework.boot.actuate.health.HealthEndpointWebExtension;\nimport org.springframework.boot.actuate.info.GitInfoContributor;\nimport org.springframework.boot.actuate.info.InfoContributor;\nimport org.springframework.boot.actuate.info.InfoEndpoint;\nimport org.springframework.boot.actuate.info.InfoPropertiesInfoContributor;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.security.SecurityProperties;\nimport org.springframework.boot.cloud.CloudPlatform;\nimport org.springframework.boot.info.GitProperties;\nimport org.springframework.boot.web.client.RestTemplateBuilder;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.env.Environment;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.security.config.annotation.web.WebSecurityConfigurer;\nimport org.springframework.security.config.annotation.web.builders.WebSecurity;\nimport org.springframework.security.web.util.matcher.AntPathRequestMatcher;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.servlet.DispatcherServlet;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to expose actuator endpoints for\n * Cloud Foundry to use.\n *\n * @author Madhura Bhave\n * @since 2.0.0\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnProperty(prefix = "management.cloudfoundry", name = "enabled", matchIfMissing = true)\n@AutoConfigureAfter({ ServletManagementContextAutoConfiguration.class,\n\t\tHealthEndpointAutoConfiguration.class, InfoEndpointAutoConfiguration.class })\n@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n@ConditionalOnClass(DispatcherServlet.class)\n@ConditionalOnBean(DispatcherServlet.class)\n@ConditionalOnCloudPlatform(CloudPlatform.CLOUD_FOUNDRY)\npublic class CloudFoundryActuatorAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnEnabledEndpoint\n\t@ConditionalOnExposedEndpoint\n\t@ConditionalOnBean({ HealthEndpoint.class, HealthEndpointWebExtension.class })\n\tpublic CloudFoundryHealthEndpointWebExtension cloudFoundryHealthEndpointWebExtension(\n\t\t\tHealthEndpointWebExtension healthEndpointWebExtension) {\n\t\treturn new CloudFoundryHealthEndpointWebExtension(healthEndpointWebExtension);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnEnabledEndpoint\n\t@ConditionalOnExposedEndpoint\n\t@ConditionalOnBean({ InfoEndpoint.class, GitProperties.class })\n\tpublic CloudFoundryInfoEndpointWebExtension cloudFoundryInfoEndpointWebExtension(\n\t\t\tInfoEndpoint infoEndpoint, GitProperties properties) {\n\t\tList<InfoContributor> existingContributors = infoEndpoint.getInfoContributors();\n\t\tList<InfoContributor> contributors = existingContributors.stream()\n\t\t\t\t.map((infoContributor) -> {\n\t\t\t\t\tif (infoContributor instanceof GitInfoContributor) {\n\t\t\t\t\t\treturn new GitInfoContributor(properties,\n\t\t\t\t\t\t\t\tInfoPropertiesInfoContributor.Mode.FULL);\n\t\t\t\t\t}\n\t\t\t\t\treturn infoContributor;\n\t\t\t\t}).collect(Collectors.toList());\n\t\treturn new CloudFoundryInfoEndpointWebExtension(new InfoEndpoint(contributors));\n\t}\n\n\t@Bean\n\tpublic CloudFoundryWebEndpointServletHandlerMapping cloudFoundryWebEndpointServletHandlerMapping(\n\t\t\tParameterValueMapper parameterMapper, EndpointMediaTypes endpointMediaTypes,\n\t\t\tRestTemplateBuilder restTemplateBuilder,\n\t\t\tServletEndpointsSupplier servletEndpointsSupplier,\n\t\t\tControllerEndpointsSupplier controllerEndpointsSupplier,\n\t\t\tApplicationContext applicationContext) {\n\t\tCloudFoundryWebEndpointDiscoverer discoverer = new CloudFoundryWebEndpointDiscoverer(\n\t\t\t\tapplicationContext, parameterMapper, endpointMediaTypes, null,\n\t\t\t\tCollections.emptyList(), Collections.emptyList());\n\t\tCloudFoundrySecurityInterceptor securityInterceptor = getSecurityInterceptor(\n\t\t\t\trestTemplateBuilder, applicationContext.getEnvironment());\n\t\tCollection<ExposableWebEndpoint> webEndpoints = discoverer.getEndpoints();\n\t\tList<ExposableEndpoint<?>> allEndpoints = new ArrayList<>();\n\t\tallEndpoints.addAll(webEndpoints);\n\t\tallEndpoints.addAll(servletEndpointsSupplier.getEndpoints());\n\t\tallEndpoints.addAll(controllerEndpointsSupplier.getEndpoints());\n\t\treturn new CloudFoundryWebEndpointServletHandlerMapping(\n\t\t\t\tnew EndpointMapping("/cloudfoundryapplication"), webEndpoints,\n\t\t\t\tendpointMediaTypes, getCorsConfiguration(), securityInterceptor,\n\t\t\t\tnew EndpointLinksResolver(allEndpoints));\n\t}\n\n\tprivate CloudFoundrySecurityInterceptor getSecurityInterceptor(\n\t\t\tRestTemplateBuilder restTemplateBuilder, Environment environment) {\n\t\tCloudFoundrySecurityService cloudfoundrySecurityService = getCloudFoundrySecurityService(\n\t\t\t\trestTemplateBuilder, environment);\n\t\tTokenValidator tokenValidator = new TokenValidator(cloudfoundrySecurityService);\n\t\treturn new CloudFoundrySecurityInterceptor(tokenValidator,\n\t\t\t\tcloudfoundrySecurityService,\n\t\t\t\tenvironment.getProperty("vcap.application.application_id"));\n\t}\n\n\tprivate CloudFoundrySecurityService getCloudFoundrySecurityService(\n\t\t\tRestTemplateBuilder restTemplateBuilder, Environment environment) {\n\t\tString cloudControllerUrl = environment.getProperty("vcap.application.cf_api");\n\t\tboolean skipSslValidation = environment.getProperty(\n\t\t\t\t"management.cloudfoundry.skip-ssl-validation", Boolean.class, false);\n\t\treturn (cloudControllerUrl != null) ? new CloudFoundrySecurityService(\n\t\t\t\trestTemplateBuilder, cloudControllerUrl, skipSslValidation) : null;\n\t}\n\n\tprivate CorsConfiguration getCorsConfiguration() {\n\t\tCorsConfiguration corsConfiguration = new CorsConfiguration();\n\t\tcorsConfiguration.addAllowedOrigin(CorsConfiguration.ALL);\n\t\tcorsConfiguration.setAllowedMethods(\n\t\t\t\tArrays.asList(HttpMethod.GET.name(), HttpMethod.POST.name()));\n\t\tcorsConfiguration.setAllowedHeaders(\n\t\t\t\tArrays.asList("Authorization", "X-Cf-App-Instance", "Content-Type"));\n\t\treturn corsConfiguration;\n\t}\n\n\t/**\n\t * {@link WebSecurityConfigurer} to tell Spring Security to ignore cloudfoundry\n\t * specific paths. The Cloud foundry endpoints are protected by their own security\n\t * interceptor.\n\t */\n\t@ConditionalOnClass(WebSecurity.class)\n\t@Order(SecurityProperties.IGNORED_ORDER)\n\t@Configuration(proxyBeanMethods = false)\n\tpublic static class IgnoredPathsWebSecurityConfigurer\n\t\t\timplements WebSecurityConfigurer<WebSecurity> {\n\n\t\t@Override\n\t\tpublic void init(WebSecurity builder) throws Exception {\n\t\t\tbuilder.ignoring().requestMatchers(\n\t\t\t\t\tnew AntPathRequestMatcher("/cloudfoundryapplication/**"));\n\t\t}\n\n\t\t@Override\n\t\tpublic void configure(WebSecurity builder) throws Exception {\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.cloudfoundry.servlet;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.springframework.boot.actuate.autoconfigure.cloudfoundry.CloudFoundryWebEndpointDiscoverer;\nimport org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\nimport org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnExposedEndpoint;\nimport org.springframework.boot.actuate.autoconfigure.health.HealthEndpointAutoConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.web.servlet.ServletManagementContextAutoConfiguration;\nimport org.springframework.boot.actuate.endpoint.ExposableEndpoint;\nimport org.springframework.boot.actuate.endpoint.invoke.ParameterValueMapper;\nimport org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver;\nimport org.springframework.boot.actuate.endpoint.web.EndpointMapping;\nimport org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes;\nimport org.springframework.boot.actuate.endpoint.web.ExposableWebEndpoint;\nimport org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointsSupplier;\nimport org.springframework.boot.actuate.endpoint.web.annotation.ServletEndpointsSupplier;\nimport org.springframework.boot.actuate.health.HealthEndpoint;\nimport org.springframework.boot.actuate.health.HealthEndpointWebExtension;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.security.SecurityProperties;\nimport org.springframework.boot.cloud.CloudPlatform;\nimport org.springframework.boot.web.client.RestTemplateBuilder;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.env.Environment;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.security.config.annotation.web.WebSecurityConfigurer;\nimport org.springframework.security.config.annotation.web.builders.WebSecurity;\nimport org.springframework.security.web.util.matcher.AntPathRequestMatcher;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.servlet.DispatcherServlet;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to expose actuator endpoints for\n * Cloud Foundry to use.\n *\n * @author Madhura Bhave\n * @since 2.0.0\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnProperty(prefix = "management.cloudfoundry", name = "enabled", matchIfMissing = true)\n@AutoConfigureAfter({ ServletManagementContextAutoConfiguration.class,\n\t\tHealthEndpointAutoConfiguration.class })\n@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n@ConditionalOnClass(DispatcherServlet.class)\n@ConditionalOnBean(DispatcherServlet.class)\n@ConditionalOnCloudPlatform(CloudPlatform.CLOUD_FOUNDRY)\npublic class CloudFoundryActuatorAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnEnabledEndpoint\n\t@ConditionalOnExposedEndpoint\n\t@ConditionalOnBean({ HealthEndpoint.class, HealthEndpointWebExtension.class })\n\tpublic CloudFoundryHealthEndpointWebExtension cloudFoundryHealthEndpointWebExtension(\n\t\t\tHealthEndpointWebExtension healthEndpointWebExtension) {\n\t\treturn new CloudFoundryHealthEndpointWebExtension(healthEndpointWebExtension);\n\t}\n\n\t@Bean\n\tpublic CloudFoundryWebEndpointServletHandlerMapping cloudFoundryWebEndpointServletHandlerMapping(\n\t\t\tParameterValueMapper parameterMapper, EndpointMediaTypes endpointMediaTypes,\n\t\t\tRestTemplateBuilder restTemplateBuilder,\n\t\t\tServletEndpointsSupplier servletEndpointsSupplier,\n\t\t\tControllerEndpointsSupplier controllerEndpointsSupplier,\n\t\t\tApplicationContext applicationContext) {\n\t\tCloudFoundryWebEndpointDiscoverer discoverer = new CloudFoundryWebEndpointDiscoverer(\n\t\t\t\tapplicationContext, parameterMapper, endpointMediaTypes, null,\n\t\t\t\tCollections.emptyList(), Collections.emptyList());\n\t\tCloudFoundrySecurityInterceptor securityInterceptor = getSecurityInterceptor(\n\t\t\t\trestTemplateBuilder, applicationContext.getEnvironment());\n\t\tCollection<ExposableWebEndpoint> webEndpoints = discoverer.getEndpoints();\n\t\tList<ExposableEndpoint<?>> allEndpoints = new ArrayList<>();\n\t\tallEndpoints.addAll(webEndpoints);\n\t\tallEndpoints.addAll(servletEndpointsSupplier.getEndpoints());\n\t\tallEndpoints.addAll(controllerEndpointsSupplier.getEndpoints());\n\t\treturn new CloudFoundryWebEndpointServletHandlerMapping(\n\t\t\t\tnew EndpointMapping("/cloudfoundryapplication"), webEndpoints,\n\t\t\t\tendpointMediaTypes, getCorsConfiguration(), securityInterceptor,\n\t\t\t\tnew EndpointLinksResolver(allEndpoints));\n\t}\n\n\tprivate CloudFoundrySecurityInterceptor getSecurityInterceptor(\n\t\t\tRestTemplateBuilder restTemplateBuilder, Environment environment) {\n\t\tCloudFoundrySecurityService cloudfoundrySecurityService = getCloudFoundrySecurityService(\n\t\t\t\trestTemplateBuilder, environment);\n\t\tTokenValidator tokenValidator = new TokenValidator(cloudfoundrySecurityService);\n\t\treturn new CloudFoundrySecurityInterceptor(tokenValidator,\n\t\t\t\tcloudfoundrySecurityService,\n\t\t\t\tenvironment.getProperty("vcap.application.application_id"));\n\t}\n\n\tprivate CloudFoundrySecurityService getCloudFoundrySecurityService(\n\t\t\tRestTemplateBuilder restTemplateBuilder, Environment environment) {\n\t\tString cloudControllerUrl = environment.getProperty("vcap.application.cf_api");\n\t\tboolean skipSslValidation = environment.getProperty(\n\t\t\t\t"management.cloudfoundry.skip-ssl-validation", Boolean.class, false);\n\t\treturn (cloudControllerUrl != null) ? new CloudFoundrySecurityService(\n\t\t\t\trestTemplateBuilder, cloudControllerUrl, skipSslValidation) : null;\n\t}\n\n\tprivate CorsConfiguration getCorsConfiguration() {\n\t\tCorsConfiguration corsConfiguration = new CorsConfiguration();\n\t\tcorsConfiguration.addAllowedOrigin(CorsConfiguration.ALL);\n\t\tcorsConfiguration.setAllowedMethods(\n\t\t\t\tArrays.asList(HttpMethod.GET.name(), HttpMethod.POST.name()));\n\t\tcorsConfiguration.setAllowedHeaders(\n\t\t\t\tArrays.asList("Authorization", "X-Cf-App-Instance", "Content-Type"));\n\t\treturn corsConfiguration;\n\t}\n\n\t/**\n\t * {@link WebSecurityConfigurer} to tell Spring Security to ignore cloudfoundry\n\t * specific paths. The Cloud foundry endpoints are protected by their own security\n\t * interceptor.\n\t */\n\t@ConditionalOnClass(WebSecurity.class)\n\t@Order(SecurityProperties.IGNORED_ORDER)\n\t@Configuration(proxyBeanMethods = false)\n\tpublic static class IgnoredPathsWebSecurityConfigurer\n\t\t\timplements WebSecurityConfigurer<WebSecurity> {\n\n\t\t@Override\n\t\tpublic void init(WebSecurity builder) throws Exception {\n\t\t\tbuilder.ignoring().requestMatchers(\n\t\t\t\t\tnew AntPathRequestMatcher("/cloudfoundryapplication/**"));\n\t\t}\n\n\t\t@Override\n\t\tpublic void configure(WebSecurity builder) throws Exception {\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
