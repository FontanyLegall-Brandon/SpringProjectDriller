{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/servlet/WebMvcEndpointChildContextConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/servlet/WebMvcEndpointChildContextConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -21,11 +21,15 @@ import org.springframework.boot.actuate.autoconfigure.web.ManagementContextConfi\n import org.springframework.boot.actuate.autoconfigure.web.ManagementContextType;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\n import org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration;\n import org.springframework.boot.web.servlet.error.ErrorAttributes;\n+import org.springframework.boot.web.servlet.filter.OrderedRequestContextFilter;\n import org.springframework.context.annotation.Bean;\n+import org.springframework.web.context.request.RequestContextListener;\n+import org.springframework.web.filter.RequestContextFilter;\n import org.springframework.web.servlet.DispatcherServlet;\n import org.springframework.web.servlet.config.annotation.EnableWebMvc;\n \n@@ -81,4 +85,11 @@ class WebMvcEndpointChildContextConfiguration {\n \t\treturn new CompositeHandlerExceptionResolver();\n \t}\n \n+\t@Bean\n+\t@ConditionalOnMissingBean({ RequestContextListener.class,\n+\t\t\tRequestContextFilter.class })\n+\tpublic RequestContextFilter requestContextFilter() {\n+\t\treturn new OrderedRequestContextFilter();\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.web.servlet;\n\nimport org.springframework.beans.factory.ListableBeanFactory;\nimport org.springframework.boot.actuate.autoconfigure.web.ManagementContextConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.web.ManagementContextType;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration;\nimport org.springframework.boot.web.servlet.error.ErrorAttributes;\nimport org.springframework.boot.web.servlet.filter.OrderedRequestContextFilter;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.web.context.request.RequestContextListener;\nimport org.springframework.web.filter.RequestContextFilter;\nimport org.springframework.web.servlet.DispatcherServlet;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\n\n/**\n * {@link ManagementContextConfiguration} for Spring MVC infrastructure when a separate\n * management context with a web server running on a different port is required.\n *\n * @author Stephane Nicoll\n * @author Andy Wilkinson\n * @author Phillip Webb\n */\n@ManagementContextConfiguration(ManagementContextType.CHILD)\n@ConditionalOnWebApplication(type = Type.SERVLET)\n@ConditionalOnClass(DispatcherServlet.class)\n@EnableWebMvc\nclass WebMvcEndpointChildContextConfiguration {\n\n\t/*\n\t * The error controller is present but not mapped as an endpoint in this context\n\t * because of the DispatcherServlet having had its HandlerMapping explicitly disabled.\n\t * So we expose the same feature but only for machine endpoints.\n\t */\n\t@Bean\n\t@ConditionalOnBean(ErrorAttributes.class)\n\tpublic ManagementErrorEndpoint errorEndpoint(ErrorAttributes errorAttributes) {\n\t\treturn new ManagementErrorEndpoint(errorAttributes);\n\t}\n\n\t@Bean(name = DispatcherServletAutoConfiguration.DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)\n\tpublic DispatcherServlet dispatcherServlet() {\n\t\tDispatcherServlet dispatcherServlet = new DispatcherServlet();\n\t\t// Ensure the parent configuration does not leak down to us\n\t\tdispatcherServlet.setDetectAllHandlerAdapters(false);\n\t\tdispatcherServlet.setDetectAllHandlerExceptionResolvers(false);\n\t\tdispatcherServlet.setDetectAllHandlerMappings(false);\n\t\tdispatcherServlet.setDetectAllViewResolvers(false);\n\t\treturn dispatcherServlet;\n\t}\n\n\t@Bean(name = DispatcherServlet.HANDLER_MAPPING_BEAN_NAME)\n\tpublic CompositeHandlerMapping compositeHandlerMapping() {\n\t\treturn new CompositeHandlerMapping();\n\t}\n\n\t@Bean(name = DispatcherServlet.HANDLER_ADAPTER_BEAN_NAME)\n\tpublic CompositeHandlerAdapter compositeHandlerAdapter(\n\t\t\tListableBeanFactory beanFactory) {\n\t\treturn new CompositeHandlerAdapter(beanFactory);\n\t}\n\n\t@Bean(name = DispatcherServlet.HANDLER_EXCEPTION_RESOLVER_BEAN_NAME)\n\tpublic CompositeHandlerExceptionResolver compositeHandlerExceptionResolver() {\n\t\treturn new CompositeHandlerExceptionResolver();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean({ RequestContextListener.class,\n\t\t\tRequestContextFilter.class })\n\tpublic RequestContextFilter requestContextFilter() {\n\t\treturn new OrderedRequestContextFilter();\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.web.servlet;\n\nimport org.springframework.beans.factory.ListableBeanFactory;\nimport org.springframework.boot.actuate.autoconfigure.web.ManagementContextConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.web.ManagementContextType;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration;\nimport org.springframework.boot.web.servlet.error.ErrorAttributes;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.web.servlet.DispatcherServlet;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\n\n/**\n * {@link ManagementContextConfiguration} for Spring MVC infrastructure when a separate\n * management context with a web server running on a different port is required.\n *\n * @author Stephane Nicoll\n * @author Andy Wilkinson\n * @author Phillip Webb\n */\n@ManagementContextConfiguration(ManagementContextType.CHILD)\n@ConditionalOnWebApplication(type = Type.SERVLET)\n@ConditionalOnClass(DispatcherServlet.class)\n@EnableWebMvc\nclass WebMvcEndpointChildContextConfiguration {\n\n\t/*\n\t * The error controller is present but not mapped as an endpoint in this context\n\t * because of the DispatcherServlet having had its HandlerMapping explicitly disabled.\n\t * So we expose the same feature but only for machine endpoints.\n\t */\n\t@Bean\n\t@ConditionalOnBean(ErrorAttributes.class)\n\tpublic ManagementErrorEndpoint errorEndpoint(ErrorAttributes errorAttributes) {\n\t\treturn new ManagementErrorEndpoint(errorAttributes);\n\t}\n\n\t@Bean(name = DispatcherServletAutoConfiguration.DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)\n\tpublic DispatcherServlet dispatcherServlet() {\n\t\tDispatcherServlet dispatcherServlet = new DispatcherServlet();\n\t\t// Ensure the parent configuration does not leak down to us\n\t\tdispatcherServlet.setDetectAllHandlerAdapters(false);\n\t\tdispatcherServlet.setDetectAllHandlerExceptionResolvers(false);\n\t\tdispatcherServlet.setDetectAllHandlerMappings(false);\n\t\tdispatcherServlet.setDetectAllViewResolvers(false);\n\t\treturn dispatcherServlet;\n\t}\n\n\t@Bean(name = DispatcherServlet.HANDLER_MAPPING_BEAN_NAME)\n\tpublic CompositeHandlerMapping compositeHandlerMapping() {\n\t\treturn new CompositeHandlerMapping();\n\t}\n\n\t@Bean(name = DispatcherServlet.HANDLER_ADAPTER_BEAN_NAME)\n\tpublic CompositeHandlerAdapter compositeHandlerAdapter(\n\t\t\tListableBeanFactory beanFactory) {\n\t\treturn new CompositeHandlerAdapter(beanFactory);\n\t}\n\n\t@Bean(name = DispatcherServlet.HANDLER_EXCEPTION_RESOLVER_BEAN_NAME)\n\tpublic CompositeHandlerExceptionResolver compositeHandlerExceptionResolver() {\n\t\treturn new CompositeHandlerExceptionResolver();\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
