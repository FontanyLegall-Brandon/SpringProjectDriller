{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -24,6 +24,7 @@ import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n@@ -46,39 +47,44 @@ import org.springframework.jms.support.destination.DestinationResolver;\n @Import(JmsAnnotationDrivenConfiguration.class)\n public class JmsAutoConfiguration {\n \n-\t@Autowired\n-\tprivate JmsProperties properties;\n+\t@Configuration\n+\tprotected static class JmsTemplateConfiguration {\n \n-\t@Autowired\n-\tprivate ConnectionFactory connectionFactory;\n+\t\t@Autowired\n+\t\tprivate JmsProperties properties;\n \n-\t@Autowired\n-\tprivate ObjectProvider<DestinationResolver> destinationResolver;\n+\t\t@Autowired\n+\t\tprivate ObjectProvider<DestinationResolver> destinationResolver;\n \n-\t@Autowired\n-\tprivate ObjectProvider<MessageConverter> messageConverter;\n+\t\t@Autowired\n+\t\tprivate ObjectProvider<MessageConverter> messageConverter;\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean\n+\t\t@ConditionalOnSingleCandidate(ConnectionFactory.class)\n+\t\tpublic JmsTemplate jmsTemplate(ConnectionFactory connectionFactory) {\n+\t\t\tJmsTemplate jmsTemplate = new JmsTemplate(connectionFactory);\n+\t\t\tjmsTemplate.setPubSubDomain(this.properties.isPubSubDomain());\n+\t\t\tDestinationResolver destinationResolver = this.destinationResolver.getIfUnique();\n+\t\t\tif (destinationResolver != null) {\n+\t\t\t\tjmsTemplate.setDestinationResolver(destinationResolver);\n+\t\t\t}\n+\t\t\tMessageConverter messageConverter = this.messageConverter.getIfUnique();\n+\t\t\tif (messageConverter != null) {\n+\t\t\t\tjmsTemplate.setMessageConverter(messageConverter);\n+\t\t\t}\n+\t\t\treturn jmsTemplate;\n \n-\t@Bean\n-\t@ConditionalOnMissingBean\n-\tpublic JmsTemplate jmsTemplate() {\n-\t\tJmsTemplate jmsTemplate = new JmsTemplate(this.connectionFactory);\n-\t\tjmsTemplate.setPubSubDomain(this.properties.isPubSubDomain());\n-\t\tDestinationResolver destinationResolver = this.destinationResolver.getIfUnique();\n-\t\tif (destinationResolver != null) {\n-\t\t\tjmsTemplate.setDestinationResolver(destinationResolver);\n-\t\t}\n-\t\tMessageConverter messageConverter = this.messageConverter.getIfUnique();\n-\t\tif (messageConverter != null) {\n-\t\t\tjmsTemplate.setMessageConverter(messageConverter);\n \t\t}\n-\t\treturn jmsTemplate;\n \t}\n \n \t@ConditionalOnClass(JmsMessagingTemplate.class)\n-\t@ConditionalOnMissingBean(JmsMessagingTemplate.class)\n+\t@Import(JmsTemplateConfiguration.class)\n \tprotected static class MessagingTemplateConfiguration {\n \n \t\t@Bean\n+\t\t@ConditionalOnMissingBean\n+\t\t@ConditionalOnSingleCandidate(JmsTemplate.class)\n \t\tpublic JmsMessagingTemplate jmsMessagingTemplate(JmsTemplate jmsTemplate) {\n \t\t\treturn new JmsMessagingTemplate(jmsTemplate);\n \t\t}\n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jms;\n\nimport javax.jms.ConnectionFactory;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.jms.core.JmsMessagingTemplate;\nimport org.springframework.jms.core.JmsTemplate;\nimport org.springframework.jms.support.converter.MessageConverter;\nimport org.springframework.jms.support.destination.DestinationResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring JMS.\n *\n * @author Greg Turnquist\n * @author Stephane Nicoll\n */\n@Configuration\n@ConditionalOnClass(JmsTemplate.class)\n@ConditionalOnBean(ConnectionFactory.class)\n@EnableConfigurationProperties(JmsProperties.class)\n@Import(JmsAnnotationDrivenConfiguration.class)\npublic class JmsAutoConfiguration {\n\n\t@Configuration\n\tprotected static class JmsTemplateConfiguration {\n\n\t\t@Autowired\n\t\tprivate JmsProperties properties;\n\n\t\t@Autowired\n\t\tprivate ObjectProvider<DestinationResolver> destinationResolver;\n\n\t\t@Autowired\n\t\tprivate ObjectProvider<MessageConverter> messageConverter;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnSingleCandidate(ConnectionFactory.class)\n\t\tpublic JmsTemplate jmsTemplate(ConnectionFactory connectionFactory) {\n\t\t\tJmsTemplate jmsTemplate = new JmsTemplate(connectionFactory);\n\t\t\tjmsTemplate.setPubSubDomain(this.properties.isPubSubDomain());\n\t\t\tDestinationResolver destinationResolver = this.destinationResolver.getIfUnique();\n\t\t\tif (destinationResolver != null) {\n\t\t\t\tjmsTemplate.setDestinationResolver(destinationResolver);\n\t\t\t}\n\t\t\tMessageConverter messageConverter = this.messageConverter.getIfUnique();\n\t\t\tif (messageConverter != null) {\n\t\t\t\tjmsTemplate.setMessageConverter(messageConverter);\n\t\t\t}\n\t\t\treturn jmsTemplate;\n\n\t\t}\n\t}\n\n\t@ConditionalOnClass(JmsMessagingTemplate.class)\n\t@Import(JmsTemplateConfiguration.class)\n\tprotected static class MessagingTemplateConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnSingleCandidate(JmsTemplate.class)\n\t\tpublic JmsMessagingTemplate jmsMessagingTemplate(JmsTemplate jmsTemplate) {\n\t\t\treturn new JmsMessagingTemplate(jmsTemplate);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jms;\n\nimport javax.jms.ConnectionFactory;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.jms.core.JmsMessagingTemplate;\nimport org.springframework.jms.core.JmsTemplate;\nimport org.springframework.jms.support.converter.MessageConverter;\nimport org.springframework.jms.support.destination.DestinationResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring JMS.\n *\n * @author Greg Turnquist\n * @author Stephane Nicoll\n */\n@Configuration\n@ConditionalOnClass(JmsTemplate.class)\n@ConditionalOnBean(ConnectionFactory.class)\n@EnableConfigurationProperties(JmsProperties.class)\n@Import(JmsAnnotationDrivenConfiguration.class)\npublic class JmsAutoConfiguration {\n\n\t@Autowired\n\tprivate JmsProperties properties;\n\n\t@Autowired\n\tprivate ConnectionFactory connectionFactory;\n\n\t@Autowired\n\tprivate ObjectProvider<DestinationResolver> destinationResolver;\n\n\t@Autowired\n\tprivate ObjectProvider<MessageConverter> messageConverter;\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic JmsTemplate jmsTemplate() {\n\t\tJmsTemplate jmsTemplate = new JmsTemplate(this.connectionFactory);\n\t\tjmsTemplate.setPubSubDomain(this.properties.isPubSubDomain());\n\t\tDestinationResolver destinationResolver = this.destinationResolver.getIfUnique();\n\t\tif (destinationResolver != null) {\n\t\t\tjmsTemplate.setDestinationResolver(destinationResolver);\n\t\t}\n\t\tMessageConverter messageConverter = this.messageConverter.getIfUnique();\n\t\tif (messageConverter != null) {\n\t\t\tjmsTemplate.setMessageConverter(messageConverter);\n\t\t}\n\t\treturn jmsTemplate;\n\t}\n\n\t@ConditionalOnClass(JmsMessagingTemplate.class)\n\t@ConditionalOnMissingBean(JmsMessagingTemplate.class)\n\tprotected static class MessagingTemplateConfiguration {\n\n\t\t@Bean\n\t\tpublic JmsMessagingTemplate jmsMessagingTemplate(JmsTemplate jmsTemplate) {\n\t\t\treturn new JmsMessagingTemplate(jmsTemplate);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
