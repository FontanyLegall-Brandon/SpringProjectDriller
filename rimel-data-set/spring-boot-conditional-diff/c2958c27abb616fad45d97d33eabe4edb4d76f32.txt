@@ -0,0 +1,87 @@
+
+
+package org.springframework.boot.actuate.autoconfigure.metrics.web.servlet;
+
+import io.micrometer.core.instrument.MeterRegistry;
+
+import org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties;
+import org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider;
+import org.springframework.boot.actuate.metrics.web.servlet.MetricsHandlerInterceptor;
+import org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetrics;
+import org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
+import org.springframework.boot.context.properties.EnableConfigurationProperties;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.web.servlet.DispatcherServlet;
+import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
+import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
+
+
+@Configuration
+@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)
+@ConditionalOnClass(DispatcherServlet.class)
+@EnableConfigurationProperties(MetricsProperties.class)
+public class WebMvcMetricsConfiguration {
+
+	@Bean
+	@ConditionalOnMissingBean(WebMvcTagsProvider.class)
+	public DefaultWebMvcTagsProvider webmvcTagConfigurer() {
+		return new DefaultWebMvcTagsProvider();
+	}
+
+	@Bean
+	public WebMvcMetrics controllerMetrics(MeterRegistry registry,
+			MetricsProperties properties, WebMvcTagsProvider configurer) {
+		return new WebMvcMetrics(registry, configurer,
+				properties.getWeb().getServer().getRequestsMetricName(),
+				properties.getWeb().getServer().isAutoTimeRequests(),
+				properties.getWeb().getServer().isRecordRequestPercentiles());
+	}
+
+	@Bean
+	public MetricsHandlerInterceptor webMetricsInterceptor(
+			WebMvcMetrics controllerMetrics) {
+		return new MetricsHandlerInterceptor(controllerMetrics);
+	}
+
+	@Configuration
+	public class MetricsServletRequestInterceptorConfiguration
+			implements WebMvcConfigurer {
+
+		private final MetricsHandlerInterceptor handlerInterceptor;
+
+		public MetricsServletRequestInterceptorConfiguration(
+				MetricsHandlerInterceptor handlerInterceptor) {
+			this.handlerInterceptor = handlerInterceptor;
+		}
+
+		@Override
+		public void addInterceptors(InterceptorRegistry registry) {
+			registry.addInterceptor(this.handlerInterceptor);
+		}
+
+	}
+
+}

