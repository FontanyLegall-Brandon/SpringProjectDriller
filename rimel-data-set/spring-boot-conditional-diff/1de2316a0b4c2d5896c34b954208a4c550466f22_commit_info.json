{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/validation/ValidationAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/validation/ValidationAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -28,6 +28,7 @@ import org.springframework.boot.bind.RelaxedPropertyResolver;\n import org.springframework.boot.validation.MessageInterpolatorFactory;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n import org.springframework.context.annotation.Role;\n import org.springframework.core.env.Environment;\n import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;\n@@ -43,12 +44,13 @@ import org.springframework.validation.beanvalidation.MethodValidationPostProcess\n @Configuration\n @ConditionalOnClass(ExecutableValidator.class)\n @ConditionalOnResource(resources = "classpath:META-INF/services/javax.validation.spi.ValidationProvider")\n+@Import(PrimaryDefaultValidatorPostProcessor.class)\n public class ValidationAutoConfiguration {\n \n \t@Bean\n \t@Role(BeanDefinition.ROLE_INFRASTRUCTURE)\n-\t@ConditionalOnMissingBean\n-\tpublic static Validator jsr303Validator() {\n+\t@ConditionalOnMissingBean(Validator.class)\n+\tpublic static LocalValidatorFactoryBean defaultValidator() {\n \t\tLocalValidatorFactoryBean factoryBean = new LocalValidatorFactoryBean();\n \t\tMessageInterpolatorFactory interpolatorFactory = new MessageInterpolatorFactory();\n \t\tfactoryBean.setMessageInterpolator(interpolatorFactory.getObject());\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.validation;\n\nimport javax.validation.Validator;\nimport javax.validation.executable.ExecutableValidator;\n\nimport org.springframework.beans.factory.config.BeanDefinition;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnResource;\nimport org.springframework.boot.bind.RelaxedPropertyResolver;\nimport org.springframework.boot.validation.MessageInterpolatorFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.Role;\nimport org.springframework.core.env.Environment;\nimport org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;\nimport org.springframework.validation.beanvalidation.MethodValidationPostProcessor;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to configure the validation\n * infrastructure.\n *\n * @author Stephane Nicoll\n * @since 1.5.0\n */\n@Configuration\n@ConditionalOnClass(ExecutableValidator.class)\n@ConditionalOnResource(resources = "classpath:META-INF/services/javax.validation.spi.ValidationProvider")\n@Import(PrimaryDefaultValidatorPostProcessor.class)\npublic class ValidationAutoConfiguration {\n\n\t@Bean\n\t@Role(BeanDefinition.ROLE_INFRASTRUCTURE)\n\t@ConditionalOnMissingBean(Validator.class)\n\tpublic static LocalValidatorFactoryBean defaultValidator() {\n\t\tLocalValidatorFactoryBean factoryBean = new LocalValidatorFactoryBean();\n\t\tMessageInterpolatorFactory interpolatorFactory = new MessageInterpolatorFactory();\n\t\tfactoryBean.setMessageInterpolator(interpolatorFactory.getObject());\n\t\treturn factoryBean;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic static MethodValidationPostProcessor methodValidationPostProcessor(\n\t\t\tEnvironment environment, Validator validator) {\n\t\tMethodValidationPostProcessor processor = new MethodValidationPostProcessor();\n\t\tprocessor.setProxyTargetClass(determineProxyTargetClass(environment));\n\t\tprocessor.setValidator(validator);\n\t\treturn processor;\n\t}\n\n\tprivate static boolean determineProxyTargetClass(Environment environment) {\n\t\tRelaxedPropertyResolver resolver = new RelaxedPropertyResolver(environment,\n\t\t\t\t"spring.aop.");\n\t\tBoolean value = resolver.getProperty("proxyTargetClass", Boolean.class);\n\t\treturn (value != null ? value : true);\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.validation;\n\nimport javax.validation.Validator;\nimport javax.validation.executable.ExecutableValidator;\n\nimport org.springframework.beans.factory.config.BeanDefinition;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnResource;\nimport org.springframework.boot.bind.RelaxedPropertyResolver;\nimport org.springframework.boot.validation.MessageInterpolatorFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Role;\nimport org.springframework.core.env.Environment;\nimport org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;\nimport org.springframework.validation.beanvalidation.MethodValidationPostProcessor;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to configure the validation\n * infrastructure.\n *\n * @author Stephane Nicoll\n * @since 1.5.0\n */\n@Configuration\n@ConditionalOnClass(ExecutableValidator.class)\n@ConditionalOnResource(resources = "classpath:META-INF/services/javax.validation.spi.ValidationProvider")\npublic class ValidationAutoConfiguration {\n\n\t@Bean\n\t@Role(BeanDefinition.ROLE_INFRASTRUCTURE)\n\t@ConditionalOnMissingBean\n\tpublic static Validator jsr303Validator() {\n\t\tLocalValidatorFactoryBean factoryBean = new LocalValidatorFactoryBean();\n\t\tMessageInterpolatorFactory interpolatorFactory = new MessageInterpolatorFactory();\n\t\tfactoryBean.setMessageInterpolator(interpolatorFactory.getObject());\n\t\treturn factoryBean;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic static MethodValidationPostProcessor methodValidationPostProcessor(\n\t\t\tEnvironment environment, Validator validator) {\n\t\tMethodValidationPostProcessor processor = new MethodValidationPostProcessor();\n\t\tprocessor.setProxyTargetClass(determineProxyTargetClass(environment));\n\t\tprocessor.setValidator(validator);\n\t\treturn processor;\n\t}\n\n\tprivate static boolean determineProxyTargetClass(Environment environment) {\n\t\tRelaxedPropertyResolver resolver = new RelaxedPropertyResolver(environment,\n\t\t\t\t"spring.aop.");\n\t\tBoolean value = resolver.getProperty("proxyTargetClass", Boolean.class);\n\t\treturn (value != null ? value : true);\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
