{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -33,6 +33,7 @@ import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\n import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\n import org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;\n@@ -87,14 +88,6 @@ public class QuartzAutoConfiguration {\n \t\tthis.applicationContext = applicationContext;\n \t}\n \n-\t@Bean\n-\t@ConditionalOnSingleCandidate(DataSource.class)\n-\t@ConditionalOnMissingBean\n-\tpublic QuartzDatabaseInitializer quartzDatabaseInitializer(DataSource dataSource,\n-\t\t\tResourceLoader resourceLoader) {\n-\t\treturn new QuartzDatabaseInitializer(dataSource, resourceLoader, this.properties);\n-\t}\n-\n \t@Bean\n \t@ConditionalOnMissingBean\n \tpublic SchedulerFactoryBean quartzScheduler() {\n@@ -137,24 +130,42 @@ public class QuartzAutoConfiguration {\n \n \t@Configuration\n \t@ConditionalOnSingleCandidate(DataSource.class)\n+\t@ConditionalOnProperty(prefix = "spring.quartz", name = "job-store-type", havingValue = "jdbc")\n \tprotected static class JdbcStoreTypeConfiguration {\n \n \t\t@Bean\n-\t\tpublic SchedulerFactoryBeanCustomizer dataSourceCustomizer(\n-\t\t\t\tQuartzProperties properties, DataSource dataSource,\n+\t\tpublic static InitializerSchedulerDependencyPostProcessor initializerSchedulerDependencyPostProcessor() {\n+\t\t\treturn new InitializerSchedulerDependencyPostProcessor();\n+\t\t}\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean\n+\t\tpublic QuartzDatabaseInitializer quartzDatabaseInitializer(DataSource dataSource,\n+\t\t\t\tResourceLoader resourceLoader, QuartzProperties properties) {\n+\t\t\treturn new QuartzDatabaseInitializer(dataSource, resourceLoader, properties);\n+\t\t}\n+\n+\t\t@Bean\n+\t\tpublic SchedulerFactoryBeanCustomizer dataSourceCustomizer(DataSource dataSource,\n \t\t\t\tObjectProvider<PlatformTransactionManager> transactionManager) {\n \t\t\treturn schedulerFactoryBean -> {\n-\t\t\t\tif (properties.getJobStoreType() == JobStoreType.JDBC) {\n-\t\t\t\t\tschedulerFactoryBean.setDataSource(dataSource);\n-\t\t\t\t\tPlatformTransactionManager txManager = transactionManager\n-\t\t\t\t\t\t\t.getIfUnique();\n-\t\t\t\t\tif (txManager != null) {\n-\t\t\t\t\t\tschedulerFactoryBean.setTransactionManager(txManager);\n-\t\t\t\t\t}\n+\t\t\t\tschedulerFactoryBean.setDataSource(dataSource);\n+\t\t\t\tPlatformTransactionManager txManager = transactionManager.getIfUnique();\n+\t\t\t\tif (txManager != null) {\n+\t\t\t\t\tschedulerFactoryBean.setTransactionManager(txManager);\n \t\t\t\t}\n \t\t\t};\n \t\t}\n \n+\t\tprivate static class InitializerSchedulerDependencyPostProcessor\n+\t\t\t\textends SchedulerDependsOnPostProcessor {\n+\n+\t\t\tInitializerSchedulerDependencyPostProcessor() {\n+\t\t\t\tsuper("quartzDatabaseInitializer");\n+\t\t\t}\n+\n+\t\t}\n+\n \t}\n \n }\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.quartz;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.concurrent.Executor;\n\nimport javax.sql.DataSource;\n\nimport org.quartz.Calendar;\nimport org.quartz.JobDetail;\nimport org.quartz.Scheduler;\nimport org.quartz.Trigger;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.scheduling.quartz.SchedulerFactoryBean;\nimport org.springframework.transaction.PlatformTransactionManager;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Quartz Scheduler.\n *\n * @author Vedran Pavic\n * @author Stephane Nicoll\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass({ Scheduler.class, SchedulerFactoryBean.class,\n\t\tPlatformTransactionManager.class })\n@EnableConfigurationProperties(QuartzProperties.class)\n@AutoConfigureAfter({ DataSourceAutoConfiguration.class,\n\t\tHibernateJpaAutoConfiguration.class })\npublic class QuartzAutoConfiguration {\n\n\tprivate final QuartzProperties properties;\n\n\tprivate final List<SchedulerFactoryBeanCustomizer> customizers;\n\n\tprivate final Executor taskExecutor;\n\n\tprivate final JobDetail[] jobDetails;\n\n\tprivate final Map<String, Calendar> calendars;\n\n\tprivate final Trigger[] triggers;\n\n\tprivate final ApplicationContext applicationContext;\n\n\tpublic QuartzAutoConfiguration(QuartzProperties properties,\n\t\t\tObjectProvider<List<SchedulerFactoryBeanCustomizer>> customizers,\n\t\t\tObjectProvider<Executor> taskExecutor, ObjectProvider<JobDetail[]> jobDetails,\n\t\t\tObjectProvider<Map<String, Calendar>> calendars,\n\t\t\tObjectProvider<Trigger[]> triggers, ApplicationContext applicationContext) {\n\t\tthis.properties = properties;\n\t\tthis.customizers = customizers.getIfAvailable();\n\t\tthis.taskExecutor = taskExecutor.getIfAvailable();\n\t\tthis.jobDetails = jobDetails.getIfAvailable();\n\t\tthis.calendars = calendars.getIfAvailable();\n\t\tthis.triggers = triggers.getIfAvailable();\n\t\tthis.applicationContext = applicationContext;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic SchedulerFactoryBean quartzScheduler() {\n\t\tSchedulerFactoryBean schedulerFactoryBean = new SchedulerFactoryBean();\n\t\tschedulerFactoryBean.setJobFactory(new AutowireCapableBeanJobFactory(\n\t\t\t\tthis.applicationContext.getAutowireCapableBeanFactory()));\n\t\tif (!this.properties.getProperties().isEmpty()) {\n\t\t\tschedulerFactoryBean\n\t\t\t\t\t.setQuartzProperties(asProperties(this.properties.getProperties()));\n\t\t}\n\t\tif (this.taskExecutor != null) {\n\t\t\tschedulerFactoryBean.setTaskExecutor(this.taskExecutor);\n\t\t}\n\t\tif (this.jobDetails != null && this.jobDetails.length > 0) {\n\t\t\tschedulerFactoryBean.setJobDetails(this.jobDetails);\n\t\t}\n\t\tif (this.calendars != null && !this.calendars.isEmpty()) {\n\t\t\tschedulerFactoryBean.setCalendars(this.calendars);\n\t\t}\n\t\tif (this.triggers != null && this.triggers.length > 0) {\n\t\t\tschedulerFactoryBean.setTriggers(this.triggers);\n\t\t}\n\t\tcustomize(schedulerFactoryBean);\n\t\treturn schedulerFactoryBean;\n\t}\n\n\tprivate Properties asProperties(Map<String, String> source) {\n\t\tProperties properties = new Properties();\n\t\tproperties.putAll(source);\n\t\treturn properties;\n\t}\n\n\tprivate void customize(SchedulerFactoryBean schedulerFactoryBean) {\n\t\tif (this.customizers != null) {\n\t\t\tfor (SchedulerFactoryBeanCustomizer customizer : this.customizers) {\n\t\t\t\tcustomizer.customize(schedulerFactoryBean);\n\t\t\t}\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnSingleCandidate(DataSource.class)\n\t@ConditionalOnProperty(prefix = "spring.quartz", name = "job-store-type", havingValue = "jdbc")\n\tprotected static class JdbcStoreTypeConfiguration {\n\n\t\t@Bean\n\t\tpublic static InitializerSchedulerDependencyPostProcessor initializerSchedulerDependencyPostProcessor() {\n\t\t\treturn new InitializerSchedulerDependencyPostProcessor();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic QuartzDatabaseInitializer quartzDatabaseInitializer(DataSource dataSource,\n\t\t\t\tResourceLoader resourceLoader, QuartzProperties properties) {\n\t\t\treturn new QuartzDatabaseInitializer(dataSource, resourceLoader, properties);\n\t\t}\n\n\t\t@Bean\n\t\tpublic SchedulerFactoryBeanCustomizer dataSourceCustomizer(DataSource dataSource,\n\t\t\t\tObjectProvider<PlatformTransactionManager> transactionManager) {\n\t\t\treturn schedulerFactoryBean -> {\n\t\t\t\tschedulerFactoryBean.setDataSource(dataSource);\n\t\t\t\tPlatformTransactionManager txManager = transactionManager.getIfUnique();\n\t\t\t\tif (txManager != null) {\n\t\t\t\t\tschedulerFactoryBean.setTransactionManager(txManager);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tprivate static class InitializerSchedulerDependencyPostProcessor\n\t\t\t\textends SchedulerDependsOnPostProcessor {\n\n\t\t\tInitializerSchedulerDependencyPostProcessor() {\n\t\t\t\tsuper("quartzDatabaseInitializer");\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.quartz;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.concurrent.Executor;\n\nimport javax.sql.DataSource;\n\nimport org.quartz.Calendar;\nimport org.quartz.JobDetail;\nimport org.quartz.Scheduler;\nimport org.quartz.Trigger;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.scheduling.quartz.SchedulerFactoryBean;\nimport org.springframework.transaction.PlatformTransactionManager;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Quartz Scheduler.\n *\n * @author Vedran Pavic\n * @author Stephane Nicoll\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass({ Scheduler.class, SchedulerFactoryBean.class,\n\t\tPlatformTransactionManager.class })\n@EnableConfigurationProperties(QuartzProperties.class)\n@AutoConfigureAfter({ DataSourceAutoConfiguration.class,\n\t\tHibernateJpaAutoConfiguration.class })\npublic class QuartzAutoConfiguration {\n\n\tprivate final QuartzProperties properties;\n\n\tprivate final List<SchedulerFactoryBeanCustomizer> customizers;\n\n\tprivate final Executor taskExecutor;\n\n\tprivate final JobDetail[] jobDetails;\n\n\tprivate final Map<String, Calendar> calendars;\n\n\tprivate final Trigger[] triggers;\n\n\tprivate final ApplicationContext applicationContext;\n\n\tpublic QuartzAutoConfiguration(QuartzProperties properties,\n\t\t\tObjectProvider<List<SchedulerFactoryBeanCustomizer>> customizers,\n\t\t\tObjectProvider<Executor> taskExecutor, ObjectProvider<JobDetail[]> jobDetails,\n\t\t\tObjectProvider<Map<String, Calendar>> calendars,\n\t\t\tObjectProvider<Trigger[]> triggers, ApplicationContext applicationContext) {\n\t\tthis.properties = properties;\n\t\tthis.customizers = customizers.getIfAvailable();\n\t\tthis.taskExecutor = taskExecutor.getIfAvailable();\n\t\tthis.jobDetails = jobDetails.getIfAvailable();\n\t\tthis.calendars = calendars.getIfAvailable();\n\t\tthis.triggers = triggers.getIfAvailable();\n\t\tthis.applicationContext = applicationContext;\n\t}\n\n\t@Bean\n\t@ConditionalOnSingleCandidate(DataSource.class)\n\t@ConditionalOnMissingBean\n\tpublic QuartzDatabaseInitializer quartzDatabaseInitializer(DataSource dataSource,\n\t\t\tResourceLoader resourceLoader) {\n\t\treturn new QuartzDatabaseInitializer(dataSource, resourceLoader, this.properties);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic SchedulerFactoryBean quartzScheduler() {\n\t\tSchedulerFactoryBean schedulerFactoryBean = new SchedulerFactoryBean();\n\t\tschedulerFactoryBean.setJobFactory(new AutowireCapableBeanJobFactory(\n\t\t\t\tthis.applicationContext.getAutowireCapableBeanFactory()));\n\t\tif (!this.properties.getProperties().isEmpty()) {\n\t\t\tschedulerFactoryBean\n\t\t\t\t\t.setQuartzProperties(asProperties(this.properties.getProperties()));\n\t\t}\n\t\tif (this.taskExecutor != null) {\n\t\t\tschedulerFactoryBean.setTaskExecutor(this.taskExecutor);\n\t\t}\n\t\tif (this.jobDetails != null && this.jobDetails.length > 0) {\n\t\t\tschedulerFactoryBean.setJobDetails(this.jobDetails);\n\t\t}\n\t\tif (this.calendars != null && !this.calendars.isEmpty()) {\n\t\t\tschedulerFactoryBean.setCalendars(this.calendars);\n\t\t}\n\t\tif (this.triggers != null && this.triggers.length > 0) {\n\t\t\tschedulerFactoryBean.setTriggers(this.triggers);\n\t\t}\n\t\tcustomize(schedulerFactoryBean);\n\t\treturn schedulerFactoryBean;\n\t}\n\n\tprivate Properties asProperties(Map<String, String> source) {\n\t\tProperties properties = new Properties();\n\t\tproperties.putAll(source);\n\t\treturn properties;\n\t}\n\n\tprivate void customize(SchedulerFactoryBean schedulerFactoryBean) {\n\t\tif (this.customizers != null) {\n\t\t\tfor (SchedulerFactoryBeanCustomizer customizer : this.customizers) {\n\t\t\t\tcustomizer.customize(schedulerFactoryBean);\n\t\t\t}\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnSingleCandidate(DataSource.class)\n\tprotected static class JdbcStoreTypeConfiguration {\n\n\t\t@Bean\n\t\tpublic SchedulerFactoryBeanCustomizer dataSourceCustomizer(\n\t\t\t\tQuartzProperties properties, DataSource dataSource,\n\t\t\t\tObjectProvider<PlatformTransactionManager> transactionManager) {\n\t\t\treturn schedulerFactoryBean -> {\n\t\t\t\tif (properties.getJobStoreType() == JobStoreType.JDBC) {\n\t\t\t\t\tschedulerFactoryBean.setDataSource(dataSource);\n\t\t\t\t\tPlatformTransactionManager txManager = transactionManager\n\t\t\t\t\t\t\t.getIfUnique();\n\t\t\t\t\tif (txManager != null) {\n\t\t\t\t\t\tschedulerFactoryBean.setTransactionManager(txManager);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
