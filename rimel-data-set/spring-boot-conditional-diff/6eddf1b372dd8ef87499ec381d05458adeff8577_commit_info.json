{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAnnotationDrivenConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAnnotationDrivenConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -17,6 +17,7 @@\n package org.springframework.boot.autoconfigure.amqp;\n \n import org.springframework.amqp.rabbit.annotation.EnableRabbit;\n+import org.springframework.amqp.rabbit.config.DirectRabbitListenerContainerFactory;\n import org.springframework.amqp.rabbit.config.RabbitListenerConfigUtils;\n import org.springframework.amqp.rabbit.config.SimpleRabbitListenerContainerFactory;\n import org.springframework.amqp.rabbit.connection.ConnectionFactory;\n@@ -25,6 +26,7 @@ import org.springframework.amqp.support.converter.MessageConverter;\n import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n@@ -39,11 +41,11 @@ import org.springframework.context.annotation.Configuration;\n @ConditionalOnClass(EnableRabbit.class)\n class RabbitAnnotationDrivenConfiguration {\n \n-\tprivate final ObjectProvider<MessageConverter> messageConverter;\n+\tprotected final ObjectProvider<MessageConverter> messageConverter;\n \n-\tprivate final ObjectProvider<MessageRecoverer> messageRecoverer;\n+\tprotected final ObjectProvider<MessageRecoverer> messageRecoverer;\n \n-\tprivate final RabbitProperties properties;\n+\tprotected final RabbitProperties properties;\n \n \tRabbitAnnotationDrivenConfiguration(ObjectProvider<MessageConverter> messageConverter,\n \t\t\tObjectProvider<MessageRecoverer> messageRecoverer,\n@@ -53,24 +55,68 @@ class RabbitAnnotationDrivenConfiguration {\n \t\tthis.properties = properties;\n \t}\n \n-\t@Bean\n-\t@ConditionalOnMissingBean\n-\tpublic SimpleRabbitListenerContainerFactoryConfigurer rabbitListenerContainerFactoryConfigurer() {\n-\t\tSimpleRabbitListenerContainerFactoryConfigurer configurer = new SimpleRabbitListenerContainerFactoryConfigurer();\n-\t\tconfigurer.setMessageConverter(this.messageConverter.getIfUnique());\n-\t\tconfigurer.setMessageRecoverer(this.messageRecoverer.getIfUnique());\n-\t\tconfigurer.setRabbitProperties(this.properties);\n-\t\treturn configurer;\n+\n+\t@Configuration\n+\t@ConditionalOnProperty(prefix = "spring.rabbitmq", name = "listener.type", havingValue = "simple",\n+\t\t\t\t\t\t\tmatchIfMissing = true)\n+\tpublic static class SimpleContainerConfiguration extends RabbitAnnotationDrivenConfiguration {\n+\n+\t\tSimpleContainerConfiguration(ObjectProvider<MessageConverter> messageConverter,\n+\t\t\t\tObjectProvider<MessageRecoverer> messageRecoverer, RabbitProperties properties) {\n+\t\t\tsuper(messageConverter, messageRecoverer, properties);\n+\t\t}\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean\n+\t\tpublic SimpleRabbitListenerContainerFactoryConfigurer rabbitListenerContainerFactoryConfigurer() {\n+\t\t\tSimpleRabbitListenerContainerFactoryConfigurer configurer =\n+\t\t\t\t\tnew SimpleRabbitListenerContainerFactoryConfigurer();\n+\t\t\tconfigurer.setMessageConverter(this.messageConverter.getIfUnique());\n+\t\t\tconfigurer.setMessageRecoverer(this.messageRecoverer.getIfUnique());\n+\t\t\tconfigurer.setRabbitProperties(this.properties);\n+\t\t\treturn configurer;\n+\t\t}\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(name = "rabbitListenerContainerFactory")\n+\t\tpublic SimpleRabbitListenerContainerFactory rabbitListenerContainerFactory(\n+\t\t\t\tSimpleRabbitListenerContainerFactoryConfigurer configurer,\n+\t\t\t\tConnectionFactory connectionFactory) {\n+\t\t\tSimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory();\n+\t\t\tconfigurer.configure(factory, connectionFactory);\n+\t\t\treturn factory;\n+\t\t}\n \t}\n \n-\t@Bean\n-\t@ConditionalOnMissingBean(name = "rabbitListenerContainerFactory")\n-\tpublic SimpleRabbitListenerContainerFactory rabbitListenerContainerFactory(\n-\t\t\tSimpleRabbitListenerContainerFactoryConfigurer configurer,\n-\t\t\tConnectionFactory connectionFactory) {\n-\t\tSimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory();\n-\t\tconfigurer.configure(factory, connectionFactory);\n-\t\treturn factory;\n+\t@Configuration\n+\t@ConditionalOnProperty(prefix = "spring.rabbitmq", name = "listener.type", havingValue = "direct")\n+\tpublic static class DirectContainerConfiguration extends RabbitAnnotationDrivenConfiguration {\n+\n+\t\tDirectContainerConfiguration(ObjectProvider<MessageConverter> messageConverter,\n+\t\t\t\tObjectProvider<MessageRecoverer> messageRecoverer, RabbitProperties properties) {\n+\t\t\tsuper(messageConverter, messageRecoverer, properties);\n+\t\t}\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean\n+\t\tpublic DirectRabbitListenerContainerFactoryConfigurer rabbitListenerContainerFactoryConfigurer() {\n+\t\t\tDirectRabbitListenerContainerFactoryConfigurer configurer =\n+\t\t\t\t\tnew DirectRabbitListenerContainerFactoryConfigurer();\n+\t\t\tconfigurer.setMessageConverter(this.messageConverter.getIfUnique());\n+\t\t\tconfigurer.setMessageRecoverer(this.messageRecoverer.getIfUnique());\n+\t\t\tconfigurer.setRabbitProperties(this.properties);\n+\t\t\treturn configurer;\n+\t\t}\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(name = "rabbitListenerContainerFactory")\n+\t\tpublic DirectRabbitListenerContainerFactory rabbitListenerContainerFactory(\n+\t\t\t\tDirectRabbitListenerContainerFactoryConfigurer configurer,\n+\t\t\t\tConnectionFactory connectionFactory) {\n+\t\t\tDirectRabbitListenerContainerFactory factory = new DirectRabbitListenerContainerFactory();\n+\t\t\tconfigurer.configure(factory, connectionFactory);\n+\t\t\treturn factory;\n+\t\t}\n \t}\n \n \t@EnableRabbit\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.amqp;\n\nimport org.springframework.amqp.rabbit.annotation.EnableRabbit;\nimport org.springframework.amqp.rabbit.config.DirectRabbitListenerContainerFactory;\nimport org.springframework.amqp.rabbit.config.RabbitListenerConfigUtils;\nimport org.springframework.amqp.rabbit.config.SimpleRabbitListenerContainerFactory;\nimport org.springframework.amqp.rabbit.connection.ConnectionFactory;\nimport org.springframework.amqp.rabbit.retry.MessageRecoverer;\nimport org.springframework.amqp.support.converter.MessageConverter;\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Configuration for Spring AMQP annotation driven endpoints.\n *\n * @author Stephane Nicoll\n * @author Josh Thornhill\n * @since 1.2.0\n */\n@Configuration\n@ConditionalOnClass(EnableRabbit.class)\nclass RabbitAnnotationDrivenConfiguration {\n\n\tprotected final ObjectProvider<MessageConverter> messageConverter;\n\n\tprotected final ObjectProvider<MessageRecoverer> messageRecoverer;\n\n\tprotected final RabbitProperties properties;\n\n\tRabbitAnnotationDrivenConfiguration(ObjectProvider<MessageConverter> messageConverter,\n\t\t\tObjectProvider<MessageRecoverer> messageRecoverer,\n\t\t\tRabbitProperties properties) {\n\t\tthis.messageConverter = messageConverter;\n\t\tthis.messageRecoverer = messageRecoverer;\n\t\tthis.properties = properties;\n\t}\n\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "spring.rabbitmq", name = "listener.type", havingValue = "simple",\n\t\t\t\t\t\t\tmatchIfMissing = true)\n\tpublic static class SimpleContainerConfiguration extends RabbitAnnotationDrivenConfiguration {\n\n\t\tSimpleContainerConfiguration(ObjectProvider<MessageConverter> messageConverter,\n\t\t\t\tObjectProvider<MessageRecoverer> messageRecoverer, RabbitProperties properties) {\n\t\t\tsuper(messageConverter, messageRecoverer, properties);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic SimpleRabbitListenerContainerFactoryConfigurer rabbitListenerContainerFactoryConfigurer() {\n\t\t\tSimpleRabbitListenerContainerFactoryConfigurer configurer =\n\t\t\t\t\tnew SimpleRabbitListenerContainerFactoryConfigurer();\n\t\t\tconfigurer.setMessageConverter(this.messageConverter.getIfUnique());\n\t\t\tconfigurer.setMessageRecoverer(this.messageRecoverer.getIfUnique());\n\t\t\tconfigurer.setRabbitProperties(this.properties);\n\t\t\treturn configurer;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "rabbitListenerContainerFactory")\n\t\tpublic SimpleRabbitListenerContainerFactory rabbitListenerContainerFactory(\n\t\t\t\tSimpleRabbitListenerContainerFactoryConfigurer configurer,\n\t\t\t\tConnectionFactory connectionFactory) {\n\t\t\tSimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory();\n\t\t\tconfigurer.configure(factory, connectionFactory);\n\t\t\treturn factory;\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "spring.rabbitmq", name = "listener.type", havingValue = "direct")\n\tpublic static class DirectContainerConfiguration extends RabbitAnnotationDrivenConfiguration {\n\n\t\tDirectContainerConfiguration(ObjectProvider<MessageConverter> messageConverter,\n\t\t\t\tObjectProvider<MessageRecoverer> messageRecoverer, RabbitProperties properties) {\n\t\t\tsuper(messageConverter, messageRecoverer, properties);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic DirectRabbitListenerContainerFactoryConfigurer rabbitListenerContainerFactoryConfigurer() {\n\t\t\tDirectRabbitListenerContainerFactoryConfigurer configurer =\n\t\t\t\t\tnew DirectRabbitListenerContainerFactoryConfigurer();\n\t\t\tconfigurer.setMessageConverter(this.messageConverter.getIfUnique());\n\t\t\tconfigurer.setMessageRecoverer(this.messageRecoverer.getIfUnique());\n\t\t\tconfigurer.setRabbitProperties(this.properties);\n\t\t\treturn configurer;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "rabbitListenerContainerFactory")\n\t\tpublic DirectRabbitListenerContainerFactory rabbitListenerContainerFactory(\n\t\t\t\tDirectRabbitListenerContainerFactoryConfigurer configurer,\n\t\t\t\tConnectionFactory connectionFactory) {\n\t\t\tDirectRabbitListenerContainerFactory factory = new DirectRabbitListenerContainerFactory();\n\t\t\tconfigurer.configure(factory, connectionFactory);\n\t\t\treturn factory;\n\t\t}\n\t}\n\n\t@EnableRabbit\n\t@ConditionalOnMissingBean(name = RabbitListenerConfigUtils.RABBIT_LISTENER_ANNOTATION_PROCESSOR_BEAN_NAME)\n\tprotected static class EnableRabbitConfiguration {\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.amqp;\n\nimport org.springframework.amqp.rabbit.annotation.EnableRabbit;\nimport org.springframework.amqp.rabbit.config.RabbitListenerConfigUtils;\nimport org.springframework.amqp.rabbit.config.SimpleRabbitListenerContainerFactory;\nimport org.springframework.amqp.rabbit.connection.ConnectionFactory;\nimport org.springframework.amqp.rabbit.retry.MessageRecoverer;\nimport org.springframework.amqp.support.converter.MessageConverter;\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Configuration for Spring AMQP annotation driven endpoints.\n *\n * @author Stephane Nicoll\n * @author Josh Thornhill\n * @since 1.2.0\n */\n@Configuration\n@ConditionalOnClass(EnableRabbit.class)\nclass RabbitAnnotationDrivenConfiguration {\n\n\tprivate final ObjectProvider<MessageConverter> messageConverter;\n\n\tprivate final ObjectProvider<MessageRecoverer> messageRecoverer;\n\n\tprivate final RabbitProperties properties;\n\n\tRabbitAnnotationDrivenConfiguration(ObjectProvider<MessageConverter> messageConverter,\n\t\t\tObjectProvider<MessageRecoverer> messageRecoverer,\n\t\t\tRabbitProperties properties) {\n\t\tthis.messageConverter = messageConverter;\n\t\tthis.messageRecoverer = messageRecoverer;\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic SimpleRabbitListenerContainerFactoryConfigurer rabbitListenerContainerFactoryConfigurer() {\n\t\tSimpleRabbitListenerContainerFactoryConfigurer configurer = new SimpleRabbitListenerContainerFactoryConfigurer();\n\t\tconfigurer.setMessageConverter(this.messageConverter.getIfUnique());\n\t\tconfigurer.setMessageRecoverer(this.messageRecoverer.getIfUnique());\n\t\tconfigurer.setRabbitProperties(this.properties);\n\t\treturn configurer;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "rabbitListenerContainerFactory")\n\tpublic SimpleRabbitListenerContainerFactory rabbitListenerContainerFactory(\n\t\t\tSimpleRabbitListenerContainerFactoryConfigurer configurer,\n\t\t\tConnectionFactory connectionFactory) {\n\t\tSimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory();\n\t\tconfigurer.configure(factory, connectionFactory);\n\t\treturn factory;\n\t}\n\n\t@EnableRabbit\n\t@ConditionalOnMissingBean(name = RabbitListenerConfigUtils.RABBIT_LISTENER_ANNOTATION_PROCESSOR_BEAN_NAME)\n\tprotected static class EnableRabbitConfiguration {\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
