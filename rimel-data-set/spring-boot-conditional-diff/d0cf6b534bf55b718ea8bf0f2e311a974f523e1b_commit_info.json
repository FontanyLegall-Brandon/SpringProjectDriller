{'_old_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -27,6 +27,7 @@ import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.web.filter.OncePerRequestFilter;\n@@ -45,6 +46,7 @@ import org.springframework.web.servlet.HandlerMapping;\n @ConditionalOnClass({ Servlet.class, ServletRegistration.class,\n \t\tOncePerRequestFilter.class, HandlerMapping.class })\n @AutoConfigureAfter(MetricRepositoryAutoConfiguration.class)\n+@ConditionalOnProperty(name="endpoints.metrics.filter.enabled", matchIfMissing=true)\n public class MetricFilterAutoConfiguration {\n \n \t@Autowired\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport javax.servlet.Filter;\nimport javax.servlet.Servlet;\nimport javax.servlet.ServletRegistration;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuate.metrics.CounterService;\nimport org.springframework.boot.actuate.metrics.GaugeService;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.filter.OncePerRequestFilter;\nimport org.springframework.web.servlet.HandlerMapping;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} that records Servlet interactions\n * with a {@link CounterService} and {@link GaugeService}.\n *\n * @author Dave Syer\n * @author Phillip Webb\n * @author Andy Wilkinson\n */\n@Configuration\n@ConditionalOnBean({ CounterService.class, GaugeService.class })\n@ConditionalOnClass({ Servlet.class, ServletRegistration.class,\n\t\tOncePerRequestFilter.class, HandlerMapping.class })\n@AutoConfigureAfter(MetricRepositoryAutoConfiguration.class)\n@ConditionalOnProperty(name="endpoints.metrics.filter.enabled", matchIfMissing=true)\npublic class MetricFilterAutoConfiguration {\n\n\t@Autowired\n\tprivate CounterService counterService;\n\n\t@Autowired\n\tprivate GaugeService gaugeService;\n\n\t@Bean\n\tpublic Filter metricFilter() {\n\t\treturn new MetricsFilter(this.counterService, this.gaugeService);\n\t}\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport javax.servlet.Filter;\nimport javax.servlet.Servlet;\nimport javax.servlet.ServletRegistration;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuate.metrics.CounterService;\nimport org.springframework.boot.actuate.metrics.GaugeService;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.filter.OncePerRequestFilter;\nimport org.springframework.web.servlet.HandlerMapping;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} that records Servlet interactions\n * with a {@link CounterService} and {@link GaugeService}.\n *\n * @author Dave Syer\n * @author Phillip Webb\n * @author Andy Wilkinson\n */\n@Configuration\n@ConditionalOnBean({ CounterService.class, GaugeService.class })\n@ConditionalOnClass({ Servlet.class, ServletRegistration.class,\n\t\tOncePerRequestFilter.class, HandlerMapping.class })\n@AutoConfigureAfter(MetricRepositoryAutoConfiguration.class)\npublic class MetricFilterAutoConfiguration {\n\n\t@Autowired\n\tprivate CounterService counterService;\n\n\t@Autowired\n\tprivate GaugeService gaugeService;\n\n\t@Bean\n\tpublic Filter metricFilter() {\n\t\treturn new MetricsFilter(this.counterService, this.gaugeService);\n\t}\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
