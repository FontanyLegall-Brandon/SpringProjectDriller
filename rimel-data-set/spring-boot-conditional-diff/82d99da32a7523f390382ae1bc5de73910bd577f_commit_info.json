{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -33,6 +33,7 @@ import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.ConditionContext;\n import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.support.AbstractApplicationContext;\n import org.springframework.context.support.ResourceBundleMessageSource;\n import org.springframework.core.Ordered;\n import org.springframework.core.io.Resource;\n@@ -49,7 +50,7 @@ import org.springframework.util.StringUtils;\n  * @author Eddú Meléndez\n  */\n @Configuration\n-@ConditionalOnMissingBean(value = MessageSource.class, search = SearchStrategy.CURRENT)\n+@ConditionalOnMissingBean(name = AbstractApplicationContext.MESSAGE_SOURCE_BEAN_NAME, search = SearchStrategy.CURRENT)\n @AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)\n @Conditional(ResourceBundleCondition.class)\n @EnableConfigurationProperties\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.context;\n\nimport java.time.Duration;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureOrder;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionMessage;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration.ResourceBundleCondition;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.MessageSource;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.support.AbstractApplicationContext;\nimport org.springframework.context.support.ResourceBundleMessageSource;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.support.PathMatchingResourcePatternResolver;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.util.ConcurrentReferenceHashMap;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link MessageSource}.\n *\n * @author Dave Syer\n * @author Phillip Webb\n * @author Eddú Meléndez\n */\n@Configuration\n@ConditionalOnMissingBean(name = AbstractApplicationContext.MESSAGE_SOURCE_BEAN_NAME, search = SearchStrategy.CURRENT)\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)\n@Conditional(ResourceBundleCondition.class)\n@EnableConfigurationProperties\npublic class MessageSourceAutoConfiguration {\n\n\tprivate static final Resource[] NO_RESOURCES = {};\n\n\t@Bean\n\t@ConfigurationProperties(prefix = "spring.messages")\n\tpublic MessageSourceProperties messageSourceProperties() {\n\t\treturn new MessageSourceProperties();\n\t}\n\n\t@Bean\n\tpublic MessageSource messageSource(MessageSourceProperties properties) {\n\t\tResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\n\t\tif (StringUtils.hasText(properties.getBasename())) {\n\t\t\tmessageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(\n\t\t\t\t\tStringUtils.trimAllWhitespace(properties.getBasename())));\n\t\t}\n\t\tif (properties.getEncoding() != null) {\n\t\t\tmessageSource.setDefaultEncoding(properties.getEncoding().name());\n\t\t}\n\t\tmessageSource.setFallbackToSystemLocale(properties.isFallbackToSystemLocale());\n\t\tDuration cacheDuration = properties.getCacheDuration();\n\t\tif (cacheDuration != null) {\n\t\t\tmessageSource.setCacheMillis(cacheDuration.toMillis());\n\t\t}\n\t\tmessageSource.setAlwaysUseMessageFormat(properties.isAlwaysUseMessageFormat());\n\t\tmessageSource.setUseCodeAsDefaultMessage(properties.isUseCodeAsDefaultMessage());\n\t\treturn messageSource;\n\t}\n\n\tprotected static class ResourceBundleCondition extends SpringBootCondition {\n\n\t\tprivate static ConcurrentReferenceHashMap<String, ConditionOutcome> cache = new ConcurrentReferenceHashMap<>();\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tString basename = context.getEnvironment()\n\t\t\t\t\t.getProperty("spring.messages.basename", "messages");\n\t\t\tConditionOutcome outcome = cache.get(basename);\n\t\t\tif (outcome == null) {\n\t\t\t\toutcome = getMatchOutcomeForBasename(context, basename);\n\t\t\t\tcache.put(basename, outcome);\n\t\t\t}\n\t\t\treturn outcome;\n\t\t}\n\n\t\tprivate ConditionOutcome getMatchOutcomeForBasename(ConditionContext context,\n\t\t\t\tString basename) {\n\t\t\tConditionMessage.Builder message = ConditionMessage\n\t\t\t\t\t.forCondition("ResourceBundle");\n\t\t\tfor (String name : StringUtils.commaDelimitedListToStringArray(\n\t\t\t\t\tStringUtils.trimAllWhitespace(basename))) {\n\t\t\t\tfor (Resource resource : getResources(context.getClassLoader(), name)) {\n\t\t\t\t\tif (resource.exists()) {\n\t\t\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t\t\t.match(message.found("bundle").items(resource));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn ConditionOutcome.noMatch(\n\t\t\t\t\tmessage.didNotFind("bundle with basename " + basename).atAll());\n\t\t}\n\n\t\tprivate Resource[] getResources(ClassLoader classLoader, String name) {\n\t\t\tString target = name.replace(\'.\', \'/\');\n\t\t\ttry {\n\t\t\t\treturn new PathMatchingResourcePatternResolver(classLoader)\n\t\t\t\t\t\t.getResources("classpath*:" + target + ".properties");\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\treturn NO_RESOURCES;\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.context;\n\nimport java.time.Duration;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureOrder;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionMessage;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration.ResourceBundleCondition;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.MessageSource;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.support.ResourceBundleMessageSource;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.support.PathMatchingResourcePatternResolver;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.util.ConcurrentReferenceHashMap;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link MessageSource}.\n *\n * @author Dave Syer\n * @author Phillip Webb\n * @author Eddú Meléndez\n */\n@Configuration\n@ConditionalOnMissingBean(value = MessageSource.class, search = SearchStrategy.CURRENT)\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)\n@Conditional(ResourceBundleCondition.class)\n@EnableConfigurationProperties\npublic class MessageSourceAutoConfiguration {\n\n\tprivate static final Resource[] NO_RESOURCES = {};\n\n\t@Bean\n\t@ConfigurationProperties(prefix = "spring.messages")\n\tpublic MessageSourceProperties messageSourceProperties() {\n\t\treturn new MessageSourceProperties();\n\t}\n\n\t@Bean\n\tpublic MessageSource messageSource(MessageSourceProperties properties) {\n\t\tResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\n\t\tif (StringUtils.hasText(properties.getBasename())) {\n\t\t\tmessageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(\n\t\t\t\t\tStringUtils.trimAllWhitespace(properties.getBasename())));\n\t\t}\n\t\tif (properties.getEncoding() != null) {\n\t\t\tmessageSource.setDefaultEncoding(properties.getEncoding().name());\n\t\t}\n\t\tmessageSource.setFallbackToSystemLocale(properties.isFallbackToSystemLocale());\n\t\tDuration cacheDuration = properties.getCacheDuration();\n\t\tif (cacheDuration != null) {\n\t\t\tmessageSource.setCacheMillis(cacheDuration.toMillis());\n\t\t}\n\t\tmessageSource.setAlwaysUseMessageFormat(properties.isAlwaysUseMessageFormat());\n\t\tmessageSource.setUseCodeAsDefaultMessage(properties.isUseCodeAsDefaultMessage());\n\t\treturn messageSource;\n\t}\n\n\tprotected static class ResourceBundleCondition extends SpringBootCondition {\n\n\t\tprivate static ConcurrentReferenceHashMap<String, ConditionOutcome> cache = new ConcurrentReferenceHashMap<>();\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tString basename = context.getEnvironment()\n\t\t\t\t\t.getProperty("spring.messages.basename", "messages");\n\t\t\tConditionOutcome outcome = cache.get(basename);\n\t\t\tif (outcome == null) {\n\t\t\t\toutcome = getMatchOutcomeForBasename(context, basename);\n\t\t\t\tcache.put(basename, outcome);\n\t\t\t}\n\t\t\treturn outcome;\n\t\t}\n\n\t\tprivate ConditionOutcome getMatchOutcomeForBasename(ConditionContext context,\n\t\t\t\tString basename) {\n\t\t\tConditionMessage.Builder message = ConditionMessage\n\t\t\t\t\t.forCondition("ResourceBundle");\n\t\t\tfor (String name : StringUtils.commaDelimitedListToStringArray(\n\t\t\t\t\tStringUtils.trimAllWhitespace(basename))) {\n\t\t\t\tfor (Resource resource : getResources(context.getClassLoader(), name)) {\n\t\t\t\t\tif (resource.exists()) {\n\t\t\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t\t\t.match(message.found("bundle").items(resource));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn ConditionOutcome.noMatch(\n\t\t\t\t\tmessage.didNotFind("bundle with basename " + basename).atAll());\n\t\t}\n\n\t\tprivate Resource[] getResources(ClassLoader classLoader, String name) {\n\t\t\tString target = name.replace(\'.\', \'/\');\n\t\t\ttry {\n\t\t\t\treturn new PathMatchingResourcePatternResolver(classLoader)\n\t\t\t\t\t\t.getResources("classpath*:" + target + ".properties");\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\treturn NO_RESOURCES;\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
