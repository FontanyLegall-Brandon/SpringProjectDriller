{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/simple/SimpleExportConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/simple/SimpleExportConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -17,6 +17,7 @@\n package org.springframework.boot.actuate.autoconfigure.metrics.export.simple;\n \n import io.micrometer.core.instrument.Clock;\n+import io.micrometer.core.instrument.simple.SimpleConfig;\n import io.micrometer.core.instrument.simple.SimpleMeterRegistry;\n \n import org.springframework.boot.actuate.autoconfigure.metrics.export.MetricsExporter;\n@@ -39,8 +40,8 @@ public class SimpleExportConfiguration {\n \t@Bean\n \t@ConditionalOnProperty(value = "spring.metrics.export.simple.enabled", matchIfMissing = true)\n \t@ConditionalOnMissingBean(MetricsExporter.class)\n-\tpublic MetricsExporter simpleExporter(Clock clock) {\n-\t\treturn () -> new SimpleMeterRegistry(clock);\n+\tpublic MetricsExporter simpleExporter(SimpleConfig config, Clock clock) {\n+\t\treturn () -> new SimpleMeterRegistry(config, clock);\n \t}\n \n \t@Bean\n@@ -49,4 +50,9 @@ public class SimpleExportConfiguration {\n \t\treturn Clock.SYSTEM;\n \t}\n \n+\t@Bean\n+\t@ConditionalOnMissingBean(SimpleConfig.class)\n+\tpublic SimpleConfig simpleConfig(SimpleProperties simpleProperties) {\n+\t\treturn new SimplePropertiesConfigAdapter(simpleProperties);\n+\t}\n }\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics.export.simple;\n\nimport io.micrometer.core.instrument.Clock;\nimport io.micrometer.core.instrument.simple.SimpleConfig;\nimport io.micrometer.core.instrument.simple.SimpleMeterRegistry;\n\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.MetricsExporter;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Configuration for exporting metrics to a {@link SimpleMeterRegistry}.\n *\n * @author Jon Schneider\n * @since 2.0.0\n */\n@Configuration\n@EnableConfigurationProperties(SimpleProperties.class)\npublic class SimpleExportConfiguration {\n\n\t@Bean\n\t@ConditionalOnProperty(value = "spring.metrics.export.simple.enabled", matchIfMissing = true)\n\t@ConditionalOnMissingBean(MetricsExporter.class)\n\tpublic MetricsExporter simpleExporter(SimpleConfig config, Clock clock) {\n\t\treturn () -> new SimpleMeterRegistry(config, clock);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic Clock micrometerClock() {\n\t\treturn Clock.SYSTEM;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(SimpleConfig.class)\n\tpublic SimpleConfig simpleConfig(SimpleProperties simpleProperties) {\n\t\treturn new SimplePropertiesConfigAdapter(simpleProperties);\n\t}\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics.export.simple;\n\nimport io.micrometer.core.instrument.Clock;\nimport io.micrometer.core.instrument.simple.SimpleMeterRegistry;\n\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.MetricsExporter;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Configuration for exporting metrics to a {@link SimpleMeterRegistry}.\n *\n * @author Jon Schneider\n * @since 2.0.0\n */\n@Configuration\n@EnableConfigurationProperties(SimpleProperties.class)\npublic class SimpleExportConfiguration {\n\n\t@Bean\n\t@ConditionalOnProperty(value = "spring.metrics.export.simple.enabled", matchIfMissing = true)\n\t@ConditionalOnMissingBean(MetricsExporter.class)\n\tpublic MetricsExporter simpleExporter(Clock clock) {\n\t\treturn () -> new SimpleMeterRegistry(clock);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic Clock micrometerClock() {\n\t\treturn Clock.SYSTEM;\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
