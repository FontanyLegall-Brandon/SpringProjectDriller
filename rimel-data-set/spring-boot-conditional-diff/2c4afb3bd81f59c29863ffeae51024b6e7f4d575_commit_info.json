{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/JdbcTemplateAutoConfigurationTests.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/JdbcTemplateAutoConfigurationTests.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,13 +16,27 @@\n \n package org.springframework.boot.autoconfigure.jdbc;\n \n+import java.util.HashMap;\n+import java.util.Map;\n+\n import javax.sql.DataSource;\n \n import org.junit.Test;\n \n+import org.springframework.beans.BeansException;\n+import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n+import org.springframework.beans.factory.config.BeanDefinition;\n+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n+import org.springframework.beans.factory.support.BeanDefinitionRegistry;\n+import org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;\n import org.springframework.boot.autoconfigure.AutoConfigurations;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\n import org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration;\n import org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n@@ -33,6 +47,7 @@ import org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations;\n import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.fail;\n import static org.mockito.Mockito.mock;\n \n /**\n@@ -41,6 +56,7 @@ import static org.mockito.Mockito.mock;\n  * @author Dave Syer\n  * @author Stephane Nicoll\n  * @author Kazuki Shimizu\n+ * @author Dan Zheng\n  */\n public class JdbcTemplateAutoConfigurationTests {\n \n@@ -185,6 +201,52 @@ public class JdbcTemplateAutoConfigurationTests {\n \t\t\t\t});\n \t}\n \n+\t@Test\n+\tpublic void testDependencyToFlywayWithJdbcTemplateMixed() {\n+\t\tthis.contextRunner\n+\t\t\t\t.withUserConfiguration(NamedParameterDataSourceMigrationValidator.class)\n+\t\t\t\t.withPropertyValues("spring.flyway.locations:classpath:db/city_np")\n+\t\t\t\t.withConfiguration(AutoConfigurations.of(FlywayAutoConfiguration.class))\n+\t\t\t\t.run((context) -> {\n+\t\t\t\t\tassertThat(context).hasNotFailed();\n+\t\t\t\t\tassertThat(context.getBean(JdbcTemplate.class)).isNotNull();\n+\t\t\t\t\tassertThat(context.getBean(\n+\t\t\t\t\t\t\tNamedParameterDataSourceMigrationValidator.class).count)\n+\t\t\t\t\t\t\t\t\t.isEqualTo(1);\n+\t\t\t\t});\n+\t}\n+\n+\t@Test\n+\tpublic void testDependencyToFlywayWithOnlyNamedParameterJdbcTemplate() {\n+\t\tApplicationContextRunner contextRunner1 = new ApplicationContextRunner()\n+\t\t\t\t.withPropertyValues("spring.datasource.initialization-mode=never",\n+\t\t\t\t\t\t"spring.datasource.generate-unique-name=true")\n+\t\t\t\t.withConfiguration(\n+\t\t\t\t\t\tAutoConfigurations.of(DataSourceAutoConfiguration.class,\n+\t\t\t\t\t\t\t\tJdbcTemplateAutoConfiguration.class,\n+\t\t\t\t\t\t\t\tOnlyNamedParameterJdbcTemplateAutoConfiguration.class));\n+\t\tcontextRunner1\n+\t\t\t\t.withUserConfiguration(NamedParameterDataSourceMigrationValidator.class)\n+\t\t\t\t.withPropertyValues("spring.flyway.locations:classpath:db/city_np")\n+\t\t\t\t.withConfiguration(AutoConfigurations.of(FlywayAutoConfiguration.class))\n+\t\t\t\t.run((context) -> {\n+\t\t\t\t\tassertThat(context).hasNotFailed();\n+\t\t\t\t\tassertThat(context.containsBean("jdbcTemplate")).isFalse();\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tJdbcTemplate jdbcTemplate = context.getBean(JdbcTemplate.class);\n+\t\t\t\t\t\tfail("org.springframework.boot.autoconfigure.jdbc.JdcTemplate should not exist in the application context");\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (NoSuchBeanDefinitionException ex) {\n+\n+\t\t\t\t\t}\n+\t\t\t\t\tassertThat(context.getBean(NamedParameterJdbcTemplate.class))\n+\t\t\t\t\t\t\t.isNotNull();\n+\t\t\t\t\tassertThat(context.getBean(\n+\t\t\t\t\t\t\tNamedParameterDataSourceMigrationValidator.class).count)\n+\t\t\t\t\t\t\t\t\t.isEqualTo(1);\n+\t\t\t\t});\n+\t}\n+\n \t@Test\n \tpublic void testDependencyToLiquibase() {\n \t\tthis.contextRunner.withUserConfiguration(DataSourceMigrationValidator.class)\n@@ -199,6 +261,50 @@ public class JdbcTemplateAutoConfigurationTests {\n \t\t\t\t});\n \t}\n \n+\t@Test\n+\tpublic void testDependencyToLiquibaseWithJdbcTemplateMixed() {\n+\t\tthis.contextRunner\n+\t\t\t\t.withUserConfiguration(NamedParameterDataSourceMigrationValidator.class)\n+\t\t\t\t.withPropertyValues(\n+\t\t\t\t\t\t"spring.liquibase.changeLog:classpath:db/changelog/db.changelog-city-np.yaml")\n+\t\t\t\t.withConfiguration(\n+\t\t\t\t\t\tAutoConfigurations.of(LiquibaseAutoConfiguration.class))\n+\t\t\t\t.run((context) -> {\n+\t\t\t\t\tassertThat(context).hasNotFailed();\n+\t\t\t\t\tassertThat(context.getBean(JdbcTemplate.class)).isNotNull();\n+\t\t\t\t\tassertThat(context.getBean(\n+\t\t\t\t\t\t\tNamedParameterDataSourceMigrationValidator.class).count)\n+\t\t\t\t\t\t\t\t\t.isEqualTo(1);\n+\t\t\t\t});\n+\t}\n+\n+\t@Test\n+\tpublic void testDependencyToLiquibaseWithOnlyNamedParameterJdbcTemplate() {\n+\t\tthis.contextRunner\n+\t\t\t\t.withUserConfiguration(NamedParameterDataSourceMigrationValidator.class)\n+\t\t\t\t.withPropertyValues(\n+\t\t\t\t\t\t"spring.liquibase.changeLog:classpath:db/changelog/db.changelog-city-np.yaml")\n+\t\t\t\t.withConfiguration(AutoConfigurations.of(\n+\t\t\t\t\t\tOnlyNamedParameterJdbcTemplateAutoConfiguration.class,\n+\t\t\t\t\t\tLiquibaseAutoConfiguration.class))\n+\t\t\t\t.run((context) -> {\n+\t\t\t\t\tassertThat(context).hasNotFailed();\n+\t\t\t\t\tassertThat(context.containsBean("jdbcTemplate")).isFalse();\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tJdbcTemplate jdbcTemplate = context.getBean(JdbcTemplate.class);\n+\t\t\t\t\t\tfail("org.springframework.boot.autoconfigure.jdbc.JdcTemplate should not exist in the application context");\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (NoSuchBeanDefinitionException ex) {\n+\n+\t\t\t\t\t}\n+\t\t\t\t\tassertThat(context.getBean(NamedParameterJdbcTemplate.class))\n+\t\t\t\t\t\t\t.isNotNull();\n+\t\t\t\t\tassertThat(context.getBean(\n+\t\t\t\t\t\t\tNamedParameterDataSourceMigrationValidator.class).count)\n+\t\t\t\t\t\t\t\t\t.isEqualTo(1);\n+\t\t\t\t});\n+\t}\n+\n \t@Configuration\n \tstatic class CustomConfiguration {\n \n@@ -278,4 +384,66 @@ public class JdbcTemplateAutoConfigurationTests {\n \n \t}\n \n+\tstatic class NamedParameterDataSourceMigrationValidator {\n+\n+\t\tprivate final Integer count;\n+\n+\t\tNamedParameterDataSourceMigrationValidator(\n+\t\t\t\tNamedParameterJdbcTemplate namedParameterJdbcTemplate) {\n+\t\t\tString sql = "SELECT COUNT(*) from CITY WHERE id = :id";\n+\t\t\tMap<String, Long> param = new HashMap<>();\n+\t\t\tparam.put("id", 1L);\n+\t\t\tthis.count = namedParameterJdbcTemplate.queryForObject(sql, param,\n+\t\t\t\t\tInteger.class);\n+\t\t}\n+\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnClass({ DataSource.class })\n+\t@ConditionalOnSingleCandidate(DataSource.class)\n+\t@AutoConfigureAfter({ DataSourceAutoConfiguration.class,\n+\t\t\tJdbcTemplateAutoConfiguration.class })\n+\t@AutoConfigureBefore({ FlywayAutoConfiguration.class,\n+\t\t\tLiquibaseAutoConfiguration.class })\n+\t@EnableConfigurationProperties(JdbcProperties.class)\n+\tstatic class OnlyNamedParameterJdbcTemplateAutoConfiguration\n+\t\t\timplements BeanDefinitionRegistryPostProcessor {\n+\n+\t\t@Bean\n+\t\tpublic NamedParameterJdbcTemplate myNamedParameterJdbcTemplate(\n+\t\t\t\tDataSource dataSource) {\n+\t\t\treturn new NamedParameterJdbcTemplate(dataSource);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)\n+\t\t\t\tthrows BeansException {\n+\t\t\t// do nothing\n+\t\t}\n+\n+\t\t/**\n+\t\t * <p>\n+\t\t * we should remove the jdbc template bean definition to keep only\n+\t\t * NamedParameterJdbcTemplate is registerd in the bean container\n+\t\t * </p>\n+\t\t * @param registry the bean definition registry.\n+\t\t * @throws BeansException if the bean registry have any exception.\n+\t\t */\n+\t\t@Override\n+\t\tpublic void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry)\n+\t\t\t\tthrows BeansException {\n+\t\t\tString[] excludeBeanNames = new String[] { "jdbcTemplate",\n+\t\t\t\t\t"namedParameterJdbcTemplate" };\n+\t\t\tfor (String beanName : excludeBeanNames) {\n+\t\t\t\tBeanDefinition beanDefinition = registry.getBeanDefinition(beanName);\n+\t\t\t\tif (beanDefinition != null) {\n+\t\t\t\t\tregistry.removeBeanDefinition(beanName);\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jdbc;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport javax.sql.DataSource;\n\nimport org.junit.Test;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.NoSuchBeanDefinitionException;\nimport org.springframework.beans.factory.config.BeanDefinition;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistry;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\nimport org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration;\nimport org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.jdbc.core.JdbcOperations;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations;\nimport org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.Assert.fail;\nimport static org.mockito.Mockito.mock;\n\n/**\n * Tests for {@link JdbcTemplateAutoConfiguration}.\n *\n * @author Dave Syer\n * @author Stephane Nicoll\n * @author Kazuki Shimizu\n * @author Dan Zheng\n */\npublic class JdbcTemplateAutoConfigurationTests {\n\n\tprivate final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t\t.withPropertyValues("spring.datasource.initialization-mode=never",\n\t\t\t\t\t"spring.datasource.generate-unique-name=true")\n\t\t\t.withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class,\n\t\t\t\t\tJdbcTemplateAutoConfiguration.class));\n\n\t@Test\n\tpublic void testJdbcTemplateExists() {\n\t\tthis.contextRunner.run((context) -> {\n\t\t\tassertThat(context).hasSingleBean(JdbcOperations.class);\n\t\t\tJdbcTemplate jdbcTemplate = context.getBean(JdbcTemplate.class);\n\t\t\tassertThat(jdbcTemplate.getDataSource())\n\t\t\t\t\t.isEqualTo(context.getBean(DataSource.class));\n\t\t\tassertThat(jdbcTemplate.getFetchSize()).isEqualTo(-1);\n\t\t\tassertThat(jdbcTemplate.getQueryTimeout()).isEqualTo(-1);\n\t\t\tassertThat(jdbcTemplate.getMaxRows()).isEqualTo(-1);\n\t\t});\n\t}\n\n\t@Test\n\tpublic void testJdbcTemplateWithCustomProperties() {\n\t\tthis.contextRunner.withPropertyValues("spring.jdbc.template.fetch-size:100",\n\t\t\t\t"spring.jdbc.template.query-timeout:60",\n\t\t\t\t"spring.jdbc.template.max-rows:1000").run((context) -> {\n\t\t\t\t\tassertThat(context).hasSingleBean(JdbcOperations.class);\n\t\t\t\t\tJdbcTemplate jdbcTemplate = context.getBean(JdbcTemplate.class);\n\t\t\t\t\tassertThat(jdbcTemplate.getDataSource()).isNotNull();\n\t\t\t\t\tassertThat(jdbcTemplate.getFetchSize()).isEqualTo(100);\n\t\t\t\t\tassertThat(jdbcTemplate.getQueryTimeout()).isEqualTo(60);\n\t\t\t\t\tassertThat(jdbcTemplate.getMaxRows()).isEqualTo(1000);\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void testJdbcTemplateExistsWithCustomDataSource() {\n\t\tthis.contextRunner.withUserConfiguration(TestDataSourceConfiguration.class)\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tassertThat(context).hasSingleBean(JdbcOperations.class);\n\t\t\t\t\tJdbcTemplate jdbcTemplate = context.getBean(JdbcTemplate.class);\n\t\t\t\t\tassertThat(jdbcTemplate.getDataSource())\n\t\t\t\t\t\t\t.isEqualTo(context.getBean("customDataSource"));\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void testNamedParameterJdbcTemplateExists() {\n\t\tthis.contextRunner.run((context) -> {\n\t\t\tassertThat(context).hasSingleBean(NamedParameterJdbcOperations.class);\n\t\t\tNamedParameterJdbcTemplate namedParameterJdbcTemplate = context\n\t\t\t\t\t.getBean(NamedParameterJdbcTemplate.class);\n\t\t\tassertThat(namedParameterJdbcTemplate.getJdbcOperations())\n\t\t\t\t\t.isEqualTo(context.getBean(JdbcOperations.class));\n\t\t});\n\t}\n\n\t@Test\n\tpublic void testMultiDataSource() {\n\t\tthis.contextRunner.withUserConfiguration(MultiDataSourceConfiguration.class)\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tassertThat(context).doesNotHaveBean(JdbcOperations.class);\n\t\t\t\t\tassertThat(context)\n\t\t\t\t\t\t\t.doesNotHaveBean(NamedParameterJdbcOperations.class);\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void testMultiJdbcTemplate() {\n\t\tthis.contextRunner.withUserConfiguration(MultiJdbcTemplateConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(context)\n\t\t\t\t\t\t.doesNotHaveBean(NamedParameterJdbcOperations.class));\n\t}\n\n\t@Test\n\tpublic void testMultiDataSourceUsingPrimary() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(MultiDataSourceUsingPrimaryConfiguration.class)\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tassertThat(context).hasSingleBean(JdbcOperations.class);\n\t\t\t\t\tassertThat(context).hasSingleBean(NamedParameterJdbcOperations.class);\n\t\t\t\t\tassertThat(context.getBean(JdbcTemplate.class).getDataSource())\n\t\t\t\t\t\t\t.isEqualTo(context.getBean("test1DataSource"));\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void testMultiJdbcTemplateUsingPrimary() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(MultiJdbcTemplateUsingPrimaryConfiguration.class)\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tassertThat(context).hasSingleBean(NamedParameterJdbcOperations.class);\n\t\t\t\t\tassertThat(context.getBean(NamedParameterJdbcTemplate.class)\n\t\t\t\t\t\t\t.getJdbcOperations())\n\t\t\t\t\t\t\t\t\t.isEqualTo(context.getBean("test1Template"));\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void testExistingCustomJdbcTemplate() {\n\t\tthis.contextRunner.withUserConfiguration(CustomConfiguration.class)\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tassertThat(context).hasSingleBean(JdbcOperations.class);\n\t\t\t\t\tassertThat(context.getBean(JdbcOperations.class))\n\t\t\t\t\t\t\t.isEqualTo(context.getBean("customJdbcOperations"));\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void testExistingCustomNamedParameterJdbcTemplate() {\n\t\tthis.contextRunner.withUserConfiguration(CustomConfiguration.class)\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tassertThat(context).hasSingleBean(NamedParameterJdbcOperations.class);\n\t\t\t\t\tassertThat(context.getBean(NamedParameterJdbcOperations.class))\n\t\t\t\t\t\t\t.isEqualTo(context\n\t\t\t\t\t\t\t\t\t.getBean("customNamedParameterJdbcOperations"));\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void testDependencyToDataSourceInitialization() {\n\t\tthis.contextRunner.withUserConfiguration(DataSourceInitializationValidator.class)\n\t\t\t\t.withPropertyValues("spring.datasource.initialization-mode=always")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tassertThat(context).hasNotFailed();\n\t\t\t\t\tassertThat(context\n\t\t\t\t\t\t\t.getBean(DataSourceInitializationValidator.class).count)\n\t\t\t\t\t\t\t\t\t.isEqualTo(1);\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void testDependencyToFlyway() {\n\t\tthis.contextRunner.withUserConfiguration(DataSourceMigrationValidator.class)\n\t\t\t\t.withPropertyValues("spring.flyway.locations:classpath:db/city")\n\t\t\t\t.withConfiguration(AutoConfigurations.of(FlywayAutoConfiguration.class))\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tassertThat(context).hasNotFailed();\n\t\t\t\t\tassertThat(context.getBean(DataSourceMigrationValidator.class).count)\n\t\t\t\t\t\t\t.isEqualTo(0);\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void testDependencyToFlywayWithJdbcTemplateMixed() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(NamedParameterDataSourceMigrationValidator.class)\n\t\t\t\t.withPropertyValues("spring.flyway.locations:classpath:db/city_np")\n\t\t\t\t.withConfiguration(AutoConfigurations.of(FlywayAutoConfiguration.class))\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tassertThat(context).hasNotFailed();\n\t\t\t\t\tassertThat(context.getBean(JdbcTemplate.class)).isNotNull();\n\t\t\t\t\tassertThat(context.getBean(\n\t\t\t\t\t\t\tNamedParameterDataSourceMigrationValidator.class).count)\n\t\t\t\t\t\t\t\t\t.isEqualTo(1);\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void testDependencyToFlywayWithOnlyNamedParameterJdbcTemplate() {\n\t\tApplicationContextRunner contextRunner1 = new ApplicationContextRunner()\n\t\t\t\t.withPropertyValues("spring.datasource.initialization-mode=never",\n\t\t\t\t\t\t"spring.datasource.generate-unique-name=true")\n\t\t\t\t.withConfiguration(\n\t\t\t\t\t\tAutoConfigurations.of(DataSourceAutoConfiguration.class,\n\t\t\t\t\t\t\t\tJdbcTemplateAutoConfiguration.class,\n\t\t\t\t\t\t\t\tOnlyNamedParameterJdbcTemplateAutoConfiguration.class));\n\t\tcontextRunner1\n\t\t\t\t.withUserConfiguration(NamedParameterDataSourceMigrationValidator.class)\n\t\t\t\t.withPropertyValues("spring.flyway.locations:classpath:db/city_np")\n\t\t\t\t.withConfiguration(AutoConfigurations.of(FlywayAutoConfiguration.class))\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tassertThat(context).hasNotFailed();\n\t\t\t\t\tassertThat(context.containsBean("jdbcTemplate")).isFalse();\n\t\t\t\t\ttry {\n\t\t\t\t\t\tJdbcTemplate jdbcTemplate = context.getBean(JdbcTemplate.class);\n\t\t\t\t\t\tfail("org.springframework.boot.autoconfigure.jdbc.JdcTemplate should not exist in the application context");\n\t\t\t\t\t}\n\t\t\t\t\tcatch (NoSuchBeanDefinitionException ex) {\n\n\t\t\t\t\t}\n\t\t\t\t\tassertThat(context.getBean(NamedParameterJdbcTemplate.class))\n\t\t\t\t\t\t\t.isNotNull();\n\t\t\t\t\tassertThat(context.getBean(\n\t\t\t\t\t\t\tNamedParameterDataSourceMigrationValidator.class).count)\n\t\t\t\t\t\t\t\t\t.isEqualTo(1);\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void testDependencyToLiquibase() {\n\t\tthis.contextRunner.withUserConfiguration(DataSourceMigrationValidator.class)\n\t\t\t\t.withPropertyValues(\n\t\t\t\t\t\t"spring.liquibase.changeLog:classpath:db/changelog/db.changelog-city.yaml")\n\t\t\t\t.withConfiguration(\n\t\t\t\t\t\tAutoConfigurations.of(LiquibaseAutoConfiguration.class))\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tassertThat(context).hasNotFailed();\n\t\t\t\t\tassertThat(context.getBean(DataSourceMigrationValidator.class).count)\n\t\t\t\t\t\t\t.isEqualTo(0);\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void testDependencyToLiquibaseWithJdbcTemplateMixed() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(NamedParameterDataSourceMigrationValidator.class)\n\t\t\t\t.withPropertyValues(\n\t\t\t\t\t\t"spring.liquibase.changeLog:classpath:db/changelog/db.changelog-city-np.yaml")\n\t\t\t\t.withConfiguration(\n\t\t\t\t\t\tAutoConfigurations.of(LiquibaseAutoConfiguration.class))\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tassertThat(context).hasNotFailed();\n\t\t\t\t\tassertThat(context.getBean(JdbcTemplate.class)).isNotNull();\n\t\t\t\t\tassertThat(context.getBean(\n\t\t\t\t\t\t\tNamedParameterDataSourceMigrationValidator.class).count)\n\t\t\t\t\t\t\t\t\t.isEqualTo(1);\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void testDependencyToLiquibaseWithOnlyNamedParameterJdbcTemplate() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(NamedParameterDataSourceMigrationValidator.class)\n\t\t\t\t.withPropertyValues(\n\t\t\t\t\t\t"spring.liquibase.changeLog:classpath:db/changelog/db.changelog-city-np.yaml")\n\t\t\t\t.withConfiguration(AutoConfigurations.of(\n\t\t\t\t\t\tOnlyNamedParameterJdbcTemplateAutoConfiguration.class,\n\t\t\t\t\t\tLiquibaseAutoConfiguration.class))\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tassertThat(context).hasNotFailed();\n\t\t\t\t\tassertThat(context.containsBean("jdbcTemplate")).isFalse();\n\t\t\t\t\ttry {\n\t\t\t\t\t\tJdbcTemplate jdbcTemplate = context.getBean(JdbcTemplate.class);\n\t\t\t\t\t\tfail("org.springframework.boot.autoconfigure.jdbc.JdcTemplate should not exist in the application context");\n\t\t\t\t\t}\n\t\t\t\t\tcatch (NoSuchBeanDefinitionException ex) {\n\n\t\t\t\t\t}\n\t\t\t\t\tassertThat(context.getBean(NamedParameterJdbcTemplate.class))\n\t\t\t\t\t\t\t.isNotNull();\n\t\t\t\t\tassertThat(context.getBean(\n\t\t\t\t\t\t\tNamedParameterDataSourceMigrationValidator.class).count)\n\t\t\t\t\t\t\t\t\t.isEqualTo(1);\n\t\t\t\t});\n\t}\n\n\t@Configuration\n\tstatic class CustomConfiguration {\n\n\t\t@Bean\n\t\tpublic JdbcOperations customJdbcOperations(DataSource dataSource) {\n\t\t\treturn new JdbcTemplate(dataSource);\n\t\t}\n\n\t\t@Bean\n\t\tpublic NamedParameterJdbcOperations customNamedParameterJdbcOperations(\n\t\t\t\tDataSource dataSource) {\n\t\t\treturn new NamedParameterJdbcTemplate(dataSource);\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class TestDataSourceConfiguration {\n\n\t\t@Bean\n\t\tpublic DataSource customDataSource() {\n\t\t\treturn new TestDataSource();\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class MultiJdbcTemplateConfiguration {\n\n\t\t@Bean\n\t\tpublic JdbcTemplate test1Template() {\n\t\t\treturn mock(JdbcTemplate.class);\n\t\t}\n\n\t\t@Bean\n\t\tpublic JdbcTemplate test2Template() {\n\t\t\treturn mock(JdbcTemplate.class);\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class MultiJdbcTemplateUsingPrimaryConfiguration {\n\n\t\t@Bean\n\t\t@Primary\n\t\tpublic JdbcTemplate test1Template() {\n\t\t\treturn mock(JdbcTemplate.class);\n\t\t}\n\n\t\t@Bean\n\t\tpublic JdbcTemplate test2Template() {\n\t\t\treturn mock(JdbcTemplate.class);\n\t\t}\n\n\t}\n\n\tstatic class DataSourceInitializationValidator {\n\n\t\tprivate final Integer count;\n\n\t\tDataSourceInitializationValidator(JdbcTemplate jdbcTemplate) {\n\t\t\tthis.count = jdbcTemplate.queryForObject("SELECT COUNT(*) from BAR",\n\t\t\t\t\tInteger.class);\n\t\t}\n\n\t}\n\n\tstatic class DataSourceMigrationValidator {\n\n\t\tprivate final Integer count;\n\n\t\tDataSourceMigrationValidator(JdbcTemplate jdbcTemplate) {\n\t\t\tthis.count = jdbcTemplate.queryForObject("SELECT COUNT(*) from CITY",\n\t\t\t\t\tInteger.class);\n\t\t}\n\n\t}\n\n\tstatic class NamedParameterDataSourceMigrationValidator {\n\n\t\tprivate final Integer count;\n\n\t\tNamedParameterDataSourceMigrationValidator(\n\t\t\t\tNamedParameterJdbcTemplate namedParameterJdbcTemplate) {\n\t\t\tString sql = "SELECT COUNT(*) from CITY WHERE id = :id";\n\t\t\tMap<String, Long> param = new HashMap<>();\n\t\t\tparam.put("id", 1L);\n\t\t\tthis.count = namedParameterJdbcTemplate.queryForObject(sql, param,\n\t\t\t\t\tInteger.class);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ DataSource.class })\n\t@ConditionalOnSingleCandidate(DataSource.class)\n\t@AutoConfigureAfter({ DataSourceAutoConfiguration.class,\n\t\t\tJdbcTemplateAutoConfiguration.class })\n\t@AutoConfigureBefore({ FlywayAutoConfiguration.class,\n\t\t\tLiquibaseAutoConfiguration.class })\n\t@EnableConfigurationProperties(JdbcProperties.class)\n\tstatic class OnlyNamedParameterJdbcTemplateAutoConfiguration\n\t\t\timplements BeanDefinitionRegistryPostProcessor {\n\n\t\t@Bean\n\t\tpublic NamedParameterJdbcTemplate myNamedParameterJdbcTemplate(\n\t\t\t\tDataSource dataSource) {\n\t\t\treturn new NamedParameterJdbcTemplate(dataSource);\n\t\t}\n\n\t\t@Override\n\t\tpublic void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)\n\t\t\t\tthrows BeansException {\n\t\t\t// do nothing\n\t\t}\n\n\t\t/**\n\t\t * <p>\n\t\t * we should remove the jdbc template bean definition to keep only\n\t\t * NamedParameterJdbcTemplate is registerd in the bean container\n\t\t * </p>\n\t\t * @param registry the bean definition registry.\n\t\t * @throws BeansException if the bean registry have any exception.\n\t\t */\n\t\t@Override\n\t\tpublic void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry)\n\t\t\t\tthrows BeansException {\n\t\t\tString[] excludeBeanNames = new String[] { "jdbcTemplate",\n\t\t\t\t\t"namedParameterJdbcTemplate" };\n\t\t\tfor (String beanName : excludeBeanNames) {\n\t\t\t\tBeanDefinition beanDefinition = registry.getBeanDefinition(beanName);\n\t\t\t\tif (beanDefinition != null) {\n\t\t\t\t\tregistry.removeBeanDefinition(beanName);\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jdbc;\n\nimport javax.sql.DataSource;\n\nimport org.junit.Test;\n\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration;\nimport org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.jdbc.core.JdbcOperations;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations;\nimport org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.Mockito.mock;\n\n/**\n * Tests for {@link JdbcTemplateAutoConfiguration}.\n *\n * @author Dave Syer\n * @author Stephane Nicoll\n * @author Kazuki Shimizu\n */\npublic class JdbcTemplateAutoConfigurationTests {\n\n\tprivate final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t\t.withPropertyValues("spring.datasource.initialization-mode=never",\n\t\t\t\t\t"spring.datasource.generate-unique-name=true")\n\t\t\t.withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class,\n\t\t\t\t\tJdbcTemplateAutoConfiguration.class));\n\n\t@Test\n\tpublic void testJdbcTemplateExists() {\n\t\tthis.contextRunner.run((context) -> {\n\t\t\tassertThat(context).hasSingleBean(JdbcOperations.class);\n\t\t\tJdbcTemplate jdbcTemplate = context.getBean(JdbcTemplate.class);\n\t\t\tassertThat(jdbcTemplate.getDataSource())\n\t\t\t\t\t.isEqualTo(context.getBean(DataSource.class));\n\t\t\tassertThat(jdbcTemplate.getFetchSize()).isEqualTo(-1);\n\t\t\tassertThat(jdbcTemplate.getQueryTimeout()).isEqualTo(-1);\n\t\t\tassertThat(jdbcTemplate.getMaxRows()).isEqualTo(-1);\n\t\t});\n\t}\n\n\t@Test\n\tpublic void testJdbcTemplateWithCustomProperties() {\n\t\tthis.contextRunner.withPropertyValues("spring.jdbc.template.fetch-size:100",\n\t\t\t\t"spring.jdbc.template.query-timeout:60",\n\t\t\t\t"spring.jdbc.template.max-rows:1000").run((context) -> {\n\t\t\t\t\tassertThat(context).hasSingleBean(JdbcOperations.class);\n\t\t\t\t\tJdbcTemplate jdbcTemplate = context.getBean(JdbcTemplate.class);\n\t\t\t\t\tassertThat(jdbcTemplate.getDataSource()).isNotNull();\n\t\t\t\t\tassertThat(jdbcTemplate.getFetchSize()).isEqualTo(100);\n\t\t\t\t\tassertThat(jdbcTemplate.getQueryTimeout()).isEqualTo(60);\n\t\t\t\t\tassertThat(jdbcTemplate.getMaxRows()).isEqualTo(1000);\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void testJdbcTemplateExistsWithCustomDataSource() {\n\t\tthis.contextRunner.withUserConfiguration(TestDataSourceConfiguration.class)\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tassertThat(context).hasSingleBean(JdbcOperations.class);\n\t\t\t\t\tJdbcTemplate jdbcTemplate = context.getBean(JdbcTemplate.class);\n\t\t\t\t\tassertThat(jdbcTemplate.getDataSource())\n\t\t\t\t\t\t\t.isEqualTo(context.getBean("customDataSource"));\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void testNamedParameterJdbcTemplateExists() {\n\t\tthis.contextRunner.run((context) -> {\n\t\t\tassertThat(context).hasSingleBean(NamedParameterJdbcOperations.class);\n\t\t\tNamedParameterJdbcTemplate namedParameterJdbcTemplate = context\n\t\t\t\t\t.getBean(NamedParameterJdbcTemplate.class);\n\t\t\tassertThat(namedParameterJdbcTemplate.getJdbcOperations())\n\t\t\t\t\t.isEqualTo(context.getBean(JdbcOperations.class));\n\t\t});\n\t}\n\n\t@Test\n\tpublic void testMultiDataSource() {\n\t\tthis.contextRunner.withUserConfiguration(MultiDataSourceConfiguration.class)\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tassertThat(context).doesNotHaveBean(JdbcOperations.class);\n\t\t\t\t\tassertThat(context)\n\t\t\t\t\t\t\t.doesNotHaveBean(NamedParameterJdbcOperations.class);\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void testMultiJdbcTemplate() {\n\t\tthis.contextRunner.withUserConfiguration(MultiJdbcTemplateConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(context)\n\t\t\t\t\t\t.doesNotHaveBean(NamedParameterJdbcOperations.class));\n\t}\n\n\t@Test\n\tpublic void testMultiDataSourceUsingPrimary() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(MultiDataSourceUsingPrimaryConfiguration.class)\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tassertThat(context).hasSingleBean(JdbcOperations.class);\n\t\t\t\t\tassertThat(context).hasSingleBean(NamedParameterJdbcOperations.class);\n\t\t\t\t\tassertThat(context.getBean(JdbcTemplate.class).getDataSource())\n\t\t\t\t\t\t\t.isEqualTo(context.getBean("test1DataSource"));\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void testMultiJdbcTemplateUsingPrimary() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(MultiJdbcTemplateUsingPrimaryConfiguration.class)\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tassertThat(context).hasSingleBean(NamedParameterJdbcOperations.class);\n\t\t\t\t\tassertThat(context.getBean(NamedParameterJdbcTemplate.class)\n\t\t\t\t\t\t\t.getJdbcOperations())\n\t\t\t\t\t\t\t\t\t.isEqualTo(context.getBean("test1Template"));\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void testExistingCustomJdbcTemplate() {\n\t\tthis.contextRunner.withUserConfiguration(CustomConfiguration.class)\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tassertThat(context).hasSingleBean(JdbcOperations.class);\n\t\t\t\t\tassertThat(context.getBean(JdbcOperations.class))\n\t\t\t\t\t\t\t.isEqualTo(context.getBean("customJdbcOperations"));\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void testExistingCustomNamedParameterJdbcTemplate() {\n\t\tthis.contextRunner.withUserConfiguration(CustomConfiguration.class)\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tassertThat(context).hasSingleBean(NamedParameterJdbcOperations.class);\n\t\t\t\t\tassertThat(context.getBean(NamedParameterJdbcOperations.class))\n\t\t\t\t\t\t\t.isEqualTo(context\n\t\t\t\t\t\t\t\t\t.getBean("customNamedParameterJdbcOperations"));\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void testDependencyToDataSourceInitialization() {\n\t\tthis.contextRunner.withUserConfiguration(DataSourceInitializationValidator.class)\n\t\t\t\t.withPropertyValues("spring.datasource.initialization-mode=always")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tassertThat(context).hasNotFailed();\n\t\t\t\t\tassertThat(context\n\t\t\t\t\t\t\t.getBean(DataSourceInitializationValidator.class).count)\n\t\t\t\t\t\t\t\t\t.isEqualTo(1);\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void testDependencyToFlyway() {\n\t\tthis.contextRunner.withUserConfiguration(DataSourceMigrationValidator.class)\n\t\t\t\t.withPropertyValues("spring.flyway.locations:classpath:db/city")\n\t\t\t\t.withConfiguration(AutoConfigurations.of(FlywayAutoConfiguration.class))\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tassertThat(context).hasNotFailed();\n\t\t\t\t\tassertThat(context.getBean(DataSourceMigrationValidator.class).count)\n\t\t\t\t\t\t\t.isEqualTo(0);\n\t\t\t\t});\n\t}\n\n\t@Test\n\tpublic void testDependencyToLiquibase() {\n\t\tthis.contextRunner.withUserConfiguration(DataSourceMigrationValidator.class)\n\t\t\t\t.withPropertyValues(\n\t\t\t\t\t\t"spring.liquibase.changeLog:classpath:db/changelog/db.changelog-city.yaml")\n\t\t\t\t.withConfiguration(\n\t\t\t\t\t\tAutoConfigurations.of(LiquibaseAutoConfiguration.class))\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tassertThat(context).hasNotFailed();\n\t\t\t\t\tassertThat(context.getBean(DataSourceMigrationValidator.class).count)\n\t\t\t\t\t\t\t.isEqualTo(0);\n\t\t\t\t});\n\t}\n\n\t@Configuration\n\tstatic class CustomConfiguration {\n\n\t\t@Bean\n\t\tpublic JdbcOperations customJdbcOperations(DataSource dataSource) {\n\t\t\treturn new JdbcTemplate(dataSource);\n\t\t}\n\n\t\t@Bean\n\t\tpublic NamedParameterJdbcOperations customNamedParameterJdbcOperations(\n\t\t\t\tDataSource dataSource) {\n\t\t\treturn new NamedParameterJdbcTemplate(dataSource);\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class TestDataSourceConfiguration {\n\n\t\t@Bean\n\t\tpublic DataSource customDataSource() {\n\t\t\treturn new TestDataSource();\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class MultiJdbcTemplateConfiguration {\n\n\t\t@Bean\n\t\tpublic JdbcTemplate test1Template() {\n\t\t\treturn mock(JdbcTemplate.class);\n\t\t}\n\n\t\t@Bean\n\t\tpublic JdbcTemplate test2Template() {\n\t\t\treturn mock(JdbcTemplate.class);\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class MultiJdbcTemplateUsingPrimaryConfiguration {\n\n\t\t@Bean\n\t\t@Primary\n\t\tpublic JdbcTemplate test1Template() {\n\t\t\treturn mock(JdbcTemplate.class);\n\t\t}\n\n\t\t@Bean\n\t\tpublic JdbcTemplate test2Template() {\n\t\t\treturn mock(JdbcTemplate.class);\n\t\t}\n\n\t}\n\n\tstatic class DataSourceInitializationValidator {\n\n\t\tprivate final Integer count;\n\n\t\tDataSourceInitializationValidator(JdbcTemplate jdbcTemplate) {\n\t\t\tthis.count = jdbcTemplate.queryForObject("SELECT COUNT(*) from BAR",\n\t\t\t\t\tInteger.class);\n\t\t}\n\n\t}\n\n\tstatic class DataSourceMigrationValidator {\n\n\t\tprivate final Integer count;\n\n\t\tDataSourceMigrationValidator(JdbcTemplate jdbcTemplate) {\n\t\t\tthis.count = jdbcTemplate.queryForObject("SELECT COUNT(*) from CITY",\n\t\t\t\t\tInteger.class);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
