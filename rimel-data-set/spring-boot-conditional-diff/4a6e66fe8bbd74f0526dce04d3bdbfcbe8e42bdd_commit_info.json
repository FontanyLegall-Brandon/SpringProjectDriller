{'_old_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJavaTests.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJavaTests.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -24,50 +24,88 @@ import org.springframework.context.annotation.AnnotationConfigApplicationContext\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n+import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.is;\n import static org.hamcrest.Matchers.iterableWithSize;\n import static org.junit.Assert.assertThat;\n \n /**\n  * Tests for {@link ConditionalOnJava}.\n- *\n+ * \n  * @author Oliver Gierke\n+ * @author Phillip Webb\n  */\n public class ConditionalOnJavaTests {\n \n \tprivate final AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n \n+\tprivate final OnJavaCondition condition = new OnJavaCondition();\n+\n \t@Test\n \tpublic void doesNotMatchIfBetterVersionIsRequired() {\n-\n-\t\tthis.context.register(Java9Required.class);\n-\t\tthis.context.refresh();\n-\n+\t\tregisterAndRefresh(Java9Required.class);\n \t\tassertPresent(false);\n \t}\n \n \t@Test\n \tpublic void doesNotMatchIfLowerIsRequired() {\n-\n-\t\tthis.context.register(Java5Required.class);\n-\t\tthis.context.refresh();\n-\n+\t\tregisterAndRefresh(Java5Required.class);\n \t\tassertPresent(false);\n \t}\n \n \t@Test\n \tpublic void matchesIfVersionIsInRange() {\n+\t\tregisterAndRefresh(Java6Required.class);\n+\t\tassertPresent(true);\n+\t}\n+\n+\t@Test\n+\tpublic void boundsTests() throws Exception {\n+\t\ttestBounds(Range.EQUAL_OR_NEWER, JavaVersion.SEVEN, JavaVersion.SIX, true);\n+\t\ttestBounds(Range.EQUAL_OR_NEWER, JavaVersion.SEVEN, JavaVersion.SEVEN, true);\n+\t\ttestBounds(Range.EQUAL_OR_NEWER, JavaVersion.SEVEN, JavaVersion.EIGHT, false);\n+\t\ttestBounds(Range.OLDER_THAN, JavaVersion.SEVEN, JavaVersion.SIX, false);\n+\t\ttestBounds(Range.OLDER_THAN, JavaVersion.SEVEN, JavaVersion.SEVEN, false);\n+\t\ttestBounds(Range.OLDER_THAN, JavaVersion.SEVEN, JavaVersion.EIGHT, true);\n+\t}\n+\n+\t@Test\n+\tpublic void equalOrNewerMessage() throws Exception {\n+\t\tConditionOutcome outcome = this.condition.getMatchOutcome(Range.EQUAL_OR_NEWER,\n+\t\t\t\tJavaVersion.SEVEN, JavaVersion.SIX);\n+\t\tassertThat(outcome.getMessage(), equalTo("Required JVM version "\n+\t\t\t\t+ "1.6 or newer found 1.7"));\n+\t}\n+\n+\t@Test\n+\tpublic void olderThanMessage() throws Exception {\n+\t\tConditionOutcome outcome = this.condition.getMatchOutcome(Range.OLDER_THAN,\n+\t\t\t\tJavaVersion.SEVEN, JavaVersion.SIX);\n+\t\tassertThat(outcome.getMessage(), equalTo("Required JVM version "\n+\t\t\t\t+ "older than 1.6 found 1.7"));\n+\t}\n \n-\t\tthis.context.register(Java6Required.class);\n+\tprivate void testBounds(Range range, JavaVersion runningVersion, JavaVersion version,\n+\t\t\tboolean expected) {\n+\t\tConditionOutcome outcome = this.condition.getMatchOutcome(range, runningVersion,\n+\t\t\t\tversion);\n+\t\tassertThat(outcome.getMessage(), outcome.isMatch(), equalTo(expected));\n+\t}\n+\n+\tprivate void registerAndRefresh(Class<?> annotatedClasses) {\n+\t\tthis.context.register(annotatedClasses);\n \t\tthis.context.refresh();\n+\t}\n \n-\t\tassertPresent(true);\n+\tprivate void assertPresent(boolean expected) {\n+\t\tint expectedNumber = expected ? 1 : 0;\n+\t\tMatcher<Iterable<String>> matcher = iterableWithSize(expectedNumber);\n+\t\tassertThat(this.context.getBeansOfType(String.class).values(), is(matcher));\n \t}\n \n \t@Configuration\n \t@ConditionalOnJava(JavaVersion.NINE)\n \tstatic class Java9Required {\n-\n \t\t@Bean\n \t\tString foo() {\n \t\t\treturn "foo";\n@@ -75,9 +113,8 @@ public class ConditionalOnJavaTests {\n \t}\n \n \t@Configuration\n-\t@ConditionalOnJava(value = JavaVersion.SIX, range = Range.OLDER_THAN)\n+\t@ConditionalOnJava(range = Range.OLDER_THAN, value = JavaVersion.SIX)\n \tstatic class Java5Required {\n-\n \t\t@Bean\n \t\tString foo() {\n \t\t\treturn "foo";\n@@ -87,18 +124,10 @@ public class ConditionalOnJavaTests {\n \t@Configuration\n \t@ConditionalOnJava(JavaVersion.SIX)\n \tstatic class Java6Required {\n-\n \t\t@Bean\n \t\tString foo() {\n \t\t\treturn "foo";\n \t\t}\n \t}\n \n-\tprivate void assertPresent(boolean expected) {\n-\n-\t\tint expectedNumber = expected ? 1 : 0;\n-\t\tMatcher<Iterable<String>> matcher = iterableWithSize(expectedNumber);\n-\n-\t\tassertThat(this.context.getBeansOfType(String.class).values(), is(matcher));\n-\t}\n }\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport org.hamcrest.Matcher;\nimport org.junit.Test;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnJava.JavaVersion;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnJava.Range;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.is;\nimport static org.hamcrest.Matchers.iterableWithSize;\nimport static org.junit.Assert.assertThat;\n\n/**\n * Tests for {@link ConditionalOnJava}.\n * \n * @author Oliver Gierke\n * @author Phillip Webb\n */\npublic class ConditionalOnJavaTests {\n\n\tprivate final AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n\n\tprivate final OnJavaCondition condition = new OnJavaCondition();\n\n\t@Test\n\tpublic void doesNotMatchIfBetterVersionIsRequired() {\n\t\tregisterAndRefresh(Java9Required.class);\n\t\tassertPresent(false);\n\t}\n\n\t@Test\n\tpublic void doesNotMatchIfLowerIsRequired() {\n\t\tregisterAndRefresh(Java5Required.class);\n\t\tassertPresent(false);\n\t}\n\n\t@Test\n\tpublic void matchesIfVersionIsInRange() {\n\t\tregisterAndRefresh(Java6Required.class);\n\t\tassertPresent(true);\n\t}\n\n\t@Test\n\tpublic void boundsTests() throws Exception {\n\t\ttestBounds(Range.EQUAL_OR_NEWER, JavaVersion.SEVEN, JavaVersion.SIX, true);\n\t\ttestBounds(Range.EQUAL_OR_NEWER, JavaVersion.SEVEN, JavaVersion.SEVEN, true);\n\t\ttestBounds(Range.EQUAL_OR_NEWER, JavaVersion.SEVEN, JavaVersion.EIGHT, false);\n\t\ttestBounds(Range.OLDER_THAN, JavaVersion.SEVEN, JavaVersion.SIX, false);\n\t\ttestBounds(Range.OLDER_THAN, JavaVersion.SEVEN, JavaVersion.SEVEN, false);\n\t\ttestBounds(Range.OLDER_THAN, JavaVersion.SEVEN, JavaVersion.EIGHT, true);\n\t}\n\n\t@Test\n\tpublic void equalOrNewerMessage() throws Exception {\n\t\tConditionOutcome outcome = this.condition.getMatchOutcome(Range.EQUAL_OR_NEWER,\n\t\t\t\tJavaVersion.SEVEN, JavaVersion.SIX);\n\t\tassertThat(outcome.getMessage(), equalTo("Required JVM version "\n\t\t\t\t+ "1.6 or newer found 1.7"));\n\t}\n\n\t@Test\n\tpublic void olderThanMessage() throws Exception {\n\t\tConditionOutcome outcome = this.condition.getMatchOutcome(Range.OLDER_THAN,\n\t\t\t\tJavaVersion.SEVEN, JavaVersion.SIX);\n\t\tassertThat(outcome.getMessage(), equalTo("Required JVM version "\n\t\t\t\t+ "older than 1.6 found 1.7"));\n\t}\n\n\tprivate void testBounds(Range range, JavaVersion runningVersion, JavaVersion version,\n\t\t\tboolean expected) {\n\t\tConditionOutcome outcome = this.condition.getMatchOutcome(range, runningVersion,\n\t\t\t\tversion);\n\t\tassertThat(outcome.getMessage(), outcome.isMatch(), equalTo(expected));\n\t}\n\n\tprivate void registerAndRefresh(Class<?> annotatedClasses) {\n\t\tthis.context.register(annotatedClasses);\n\t\tthis.context.refresh();\n\t}\n\n\tprivate void assertPresent(boolean expected) {\n\t\tint expectedNumber = expected ? 1 : 0;\n\t\tMatcher<Iterable<String>> matcher = iterableWithSize(expectedNumber);\n\t\tassertThat(this.context.getBeansOfType(String.class).values(), is(matcher));\n\t}\n\n\t@Configuration\n\t@ConditionalOnJava(JavaVersion.NINE)\n\tstatic class Java9Required {\n\t\t@Bean\n\t\tString foo() {\n\t\t\treturn "foo";\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnJava(range = Range.OLDER_THAN, value = JavaVersion.SIX)\n\tstatic class Java5Required {\n\t\t@Bean\n\t\tString foo() {\n\t\t\treturn "foo";\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnJava(JavaVersion.SIX)\n\tstatic class Java6Required {\n\t\t@Bean\n\t\tString foo() {\n\t\t\treturn "foo";\n\t\t}\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport org.hamcrest.Matcher;\nimport org.junit.Test;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnJava.JavaVersion;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnJava.Range;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport static org.hamcrest.Matchers.is;\nimport static org.hamcrest.Matchers.iterableWithSize;\nimport static org.junit.Assert.assertThat;\n\n/**\n * Tests for {@link ConditionalOnJava}.\n *\n * @author Oliver Gierke\n */\npublic class ConditionalOnJavaTests {\n\n\tprivate final AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n\n\t@Test\n\tpublic void doesNotMatchIfBetterVersionIsRequired() {\n\n\t\tthis.context.register(Java9Required.class);\n\t\tthis.context.refresh();\n\n\t\tassertPresent(false);\n\t}\n\n\t@Test\n\tpublic void doesNotMatchIfLowerIsRequired() {\n\n\t\tthis.context.register(Java5Required.class);\n\t\tthis.context.refresh();\n\n\t\tassertPresent(false);\n\t}\n\n\t@Test\n\tpublic void matchesIfVersionIsInRange() {\n\n\t\tthis.context.register(Java6Required.class);\n\t\tthis.context.refresh();\n\n\t\tassertPresent(true);\n\t}\n\n\t@Configuration\n\t@ConditionalOnJava(JavaVersion.NINE)\n\tstatic class Java9Required {\n\n\t\t@Bean\n\t\tString foo() {\n\t\t\treturn "foo";\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnJava(value = JavaVersion.SIX, range = Range.OLDER_THAN)\n\tstatic class Java5Required {\n\n\t\t@Bean\n\t\tString foo() {\n\t\t\treturn "foo";\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnJava(JavaVersion.SIX)\n\tstatic class Java6Required {\n\n\t\t@Bean\n\t\tString foo() {\n\t\t\treturn "foo";\n\t\t}\n\t}\n\n\tprivate void assertPresent(boolean expected) {\n\n\t\tint expectedNumber = expected ? 1 : 0;\n\t\tMatcher<Iterable<String>> matcher = iterableWithSize(expectedNumber);\n\n\t\tassertThat(this.context.getBeansOfType(String.class).values(), is(matcher));\n\t}\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
