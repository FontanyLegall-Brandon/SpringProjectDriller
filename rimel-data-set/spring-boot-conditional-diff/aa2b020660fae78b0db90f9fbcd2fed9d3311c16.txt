@@ -16,41 +16,159 @@
 
 package org.springframework.boot.actuate.autoconfigure;
 
+import java.util.List;
+import java.util.concurrent.Executor;
+import java.util.concurrent.Executors;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.boot.actuate.metrics.CounterService;
-import org.springframework.boot.actuate.metrics.DefaultCounterService;
-import org.springframework.boot.actuate.metrics.DefaultGaugeService;
 import org.springframework.boot.actuate.metrics.GaugeService;
-import org.springframework.boot.actuate.metrics.InMemoryMetricRepository;
-import org.springframework.boot.actuate.metrics.MetricRepository;
+import org.springframework.boot.actuate.metrics.export.Exporter;
+import org.springframework.boot.actuate.metrics.repository.InMemoryMetricRepository;
+import org.springframework.boot.actuate.metrics.repository.MetricRepository;
+import org.springframework.boot.actuate.metrics.writer.CodahaleMetricWriter;
+import org.springframework.boot.actuate.metrics.writer.CompositeMetricWriter;
+import org.springframework.boot.actuate.metrics.writer.DefaultCounterService;
+import org.springframework.boot.actuate.metrics.writer.DefaultGaugeService;
+import org.springframework.boot.actuate.metrics.writer.MessageChannelMetricWriter;
+import org.springframework.boot.actuate.metrics.writer.MetricWriter;
+import org.springframework.boot.actuate.metrics.writer.MetricWriterMessageHandler;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Primary;
+import org.springframework.messaging.MessageChannel;
+import org.springframework.messaging.SubscribableChannel;
+import org.springframework.messaging.support.ExecutorSubscribableChannel;
+
+import com.codahale.metrics.MetricRegistry;
 
 
 @Configuration
 public class MetricRepositoryAutoConfiguration {
 
+	@Autowired
+	private MetricWriter writer;
+
 	@Bean
 	@ConditionalOnMissingBean
 	public CounterService counterService() {
-		return new DefaultCounterService(metricRepository());
+		return new DefaultCounterService(this.writer);
 	}
 
 	@Bean
 	@ConditionalOnMissingBean
 	public GaugeService gaugeService() {
-		return new DefaultGaugeService(metricRepository());
+		return new DefaultGaugeService(this.writer);
 	}
 
-	@Bean
-	@ConditionalOnMissingBean
-	protected MetricRepository metricRepository() {
-		return new InMemoryMetricRepository();
+	@Configuration
+	@ConditionalOnMissingBean(MetricRepository.class)
+	static class MetricRepositoryConfiguration {
+
+		@Bean
+		public InMemoryMetricRepository metricRepository() {
+			return new InMemoryMetricRepository();
+		}
+
+	}
+
+	@Configuration
+	@ConditionalOnClass(MessageChannel.class)
+	static class MetricsChannelConfiguration {
+
+		@Autowired(required = false)
+		@Qualifier()
+		private Executor executor = Executors.newSingleThreadExecutor();
+
+		@Bean
+		@ConditionalOnMissingBean(name = )
+		public SubscribableChannel metricsChannel() {
+			return new ExecutorSubscribableChannel(this.executor);
+		}
+
+		@Bean
+		@Primary
+		@ConditionalOnMissingBean(name = )
+		public MetricWriter primaryMetricWriter(
+				@Qualifier() SubscribableChannel channel,
+				List<MetricWriter> writers) {
+			final MetricWriter observer = new CompositeMetricWriter(writers);
+			channel.subscribe(new MetricWriterMessageHandler(observer));
+			return new MessageChannelMetricWriter(channel);
+		}
+
+	}
+
+	@Configuration
+	@ConditionalOnClass(MetricRegistry.class)
+	static class CodahaleMetricRegistryConfiguration {
+
+		@Bean
+		@ConditionalOnMissingBean
+		public MetricRegistry metricRegistry() {
+			return new MetricRegistry();
+		}
+
+		@Bean
+		public CodahaleMetricWriter codahaleMetricWriter(MetricRegistry metricRegistry) {
+			return new CodahaleMetricWriter(metricRegistry);
+		}
+
+		@Bean
+		@Primary
+		@ConditionalOnMissingClass(name = )
+		@ConditionalOnMissingBean(name = )
+		public MetricWriter primaryMetricWriter(List<MetricWriter> writers) {
+			return new CompositeMetricWriter(writers);
+		}
+
 	}
 
 }

