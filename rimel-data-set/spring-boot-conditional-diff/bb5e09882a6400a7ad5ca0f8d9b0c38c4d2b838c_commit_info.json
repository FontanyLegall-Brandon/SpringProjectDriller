{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -152,36 +152,25 @@ public class RabbitAutoConfiguration {\n \tprotected static class RabbitTemplateConfiguration {\n \n \t\t@Bean\n-\t\t@ConditionalOnSingleCandidate(ConnectionFactory.class)\n-\t\t@ConditionalOnMissingBean(RabbitOperations.class)\n-\t\tpublic RabbitTemplate rabbitTemplate(RabbitProperties properties,\n+\t\t@ConditionalOnMissingBean\n+\t\tpublic RabbitTemplateConfigurer rabbitTemplateConfigurer(RabbitProperties properties,\n \t\t\t\tObjectProvider<MessageConverter> messageConverter,\n-\t\t\t\tObjectProvider<RabbitRetryTemplateCustomizer> retryTemplateCustomizers,\n-\t\t\t\tConnectionFactory connectionFactory) {\n-\t\t\tPropertyMapper map = PropertyMapper.get();\n-\t\t\tRabbitTemplate template = new RabbitTemplate(connectionFactory);\n-\t\t\tmessageConverter.ifUnique(template::setMessageConverter);\n-\t\t\ttemplate.setMandatory(determineMandatoryFlag(properties));\n-\t\t\tRabbitProperties.Template templateProperties = properties.getTemplate();\n-\t\t\tif (templateProperties.getRetry().isEnabled()) {\n-\t\t\t\ttemplate.setRetryTemplate(\n-\t\t\t\t\t\tnew RetryTemplateFactory(retryTemplateCustomizers.orderedStream().collect(Collectors.toList()))\n-\t\t\t\t\t\t\t\t.createRetryTemplate(templateProperties.getRetry(),\n-\t\t\t\t\t\t\t\t\t\tRabbitRetryTemplateCustomizer.Target.SENDER));\n-\t\t\t}\n-\t\t\tmap.from(templateProperties::getReceiveTimeout).whenNonNull().as(Duration::toMillis)\n-\t\t\t\t\t.to(template::setReceiveTimeout);\n-\t\t\tmap.from(templateProperties::getReplyTimeout).whenNonNull().as(Duration::toMillis)\n-\t\t\t\t\t.to(template::setReplyTimeout);\n-\t\t\tmap.from(templateProperties::getExchange).to(template::setExchange);\n-\t\t\tmap.from(templateProperties::getRoutingKey).to(template::setRoutingKey);\n-\t\t\tmap.from(templateProperties::getDefaultReceiveQueue).whenNonNull().to(template::setDefaultReceiveQueue);\n-\t\t\treturn template;\n+\t\t\t\tObjectProvider<RabbitRetryTemplateCustomizer> retryTemplateCustomizers) {\n+\t\t\tRabbitTemplateConfigurer configurer = new RabbitTemplateConfigurer();\n+\t\t\tconfigurer.setMessageConverter(messageConverter.getIfUnique());\n+\t\t\tconfigurer\n+\t\t\t\t\t.setRetryTemplateCustomizers(retryTemplateCustomizers.orderedStream().collect(Collectors.toList()));\n+\t\t\tconfigurer.setRabbitProperties(properties);\n+\t\t\treturn configurer;\n \t\t}\n \n-\t\tprivate boolean determineMandatoryFlag(RabbitProperties properties) {\n-\t\t\tBoolean mandatory = properties.getTemplate().getMandatory();\n-\t\t\treturn (mandatory != null) ? mandatory : properties.isPublisherReturns();\n+\t\t@Bean\n+\t\t@ConditionalOnSingleCandidate(ConnectionFactory.class)\n+\t\t@ConditionalOnMissingBean(RabbitOperations.class)\n+\t\tpublic RabbitTemplate rabbitTemplate(RabbitTemplateConfigurer configurer, ConnectionFactory connectionFactory) {\n+\t\t\tRabbitTemplate template = new RabbitTemplate();\n+\t\t\tconfigurer.configure(template, connectionFactory);\n+\t\t\treturn template;\n \t\t}\n \n \t\t@Bean\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.amqp;\n\nimport java.time.Duration;\nimport java.util.stream.Collectors;\n\nimport com.rabbitmq.client.Channel;\n\nimport org.springframework.amqp.core.AmqpAdmin;\nimport org.springframework.amqp.rabbit.connection.CachingConnectionFactory;\nimport org.springframework.amqp.rabbit.connection.ConnectionFactory;\nimport org.springframework.amqp.rabbit.connection.ConnectionNameStrategy;\nimport org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean;\nimport org.springframework.amqp.rabbit.core.RabbitAdmin;\nimport org.springframework.amqp.rabbit.core.RabbitMessagingTemplate;\nimport org.springframework.amqp.rabbit.core.RabbitOperations;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.amqp.support.converter.MessageConverter;\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.context.properties.PropertyMapper;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link RabbitTemplate}.\n * <p>\n * This configuration class is active only when the RabbitMQ and Spring AMQP client\n * libraries are on the classpath.\n * <p>\n * Registers the following beans:\n * <ul>\n * <li>{@link org.springframework.amqp.rabbit.core.RabbitTemplate RabbitTemplate} if there\n * is no other bean of the same type in the context.</li>\n * <li>{@link org.springframework.amqp.rabbit.connection.CachingConnectionFactory\n * CachingConnectionFactory} instance if there is no other bean of the same type in the\n * context.</li>\n * <li>{@link org.springframework.amqp.core.AmqpAdmin } instance as long as\n * {@literal spring.rabbitmq.dynamic=true}.</li>\n * </ul>\n * <p>\n * The {@link org.springframework.amqp.rabbit.connection.CachingConnectionFactory} honors\n * the following properties:\n * <ul>\n * <li>{@literal spring.rabbitmq.port} is used to specify the port to which the client\n * should connect, and defaults to 5672.</li>\n * <li>{@literal spring.rabbitmq.username} is used to specify the (optional) username.\n * </li>\n * <li>{@literal spring.rabbitmq.password} is used to specify the (optional) password.\n * </li>\n * <li>{@literal spring.rabbitmq.host} is used to specify the host, and defaults to\n * {@literal localhost}.</li>\n * <li>{@literal spring.rabbitmq.virtualHost} is used to specify the (optional) virtual\n * host to which the client should connect.</li>\n * </ul>\n *\n * @author Greg Turnquist\n * @author Josh Long\n * @author Stephane Nicoll\n * @author Gary Russell\n * @author Phillip Webb\n * @author Artsiom Yudovin\n * @since 1.0.0\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass({ RabbitTemplate.class, Channel.class })\n@EnableConfigurationProperties(RabbitProperties.class)\n@Import(RabbitAnnotationDrivenConfiguration.class)\npublic class RabbitAutoConfiguration {\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnMissingBean(ConnectionFactory.class)\n\tprotected static class RabbitConnectionFactoryCreator {\n\n\t\t@Bean\n\t\tpublic CachingConnectionFactory rabbitConnectionFactory(RabbitProperties properties,\n\t\t\t\tObjectProvider<ConnectionNameStrategy> connectionNameStrategy) throws Exception {\n\t\t\tPropertyMapper map = PropertyMapper.get();\n\t\t\tCachingConnectionFactory factory = new CachingConnectionFactory(\n\t\t\t\t\tgetRabbitConnectionFactoryBean(properties).getObject());\n\t\t\tmap.from(properties::determineAddresses).to(factory::setAddresses);\n\t\t\tmap.from(properties::isPublisherReturns).to(factory::setPublisherReturns);\n\t\t\tmap.from(properties::getPublisherConfirmType).whenNonNull().to(factory::setPublisherConfirmType);\n\t\t\tRabbitProperties.Cache.Channel channel = properties.getCache().getChannel();\n\t\t\tmap.from(channel::getSize).whenNonNull().to(factory::setChannelCacheSize);\n\t\t\tmap.from(channel::getCheckoutTimeout).whenNonNull().as(Duration::toMillis)\n\t\t\t\t\t.to(factory::setChannelCheckoutTimeout);\n\t\t\tRabbitProperties.Cache.Connection connection = properties.getCache().getConnection();\n\t\t\tmap.from(connection::getMode).whenNonNull().to(factory::setCacheMode);\n\t\t\tmap.from(connection::getSize).whenNonNull().to(factory::setConnectionCacheSize);\n\t\t\tmap.from(connectionNameStrategy::getIfUnique).whenNonNull().to(factory::setConnectionNameStrategy);\n\t\t\treturn factory;\n\t\t}\n\n\t\tprivate RabbitConnectionFactoryBean getRabbitConnectionFactoryBean(RabbitProperties properties)\n\t\t\t\tthrows Exception {\n\t\t\tPropertyMapper map = PropertyMapper.get();\n\t\t\tRabbitConnectionFactoryBean factory = new RabbitConnectionFactoryBean();\n\t\t\tmap.from(properties::determineHost).whenNonNull().to(factory::setHost);\n\t\t\tmap.from(properties::determinePort).to(factory::setPort);\n\t\t\tmap.from(properties::determineUsername).whenNonNull().to(factory::setUsername);\n\t\t\tmap.from(properties::determinePassword).whenNonNull().to(factory::setPassword);\n\t\t\tmap.from(properties::determineVirtualHost).whenNonNull().to(factory::setVirtualHost);\n\t\t\tmap.from(properties::getRequestedHeartbeat).whenNonNull().asInt(Duration::getSeconds)\n\t\t\t\t\t.to(factory::setRequestedHeartbeat);\n\t\t\tmap.from(properties::getRequestedChannelMax).to(factory::setRequestedChannelMax);\n\t\t\tRabbitProperties.Ssl ssl = properties.getSsl();\n\t\t\tif (ssl.determineEnabled()) {\n\t\t\t\tfactory.setUseSSL(true);\n\t\t\t\tmap.from(ssl::getAlgorithm).whenNonNull().to(factory::setSslAlgorithm);\n\t\t\t\tmap.from(ssl::getKeyStoreType).to(factory::setKeyStoreType);\n\t\t\t\tmap.from(ssl::getKeyStore).to(factory::setKeyStore);\n\t\t\t\tmap.from(ssl::getKeyStorePassword).to(factory::setKeyStorePassphrase);\n\t\t\t\tmap.from(ssl::getTrustStoreType).to(factory::setTrustStoreType);\n\t\t\t\tmap.from(ssl::getTrustStore).to(factory::setTrustStore);\n\t\t\t\tmap.from(ssl::getTrustStorePassword).to(factory::setTrustStorePassphrase);\n\t\t\t\tmap.from(ssl::isValidateServerCertificate)\n\t\t\t\t\t\t.to((validate) -> factory.setSkipServerCertificateValidation(!validate));\n\t\t\t\tmap.from(ssl::getVerifyHostname).to(factory::setEnableHostnameVerification);\n\t\t\t}\n\t\t\tmap.from(properties::getConnectionTimeout).whenNonNull().asInt(Duration::toMillis)\n\t\t\t\t\t.to(factory::setConnectionTimeout);\n\t\t\tfactory.afterPropertiesSet();\n\t\t\treturn factory;\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@Import(RabbitConnectionFactoryCreator.class)\n\tprotected static class RabbitTemplateConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic RabbitTemplateConfigurer rabbitTemplateConfigurer(RabbitProperties properties,\n\t\t\t\tObjectProvider<MessageConverter> messageConverter,\n\t\t\t\tObjectProvider<RabbitRetryTemplateCustomizer> retryTemplateCustomizers) {\n\t\t\tRabbitTemplateConfigurer configurer = new RabbitTemplateConfigurer();\n\t\t\tconfigurer.setMessageConverter(messageConverter.getIfUnique());\n\t\t\tconfigurer\n\t\t\t\t\t.setRetryTemplateCustomizers(retryTemplateCustomizers.orderedStream().collect(Collectors.toList()));\n\t\t\tconfigurer.setRabbitProperties(properties);\n\t\t\treturn configurer;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnSingleCandidate(ConnectionFactory.class)\n\t\t@ConditionalOnMissingBean(RabbitOperations.class)\n\t\tpublic RabbitTemplate rabbitTemplate(RabbitTemplateConfigurer configurer, ConnectionFactory connectionFactory) {\n\t\t\tRabbitTemplate template = new RabbitTemplate();\n\t\t\tconfigurer.configure(template, connectionFactory);\n\t\t\treturn template;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnSingleCandidate(ConnectionFactory.class)\n\t\t@ConditionalOnProperty(prefix = "spring.rabbitmq", name = "dynamic", matchIfMissing = true)\n\t\t@ConditionalOnMissingBean\n\t\tpublic AmqpAdmin amqpAdmin(ConnectionFactory connectionFactory) {\n\t\t\treturn new RabbitAdmin(connectionFactory);\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnClass(RabbitMessagingTemplate.class)\n\t@ConditionalOnMissingBean(RabbitMessagingTemplate.class)\n\t@Import(RabbitTemplateConfiguration.class)\n\tprotected static class MessagingTemplateConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnSingleCandidate(RabbitTemplate.class)\n\t\tpublic RabbitMessagingTemplate rabbitMessagingTemplate(RabbitTemplate rabbitTemplate) {\n\t\t\treturn new RabbitMessagingTemplate(rabbitTemplate);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.amqp;\n\nimport java.time.Duration;\nimport java.util.stream.Collectors;\n\nimport com.rabbitmq.client.Channel;\n\nimport org.springframework.amqp.core.AmqpAdmin;\nimport org.springframework.amqp.rabbit.connection.CachingConnectionFactory;\nimport org.springframework.amqp.rabbit.connection.ConnectionFactory;\nimport org.springframework.amqp.rabbit.connection.ConnectionNameStrategy;\nimport org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean;\nimport org.springframework.amqp.rabbit.core.RabbitAdmin;\nimport org.springframework.amqp.rabbit.core.RabbitMessagingTemplate;\nimport org.springframework.amqp.rabbit.core.RabbitOperations;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.amqp.support.converter.MessageConverter;\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.context.properties.PropertyMapper;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link RabbitTemplate}.\n * <p>\n * This configuration class is active only when the RabbitMQ and Spring AMQP client\n * libraries are on the classpath.\n * <p>\n * Registers the following beans:\n * <ul>\n * <li>{@link org.springframework.amqp.rabbit.core.RabbitTemplate RabbitTemplate} if there\n * is no other bean of the same type in the context.</li>\n * <li>{@link org.springframework.amqp.rabbit.connection.CachingConnectionFactory\n * CachingConnectionFactory} instance if there is no other bean of the same type in the\n * context.</li>\n * <li>{@link org.springframework.amqp.core.AmqpAdmin } instance as long as\n * {@literal spring.rabbitmq.dynamic=true}.</li>\n * </ul>\n * <p>\n * The {@link org.springframework.amqp.rabbit.connection.CachingConnectionFactory} honors\n * the following properties:\n * <ul>\n * <li>{@literal spring.rabbitmq.port} is used to specify the port to which the client\n * should connect, and defaults to 5672.</li>\n * <li>{@literal spring.rabbitmq.username} is used to specify the (optional) username.\n * </li>\n * <li>{@literal spring.rabbitmq.password} is used to specify the (optional) password.\n * </li>\n * <li>{@literal spring.rabbitmq.host} is used to specify the host, and defaults to\n * {@literal localhost}.</li>\n * <li>{@literal spring.rabbitmq.virtualHost} is used to specify the (optional) virtual\n * host to which the client should connect.</li>\n * </ul>\n *\n * @author Greg Turnquist\n * @author Josh Long\n * @author Stephane Nicoll\n * @author Gary Russell\n * @author Phillip Webb\n * @author Artsiom Yudovin\n * @since 1.0.0\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass({ RabbitTemplate.class, Channel.class })\n@EnableConfigurationProperties(RabbitProperties.class)\n@Import(RabbitAnnotationDrivenConfiguration.class)\npublic class RabbitAutoConfiguration {\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnMissingBean(ConnectionFactory.class)\n\tprotected static class RabbitConnectionFactoryCreator {\n\n\t\t@Bean\n\t\tpublic CachingConnectionFactory rabbitConnectionFactory(RabbitProperties properties,\n\t\t\t\tObjectProvider<ConnectionNameStrategy> connectionNameStrategy) throws Exception {\n\t\t\tPropertyMapper map = PropertyMapper.get();\n\t\t\tCachingConnectionFactory factory = new CachingConnectionFactory(\n\t\t\t\t\tgetRabbitConnectionFactoryBean(properties).getObject());\n\t\t\tmap.from(properties::determineAddresses).to(factory::setAddresses);\n\t\t\tmap.from(properties::isPublisherReturns).to(factory::setPublisherReturns);\n\t\t\tmap.from(properties::getPublisherConfirmType).whenNonNull().to(factory::setPublisherConfirmType);\n\t\t\tRabbitProperties.Cache.Channel channel = properties.getCache().getChannel();\n\t\t\tmap.from(channel::getSize).whenNonNull().to(factory::setChannelCacheSize);\n\t\t\tmap.from(channel::getCheckoutTimeout).whenNonNull().as(Duration::toMillis)\n\t\t\t\t\t.to(factory::setChannelCheckoutTimeout);\n\t\t\tRabbitProperties.Cache.Connection connection = properties.getCache().getConnection();\n\t\t\tmap.from(connection::getMode).whenNonNull().to(factory::setCacheMode);\n\t\t\tmap.from(connection::getSize).whenNonNull().to(factory::setConnectionCacheSize);\n\t\t\tmap.from(connectionNameStrategy::getIfUnique).whenNonNull().to(factory::setConnectionNameStrategy);\n\t\t\treturn factory;\n\t\t}\n\n\t\tprivate RabbitConnectionFactoryBean getRabbitConnectionFactoryBean(RabbitProperties properties)\n\t\t\t\tthrows Exception {\n\t\t\tPropertyMapper map = PropertyMapper.get();\n\t\t\tRabbitConnectionFactoryBean factory = new RabbitConnectionFactoryBean();\n\t\t\tmap.from(properties::determineHost).whenNonNull().to(factory::setHost);\n\t\t\tmap.from(properties::determinePort).to(factory::setPort);\n\t\t\tmap.from(properties::determineUsername).whenNonNull().to(factory::setUsername);\n\t\t\tmap.from(properties::determinePassword).whenNonNull().to(factory::setPassword);\n\t\t\tmap.from(properties::determineVirtualHost).whenNonNull().to(factory::setVirtualHost);\n\t\t\tmap.from(properties::getRequestedHeartbeat).whenNonNull().asInt(Duration::getSeconds)\n\t\t\t\t\t.to(factory::setRequestedHeartbeat);\n\t\t\tmap.from(properties::getRequestedChannelMax).to(factory::setRequestedChannelMax);\n\t\t\tRabbitProperties.Ssl ssl = properties.getSsl();\n\t\t\tif (ssl.determineEnabled()) {\n\t\t\t\tfactory.setUseSSL(true);\n\t\t\t\tmap.from(ssl::getAlgorithm).whenNonNull().to(factory::setSslAlgorithm);\n\t\t\t\tmap.from(ssl::getKeyStoreType).to(factory::setKeyStoreType);\n\t\t\t\tmap.from(ssl::getKeyStore).to(factory::setKeyStore);\n\t\t\t\tmap.from(ssl::getKeyStorePassword).to(factory::setKeyStorePassphrase);\n\t\t\t\tmap.from(ssl::getTrustStoreType).to(factory::setTrustStoreType);\n\t\t\t\tmap.from(ssl::getTrustStore).to(factory::setTrustStore);\n\t\t\t\tmap.from(ssl::getTrustStorePassword).to(factory::setTrustStorePassphrase);\n\t\t\t\tmap.from(ssl::isValidateServerCertificate)\n\t\t\t\t\t\t.to((validate) -> factory.setSkipServerCertificateValidation(!validate));\n\t\t\t\tmap.from(ssl::getVerifyHostname).to(factory::setEnableHostnameVerification);\n\t\t\t}\n\t\t\tmap.from(properties::getConnectionTimeout).whenNonNull().asInt(Duration::toMillis)\n\t\t\t\t\t.to(factory::setConnectionTimeout);\n\t\t\tfactory.afterPropertiesSet();\n\t\t\treturn factory;\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@Import(RabbitConnectionFactoryCreator.class)\n\tprotected static class RabbitTemplateConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnSingleCandidate(ConnectionFactory.class)\n\t\t@ConditionalOnMissingBean(RabbitOperations.class)\n\t\tpublic RabbitTemplate rabbitTemplate(RabbitProperties properties,\n\t\t\t\tObjectProvider<MessageConverter> messageConverter,\n\t\t\t\tObjectProvider<RabbitRetryTemplateCustomizer> retryTemplateCustomizers,\n\t\t\t\tConnectionFactory connectionFactory) {\n\t\t\tPropertyMapper map = PropertyMapper.get();\n\t\t\tRabbitTemplate template = new RabbitTemplate(connectionFactory);\n\t\t\tmessageConverter.ifUnique(template::setMessageConverter);\n\t\t\ttemplate.setMandatory(determineMandatoryFlag(properties));\n\t\t\tRabbitProperties.Template templateProperties = properties.getTemplate();\n\t\t\tif (templateProperties.getRetry().isEnabled()) {\n\t\t\t\ttemplate.setRetryTemplate(\n\t\t\t\t\t\tnew RetryTemplateFactory(retryTemplateCustomizers.orderedStream().collect(Collectors.toList()))\n\t\t\t\t\t\t\t\t.createRetryTemplate(templateProperties.getRetry(),\n\t\t\t\t\t\t\t\t\t\tRabbitRetryTemplateCustomizer.Target.SENDER));\n\t\t\t}\n\t\t\tmap.from(templateProperties::getReceiveTimeout).whenNonNull().as(Duration::toMillis)\n\t\t\t\t\t.to(template::setReceiveTimeout);\n\t\t\tmap.from(templateProperties::getReplyTimeout).whenNonNull().as(Duration::toMillis)\n\t\t\t\t\t.to(template::setReplyTimeout);\n\t\t\tmap.from(templateProperties::getExchange).to(template::setExchange);\n\t\t\tmap.from(templateProperties::getRoutingKey).to(template::setRoutingKey);\n\t\t\tmap.from(templateProperties::getDefaultReceiveQueue).whenNonNull().to(template::setDefaultReceiveQueue);\n\t\t\treturn template;\n\t\t}\n\n\t\tprivate boolean determineMandatoryFlag(RabbitProperties properties) {\n\t\t\tBoolean mandatory = properties.getTemplate().getMandatory();\n\t\t\treturn (mandatory != null) ? mandatory : properties.isPublisherReturns();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnSingleCandidate(ConnectionFactory.class)\n\t\t@ConditionalOnProperty(prefix = "spring.rabbitmq", name = "dynamic", matchIfMissing = true)\n\t\t@ConditionalOnMissingBean\n\t\tpublic AmqpAdmin amqpAdmin(ConnectionFactory connectionFactory) {\n\t\t\treturn new RabbitAdmin(connectionFactory);\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnClass(RabbitMessagingTemplate.class)\n\t@ConditionalOnMissingBean(RabbitMessagingTemplate.class)\n\t@Import(RabbitTemplateConfiguration.class)\n\tprotected static class MessagingTemplateConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnSingleCandidate(RabbitTemplate.class)\n\t\tpublic RabbitMessagingTemplate rabbitMessagingTemplate(RabbitTemplate rabbitTemplate) {\n\t\t\treturn new RabbitMessagingTemplate(rabbitTemplate);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
