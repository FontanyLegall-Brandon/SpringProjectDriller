{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/MongoRepositoriesAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,133 @@\n+/*\n+ * Copyright 2012-2013 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.data;\n+\n+import java.net.UnknownHostException;\n+\n+import javax.annotation.PreDestroy;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.data.mongodb.core.MongoTemplate;\n+import org.springframework.data.mongodb.repository.MongoRepository;\n+import org.springframework.data.mongodb.repository.config.EnableMongoRepositories;\n+\n+import com.mongodb.DBPort;\n+import com.mongodb.Mongo;\n+import com.mongodb.MongoURI;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s Mongo\n+ * Repositories.\n+ * \n+ * @author Dave Syer\n+ * @see EnableMongoRepositories\n+ */\n+@Configuration\n+@ConditionalOnClass({ Mongo.class, MongoRepository.class })\n+public class MongoRepositoriesAutoConfiguration {\n+\n+\t@Import(MongoRepositoriesAutoConfigureRegistrar.class)\n+\t@Configuration\n+\t@EnableConfigurationProperties(MongoProperties.class)\n+\tprotected static class MongoRepositoriesConfiguration {\n+\n+\t\t@Autowired\n+\t\tprivate MongoProperties config;\n+\n+\t\t@PreDestroy\n+\t\tpublic void close() throws UnknownHostException {\n+\t\t\tmongo().close();\n+\t\t}\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(Mongo.class)\n+\t\tMongo mongo() throws UnknownHostException {\n+\t\t\treturn this.config.mongo();\n+\t\t}\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(MongoTemplate.class)\n+\t\tMongoTemplate mongoTemplate(Mongo mongo) throws UnknownHostException {\n+\t\t\treturn new MongoTemplate(mongo, this.config.database());\n+\t\t}\n+\n+\t}\n+\n+\t@ConfigurationProperties(name = "spring.data.mongo")\n+\tpublic static class MongoProperties {\n+\n+\t\tprivate String host;\n+\n+\t\tprivate int port = DBPort.PORT;\n+\n+\t\tprivate String uri = "mongodb://localhost/test";\n+\n+\t\tprivate String database;\n+\n+\t\tpublic String getHost() {\n+\t\t\treturn this.host;\n+\t\t}\n+\n+\t\tpublic String database() {\n+\t\t\treturn this.database == null ? new MongoURI(this.uri).getDatabase()\n+\t\t\t\t\t: this.database;\n+\t\t}\n+\n+\t\tpublic Mongo mongo() throws UnknownHostException {\n+\t\t\treturn this.host != null ? new Mongo(this.host, this.port) : new Mongo(\n+\t\t\t\t\tnew MongoURI(this.uri));\n+\t\t}\n+\n+\t\tpublic void setHost(String host) {\n+\t\t\tthis.host = host;\n+\t\t}\n+\n+\t\tpublic String getDatabase() {\n+\t\t\treturn this.database;\n+\t\t}\n+\n+\t\tpublic void setDatabase(String database) {\n+\t\t\tthis.database = database;\n+\t\t}\n+\n+\t\tpublic String getUri() {\n+\t\t\treturn this.uri;\n+\t\t}\n+\n+\t\tpublic void setUri(String uri) {\n+\t\t\tthis.uri = uri;\n+\t\t}\n+\n+\t\tpublic int getPort() {\n+\t\t\treturn this.port;\n+\t\t}\n+\n+\t\tpublic void setPort(int port) {\n+\t\t\tthis.port = port;\n+\t\t}\n+\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data;\n\nimport java.net.UnknownHostException;\n\nimport javax.annotation.PreDestroy;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.data.mongodb.repository.MongoRepository;\nimport org.springframework.data.mongodb.repository.config.EnableMongoRepositories;\n\nimport com.mongodb.DBPort;\nimport com.mongodb.Mongo;\nimport com.mongodb.MongoURI;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s Mongo\n * Repositories.\n * \n * @author Dave Syer\n * @see EnableMongoRepositories\n */\n@Configuration\n@ConditionalOnClass({ Mongo.class, MongoRepository.class })\npublic class MongoRepositoriesAutoConfiguration {\n\n\t@Import(MongoRepositoriesAutoConfigureRegistrar.class)\n\t@Configuration\n\t@EnableConfigurationProperties(MongoProperties.class)\n\tprotected static class MongoRepositoriesConfiguration {\n\n\t\t@Autowired\n\t\tprivate MongoProperties config;\n\n\t\t@PreDestroy\n\t\tpublic void close() throws UnknownHostException {\n\t\t\tmongo().close();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(Mongo.class)\n\t\tMongo mongo() throws UnknownHostException {\n\t\t\treturn this.config.mongo();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(MongoTemplate.class)\n\t\tMongoTemplate mongoTemplate(Mongo mongo) throws UnknownHostException {\n\t\t\treturn new MongoTemplate(mongo, this.config.database());\n\t\t}\n\n\t}\n\n\t@ConfigurationProperties(name = "spring.data.mongo")\n\tpublic static class MongoProperties {\n\n\t\tprivate String host;\n\n\t\tprivate int port = DBPort.PORT;\n\n\t\tprivate String uri = "mongodb://localhost/test";\n\n\t\tprivate String database;\n\n\t\tpublic String getHost() {\n\t\t\treturn this.host;\n\t\t}\n\n\t\tpublic String database() {\n\t\t\treturn this.database == null ? new MongoURI(this.uri).getDatabase()\n\t\t\t\t\t: this.database;\n\t\t}\n\n\t\tpublic Mongo mongo() throws UnknownHostException {\n\t\t\treturn this.host != null ? new Mongo(this.host, this.port) : new Mongo(\n\t\t\t\t\tnew MongoURI(this.uri));\n\t\t}\n\n\t\tpublic void setHost(String host) {\n\t\t\tthis.host = host;\n\t\t}\n\n\t\tpublic String getDatabase() {\n\t\t\treturn this.database;\n\t\t}\n\n\t\tpublic void setDatabase(String database) {\n\t\t\tthis.database = database;\n\t\t}\n\n\t\tpublic String getUri() {\n\t\t\treturn this.uri;\n\t\t}\n\n\t\tpublic void setUri(String uri) {\n\t\t\tthis.uri = uri;\n\t\t}\n\n\t\tpublic int getPort() {\n\t\t\treturn this.port;\n\t\t}\n\n\t\tpublic void setPort(int port) {\n\t\t\tthis.port = port;\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
