{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoDataAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoDataAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,9 +16,6 @@\n \n package org.springframework.boot.autoconfigure.data.mongo;\n \n-import java.util.Arrays;\n-import java.util.List;\n-\n import com.mongodb.ClientSessionOptions;\n import com.mongodb.DB;\n import com.mongodb.MongoClient;\n@@ -32,7 +29,7 @@ import org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration.AnySyncMongoClientAvailable;\n+import org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration.AnyMongoClientAvailable;\n import org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration;\n import org.springframework.boot.autoconfigure.mongo.MongoProperties;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n@@ -43,6 +40,7 @@ import org.springframework.context.annotation.Import;\n import org.springframework.dao.DataAccessException;\n import org.springframework.dao.support.PersistenceExceptionTranslator;\n import org.springframework.data.mongodb.MongoDbFactory;\n+import org.springframework.data.mongodb.core.MongoDbFactorySupport;\n import org.springframework.data.mongodb.core.MongoTemplate;\n import org.springframework.data.mongodb.core.SimpleMongoClientDbFactory;\n import org.springframework.data.mongodb.core.SimpleMongoDbFactory;\n@@ -75,8 +73,9 @@ import org.springframework.util.StringUtils;\n  * @since 1.1.0\n  */\n @Configuration\n-@ConditionalOnClass({ MongoClient.class, MongoTemplate.class })\n-@Conditional(AnySyncMongoClientAvailable.class)\n+@ConditionalOnClass({ MongoClient.class, com.mongodb.client.MongoClient.class,\n+\t\tMongoTemplate.class })\n+@Conditional(AnyMongoClientAvailable.class)\n @EnableConfigurationProperties(MongoProperties.class)\n @Import(MongoDataConfiguration.class)\n @AutoConfigureAfter(MongoAutoConfiguration.class)\n@@ -84,22 +83,25 @@ public class MongoDataAutoConfiguration {\n \n \tprivate final MongoProperties properties;\n \n-\tprivate final MongoDbFactoryFactory dbFactoryFactory;\n-\n-\tpublic MongoDataAutoConfiguration(ObjectProvider<MongoClient> mongoClientProvider,\n-\t\t\tObjectProvider<com.mongodb.client.MongoClient> mongoClientClientProvider,\n-\t\t\tMongoProperties properties) {\n-\n+\tpublic MongoDataAutoConfiguration(MongoProperties properties) {\n \t\tthis.properties = properties;\n-\t\tthis.dbFactoryFactory = new MongoDbFactoryFactory(mongoClientProvider,\n-\t\t\t\tmongoClientClientProvider);\n \t}\n \n \t@Bean\n-\t@Conditional(AnySyncMongoClientAvailable.class)\n \t@ConditionalOnMissingBean(MongoDbFactory.class)\n-\tpublic MongoDbFactory mongoDbFactory() {\n-\t\treturn this.dbFactoryFactory.getFor(this.properties.getMongoClientDatabase());\n+\tpublic MongoDbFactorySupport<?> mongoDbFactory(ObjectProvider<MongoClient> mongo,\n+\t\t\tObjectProvider<com.mongodb.client.MongoClient> mongoClient) {\n+\t\tMongoClient preferredClient = mongo.getIfAvailable();\n+\t\tif (preferredClient != null) {\n+\t\t\treturn new SimpleMongoDbFactory(preferredClient,\n+\t\t\t\t\tthis.properties.getMongoClientDatabase());\n+\t\t}\n+\t\tcom.mongodb.client.MongoClient fallbackClient = mongoClient.getIfAvailable();\n+\t\tif (fallbackClient != null) {\n+\t\t\treturn new SimpleMongoClientDbFactory(fallbackClient,\n+\t\t\t\t\tthis.properties.getMongoClientDatabase());\n+\t\t}\n+\t\tthrow new IllegalStateException("Expected to find at least one MongoDB client.");\n \t}\n \n \t@Bean\n@@ -183,87 +185,23 @@ public class MongoDataAutoConfiguration {\n \t}\n \n \t/**\n-\t * Check if either {@link com.mongodb.MongoClient} or\n-\t * {@link com.mongodb.client.MongoClient} is already defined in the\n-\t * {@link org.springframework.context.ApplicationContext}.\n-\t *\n-\t * @author Christoph Strobl\n-\t * @since 2.1\n+\t * Check if either a {@link com.mongodb.MongoClient} or\n+\t * {@link com.mongodb.client.MongoClient} bean is available.\n \t */\n-\tstatic class AnySyncMongoClientAvailable extends AnyNestedCondition {\n+\tstatic class AnyMongoClientAvailable extends AnyNestedCondition {\n \n-\t\tAnySyncMongoClientAvailable() {\n+\t\tAnyMongoClientAvailable() {\n \t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n \t\t}\n \n-\t\t@ConditionalOnBean(com.mongodb.MongoClient.class)\n-\t\tstatic class MongoClientPreferred {\n+\t\t@ConditionalOnBean(MongoClient.class)\n+\t\tstatic class PreferredClientAvailable {\n \n \t\t}\n \n \t\t@ConditionalOnBean(com.mongodb.client.MongoClient.class)\n-\t\tstatic class MongoClientClientPreferred {\n-\n-\t\t}\n-\n-\t}\n-\n-\t/**\n-\t * Encapsulation of {@link MongoDbFactory} creation depending on available beans\n-\t * {@link com.mongodb.MongoClient} or {@link com.mongodb.client.MongoClient} expressed\n-\t * via the given {@link ObjectProvider ObjectProviders}. Prefers the first available\n-\t * MongoDB client creating a suitable instance of {@link MongoDbFactory} for it.\n-\t *\n-\t * @author Christoph Strobl\n-\t * @since 2.1\n-\t */\n-\tstatic class MongoDbFactoryFactory {\n-\n-\t\tprivate final List<ObjectProvider<?>> clientProviders;\n-\n-\t\t/**\n-\t\t * Create new instance of {@link MongoDbFactoryFactory}.\n-\t\t * @param clientProviders order matters here, as we choose the first available\n-\t\t * one.\n-\t\t */\n-\t\tMongoDbFactoryFactory(ObjectProvider<?>... clientProviders) {\n-\t\t\tthis.clientProviders = Arrays.asList(clientProviders);\n-\t\t}\n-\n-\t\t/**\n-\t\t * Get the {@link MongoDbFactory} suitable for the first available MongoDB client.\n-\t\t * @param database the name of the default database to return on\n-\t\t * {@link MongoDbFactory#getDb()}.\n-\t\t * @return new instance of {@link MongoDbFactory} suitable for the first available\n-\t\t * MongoDB client.\n-\t\t */\n-\t\tMongoDbFactory getFor(String database) {\n-\n-\t\t\tObject client = findAvailableClientProvider();\n-\n-\t\t\tif (client instanceof MongoClient) {\n-\t\t\t\treturn new SimpleMongoDbFactory(MongoClient.class.cast(client), database);\n-\t\t\t}\n-\n-\t\t\tif (client instanceof com.mongodb.client.MongoClient) {\n-\t\t\t\treturn new SimpleMongoClientDbFactory(\n-\t\t\t\t\t\tcom.mongodb.client.MongoClient.class.cast(client), database);\n-\t\t\t}\n-\n-\t\t\treturn null;\n-\t\t}\n-\n-\t\tprivate Object findAvailableClientProvider() {\n-\n-\t\t\tfor (ObjectProvider<?> provider : this.clientProviders) {\n-\t\t\t\tObject client = provider.getIfAvailable();\n-\t\t\t\tif (client != null) {\n-\t\t\t\t\treturn client;\n-\t\t\t\t}\n-\t\t\t}\n+\t\tstatic class FallbackClientAvailable {\n \n-\t\t\tthrow new IllegalStateException(\n-\t\t\t\t\t"Expected to find at least one MongoDB client.");\n \t\t}\n \n \t}\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.mongo;\n\nimport com.mongodb.ClientSessionOptions;\nimport com.mongodb.DB;\nimport com.mongodb.MongoClient;\nimport com.mongodb.client.ClientSession;\nimport com.mongodb.client.MongoDatabase;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration.AnyMongoClientAvailable;\nimport org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration;\nimport org.springframework.boot.autoconfigure.mongo.MongoProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.dao.DataAccessException;\nimport org.springframework.dao.support.PersistenceExceptionTranslator;\nimport org.springframework.data.mongodb.MongoDbFactory;\nimport org.springframework.data.mongodb.core.MongoDbFactorySupport;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.data.mongodb.core.SimpleMongoClientDbFactory;\nimport org.springframework.data.mongodb.core.SimpleMongoDbFactory;\nimport org.springframework.data.mongodb.core.convert.DbRefResolver;\nimport org.springframework.data.mongodb.core.convert.DefaultDbRefResolver;\nimport org.springframework.data.mongodb.core.convert.MappingMongoConverter;\nimport org.springframework.data.mongodb.core.convert.MongoConverter;\nimport org.springframework.data.mongodb.core.convert.MongoCustomConversions;\nimport org.springframework.data.mongodb.core.mapping.MongoMappingContext;\nimport org.springframework.data.mongodb.gridfs.GridFsTemplate;\nimport org.springframework.util.Assert;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s mongo support.\n * <p>\n * Registers a {@link MongoTemplate} and {@link GridFsTemplate} beans if no other beans of\n * the same type are configured.\n * <P>\n * Honors the {@literal spring.data.mongodb.database} property if set, otherwise connects\n * to the {@literal test} database.\n *\n * @author Dave Syer\n * @author Oliver Gierke\n * @author Josh Long\n * @author Phillip Webb\n * @author Eddú Meléndez\n * @author Stephane Nicoll\n * @author Christoph Strobl\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass({ MongoClient.class, com.mongodb.client.MongoClient.class,\n\t\tMongoTemplate.class })\n@Conditional(AnyMongoClientAvailable.class)\n@EnableConfigurationProperties(MongoProperties.class)\n@Import(MongoDataConfiguration.class)\n@AutoConfigureAfter(MongoAutoConfiguration.class)\npublic class MongoDataAutoConfiguration {\n\n\tprivate final MongoProperties properties;\n\n\tpublic MongoDataAutoConfiguration(MongoProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(MongoDbFactory.class)\n\tpublic MongoDbFactorySupport<?> mongoDbFactory(ObjectProvider<MongoClient> mongo,\n\t\t\tObjectProvider<com.mongodb.client.MongoClient> mongoClient) {\n\t\tMongoClient preferredClient = mongo.getIfAvailable();\n\t\tif (preferredClient != null) {\n\t\t\treturn new SimpleMongoDbFactory(preferredClient,\n\t\t\t\t\tthis.properties.getMongoClientDatabase());\n\t\t}\n\t\tcom.mongodb.client.MongoClient fallbackClient = mongoClient.getIfAvailable();\n\t\tif (fallbackClient != null) {\n\t\t\treturn new SimpleMongoClientDbFactory(fallbackClient,\n\t\t\t\t\tthis.properties.getMongoClientDatabase());\n\t\t}\n\t\tthrow new IllegalStateException("Expected to find at least one MongoDB client.");\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic MongoTemplate mongoTemplate(MongoDbFactory mongoDbFactory,\n\t\t\tMongoConverter converter) {\n\t\treturn new MongoTemplate(mongoDbFactory, converter);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(MongoConverter.class)\n\tpublic MappingMongoConverter mappingMongoConverter(MongoDbFactory factory,\n\t\t\tMongoMappingContext context, MongoCustomConversions conversions) {\n\t\tDbRefResolver dbRefResolver = new DefaultDbRefResolver(factory);\n\t\tMappingMongoConverter mappingConverter = new MappingMongoConverter(dbRefResolver,\n\t\t\t\tcontext);\n\t\tmappingConverter.setCustomConversions(conversions);\n\t\treturn mappingConverter;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic GridFsTemplate gridFsTemplate(MongoDbFactory mongoDbFactory,\n\t\t\tMongoTemplate mongoTemplate) {\n\t\treturn new GridFsTemplate(\n\t\t\t\tnew GridFsMongoDbFactory(mongoDbFactory, this.properties),\n\t\t\t\tmongoTemplate.getConverter());\n\t}\n\n\t/**\n\t * {@link MongoDbFactory} decorator to respect\n\t * {@link MongoProperties#getGridFsDatabase()} if set.\n\t */\n\tprivate static class GridFsMongoDbFactory implements MongoDbFactory {\n\n\t\tprivate final MongoDbFactory mongoDbFactory;\n\n\t\tprivate final MongoProperties properties;\n\n\t\tGridFsMongoDbFactory(MongoDbFactory mongoDbFactory, MongoProperties properties) {\n\t\t\tAssert.notNull(mongoDbFactory, "MongoDbFactory must not be null");\n\t\t\tAssert.notNull(properties, "Properties must not be null");\n\t\t\tthis.mongoDbFactory = mongoDbFactory;\n\t\t\tthis.properties = properties;\n\t\t}\n\n\t\t@Override\n\t\tpublic MongoDatabase getDb() throws DataAccessException {\n\t\t\tString gridFsDatabase = this.properties.getGridFsDatabase();\n\t\t\tif (StringUtils.hasText(gridFsDatabase)) {\n\t\t\t\treturn this.mongoDbFactory.getDb(gridFsDatabase);\n\t\t\t}\n\t\t\treturn this.mongoDbFactory.getDb();\n\t\t}\n\n\t\t@Override\n\t\tpublic MongoDatabase getDb(String dbName) throws DataAccessException {\n\t\t\treturn this.mongoDbFactory.getDb(dbName);\n\t\t}\n\n\t\t@Override\n\t\tpublic PersistenceExceptionTranslator getExceptionTranslator() {\n\t\t\treturn this.mongoDbFactory.getExceptionTranslator();\n\t\t}\n\n\t\t@Override\n\t\tpublic DB getLegacyDb() {\n\t\t\treturn this.mongoDbFactory.getLegacyDb();\n\t\t}\n\n\t\t@Override\n\t\tpublic ClientSession getSession(ClientSessionOptions options) {\n\t\t\treturn this.mongoDbFactory.getSession(options);\n\t\t}\n\n\t\t@Override\n\t\tpublic MongoDbFactory withSession(ClientSession session) {\n\t\t\treturn this.mongoDbFactory.withSession(session);\n\t\t}\n\n\t}\n\n\t/**\n\t * Check if either a {@link com.mongodb.MongoClient} or\n\t * {@link com.mongodb.client.MongoClient} bean is available.\n\t */\n\tstatic class AnyMongoClientAvailable extends AnyNestedCondition {\n\n\t\tAnyMongoClientAvailable() {\n\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n\t\t}\n\n\t\t@ConditionalOnBean(MongoClient.class)\n\t\tstatic class PreferredClientAvailable {\n\n\t\t}\n\n\t\t@ConditionalOnBean(com.mongodb.client.MongoClient.class)\n\t\tstatic class FallbackClientAvailable {\n\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.mongo;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport com.mongodb.ClientSessionOptions;\nimport com.mongodb.DB;\nimport com.mongodb.MongoClient;\nimport com.mongodb.client.ClientSession;\nimport com.mongodb.client.MongoDatabase;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration.AnySyncMongoClientAvailable;\nimport org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration;\nimport org.springframework.boot.autoconfigure.mongo.MongoProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.dao.DataAccessException;\nimport org.springframework.dao.support.PersistenceExceptionTranslator;\nimport org.springframework.data.mongodb.MongoDbFactory;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.data.mongodb.core.SimpleMongoClientDbFactory;\nimport org.springframework.data.mongodb.core.SimpleMongoDbFactory;\nimport org.springframework.data.mongodb.core.convert.DbRefResolver;\nimport org.springframework.data.mongodb.core.convert.DefaultDbRefResolver;\nimport org.springframework.data.mongodb.core.convert.MappingMongoConverter;\nimport org.springframework.data.mongodb.core.convert.MongoConverter;\nimport org.springframework.data.mongodb.core.convert.MongoCustomConversions;\nimport org.springframework.data.mongodb.core.mapping.MongoMappingContext;\nimport org.springframework.data.mongodb.gridfs.GridFsTemplate;\nimport org.springframework.util.Assert;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s mongo support.\n * <p>\n * Registers a {@link MongoTemplate} and {@link GridFsTemplate} beans if no other beans of\n * the same type are configured.\n * <P>\n * Honors the {@literal spring.data.mongodb.database} property if set, otherwise connects\n * to the {@literal test} database.\n *\n * @author Dave Syer\n * @author Oliver Gierke\n * @author Josh Long\n * @author Phillip Webb\n * @author Eddú Meléndez\n * @author Stephane Nicoll\n * @author Christoph Strobl\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass({ MongoClient.class, MongoTemplate.class })\n@Conditional(AnySyncMongoClientAvailable.class)\n@EnableConfigurationProperties(MongoProperties.class)\n@Import(MongoDataConfiguration.class)\n@AutoConfigureAfter(MongoAutoConfiguration.class)\npublic class MongoDataAutoConfiguration {\n\n\tprivate final MongoProperties properties;\n\n\tprivate final MongoDbFactoryFactory dbFactoryFactory;\n\n\tpublic MongoDataAutoConfiguration(ObjectProvider<MongoClient> mongoClientProvider,\n\t\t\tObjectProvider<com.mongodb.client.MongoClient> mongoClientClientProvider,\n\t\t\tMongoProperties properties) {\n\n\t\tthis.properties = properties;\n\t\tthis.dbFactoryFactory = new MongoDbFactoryFactory(mongoClientProvider,\n\t\t\t\tmongoClientClientProvider);\n\t}\n\n\t@Bean\n\t@Conditional(AnySyncMongoClientAvailable.class)\n\t@ConditionalOnMissingBean(MongoDbFactory.class)\n\tpublic MongoDbFactory mongoDbFactory() {\n\t\treturn this.dbFactoryFactory.getFor(this.properties.getMongoClientDatabase());\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic MongoTemplate mongoTemplate(MongoDbFactory mongoDbFactory,\n\t\t\tMongoConverter converter) {\n\t\treturn new MongoTemplate(mongoDbFactory, converter);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(MongoConverter.class)\n\tpublic MappingMongoConverter mappingMongoConverter(MongoDbFactory factory,\n\t\t\tMongoMappingContext context, MongoCustomConversions conversions) {\n\t\tDbRefResolver dbRefResolver = new DefaultDbRefResolver(factory);\n\t\tMappingMongoConverter mappingConverter = new MappingMongoConverter(dbRefResolver,\n\t\t\t\tcontext);\n\t\tmappingConverter.setCustomConversions(conversions);\n\t\treturn mappingConverter;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic GridFsTemplate gridFsTemplate(MongoDbFactory mongoDbFactory,\n\t\t\tMongoTemplate mongoTemplate) {\n\t\treturn new GridFsTemplate(\n\t\t\t\tnew GridFsMongoDbFactory(mongoDbFactory, this.properties),\n\t\t\t\tmongoTemplate.getConverter());\n\t}\n\n\t/**\n\t * {@link MongoDbFactory} decorator to respect\n\t * {@link MongoProperties#getGridFsDatabase()} if set.\n\t */\n\tprivate static class GridFsMongoDbFactory implements MongoDbFactory {\n\n\t\tprivate final MongoDbFactory mongoDbFactory;\n\n\t\tprivate final MongoProperties properties;\n\n\t\tGridFsMongoDbFactory(MongoDbFactory mongoDbFactory, MongoProperties properties) {\n\t\t\tAssert.notNull(mongoDbFactory, "MongoDbFactory must not be null");\n\t\t\tAssert.notNull(properties, "Properties must not be null");\n\t\t\tthis.mongoDbFactory = mongoDbFactory;\n\t\t\tthis.properties = properties;\n\t\t}\n\n\t\t@Override\n\t\tpublic MongoDatabase getDb() throws DataAccessException {\n\t\t\tString gridFsDatabase = this.properties.getGridFsDatabase();\n\t\t\tif (StringUtils.hasText(gridFsDatabase)) {\n\t\t\t\treturn this.mongoDbFactory.getDb(gridFsDatabase);\n\t\t\t}\n\t\t\treturn this.mongoDbFactory.getDb();\n\t\t}\n\n\t\t@Override\n\t\tpublic MongoDatabase getDb(String dbName) throws DataAccessException {\n\t\t\treturn this.mongoDbFactory.getDb(dbName);\n\t\t}\n\n\t\t@Override\n\t\tpublic PersistenceExceptionTranslator getExceptionTranslator() {\n\t\t\treturn this.mongoDbFactory.getExceptionTranslator();\n\t\t}\n\n\t\t@Override\n\t\tpublic DB getLegacyDb() {\n\t\t\treturn this.mongoDbFactory.getLegacyDb();\n\t\t}\n\n\t\t@Override\n\t\tpublic ClientSession getSession(ClientSessionOptions options) {\n\t\t\treturn this.mongoDbFactory.getSession(options);\n\t\t}\n\n\t\t@Override\n\t\tpublic MongoDbFactory withSession(ClientSession session) {\n\t\t\treturn this.mongoDbFactory.withSession(session);\n\t\t}\n\n\t}\n\n\t/**\n\t * Check if either {@link com.mongodb.MongoClient} or\n\t * {@link com.mongodb.client.MongoClient} is already defined in the\n\t * {@link org.springframework.context.ApplicationContext}.\n\t *\n\t * @author Christoph Strobl\n\t * @since 2.1\n\t */\n\tstatic class AnySyncMongoClientAvailable extends AnyNestedCondition {\n\n\t\tAnySyncMongoClientAvailable() {\n\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n\t\t}\n\n\t\t@ConditionalOnBean(com.mongodb.MongoClient.class)\n\t\tstatic class MongoClientPreferred {\n\n\t\t}\n\n\t\t@ConditionalOnBean(com.mongodb.client.MongoClient.class)\n\t\tstatic class MongoClientClientPreferred {\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Encapsulation of {@link MongoDbFactory} creation depending on available beans\n\t * {@link com.mongodb.MongoClient} or {@link com.mongodb.client.MongoClient} expressed\n\t * via the given {@link ObjectProvider ObjectProviders}. Prefers the first available\n\t * MongoDB client creating a suitable instance of {@link MongoDbFactory} for it.\n\t *\n\t * @author Christoph Strobl\n\t * @since 2.1\n\t */\n\tstatic class MongoDbFactoryFactory {\n\n\t\tprivate final List<ObjectProvider<?>> clientProviders;\n\n\t\t/**\n\t\t * Create new instance of {@link MongoDbFactoryFactory}.\n\t\t * @param clientProviders order matters here, as we choose the first available\n\t\t * one.\n\t\t */\n\t\tMongoDbFactoryFactory(ObjectProvider<?>... clientProviders) {\n\t\t\tthis.clientProviders = Arrays.asList(clientProviders);\n\t\t}\n\n\t\t/**\n\t\t * Get the {@link MongoDbFactory} suitable for the first available MongoDB client.\n\t\t * @param database the name of the default database to return on\n\t\t * {@link MongoDbFactory#getDb()}.\n\t\t * @return new instance of {@link MongoDbFactory} suitable for the first available\n\t\t * MongoDB client.\n\t\t */\n\t\tMongoDbFactory getFor(String database) {\n\n\t\t\tObject client = findAvailableClientProvider();\n\n\t\t\tif (client instanceof MongoClient) {\n\t\t\t\treturn new SimpleMongoDbFactory(MongoClient.class.cast(client), database);\n\t\t\t}\n\n\t\t\tif (client instanceof com.mongodb.client.MongoClient) {\n\t\t\t\treturn new SimpleMongoClientDbFactory(\n\t\t\t\t\t\tcom.mongodb.client.MongoClient.class.cast(client), database);\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\tprivate Object findAvailableClientProvider() {\n\n\t\t\tfor (ObjectProvider<?> provider : this.clientProviders) {\n\t\t\t\tObject client = provider.getIfAvailable();\n\t\t\t\tif (client != null) {\n\t\t\t\t\treturn client;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t"Expected to find at least one MongoDB client.");\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
