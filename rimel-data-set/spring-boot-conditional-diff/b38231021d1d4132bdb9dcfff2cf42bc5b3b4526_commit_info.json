{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebClientAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2012-2016 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.web;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.web.client.RestTemplateBuilder;\n+import org.springframework.boot.web.client.RestTemplateCustomizer;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.annotation.AnnotationAwareOrderComparator;\n+import org.springframework.util.CollectionUtils;\n+import org.springframework.web.client.RestTemplate;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for web client.\n+ *\n+ * @author Stephane Nicoll\n+ * @author Phillip Webb\n+ * @since 1.4.0\n+ */\n+@Configuration\n+@AutoConfigureAfter(HttpMessageConvertersAutoConfiguration.class)\n+public class WebClientAutoConfiguration {\n+\n+\t@Configuration\n+\t@ConditionalOnClass(RestTemplate.class)\n+\tpublic static class RestTemplateConfiguration {\n+\n+\t\tprivate final ObjectProvider<HttpMessageConverters> messageConverters;\n+\n+\t\tprivate final ObjectProvider<List<RestTemplateCustomizer>> restTemplateCustomizers;\n+\n+\t\tpublic RestTemplateConfiguration(\n+\t\t\t\tObjectProvider<HttpMessageConverters> messageConverters,\n+\t\t\t\tObjectProvider<List<RestTemplateCustomizer>> restTemplateCustomizers) {\n+\t\t\tthis.messageConverters = messageConverters;\n+\t\t\tthis.restTemplateCustomizers = restTemplateCustomizers;\n+\t\t}\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean\n+\t\tpublic RestTemplateBuilder restTemplateBuilder() {\n+\t\t\tRestTemplateBuilder builder = new RestTemplateBuilder();\n+\t\t\tHttpMessageConverters converters = this.messageConverters.getIfUnique();\n+\t\t\tif (converters != null) {\n+\t\t\t\tbuilder = builder.messageConverters(converters.getConverters());\n+\t\t\t}\n+\t\t\tList<RestTemplateCustomizer> customizers = this.restTemplateCustomizers\n+\t\t\t\t\t.getIfAvailable();\n+\t\t\tif (!CollectionUtils.isEmpty(customizers)) {\n+\t\t\t\tcustomizers = new ArrayList<RestTemplateCustomizer>(customizers);\n+\t\t\t\tAnnotationAwareOrderComparator.sort(customizers);\n+\t\t\t\tbuilder = builder.customizers(customizers);\n+\t\t\t}\n+\t\t\treturn builder;\n+\t\t}\n+\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.web.client.RestTemplateBuilder;\nimport org.springframework.boot.web.client.RestTemplateCustomizer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.AnnotationAwareOrderComparator;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.web.client.RestTemplate;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for web client.\n *\n * @author Stephane Nicoll\n * @author Phillip Webb\n * @since 1.4.0\n */\n@Configuration\n@AutoConfigureAfter(HttpMessageConvertersAutoConfiguration.class)\npublic class WebClientAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnClass(RestTemplate.class)\n\tpublic static class RestTemplateConfiguration {\n\n\t\tprivate final ObjectProvider<HttpMessageConverters> messageConverters;\n\n\t\tprivate final ObjectProvider<List<RestTemplateCustomizer>> restTemplateCustomizers;\n\n\t\tpublic RestTemplateConfiguration(\n\t\t\t\tObjectProvider<HttpMessageConverters> messageConverters,\n\t\t\t\tObjectProvider<List<RestTemplateCustomizer>> restTemplateCustomizers) {\n\t\t\tthis.messageConverters = messageConverters;\n\t\t\tthis.restTemplateCustomizers = restTemplateCustomizers;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic RestTemplateBuilder restTemplateBuilder() {\n\t\t\tRestTemplateBuilder builder = new RestTemplateBuilder();\n\t\t\tHttpMessageConverters converters = this.messageConverters.getIfUnique();\n\t\t\tif (converters != null) {\n\t\t\t\tbuilder = builder.messageConverters(converters.getConverters());\n\t\t\t}\n\t\t\tList<RestTemplateCustomizer> customizers = this.restTemplateCustomizers\n\t\t\t\t\t.getIfAvailable();\n\t\t\tif (!CollectionUtils.isEmpty(customizers)) {\n\t\t\t\tcustomizers = new ArrayList<RestTemplateCustomizer>(customizers);\n\t\t\t\tAnnotationAwareOrderComparator.sort(customizers);\n\t\t\t\tbuilder = builder.customizers(customizers);\n\t\t\t}\n\t\t\treturn builder;\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
