{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/trace/TraceEndpointAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/trace/TraceEndpointAutoConfiguration.java'), 'change_type': <ModificationType.RENAME: 3>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -14,33 +14,34 @@\n  * limitations under the License.\n  */\n \n-package org.springframework.boot.actuate.autoconfigure.trace;\n+package org.springframework.boot.actuate.autoconfigure.web.trace;\n \n-import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\n-import org.springframework.boot.actuate.trace.InMemoryTraceRepository;\n-import org.springframework.boot.actuate.trace.TraceEndpoint;\n-import org.springframework.boot.actuate.trace.TraceRepository;\n+import org.springframework.boot.actuate.web.trace.HttpTraceEndpoint;\n+import org.springframework.boot.actuate.web.trace.HttpTraceRepository;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n /**\n- * {@link EnableAutoConfiguration Auto-configuration} for the {@link TraceEndpoint}.\n+ * {@link EnableAutoConfiguration Auto-configuration} for the {@link HttpTraceEndpoint}.\n  *\n  * @author Phillip Webb\n  * @since 2.0.0\n  */\n @Configuration\n+@AutoConfigureAfter(TraceAutoConfiguration.class)\n public class TraceEndpointAutoConfiguration {\n \n \t@Bean\n+\t@ConditionalOnBean(HttpTraceRepository.class)\n \t@ConditionalOnMissingBean\n \t@ConditionalOnEnabledEndpoint\n-\tpublic TraceEndpoint traceEndpoint(ObjectProvider<TraceRepository> traceRepository) {\n-\t\treturn new TraceEndpoint(\n-\t\t\t\ttraceRepository.getIfAvailable(() -> new InMemoryTraceRepository()));\n+\tpublic HttpTraceEndpoint traceEndpoint(HttpTraceRepository traceRepository) {\n+\t\treturn new HttpTraceEndpoint(traceRepository);\n \t}\n \n }\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.web.trace;\n\nimport org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\nimport org.springframework.boot.actuate.web.trace.HttpTraceEndpoint;\nimport org.springframework.boot.actuate.web.trace.HttpTraceRepository;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for the {@link HttpTraceEndpoint}.\n *\n * @author Phillip Webb\n * @since 2.0.0\n */\n@Configuration\n@AutoConfigureAfter(TraceAutoConfiguration.class)\npublic class TraceEndpointAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnBean(HttpTraceRepository.class)\n\t@ConditionalOnMissingBean\n\t@ConditionalOnEnabledEndpoint\n\tpublic HttpTraceEndpoint traceEndpoint(HttpTraceRepository traceRepository) {\n\t\treturn new HttpTraceEndpoint(traceRepository);\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.trace;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\nimport org.springframework.boot.actuate.trace.InMemoryTraceRepository;\nimport org.springframework.boot.actuate.trace.TraceEndpoint;\nimport org.springframework.boot.actuate.trace.TraceRepository;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for the {@link TraceEndpoint}.\n *\n * @author Phillip Webb\n * @since 2.0.0\n */\n@Configuration\npublic class TraceEndpointAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnEnabledEndpoint\n\tpublic TraceEndpoint traceEndpoint(ObjectProvider<TraceRepository> traceRepository) {\n\t\treturn new TraceEndpoint(\n\t\t\t\ttraceRepository.getIfAvailable(() -> new InMemoryTraceRepository()));\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
