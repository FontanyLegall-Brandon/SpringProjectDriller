{'_old_path': PosixPath('spring-bootstrap/src/test/java/org/springframework/bootstrap/context/annotation/OnApplicationContextConditionTest.java'), '_new_path': None, 'change_type': <ModificationType.DELETE: 4>, 'diff': '@@ -1,124 +0,0 @@\n-/*\n- * Copyright 2012-2013 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the "License");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an "AS IS" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.springframework.bootstrap.context.annotation;\n-\n-import java.util.HashSet;\n-import java.util.Set;\n-\n-import org.junit.Ignore;\n-import org.junit.Test;\n-import org.springframework.context.ApplicationContext;\n-import org.springframework.context.ApplicationListener;\n-import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.context.event.ContextRefreshedEvent;\n-import org.springframework.util.ObjectUtils;\n-\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.junit.Assert.assertThat;\n-\n-/**\n- * Tests for {@link OnApplicationContextCondition}.\n- * \n- * @author Phillip Webb\n- */\n-@SuppressWarnings("resource")\n-public class OnApplicationContextConditionTest {\n-\n-\t@Test\n-\tpublic void forContextById() throws Exception {\n-\t\tAnnotationConfigApplicationContext parent = new AnnotationConfigApplicationContext();\n-\t\tparent.setId("parent");\n-\t\tparent.register(ForContextByIdConf.class);\n-\n-\t\tAnnotationConfigApplicationContext child = new AnnotationConfigApplicationContext();\n-\t\tchild.setId("child");\n-\t\tchild.setParent(parent);\n-\t\tchild.register(ForContextByIdConf.class);\n-\n-\t\tparent.refresh();\n-\t\tchild.refresh();\n-\n-\t\tassertThat(parent.containsLocalBean("inParent"), equalTo(true));\n-\t\tassertThat(parent.containsLocalBean("inChild"), equalTo(false));\n-\n-\t\tassertThat(child.containsLocalBean("inParent"), equalTo(false));\n-\t\tassertThat(child.containsLocalBean("inChild"), equalTo(true));\n-\t}\n-\n-\t@Test\n-\t@Ignore\n-\tpublic void createContext() throws Exception {\n-\t\tAnnotationConfigApplicationContext parent = new AnnotationConfigApplicationContext();\n-\t\tApplicationContextCollector collector = new ApplicationContextCollector();\n-\t\tparent.addApplicationListener(collector);\n-\t\tparent.register(CreateContext.class);\n-\t\tparent.refresh();\n-\t\tassertThat(collector.get("child").containsLocalBean("inChild"), equalTo(true));\n-\t}\n-\n-\t// FIXME\n-\t// createContextOnBeanMethod\n-\t// createContextComponent\n-\n-\tprivate static class ApplicationContextCollector implements\n-\t\t\tApplicationListener<ContextRefreshedEvent> {\n-\n-\t\tprivate Set<ApplicationContext> contexts = new HashSet<ApplicationContext>();\n-\n-\t\t@Override\n-\t\tpublic void onApplicationEvent(ContextRefreshedEvent event) {\n-\t\t\tthis.contexts.add(event.getApplicationContext());\n-\t\t}\n-\n-\t\tpublic ApplicationContext get(String id) {\n-\t\t\tfor (ApplicationContext context : this.contexts) {\n-\t\t\t\tif (ObjectUtils.nullSafeEquals(context.getId(), id)) {\n-\t\t\t\t\treturn context;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tthrow new IllegalArgumentException("No such ID " + id);\n-\t\t}\n-\t}\n-\n-\t@Configuration\n-\tpublic static class ForContextByIdConf {\n-\n-\t\t@Bean\n-\t\t@ConditionalOnApplicationContext("parent")\n-\t\tpublic String inParent() {\n-\t\t\treturn "inParent";\n-\t\t}\n-\n-\t\t@Bean\n-\t\t@ConditionalOnApplicationContext("child")\n-\t\tpublic String inChild() {\n-\t\t\treturn "inChild";\n-\t\t}\n-\t}\n-\n-\t@Configuration\n-\t@ConditionalOnApplicationContext(value = "child", createIfMissing = true)\n-\tpublic static class CreateContext {\n-\n-\t\t@Bean\n-\t\tpublic String inChild() {\n-\t\t\treturn "inChild";\n-\t\t}\n-\t}\n-\n-}\n', 'source_code': None, 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.bootstrap.context.annotation;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport org.junit.Ignore;\nimport org.junit.Test;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationListener;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.event.ContextRefreshedEvent;\nimport org.springframework.util.ObjectUtils;\n\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.junit.Assert.assertThat;\n\n/**\n * Tests for {@link OnApplicationContextCondition}.\n * \n * @author Phillip Webb\n */\n@SuppressWarnings("resource")\npublic class OnApplicationContextConditionTest {\n\n\t@Test\n\tpublic void forContextById() throws Exception {\n\t\tAnnotationConfigApplicationContext parent = new AnnotationConfigApplicationContext();\n\t\tparent.setId("parent");\n\t\tparent.register(ForContextByIdConf.class);\n\n\t\tAnnotationConfigApplicationContext child = new AnnotationConfigApplicationContext();\n\t\tchild.setId("child");\n\t\tchild.setParent(parent);\n\t\tchild.register(ForContextByIdConf.class);\n\n\t\tparent.refresh();\n\t\tchild.refresh();\n\n\t\tassertThat(parent.containsLocalBean("inParent"), equalTo(true));\n\t\tassertThat(parent.containsLocalBean("inChild"), equalTo(false));\n\n\t\tassertThat(child.containsLocalBean("inParent"), equalTo(false));\n\t\tassertThat(child.containsLocalBean("inChild"), equalTo(true));\n\t}\n\n\t@Test\n\t@Ignore\n\tpublic void createContext() throws Exception {\n\t\tAnnotationConfigApplicationContext parent = new AnnotationConfigApplicationContext();\n\t\tApplicationContextCollector collector = new ApplicationContextCollector();\n\t\tparent.addApplicationListener(collector);\n\t\tparent.register(CreateContext.class);\n\t\tparent.refresh();\n\t\tassertThat(collector.get("child").containsLocalBean("inChild"), equalTo(true));\n\t}\n\n\t// FIXME\n\t// createContextOnBeanMethod\n\t// createContextComponent\n\n\tprivate static class ApplicationContextCollector implements\n\t\t\tApplicationListener<ContextRefreshedEvent> {\n\n\t\tprivate Set<ApplicationContext> contexts = new HashSet<ApplicationContext>();\n\n\t\t@Override\n\t\tpublic void onApplicationEvent(ContextRefreshedEvent event) {\n\t\t\tthis.contexts.add(event.getApplicationContext());\n\t\t}\n\n\t\tpublic ApplicationContext get(String id) {\n\t\t\tfor (ApplicationContext context : this.contexts) {\n\t\t\t\tif (ObjectUtils.nullSafeEquals(context.getId(), id)) {\n\t\t\t\t\treturn context;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow new IllegalArgumentException("No such ID " + id);\n\t\t}\n\t}\n\n\t@Configuration\n\tpublic static class ForContextByIdConf {\n\n\t\t@Bean\n\t\t@ConditionalOnApplicationContext("parent")\n\t\tpublic String inParent() {\n\t\t\treturn "inParent";\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnApplicationContext("child")\n\t\tpublic String inChild() {\n\t\t\treturn "inChild";\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnApplicationContext(value = "child", createIfMissing = true)\n\tpublic static class CreateContext {\n\n\t\t@Bean\n\t\tpublic String inChild() {\n\t\t\treturn "inChild";\n\t\t}\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
