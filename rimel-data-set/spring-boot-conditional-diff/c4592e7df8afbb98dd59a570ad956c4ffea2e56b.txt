@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2019 the original author or authors.
+ * Copyright 2012-2020 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the );
  * you may not use this file except in compliance with the License.
@@ -34,14 +34,7 @@ import com.fasterxml.jackson.databind.Module;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.PropertyNamingStrategy;
 import com.fasterxml.jackson.databind.SerializationFeature;
-import com.fasterxml.jackson.databind.module.SimpleModule;
-import com.fasterxml.jackson.datatype.joda.cfg.JacksonJodaDateFormat;
-import com.fasterxml.jackson.datatype.joda.ser.DateTimeSerializer;
 import com.fasterxml.jackson.module.paramnames.ParameterNamesModule;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-import org.joda.time.DateTime;
-import org.joda.time.format.DateTimeFormat;
 
 import org.springframework.beans.BeanUtils;
 import org.springframework.beans.factory.BeanFactoryUtils;
@@ -110,49 +103,6 @@ public class JacksonAutoConfiguration {
 
 	}
 
-	@Deprecated
-	@Configuration(proxyBeanMethods = false)
-	@ConditionalOnClass({ Jackson2ObjectMapperBuilder.class, DateTime.class, DateTimeSerializer.class,
-			JacksonJodaDateFormat.class })
-	static class JodaDateTimeJacksonConfiguration {
-
-		private static final Log logger = LogFactory.getLog(JodaDateTimeJacksonConfiguration.class);
-
-		@Bean
-		SimpleModule jodaDateTimeSerializationModule(JacksonProperties jacksonProperties) {
-			logger.warn(
-					+ );
-			SimpleModule module = new SimpleModule();
-			JacksonJodaDateFormat jacksonJodaFormat = getJacksonJodaDateFormat(jacksonProperties);
-			if (jacksonJodaFormat != null) {
-				module.addSerializer(DateTime.class, new DateTimeSerializer(jacksonJodaFormat, 0));
-			}
-			return module;
-		}
-
-		private JacksonJodaDateFormat getJacksonJodaDateFormat(JacksonProperties jacksonProperties) {
-			if (jacksonProperties.getJodaDateTimeFormat() != null) {
-				return new JacksonJodaDateFormat(
-						DateTimeFormat.forPattern(jacksonProperties.getJodaDateTimeFormat()).withZoneUTC());
-			}
-			if (jacksonProperties.getDateFormat() != null) {
-				try {
-					return new JacksonJodaDateFormat(
-							DateTimeFormat.forPattern(jacksonProperties.getDateFormat()).withZoneUTC());
-				}
-				catch (IllegalArgumentException ex) {
-					if (logger.isWarnEnabled()) {
-						logger.warn(
-								+ 
-								+ );
-					}
-				}
-			}
-			return null;
-		}
-
-	}
-
 	@Configuration(proxyBeanMethods = false)
 	@ConditionalOnClass(ParameterNamesModule.class)
 	static class ParameterNamesModuleConfiguration {

