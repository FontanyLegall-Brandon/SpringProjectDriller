{'_old_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerPropertiesAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerPropertiesAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -26,7 +26,6 @@ import org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfigurat\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for the\n@@ -48,7 +47,7 @@ public class ManagementServerPropertiesAutoConfiguration {\n \t// In case security auto configuration hasn\'t been included\n \t@Bean(name = "org.springframework.autoconfigure.security.SecurityProperties")\n \t@ConditionalOnMissingBean\n-\t@ConditionalOnClass(EnableWebSecurity.class)\n+\t@ConditionalOnClass(name = "org.springframework.security.config.annotation.web.configuration.EnableWebSecurity")\n \tpublic SecurityProperties securityProperties() {\n \t\treturn new SecurityProperties();\n \t}\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport org.springframework.boot.actuate.properties.ManagementServerProperties;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.security.SecurityProperties;\nimport org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for the\n * {@link ManagementServerProperties} bean.\n * \n * @author Dave Syer\n */\n@Configuration\n@AutoConfigureAfter(ServerPropertiesAutoConfiguration.class)\n@EnableConfigurationProperties\npublic class ManagementServerPropertiesAutoConfiguration {\n\n\t@Bean(name = "org.springframework.actuate.properties.ManagementServerProperties")\n\t@ConditionalOnMissingBean\n\tpublic ManagementServerProperties managementServerProperties() {\n\t\treturn new ManagementServerProperties();\n\t}\n\n\t// In case security auto configuration hasn\'t been included\n\t@Bean(name = "org.springframework.autoconfigure.security.SecurityProperties")\n\t@ConditionalOnMissingBean\n\t@ConditionalOnClass(name = "org.springframework.security.config.annotation.web.configuration.EnableWebSecurity")\n\tpublic SecurityProperties securityProperties() {\n\t\treturn new SecurityProperties();\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport org.springframework.boot.actuate.properties.ManagementServerProperties;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.security.SecurityProperties;\nimport org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for the\n * {@link ManagementServerProperties} bean.\n * \n * @author Dave Syer\n */\n@Configuration\n@AutoConfigureAfter(ServerPropertiesAutoConfiguration.class)\n@EnableConfigurationProperties\npublic class ManagementServerPropertiesAutoConfiguration {\n\n\t@Bean(name = "org.springframework.actuate.properties.ManagementServerProperties")\n\t@ConditionalOnMissingBean\n\tpublic ManagementServerProperties managementServerProperties() {\n\t\treturn new ManagementServerProperties();\n\t}\n\n\t// In case security auto configuration hasn\'t been included\n\t@Bean(name = "org.springframework.autoconfigure.security.SecurityProperties")\n\t@ConditionalOnMissingBean\n\t@ConditionalOnClass(EnableWebSecurity.class)\n\tpublic SecurityProperties securityProperties() {\n\t\treturn new SecurityProperties();\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
