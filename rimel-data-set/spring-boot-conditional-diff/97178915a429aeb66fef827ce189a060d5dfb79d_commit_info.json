{'_old_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -30,6 +30,8 @@ import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.actuate.health.ApplicationHealthIndicator;\n import org.springframework.boot.actuate.health.CompositeHealthIndicator;\n import org.springframework.boot.actuate.health.DataSourceHealthIndicator;\n+import org.springframework.boot.actuate.health.DiskSpaceHealthIndicator;\n+import org.springframework.boot.actuate.health.DiskSpaceHealthIndicatorProperties;\n import org.springframework.boot.actuate.health.HealthAggregator;\n import org.springframework.boot.actuate.health.HealthIndicator;\n import org.springframework.boot.actuate.health.MongoHealthIndicator;\n@@ -52,6 +54,7 @@ import org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration;\n import org.springframework.boot.autoconfigure.mongo.MongoDataAutoConfiguration;\n import org.springframework.boot.autoconfigure.redis.RedisAutoConfiguration;\n import org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.data.mongodb.core.MongoTemplate;\n@@ -256,4 +259,22 @@ public class HealthIndicatorAutoConfiguration {\n \t\t}\n \t}\n \n+\t@Configuration\n+\t@ConditionalOnExpression("${health.diskspace.enabled:true}")\n+\tpublic static class DiskSpaceHealthIndicatorConfiguration {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(name = "diskSpaceHealthIndicator")\n+\t\tpublic HealthIndicator diskSpaceHealthIndicator(\n+\t\t\t\tDiskSpaceHealthIndicatorProperties properties) {\n+\t\t\treturn new DiskSpaceHealthIndicator(properties);\n+\t\t}\n+\n+\t\t@Bean\n+\t\t@ConfigurationProperties("health.diskspace")\n+\t\tpublic DiskSpaceHealthIndicatorProperties diskSpaceHealthIndicatorProperties() {\n+\t\t\treturn new DiskSpaceHealthIndicatorProperties();\n+\t\t}\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.sql.DataSource;\n\nimport org.apache.solr.client.solrj.SolrServer;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.actuate.health.ApplicationHealthIndicator;\nimport org.springframework.boot.actuate.health.CompositeHealthIndicator;\nimport org.springframework.boot.actuate.health.DataSourceHealthIndicator;\nimport org.springframework.boot.actuate.health.DiskSpaceHealthIndicator;\nimport org.springframework.boot.actuate.health.DiskSpaceHealthIndicatorProperties;\nimport org.springframework.boot.actuate.health.HealthAggregator;\nimport org.springframework.boot.actuate.health.HealthIndicator;\nimport org.springframework.boot.actuate.health.MongoHealthIndicator;\nimport org.springframework.boot.actuate.health.OrderedHealthAggregator;\nimport org.springframework.boot.actuate.health.RabbitHealthIndicator;\nimport org.springframework.boot.actuate.health.RedisHealthIndicator;\nimport org.springframework.boot.actuate.health.SolrHealthIndicator;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadata;\nimport org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvider;\nimport org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProviders;\nimport org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration;\nimport org.springframework.boot.autoconfigure.mongo.MongoDataAutoConfiguration;\nimport org.springframework.boot.autoconfigure.redis.RedisAutoConfiguration;\nimport org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link HealthIndicator}s.\n *\n * @author Christian Dupuis\n * @author Andy Wilkinson\n * @author Stephane Nicoll\n * @since 1.1.0\n */\n@Configuration\n@AutoConfigureBefore({ EndpointAutoConfiguration.class })\n@AutoConfigureAfter({ DataSourceAutoConfiguration.class, MongoAutoConfiguration.class,\n\t\tMongoDataAutoConfiguration.class, RedisAutoConfiguration.class,\n\t\tRabbitAutoConfiguration.class, SolrAutoConfiguration.class })\npublic class HealthIndicatorAutoConfiguration {\n\n\t@Value("${health.status.order:}")\n\tprivate List<String> statusOrder = null;\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic HealthAggregator healthAggregator() {\n\t\tOrderedHealthAggregator healthAggregator = new OrderedHealthAggregator();\n\t\tif (this.statusOrder != null) {\n\t\t\thealthAggregator.setStatusOrder(this.statusOrder);\n\t\t}\n\t\treturn healthAggregator;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(HealthIndicator.class)\n\tpublic HealthIndicator applicationHealthIndicator() {\n\t\treturn new ApplicationHealthIndicator();\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(DataSource.class)\n\t@ConditionalOnExpression("${health.db.enabled:true}")\n\tpublic static class DataSourcesHealthIndicatorConfiguration {\n\n\t\t@Autowired\n\t\tprivate HealthAggregator healthAggregator;\n\n\t\t@Autowired(required = false)\n\t\tprivate Map<String, DataSource> dataSources;\n\n\t\t@Autowired(required = false)\n\t\tprivate Collection<DataSourcePoolMetadataProvider> metadataProviders = Collections\n\t\t\t\t.emptyList();\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "dbHealthIndicator")\n\t\tpublic HealthIndicator dbHealthIndicator() {\n\t\t\tDataSourcePoolMetadataProvider metadataProvider = new DataSourcePoolMetadataProviders(\n\t\t\t\t\tthis.metadataProviders);\n\t\t\tif (this.dataSources.size() == 1) {\n\t\t\t\tDataSource dataSource = this.dataSources.values().iterator().next();\n\t\t\t\treturn createDataSourceHealthIndicator(metadataProvider, dataSource);\n\t\t\t}\n\t\t\tCompositeHealthIndicator composite = new CompositeHealthIndicator(\n\t\t\t\t\tthis.healthAggregator);\n\t\t\tfor (Map.Entry<String, DataSource> entry : this.dataSources.entrySet()) {\n\t\t\t\tString name = entry.getKey();\n\t\t\t\tDataSource dataSource = entry.getValue();\n\t\t\t\tcomposite.addHealthIndicator(name,\n\t\t\t\t\t\tcreateDataSourceHealthIndicator(metadataProvider, dataSource));\n\t\t\t}\n\t\t\treturn composite;\n\t\t}\n\n\t\tprivate DataSourceHealthIndicator createDataSourceHealthIndicator(\n\t\t\t\tDataSourcePoolMetadataProvider provider, DataSource dataSource) {\n\t\t\tString validationQuery = null;\n\t\t\tDataSourcePoolMetadata poolMetadata = provider\n\t\t\t\t\t.getDataSourcePoolMetadata(dataSource);\n\t\t\tif (poolMetadata != null) {\n\t\t\t\tvalidationQuery = poolMetadata.getValidationQuery();\n\t\t\t}\n\t\t\treturn new DataSourceHealthIndicator(dataSource, validationQuery);\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(MongoTemplate.class)\n\t@ConditionalOnExpression("${health.mongo.enabled:true}")\n\tpublic static class MongoHealthIndicatorConfiguration {\n\n\t\t@Autowired\n\t\tprivate HealthAggregator healthAggregator;\n\n\t\t@Autowired\n\t\tprivate Map<String, MongoTemplate> mongoTemplates;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "mongoHealthIndicator")\n\t\tpublic HealthIndicator mongoHealthIndicator() {\n\t\t\tif (this.mongoTemplates.size() == 1) {\n\t\t\t\treturn new MongoHealthIndicator(this.mongoTemplates.values().iterator()\n\t\t\t\t\t\t.next());\n\t\t\t}\n\n\t\t\tCompositeHealthIndicator composite = new CompositeHealthIndicator(\n\t\t\t\t\tthis.healthAggregator);\n\t\t\tfor (Map.Entry<String, MongoTemplate> entry : this.mongoTemplates.entrySet()) {\n\t\t\t\tcomposite.addHealthIndicator(entry.getKey(), new MongoHealthIndicator(\n\t\t\t\t\t\tentry.getValue()));\n\t\t\t}\n\t\t\treturn composite;\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(RedisConnectionFactory.class)\n\t@ConditionalOnExpression("${health.redis.enabled:true}")\n\tpublic static class RedisHealthIndicatorConfiguration {\n\n\t\t@Autowired\n\t\tprivate HealthAggregator healthAggregator;\n\n\t\t@Autowired\n\t\tprivate Map<String, RedisConnectionFactory> redisConnectionFactories;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "redisHealthIndicator")\n\t\tpublic HealthIndicator redisHealthIndicator() {\n\t\t\tif (this.redisConnectionFactories.size() == 1) {\n\t\t\t\treturn new RedisHealthIndicator(this.redisConnectionFactories.values()\n\t\t\t\t\t\t.iterator().next());\n\t\t\t}\n\n\t\t\tCompositeHealthIndicator composite = new CompositeHealthIndicator(\n\t\t\t\t\tthis.healthAggregator);\n\t\t\tfor (Map.Entry<String, RedisConnectionFactory> entry : this.redisConnectionFactories\n\t\t\t\t\t.entrySet()) {\n\t\t\t\tcomposite.addHealthIndicator(entry.getKey(), new RedisHealthIndicator(\n\t\t\t\t\t\tentry.getValue()));\n\t\t\t}\n\t\t\treturn composite;\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(RabbitTemplate.class)\n\t@ConditionalOnExpression("${health.rabbit.enabled:true}")\n\tpublic static class RabbitHealthIndicatorConfiguration {\n\n\t\t@Autowired\n\t\tprivate HealthAggregator healthAggregator;\n\n\t\t@Autowired\n\t\tprivate Map<String, RabbitTemplate> rabbitTemplates;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "rabbitHealthIndicator")\n\t\tpublic HealthIndicator rabbitHealthIndicator() {\n\t\t\tif (this.rabbitTemplates.size() == 1) {\n\t\t\t\treturn new RabbitHealthIndicator(this.rabbitTemplates.values().iterator()\n\t\t\t\t\t\t.next());\n\t\t\t}\n\n\t\t\tCompositeHealthIndicator composite = new CompositeHealthIndicator(\n\t\t\t\t\tthis.healthAggregator);\n\t\t\tfor (Map.Entry<String, RabbitTemplate> entry : this.rabbitTemplates\n\t\t\t\t\t.entrySet()) {\n\t\t\t\tcomposite.addHealthIndicator(entry.getKey(), new RabbitHealthIndicator(\n\t\t\t\t\t\tentry.getValue()));\n\t\t\t}\n\t\t\treturn composite;\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(SolrServer.class)\n\t@ConditionalOnExpression("${health.solr.enabled:true}")\n\tpublic static class SolrHealthIndicatorConfiguration {\n\n\t\t@Autowired\n\t\tprivate HealthAggregator healthAggregator;\n\n\t\t@Autowired\n\t\tprivate Map<String, SolrServer> solrServers;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "solrHealthIndicator")\n\t\tpublic HealthIndicator rabbitHealthIndicator() {\n\t\t\tif (this.solrServers.size() == 1) {\n\t\t\t\treturn new SolrHealthIndicator(this.solrServers.entrySet().iterator()\n\t\t\t\t\t\t.next().getValue());\n\t\t\t}\n\n\t\t\tCompositeHealthIndicator composite = new CompositeHealthIndicator(\n\t\t\t\t\tthis.healthAggregator);\n\t\t\tfor (Map.Entry<String, SolrServer> entry : this.solrServers.entrySet()) {\n\t\t\t\tcomposite.addHealthIndicator(entry.getKey(), new SolrHealthIndicator(\n\t\t\t\t\t\tentry.getValue()));\n\t\t\t}\n\t\t\treturn composite;\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnExpression("${health.diskspace.enabled:true}")\n\tpublic static class DiskSpaceHealthIndicatorConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "diskSpaceHealthIndicator")\n\t\tpublic HealthIndicator diskSpaceHealthIndicator(\n\t\t\t\tDiskSpaceHealthIndicatorProperties properties) {\n\t\t\treturn new DiskSpaceHealthIndicator(properties);\n\t\t}\n\n\t\t@Bean\n\t\t@ConfigurationProperties("health.diskspace")\n\t\tpublic DiskSpaceHealthIndicatorProperties diskSpaceHealthIndicatorProperties() {\n\t\t\treturn new DiskSpaceHealthIndicatorProperties();\n\t\t}\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.sql.DataSource;\n\nimport org.apache.solr.client.solrj.SolrServer;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.actuate.health.ApplicationHealthIndicator;\nimport org.springframework.boot.actuate.health.CompositeHealthIndicator;\nimport org.springframework.boot.actuate.health.DataSourceHealthIndicator;\nimport org.springframework.boot.actuate.health.HealthAggregator;\nimport org.springframework.boot.actuate.health.HealthIndicator;\nimport org.springframework.boot.actuate.health.MongoHealthIndicator;\nimport org.springframework.boot.actuate.health.OrderedHealthAggregator;\nimport org.springframework.boot.actuate.health.RabbitHealthIndicator;\nimport org.springframework.boot.actuate.health.RedisHealthIndicator;\nimport org.springframework.boot.actuate.health.SolrHealthIndicator;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadata;\nimport org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvider;\nimport org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProviders;\nimport org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration;\nimport org.springframework.boot.autoconfigure.mongo.MongoDataAutoConfiguration;\nimport org.springframework.boot.autoconfigure.redis.RedisAutoConfiguration;\nimport org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link HealthIndicator}s.\n *\n * @author Christian Dupuis\n * @author Andy Wilkinson\n * @author Stephane Nicoll\n * @since 1.1.0\n */\n@Configuration\n@AutoConfigureBefore({ EndpointAutoConfiguration.class })\n@AutoConfigureAfter({ DataSourceAutoConfiguration.class, MongoAutoConfiguration.class,\n\t\tMongoDataAutoConfiguration.class, RedisAutoConfiguration.class,\n\t\tRabbitAutoConfiguration.class, SolrAutoConfiguration.class })\npublic class HealthIndicatorAutoConfiguration {\n\n\t@Value("${health.status.order:}")\n\tprivate List<String> statusOrder = null;\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic HealthAggregator healthAggregator() {\n\t\tOrderedHealthAggregator healthAggregator = new OrderedHealthAggregator();\n\t\tif (this.statusOrder != null) {\n\t\t\thealthAggregator.setStatusOrder(this.statusOrder);\n\t\t}\n\t\treturn healthAggregator;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(HealthIndicator.class)\n\tpublic HealthIndicator applicationHealthIndicator() {\n\t\treturn new ApplicationHealthIndicator();\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(DataSource.class)\n\t@ConditionalOnExpression("${health.db.enabled:true}")\n\tpublic static class DataSourcesHealthIndicatorConfiguration {\n\n\t\t@Autowired\n\t\tprivate HealthAggregator healthAggregator;\n\n\t\t@Autowired(required = false)\n\t\tprivate Map<String, DataSource> dataSources;\n\n\t\t@Autowired(required = false)\n\t\tprivate Collection<DataSourcePoolMetadataProvider> metadataProviders = Collections\n\t\t\t\t.emptyList();\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "dbHealthIndicator")\n\t\tpublic HealthIndicator dbHealthIndicator() {\n\t\t\tDataSourcePoolMetadataProvider metadataProvider = new DataSourcePoolMetadataProviders(\n\t\t\t\t\tthis.metadataProviders);\n\t\t\tif (this.dataSources.size() == 1) {\n\t\t\t\tDataSource dataSource = this.dataSources.values().iterator().next();\n\t\t\t\treturn createDataSourceHealthIndicator(metadataProvider, dataSource);\n\t\t\t}\n\t\t\tCompositeHealthIndicator composite = new CompositeHealthIndicator(\n\t\t\t\t\tthis.healthAggregator);\n\t\t\tfor (Map.Entry<String, DataSource> entry : this.dataSources.entrySet()) {\n\t\t\t\tString name = entry.getKey();\n\t\t\t\tDataSource dataSource = entry.getValue();\n\t\t\t\tcomposite.addHealthIndicator(name,\n\t\t\t\t\t\tcreateDataSourceHealthIndicator(metadataProvider, dataSource));\n\t\t\t}\n\t\t\treturn composite;\n\t\t}\n\n\t\tprivate DataSourceHealthIndicator createDataSourceHealthIndicator(\n\t\t\t\tDataSourcePoolMetadataProvider provider, DataSource dataSource) {\n\t\t\tString validationQuery = null;\n\t\t\tDataSourcePoolMetadata poolMetadata = provider\n\t\t\t\t\t.getDataSourcePoolMetadata(dataSource);\n\t\t\tif (poolMetadata != null) {\n\t\t\t\tvalidationQuery = poolMetadata.getValidationQuery();\n\t\t\t}\n\t\t\treturn new DataSourceHealthIndicator(dataSource, validationQuery);\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(MongoTemplate.class)\n\t@ConditionalOnExpression("${health.mongo.enabled:true}")\n\tpublic static class MongoHealthIndicatorConfiguration {\n\n\t\t@Autowired\n\t\tprivate HealthAggregator healthAggregator;\n\n\t\t@Autowired\n\t\tprivate Map<String, MongoTemplate> mongoTemplates;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "mongoHealthIndicator")\n\t\tpublic HealthIndicator mongoHealthIndicator() {\n\t\t\tif (this.mongoTemplates.size() == 1) {\n\t\t\t\treturn new MongoHealthIndicator(this.mongoTemplates.values().iterator()\n\t\t\t\t\t\t.next());\n\t\t\t}\n\n\t\t\tCompositeHealthIndicator composite = new CompositeHealthIndicator(\n\t\t\t\t\tthis.healthAggregator);\n\t\t\tfor (Map.Entry<String, MongoTemplate> entry : this.mongoTemplates.entrySet()) {\n\t\t\t\tcomposite.addHealthIndicator(entry.getKey(), new MongoHealthIndicator(\n\t\t\t\t\t\tentry.getValue()));\n\t\t\t}\n\t\t\treturn composite;\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(RedisConnectionFactory.class)\n\t@ConditionalOnExpression("${health.redis.enabled:true}")\n\tpublic static class RedisHealthIndicatorConfiguration {\n\n\t\t@Autowired\n\t\tprivate HealthAggregator healthAggregator;\n\n\t\t@Autowired\n\t\tprivate Map<String, RedisConnectionFactory> redisConnectionFactories;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "redisHealthIndicator")\n\t\tpublic HealthIndicator redisHealthIndicator() {\n\t\t\tif (this.redisConnectionFactories.size() == 1) {\n\t\t\t\treturn new RedisHealthIndicator(this.redisConnectionFactories.values()\n\t\t\t\t\t\t.iterator().next());\n\t\t\t}\n\n\t\t\tCompositeHealthIndicator composite = new CompositeHealthIndicator(\n\t\t\t\t\tthis.healthAggregator);\n\t\t\tfor (Map.Entry<String, RedisConnectionFactory> entry : this.redisConnectionFactories\n\t\t\t\t\t.entrySet()) {\n\t\t\t\tcomposite.addHealthIndicator(entry.getKey(), new RedisHealthIndicator(\n\t\t\t\t\t\tentry.getValue()));\n\t\t\t}\n\t\t\treturn composite;\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(RabbitTemplate.class)\n\t@ConditionalOnExpression("${health.rabbit.enabled:true}")\n\tpublic static class RabbitHealthIndicatorConfiguration {\n\n\t\t@Autowired\n\t\tprivate HealthAggregator healthAggregator;\n\n\t\t@Autowired\n\t\tprivate Map<String, RabbitTemplate> rabbitTemplates;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "rabbitHealthIndicator")\n\t\tpublic HealthIndicator rabbitHealthIndicator() {\n\t\t\tif (this.rabbitTemplates.size() == 1) {\n\t\t\t\treturn new RabbitHealthIndicator(this.rabbitTemplates.values().iterator()\n\t\t\t\t\t\t.next());\n\t\t\t}\n\n\t\t\tCompositeHealthIndicator composite = new CompositeHealthIndicator(\n\t\t\t\t\tthis.healthAggregator);\n\t\t\tfor (Map.Entry<String, RabbitTemplate> entry : this.rabbitTemplates\n\t\t\t\t\t.entrySet()) {\n\t\t\t\tcomposite.addHealthIndicator(entry.getKey(), new RabbitHealthIndicator(\n\t\t\t\t\t\tentry.getValue()));\n\t\t\t}\n\t\t\treturn composite;\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(SolrServer.class)\n\t@ConditionalOnExpression("${health.solr.enabled:true}")\n\tpublic static class SolrHealthIndicatorConfiguration {\n\n\t\t@Autowired\n\t\tprivate HealthAggregator healthAggregator;\n\n\t\t@Autowired\n\t\tprivate Map<String, SolrServer> solrServers;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "solrHealthIndicator")\n\t\tpublic HealthIndicator rabbitHealthIndicator() {\n\t\t\tif (this.solrServers.size() == 1) {\n\t\t\t\treturn new SolrHealthIndicator(this.solrServers.entrySet().iterator()\n\t\t\t\t\t\t.next().getValue());\n\t\t\t}\n\n\t\t\tCompositeHealthIndicator composite = new CompositeHealthIndicator(\n\t\t\t\t\tthis.healthAggregator);\n\t\t\tfor (Map.Entry<String, SolrServer> entry : this.solrServers.entrySet()) {\n\t\t\t\tcomposite.addHealthIndicator(entry.getKey(), new SolrHealthIndicator(\n\t\t\t\t\t\tentry.getValue()));\n\t\t\t}\n\t\t\treturn composite;\n\t\t}\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
