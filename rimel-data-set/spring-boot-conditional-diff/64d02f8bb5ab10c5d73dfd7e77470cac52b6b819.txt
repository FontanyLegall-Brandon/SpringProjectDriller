@@ -1,96 +0,0 @@
-
-
-package org.springframework.boot.autoconfigure.social;
-
-import org.springframework.boot.autoconfigure.AutoConfigureAfter;
-import org.springframework.boot.autoconfigure.AutoConfigureBefore;
-import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;
-import org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration;
-import org.springframework.boot.context.properties.EnableConfigurationProperties;
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
-import org.springframework.context.annotation.Scope;
-import org.springframework.context.annotation.ScopedProxyMode;
-import org.springframework.social.config.annotation.EnableSocial;
-import org.springframework.social.config.annotation.SocialConfigurerAdapter;
-import org.springframework.social.connect.Connection;
-import org.springframework.social.connect.ConnectionFactory;
-import org.springframework.social.connect.ConnectionRepository;
-import org.springframework.social.connect.web.GenericConnectionStatusView;
-import org.springframework.social.twitter.api.Twitter;
-import org.springframework.social.twitter.api.impl.TwitterTemplate;
-import org.springframework.social.twitter.connect.TwitterConnectionFactory;
-
-
-@Configuration
-@ConditionalOnClass({ SocialConfigurerAdapter.class, TwitterConnectionFactory.class })
-@ConditionalOnProperty(prefix = , name = )
-@AutoConfigureBefore(SocialWebAutoConfiguration.class)
-@AutoConfigureAfter(WebMvcAutoConfiguration.class)
-public class TwitterAutoConfiguration {
-
-	@Configuration
-	@EnableSocial
-	@EnableConfigurationProperties(TwitterProperties.class)
-	@ConditionalOnWebApplication(type = Type.SERVLET)
-	protected static class TwitterConfigurerAdapter extends SocialAutoConfigurerAdapter {
-
-		private final TwitterProperties properties;
-
-		protected TwitterConfigurerAdapter(TwitterProperties properties) {
-			this.properties = properties;
-		}
-
-		@Bean
-		@ConditionalOnMissingBean
-		@Scope(value = , proxyMode = ScopedProxyMode.INTERFACES)
-		public Twitter twitter(ConnectionRepository repository) {
-			Connection<Twitter> connection = repository
-					.findPrimaryConnection(Twitter.class);
-			if (connection != null) {
-				return connection.getApi();
-			}
-			return new TwitterTemplate(this.properties.getAppId(),
-					this.properties.getAppSecret());
-		}
-
-		@Bean(name = { ,  })
-		@ConditionalOnProperty(prefix = , name = )
-		public GenericConnectionStatusView twitterConnectView() {
-			return new GenericConnectionStatusView(, );
-		}
-
-		@Override
-		protected ConnectionFactory<?> createConnectionFactory() {
-			return new TwitterConnectionFactory(this.properties.getAppId(),
-					this.properties.getAppSecret());
-		}
-
-	}
-
-}

