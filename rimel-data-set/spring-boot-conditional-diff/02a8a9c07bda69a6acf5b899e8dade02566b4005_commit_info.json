{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -20,6 +20,7 @@ import org.springframework.amqp.core.AmqpAdmin;\n import org.springframework.amqp.rabbit.connection.CachingConnectionFactory;\n import org.springframework.amqp.rabbit.connection.ConnectionFactory;\n import org.springframework.amqp.rabbit.core.RabbitAdmin;\n+import org.springframework.amqp.rabbit.core.RabbitMessagingTemplate;\n import org.springframework.amqp.rabbit.core.RabbitTemplate;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n@@ -29,6 +30,7 @@ import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n \n import com.rabbitmq.client.Channel;\n \n@@ -74,6 +76,7 @@ import com.rabbitmq.client.Channel;\n @Configuration\n @ConditionalOnClass({ RabbitTemplate.class, Channel.class })\n @EnableConfigurationProperties(RabbitProperties.class)\n+@Import(RabbitAnnotationDrivenConfiguration.class)\n public class RabbitAutoConfiguration {\n \n \t@Bean\n@@ -119,4 +122,15 @@ public class RabbitAutoConfiguration {\n \n \t}\n \n+\t@ConditionalOnClass(RabbitMessagingTemplate.class)\n+\t@ConditionalOnMissingBean(RabbitMessagingTemplate.class)\n+\tprotected static class MessagingTemplateConfiguration {\n+\n+\t\t@Bean\n+\t\tpublic RabbitMessagingTemplate jmsMessagingTemplate(RabbitTemplate rabbitTemplate) {\n+\t\t\treturn new RabbitMessagingTemplate(rabbitTemplate);\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.amqp;\n\nimport org.springframework.amqp.core.AmqpAdmin;\nimport org.springframework.amqp.rabbit.connection.CachingConnectionFactory;\nimport org.springframework.amqp.rabbit.connection.ConnectionFactory;\nimport org.springframework.amqp.rabbit.core.RabbitAdmin;\nimport org.springframework.amqp.rabbit.core.RabbitMessagingTemplate;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\n\nimport com.rabbitmq.client.Channel;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link RabbitTemplate}.\n * <p>\n * This configuration class is active only when the RabbitMQ and Spring AMQP client\n * libraries are on the classpath.\n * <P>\n * Registers the following beans:\n * <ul>\n * <li>\n * {@link org.springframework.amqp.rabbit.core.RabbitTemplate RabbitTemplate} if there is\n * no other bean of the same type in the context.</li>\n * <li>\n * {@link org.springframework.amqp.rabbit.connection.CachingConnectionFactory\n * CachingConnectionFactory} instance if there is no other bean of the same type in the\n * context.</li>\n * <li>\n * {@link org.springframework.amqp.core.AmqpAdmin } instance as long as\n * {@literal spring.rabbitmq.dynamic=true}.</li>\n * </ul>\n * <p>\n * The {@link org.springframework.amqp.rabbit.connection.CachingConnectionFactory} honors\n * the following properties:\n * <ul>\n * <li>\n * {@literal spring.rabbitmq.port} is used to specify the port to which the client should\n * connect, and defaults to 5672.</li>\n * <li>\n * {@literal spring.rabbitmq.username} is used to specify the (optional) username.</li>\n * <li>\n * {@literal spring.rabbitmq.password} is used to specify the (optional) password.</li>\n * <li>\n * {@literal spring.rabbitmq.host} is used to specify the host, and defaults to\n * {@literal localhost}.</li>\n * <li>{@literal spring.rabbitmq.virtualHost} is used to specify the (optional) virtual\n * host to which the client should connect.</li>\n * </ul>\n * @author Greg Turnquist\n * @author Josh Long\n */\n@Configuration\n@ConditionalOnClass({ RabbitTemplate.class, Channel.class })\n@EnableConfigurationProperties(RabbitProperties.class)\n@Import(RabbitAnnotationDrivenConfiguration.class)\npublic class RabbitAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnExpression("${spring.rabbitmq.dynamic:true}")\n\t@ConditionalOnMissingBean(AmqpAdmin.class)\n\tpublic AmqpAdmin amqpAdmin(CachingConnectionFactory connectionFactory) {\n\t\treturn new RabbitAdmin(connectionFactory);\n\t}\n\n\t@Autowired\n\tprivate ConnectionFactory connectionFactory;\n\n\t@Bean\n\t@ConditionalOnMissingBean(RabbitTemplate.class)\n\tpublic RabbitTemplate rabbitTemplate() {\n\t\treturn new RabbitTemplate(this.connectionFactory);\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(ConnectionFactory.class)\n\tprotected static class RabbitConnectionFactoryCreator {\n\n\t\t@Bean\n\t\tpublic ConnectionFactory rabbitConnectionFactory(RabbitProperties config) {\n\t\t\tCachingConnectionFactory factory = new CachingConnectionFactory();\n\t\t\tString addresses = config.getAddresses();\n\t\t\tfactory.setAddresses(addresses);\n\t\t\tif (config.getHost() != null) {\n\t\t\t\tfactory.setHost(config.getHost());\n\t\t\t\tfactory.setPort(config.getPort());\n\t\t\t}\n\t\t\tif (config.getUsername() != null) {\n\t\t\t\tfactory.setUsername(config.getUsername());\n\t\t\t}\n\t\t\tif (config.getPassword() != null) {\n\t\t\t\tfactory.setPassword(config.getPassword());\n\t\t\t}\n\t\t\tif (config.getVirtualHost() != null) {\n\t\t\t\tfactory.setVirtualHost(config.getVirtualHost());\n\t\t\t}\n\t\t\treturn factory;\n\t\t}\n\n\t}\n\n\t@ConditionalOnClass(RabbitMessagingTemplate.class)\n\t@ConditionalOnMissingBean(RabbitMessagingTemplate.class)\n\tprotected static class MessagingTemplateConfiguration {\n\n\t\t@Bean\n\t\tpublic RabbitMessagingTemplate jmsMessagingTemplate(RabbitTemplate rabbitTemplate) {\n\t\t\treturn new RabbitMessagingTemplate(rabbitTemplate);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.amqp;\n\nimport org.springframework.amqp.core.AmqpAdmin;\nimport org.springframework.amqp.rabbit.connection.CachingConnectionFactory;\nimport org.springframework.amqp.rabbit.connection.ConnectionFactory;\nimport org.springframework.amqp.rabbit.core.RabbitAdmin;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport com.rabbitmq.client.Channel;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link RabbitTemplate}.\n * <p>\n * This configuration class is active only when the RabbitMQ and Spring AMQP client\n * libraries are on the classpath.\n * <P>\n * Registers the following beans:\n * <ul>\n * <li>\n * {@link org.springframework.amqp.rabbit.core.RabbitTemplate RabbitTemplate} if there is\n * no other bean of the same type in the context.</li>\n * <li>\n * {@link org.springframework.amqp.rabbit.connection.CachingConnectionFactory\n * CachingConnectionFactory} instance if there is no other bean of the same type in the\n * context.</li>\n * <li>\n * {@link org.springframework.amqp.core.AmqpAdmin } instance as long as\n * {@literal spring.rabbitmq.dynamic=true}.</li>\n * </ul>\n * <p>\n * The {@link org.springframework.amqp.rabbit.connection.CachingConnectionFactory} honors\n * the following properties:\n * <ul>\n * <li>\n * {@literal spring.rabbitmq.port} is used to specify the port to which the client should\n * connect, and defaults to 5672.</li>\n * <li>\n * {@literal spring.rabbitmq.username} is used to specify the (optional) username.</li>\n * <li>\n * {@literal spring.rabbitmq.password} is used to specify the (optional) password.</li>\n * <li>\n * {@literal spring.rabbitmq.host} is used to specify the host, and defaults to\n * {@literal localhost}.</li>\n * <li>{@literal spring.rabbitmq.virtualHost} is used to specify the (optional) virtual\n * host to which the client should connect.</li>\n * </ul>\n * @author Greg Turnquist\n * @author Josh Long\n */\n@Configuration\n@ConditionalOnClass({ RabbitTemplate.class, Channel.class })\n@EnableConfigurationProperties(RabbitProperties.class)\npublic class RabbitAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnExpression("${spring.rabbitmq.dynamic:true}")\n\t@ConditionalOnMissingBean(AmqpAdmin.class)\n\tpublic AmqpAdmin amqpAdmin(CachingConnectionFactory connectionFactory) {\n\t\treturn new RabbitAdmin(connectionFactory);\n\t}\n\n\t@Autowired\n\tprivate ConnectionFactory connectionFactory;\n\n\t@Bean\n\t@ConditionalOnMissingBean(RabbitTemplate.class)\n\tpublic RabbitTemplate rabbitTemplate() {\n\t\treturn new RabbitTemplate(this.connectionFactory);\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(ConnectionFactory.class)\n\tprotected static class RabbitConnectionFactoryCreator {\n\n\t\t@Bean\n\t\tpublic ConnectionFactory rabbitConnectionFactory(RabbitProperties config) {\n\t\t\tCachingConnectionFactory factory = new CachingConnectionFactory();\n\t\t\tString addresses = config.getAddresses();\n\t\t\tfactory.setAddresses(addresses);\n\t\t\tif (config.getHost() != null) {\n\t\t\t\tfactory.setHost(config.getHost());\n\t\t\t\tfactory.setPort(config.getPort());\n\t\t\t}\n\t\t\tif (config.getUsername() != null) {\n\t\t\t\tfactory.setUsername(config.getUsername());\n\t\t\t}\n\t\t\tif (config.getPassword() != null) {\n\t\t\t\tfactory.setPassword(config.getPassword());\n\t\t\t}\n\t\t\tif (config.getVirtualHost() != null) {\n\t\t\t\tfactory.setVirtualHost(config.getVirtualHost());\n\t\t\t}\n\t\t\treturn factory;\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
