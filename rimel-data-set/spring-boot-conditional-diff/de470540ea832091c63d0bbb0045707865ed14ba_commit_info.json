{'_old_path': None, '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskSchedulingAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2012-2018 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.task;\n+\n+import java.util.stream.Collectors;\n+\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.task.TaskSchedulerBuilder;\n+import org.springframework.boot.task.TaskSchedulerCustomizer;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.scheduling.TaskScheduler;\n+import org.springframework.scheduling.annotation.SchedulingConfigurer;\n+import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;\n+import org.springframework.scheduling.config.TaskManagementConfigUtils;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for {@link TaskScheduler}.\n+ *\n+ * @author Stephane Nicoll\n+ * @since 2.1.0\n+ */\n+@ConditionalOnClass(ThreadPoolTaskScheduler.class)\n+@Configuration\n+@EnableConfigurationProperties(TaskSchedulingProperties.class)\n+public class TaskSchedulingAutoConfiguration {\n+\n+\t@Bean\n+\t@ConditionalOnBean(name = TaskManagementConfigUtils.SCHEDULED_ANNOTATION_PROCESSOR_BEAN_NAME)\n+\t@ConditionalOnMissingBean({ SchedulingConfigurer.class, TaskScheduler.class })\n+\tpublic ThreadPoolTaskScheduler taskScheduler(TaskSchedulerBuilder builder) {\n+\t\treturn builder.build();\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic TaskSchedulerBuilder taskSchedulerBuilder(TaskSchedulingProperties properties,\n+\t\t\tObjectProvider<TaskSchedulerCustomizer> taskSchedulerCustomizers) {\n+\t\treturn new TaskSchedulerBuilder().poolSize(properties.getPool().getSize())\n+\t\t\t\t.threadNamePrefix(properties.getThreadNamePrefix()).customizers(\n+\t\t\t\t\t\ttaskSchedulerCustomizers.stream().collect(Collectors.toList()));\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.task;\n\nimport java.util.stream.Collectors;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.task.TaskSchedulerBuilder;\nimport org.springframework.boot.task.TaskSchedulerCustomizer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.scheduling.TaskScheduler;\nimport org.springframework.scheduling.annotation.SchedulingConfigurer;\nimport org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;\nimport org.springframework.scheduling.config.TaskManagementConfigUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link TaskScheduler}.\n *\n * @author Stephane Nicoll\n * @since 2.1.0\n */\n@ConditionalOnClass(ThreadPoolTaskScheduler.class)\n@Configuration\n@EnableConfigurationProperties(TaskSchedulingProperties.class)\npublic class TaskSchedulingAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnBean(name = TaskManagementConfigUtils.SCHEDULED_ANNOTATION_PROCESSOR_BEAN_NAME)\n\t@ConditionalOnMissingBean({ SchedulingConfigurer.class, TaskScheduler.class })\n\tpublic ThreadPoolTaskScheduler taskScheduler(TaskSchedulerBuilder builder) {\n\t\treturn builder.build();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic TaskSchedulerBuilder taskSchedulerBuilder(TaskSchedulingProperties properties,\n\t\t\tObjectProvider<TaskSchedulerCustomizer> taskSchedulerCustomizers) {\n\t\treturn new TaskSchedulerBuilder().poolSize(properties.getPool().getSize())\n\t\t\t\t.threadNamePrefix(properties.getThreadNamePrefix()).customizers(\n\t\t\t\t\t\ttaskSchedulerCustomizers.stream().collect(Collectors.toList()));\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
