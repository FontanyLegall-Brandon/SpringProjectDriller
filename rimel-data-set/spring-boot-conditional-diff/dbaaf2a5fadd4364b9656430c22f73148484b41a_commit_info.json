{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2016 the original author or authors.\n+ * Copyright 2012-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -129,7 +129,7 @@ public class FreeMarkerAutoConfiguration {\n \t}\n \n \t@Configuration\n-\t@ConditionalOnClass(Servlet.class)\n+\t@ConditionalOnClass({ Servlet.class, FreeMarkerConfigurer.class })\n \t@ConditionalOnWebApplication\n \tpublic static class FreeMarkerWebConfiguration extends FreeMarkerConfiguration {\n \n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.freemarker;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Properties;\n\nimport javax.annotation.PostConstruct;\nimport javax.servlet.Servlet;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnNotWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.template.TemplateLocation;\nimport org.springframework.boot.autoconfigure.web.ConditionalOnEnabledResourceChain;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.ui.freemarker.FreeMarkerConfigurationFactory;\nimport org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean;\nimport org.springframework.web.servlet.resource.ResourceUrlEncodingFilter;\nimport org.springframework.web.servlet.view.freemarker.FreeMarkerConfig;\nimport org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer;\nimport org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for FreeMarker.\n *\n * @author Andy Wilkinson\n * @author Dave Syer\n * @author Kazuki Shimizu\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass({ freemarker.template.Configuration.class,\n\t\tFreeMarkerConfigurationFactory.class })\n@AutoConfigureAfter(WebMvcAutoConfiguration.class)\n@EnableConfigurationProperties(FreeMarkerProperties.class)\npublic class FreeMarkerAutoConfiguration {\n\n\tprivate static final Log logger = LogFactory\n\t\t\t.getLog(FreeMarkerAutoConfiguration.class);\n\n\tprivate final ApplicationContext applicationContext;\n\n\tprivate final FreeMarkerProperties properties;\n\n\tpublic FreeMarkerAutoConfiguration(ApplicationContext applicationContext,\n\t\t\tFreeMarkerProperties properties) {\n\t\tthis.applicationContext = applicationContext;\n\t\tthis.properties = properties;\n\t}\n\n\t@PostConstruct\n\tpublic void checkTemplateLocationExists() {\n\t\tif (this.properties.isCheckTemplateLocation()) {\n\t\t\tTemplateLocation templatePathLocation = null;\n\t\t\tList<TemplateLocation> locations = new ArrayList<TemplateLocation>();\n\t\t\tfor (String templateLoaderPath : this.properties.getTemplateLoaderPath()) {\n\t\t\t\tTemplateLocation location = new TemplateLocation(templateLoaderPath);\n\t\t\t\tlocations.add(location);\n\t\t\t\tif (location.exists(this.applicationContext)) {\n\t\t\t\t\ttemplatePathLocation = location;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (templatePathLocation == null) {\n\t\t\t\tlogger.warn("Cannot find template location(s): " + locations\n\t\t\t\t\t\t+ " (please add some templates, "\n\t\t\t\t\t\t+ "check your FreeMarker configuration, or set "\n\t\t\t\t\t\t+ "spring.freemarker.checkTemplateLocation=false)");\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected static class FreeMarkerConfiguration {\n\n\t\t@Autowired\n\t\tprotected FreeMarkerProperties properties;\n\n\t\tprotected void applyProperties(FreeMarkerConfigurationFactory factory) {\n\t\t\tfactory.setTemplateLoaderPaths(this.properties.getTemplateLoaderPath());\n\t\t\tfactory.setPreferFileSystemAccess(this.properties.isPreferFileSystemAccess());\n\t\t\tfactory.setDefaultEncoding(this.properties.getCharsetName());\n\t\t\tProperties settings = new Properties();\n\t\t\tsettings.putAll(this.properties.getSettings());\n\t\t\tfactory.setFreemarkerSettings(settings);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnNotWebApplication\n\tpublic static class FreeMarkerNonWebConfiguration extends FreeMarkerConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic FreeMarkerConfigurationFactoryBean freeMarkerConfiguration() {\n\t\t\tFreeMarkerConfigurationFactoryBean freeMarkerFactoryBean = new FreeMarkerConfigurationFactoryBean();\n\t\t\tapplyProperties(freeMarkerFactoryBean);\n\t\t\treturn freeMarkerFactoryBean;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ Servlet.class, FreeMarkerConfigurer.class })\n\t@ConditionalOnWebApplication\n\tpublic static class FreeMarkerWebConfiguration extends FreeMarkerConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(FreeMarkerConfig.class)\n\t\tpublic FreeMarkerConfigurer freeMarkerConfigurer() {\n\t\t\tFreeMarkerConfigurer configurer = new FreeMarkerConfigurer();\n\t\t\tapplyProperties(configurer);\n\t\t\treturn configurer;\n\t\t}\n\n\t\t@Bean\n\t\tpublic freemarker.template.Configuration freeMarkerConfiguration(\n\t\t\t\tFreeMarkerConfig configurer) {\n\t\t\treturn configurer.getConfiguration();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "freeMarkerViewResolver")\n\t\t@ConditionalOnProperty(name = "spring.freemarker.enabled", matchIfMissing = true)\n\t\tpublic FreeMarkerViewResolver freeMarkerViewResolver() {\n\t\t\tFreeMarkerViewResolver resolver = new FreeMarkerViewResolver();\n\t\t\tthis.properties.applyToViewResolver(resolver);\n\t\t\treturn resolver;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnEnabledResourceChain\n\t\tpublic ResourceUrlEncodingFilter resourceUrlEncodingFilter() {\n\t\t\treturn new ResourceUrlEncodingFilter();\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.freemarker;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Properties;\n\nimport javax.annotation.PostConstruct;\nimport javax.servlet.Servlet;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnNotWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.template.TemplateLocation;\nimport org.springframework.boot.autoconfigure.web.ConditionalOnEnabledResourceChain;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.ui.freemarker.FreeMarkerConfigurationFactory;\nimport org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean;\nimport org.springframework.web.servlet.resource.ResourceUrlEncodingFilter;\nimport org.springframework.web.servlet.view.freemarker.FreeMarkerConfig;\nimport org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer;\nimport org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for FreeMarker.\n *\n * @author Andy Wilkinson\n * @author Dave Syer\n * @author Kazuki Shimizu\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass({ freemarker.template.Configuration.class,\n\t\tFreeMarkerConfigurationFactory.class })\n@AutoConfigureAfter(WebMvcAutoConfiguration.class)\n@EnableConfigurationProperties(FreeMarkerProperties.class)\npublic class FreeMarkerAutoConfiguration {\n\n\tprivate static final Log logger = LogFactory\n\t\t\t.getLog(FreeMarkerAutoConfiguration.class);\n\n\tprivate final ApplicationContext applicationContext;\n\n\tprivate final FreeMarkerProperties properties;\n\n\tpublic FreeMarkerAutoConfiguration(ApplicationContext applicationContext,\n\t\t\tFreeMarkerProperties properties) {\n\t\tthis.applicationContext = applicationContext;\n\t\tthis.properties = properties;\n\t}\n\n\t@PostConstruct\n\tpublic void checkTemplateLocationExists() {\n\t\tif (this.properties.isCheckTemplateLocation()) {\n\t\t\tTemplateLocation templatePathLocation = null;\n\t\t\tList<TemplateLocation> locations = new ArrayList<TemplateLocation>();\n\t\t\tfor (String templateLoaderPath : this.properties.getTemplateLoaderPath()) {\n\t\t\t\tTemplateLocation location = new TemplateLocation(templateLoaderPath);\n\t\t\t\tlocations.add(location);\n\t\t\t\tif (location.exists(this.applicationContext)) {\n\t\t\t\t\ttemplatePathLocation = location;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (templatePathLocation == null) {\n\t\t\t\tlogger.warn("Cannot find template location(s): " + locations\n\t\t\t\t\t\t+ " (please add some templates, "\n\t\t\t\t\t\t+ "check your FreeMarker configuration, or set "\n\t\t\t\t\t\t+ "spring.freemarker.checkTemplateLocation=false)");\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected static class FreeMarkerConfiguration {\n\n\t\t@Autowired\n\t\tprotected FreeMarkerProperties properties;\n\n\t\tprotected void applyProperties(FreeMarkerConfigurationFactory factory) {\n\t\t\tfactory.setTemplateLoaderPaths(this.properties.getTemplateLoaderPath());\n\t\t\tfactory.setPreferFileSystemAccess(this.properties.isPreferFileSystemAccess());\n\t\t\tfactory.setDefaultEncoding(this.properties.getCharsetName());\n\t\t\tProperties settings = new Properties();\n\t\t\tsettings.putAll(this.properties.getSettings());\n\t\t\tfactory.setFreemarkerSettings(settings);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnNotWebApplication\n\tpublic static class FreeMarkerNonWebConfiguration extends FreeMarkerConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic FreeMarkerConfigurationFactoryBean freeMarkerConfiguration() {\n\t\t\tFreeMarkerConfigurationFactoryBean freeMarkerFactoryBean = new FreeMarkerConfigurationFactoryBean();\n\t\t\tapplyProperties(freeMarkerFactoryBean);\n\t\t\treturn freeMarkerFactoryBean;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(Servlet.class)\n\t@ConditionalOnWebApplication\n\tpublic static class FreeMarkerWebConfiguration extends FreeMarkerConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(FreeMarkerConfig.class)\n\t\tpublic FreeMarkerConfigurer freeMarkerConfigurer() {\n\t\t\tFreeMarkerConfigurer configurer = new FreeMarkerConfigurer();\n\t\t\tapplyProperties(configurer);\n\t\t\treturn configurer;\n\t\t}\n\n\t\t@Bean\n\t\tpublic freemarker.template.Configuration freeMarkerConfiguration(\n\t\t\t\tFreeMarkerConfig configurer) {\n\t\t\treturn configurer.getConfiguration();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "freeMarkerViewResolver")\n\t\t@ConditionalOnProperty(name = "spring.freemarker.enabled", matchIfMissing = true)\n\t\tpublic FreeMarkerViewResolver freeMarkerViewResolver() {\n\t\t\tFreeMarkerViewResolver resolver = new FreeMarkerViewResolver();\n\t\t\tthis.properties.applyToViewResolver(resolver);\n\t\t\treturn resolver;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnEnabledResourceChain\n\t\tpublic ResourceUrlEncodingFilter resourceUrlEncodingFilter() {\n\t\t\treturn new ResourceUrlEncodingFilter();\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
