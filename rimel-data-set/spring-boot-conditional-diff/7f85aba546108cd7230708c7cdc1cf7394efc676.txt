@@ -0,0 +1,135 @@
+
+
+package org.springframework.boot.autoconfigure.data.mongo;
+
+import com.mongodb.ClientSessionOptions;
+import com.mongodb.DB;
+import com.mongodb.client.ClientSession;
+import com.mongodb.client.MongoDatabase;
+
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.mongo.MongoProperties;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.dao.DataAccessException;
+import org.springframework.dao.support.PersistenceExceptionTranslator;
+import org.springframework.data.mongodb.MongoDbFactory;
+import org.springframework.data.mongodb.core.MongoTemplate;
+import org.springframework.data.mongodb.core.convert.DbRefResolver;
+import org.springframework.data.mongodb.core.convert.DefaultDbRefResolver;
+import org.springframework.data.mongodb.core.convert.MappingMongoConverter;
+import org.springframework.data.mongodb.core.convert.MongoConverter;
+import org.springframework.data.mongodb.core.convert.MongoCustomConversions;
+import org.springframework.data.mongodb.core.mapping.MongoMappingContext;
+import org.springframework.data.mongodb.gridfs.GridFsTemplate;
+import org.springframework.util.Assert;
+import org.springframework.util.StringUtils;
+
+
+@Configuration
+@ConditionalOnBean(MongoDbFactory.class)
+class MongoDbFactoryDependentConfiguration {
+
+	private final MongoProperties properties;
+
+	MongoDbFactoryDependentConfiguration(MongoProperties properties) {
+		this.properties = properties;
+	}
+
+	@Bean
+	@ConditionalOnMissingBean
+	public MongoTemplate mongoTemplate(MongoDbFactory mongoDbFactory, MongoConverter converter) {
+		return new MongoTemplate(mongoDbFactory, converter);
+	}
+
+	@Bean
+	@ConditionalOnMissingBean(MongoConverter.class)
+	public MappingMongoConverter mappingMongoConverter(MongoDbFactory factory, MongoMappingContext context,
+			MongoCustomConversions conversions) {
+		DbRefResolver dbRefResolver = new DefaultDbRefResolver(factory);
+		MappingMongoConverter mappingConverter = new MappingMongoConverter(dbRefResolver, context);
+		mappingConverter.setCustomConversions(conversions);
+		return mappingConverter;
+	}
+
+	@Bean
+	@ConditionalOnMissingBean
+	public GridFsTemplate gridFsTemplate(MongoDbFactory mongoDbFactory, MongoTemplate mongoTemplate) {
+		return new GridFsTemplate(new GridFsMongoDbFactory(mongoDbFactory, this.properties),
+				mongoTemplate.getConverter());
+	}
+
+	
+	static class GridFsMongoDbFactory implements MongoDbFactory {
+
+		private final MongoDbFactory mongoDbFactory;
+
+		private final MongoProperties properties;
+
+		GridFsMongoDbFactory(MongoDbFactory mongoDbFactory, MongoProperties properties) {
+			Assert.notNull(mongoDbFactory, );
+			Assert.notNull(properties, );
+			this.mongoDbFactory = mongoDbFactory;
+			this.properties = properties;
+		}
+
+		@Override
+		public MongoDatabase getDb() throws DataAccessException {
+			String gridFsDatabase = this.properties.getGridFsDatabase();
+			if (StringUtils.hasText(gridFsDatabase)) {
+				return this.mongoDbFactory.getDb(gridFsDatabase);
+			}
+			return this.mongoDbFactory.getDb();
+		}
+
+		@Override
+		public MongoDatabase getDb(String dbName) throws DataAccessException {
+			return this.mongoDbFactory.getDb(dbName);
+		}
+
+		@Override
+		public PersistenceExceptionTranslator getExceptionTranslator() {
+			return this.mongoDbFactory.getExceptionTranslator();
+		}
+
+		@Override
+		@Deprecated
+		public DB getLegacyDb() {
+			return this.mongoDbFactory.getLegacyDb();
+		}
+
+		@Override
+		public ClientSession getSession(ClientSessionOptions options) {
+			return this.mongoDbFactory.getSession(options);
+		}
+
+		@Override
+		public MongoDbFactory withSession(ClientSession session) {
+			return this.mongoDbFactory.withSession(session);
+		}
+
+	}
+
+}

