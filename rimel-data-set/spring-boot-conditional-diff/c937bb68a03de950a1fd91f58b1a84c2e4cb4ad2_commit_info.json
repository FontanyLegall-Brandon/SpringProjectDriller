{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/ServletEndpointManagementContextConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/ServletEndpointManagementContextConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,35 +16,35 @@\n \n package org.springframework.boot.actuate.autoconfigure.endpoint.web;\n \n+import org.glassfish.jersey.server.ResourceConfig;\n+\n import org.springframework.boot.actuate.autoconfigure.endpoint.ExposeExcludePropertyEndpointFilter;\n import org.springframework.boot.actuate.autoconfigure.web.ManagementContextConfiguration;\n import org.springframework.boot.actuate.endpoint.web.ExposableServletEndpoint;\n import org.springframework.boot.actuate.endpoint.web.ServletEndpointRegistrar;\n import org.springframework.boot.actuate.endpoint.web.annotation.ServletEndpointsSupplier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\n+import org.springframework.boot.autoconfigure.web.servlet.DispatcherServletPathProvider;\n+import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.web.servlet.DispatcherServlet;\n \n /**\n  * {@link ManagementContextConfiguration} for servlet endpoints.\n  *\n  * @author Phillip Webb\n  * @author Andy Wilkinson\n+ * @author Madhura Bhave\n  * @since 2.0.0\n  */\n @Configuration\n @ConditionalOnWebApplication(type = Type.SERVLET)\n public class ServletEndpointManagementContextConfiguration {\n \n-\t@Bean\n-\tpublic ServletEndpointRegistrar servletEndpointRegistrar(\n-\t\t\tWebEndpointProperties properties,\n-\t\t\tServletEndpointsSupplier servletEndpointsSupplier) {\n-\t\treturn new ServletEndpointRegistrar(properties.getBasePath(),\n-\t\t\t\tservletEndpointsSupplier.getEndpoints());\n-\t}\n-\n \t@Bean\n \tpublic ExposeExcludePropertyEndpointFilter<ExposableServletEndpoint> servletExposeExcludePropertyEndpointFilter(\n \t\t\tWebEndpointProperties properties) {\n@@ -53,4 +53,41 @@ public class ServletEndpointManagementContextConfiguration {\n \t\t\t\texposure.getInclude(), exposure.getExclude());\n \t}\n \n+\t@Configuration\n+\t@ConditionalOnClass(DispatcherServlet.class)\n+\tpublic class WebMvcServletEndpointManagementContextConfiguration {\n+\n+\t\tprivate final ApplicationContext context;\n+\n+\t\tpublic WebMvcServletEndpointManagementContextConfiguration(ApplicationContext context) {\n+\t\t\tthis.context = context;\n+\t\t}\n+\n+\t\t@Bean\n+\t\tpublic ServletEndpointRegistrar servletEndpointRegistrar(\n+\t\t\t\tWebEndpointProperties properties,\n+\t\t\t\tServletEndpointsSupplier servletEndpointsSupplier) {\n+\t\t\tDispatcherServletPathProvider servletPathProvider = this.context.getBean(DispatcherServletPathProvider.class);\n+\t\t\tString servletPath = (servletPathProvider.getServletPath().equals("/") ? "" : servletPathProvider.getServletPath());\n+\t\t\treturn new ServletEndpointRegistrar(servletPath + properties.getBasePath(),\n+\t\t\t\t\tservletEndpointsSupplier.getEndpoints());\n+\t\t}\n+\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnClass(ResourceConfig.class)\n+\t@ConditionalOnMissingClass("org.springframework.web.servlet.DispatcherServlet")\n+\tpublic class JerseyServletEndpointManagementContextConfiguration {\n+\n+\t\t@Bean\n+\t\tpublic ServletEndpointRegistrar servletEndpointRegistrar(\n+\t\t\t\tWebEndpointProperties properties,\n+\t\t\t\tServletEndpointsSupplier servletEndpointsSupplier) {\n+\t\t\treturn new ServletEndpointRegistrar(properties.getBasePath(),\n+\t\t\t\t\tservletEndpointsSupplier.getEndpoints());\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.endpoint.web;\n\nimport org.glassfish.jersey.server.ResourceConfig;\n\nimport org.springframework.boot.actuate.autoconfigure.endpoint.ExposeExcludePropertyEndpointFilter;\nimport org.springframework.boot.actuate.autoconfigure.web.ManagementContextConfiguration;\nimport org.springframework.boot.actuate.endpoint.web.ExposableServletEndpoint;\nimport org.springframework.boot.actuate.endpoint.web.ServletEndpointRegistrar;\nimport org.springframework.boot.actuate.endpoint.web.annotation.ServletEndpointsSupplier;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.autoconfigure.web.servlet.DispatcherServletPathProvider;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.DispatcherServlet;\n\n/**\n * {@link ManagementContextConfiguration} for servlet endpoints.\n *\n * @author Phillip Webb\n * @author Andy Wilkinson\n * @author Madhura Bhave\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnWebApplication(type = Type.SERVLET)\npublic class ServletEndpointManagementContextConfiguration {\n\n\t@Bean\n\tpublic ExposeExcludePropertyEndpointFilter<ExposableServletEndpoint> servletExposeExcludePropertyEndpointFilter(\n\t\t\tWebEndpointProperties properties) {\n\t\tWebEndpointProperties.Exposure exposure = properties.getExposure();\n\t\treturn new ExposeExcludePropertyEndpointFilter<>(ExposableServletEndpoint.class,\n\t\t\t\texposure.getInclude(), exposure.getExclude());\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(DispatcherServlet.class)\n\tpublic class WebMvcServletEndpointManagementContextConfiguration {\n\n\t\tprivate final ApplicationContext context;\n\n\t\tpublic WebMvcServletEndpointManagementContextConfiguration(ApplicationContext context) {\n\t\t\tthis.context = context;\n\t\t}\n\n\t\t@Bean\n\t\tpublic ServletEndpointRegistrar servletEndpointRegistrar(\n\t\t\t\tWebEndpointProperties properties,\n\t\t\t\tServletEndpointsSupplier servletEndpointsSupplier) {\n\t\t\tDispatcherServletPathProvider servletPathProvider = this.context.getBean(DispatcherServletPathProvider.class);\n\t\t\tString servletPath = (servletPathProvider.getServletPath().equals("/") ? "" : servletPathProvider.getServletPath());\n\t\t\treturn new ServletEndpointRegistrar(servletPath + properties.getBasePath(),\n\t\t\t\t\tservletEndpointsSupplier.getEndpoints());\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(ResourceConfig.class)\n\t@ConditionalOnMissingClass("org.springframework.web.servlet.DispatcherServlet")\n\tpublic class JerseyServletEndpointManagementContextConfiguration {\n\n\t\t@Bean\n\t\tpublic ServletEndpointRegistrar servletEndpointRegistrar(\n\t\t\t\tWebEndpointProperties properties,\n\t\t\t\tServletEndpointsSupplier servletEndpointsSupplier) {\n\t\t\treturn new ServletEndpointRegistrar(properties.getBasePath(),\n\t\t\t\t\tservletEndpointsSupplier.getEndpoints());\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.endpoint.web;\n\nimport org.springframework.boot.actuate.autoconfigure.endpoint.ExposeExcludePropertyEndpointFilter;\nimport org.springframework.boot.actuate.autoconfigure.web.ManagementContextConfiguration;\nimport org.springframework.boot.actuate.endpoint.web.ExposableServletEndpoint;\nimport org.springframework.boot.actuate.endpoint.web.ServletEndpointRegistrar;\nimport org.springframework.boot.actuate.endpoint.web.annotation.ServletEndpointsSupplier;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link ManagementContextConfiguration} for servlet endpoints.\n *\n * @author Phillip Webb\n * @author Andy Wilkinson\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnWebApplication(type = Type.SERVLET)\npublic class ServletEndpointManagementContextConfiguration {\n\n\t@Bean\n\tpublic ServletEndpointRegistrar servletEndpointRegistrar(\n\t\t\tWebEndpointProperties properties,\n\t\t\tServletEndpointsSupplier servletEndpointsSupplier) {\n\t\treturn new ServletEndpointRegistrar(properties.getBasePath(),\n\t\t\t\tservletEndpointsSupplier.getEndpoints());\n\t}\n\n\t@Bean\n\tpublic ExposeExcludePropertyEndpointFilter<ExposableServletEndpoint> servletExposeExcludePropertyEndpointFilter(\n\t\t\tWebEndpointProperties properties) {\n\t\tWebEndpointProperties.Exposure exposure = properties.getExposure();\n\t\treturn new ExposeExcludePropertyEndpointFilter<>(ExposableServletEndpoint.class,\n\t\t\t\texposure.getInclude(), exposure.getExclude());\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
