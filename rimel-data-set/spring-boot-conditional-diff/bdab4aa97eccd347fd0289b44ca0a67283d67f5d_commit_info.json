{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -23,18 +23,20 @@ import javax.annotation.PostConstruct;\n \n import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\n import org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration;\n+import org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration;\n import org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration;\n import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\n import org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration;\n import org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration;\n-import org.springframework.boot.autoconfigure.session.SessionAutoConfiguration.SessionRepositoryConfiguration;\n-import org.springframework.boot.autoconfigure.session.SessionAutoConfiguration.SessionRepositoryValidator;\n+import org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration;\n+import org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Configuration;\n@@ -56,15 +58,29 @@ import org.springframework.session.SessionRepository;\n  */\n @Configuration\n @ConditionalOnClass(Session.class)\n-@ConditionalOnWebApplication(type = Type.SERVLET)\n+@ConditionalOnWebApplication\n @EnableConfigurationProperties(SessionProperties.class)\n @AutoConfigureAfter({ DataSourceAutoConfiguration.class, HazelcastAutoConfiguration.class,\n \t\tJdbcTemplateAutoConfiguration.class, MongoAutoConfiguration.class,\n-\t\tRedisAutoConfiguration.class })\n-@Import({ SessionRepositoryConfiguration.class, SessionRepositoryValidator.class,\n-\t\tSessionRepositoryFilterConfiguration.class })\n+\t\tMongoReactiveAutoConfiguration.class, RedisAutoConfiguration.class,\n+\t\tRedisReactiveAutoConfiguration.class })\n+@AutoConfigureBefore(HttpHandlerAutoConfiguration.class)\n public class SessionAutoConfiguration {\n \n+\t@Configuration\n+\t@ConditionalOnWebApplication(type = Type.SERVLET)\n+\t@Import({ SessionRepositoryConfiguration.class, SessionRepositoryValidator.class,\n+\t\t\tSessionRepositoryFilterConfiguration.class })\n+\tstatic class ServletSessionConfiguration {\n+\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnWebApplication(type = Type.REACTIVE)\n+\tstatic class ReactiveSessionConfiguration {\n+\n+\t}\n+\n \t@Configuration\n \t@ConditionalOnMissingBean(SessionRepository.class)\n \t@Import({ SessionRepositoryImplementationValidator.class,\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.session;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.annotation.PostConstruct;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration;\nimport org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration;\nimport org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration;\nimport org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration;\nimport org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.ImportSelector;\nimport org.springframework.core.type.AnnotationMetadata;\nimport org.springframework.session.Session;\nimport org.springframework.session.SessionRepository;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Session.\n *\n * @author Andy Wilkinson\n * @author Tommy Ludwig\n * @author Eddú Meléndez\n * @author Stephane Nicoll\n * @author Vedran Pavic\n * @since 1.4.0\n */\n@Configuration\n@ConditionalOnClass(Session.class)\n@ConditionalOnWebApplication\n@EnableConfigurationProperties(SessionProperties.class)\n@AutoConfigureAfter({ DataSourceAutoConfiguration.class, HazelcastAutoConfiguration.class,\n\t\tJdbcTemplateAutoConfiguration.class, MongoAutoConfiguration.class,\n\t\tMongoReactiveAutoConfiguration.class, RedisAutoConfiguration.class,\n\t\tRedisReactiveAutoConfiguration.class })\n@AutoConfigureBefore(HttpHandlerAutoConfiguration.class)\npublic class SessionAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnWebApplication(type = Type.SERVLET)\n\t@Import({ SessionRepositoryConfiguration.class, SessionRepositoryValidator.class,\n\t\t\tSessionRepositoryFilterConfiguration.class })\n\tstatic class ServletSessionConfiguration {\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnWebApplication(type = Type.REACTIVE)\n\tstatic class ReactiveSessionConfiguration {\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(SessionRepository.class)\n\t@Import({ SessionRepositoryImplementationValidator.class,\n\t\t\tSessionConfigurationImportSelector.class })\n\tstatic class SessionRepositoryConfiguration {\n\n\t}\n\n\t/**\n\t * {@link ImportSelector} to add {@link StoreType} configuration classes.\n\t */\n\tstatic class SessionConfigurationImportSelector implements ImportSelector {\n\n\t\t@Override\n\t\tpublic String[] selectImports(AnnotationMetadata importingClassMetadata) {\n\t\t\tStoreType[] types = StoreType.values();\n\t\t\tString[] imports = new String[types.length];\n\t\t\tfor (int i = 0; i < types.length; i++) {\n\t\t\t\timports[i] = SessionStoreMappings.getConfigurationClass(types[i]);\n\t\t\t}\n\t\t\treturn imports;\n\t\t}\n\n\t}\n\n\t/**\n\t * Bean used to validate that only one supported implementation is available in the\n\t * classpath when the store-type property is not set.\n\t */\n\tstatic class SessionRepositoryImplementationValidator {\n\n\t\tprivate final ClassLoader classLoader;\n\n\t\tprivate final SessionProperties sessionProperties;\n\n\t\tSessionRepositoryImplementationValidator(ApplicationContext applicationContext,\n\t\t\t\tSessionProperties sessionProperties) {\n\t\t\tthis.classLoader = applicationContext.getClassLoader();\n\t\t\tthis.sessionProperties = sessionProperties;\n\t\t}\n\n\t\t@PostConstruct\n\t\tpublic void checkAvailableImplementations() {\n\t\t\tList<Class<?>> candidates = new ArrayList<>();\n\t\t\taddCandidate(candidates,\n\t\t\t\t\t"org.springframework.session.hazelcast.HazelcastSessionRepository");\n\t\t\taddCandidate(candidates,\n\t\t\t\t\t"org.springframework.session.jdbc.JdbcOperationsSessionRepository");\n\t\t\taddCandidate(candidates,\n\t\t\t\t\t"org.springframework.session.data.mongo.MongoOperationsSessionRepository");\n\t\t\taddCandidate(candidates,\n\t\t\t\t\t"org.springframework.session.data.redis.RedisOperationsSessionRepository");\n\t\t\tStoreType storeType = this.sessionProperties.getStoreType();\n\t\t\tif (candidates.size() > 1 && storeType == null) {\n\t\t\t\tthrow new NonUniqueSessionRepositoryException(candidates);\n\t\t\t}\n\t\t}\n\n\t\tprivate void addCandidate(List<Class<?>> candidates, String type) {\n\t\t\ttry {\n\t\t\t\tClass<?> candidate = this.classLoader.loadClass(type);\n\t\t\t\tif (candidate != null) {\n\t\t\t\t\tcandidates.add(candidate);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Throwable ex) {\n\t\t\t\t// Ignore\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Bean used to validate that a {@link SessionRepository} exists and provide a\n\t * meaningful message if that\'s not the case.\n\t */\n\tstatic class SessionRepositoryValidator {\n\n\t\tprivate SessionProperties sessionProperties;\n\n\t\tprivate ObjectProvider<SessionRepository<?>> sessionRepositoryProvider;\n\n\t\tSessionRepositoryValidator(SessionProperties sessionProperties,\n\t\t\t\tObjectProvider<SessionRepository<?>> sessionRepositoryProvider) {\n\t\t\tthis.sessionProperties = sessionProperties;\n\t\t\tthis.sessionRepositoryProvider = sessionRepositoryProvider;\n\t\t}\n\n\t\t@PostConstruct\n\t\tpublic void checkSessionRepository() {\n\t\t\tStoreType storeType = this.sessionProperties.getStoreType();\n\t\t\tif (storeType != StoreType.NONE\n\t\t\t\t\t&& this.sessionRepositoryProvider.getIfAvailable() == null) {\n\t\t\t\tif (storeType != null) {\n\t\t\t\t\tthrow new SessionRepositoryUnavailableException("No session "\n\t\t\t\t\t\t\t+ "repository could be auto-configured, check your "\n\t\t\t\t\t\t\t+ "configuration (session store type is \'"\n\t\t\t\t\t\t\t+ storeType.name().toLowerCase() + "\')", storeType);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.session;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.annotation.PostConstruct;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration;\nimport org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration;\nimport org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration;\nimport org.springframework.boot.autoconfigure.session.SessionAutoConfiguration.SessionRepositoryConfiguration;\nimport org.springframework.boot.autoconfigure.session.SessionAutoConfiguration.SessionRepositoryValidator;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.ImportSelector;\nimport org.springframework.core.type.AnnotationMetadata;\nimport org.springframework.session.Session;\nimport org.springframework.session.SessionRepository;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Session.\n *\n * @author Andy Wilkinson\n * @author Tommy Ludwig\n * @author Eddú Meléndez\n * @author Stephane Nicoll\n * @author Vedran Pavic\n * @since 1.4.0\n */\n@Configuration\n@ConditionalOnClass(Session.class)\n@ConditionalOnWebApplication(type = Type.SERVLET)\n@EnableConfigurationProperties(SessionProperties.class)\n@AutoConfigureAfter({ DataSourceAutoConfiguration.class, HazelcastAutoConfiguration.class,\n\t\tJdbcTemplateAutoConfiguration.class, MongoAutoConfiguration.class,\n\t\tRedisAutoConfiguration.class })\n@Import({ SessionRepositoryConfiguration.class, SessionRepositoryValidator.class,\n\t\tSessionRepositoryFilterConfiguration.class })\npublic class SessionAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnMissingBean(SessionRepository.class)\n\t@Import({ SessionRepositoryImplementationValidator.class,\n\t\t\tSessionConfigurationImportSelector.class })\n\tstatic class SessionRepositoryConfiguration {\n\n\t}\n\n\t/**\n\t * {@link ImportSelector} to add {@link StoreType} configuration classes.\n\t */\n\tstatic class SessionConfigurationImportSelector implements ImportSelector {\n\n\t\t@Override\n\t\tpublic String[] selectImports(AnnotationMetadata importingClassMetadata) {\n\t\t\tStoreType[] types = StoreType.values();\n\t\t\tString[] imports = new String[types.length];\n\t\t\tfor (int i = 0; i < types.length; i++) {\n\t\t\t\timports[i] = SessionStoreMappings.getConfigurationClass(types[i]);\n\t\t\t}\n\t\t\treturn imports;\n\t\t}\n\n\t}\n\n\t/**\n\t * Bean used to validate that only one supported implementation is available in the\n\t * classpath when the store-type property is not set.\n\t */\n\tstatic class SessionRepositoryImplementationValidator {\n\n\t\tprivate final ClassLoader classLoader;\n\n\t\tprivate final SessionProperties sessionProperties;\n\n\t\tSessionRepositoryImplementationValidator(ApplicationContext applicationContext,\n\t\t\t\tSessionProperties sessionProperties) {\n\t\t\tthis.classLoader = applicationContext.getClassLoader();\n\t\t\tthis.sessionProperties = sessionProperties;\n\t\t}\n\n\t\t@PostConstruct\n\t\tpublic void checkAvailableImplementations() {\n\t\t\tList<Class<?>> candidates = new ArrayList<>();\n\t\t\taddCandidate(candidates,\n\t\t\t\t\t"org.springframework.session.hazelcast.HazelcastSessionRepository");\n\t\t\taddCandidate(candidates,\n\t\t\t\t\t"org.springframework.session.jdbc.JdbcOperationsSessionRepository");\n\t\t\taddCandidate(candidates,\n\t\t\t\t\t"org.springframework.session.data.mongo.MongoOperationsSessionRepository");\n\t\t\taddCandidate(candidates,\n\t\t\t\t\t"org.springframework.session.data.redis.RedisOperationsSessionRepository");\n\t\t\tStoreType storeType = this.sessionProperties.getStoreType();\n\t\t\tif (candidates.size() > 1 && storeType == null) {\n\t\t\t\tthrow new NonUniqueSessionRepositoryException(candidates);\n\t\t\t}\n\t\t}\n\n\t\tprivate void addCandidate(List<Class<?>> candidates, String type) {\n\t\t\ttry {\n\t\t\t\tClass<?> candidate = this.classLoader.loadClass(type);\n\t\t\t\tif (candidate != null) {\n\t\t\t\t\tcandidates.add(candidate);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Throwable ex) {\n\t\t\t\t// Ignore\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Bean used to validate that a {@link SessionRepository} exists and provide a\n\t * meaningful message if that\'s not the case.\n\t */\n\tstatic class SessionRepositoryValidator {\n\n\t\tprivate SessionProperties sessionProperties;\n\n\t\tprivate ObjectProvider<SessionRepository<?>> sessionRepositoryProvider;\n\n\t\tSessionRepositoryValidator(SessionProperties sessionProperties,\n\t\t\t\tObjectProvider<SessionRepository<?>> sessionRepositoryProvider) {\n\t\t\tthis.sessionProperties = sessionProperties;\n\t\t\tthis.sessionRepositoryProvider = sessionRepositoryProvider;\n\t\t}\n\n\t\t@PostConstruct\n\t\tpublic void checkSessionRepository() {\n\t\t\tStoreType storeType = this.sessionProperties.getStoreType();\n\t\t\tif (storeType != StoreType.NONE\n\t\t\t\t\t&& this.sessionRepositoryProvider.getIfAvailable() == null) {\n\t\t\t\tif (storeType != null) {\n\t\t\t\t\tthrow new SessionRepositoryUnavailableException("No session "\n\t\t\t\t\t\t\t+ "repository could be auto-configured, check your "\n\t\t\t\t\t\t\t+ "configuration (session store type is \'"\n\t\t\t\t\t\t\t+ storeType.name().toLowerCase() + "\')", storeType);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
