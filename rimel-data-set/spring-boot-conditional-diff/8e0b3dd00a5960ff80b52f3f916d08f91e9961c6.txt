@@ -17,23 +17,31 @@
 package org.springframework.boot.autoconfigure.condition;
 
 import org.junit.After;
+import org.junit.Rule;
 import org.junit.Test;
+import org.junit.rules.ExpectedException;
 import org.springframework.boot.test.EnvironmentTestUtils;
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
+import static org.hamcrest.Matchers.containsString;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
+import static org.junit.internal.matchers.ThrowableMessageMatcher.hasMessage;
 
 
 public class ConditionalOnPropertyTests {
 
+	@Rule
+	public ExpectedException thrown = ExpectedException.none();
+
 	private AnnotationConfigApplicationContext context;
 
 	@After
@@ -45,29 +53,28 @@ public class ConditionalOnPropertyTests {
 
 	@Test
 	public void allPropertiesAreDefined() {
-		load(MultiplePropertiesRequiredConfiguration.class,
-				, );
+		load(MultiplePropertiesRequiredConfiguration.class, ,
+				);
 		assertTrue(this.context.containsBean());
 	}
 
 	@Test
 	public void notAllPropertiesAreDefined() {
-		load(MultiplePropertiesRequiredConfiguration.class,
-				);
+		load(MultiplePropertiesRequiredConfiguration.class, );
 		assertFalse(this.context.containsBean());
 	}
 
 	@Test
 	public void propertyValueEqualsFalse() {
-		load(MultiplePropertiesRequiredConfiguration.class,
-				, );
+		load(MultiplePropertiesRequiredConfiguration.class, ,
+				);
 		assertFalse(this.context.containsBean());
 	}
 
 	@Test
 	public void propertyValueEqualsFALSE() {
-		load(MultiplePropertiesRequiredConfiguration.class,
-				, );
+		load(MultiplePropertiesRequiredConfiguration.class, ,
+				);
 		assertFalse(this.context.containsBean());
 	}
 
@@ -87,12 +94,12 @@ public class ConditionalOnPropertyTests {
 
 	@Test
 	public void nonRelaxedName() throws Exception {
-		load(NonRelaxedPropertiesRequiredConfiguration.class,
-				);
+		load(NonRelaxedPropertiesRequiredConfiguration.class, );
 		assertFalse(this.context.containsBean());
 	}
 
-	@Test 
+	@Test
+	
 	public void enabledIfNotConfiguredOtherwise() {
 		load(EnabledIfNotConfiguredOtherwiseConfig.class);
 		assertTrue(this.context.containsBean());
@@ -110,7 +117,8 @@ public class ConditionalOnPropertyTests {
 		assertFalse(this.context.containsBean());
 	}
 
-	@Test 
+	@Test
+	
 	public void disableIfNotConfiguredOtherwise() {
 		load(DisabledIfNotConfiguredOtherwiseConfig.class);
 		assertFalse(this.context.containsBean());
@@ -184,7 +192,8 @@ public class ConditionalOnPropertyTests {
 
 	@Test
 	public void multiValuesAllSet() {
-		load(MultiValuesConfig.class, , );
+		load(MultiValuesConfig.class, ,
+				);
 		assertTrue(this.context.containsBean());
 	}
 
@@ -194,6 +203,28 @@ public class ConditionalOnPropertyTests {
 		assertFalse(this.context.containsBean());
 	}
 
+	@Test
+	public void usingValueAttribute() throws Exception {
+		load(ValueAttribute.class, );
+		assertTrue(this.context.containsBean());
+	}
+
+	@Test
+	public void nameOrValueMustBeSpecified() throws Exception {
+		this.thrown.expect(IllegalStateException.class);
+		this.thrown.expectCause(hasMessage(containsString(
+				+ )));
+		load(NoNameOrValueAttribute.class, );
+	}
+
+	@Test
+	public void nameAndValueMustNotBeSpecified() throws Exception {
+		this.thrown.expect(IllegalStateException.class);
+		this.thrown.expectCause(hasMessage(containsString(
+				+ )));
+		load(NameAndValueAttribute.class, );
+	}
+
 	private void load(Class<?> config, String... environment) {
 		this.context = new AnnotationConfigApplicationContext();
 		EnvironmentTestUtils.addEnvironment(this.context, environment);
@@ -201,9 +232,8 @@ public class ConditionalOnPropertyTests {
 		this.context.refresh();
 	}
 
-
 	@Configuration
-	@ConditionalOnProperty({ ,  })
+	@ConditionalOnProperty(name = { ,  })
 	protected static class MultiplePropertiesRequiredConfiguration {
 
 		@Bean
@@ -214,7 +244,7 @@ public class ConditionalOnPropertyTests {
 	}
 
 	@Configuration
-	@ConditionalOnProperty(prefix = , value = )
+	@ConditionalOnProperty(prefix = , name = )
 	protected static class RelaxedPropertiesRequiredConfiguration {
 
 		@Bean
@@ -225,7 +255,7 @@ public class ConditionalOnPropertyTests {
 	}
 
 	@Configuration
-	@ConditionalOnProperty(prefix = , value = )
+	@ConditionalOnProperty(prefix = , name = )
 	protected static class RelaxedPropertiesRequiredConfigurationWithShortPrefix {
 
 		@Bean
@@ -236,7 +266,7 @@ public class ConditionalOnPropertyTests {
 	}
 
 	@Configuration
-	@ConditionalOnProperty(value = , relaxedNames = false)
+	@ConditionalOnProperty(name = , relaxedNames = false)
 	protected static class NonRelaxedPropertiesRequiredConfiguration {
 
 		@Bean
@@ -246,8 +276,9 @@ public class ConditionalOnPropertyTests {
 
 	}
 
-	@Configuration 
-	@ConditionalOnProperty(prefix = , value = , match = , defaultMatch = true)
+	@Configuration
+	
+	@ConditionalOnProperty(prefix = , name = , havingValue = , matchIfMissing = true)
 	static class EnabledIfNotConfiguredOtherwiseConfig {
 
 		@Bean
@@ -257,8 +288,9 @@ public class ConditionalOnPropertyTests {
 
 	}
 
-	@Configuration 
-	@ConditionalOnProperty(prefix = , value = , match = , defaultMatch = false)
+	@Configuration
+	
+	@ConditionalOnProperty(prefix = , name = , havingValue = , matchIfMissing = false)
 	static class DisabledIfNotConfiguredOtherwiseConfig {
 
 		@Bean
@@ -269,7 +301,7 @@ public class ConditionalOnPropertyTests {
 	}
 
 	@Configuration
-	@ConditionalOnProperty(prefix = , value = , match = )
+	@ConditionalOnProperty(prefix = , name = , havingValue = )
 	static class SimpleValueConfig {
 
 		@Bean
@@ -280,7 +312,7 @@ public class ConditionalOnPropertyTests {
 	}
 
 	@Configuration
-	@ConditionalOnProperty(value = , match = , defaultMatch = true)
+	@ConditionalOnProperty(name = , havingValue = , matchIfMissing = true)
 	static class DefaultValueConfig {
 
 		@Bean
@@ -291,7 +323,7 @@ public class ConditionalOnPropertyTests {
 	}
 
 	@Configuration
-	@ConditionalOnProperty(prefix = , value = , match = )
+	@ConditionalOnProperty(prefix = , name = , havingValue = )
 	static class PrefixValueConfig {
 
 		@Bean
@@ -302,7 +334,7 @@ public class ConditionalOnPropertyTests {
 	}
 
 	@Configuration
-	@ConditionalOnProperty(prefix = , value = , match = , relaxedNames = false)
+	@ConditionalOnProperty(prefix = , name = , havingValue = , relaxedNames = false)
 	static class StrictNameConfig {
 
 		@Bean
@@ -313,7 +345,8 @@ public class ConditionalOnPropertyTests {
 	}
 
 	@Configuration
-	@ConditionalOnProperty(prefix = , value = {, }, match = )
+	@ConditionalOnProperty(prefix = , name = { ,
+			 }, havingValue = )
 	static class MultiValuesConfig {
 
 		@Bean
@@ -323,4 +356,36 @@ public class ConditionalOnPropertyTests {
 
 	}
 
+	@Configuration
+	@ConditionalOnProperty()
+	protected static class ValueAttribute {
+
+		@Bean
+		public String foo() {
+			return ;
+		}
+
+	}
+
+	@Configuration
+	@ConditionalOnProperty
+	protected static class NoNameOrValueAttribute {
+
+		@Bean
+		public String foo() {
+			return ;
+		}
+
+	}
+
+	@Configuration
+	@ConditionalOnProperty(value = , name = )
+	protected static class NameAndValueAttribute {
+
+		@Bean
+		public String foo() {
+			return ;
+		}
+
+	}
 }

