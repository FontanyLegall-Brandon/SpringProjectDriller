{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2WebSecurityConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2012-2017 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.security.oauth2.client;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+\n+/**\n+ * {@link WebSecurityConfigurerAdapter} to add OAuth client support.\n+ *\n+ * @author Madhura Bhave\n+ * @author Phillip Webb\n+ * @since 2.0.0\n+ */\n+@Configuration\n+@ConditionalOnMissingBean(WebSecurityConfigurerAdapter.class)\n+@ConditionalOnBean(ClientRegistrationRepository.class)\n+class OAuth2WebSecurityConfiguration {\n+\n+\t@Configuration\n+\tprivate static class OAuth2WebSecurityConfigurationAdapter extends WebSecurityConfigurerAdapter {\n+\n+\t\tprivate final ClientRegistrationRepository clientRegistrationRepository;\n+\n+\t\tOAuth2WebSecurityConfigurationAdapter(\n+\t\t\t\tClientRegistrationRepository clientRegistrationRepository) {\n+\t\t\tthis.clientRegistrationRepository = clientRegistrationRepository;\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected void configure(HttpSecurity http) throws Exception {\n+\t\t\thttp\n+\t\t\t\t\t.authorizeRequests()\n+\t\t\t\t\t.anyRequest()\n+\t\t\t\t\t.authenticated().and()\n+\t\t\t\t\t.oauth2Login()\n+\t\t\t\t\t.clients(this.clientRegistrationRepository);\n+\t\t}\n+\n+\t}\n+\n+}\n+\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security.oauth2.client;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n\n/**\n * {@link WebSecurityConfigurerAdapter} to add OAuth client support.\n *\n * @author Madhura Bhave\n * @author Phillip Webb\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnMissingBean(WebSecurityConfigurerAdapter.class)\n@ConditionalOnBean(ClientRegistrationRepository.class)\nclass OAuth2WebSecurityConfiguration {\n\n\t@Configuration\n\tprivate static class OAuth2WebSecurityConfigurationAdapter extends WebSecurityConfigurerAdapter {\n\n\t\tprivate final ClientRegistrationRepository clientRegistrationRepository;\n\n\t\tOAuth2WebSecurityConfigurationAdapter(\n\t\t\t\tClientRegistrationRepository clientRegistrationRepository) {\n\t\t\tthis.clientRegistrationRepository = clientRegistrationRepository;\n\t\t}\n\n\t\t@Override\n\t\tprotected void configure(HttpSecurity http) throws Exception {\n\t\t\thttp\n\t\t\t\t\t.authorizeRequests()\n\t\t\t\t\t.anyRequest()\n\t\t\t\t\t.authenticated().and()\n\t\t\t\t\t.oauth2Login()\n\t\t\t\t\t.clients(this.clientRegistrationRepository);\n\t\t}\n\n\t}\n\n}\n\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
