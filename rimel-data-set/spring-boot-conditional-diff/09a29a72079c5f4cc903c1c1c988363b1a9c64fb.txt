@@ -1,5 +1,5 @@
 
+
 package org.springframework.boot.autoconfigure.security.oauth2.resource;
 
 import java.io.IOException;
@@ -31,11 +32,11 @@ import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;
 import org.springframework.boot.autoconfigure.condition.SpringBootCondition;
+import org.springframework.boot.bind.RelaxedPropertyResolver;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.ConditionContext;
 import org.springframework.context.annotation.Conditional;
 import org.springframework.context.annotation.Configuration;
-import org.springframework.core.OrderComparator;
 import org.springframework.core.annotation.AnnotationAwareOrderComparator;
 import org.springframework.core.env.Environment;
 import org.springframework.core.type.AnnotatedTypeMetadata;
@@ -71,8 +72,10 @@ import org.springframework.web.client.ResourceAccessException;
 import org.springframework.web.client.RestTemplate;
 
 
 @Configuration
 @ConditionalOnMissingBean(AuthorizationServerEndpointsConfiguration.class)
@@ -88,10 +91,10 @@ public class ResourceServerTokenServicesConfiguration {
 
 		static {
 			DEFAULT_RESOURCE_DETAILS.setClientId();
-			DEFAULT_RESOURCE_DETAILS
-					.setUserAuthorizationUri();
-			DEFAULT_RESOURCE_DETAILS
-					.setAccessTokenUri();
+			DEFAULT_RESOURCE_DETAILS.setUserAuthorizationUri(
+					+ );
+			DEFAULT_RESOURCE_DETAILS.setAccessTokenUri(
+					+ );
 		}
 
 		@Autowired(required = false)
@@ -106,52 +109,37 @@ public class ResourceServerTokenServicesConfiguration {
 
 		@Bean(name = )
 		public OAuth2RestTemplate userInfoRestTemplate() {
-			OAuth2RestTemplate template;
-			if (details == null) {
-				details = DEFAULT_RESOURCE_DETAILS;
-			}
-			if (oauth2ClientContext == null) {
-				template = new OAuth2RestTemplate(details);
-			}
-			else {
-				template = new OAuth2RestTemplate(details, oauth2ClientContext);
+			if (this.details == null) {
+				this.details = DEFAULT_RESOURCE_DETAILS;
 			}
+			OAuth2RestTemplate template = getTemplate();
 			template.setInterceptors(Arrays
-					.<ClientHttpRequestInterceptor> asList(new ClientHttpRequestInterceptor() {
-						@Override
-						public ClientHttpResponse intercept(HttpRequest request,
-								byte[] body, ClientHttpRequestExecution execution)
-								throws IOException {
-							request.getHeaders().setAccept(
-									Arrays.asList(MediaType.APPLICATION_JSON));
-							return execution.execute(request, body);
-						}
-					}));
+					.<ClientHttpRequestInterceptor> asList(new AcceptJsonRequestInterceptor()));
 			AuthorizationCodeAccessTokenProvider accessTokenProvider = new AuthorizationCodeAccessTokenProvider();
-			accessTokenProvider.setTokenRequestEnhancer(new RequestEnhancer() {
-				@Override
-				public void enhance(AccessTokenRequest request,
-						OAuth2ProtectedResourceDetails resource,
-						MultiValueMap<String, String> form, HttpHeaders headers) {
-					headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));
-				}
-			});
+			accessTokenProvider.setTokenRequestEnhancer(new AcceptJsonRequestEnhancer());
 			template.setAccessTokenProvider(accessTokenProvider);
-			OrderComparator.sort(customizers);
-			for (UserInfoRestTemplateCustomizer customizer : customizers) {
+			AnnotationAwareOrderComparator.sort(this.customizers);
+			for (UserInfoRestTemplateCustomizer customizer : this.customizers) {
 				customizer.customize(template);
 			}
 			return template;
 		}
 
+		private OAuth2RestTemplate getTemplate() {
+			if (this.oauth2ClientContext == null) {
+				return new OAuth2RestTemplate(this.details);
+			}
+			return new OAuth2RestTemplate(this.details, this.oauth2ClientContext);
+		}
+
 	}
 
 	@Configuration
-	@Conditional(NotJwtToken.class)
+	@Conditional(NotJwtTokenCondition.class)
 	protected static class RemoteTokenServicesConfiguration {
 
 		@Configuration
-		@Conditional(TokenInfo.class)
+		@Conditional(TokenInfoCondition.class)
 		protected static class TokenInfoServicesConfiguration {
 
 			@Autowired
@@ -170,7 +158,7 @@ public class ResourceServerTokenServicesConfiguration {
 
 		@Configuration
 		@ConditionalOnClass(OAuth2ConnectionFactory.class)
-		@Conditional(NotTokenInfo.class)
+		@Conditional(NotTokenInfoCondition.class)
 		protected static class SocialTokenServicesConfiguration {
 
 			@Autowired
@@ -197,8 +185,8 @@ public class ResourceServerTokenServicesConfiguration {
 			public ResourceServerTokenServices userInfoTokenServices() {
 				UserInfoTokenServices services = new UserInfoTokenServices(
 						this.sso.getUserInfoUri(), this.sso.getClientId());
-				services.setTokenType(sso.getTokenType());
-				services.setRestTemplate(restTemplate);
+				services.setTokenType(this.sso.getTokenType());
+				services.setRestTemplate(this.restTemplate);
 				return services;
 			}
 
@@ -206,7 +194,7 @@ public class ResourceServerTokenServicesConfiguration {
 
 		@Configuration
 		@ConditionalOnMissingClass()
-		@Conditional(NotTokenInfo.class)
+		@Conditional(NotTokenInfoCondition.class)
 		protected static class UserInfoTokenServicesConfiguration {
 
 			@Autowired
@@ -221,8 +209,8 @@ public class ResourceServerTokenServicesConfiguration {
 			public ResourceServerTokenServices userInfoTokenServices() {
 				UserInfoTokenServices services = new UserInfoTokenServices(
 						this.sso.getUserInfoUri(), this.sso.getClientId());
-				services.setRestTemplate(restTemplate);
-				services.setTokenType(sso.getTokenType());
+				services.setRestTemplate(this.restTemplate);
+				services.setTokenType(this.sso.getTokenType());
 				return services;
 			}
 
@@ -231,7 +219,7 @@ public class ResourceServerTokenServicesConfiguration {
 	}
 
 	@Configuration
-	@Conditional(JwtToken.class)
+	@Conditional(JwtTokenCondition.class)
 	protected static class JwtTokenServicesConfiguration {
 
 		private RestTemplate keyUriRestTemplate = new RestTemplate();
@@ -262,22 +250,11 @@ public class ResourceServerTokenServicesConfiguration {
 			String keyValue = this.resource.getJwt().getKeyValue();
 			if (!StringUtils.hasText(keyValue)) {
 				try {
-					HttpHeaders headers = new HttpHeaders();
-					if (resource.getClientId() != null
-							&& resource.getClientSecret() != null) {
-						byte[] token = Base64
-								.encode((resource.getClientId() +  + resource
-										.getClientSecret()).getBytes());
-						headers.add(,  + new String(token));
-					}
-					HttpEntity<Void> requestEntity = new HttpEntity<Void>(headers);
-					keyValue = (String) keyUriRestTemplate
-							.exchange(resource.getJwt().getKeyUri(), HttpMethod.GET,
-									requestEntity, Map.class).getBody().get();
+					keyValue = getKeyFromServer();
 				}
-				catch (ResourceAccessException e) {
-					
-					logger.warn();
+				catch (ResourceAccessException ex) {
+					logger.warn(
+							+ );
 				}
 			}
 			if (StringUtils.hasText(keyValue) && !keyValue.startsWith()) {
@@ -286,52 +263,68 @@ public class ResourceServerTokenServicesConfiguration {
 			if (keyValue != null) {
 				converter.setVerifierKey(keyValue);
 			}
-			AnnotationAwareOrderComparator.sort(configurers);
-			for (JwtAccessTokenConverterConfigurer configurer : configurers) {
+			AnnotationAwareOrderComparator.sort(this.configurers);
+			for (JwtAccessTokenConverterConfigurer configurer : this.configurers) {
 				configurer.configure(converter);
 			}
 			return converter;
 		}
 
+		private String getKeyFromServer() {
+			HttpHeaders headers = new HttpHeaders();
+			String username = this.resource.getClientId();
+			String password = this.resource.getClientSecret();
+			if (username != null && password != null) {
+				byte[] token = Base64.encode((username +  + password).getBytes());
+				headers.add(,  + new String(token));
+			}
+			HttpEntity<Void> request = new HttpEntity<Void>(headers);
+			String url = this.resource.getJwt().getKeyUri();
+			return (String) this.keyUriRestTemplate
+					.exchange(url, HttpMethod.GET, request, Map.class).getBody()
+					.get();
+		}
+
 	}
 
-	private static class TokenInfo extends SpringBootCondition {
+	private static class TokenInfoCondition extends SpringBootCondition {
 
 		@Override
 		public ConditionOutcome getMatchOutcome(ConditionContext context,
 				AnnotatedTypeMetadata metadata) {
 			Environment environment = context.getEnvironment();
-			boolean preferTokenInfo = environment
-					.resolvePlaceholders(
-							)
-					.equals();
-			boolean hasTokenInfo = !environment.resolvePlaceholders(
-					).equals();
-			boolean hasUserInfo = !environment.resolvePlaceholders(
-					).equals();
-			if (!hasUserInfo) {
+			RelaxedPropertyResolver resolver = new RelaxedPropertyResolver(environment,
+					);
+			Boolean preferTokenInfo = resolver.getProperty(,
+					Boolean.class);
+			if (preferTokenInfo == null) {
+				preferTokenInfo = environment.resolvePlaceholders(
+						).equals();
+			}
+			String tokenInfoUri = resolver.getProperty();
+			String userInfoUri = resolver.getProperty();
+			if (!StringUtils.hasLength(userInfoUri)) {
 				return ConditionOutcome.match();
 			}
-			if (hasTokenInfo) {
-				if (preferTokenInfo) {
-					return ConditionOutcome
-							.match();
-				}
+			if (StringUtils.hasLength(tokenInfoUri) && preferTokenInfo) {
+				return ConditionOutcome.match(
+						+ );
 			}
 			return ConditionOutcome.noMatch();
 		}
 
 	}
 
-	private static class JwtToken extends SpringBootCondition {
+	private static class JwtTokenCondition extends SpringBootCondition {
 
 		@Override
 		public ConditionOutcome getMatchOutcome(ConditionContext context,
 				AnnotatedTypeMetadata metadata) {
-			if (StringUtils.hasText(context.getEnvironment().getProperty(
-					))
-					|| StringUtils.hasText(context.getEnvironment().getProperty(
-							))) {
+			RelaxedPropertyResolver resolver = new RelaxedPropertyResolver(
+					context.getEnvironment(), );
+			String keyValue = resolver.getProperty();
+			String keyUri = resolver.getProperty();
+			if (StringUtils.hasText(keyValue) || StringUtils.hasText(keyUri)) {
 				return ConditionOutcome.match();
 			}
 			return ConditionOutcome.noMatch();
@@ -339,35 +332,53 @@ public class ResourceServerTokenServicesConfiguration {
 
 	}
 
-	private static class NotTokenInfo extends SpringBootCondition {
+	private static class NotTokenInfoCondition extends SpringBootCondition {
 
-		private TokenInfo opposite = new TokenInfo();
+		private TokenInfoCondition tokenInfoCondition = new TokenInfoCondition();
 
 		@Override
 		public ConditionOutcome getMatchOutcome(ConditionContext context,
 				AnnotatedTypeMetadata metadata) {
-			ConditionOutcome outcome = this.opposite.getMatchOutcome(context, metadata);
-			if (outcome.isMatch()) {
-				return ConditionOutcome.noMatch(outcome.getMessage());
-			}
-			return ConditionOutcome.match(outcome.getMessage());
+			return ConditionOutcome.inverse(this.tokenInfoCondition.getMatchOutcome(
+					context, metadata));
 		}
 
 	}
 
-	private static class NotJwtToken extends SpringBootCondition {
+	private static class NotJwtTokenCondition extends SpringBootCondition {
 
-		private JwtToken opposite = new JwtToken();
+		private JwtTokenCondition jwtTokenCondition = new JwtTokenCondition();
 
 		@Override
 		public ConditionOutcome getMatchOutcome(ConditionContext context,
 				AnnotatedTypeMetadata metadata) {
-			ConditionOutcome outcome = this.opposite.getMatchOutcome(context, metadata);
-			if (outcome.isMatch()) {
-				return ConditionOutcome.noMatch(outcome.getMessage());
-			}
-			return ConditionOutcome.match(outcome.getMessage());
+			return ConditionOutcome.inverse(this.jwtTokenCondition.getMatchOutcome(
+					context, metadata));
+		}
+
+	}
+
+	private static class AcceptJsonRequestInterceptor implements
+			ClientHttpRequestInterceptor {
+
+		@Override
+		public ClientHttpResponse intercept(HttpRequest request, byte[] body,
+				ClientHttpRequestExecution execution) throws IOException {
+			request.getHeaders().setAccept(Arrays.asList(MediaType.APPLICATION_JSON));
+			return execution.execute(request, body);
 		}
 
 	}
+
+	private static class AcceptJsonRequestEnhancer implements RequestEnhancer {
+
+		@Override
+		public void enhance(AccessTokenRequest request,
+				OAuth2ProtectedResourceDetails resource,
+				MultiValueMap<String, String> form, HttpHeaders headers) {
+			headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));
+		}
+
+	}
+
 }

