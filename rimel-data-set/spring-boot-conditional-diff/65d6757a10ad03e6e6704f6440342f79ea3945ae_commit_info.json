{'_old_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,15 +16,19 @@\n \n package org.springframework.boot.actuate.autoconfigure;\n \n+import java.util.Properties;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.actuate.endpoint.Endpoint;\n import org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n+import org.springframework.boot.bind.RelaxedPropertyResolver;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.jmx.export.MBeanExporter;\n+import org.springframework.core.env.Environment;\n+import org.springframework.util.StringUtils;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} to enable JMX export for\n@@ -33,13 +37,41 @@ import org.springframework.jmx.export.MBeanExporter;\n  * @author Christian Dupuis\n  */\n @Configuration\n-@ConditionalOnBean({ MBeanExporter.class })\n @AutoConfigureAfter({ EndpointAutoConfiguration.class })\n @ConditionalOnExpression("${endpoints.jmx.enabled:true}")\n class EndpointMBeanExportAutoConfiguration {\n \n+\tprivate RelaxedPropertyResolver environment;\n+\n+\t@Autowired\n+\tpublic void setEnvironment(Environment environment) {\n+\t\tthis.environment = new RelaxedPropertyResolver(environment);\n+\t}\n+\n \t@Bean\n \tpublic EndpointMBeanExporter endpointMBeanExporter() {\n-\t\treturn new EndpointMBeanExporter();\n+\t\tEndpointMBeanExporter mbeanExporter = new EndpointMBeanExporter();\n+\n+\t\tString domain = this.environment.getProperty("endpoints.jmx.domain");\n+\t\tif (StringUtils.hasText(domain)) {\n+\t\t\tmbeanExporter.setDomain(domain);\n+\t\t}\n+\n+\t\tBoolean ensureUnique = this.environment.getProperty("endpoints.jmx.unique_names",\n+\t\t\t\tBoolean.class, Boolean.FALSE);\n+\t\tmbeanExporter.setEnsureUniqueRuntimeObjectNames(ensureUnique);\n+\n+\t\tmbeanExporter.setObjectNameStaticProperties(getObjectNameStaticProperties());\n+\n+\t\treturn mbeanExporter;\n+\t}\n+\n+\tprivate Properties getObjectNameStaticProperties() {\n+\t\tString staticNames = this.environment.getProperty("endpoints.jmx.static_names");\n+\t\tif (StringUtils.hasText(staticNames)) {\n+\t\t\treturn StringUtils.splitArrayElementsIntoProperties(\n+\t\t\t\t\tStringUtils.commaDelimitedListToStringArray(staticNames), "=");\n+\t\t}\n+\t\treturn new Properties();\n \t}\n }\n\\ No newline at end of file\n', 'source_code': '/*\n * Copyright 2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport java.util.Properties;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuate.endpoint.Endpoint;\nimport org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.bind.RelaxedPropertyResolver;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to enable JMX export for\n * {@link Endpoint}s.\n * \n * @author Christian Dupuis\n */\n@Configuration\n@AutoConfigureAfter({ EndpointAutoConfiguration.class })\n@ConditionalOnExpression("${endpoints.jmx.enabled:true}")\nclass EndpointMBeanExportAutoConfiguration {\n\n\tprivate RelaxedPropertyResolver environment;\n\n\t@Autowired\n\tpublic void setEnvironment(Environment environment) {\n\t\tthis.environment = new RelaxedPropertyResolver(environment);\n\t}\n\n\t@Bean\n\tpublic EndpointMBeanExporter endpointMBeanExporter() {\n\t\tEndpointMBeanExporter mbeanExporter = new EndpointMBeanExporter();\n\n\t\tString domain = this.environment.getProperty("endpoints.jmx.domain");\n\t\tif (StringUtils.hasText(domain)) {\n\t\t\tmbeanExporter.setDomain(domain);\n\t\t}\n\n\t\tBoolean ensureUnique = this.environment.getProperty("endpoints.jmx.unique_names",\n\t\t\t\tBoolean.class, Boolean.FALSE);\n\t\tmbeanExporter.setEnsureUniqueRuntimeObjectNames(ensureUnique);\n\n\t\tmbeanExporter.setObjectNameStaticProperties(getObjectNameStaticProperties());\n\n\t\treturn mbeanExporter;\n\t}\n\n\tprivate Properties getObjectNameStaticProperties() {\n\t\tString staticNames = this.environment.getProperty("endpoints.jmx.static_names");\n\t\tif (StringUtils.hasText(staticNames)) {\n\t\t\treturn StringUtils.splitArrayElementsIntoProperties(\n\t\t\t\t\tStringUtils.commaDelimitedListToStringArray(staticNames), "=");\n\t\t}\n\t\treturn new Properties();\n\t}\n}', 'source_code_before': '/*\n * Copyright 2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport org.springframework.boot.actuate.endpoint.Endpoint;\nimport org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jmx.export.MBeanExporter;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to enable JMX export for\n * {@link Endpoint}s.\n * \n * @author Christian Dupuis\n */\n@Configuration\n@ConditionalOnBean({ MBeanExporter.class })\n@AutoConfigureAfter({ EndpointAutoConfiguration.class })\n@ConditionalOnExpression("${endpoints.jmx.enabled:true}")\nclass EndpointMBeanExportAutoConfiguration {\n\n\t@Bean\n\tpublic EndpointMBeanExporter endpointMBeanExporter() {\n\t\treturn new EndpointMBeanExporter();\n\t}\n}', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
