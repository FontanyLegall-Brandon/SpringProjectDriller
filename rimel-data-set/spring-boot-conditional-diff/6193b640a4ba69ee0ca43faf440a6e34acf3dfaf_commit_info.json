{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.springframework.boot.autoconfigure.security;\n \n import javax.servlet.Filter;\n@@ -44,16 +45,17 @@ import org.springframework.security.web.context.AbstractSecurityWebApplicationIn\n @AutoConfigureAfter(SpringBootWebSecurityConfiguration.class)\n public class SecurityFilterAutoConfiguration {\n \n+\tprivate static final String DEFAULT_FILTER_NAME = AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME;\n+\n \t@Bean\n-\t@ConditionalOnBean(name = AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME)\n+\t@ConditionalOnBean(name = DEFAULT_FILTER_NAME)\n \tpublic FilterRegistrationBean securityFilterChainRegistration(\n-\t\t\t@Qualifier(AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME) Filter securityFilter,\n+\t\t\t@Qualifier(DEFAULT_FILTER_NAME) Filter securityFilter,\n \t\t\tSecurityProperties securityProperties) {\n \t\tFilterRegistrationBean registration = new FilterRegistrationBean(securityFilter);\n \t\tregistration.setOrder(securityProperties.getFilterOrder());\n-\t\tregistration\n-\t\t\t\t.setName(AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME);\n+\t\tregistration.setName(DEFAULT_FILTER_NAME);\n \t\treturn registration;\n \t}\n \n-}\n\\ No newline at end of file\n+}\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security;\n\nimport javax.servlet.Filter;\n\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.context.embedded.FilterRegistrationBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;\nimport org.springframework.security.web.context.AbstractSecurityWebApplicationInitializer;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Security\'s Filter.\n * Configured separately from {@link SpringBootWebSecurityConfiguration} to ensure that\n * the filter\'s order is still configured when a user-provided\n * {@link WebSecurityConfiguration} exists.\n *\n * @author Rob Winch\n * @since 1.3\n */\n@Configuration\n@ConditionalOnWebApplication\n@EnableConfigurationProperties\n@AutoConfigureAfter(SpringBootWebSecurityConfiguration.class)\npublic class SecurityFilterAutoConfiguration {\n\n\tprivate static final String DEFAULT_FILTER_NAME = AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME;\n\n\t@Bean\n\t@ConditionalOnBean(name = DEFAULT_FILTER_NAME)\n\tpublic FilterRegistrationBean securityFilterChainRegistration(\n\t\t\t@Qualifier(DEFAULT_FILTER_NAME) Filter securityFilter,\n\t\t\tSecurityProperties securityProperties) {\n\t\tFilterRegistrationBean registration = new FilterRegistrationBean(securityFilter);\n\t\tregistration.setOrder(securityProperties.getFilterOrder());\n\t\tregistration.setName(DEFAULT_FILTER_NAME);\n\t\treturn registration;\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.boot.autoconfigure.security;\n\nimport javax.servlet.Filter;\n\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.context.embedded.FilterRegistrationBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;\nimport org.springframework.security.web.context.AbstractSecurityWebApplicationInitializer;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Security\'s Filter.\n * Configured separately from {@link SpringBootWebSecurityConfiguration} to ensure that\n * the filter\'s order is still configured when a user-provided\n * {@link WebSecurityConfiguration} exists.\n *\n * @author Rob Winch\n * @since 1.3\n */\n@Configuration\n@ConditionalOnWebApplication\n@EnableConfigurationProperties\n@AutoConfigureAfter(SpringBootWebSecurityConfiguration.class)\npublic class SecurityFilterAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnBean(name = AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME)\n\tpublic FilterRegistrationBean securityFilterChainRegistration(\n\t\t\t@Qualifier(AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME) Filter securityFilter,\n\t\t\tSecurityProperties securityProperties) {\n\t\tFilterRegistrationBean registration = new FilterRegistrationBean(securityFilter);\n\t\tregistration.setOrder(securityProperties.getFilterOrder());\n\t\tregistration\n\t\t\t\t.setName(AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME);\n\t\treturn registration;\n\t}\n\n}', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
