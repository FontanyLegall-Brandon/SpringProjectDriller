{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/jdbc/JdbcRepositoriesAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/jdbc/JdbcRepositoriesAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2018 the original author or authors.\n+ * Copyright 2012-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -16,8 +16,6 @@\n \n package org.springframework.boot.autoconfigure.data.jdbc;\n \n-import java.util.Optional;\n-\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n@@ -27,29 +25,28 @@ import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Import;\n-import org.springframework.data.jdbc.core.convert.JdbcCustomConversions;\n+import org.springframework.data.jdbc.repository.config.AbstractJdbcConfiguration;\n import org.springframework.data.jdbc.repository.config.EnableJdbcRepositories;\n import org.springframework.data.jdbc.repository.config.JdbcConfiguration;\n import org.springframework.data.jdbc.repository.config.JdbcRepositoryConfigExtension;\n-import org.springframework.data.relational.core.conversion.RelationalConverter;\n-import org.springframework.data.relational.core.mapping.NamingStrategy;\n-import org.springframework.data.relational.core.mapping.RelationalMappingContext;\n import org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s JDBC Repositories.\n  * <p>\n  * Once in effect, the auto-configuration is the equivalent of enabling JDBC repositories\n- * using the {@link EnableJdbcRepositories} annotation and providing a\n- * {@link JdbcConfiguration} subclass.\n+ * using the {@link EnableJdbcRepositories} annotation and providing an\n+ * {@link AbstractJdbcConfiguration} subclass.\n  *\n  * @author Andy Wilkinson\n  * @since 2.1.0\n  * @see EnableJdbcRepositories\n  */\n+@SuppressWarnings("deprecation")\n @Configuration\n @ConditionalOnBean(NamedParameterJdbcOperations.class)\n-@ConditionalOnClass({ NamedParameterJdbcOperations.class, JdbcConfiguration.class })\n+@ConditionalOnClass({ NamedParameterJdbcOperations.class,\n+\t\tAbstractJdbcConfiguration.class })\n @ConditionalOnProperty(prefix = "spring.data.jdbc.repositories", name = "enabled", havingValue = "true", matchIfMissing = true)\n @AutoConfigureAfter(JdbcTemplateAutoConfiguration.class)\n public class JdbcRepositoriesAutoConfiguration {\n@@ -62,27 +59,9 @@ public class JdbcRepositoriesAutoConfiguration {\n \t}\n \n \t@Configuration\n-\t@ConditionalOnMissingBean(JdbcConfiguration.class)\n-\tstatic class SpringBootJdbcConfiguration extends JdbcConfiguration {\n-\n-\t\t// Remove these public methods when they are made\n-\t\t// public in Spring Data\n-\t\t@Override\n-\t\tpublic JdbcCustomConversions jdbcCustomConversions() {\n-\t\t\treturn super.jdbcCustomConversions();\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic RelationalMappingContext jdbcMappingContext(\n-\t\t\t\tOptional<NamingStrategy> namingStrategy) {\n-\t\t\treturn super.jdbcMappingContext(namingStrategy);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic RelationalConverter relationalConverter(\n-\t\t\t\tRelationalMappingContext mappingContext) {\n-\t\t\treturn super.relationalConverter(mappingContext);\n-\t\t}\n+\t@ConditionalOnMissingBean({ AbstractJdbcConfiguration.class,\n+\t\t\tJdbcConfiguration.class })\n+\tstatic class SpringBootJdbcConfiguration extends AbstractJdbcConfiguration {\n \n \t}\n \n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.jdbc;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.data.jdbc.repository.config.AbstractJdbcConfiguration;\nimport org.springframework.data.jdbc.repository.config.EnableJdbcRepositories;\nimport org.springframework.data.jdbc.repository.config.JdbcConfiguration;\nimport org.springframework.data.jdbc.repository.config.JdbcRepositoryConfigExtension;\nimport org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s JDBC Repositories.\n * <p>\n * Once in effect, the auto-configuration is the equivalent of enabling JDBC repositories\n * using the {@link EnableJdbcRepositories} annotation and providing an\n * {@link AbstractJdbcConfiguration} subclass.\n *\n * @author Andy Wilkinson\n * @since 2.1.0\n * @see EnableJdbcRepositories\n */\n@SuppressWarnings("deprecation")\n@Configuration\n@ConditionalOnBean(NamedParameterJdbcOperations.class)\n@ConditionalOnClass({ NamedParameterJdbcOperations.class,\n\t\tAbstractJdbcConfiguration.class })\n@ConditionalOnProperty(prefix = "spring.data.jdbc.repositories", name = "enabled", havingValue = "true", matchIfMissing = true)\n@AutoConfigureAfter(JdbcTemplateAutoConfiguration.class)\npublic class JdbcRepositoriesAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnMissingBean(JdbcRepositoryConfigExtension.class)\n\t@Import(JdbcRepositoriesAutoConfigureRegistrar.class)\n\tstatic class JdbcRepositoriesConfiguration {\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean({ AbstractJdbcConfiguration.class,\n\t\t\tJdbcConfiguration.class })\n\tstatic class SpringBootJdbcConfiguration extends AbstractJdbcConfiguration {\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.jdbc;\n\nimport java.util.Optional;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.data.jdbc.core.convert.JdbcCustomConversions;\nimport org.springframework.data.jdbc.repository.config.EnableJdbcRepositories;\nimport org.springframework.data.jdbc.repository.config.JdbcConfiguration;\nimport org.springframework.data.jdbc.repository.config.JdbcRepositoryConfigExtension;\nimport org.springframework.data.relational.core.conversion.RelationalConverter;\nimport org.springframework.data.relational.core.mapping.NamingStrategy;\nimport org.springframework.data.relational.core.mapping.RelationalMappingContext;\nimport org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s JDBC Repositories.\n * <p>\n * Once in effect, the auto-configuration is the equivalent of enabling JDBC repositories\n * using the {@link EnableJdbcRepositories} annotation and providing a\n * {@link JdbcConfiguration} subclass.\n *\n * @author Andy Wilkinson\n * @since 2.1.0\n * @see EnableJdbcRepositories\n */\n@Configuration\n@ConditionalOnBean(NamedParameterJdbcOperations.class)\n@ConditionalOnClass({ NamedParameterJdbcOperations.class, JdbcConfiguration.class })\n@ConditionalOnProperty(prefix = "spring.data.jdbc.repositories", name = "enabled", havingValue = "true", matchIfMissing = true)\n@AutoConfigureAfter(JdbcTemplateAutoConfiguration.class)\npublic class JdbcRepositoriesAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnMissingBean(JdbcRepositoryConfigExtension.class)\n\t@Import(JdbcRepositoriesAutoConfigureRegistrar.class)\n\tstatic class JdbcRepositoriesConfiguration {\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(JdbcConfiguration.class)\n\tstatic class SpringBootJdbcConfiguration extends JdbcConfiguration {\n\n\t\t// Remove these public methods when they are made\n\t\t// public in Spring Data\n\t\t@Override\n\t\tpublic JdbcCustomConversions jdbcCustomConversions() {\n\t\t\treturn super.jdbcCustomConversions();\n\t\t}\n\n\t\t@Override\n\t\tpublic RelationalMappingContext jdbcMappingContext(\n\t\t\t\tOptional<NamingStrategy> namingStrategy) {\n\t\t\treturn super.jdbcMappingContext(namingStrategy);\n\t\t}\n\n\t\t@Override\n\t\tpublic RelationalConverter relationalConverter(\n\t\t\t\tRelationalMappingContext mappingContext) {\n\t\t\treturn super.relationalConverter(mappingContext);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
