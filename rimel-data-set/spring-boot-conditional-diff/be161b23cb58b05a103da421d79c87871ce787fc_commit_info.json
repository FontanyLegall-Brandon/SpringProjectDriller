{'_old_path': PosixPath('spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc'), '_new_path': PosixPath('spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -7606,12 +7606,41 @@ annotations include:\n \n [[boot-features-class-conditions]]\n ==== Class Conditions\n-The `@ConditionalOnClass` and `@ConditionalOnMissingClass` annotations let configuration\n-be included based on the presence or absence of specific classes. Due to the fact that\n-annotation metadata is parsed by using http://asm.ow2.org/[ASM], you can use the `value`\n-attribute to refer to the real class, even though that class might not actually appear on\n-the running application classpath. You can also use the `name` attribute if you prefer to\n-specify the class name by using a `String` value.\n+The `@ConditionalOnClass` and `@ConditionalOnMissingClass` annotations let\n+`@Configuration` classes be included based on the presence or absence of specific classes.\n+Due to the fact that annotation metadata is parsed by using http://asm.ow2.org/[ASM], you\n+can use the `value` attribute to refer to the real class, even though that class might not\n+actually appear on the running application classpath. You can also use the `name`\n+attribute if you prefer to specify the class name by using a `String` value.\n+\n+This mechanism does not apply the same way to `@Bean` methods where typically the return\n+type is the target of the condition: before the condition on the method applies, the JVM\n+will have loaded the class and potentially processed method references which will fail if\n+the class is not present.\n+\n+To handle this scenario, a separate `@Configuration` class can be used to isolate the\n+condition, as shown in the following example:\n+\n+[source,java,indent=0]\n+----\n+\t@Configuration\n+\t// Some conditions\n+\tpublic class MyAutoConfiguration {\n+\n+\t\t// Auto-configured beans\n+\n+\t\t@Configuration\n+\t\t@ConditionalOnClass(EmbeddedAcmeService.class)\n+\t\tstatic class EmbeddedConfiguration {\n+\n+\t\t\t@Bean\n+\t\t\t@ConditionalOnMissingBean\n+\t\t\tpublic EmbeddedAcmeService embeddedAcmeService() { ... }\n+\n+\t\t}\n+\n+\t}\n+----\n \n [TIP]\n ====\n', 'source_code': '[[boot-features]]\n= Spring Boot features\n\n[partintro]\n--\nThis section dives into the details of Spring Boot. Here you can learn about the key\nfeatures that you may want to use and customize. If you have not already done so, you\nmight want to read the "<<getting-started.adoc#getting-started>>" and\n"<<using-spring-boot.adoc#using-boot>>" sections, so that you have a good grounding of the\nbasics.\n--\n\n\n\n[[boot-features-spring-application]]\n== SpringApplication\nThe `SpringApplication` class provides a convenient way to bootstrap a Spring application\nthat is started from a `main()` method. In many situations, you can delegate to the\nstatic `SpringApplication.run` method, as shown in the following example:\n\n[source,java,indent=0]\n----\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(MySpringConfiguration.class, args);\n\t}\n----\n\nWhen your application starts, you should see something similar to the following output:\n\n[indent=0,subs="attributes"]\n----\n  .   ____          _            __ _ _\n /\\\\ / ___\'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | \'_ | \'_| | \'_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  \'  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::   v{spring-boot-version}\n\n2013-07-31 00:08:16.117  INFO 56603 --- [           main] o.s.b.s.app.SampleApplication            : Starting SampleApplication v0.1.0 on mycomputer with PID 56603 (/apps/myapp.jar started by pwebb)\n2013-07-31 00:08:16.166  INFO 56603 --- [           main] ationConfigServletWebServerApplicationContext : Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6e5a8246: startup date [Wed Jul 31 00:08:16 PDT 2013]; root of context hierarchy\n2014-03-04 13:09:54.912  INFO 41370 --- [           main] .t.TomcatServletWebServerFactory : Server initialized with port: 8080\n2014-03-04 13:09:56.501  INFO 41370 --- [           main] o.s.b.s.app.SampleApplication            : Started SampleApplication in 2.992 seconds (JVM running for 3.658)\n----\n\nBy default, `INFO` logging messages are shown, including some relevant startup details,\nsuch as the user that launched the application. If you need a log level other than `INFO`,\nyou can set it, as described in <<boot-features-custom-log-levels>>,\n\n\n\n[[boot-features-startup-failure]]\n=== Startup Failure\nIf your application fails to start, registered `FailureAnalyzers` get a chance to provide\na dedicated error message and a concrete action to fix the problem. For instance, if you\nstart a web application on port `8080` and that port is already in use, you should see\nsomething similar to the following message:\n\n[indent=0]\n----\n\t***************************\n\tAPPLICATION FAILED TO START\n\t***************************\n\n\tDescription:\n\n\tEmbedded servlet container failed to start. Port 8080 was already in use.\n\n\tAction:\n\n\tIdentify and stop the process that\'s listening on port 8080 or configure this application to listen on another port.\n----\n\nNOTE: Spring Boot provides numerous `FailureAnalyzer` implementations, and you can\n<<howto.adoc#howto-failure-analyzer,add your own>>.\n\nIf no failure analyzers are able to handle the exception, you can still display the full\nconditions report to better understand what went wrong. To do so, you need to\n<<boot-features-external-config,enable the `debug` property>> or\n<<boot-features-custom-log-levels,enable `DEBUG` logging>> for\n`org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener`.\n\nFor instance, if you are running your application by using `java -jar`, you can enable\nthe `debug` property as follows:\n\n[indent=0,subs="attributes"]\n----\n\t$ java -jar myproject-0.0.1-SNAPSHOT.jar --debug\n----\n\n\n\n[[boot-features-banner]]\n=== Customizing the Banner\nThe banner that is printed on start up can be changed by adding a `banner.txt` file to\nyour classpath or by setting the `spring.banner.location` property to the location of such\na file. If the file has an encoding other than UTF-8, you can set `spring.banner.charset`.\nIn addition to a text file, you can also add a `banner.gif`, `banner.jpg`, or `banner.png`\nimage file to your classpath or set the `spring.banner.image.location` property. Images\nare converted into an ASCII art representation and printed above any text banner.\n\nInside your `banner.txt` file, you can use any of the following placeholders:\n\n.Banner variables\n|===\n| Variable | Description\n\n|`${application.version}`\n|The version number of your application, as declared in `MANIFEST.MF`. For example,\n`Implementation-Version: 1.0` is printed as `1.0`.\n\n|`${application.formatted-version}`\n|The version number of your application, as declared in `MANIFEST.MF` and formatted for\ndisplay (surrounded with brackets and prefixed with `v`). For example `(v1.0)`.\n\n|`${spring-boot.version}`\n|The Spring Boot version that you are using. For example `{spring-boot-version}`.\n\n|`${spring-boot.formatted-version}`\n|The Spring Boot version that you are using, formatted for display (surrounded with\nbrackets and prefixed with `v`). For example `(v{spring-boot-version})`.\n\n|`${Ansi.NAME}` (or `${AnsiColor.NAME}`, `${AnsiBackground.NAME}`, `${AnsiStyle.NAME}`)\n|Where `NAME` is the name of an ANSI escape code. See\n{sc-spring-boot}/ansi/AnsiPropertySource.{sc-ext}[`AnsiPropertySource`] for details.\n\n|`${application.title}`\n|The title of your application, as declared in `MANIFEST.MF`. For example\n`Implementation-Title: MyApp` is printed as `MyApp`.\n|===\n\nTIP: The `SpringApplication.setBanner(...)` method can be used if you want to generate\na banner programmatically. Use the `org.springframework.boot.Banner` interface and\nimplement your own `printBanner()` method.\n\nYou can also use the `spring.main.banner-mode` property to determine if the banner has\nto be printed on `System.out` (`console`), sent to the configured logger (`log`), or not\nproduced at all (`off`).\n\nThe printed banner is registered as a singleton bean under the following name:\n`springBootBanner`.\n\n[NOTE]\n====\nYAML maps `off` to `false`, so be sure to add quotes if you want to disable the banner in\nyour application, as shown in the following example:\n\n[source,yaml,indent=0]\n----\n\tspring:\n\t\tmain:\n\t\t\tbanner-mode: "off"\n----\n====\n\n[[boot-features-customizing-spring-application]]\n=== Customizing SpringApplication\nIf the `SpringApplication` defaults are not to your taste, you can instead create a local\ninstance and customize it. For example, to turn off the banner, you could write:\n\n[source,java,indent=0]\n----\n\tpublic static void main(String[] args) {\n\t\tSpringApplication app = new SpringApplication(MySpringConfiguration.class);\n\t\tapp.setBannerMode(Banner.Mode.OFF);\n\t\tapp.run(args);\n\t}\n----\n\nNOTE: The constructor arguments passed to `SpringApplication` are configuration sources\nfor Spring beans. In most cases, these are references to `@Configuration` classes, but\nthey could also be references to XML configuration or to packages that should be scanned.\n\nIt is also possible to configure the `SpringApplication` by using an\n`application.properties` file. See _<<boot-features-external-config>>_ for details.\n\nFor a complete list of the configuration options, see the\n{dc-spring-boot}/SpringApplication.{dc-ext}[`SpringApplication` Javadoc].\n\n\n\n[[boot-features-fluent-builder-api]]\n=== Fluent Builder API\nIf you need to build an `ApplicationContext` hierarchy (multiple contexts with a\nparent/child relationship) or if you prefer using a "`fluent`" builder API, you can\nuse the `SpringApplicationBuilder`.\n\nThe `SpringApplicationBuilder` lets you chain together multiple method calls and includes\n`parent` and `child` methods that let you create a hierarchy, as shown in the following\nexample:\n\n[source,java,indent=0]\n----\ninclude::{code-examples}/builder/SpringApplicationBuilderExample.java[tag=hierarchy]\n----\n\nNOTE: There are some restrictions when creating an `ApplicationContext` hierarchy. For\nexample, Web components *must* be contained within the child context, and the same\n`Environment` is used for both parent and child contexts. See the\n{dc-spring-boot}/builder/SpringApplicationBuilder.{dc-ext}[`SpringApplicationBuilder`\nJavadoc] for full details.\n\n\n\n[[boot-features-application-events-and-listeners]]\n=== Application Events and Listeners\nIn addition to the usual Spring Framework events, such as\n{spring-javadoc}/context/event/ContextRefreshedEvent.{dc-ext}[`ContextRefreshedEvent`],\na `SpringApplication` sends some additional application events.\n\n[NOTE]\n====\nSome events are actually triggered before the `ApplicationContext` is created, so you\ncannot register a listener on those as a `@Bean`. You can register them with the\n`SpringApplication.addListeners(...)` method or the\n`SpringApplicationBuilder.listeners(...)` method.\n\nIf you want those listeners to be registered automatically, regardless of the way the\napplication is created, you can add a `META-INF/spring.factories` file to your project\nand reference your listener(s) by using the\n`org.springframework.context.ApplicationListener` key, as shown in the following example:\n\n[indent=0]\n----\n\torg.springframework.context.ApplicationListener=com.example.project.MyListener\n----\n\n====\n\nApplication events are sent in the following order, as your application runs:\n\n. An `ApplicationStartingEvent` is sent at the start of a run but before any processing,\nexcept for the registration of listeners and initializers.\n. An `ApplicationEnvironmentPreparedEvent` is sent when the `Environment` to be used in\nthe context is known but before the context is created.\n. An `ApplicationPreparedEvent` is sent just before the refresh is started but after bean\ndefinitions have been loaded.\n. An `ApplicationStartedEvent` is sent after the context has been refreshed but before any\napplication and command-line runners have been called.\n. An `ApplicationReadyEvent` is sent after any application and command-line runners have\nbeen called. It indicates that the application is ready to service requests.\n. An `ApplicationFailedEvent` is sent if there is an exception on startup.\n\nTIP: You often need not use application events, but it can be handy to know that they\nexist. Internally, Spring Boot uses events to handle a variety of tasks.\n\nApplication events are sent by using Spring Framework\'s event publishing mechanism. Part\nof this mechanism ensures that an event published to the listeners in a child context is\nalso published to the listeners in any ancestor contexts. As a result of this, if your\napplication uses a hierarchy of `SpringApplication` instances, a listener may receive\nmultiple instances of the same type of application event.\n\nTo allow your listener to distinguish between an event for its context and an event for\na descendant context, it should request that its application context is injected and then\ncompare the injected context with the context of the event. The context can be injected\nby implementing `ApplicationContextAware` or, if the listener is a bean, by using\n`@Autowired`.\n\n\n\n[[boot-features-web-environment]]\n=== Web Environment\nA `SpringApplication` attempts to create the right type of `ApplicationContext` on your\nbehalf. The algorithm used to determine a `WebApplicationType` is fairly simple:\n\n* If Spring MVC is present, an `AnnotationConfigServletWebServerApplicationContext` is\nused\n* If Spring MVC is not present and Spring WebFlux is present, an\n`AnnotationConfigReactiveWebServerApplicationContext` is used\n* Otherwise, `AnnotationConfigApplicationContext` is used\n\nThis means that if you are using Spring MVC and the new `WebClient` from Spring WebFlux in\nthe same application, Spring MVC will be used by default. You can override that easily\nby calling `setWebApplicationType(WebApplicationType)`.\n\nIt is also possible to take complete control of the `ApplicationContext` type that is\nused by calling `setApplicationContextClass(...)`.\n\nTIP: It is often desirable to call `setWebApplicationType(WebApplicationType.NONE)` when\nusing `SpringApplication` within a JUnit test.\n\n\n\n[[boot-features-application-arguments]]\n=== Accessing Application Arguments\nIf you need to access the application arguments that were passed to\n`SpringApplication.run(...)`, you can inject a\n`org.springframework.boot.ApplicationArguments` bean. The `ApplicationArguments`\ninterface provides access to both the raw `String[]` arguments as well as parsed `option`\nand `non-option` arguments, as shown in the following example:\n\n[source,java,indent=0]\n----\n\timport org.springframework.boot.*;\n\timport org.springframework.beans.factory.annotation.*;\n\timport org.springframework.stereotype.*;\n\n\t@Component\n\tpublic class MyBean {\n\n\t\t@Autowired\n\t\tpublic MyBean(ApplicationArguments args) {\n\t\t\tboolean debug = args.containsOption("debug");\n\t\t\tList<String> files = args.getNonOptionArgs();\n\t\t\t// if run with "--debug logfile.txt" debug=true, files=["logfile.txt"]\n\t\t}\n\n\t}\n----\n\nTIP: Spring Boot also registers a `CommandLinePropertySource` with the Spring\n`Environment`. This lets you also inject single application arguments by using the\n`@Value` annotation.\n\n\n\n[[boot-features-command-line-runner]]\n=== Using the ApplicationRunner or CommandLineRunner\nIf you need to run some specific code once the `SpringApplication` has started, you can\nimplement the `ApplicationRunner` or `CommandLineRunner` interfaces. Both interfaces work\nin the same way and offer a single `run` method, which is called just before\n`SpringApplication.run(...)` completes.\n\nThe `CommandLineRunner` interfaces provides access to application arguments as a simple\nstring array, whereas the `ApplicationRunner` uses the `ApplicationArguments` interface\ndiscussed earlier. The following example shows a `CommandLineRunner` with a `run` method:\n\n[source,java,indent=0]\n----\n\timport org.springframework.boot.*;\n\timport org.springframework.stereotype.*;\n\n\t@Component\n\tpublic class MyBean implements CommandLineRunner {\n\n\t\tpublic void run(String... args) {\n\t\t\t// Do something...\n\t\t}\n\n\t}\n----\n\nIf several `CommandLineRunner` or `ApplicationRunner` beans are defined that must be\ncalled in a specific order, you can additionally implement the\n`org.springframework.core.Ordered` interface or use the\n`org.springframework.core.annotation.Order` annotation.\n\n\n\n[[boot-features-application-exit]]\n=== Application Exit\nEach `SpringApplication` registers a shutdown hook with the JVM to ensure that the\n`ApplicationContext` closes gracefully on exit. All the standard Spring lifecycle\ncallbacks (such as the `DisposableBean` interface or the `@PreDestroy` annotation) can be\nused.\n\nIn addition, beans may implement the `org.springframework.boot.ExitCodeGenerator`\ninterface if they wish to return a specific exit code when `SpringApplication.exit()` is\ncalled. This exit code can then be passed to `System.exit()` to return it as a status\ncode, as shown in the following example:\n\n[source,java,indent=0]\n----\ninclude::{code-examples}/ExitCodeApplication.java[tag=example]\n----\n\nAlso, the `ExitCodeGenerator` interface may be implemented by exceptions. When such an\nexception is encountered, Spring Boot returns the exit code provided by the implemented\n`getExitCode()` method.\n\n\n[[boot-features-application-admin]]\n=== Admin Features\nIt is possible to enable admin-related features for the application by specifying the\n`spring.application.admin.enabled` property. This exposes the\n{sc-spring-boot}/admin/SpringApplicationAdminMXBean.{sc-ext}[`SpringApplicationAdminMXBean`]\non the platform `MBeanServer`. You could use this feature to administer your Spring Boot\napplication remotely. This feature could also be useful for any service wrapper\nimplementation.\n\nTIP: If you want to know on which HTTP port the application is running, get the property\nwith a key of `local.server.port`.\n\nCAUTION: Take care when enabling this feature, as the MBean exposes a method to shutdown\nthe application.\n\n\n\n[[boot-features-external-config]]\n== Externalized Configuration\nSpring Boot lets you externalize your configuration so that you can work with the same\napplication code in different environments. You can use properties files, YAML files,\nenvironment variables, and command-line arguments to externalize configuration. Property\nvalues can be injected directly into your beans by using the `@Value` annotation,\naccessed through Spring\'s `Environment` abstraction, or be\n<<boot-features-external-config-typesafe-configuration-properties,bound to structured\nobjects>> through `@ConfigurationProperties`.\n\nSpring Boot uses a very particular `PropertySource` order that is designed to allow\nsensible overriding of values. Properties are considered in the following order:\n\n. <<using-boot-devtools-globalsettings,Devtools global settings properties>>\non your home directory (`~/.spring-boot-devtools.properties` when devtools is active).\n. {spring-javadoc}/test/context/TestPropertySource.{dc-ext}[`@TestPropertySource`]\nannotations on your tests.\n. {dc-spring-boot-test}/context/SpringBootTest.{dc-ext}[`@SpringBootTest#properties`]\nannotation attribute on your tests.\n. Command line arguments.\n. Properties from `SPRING_APPLICATION_JSON` (inline JSON embedded in an environment\nvariable or system property).\n. `ServletConfig` init parameters.\n. `ServletContext` init parameters.\n. JNDI attributes from `java:comp/env`.\n. Java System properties (`System.getProperties()`).\n. OS environment variables.\n. A `RandomValuePropertySource` that has properties only in `+random.*+`.\n. <<boot-features-external-config-profile-specific-properties,Profile-specific\napplication properties>> outside of your packaged jar\n(`application-{profile}.properties` and YAML variants).\n. <<boot-features-external-config-profile-specific-properties,Profile-specific\napplication properties>> packaged inside your jar (`application-{profile}.properties`\nand YAML variants).\n. Application properties outside of your packaged jar (`application.properties` and YAML\nvariants).\n. Application properties packaged inside your jar (`application.properties` and YAML\nvariants).\n. {spring-javadoc}/context/annotation/PropertySource.{dc-ext}[`@PropertySource`]\nannotations on your `@Configuration` classes.\n. Default properties (specified by setting `SpringApplication.setDefaultProperties`).\n\nTo provide a concrete example, suppose you develop a `@Component` that uses a `name`\nproperty, as shown in the following example:\n\n[source,java,indent=0]\n----\n\timport org.springframework.stereotype.*;\n\timport org.springframework.beans.factory.annotation.*;\n\n\t@Component\n\tpublic class MyBean {\n\n\t    @Value("${name}")\n\t    private String name;\n\n\t    // ...\n\n\t}\n----\n\nOn your application classpath (for example, inside your jar) you can have an\n`application.properties` file that provides a sensible default property value for `name`.\nWhen running in a new environment, an `application.properties` file can be provided\noutside of your jar that overrides the `name`. For one-off testing, you can launch with a\nspecific command line switch (for example, `java -jar app.jar --name="Spring"`).\n\n[TIP]\n====\nThe `SPRING_APPLICATION_JSON` properties can be supplied on the command line with an\nenvironment variable. For example, you could use the following line in a UN{asterisk}X\nshell:\n\n----\n$ SPRING_APPLICATION_JSON=\'{"acme":{"name":"test"}}\' java -jar myapp.jar\n----\n\nIn the preceding example, you end up with `acme.name=test` in the Spring `Environment`.\nYou can also supply the JSON as `spring.application.json` in a System property, as shown\nin the following example:\n\n----\n$ java -Dspring.application.json=\'{"name":"test"}\' -jar myapp.jar\n----\n\nYou can also supply the JSON by using a command line argument, as shown in the following\nexample:\n\n----\n$ java -jar myapp.jar --spring.application.json=\'{"name":"test"}\'\n----\n\nYou can also supply the JSON as a JNDI variable, as follows:\n`java:comp/env/spring.application.json`.\n====\n\n\n\n[[boot-features-external-config-random-values]]\n=== Configuring Random Values\nThe `RandomValuePropertySource` is useful for injecting random values (for example, into\nsecrets or test cases). It can produce integers, longs, uuids, or strings, as shown in the\nfollowing example:\n\n[source,properties,indent=0]\n----\n\tmy.secret=${random.value}\n\tmy.number=${random.int}\n\tmy.bignumber=${random.long}\n\tmy.uuid=${random.uuid}\n\tmy.number.less.than.ten=${random.int(10)}\n\tmy.number.in.range=${random.int[1024,65536]}\n----\n\nThe `+random.int*+` syntax is `OPEN value (,max) CLOSE` where the `OPEN,CLOSE` are any\ncharacter and `value,max` are integers. If `max` is provided, then `value` is the minimum\nvalue and `max` is the maximum value (exclusive).\n\n\n\n[[boot-features-external-config-command-line-args]]\n=== Accessing Command Line Properties\nBy default, `SpringApplication` converts any command line option arguments (that is,\narguments starting with `--`, such as `--server.port=9000`) to a `property` and adds\nthem to the Spring `Environment`. As mentioned previously, command line properties always\ntake precedence over other property sources.\n\nIf you do not want command line properties to be added to the `Environment`, you can\ndisable them by using `SpringApplication.setAddCommandLineProperties(false)`.\n\n\n\n[[boot-features-external-config-application-property-files]]\n=== Application Property Files\n`SpringApplication` loads properties from `application.properties` files in the following\nlocations and adds them to the Spring `Environment`:\n\n. A `/config` subdirectory of the current directory\n. The current directory\n. A classpath `/config` package\n. The classpath root\n\nThe list is ordered by precedence (properties defined in locations higher in the list\noverride those defined in lower locations).\n\nNOTE: You can also <<boot-features-external-config-yaml, use YAML (\'.yml\') files>> as an\nalternative to \'.properties\'.\n\nIf you do not like `application.properties` as the configuration file name, you can\nswitch to another file name by specifying a `spring.config.name` environment property.\nYou can also refer to an explicit location by using the `spring.config.location`\nenvironment property (which is a comma-separated list of directory locations or file\npaths). The following example shows how to specify a different file name:\n\n[indent=0]\n----\n\t$ java -jar myproject.jar --spring.config.name=myproject\n----\n\nThe following example shows how to specify two locations:\n\n[indent=0]\n----\n\t$ java -jar myproject.jar --spring.config.location=classpath:/default.properties,classpath:/override.properties\n----\n\nWARNING: `spring.config.name` and `spring.config.location` are used very early to\ndetermine which files have to be loaded, so they must be defined as an environment\nproperty (typically an OS environment variable, a system property, or a command-line\nargument).\n\nIf `spring.config.location` contains directories (as opposed to files), they should end\nin `/` (and, at runtime, be appended with the names generated from `spring.config.name`\nbefore being loaded, including profile-specific file names). Files specified in\n`spring.config.location` are used as-is, with no support for profile-specific variants,\nand are overridden by any profile-specific properties.\n\nConfig locations are searched in reverse order. By default, the configured locations are\n`classpath:/,classpath:/config/,file:./,file:./config/`. The resulting search order is\nthe following:\n\n. `file:./config/`\n. `file:./`\n. `classpath:/config/`\n. `classpath:/`\n\nWhen custom config locations are configured by using `spring.config.location`, they\nreplace the default locations. For example, if `spring.config.location` is configured with\nthe value `classpath:/custom-config/,file:./custom-config/`, the search order becomes the\nfollowing:\n\n. `file:./custom-config/`\n. `classpath:custom-config/`\n\nAlternatively, when custom config locations are configured by using\n`spring.config.additional-location`, they are used in addition to the default locations.\nAdditional locations are searched before the default locations. For example, if\nadditional locations of `classpath:/custom-config/,file:./custom-config/` are configured,\nthe search order becomes the following:\n\n. `file:./custom-config/`\n. `classpath:custom-config/`\n. `file:./config/`\n. `file:./`\n. `classpath:/config/`\n. `classpath:/`\n\nThis search ordering lets you specify default values in one configuration file and then\nselectively override those values in another. You can provide default values for your\napplication in `application.properties` (or whatever other basename you choose with\n`spring.config.name`) in one of the default locations. These default values can then be\noverridden at runtime with a different file located in one of the custom locations.\n\nNOTE: If you use environment variables rather than system properties, most operating\nsystems disallow period-separated key names, but you can use underscores instead (for\nexample, `SPRING_CONFIG_NAME` instead of `spring.config.name`).\n\nNOTE: If your application runs in a container, then JNDI properties (in `java:comp/env`)\nor servlet context initialization parameters can be used instead of, or as well as,\nenvironment variables or system properties.\n\n\n\n[[boot-features-external-config-profile-specific-properties]]\n=== Profile-specific Properties\nIn addition to `application.properties` files, profile-specific properties can also be\ndefined by using the following naming convention: `application-{profile}.properties`. The\n`Environment` has a set of default profiles (by default, `[default]`) that are used if no\nactive profiles are set. In other words, if no profiles are explicitly activated, then\nproperties from `application-default.properties` are loaded.\n\nProfile-specific properties are loaded from the same locations as standard\n`application.properties`, with profile-specific files always overriding the non-specific\nones, whether or not the profile-specific files are inside or outside your\npackaged jar.\n\nIf several profiles are specified, a last-wins strategy applies. For example, profiles\nspecified by the `spring.profiles.active` property are added after those configured\nthrough the `SpringApplication` API and therefore take precedence.\n\nNOTE: If you have specified any files in `spring.config.location`, profile-specific\nvariants of those files are not considered. Use directories in\n`spring.config.location` if you want to also use profile-specific properties.\n\n\n\n[[boot-features-external-config-placeholders-in-properties]]\n=== Placeholders in Properties\nThe values in `application.properties` are filtered through the existing `Environment`\nwhen they are used, so you can refer back to previously defined values (for example, from\nSystem properties).\n\n[source,properties,indent=0]\n----\n\tapp.name=MyApp\n\tapp.description=${app.name} is a Spring Boot application\n----\n\nTIP: You can also use this technique to create "`short`" variants of existing Spring Boot\nproperties. See the _<<howto.adoc#howto-use-short-command-line-arguments>>_ how-to for\ndetails.\n\n\n\n[[boot-features-encrypting-properties]]\n=== Encrypting Properties\nSpring Boot does not provide any built in support for encrypting property values, however,\nit does provide the hook points necessary to modify values contained in the Spring\n`Environment`. The `EnvironmentPostProcessor` interface allows you to manipulate the\n`Environment` before the application starts. See <<howto-customize-the-environment-or-application-context>>\nfor details.\n\nIf you\'re looking for a secure way to store credentials and passwords, the\nhttps://cloud.spring.io/spring-cloud-vault/[Spring Cloud Vault] project provides\nsupport for storing externalized configuration in\nhttps://www.vaultproject.io/[HashiCorp Vault].\n\n\n\n[[boot-features-external-config-yaml]]\n=== Using YAML Instead of Properties\nhttp://yaml.org[YAML] is a superset of JSON and, as such, is a convenient format for\nspecifying hierarchical configuration data. The `SpringApplication` class automatically\nsupports YAML as an alternative to properties whenever you have the\nhttp://www.snakeyaml.org/[SnakeYAML] library on your classpath.\n\nNOTE: If you use "`Starters`", SnakeYAML is automatically provided by\n`spring-boot-starter`.\n\n\n\n[[boot-features-external-config-loading-yaml]]\n==== Loading YAML\nSpring Framework provides two convenient classes that can be used to load YAML documents.\nThe `YamlPropertiesFactoryBean` loads YAML as `Properties` and the `YamlMapFactoryBean`\nloads YAML as a `Map`.\n\nFor example, consider the following YAML document:\n\n[source,yaml,indent=0]\n----\n\tenvironments:\n\t\tdev:\n\t\t\turl: http://dev.example.com\n\t\t\tname: Developer Setup\n\t\tprod:\n\t\t\turl: http://another.example.com\n\t\t\tname: My Cool App\n----\n\nThe preceding example would be transformed into the following properties:\n\n[source,properties,indent=0]\n----\n\tenvironments.dev.url=http://dev.example.com\n\tenvironments.dev.name=Developer Setup\n\tenvironments.prod.url=http://another.example.com\n\tenvironments.prod.name=My Cool App\n----\n\nYAML lists are represented as property keys with `[index]` dereferencers. For example,\nconsider the following YAML:\n\n[source,yaml,indent=0]\n----\n\t my:\n\t\tservers:\n\t\t\t- dev.example.com\n\t\t\t- another.example.com\n----\n\nThe preceding example would be transformed into these properties:\n\n[source,properties,indent=0]\n----\n\tmy.servers[0]=dev.example.com\n\tmy.servers[1]=another.example.com\n----\n\nTo bind to properties like that by using Spring Boot\'s `Binder` utilities (which is what\n`@ConfigurationProperties` does), you need to have a property in the target bean of type\n`java.util.List` (or `Set`) and you either need to provide a setter or initialize it with\na mutable value. For example, the following example binds to the properties shown\npreviously:\n\n[source,java,indent=0]\n----\n\t@ConfigurationProperties(prefix="my")\n\tpublic class Config {\n\n\t\tprivate List<String> servers = new ArrayList<String>();\n\n\t\tpublic List<String> getServers() {\n\t\t\treturn this.servers;\n\t\t}\n\t}\n----\n\n\n\n[[boot-features-external-config-exposing-yaml-to-spring]]\n==== Exposing YAML as Properties in the Spring Environment\nThe `YamlPropertySourceLoader` class can be used to expose YAML as a `PropertySource` in\nthe Spring `Environment`. Doing so lets you use the `@Value` annotation with placeholders\nsyntax to access YAML properties.\n\n\n\n[[boot-features-external-config-multi-profile-yaml]]\n==== Multi-profile YAML Documents\nYou can specify multiple profile-specific YAML documents in a single file by using a\n`spring.profiles` key to indicate when the document applies, as shown in the following\nexample:\n\n[source,yaml,indent=0]\n----\n\tserver:\n\t\taddress: 192.168.1.100\n\t---\n\tspring:\n\t\tprofiles: development\n\tserver:\n\t\taddress: 127.0.0.1\n\t---\n\tspring:\n\t\tprofiles: production\n\tserver:\n\t\taddress: 192.168.1.120\n----\n\nIn the preceding example, if the `development` profile is active, the `server.address`\nproperty is `127.0.0.1`. Similarly, if the `production` profile is active, the\n`server.address` property is `192.168.1.120`. If the `development` and `production`\nprofiles are *not* enabled, then the value for the property is `192.168.1.100`.\n\nIf none are explicitly active when the application context starts, the default profiles\nare activated. So, in the following YAML, we set a value for `spring.security.user.password`\nthat is available *only* in the "default" profile:\n\n[source,yaml,indent=0]\n----\n\tserver:\n\t  port: 8000\n\t---\n\tspring:\n\t  profiles: default\n\t  security:\n\t    user:\n\t      password: weak\n----\n\nWhereas, in the following example, the password is always set because it is not attached\nto any profile, and it would have to be explicitly reset in all other profiles as\nnecessary:\n\n[source,yaml,indent=0]\n----\n\tserver:\n\t  port: 8000\n\tspring:\n\t  security:\n\t    user:\n\t      password: weak\n----\n\nSpring profiles designated by using the `spring.profiles` element may optionally be\nnegated by using the `!` character. If both negated and non-negated profiles are\nspecified for a single document, at least one non-negated profile must match, and no\nnegated profiles may match.\n\n\n\n[[boot-features-external-config-yaml-shortcomings]]\n==== YAML Shortcomings\nYAML files cannot be loaded by using the `@PropertySource` annotation. So, in the case\nthat you need to load values that way, you need to use a properties file.\n\n\n\n[[boot-features-external-config-typesafe-configuration-properties]]\n=== Type-safe Configuration Properties\nUsing the `@Value("${property}")` annotation to inject configuration properties can\nsometimes be cumbersome, especially if you are working with multiple properties or your\ndata is hierarchical in nature. Spring Boot provides an alternative method of working\nwith properties that lets strongly typed beans govern and validate the configuration of\nyour application, as shown in the following example:\n\n[source,java,indent=0]\n----\n\tpackage com.example;\n\n\timport java.net.InetAddress;\n\timport java.util.ArrayList;\n\timport java.util.Collections;\n\timport java.util.List;\n\n\timport org.springframework.boot.context.properties.ConfigurationProperties;\n\n\t@ConfigurationProperties("acme")\n\tpublic class AcmeProperties {\n\n\t\tprivate boolean enabled;\n\n\t\tprivate InetAddress remoteAddress;\n\n\t\tprivate final Security security = new Security();\n\n\t\tpublic boolean isEnabled() { ... }\n\n\t\tpublic void setEnabled(boolean enabled) { ... }\n\n\t\tpublic InetAddress getRemoteAddress() { ... }\n\n\t\tpublic void setRemoteAddress(InetAddress remoteAddress) { ... }\n\n\t\tpublic Security getSecurity() { ... }\n\n\t\tpublic static class Security {\n\n\t\t\tprivate String username;\n\n\t\t\tprivate String password;\n\n\t\t\tprivate List<String> roles = new ArrayList<>(Collections.singleton("USER"));\n\n\t\t\tpublic String getUsername() { ... }\n\n\t\t\tpublic void setUsername(String username) { ... }\n\n\t\t\tpublic String getPassword() { ... }\n\n\t\t\tpublic void setPassword(String password) { ... }\n\n\t\t\tpublic List<String> getRoles() { ... }\n\n\t\t\tpublic void setRoles(List<String> roles) { ... }\n\n\t\t}\n\t}\n----\n\nThe preceding POJO defines the following properties:\n\n* `acme.enabled`, with a value of `false` by default.\n* `acme.remote-address`, with a type that can be coerced from `String`.\n* `acme.security.username`, with a nested "security" object whose name is determined by\nthe name of the property. In particular, the return type is not used at all there and\ncould have been `SecurityProperties`.\n* `acme.security.password`.\n* `acme.security.roles`, with a collection of `String`.\n\n[NOTE]\n====\nGetters and setters are usually mandatory, since binding is through standard Java Beans\nproperty descriptors, just like in Spring MVC. A setter may be omitted in the following\ncases:\n\n* Maps, as long as they are initialized, need a getter but not necessarily a setter,\nsince they can be mutated by the binder.\n* Collections and arrays can be accessed either through an index (typically with YAML) or\nby using a single comma-separated value (properties). In the latter case, a setter is\nmandatory. We recommend to always add a setter for such types. If you initialize a\ncollection, make sure it is not immutable (as in the preceding example).\n* If nested POJO properties are initialized (like the `Security` field in the preceding\nexample), a setter is not required. If you want the binder to create the instance on the\nfly by using its default constructor, you need a setter.\n\nSome people use Project Lombok to add getters and setters automatically. Make sure that\nLombok does not generate any particular constructor for such a type, as it is used\nautomatically by the container to instantiate the object.\n\nFinally, only standard Java Bean properties are considered and binding on static\nproperties is not supported.\n====\n\nTIP: See also the <<boot-features-external-config-vs-value,differences between `@Value`\nand `@ConfigurationProperties`>>.\n\nYou also need to list the properties classes to register in the\n`@EnableConfigurationProperties` annotation, as shown in the following example:\n\n[source,java,indent=0]\n----\n\t@Configuration\n\t@EnableConfigurationProperties(AcmeProperties.class)\n\tpublic class MyConfiguration {\n\t}\n----\n\n[NOTE]\n====\nWhen the `@ConfigurationProperties` bean is registered that way, the bean has a\nconventional name: `<prefix>-<fqn>`, where `<prefix>` is the environment key prefix\nspecified in the `@ConfigurationProperties` annotation and `<fqn>` is the fully qualified\nname of the bean. If the annotation does not provide any prefix, only the fully qualified\nname of the bean is used.\n\nThe bean name in the example above is `acme-com.example.AcmeProperties`.\n====\n\nEven if the preceding configuration creates a regular bean for `AcmeProperties`, we\nrecommend that `@ConfigurationProperties` only deal with the environment and, in\nparticular, does not inject other beans from the context. Having said that, the\n`@EnableConfigurationProperties` annotation is _also_ automatically applied to your\nproject so that any _existing_ bean annotated with `@ConfigurationProperties` is\nconfigured from the `Environment`. You could shortcut `MyConfiguration` by making sure\n`AcmeProperties` is already a bean, as shown in the following example:\n\n[source,java,indent=0]\n----\n\t@Component\n\t@ConfigurationProperties(prefix="acme")\n\tpublic class AcmeProperties {\n\n\t\t// ... see the preceding example\n\n\t}\n----\n\nThis style of configuration works particularly well with the `SpringApplication` external\nYAML configuration, as shown in the following example:\n\n[source,yaml,indent=0]\n----\n\t# application.yml\n\n\tacme:\n\t\tremote-address: 192.168.1.1\n\t\tsecurity:\n\t\t\tusername: admin\n\t\t\troles:\n\t\t\t  - USER\n\t\t\t  - ADMIN\n\n\t# additional configuration as required\n----\n\nTo work with `@ConfigurationProperties` beans, you can inject them in the same way\nas any other bean, as shown in the following example:\n\n[source,java,indent=0]\n----\n\t@Service\n\tpublic class MyService {\n\n\t\tprivate final AcmeProperties properties;\n\n\t\t@Autowired\n\t\tpublic MyService(AcmeProperties properties) {\n\t\t    this.properties = properties;\n\t\t}\n\n\t \t//...\n\n\t\t@PostConstruct\n\t\tpublic void openConnection() {\n\t\t\tServer server = new Server(this.properties.getRemoteAddress());\n\t\t\t// ...\n\t\t}\n\n\t}\n----\n\nTIP: Using `@ConfigurationProperties` also lets you generate metadata files that can be\nused by IDEs to offer auto-completion for your own keys. See the\n<<configuration-metadata>> appendix for details.\n\n\n\n[[boot-features-external-config-3rd-party-configuration]]\n==== Third-party Configuration\nAs well as using `@ConfigurationProperties` to annotate a class, you can also use it on\npublic `@Bean` methods. Doing so can be particularly useful when you want to bind\nproperties to third-party components that are outside of your control.\n\nTo configure a bean from the `Environment` properties, add `@ConfigurationProperties` to\nits bean registration, as shown in the following example:\n\n[source,java,indent=0]\n----\n\t@ConfigurationProperties(prefix = "another")\n\t@Bean\n\tpublic AnotherComponent anotherComponent() {\n\t\t...\n\t}\n----\n\nAny property defined with the `another` prefix is mapped onto that `AnotherComponent` bean\nin manner similar to the preceding `AcmeProperties` example.\n\n\n\n[[boot-features-external-config-relaxed-binding]]\n==== Relaxed Binding\nSpring Boot uses some relaxed rules for binding `Environment` properties to\n`@ConfigurationProperties` beans, so there does not need to be an exact match between the\n`Environment` property name and the bean property name.  Common examples where this is\nuseful include dash-separated environment properties (for example, `context-path` binds\nto `contextPath`), and capitalized environment properties (for example, `PORT` binds to\n`port`).\n\nFor example, consider the following `@ConfigurationProperties` class:\n\n[source,java,indent=0]\n----\n\t@ConfigurationProperties(prefix="acme.my-project.person")\n\tpublic class OwnerProperties {\n\n\t\tprivate String firstName;\n\n\t\tpublic String getFirstName() {\n\t\t\treturn this.firstName;\n\t\t}\n\n\t\tpublic void setFirstName(String firstName) {\n\t\t\tthis.firstName = firstName;\n\t\t}\n\n\t}\n----\n\nIn the preceding example, the following properties names can all be used:\n\n.relaxed binding\n[cols="1,4"]\n|===\n| Property | Note\n\n|`acme.my-project.person.first-name`\n|Kebab case, which is recommended for use in `.properties` and `.yml` files.\n\n|`acme.myProject.person.firstName`\n|Standard camel case syntax.\n\n|`acme.my_project.person.first_name`\n|Underscore notation, which is an alternative format for use in `.properties` and `.yml`\nfiles.\n\n|`ACME_MYPROJECT_PERSON_FIRSTNAME`\n|Upper case format, which is recommended when using system environment variables.\n|===\n\nNOTE: The `prefix` value for the annotation _must_ be in kebab case (lowercase and\nseparated by `-`, such as `acme.my-project.person`).\n\n.relaxed binding rules per property source\n[cols="2,4,4"]\n|===\n| Property Source | Simple | List\n\n|Properties Files\n|Camel case, kebab case, or underscore notation\n|Standard list syntax using `[ ]` or comma-separated values\n\n|YAML Files\n|Camel case, kebab case, or underscore notation\n|Standard YAML list syntax or comma-separated values\n\n|Environment Variables\n|Upper case format with underscore as the delimiter. `_` should not be used within a\nproperty name\n|Numeric values surrounded by underscores, such as `MY_ACME_1_OTHER = my.acme[1].other`\n\n|System properties\n|Camel case, kebab case, or underscore notation\n|Standard list syntax using `[ ]` or comma-separated values\n|===\n\nTIP: We recommend that, when possible, properties are stored in lower-case kebab format,\nsuch as `my.property-name=acme`.\n\nWhen binding to `Map` properties, if the `key` contains anything other than lowercase\nalpha-numeric characters or `-`, you need to use the bracket notation so that the original\nvalue is preserved. If the key is not surrounded by `[]`, any characters that are not alpha-numeric\nor `-` are removed. For example, consider binding the following properties to a `Map`:\n\n[source,yaml,indent=0]\n----\n\tacme:\n\t  map:\n\t    "[/key1]": value1\n\t    "[/key2]": value2\n\t    /key3: value3\n\n----\n\nThe properties above will bind to a `Map` with `/key1`, `/key2` and `key3` as the keys in the map.\n\n\n[[boot-features-external-config-complex-type-merge]]\n==== Merging Complex Types\nWhen lists are configured in more than one place, overriding works by replacing the entire\nlist.\n\nFor example, assume a `MyPojo` object with `name` and `description` attributes that are\n`null` by default. The following example exposes a list of `MyPojo` objects from\n`AcmeProperties`:\n\n[source,java,indent=0]\n----\n\t@ConfigurationProperties("acme")\n\tpublic class AcmeProperties {\n\n\t\tprivate final List<MyPojo> list = new ArrayList<>();\n\n\t\tpublic List<MyPojo> getList() {\n\t\t\treturn this.list;\n\t\t}\n\n\t}\n----\n\nConsider the following configuration:\n\n[source,yaml,indent=0]\n----\n\tacme:\n\t  list:\n\t    - name: my name\n\t      description: my description\n\t---\n\tspring:\n\t  profiles: dev\n\tacme:\n\t  list:\n\t    - name: my another name\n----\n\nIf the `dev` profile is not active, `AcmeProperties.list` contains one `MyPojo` entry,\nas previously defined. If the `dev` profile is enabled, however, the `list` _still_\ncontains only one entry (with a name of `my another name` and a description of `null`).\nThis configuration _does not_ add a second `MyPojo` instance to the list, and it does not\nmerge the items.\n\nWhen a `List` is specified in multiple profiles, the one with the highest priority\n(and only that one) is used. Consider the following example:\n\n[source,yaml,indent=0]\n----\n\tacme:\n\t  list:\n\t    - name: my name\n\t      description: my description\n\t    - name: another name\n\t      description: another description\n\t---\n\tspring:\n\t  profiles: dev\n\tacme:\n\t  list:\n\t    - name: my another name\n----\n\nIn the preceding example, if the `dev` profile is active, `AcmeProperties.list` contains\n_one_ `MyPojo` entry (with a name of `my another name` and a description of `null`).\nFor YAML, both comma-separated lists and YAML lists can be used for\ncompletely overriding the contents of the list.\n\nFor `Map` properties, you can bind with property values drawn from multiple sources. However,\nfor the same property in multiple sources, the one with the highest priority is used.\nThe following example exposes a `Map<String, MyPojo>` from `AcmeProperties`:\n\n[source,java,indent=0]\n----\n\t@ConfigurationProperties("acme")\n\tpublic class AcmeProperties {\n\n\t\tprivate final Map<String, MyPojo> map = new HashMap<>();\n\n\t\tpublic Map<String, MyPojo> getMap() {\n\t\t\treturn this.map;\n\t\t}\n\n\t}\n----\n\nConsider the following configuration:\n\n[source,yaml,indent=0]\n----\n\tacme:\n\t  map:\n\t    key1:\n\t      name: my name 1\n\t      description: my description 1\n\t---\n\tspring:\n\t  profiles: dev\n\tacme:\n\t  map:\n\t    key1:\n\t      name: dev name 1\n\t    key2:\n\t      name: dev name 2\n\t      description: dev description 2\n----\n\nIf the `dev` profile is not active, `AcmeProperties.map` contains one entry with key `key1`\n(with a name of `my name 1` and a description of `my description 1`).\nIf the `dev` profile is enabled, however, `map` contains two entries with keys `key1`\n(with a name of `dev name 1` and a description of `my description 1`) and\n`key2` (with a name of `dev name 2` and a description of `dev description 2`).\n\nNOTE: The preceding merging rules apply to properties from all property sources and not just\nYAML files.\n\n[[boot-features-external-config-conversion]]\n==== Properties Conversion\nSpring Boot attempts to coerce the external application properties to the right type when\nit binds to the `@ConfigurationProperties` beans. If you need custom type conversion, you\ncan provide a `ConversionService` bean (with a bean named `conversionService`) or custom\nproperty editors (through a `CustomEditorConfigurer` bean) or custom `Converters` (with\nbean definitions annotated as `@ConfigurationPropertiesBinding`).\n\nNOTE: As this bean is requested very early during the application lifecycle, make sure to\nlimit the dependencies that your `ConversionService` is using. Typically, any dependency\nthat you require may not be fully initialized at creation time. You may want to rename\nyour custom `ConversionService` if it is not required for configuration keys coercion and\nonly rely on custom converters qualified with `@ConfigurationPropertiesBinding`.\n\n\n\n[[boot-features-external-config-conversion-duration]]\n===== Converting durations\nSpring Boot has dedicated support for expressing durations. If you expose a\n`java.time.Duration` property, the following formats in application properties are\navailable:\n\n* A regular `long` representation (using milliseconds as the default unit unless a\n`@DurationUnit` has been specified)\n* The standard ISO-8601 format\n{java-javadoc}/java/time/Duration.html#parse-java.lang.CharSequence-[used by\n`java.util.Duration`]\n* A more readable format where the value and the unit are coupled (e.g. `10s` means 10\nseconds)\n\nConsider the following example:\n\n[source,java,indent=0]\n----\ninclude::{code-examples}/context/properties/bind/AppSystemProperties.java[tag=example]\n----\n\nTo specify a session timeout of 30 seconds, `30`, `PT30S` and `30s` are all equivalent. A\nread timeout of 500ms can be specified in any of the following form: `500`, `PT0.5S` and\n`500ms`.\n\nYou can also use any of the supported unit. These are:\n\n* `ns` for nanoseconds\n* `us` for microseconds\n* `ms` for milliseconds\n* `s` for seconds\n* `m` for minutes\n* `h` for hours\n* `d` for days\n\nThe default unit is milliseconds and can be overridden using `@DurationUnit` as illustrated\nin the sample above.\n\nTIP: If you are upgrading from a previous version that is simply using `Long` to express\nthe duration, make sure to define the unit (using `@DurationUnit`) if it isn\'t\nmilliseconds alongside the switch to `Duration`. Doing so gives a transparent upgrade path\nwhile supporting a much richer format.\n\n\n\n[[boot-features-external-config-validation]]\n==== @ConfigurationProperties Validation\nSpring Boot attempts to validate `@ConfigurationProperties` classes whenever they are\nannotated with Spring\'s `@Validated` annotation. You can use JSR-303 `javax.validation`\nconstraint annotations directly on your configuration class. To do so, ensure that a\ncompliant JSR-303 implementation is on your classpath and then add constraint annotations\nto your fields, as shown in the following example:\n\n[source,java,indent=0]\n----\n\t@ConfigurationProperties(prefix="acme")\n\t@Validated\n\tpublic class AcmeProperties {\n\n\t\t@NotNull\n\t\tprivate InetAddress remoteAddress;\n\n\t\t// ... getters and setters\n\n\t}\n----\n\nTIP: You can also trigger validation by annotating the `@Bean` method that creates the\nconfiguration properties with `@Validated`.\n\nAlthough nested properties will also be validated when bound, it\'s good practice to\nalso annotate the associated field as `@Valid`. This ensure that validation is triggered\neven if no nested properties are found. The following example builds on the preceding\n`AcmeProperties` example:\n\n[source,java,indent=0]\n----\n\t@ConfigurationProperties(prefix="acme")\n\t@Validated\n\tpublic class AcmeProperties {\n\n\t\t@NotNull\n\t\tprivate InetAddress remoteAddress;\n\n\t\t@Valid\n\t\tprivate final Security security = new Security();\n\n\t\t// ... getters and setters\n\n\t\tpublic static class Security {\n\n\t\t\t@NotEmpty\n\t\t\tpublic String username;\n\n\t\t\t// ... getters and setters\n\n\t\t}\n\n\t}\n----\n\nYou can also add a custom Spring `Validator` by creating a bean definition called\n`configurationPropertiesValidator`. The `@Bean` method should be declared `static`. The\nconfiguration properties validator is created very early in the application\'s lifecycle,\nand declaring the `@Bean` method as static lets the bean be created without having to\ninstantiate the `@Configuration` class. Doing so avoids any problems that may be caused\nby early instantiation. There is a\n{github-code}/spring-boot-samples/spring-boot-sample-property-validation[property\nvalidation sample] that shows how to set things up.\n\nTIP: The `spring-boot-actuator` module includes an endpoint that exposes all\n`@ConfigurationProperties` beans. Point your web browser to\n`/actuator/configprops` or use the equivalent JMX endpoint. See the\n"<<production-ready-features.adoc#production-ready-endpoints, Production ready features>>"\nsection for details.\n\n\n\n[[boot-features-external-config-vs-value]]\n==== @ConfigurationProperties vs. @Value\nThe `@Value` annotation is a core container feature, and it does not provide the same\nfeatures as type-safe configuration properties. The following table summarizes the\nfeatures that are supported by `@ConfigurationProperties` and `@Value`:\n\n[cols="4,2,2"]\n|===\n|Feature |`@ConfigurationProperties` |`@Value`\n\n| <<boot-features-external-config-relaxed-binding,Relaxed binding>>\n| Yes\n| No\n\n| <<appendix-configuration-metadata.adoc#configuration-metadata,Meta-data support>>\n| Yes\n| No\n\n| `SpEL` evaluation\n| No\n| Yes\n|===\n\nIf you define a set of configuration keys for your own components, we recommend you\ngroup them in a POJO annotated with `@ConfigurationProperties`. You should also be aware\nthat, since `@Value` does not support relaxed binding, it is not a good candidate if you\nneed to provide the value by using environment variables.\n\nFinally, while you can write a `SpEL` expression in `@Value`, such expressions are not\nprocessed from <<boot-features-external-config-application-property-files,application\nproperty files>>.\n\n\n\n[[boot-features-profiles]]\n== Profiles\nSpring Profiles provide a way to segregate parts of your application configuration and\nmake it be available only in certain environments.  Any `@Component` or `@Configuration`\ncan be marked with `@Profile` to limit when it is loaded, as shown in the following\nexample:\n\n[source,java,indent=0]\n----\n\t@Configuration\n\t@Profile("production")\n\tpublic class ProductionConfiguration {\n\n\t\t// ...\n\n\t}\n----\n\nYou can use a `spring.profiles.active` `Environment` property to specify which profiles\nare active. You can specify the property in any of the ways described earlier in this\nchapter. For example, you could include it in your `application.properties`, as shown in\nthe following example:\n\n[source,properties,indent=0]\n----\n\tspring.profiles.active=dev,hsqldb\n----\n\nYou could also specify it on the command line by using the following switch:\n`--spring.profiles.active=dev,hsqldb`.\n\n\n\n[[boot-features-adding-active-profiles]]\n=== Adding Active Profiles\nThe `spring.profiles.active` property follows the same ordering rules as other\nproperties: The highest `PropertySource` wins. This means that you can specify active\nprofiles in `application.properties` and then *replace* them by using the command line\nswitch.\n\nSometimes, it is useful to have profile-specific properties that *add* to the active\nprofiles rather than replace them. The `spring.profiles.include` property can be used to\nunconditionally add active profiles. The `SpringApplication` entry point also has a Java\nAPI for setting additional profiles (that is, on top of those activated by the\n`spring.profiles.active` property). See the `setAdditionalProfiles()` method in\n{dc-spring-boot}/SpringApplication.html[SpringApplication].\n\nFor example, when an application with the following properties is run by using the\nswitch, `--spring.profiles.active=prod`, the `proddb` and `prodmq` profiles are also\nactivated:\n\n[source,yaml,indent=0]\n----\n\t---\n\tmy.property: fromyamlfile\n\t---\n\tspring.profiles: prod\n\tspring.profiles.include:\n\t  - proddb\n\t  - prodmq\n----\n\nNOTE: Remember that the `spring.profiles` property can be defined in a YAML document to\ndetermine when this particular document is included in the configuration. See\n<<howto-change-configuration-depending-on-the-environment>> for more details.\n\n\n\n[[boot-features-programmatically-setting-profiles]]\n=== Programmatically Setting Profiles\nYou can programmatically set active profiles by calling\n`SpringApplication.setAdditionalProfiles(...)` before your application runs. It is also\npossible to activate profiles by using Spring\'s `ConfigurableEnvironment` interface.\n\n\n\n[[boot-features-profile-specific-configuration]]\n=== Profile-specific Configuration Files\nProfile-specific variants of both `application.properties` (or `application.yml`) and\nfiles referenced through `@ConfigurationProperties` are considered as files and loaded.\nSee "<<boot-features-external-config-profile-specific-properties>>" for details.\n\n\n\n[[boot-features-logging]]\n== Logging\nSpring Boot uses http://commons.apache.org/logging[Commons Logging] for all internal\nlogging but leaves the underlying log implementation open. Default configurations are\nprovided for\n{java-javadoc}/java/util/logging/package-summary.html[Java Util\nLogging], http://logging.apache.org/log4j/2.x/[Log4J2], and\nhttp://logback.qos.ch/[Logback]. In each case, loggers are pre-configured to use console\noutput with optional file output also available.\n\nBy default, if you use the "`Starters`", Logback is used for logging. Appropriate Logback\nrouting is also included to ensure that dependent libraries that use Java Util Logging,\nCommons Logging, Log4J, or SLF4J all work correctly.\n\nTIP: There are a lot of logging frameworks available for Java. Do not worry if the above\nlist seems confusing. Generally, you do not need to change your logging dependencies and\nthe Spring Boot defaults work just fine.\n\n\n\n[[boot-features-logging-format]]\n=== Log Format\nThe default log output from Spring Boot resembles the following example:\n\n[indent=0]\n----\n2014-03-05 10:57:51.112  INFO 45469 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet Engine: Apache Tomcat/7.0.52\n2014-03-05 10:57:51.253  INFO 45469 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext\n2014-03-05 10:57:51.253  INFO 45469 --- [ost-startStop-1] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1358 ms\n2014-03-05 10:57:51.698  INFO 45469 --- [ost-startStop-1] o.s.b.c.e.ServletRegistrationBean        : Mapping servlet: \'dispatcherServlet\' to [/]\n2014-03-05 10:57:51.702  INFO 45469 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: \'hiddenHttpMethodFilter\' to: [/*]\n----\n\nThe following items are output:\n\n* Date and Time: Millisecond precision and easily sortable.\n* Log Level: `ERROR`, `WARN`, `INFO`, `DEBUG`, or `TRACE`.\n* Process ID.\n* A `---` separator to distinguish the start of actual log messages.\n* Thread name: Enclosed in square brackets (may be truncated for console output).\n* Logger name: This is usually the source class name (often abbreviated).\n* The log message.\n\nNOTE: Logback does not have a `FATAL` level. It is mapped to `ERROR`.\n\n\n[[boot-features-logging-console-output]]\n=== Console Output\nThe default log configuration echoes messages to the console as they are written. By\ndefault, `ERROR`-level, `WARN`-level, and `INFO`-level messages are logged. You can also\nenable a "`debug`" mode by starting your application with a `--debug` flag.\n\n[indent=0]\n----\n\t$ java -jar myapp.jar --debug\n----\n\nNOTE: You can also specify `debug=true` in your `application.properties`.\n\nWhen the debug mode is enabled, a selection of core loggers (embedded container,\nHibernate, and Spring Boot) are configured to output more information. Enabling the debug\nmode does _not_ configure your application to log all messages with `DEBUG` level.\n\nAlternatively, you can enable a "`trace`" mode by starting your application with a\n`--trace` flag (or `trace=true` in your `application.properties`). Doing so enables trace\nlogging for a selection of core loggers (embedded container, Hibernate schema generation,\nand the whole Spring portfolio).\n\n[[boot-features-logging-color-coded-output]]\n==== Color-coded Output\nIf your terminal supports ANSI, color output is used to aid readability. You can set\n`spring.output.ansi.enabled` to a\n{dc-spring-boot}/ansi/AnsiOutput.Enabled.{dc-ext}[supported value] to override the auto\ndetection.\n\nColor coding is configured by using the `%clr` conversion word. In its simplest form, the\nconverter colors the output according to the log level, as shown in the following\nexample:\n\n[source,indent=0]\n----\n%clr(%5p)\n----\n\nThe following table describes the mapping of log levels to colors:\n\n|===\n|Level | Color\n\n|`FATAL`\n| Red\n\n|`ERROR`\n| Red\n\n|`WARN`\n| Yellow\n\n|`INFO`\n| Green\n\n|`DEBUG`\n| Green\n\n|`TRACE`\n| Green\n|===\n\nAlternatively, you can specify the color or style that should be used by providing it as\nan option to the conversion. For example, to make the text yellow, use the following\nsetting:\n\n[source,indent=0]\n----\n%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){yellow}\n----\n\nThe following colors and styles are supported:\n\n* `blue`\n* `cyan`\n* `faint`\n* `green`\n* `magenta`\n* `red`\n* `yellow`\n\n[[boot-features-logging-file-output]]\n=== File Output\nBy default, Spring Boot logs only to the console and does not write log files. If you\nwant to write log files in addition to the console output, you need to set a\n`logging.file` or `logging.path` property (for example, in your\n`application.properties`).\n\nThe following table shows how the `logging.*` properties can be used together:\n\n.Logging properties\n[cols="1,1,1,4"]\n|===\n|`logging.file` |`logging.path` |Example |Description\n\n|_(none)_\n|_(none)_\n|\n|Console only logging.\n\n|Specific file\n|_(none)_\n|`my.log`\n|Writes to the specified log file. Names can be an exact location or relative to the\ncurrent directory.\n\n|_(none)_\n|Specific directory\n|`/var/log`\n|Writes `spring.log` to the specified directory. Names can be an exact location or\nrelative to the current directory.\n|===\n\nLog files rotate when they reach 10 MB and, as with console output, `ERROR`-level,\n`WARN`-level, and `INFO`-level messages are logged by default. Size limits can be changed\nusing the `logging.file.max-size` property. Previously rotated files are archived\nindefinitely unless the `logging.file.max-history` property has been set.\n\nNOTE: The logging system is initialized early in the application lifecycle. Consequently,\nlogging properties are not found in property files loaded through `@PropertySource`\nannotations.\n\nTIP: Logging properties are independent of the actual logging infrastructure. As a\nresult, specific configuration keys (such as `logback.configurationFile` for Logback) are\nnot managed by spring Boot.\n\n\n[[boot-features-custom-log-levels]]\n=== Log Levels\nAll the supported logging systems can have the logger levels set in the Spring\n`Environment` (for example, in `application.properties`) by using\n`+logging.level.<logger-name>=<level>+` where `level` is one of TRACE, DEBUG, INFO, WARN,\nERROR, FATAL, or OFF. The `root` logger can be configured by using `logging.level.root`.\n\nThe following example shows potential logging settings in `application.properties`:\n\n[source,properties,indent=0,subs="verbatim,quotes,attributes"]\n----\n\tlogging.level.root=WARN\n\tlogging.level.org.springframework.web=DEBUG\n\tlogging.level.org.hibernate=ERROR\n----\n\n\n\n[[boot-features-custom-log-configuration]]\n=== Custom Log Configuration\nThe various logging systems can be activated by including the appropriate libraries on\nthe classpath and can be further customized by providing a suitable configuration file in\nthe root of the classpath or in a location specified by the following Spring `Environment`\nproperty: `logging.config`.\n\nYou can force Spring Boot to use a particular logging system by using the\n`org.springframework.boot.logging.LoggingSystem` system property. The value should be the\nfully qualified class name of a `LoggingSystem` implementation. You can also disable\nSpring Boot\'s logging configuration entirely by using a value of `none`.\n\nNOTE: Since logging is initialized *before* the `ApplicationContext` is created, it is\nnot possible to control logging from `@PropertySources` in Spring `@Configuration` files.\nThe only way to change the logging system or disable it entirely is via System properties.\n\nDepending on your logging system, the following files are loaded:\n\n|===\n|Logging System |Customization\n\n|Logback\n|`logback-spring.xml`, `logback-spring.groovy`, `logback.xml`, or `logback.groovy`\n\n|Log4j2\n|`log4j2-spring.xml` or `log4j2.xml`\n\n|JDK (Java Util Logging)\n|`logging.properties`\n|===\n\nNOTE: When possible, we recommend that you use the `-spring` variants for your logging\nconfiguration (for example, `logback-spring.xml` rather than `logback.xml`). If you use\nstandard configuration locations, Spring cannot completely control log initialization.\n\nWARNING: There are known classloading issues with Java Util Logging that cause problems\nwhen running from an \'executable jar\'. We recommend that you avoid it when running from\nan \'executable jar\' if at all possible.\n\nTo help with the customization, some other properties are transferred from the Spring\n`Environment` to System properties, as described in the following table:\n\n|===\n|Spring Environment |System Property |Comments\n\n|`logging.exception-conversion-word`\n|`LOG_EXCEPTION_CONVERSION_WORD`\n|The conversion word used when logging exceptions.\n\n|`logging.file`\n|`LOG_FILE`\n|If defined, it is used in the default log configuration.\n\n|`logging.file.max-size`\n|`LOG_FILE_MAX_SIZE`\n|Maximum log file size (if LOG_FILE enabled). (Only supported with the default Logback\nsetup.)\n\n|`logging.file.max-history`\n|`LOG_FILE_MAX_HISTORY`\n|Maximum number of archive log files to keep (if LOG_FILE enabled). (Only supported with\nthe default Logback setup.)\n\n|`logging.path`\n|`LOG_PATH`\n|If defined, it is used in the default log configuration.\n\n|`logging.pattern.console`\n|`CONSOLE_LOG_PATTERN`\n|The log pattern to use on the console (stdout). (Only supported with the default Logback\nsetup.)\n\n|`logging.pattern.dateformat`\n|`LOG_DATEFORMAT_PATTERN`\n|Appender pattern for log date format. (Only supported with the default Logback setup.)\n\n|`logging.pattern.file`\n|`FILE_LOG_PATTERN`\n|The log pattern to use in a file (if `LOG_FILE` is enabled). (Only supported with the\ndefault Logback setup.)\n\n|`logging.pattern.level`\n|`LOG_LEVEL_PATTERN`\n|The format to use when rendering the log level (default `%5p`). (Only supported with the\ndefault Logback setup.)\n\n|`PID`\n|`PID`\n|The current process ID (discovered if possible and when not already defined as an OS\nenvironment variable).\n|===\n\nAll the supported logging systems can consult System properties when parsing their\nconfiguration files.  See the default configurations in `spring-boot.jar` for examples:\n\n* {github-code}/spring-boot-project/spring-boot/src/main/resources/org/springframework/boot/logging/logback/defaults.xml[Logback]\n* {github-code}/spring-boot-project/spring-boot/src/main/resources/org/springframework/boot/logging/log4j2/log4j2.xml[Log4j 2]\n* {github-code}/spring-boot-project/spring-boot/src/main/resources/org/springframework/boot/logging/java/logging-file.properties[Java Util logging]\n\n[TIP]\n====\nIf you want to use a placeholder in a logging property, you should use\n<<boot-features-external-config-placeholders-in-properties,Spring Boot\'s syntax>> and not\nthe syntax of the underlying framework. Notably, if you use Logback, you should use `:`\nas the delimiter between a property name and its default value and not use `:-`.\n====\n\n[TIP]\n====\n\nYou can add MDC and other ad-hoc content to log lines by overriding only the\n`LOG_LEVEL_PATTERN` (or `logging.pattern.level` with Logback). For example, if you use\n`logging.pattern.level=user:%X{user} %5p`, then the default log format contains an MDC\nentry for "user", if it exists, as shown in the following example.\n\n----\n2015-09-30 12:30:04.031 user:someone INFO 22174 --- [  nio-8080-exec-0] demo.Controller\nHandling authenticated request\n----\n====\n\n\n\n[[boot-features-logback-extensions]]\n=== Logback Extensions\nSpring Boot includes a number of extensions to Logback that can help with advanced\nconfiguration. You can use these extensions in your `logback-spring.xml` configuration\nfile.\n\nNOTE: Because the standard `logback.xml` configuration file is loaded too early, you\ncannot use extensions in it. You need to either use `logback-spring.xml` or define a\n`logging.config` property.\n\nWARNING: The extensions cannot be used with Logback\'s\nhttp://logback.qos.ch/manual/configuration.html#autoScan[configuration scanning]. If you\nattempt to do so, making changes to the configuration file results in an error similar to\none of the following being logged:\n\n----\nERROR in ch.qos.logback.core.joran.spi.Interpreter@4:71 - no applicable action for [springProperty], current ElementPath is [[configuration][springProperty]]\nERROR in ch.qos.logback.core.joran.spi.Interpreter@4:71 - no applicable action for [springProfile], current ElementPath is [[configuration][springProfile]]\n----\n\n\n\n==== Profile-specific Configuration\nThe `<springProfile>` tag lets you optionally include or exclude sections of\nconfiguration based on the active Spring profiles. Profile sections are supported\nanywhere within the `<configuration>` element. Use the `name` attribute to specify which\nprofile accepts the configuration. Multiple profiles can be specified with a\ncomma-separated list. The following listing shows three sample profiles:\n\n[source,xml,indent=0]\n----\n\t<springProfile name="staging">\n\t\t<!-- configuration to be enabled when the "staging" profile is active -->\n\t</springProfile>\n\n\t<springProfile name="dev, staging">\n\t\t<!-- configuration to be enabled when the "dev" or "staging" profiles are active -->\n\t</springProfile>\n\n\t<springProfile name="!production">\n\t\t<!-- configuration to be enabled when the "production" profile is not active -->\n\t</springProfile>\n----\n\n\n\n==== Environment Properties\nThe `<springProperty>` tag lets you expose properties from the Spring `Environment` for\nuse within Logback. Doing so can be useful if you want to access values from your\n`application.properties` file in your Logback configuration. The tag works in a similar\nway to Logback\'s standard `<property>` tag. However, rather than specifying a direct\n`value`, you specify the `source` of the property (from the `Environment`). If you need\nto store the property somewhere other than in `local` scope, you can use the `scope`\nattribute. If you need a fallback value (in case the property is not set in the\n`Environment`), you can use the `defaultValue` attribute. The following example shows how\nto expose properties for use within Logback:\n\n[source,xml,indent=0]\n----\n\t<springProperty scope="context" name="fluentHost" source="myapp.fluentd.host"\n\t\t\tdefaultValue="localhost"/>\n\t<appender name="FLUENT" class="ch.qos.logback.more.appenders.DataFluentAppender">\n\t\t<remoteHost>${fluentHost}</remoteHost>\n\t\t...\n\t</appender>\n----\n\nNOTE: The `source` must be specified in kebab case (such as `my.property-name`).\nHowever, properties can be added to the `Environment` by using the relaxed rules.\n\n\n\n[[boot-features-json]]\n== JSON\nSpring Boot provides integration with three JSON mapping libraries:\n\n- Gson\n- Jackson\n- JSON-B\n\nJackson is the preferred and default library.\n\n\n\n[[boot-features-json-jackson]]\n=== Jackson\nAuto-configuration for Jackson is provided and Jackson is part of\n`spring-boot-starter-json`. When Jackson is on the classpath an `ObjectMapper`\nbean is automatically configured. Several configuration properties are provided for\n<<howto.adoc#howto-customize-the-jackson-objectmapper,customizing the configuration of the\n`ObjectMapper`>>.\n\n\n\n[[boot-features-json-gson]]\n=== Gson\nAuto-configuration for Gson is provided. When Gson is on the classpath a `Gson` bean is\nautomatically configured.  Several `+spring.gson.*+` configuration properties are\nprovided for customizing the configuration. To take more control, one or more\n`GsonBuilderCustomizer` beans can be used.\n\n\n\n[[boot-features-json-json-b]]\n=== JSON-B\nAuto-configuration for JSON-B is provided. When the JSON-B API and an implementation are\non the classpath a `Jsonb` bean will be automatically configured. The preferred JSON-B\nimplementation is Apache Johnzon for which dependency management is provided.\n\n\n\n[[boot-features-developing-web-applications]]\n== Developing Web Applications\nSpring Boot is well suited for web application development. You can create a\nself-contained HTTP server by using embedded Tomcat, Jetty, Undertow, or Netty. Most web\napplications use the `spring-boot-starter-web` module to get up and running quickly. You\ncan also choose to build reactive web applications by using the\n`spring-boot-starter-webflux` module.\n\nIf you have not yet developed a Spring Boot web application, you can follow the\n"Hello World!" example in the\n_<<getting-started.adoc#getting-started-first-application, Getting started>>_ section.\n\n\n\n[[boot-features-spring-mvc]]\n=== The "`Spring Web MVC Framework`"\nThe {spring-reference}web.html#mvc[Spring Web MVC framework] (often referred to as simply\n"`Spring MVC`") is a rich "`model view controller`" web framework. Spring MVC lets you\ncreate special `@Controller` or `@RestController` beans to handle incoming HTTP requests.\nMethods in your controller are mapped to HTTP by using `@RequestMapping` annotations.\n\nThe following code shows a typical `@RestController` that serves JSON data:\n\n[source,java,indent=0]\n----\n\t@RestController\n\t@RequestMapping(value="/users")\n\tpublic class MyRestController {\n\n\t\t@RequestMapping(value="/{user}", method=RequestMethod.GET)\n\t\tpublic User getUser(@PathVariable Long user) {\n\t\t\t// ...\n\t\t}\n\n\t\t@RequestMapping(value="/{user}/customers", method=RequestMethod.GET)\n\t\tList<Customer> getUserCustomers(@PathVariable Long user) {\n\t\t\t// ...\n\t\t}\n\n\t\t@RequestMapping(value="/{user}", method=RequestMethod.DELETE)\n\t\tpublic User deleteUser(@PathVariable Long user) {\n\t\t\t// ...\n\t\t}\n\n\t}\n----\n\nSpring MVC is part of the core Spring Framework, and detailed information is available in\nthe  {spring-reference}web.html#mvc[reference documentation]. There are also several\nguides that cover Spring MVC available at https://spring.io/guides.\n\n\n\n[[boot-features-spring-mvc-auto-configuration]]\n==== Spring MVC Auto-configuration\nSpring Boot provides auto-configuration for Spring MVC that works well with most\napplications.\n\nThe auto-configuration adds the following features on top of Spring\'s defaults:\n\n* Inclusion of `ContentNegotiatingViewResolver` and `BeanNameViewResolver` beans.\n* Support for serving static resources, including support for WebJars (covered\n<<boot-features-spring-mvc-static-content,later in this document>>)).\n* Automatic registration of `Converter`, `GenericConverter`, and `Formatter` beans.\n* Support for `HttpMessageConverters` (covered\n<<boot-features-spring-mvc-message-converters,later in this document>>).\n* Automatic registration of `MessageCodesResolver` (covered\n<<boot-features-spring-message-codes,later in this document>>).\n* Static `index.html` support.\n* Custom `Favicon` support (covered <<boot-features-spring-mvc-favicon,later in this\ndocument>>).\n* Automatic use of a `ConfigurableWebBindingInitializer` bean (covered\n<<boot-features-spring-mvc-web-binding-initializer,later in this document>>).\n\nIf you want to keep Spring Boot MVC features and you want to add additional\n{spring-reference}web.html#mvc[MVC configuration] (interceptors, formatters, view\ncontrollers, and other features), you can add your own `@Configuration` class of type\n`WebMvcConfigurer` but *without* `@EnableWebMvc`. If you wish to provide custom\ninstances of `RequestMappingHandlerMapping`, `RequestMappingHandlerAdapter`, or\n`ExceptionHandlerExceptionResolver`, you can declare a `WebMvcRegistrationsAdapter`\ninstance to provide such components.\n\nIf you want to take complete control of Spring MVC, you can add your own `@Configuration`\nannotated with `@EnableWebMvc`.\n\n\n[[boot-features-spring-mvc-message-converters]]\n==== HttpMessageConverters\nSpring MVC uses the `HttpMessageConverter` interface to convert HTTP requests and\nresponses. Sensible defaults are included out of the box. For example, objects can be\nautomatically converted to JSON (by using the Jackson library) or XML (by using the\nJackson XML extension, if available, or by using JAXB if the Jackson XML extension is not\navailable). By default, strings are encoded in `UTF-8`.\n\nIf you need to add or customize converters, you can use Spring Boot\'s\n`HttpMessageConverters` class, as shown in the following listing:\n\n[source,java,indent=0]\n----\n\timport org.springframework.boot.autoconfigure.web.HttpMessageConverters;\n\timport org.springframework.context.annotation.*;\n\timport org.springframework.http.converter.*;\n\n\t@Configuration\n\tpublic class MyConfiguration {\n\n\t\t@Bean\n\t\tpublic HttpMessageConverters customConverters() {\n\t\t\tHttpMessageConverter<?> additional = ...\n\t\t\tHttpMessageConverter<?> another = ...\n\t\t\treturn new HttpMessageConverters(additional, another);\n\t\t}\n\n\t}\n----\n\nAny `HttpMessageConverter` bean that is present in the context is added to the list of\nconverters. You can also override default converters in the same way.\n\n\n\n[[boot-features-json-components]]\n==== Custom JSON Serializers and Deserializers\nIf you use Jackson to serialize and deserialize JSON data, you might want to write your\nown `JsonSerializer` and `JsonDeserializer` classes. Custom serializers are usually\nhttps://github.com/FasterXML/jackson-docs/wiki/JacksonHowToCustomSerializers[registered with Jackson through\na module], but Spring Boot provides an alternative `@JsonComponent` annotation that makes\nit easier to directly register Spring Beans.\n\nYou can use the `@JsonComponent` annotation directly on `JsonSerializer` or\n`JsonDeserializer` implementations. You can also use it on classes that contain\nserializers/deserializers as inner classes, as shown in the following example:\n\n[source,java,indent=0]\n----\n\timport java.io.*;\n\timport com.fasterxml.jackson.core.*;\n\timport com.fasterxml.jackson.databind.*;\n\timport org.springframework.boot.jackson.*;\n\n\t@JsonComponent\n\tpublic class Example {\n\n\t\tpublic static class Serializer extends JsonSerializer<SomeObject> {\n\t\t\t// ...\n\t\t}\n\n\t\tpublic static class Deserializer extends JsonDeserializer<SomeObject> {\n\t\t\t// ...\n\t\t}\n\n\t}\n----\n\nAll `@JsonComponent` beans in the `ApplicationContext` are automatically registered with\nJackson. Because `@JsonComponent` is meta-annotated with `@Component`, the usual\ncomponent-scanning rules apply.\n\nSpring Boot also provides\n{sc-spring-boot}/jackson/JsonObjectSerializer.{sc-ext}[`JsonObjectSerializer`] and\n{sc-spring-boot}/jackson/JsonObjectDeserializer.{sc-ext}[`JsonObjectDeserializer`] base\nclasses that provide useful alternatives to the standard Jackson versions when\nserializing objects. See\n{dc-spring-boot}/jackson/JsonObjectSerializer.{dc-ext}[`JsonObjectSerializer`]\nand {dc-spring-boot}/jackson/JsonObjectDeserializer.{dc-ext}[`JsonObjectDeserializer`] in\nthe Javadoc for details.\n\n\n\n[[boot-features-spring-message-codes]]\n==== MessageCodesResolver\nSpring MVC has a strategy for generating error codes for rendering error messages from\nbinding errors: `MessageCodesResolver`. If you set the\n`spring.mvc.message-codes-resolver.format` property `PREFIX_ERROR_CODE` or\n`POSTFIX_ERROR_CODE`, Spring Boot creates one for you (see the enumeration in\n{spring-javadoc}/validation/DefaultMessageCodesResolver.Format.{dc-ext}[`DefaultMessageCodesResolver.Format`]).\n\n\n\n[[boot-features-spring-mvc-static-content]]\n==== Static Content\nBy default, Spring Boot serves static content from a directory called `/static` (or\n`/public` or `/resources` or `/META-INF/resources`) in the classpath or from the root of\nthe `ServletContext`.  It uses the `ResourceHttpRequestHandler` from Spring MVC so that\nyou can modify that behavior by adding your own `WebMvcConfigurer` and overriding the\n`addResourceHandlers` method.\n\nIn a stand-alone web application, the default servlet from the container is also enabled\nand acts as a fallback, serving content from the root of the `ServletContext` if Spring\ndecides not to handle it. Most of the time, this does not happen (unless you modify the\ndefault MVC configuration), because Spring can always handle requests through the\n`DispatcherServlet`.\n\nBy default, resources are mapped on `+/**+`, but you can tune that with the\n`spring.mvc.static-path-pattern` property. For instance, relocating all resources to\n`/resources/**` can be achieved as follows:\n\n[source,properties,indent=0,subs="verbatim,quotes,attributes"]\n----\n\tspring.mvc.static-path-pattern=/resources/**\n----\n\nYou can also customize the static resource locations by using the\n`spring.resources.static-locations` property (replacing the default values with a list of\ndirectory locations). The root Servlet context path, `"/"`, is automatically added as a\nlocation as well.\n\nIn addition to the "`standard`" static resource locations mentioned earlier, a special\ncase is made for https://www.webjars.org/[Webjars content]. Any resources with a path in\n`+/webjars/**+` are served from jar files if they are packaged in the Webjars format.\n\nTIP: Do not use the `src/main/webapp` directory if your application is packaged as a jar.\nAlthough this directory is a common standard, it works *only* with war packaging, and it\nis silently ignored by most build tools if you generate a jar.\n\nSpring Boot also supports the advanced resource handling features provided by Spring MVC,\nallowing use cases such as cache-busting static resources or using version agnostic URLs\nfor Webjars.\n\nTo use version agnostic URLs for Webjars, add the `webjars-locator-core` dependency.\nThen declare your Webjar. Using jQuery as an example, adding\n`"/webjars/jquery/jquery.min.js"` results in\n`"/webjars/jquery/x.y.z/jquery.min.js"`. where `x.y.z` is the Webjar version.\n\nNOTE: If you use JBoss, you need to declare the `webjars-locator-jboss-vfs`\ndependency instead of the `webjars-locator-core`. Otherwise, all Webjars resolve as a\n`404`.\n\nTo use cache busting, the following configuration configures a cache busting solution for\nall static resources, effectively adding a content hash, such as\n`<link href="/css/spring-2a2d595e6ed9a0b24f027f2b63b134d6.css"/>`, in URLs:\n\n[source,properties,indent=0,subs="verbatim,quotes,attributes"]\n----\n\tspring.resources.chain.strategy.content.enabled=true\n\tspring.resources.chain.strategy.content.paths=/**\n----\n\nNOTE: Links to resources are rewritten in templates at runtime, thanks to a\n`ResourceUrlEncodingFilter` that is auto-configured for Thymeleaf and FreeMarker. You\nshould manually declare this filter when using JSPs. Other template engines are currently\nnot automatically supported but can be with custom template macros/helpers and the use of\nthe\n{spring-javadoc}/web/servlet/resource/ResourceUrlProvider.{dc-ext}[`ResourceUrlProvider`].\n\nWhen loading resources dynamically with, for example, a JavaScript module loader,\nrenaming files is not an option. That is why other strategies are also supported and can\nbe combined. A "fixed" strategy adds a static version string in the URL without changing\nthe file name, as shown in the following example:\n\n[source,properties,indent=0,subs="verbatim,quotes,attributes"]\n----\n\tspring.resources.chain.strategy.content.enabled=true\n\tspring.resources.chain.strategy.content.paths=/**\n\tspring.resources.chain.strategy.fixed.enabled=true\n\tspring.resources.chain.strategy.fixed.paths=/js/lib/\n\tspring.resources.chain.strategy.fixed.version=v12\n----\n\nWith this configuration, JavaScript modules located under `"/js/lib/"` use a fixed\nversioning strategy (`"/v12/js/lib/mymodule.js"`), while other resources still use the\ncontent one (`<link href="/css/spring-2a2d595e6ed9a0b24f027f2b63b134d6.css"/>`).\n\nSee {sc-spring-boot-autoconfigure}/web/ResourceProperties.{sc-ext}[`ResourceProperties`]\nfor more supported options.\n\n[TIP]\n====\nThis feature has been thoroughly described in a dedicated\nhttps://spring.io/blog/2014/07/24/spring-framework-4-1-handling-static-web-resources[blog\npost] and in Spring Framework\'s\n{spring-reference}web.html#mvc-config-static-resources[reference documentation].\n====\n\n[[boot-features-spring-mvc-welcome-page]]\n==== Welcome Page\nSpring Boot supports both static and templated welcome pages. It first looks for an\n`index.html` file in the configured static content locations. If one is not found, it\nthen looks for an `index` template. If either is found, it is automatically used as the\nwelcome page of the application.\n\n\n\n[[boot-features-spring-mvc-favicon]]\n==== Custom Favicon\nSpring Boot looks for a `favicon.ico` in the configured static content locations and the\nroot of the classpath (in that order). If such a file is present, it is automatically\nused as the favicon of the application.\n\n\n[[boot-features-spring-mvc-pathmatch]]\n==== Path Matching and Content Negotiation\nSpring MVC can map incoming HTTP requests to handlers by looking at the request path and\nmatching it to the mappings defined in your application (for example, `@GetMapping`\nannotations on Controller methods).\n\nSpring Boot chooses to disable suffix pattern matching by default, which means that\nrequests like `"GET /projects/spring-boot.json"` won\'t be matched to\n`@GetMapping("/projects/spring-boot")` mappings.\nThis is considered as a\n{spring-reference}web.html#mvc-ann-requestmapping-suffix-pattern-match[best practice\nfor Spring MVC applications]. This feature was mainly useful in the past for HTTP\nclients which did not send proper "Accept" request headers; we needed to make sure\nto send the correct Content Type to the client. Nowadays, Content Negotiation\nis much more reliable.\n\nThere are other ways to deal with HTTP clients that don\'t consistently send proper\n"Accept" request headers. Instead of using suffix matching, we can use a query\nparameter to ensure that requests like `"GET /projects/spring-boot?format=json"`\nwill be mapped to `@GetMapping("/projects/spring-boot")`:\n\n[source,properties,indent=0,subs="verbatim,quotes,attributes"]\n----\n\tspring.mvc.contentnegotiation.favor-parameter=true\n\n\t# We can change the parameter name, which is "format" by default:\n\t# spring.mvc.contentnegotiation.parameter-name=myparam\n\n\t# We can also register additional file extensions/media types with:\n\tspring.mvc.contentnegotiation.media-types.markdown=text/markdown\n----\n\nIf you understand the caveats and would still like your application to use\nsuffix pattern matching, the following configuration is required:\n\n[source,properties,indent=0,subs="verbatim,quotes,attributes"]\n----\n\tspring.mvc.contentnegotiation.favor-path-extension=true\n\tspring.mvc.pathmatch.use-suffix-pattern=true\n----\n\nAlternatively, rather than open all suffix patterns, it\'s more secure to just support\nregistered suffix patterns:\n\n[source,properties,indent=0,subs="verbatim,quotes,attributes"]\n----\n\tspring.mvc.contentnegotiation.favor-path-extension=true\n\tspring.mvc.pathmatch.use-registered-suffix-pattern=true\n\n\t# You can also register additional file extensions/media types with:\n\t# spring.mvc.contentnegotiation.media-types.adoc=text/asciidoc\n----\n\n\n\n[[boot-features-spring-mvc-web-binding-initializer]]\n==== ConfigurableWebBindingInitializer\nSpring MVC uses a `WebBindingInitializer` to initialize a `WebDataBinder` for a\nparticular request. If you create your own `ConfigurableWebBindingInitializer` `@Bean`,\nSpring Boot automatically configures Spring MVC to use it.\n\n\n\n[[boot-features-spring-mvc-template-engines]]\n==== Template Engines\nAs well as REST web services, you can also use Spring MVC to serve dynamic HTML content.\nSpring MVC supports a variety of templating technologies, including Thymeleaf,\nFreeMarker, and JSPs. Also, many other templating engines include their own Spring MVC\nintegrations.\n\nSpring Boot includes auto-configuration support for the following templating engines:\n\n * https://freemarker.apache.org/docs/[FreeMarker]\n * http://docs.groovy-lang.org/docs/next/html/documentation/template-engines.html#_the_markuptemplateengine[Groovy]\n * http://www.thymeleaf.org[Thymeleaf]\n * https://mustache.github.io/[Mustache]\n\nTIP: If possible, JSPs should be avoided. There are several\n<<boot-features-jsp-limitations, known limitations>> when using them with embedded\nservlet containers.\n\nWhen you use one of these templating engines with the default configuration, your\ntemplates are picked up automatically from `src/main/resources/templates`.\n\nTIP: Depending on how you run your application, IntelliJ IDEA orders the classpath\ndifferently. Running your application in the IDE from its main method results in a\ndifferent ordering than when you run your application by using Maven or Gradle or from\nits packaged jar. This can cause Spring Boot to fail to find the templates on the\nclasspath. If you have this problem, you can reorder the classpath in the IDE to place\nthe module\'s classes and resources first. Alternatively, you can configure the template\nprefix to search every `templates` directory on the classpath, as follows:\n`classpath*:/templates/`.\n\n\n\n[[boot-features-error-handling]]\n==== Error Handling\nBy default, Spring Boot provides an `/error` mapping that handles all errors in a\nsensible way, and it is registered as a "`global`" error page in the servlet container.\nFor machine clients, it produces a JSON response with details of the error, the HTTP\nstatus, and the exception message. For browser clients, there is a "`whitelabel`" error\nview that renders the same data in HTML format (to customize it, add a `View` that\nresolves to `error`). To replace the default behavior completely, you can implement\n`ErrorController` and register a bean definition of that type or add a bean of type\n`ErrorAttributes` to use the existing mechanism but replace the contents.\n\nTIP: The `BasicErrorController` can be used as a base class for a custom\n`ErrorController`. This is particularly useful if you want to add a handler for a new\ncontent type (the default is to handle `text/html` specifically and provide a fallback\nfor everything else). To do so, extend `BasicErrorController`, add a public method with a\n`@RequestMapping` that has a `produces` attribute, and create a bean of your new type.\n\nYou can also define a class annotated with `@ControllerAdvice` to customize the JSON\ndocument to return for a particular controller and/or exception type, as shown in the\nfollowing example:\n\n[source,java,indent=0,subs="verbatim,quotes,attributes"]\n----\n\t@ControllerAdvice(basePackageClasses = AcmeController.class)\n\tpublic class AcmeControllerAdvice extends ResponseEntityExceptionHandler {\n\n\t\t@ExceptionHandler(YourException.class)\n\t\t@ResponseBody\n\t\tResponseEntity<?> handleControllerException(HttpServletRequest request, Throwable ex) {\n\t\t\tHttpStatus status = getStatus(request);\n\t\t\treturn new ResponseEntity<>(new CustomErrorType(status.value(), ex.getMessage()), status);\n\t\t}\n\n\t\tprivate HttpStatus getStatus(HttpServletRequest request) {\n\t\t\tInteger statusCode = (Integer) request.getAttribute("javax.servlet.error.status_code");\n\t\t\tif (statusCode == null) {\n\t\t\t\treturn HttpStatus.INTERNAL_SERVER_ERROR;\n\t\t\t}\n\t\t\treturn HttpStatus.valueOf(statusCode);\n\t\t}\n\n\t}\n----\n\nIn the preceding example, if `YourException` is thrown by a controller defined in the\nsame package as `AcmeController`, a JSON representation of the `CustomErrorType` POJO is\nused instead of the `ErrorAttributes` representation.\n\n\n\n[[boot-features-error-handling-custom-error-pages]]\n===== Custom Error Pages\nIf you want to display a custom HTML error page for a given status code, you can add a\nfile to an `/error` folder. Error pages can either be static HTML (that is, added under\nany of the static resource folders) or be built by using templates. The name of the file\nshould be the exact status code or a series mask.\n\nFor example, to map `404` to a static HTML file, your folder structure would be as\nfollows:\n\n[source,indent=0,subs="verbatim,quotes,attributes"]\n----\n\tsrc/\n\t +- main/\n\t     +- java/\n\t     |   + <source code>\n\t     +- resources/\n\t         +- public/\n\t             +- error/\n\t             |   +- 404.html\n\t             +- <other public assets>\n----\n\nTo map all `5xx` errors by using a FreeMarker template, your folder structure would be as\nfollows:\n\n[source,indent=0,subs="verbatim,quotes,attributes"]\n----\n\tsrc/\n\t +- main/\n\t     +- java/\n\t     |   + <source code>\n\t     +- resources/\n\t         +- templates/\n\t             +- error/\n\t             |   +- 5xx.ftl\n\t             +- <other templates>\n----\n\nFor more complex mappings, you can also add beans that implement the `ErrorViewResolver`\ninterface, as shown in the following example:\n\n[source,java,indent=0,subs="verbatim,quotes,attributes"]\n----\n\tpublic class MyErrorViewResolver implements ErrorViewResolver {\n\n\t\t@Override\n\t\tpublic ModelAndView resolveErrorView(HttpServletRequest request,\n\t\t\t\tHttpStatus status, Map<String, Object> model) {\n\t\t\t// Use the request or status to optionally return a ModelAndView\n\t\t\treturn ...\n\t\t}\n\n\t}\n----\n\n\nYou can also use regular Spring MVC features such as\n{spring-reference}web.html#mvc-exceptionhandlers[`@ExceptionHandler` methods] and\n{spring-reference}web.html#mvc-ann-controller-advice[`@ControllerAdvice`]. The\n`ErrorController` then picks up any unhandled exceptions.\n\n\n\n[[boot-features-error-handling-mapping-error-pages-without-mvc]]\n===== Mapping Error Pages outside of Spring MVC\nFor applications that do not use Spring MVC, you can use the `ErrorPageRegistrar`\ninterface to directly register `ErrorPages`. This abstraction works directly with the\nunderlying embedded servlet container and works even if you do not have a Spring MVC\n`DispatcherServlet`.\n\n\n[source,java,indent=0,subs="verbatim,quotes,attributes"]\n----\n\t@Bean\n\tpublic ErrorPageRegistrar errorPageRegistrar(){\n\t\treturn new MyErrorPageRegistrar();\n\t}\n\n\t// ...\n\n\tprivate static class MyErrorPageRegistrar implements ErrorPageRegistrar {\n\n\t\t@Override\n\t\tpublic void registerErrorPages(ErrorPageRegistry registry) {\n\t\t\tregistry.addErrorPages(new ErrorPage(HttpStatus.BAD_REQUEST, "/400"));\n\t\t}\n\n\t}\n----\n\nNOTE: If you register an `ErrorPage` with a path that ends up being handled by a `Filter`\n(as is common with some non-Spring web frameworks, like Jersey and Wicket), then the\n`Filter` has to be explicitly registered as an `ERROR` dispatcher, as shown in the\nfollowing example:\n\n[source,java,indent=0,subs="verbatim,quotes,attributes"]\n----\n\t@Bean\n\tpublic FilterRegistrationBean myFilter() {\n\t\tFilterRegistrationBean registration = new FilterRegistrationBean();\n\t\tregistration.setFilter(new MyFilter());\n\t\t...\n\t\tregistration.setDispatcherTypes(EnumSet.allOf(DispatcherType.class));\n\t\treturn registration;\n\t}\n----\n\nNote that the default `FilterRegistrationBean` does not include the `ERROR` dispatcher\ntype.\n\n\n\n[[boot-features-error-handling-websphere]]\nCAUTION:When deployed to a servlet container, Spring Boot uses its error page filter to\nforward a request with an error status to the appropriate error page. The request can only\nbe forwarded to the correct error page if the response has not already been committed. By\ndefault, WebSphere Application Server 8.0 and later commits the response upon successful\ncompletion of a servlet\'s service method. You should disable this behavior by setting\n`com.ibm.ws.webcontainer.invokeFlushAfterService` to `false`.\n\n\n\n[[boot-features-spring-hateoas]]\n==== Spring HATEOAS\nIf you develop a RESTful API that makes use of hypermedia, Spring Boot provides\nauto-configuration for Spring HATEOAS that works well with most applications. The\nauto-configuration replaces the need to use `@EnableHypermediaSupport` and registers a\nnumber of beans to ease building hypermedia-based applications, including a\n`LinkDiscoverers` (for client side support) and an `ObjectMapper` configured to correctly\nmarshal responses into the desired representation. The `ObjectMapper` is customized by\nsetting the various `spring.jackson.*` properties or, if one exists, by a\n`Jackson2ObjectMapperBuilder` bean.\n\nYou can take control of Spring HATEOAS\'s configuration by using\n`@EnableHypermediaSupport`. Note that doing so disables the `ObjectMapper` customization\ndescribed earlier.\n\n\n\n[[boot-features-cors]]\n==== CORS Support\n\nhttps://en.wikipedia.org/wiki/Cross-origin_resource_sharing[Cross-origin resource sharing]\n(CORS) is a http://www.w3.org/TR/cors/[W3C specification] implemented by\nhttps://caniuse.com/#feat=cors[most browsers] that lets you specify in a flexible\nway what kind of cross-domain requests are authorized, instead of using some less secure\nand less powerful approaches such as IFRAME or JSONP.\n\nAs of version 4.2, Spring MVC {spring-reference}web.html#cors[supports CORS].\nUsing {spring-reference}web.html#controller-method-cors-configuration[controller method\nCORS configuration] with\n{spring-javadoc}/web/bind/annotation/CrossOrigin.{dc-ext}[`@CrossOrigin`]\nannotations in your Spring Boot application does not require any specific configuration.\n{spring-reference}web.html#global-cors-configuration[Global CORS configuration] can be\ndefined by registering a `WebMvcConfigurer` bean with a customized\n`addCorsMappings(CorsRegistry)` method, as shown in the following example:\n\n[source,java,indent=0]\n----\n\t@Configuration\n\tpublic class MyConfiguration {\n\n\t\t@Bean\n\t\tpublic WebMvcConfigurer corsConfigurer() {\n\t\t\treturn new WebMvcConfigurer() {\n\t\t\t\t@Override\n\t\t\t\tpublic void addCorsMappings(CorsRegistry registry) {\n\t\t\t\t\tregistry.addMapping("/api/**");\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n----\n\n\n\n[[boot-features-webflux]]\n=== The "`Spring WebFlux Framework`"\n\nSpring WebFlux is the new reactive web framework introduced in Spring Framework 5.0.\nUnlike Spring MVC, it does not require the Servlet API, is fully asynchronous and\nnon-blocking, and implements the http://www.reactive-streams.org/[Reactive Streams]\nspecification through https://projectreactor.io/[the Reactor project].\n\nSpring WebFlux comes in two flavors: functional and annotation-based. The\nannotation-based one is quite close to the Spring MVC model, as shown in the\nfollowing example:\n\n[source,java,indent=0]\n----\n\t@RestController\n\t@RequestMapping("/users")\n\tpublic class MyRestController {\n\n\t\t@GetMapping("/{user}")\n\t\tpublic Mono<User> getUser(@PathVariable Long user) {\n\t\t\t// ...\n\t\t}\n\n\t\t@GetMapping("/{user}/customers")\n\t\tpublic Flux<Customer> getUserCustomers(@PathVariable Long user) {\n\t\t\t// ...\n\t\t}\n\n\t\t@DeleteMapping("/{user}")\n\t\tpublic Mono<User> deleteUser(@PathVariable Long user) {\n\t\t\t// ...\n\t\t}\n\n\t}\n----\n\n"`WebFlux.fn`", the functional variant, separates the routing configuration from the\nactual handling of the requests, as shown in the following example:\n\n[source,java,indent=0]\n----\n\t@Configuration\n\tpublic class RoutingConfiguration {\n\n\t\t@Bean\n\t\tpublic RouterFunction<ServerResponse> monoRouterFunction(UserHandler userHandler) {\n\t\t\treturn route(GET("/{user}").and(accept(APPLICATION_JSON)), userHandler::getUser)\n\t\t\t\t\t.andRoute(GET("/{user}/customers").and(accept(APPLICATION_JSON)), userHandler::getUserCustomers)\n\t\t\t\t\t.andRoute(DELETE("/{user}").and(accept(APPLICATION_JSON)), userHandler::deleteUser);\n\t\t}\n\n\t}\n\n\t@Component\n\tpublic class UserHandler {\n\n\t\tpublic Mono<ServerResponse> getUser(ServerRequest request) {\n\t\t\t// ...\n\t\t}\n\n\t\tpublic Mono<ServerResponse> getUserCustomers(ServerRequest request) {\n\t\t\t// ...\n\t\t}\n\n\t\tpublic Mono<ServerResponse> deleteUser(ServerRequest request) {\n\t\t\t// ...\n\t\t}\n\t}\n----\n\nWebFlux is part of the Spring Framework and detailed information is available in its\n{spring-reference}web-reactive.html#webflux-fn[reference documentation].\n\nTIP: You can define as many `RouterFunction` beans as you like to modularize the\ndefinition of the router. Beans can be ordered if you need to apply a precedence.\n\nTo get started, add the `spring-boot-starter-webflux` module to your application.\n\nNOTE: Adding both `spring-boot-starter-web` and `spring-boot-starter-webflux` modules in\nyour application results in Spring Boot auto-configuring Spring MVC, not WebFlux. This\nbehavior has been chosen because many Spring developers add `spring-boot-starter-webflux`\nto their Spring MVC application to use the reactive `WebClient`. You can still enforce\nyour choice by setting the chosen application type to\n`SpringApplication.setWebApplicationType(WebApplicationType.REACTIVE)`.\n\n\n\n[[boot-features-webflux-auto-configuration]]\n==== Spring WebFlux Auto-configuration\nSpring Boot provides auto-configuration for Spring WebFlux that works well with most\napplications.\n\nThe auto-configuration adds the following features on top of Spring\'s defaults:\n\n* Configuring codecs for `HttpMessageReader` and `HttpMessageWriter` instances (described\n<<boot-features-webflux-httpcodecs,later in this document>>).\n* Support for serving static resources, including support for WebJars (described\n<<boot-features-spring-mvc-static-content,later in this document>>).\n\nIf you want to keep Spring Boot WebFlux features and you want to add additional\n{spring-reference}web.html#web-reactive[WebFlux configuration], you can add your own\n`@Configuration` class of type `WebFluxConfigurer` but *without* `@EnableWebFlux`.\n\nIf you want to take complete control of Spring WebFlux, you can add your own\n`@Configuration` annotated with `@EnableWebFlux`.\n\n\n\n[[boot-features-webflux-httpcodecs]]\n==== HTTP Codecs with HttpMessageReaders and HttpMessageWriters\nSpring WebFlux uses the `HttpMessageReader` and `HttpMessageWriter` interfaces to convert\nHTTP requests and responses. They are configured with `CodecConfigurer` to have sensible\ndefaults by looking at the libraries available in your classpath.\n\nSpring Boot applies further customization by using `CodecCustomizer` instances. For\nexample, `spring.jackson.*` configuration keys are applied to the Jackson codec.\n\nIf you need to add or customize codecs, you can create a custom `CodecCustomizer`\ncomponent, as shown in the following example:\n\n[source,java,indent=0]\n----\n\timport org.springframework.boot.web.codec.CodecCustomizer;\n\n\t@Configuration\n\tpublic class MyConfiguration {\n\n\t\t@Bean\n\t\tpublic CodecCustomizer myCodecCustomizer() {\n\t\t\treturn codecConfigurer -> {\n\t\t\t\t// ...\n\t\t\t}\n\t\t}\n\n\t}\n----\n\nYou can also leverage <<boot-features-json-components,Boot\'s custom JSON serializers and\ndeserializers>>.\n\n\n\n[[boot-features-webflux-static-content]]\n==== Static Content\nBy default, Spring Boot serves static content from a directory called `/static` (or\n`/public` or `/resources` or `/META-INF/resources`) in the classpath. It uses the\n`ResourceWebHandler` from Spring WebFlux so that you can modify that behavior by adding\nyour own `WebFluxConfigurer` and overriding the `addResourceHandlers` method.\n\nBy default, resources are mapped on `+/**+`, but you can tune that by setting the\n`spring.webflux.static-path-pattern` property. For instance, relocating all resources to\n`/resources/**` can be achieved as follows:\n\n[source,properties,indent=0,subs="verbatim,quotes,attributes"]\n----\n\tspring.webflux.static-path-pattern=/resources/**\n----\n\nYou can also customize the static resource locations by using\n`spring.resources.static-locations`. Doing so replaces the default values with a list of\ndirectory locations. If you do so, the default welcome page detection switches to your\ncustom locations. So, if there is an `index.html` in any of your locations on startup, it\nis the home page of the application.\n\nIn addition to the "`standard`" static resource locations listed earlier, a special case\nis made for https://www.webjars.org/[Webjars content]. Any resources with a path in\n`+/webjars/**+` are served from jar files if they are packaged in the Webjars format.\n\nTIP: Spring WebFlux applications do not strictly depend on the Servlet API, so they\ncannot be deployed as war files and do not use the `src/main/webapp` directory.\n\n\n\n[[boot-features-webflux-template-engines]]\n==== Template Engines\nAs well as REST web services, you can also use Spring WebFlux to serve dynamic HTML\ncontent. Spring WebFlux supports a variety of templating technologies, including\nThymeleaf, FreeMarker, and Mustache.\n\nSpring Boot includes auto-configuration support for the following templating engines:\n\n * https://freemarker.apache.org/docs/[FreeMarker]\n * http://www.thymeleaf.org[Thymeleaf]\n * http://mustache.github.io/[Mustache]\n\nWhen you use one of these templating engines with the default configuration, your\ntemplates are picked up automatically from `src/main/resources/templates`.\n\n\n\n[[boot-features-webflux-error-handling]]\n==== Error Handling\n\nSpring Boot provides a `WebExceptionHandler` that handles all errors in a sensible way.\nIts position in the processing order is immediately before the handlers provided by\nWebFlux, which are considered last. For machine clients, it produces a JSON response\nwith details of the error, the HTTP status, and the exception message. For browser\nclients, there is a "`whitelabel`" error handler that renders the same data in HTML\nformat. You can also provide your own HTML templates to display errors (see the\n<<boot-features-webflux-error-handling-custom-error-pages,next section>>).\n\nThe first step to customizing this feature often involves using the existing mechanism\nbut replacing or augmenting the error contents. For that, you can add a bean of type\n`ErrorAttributes`.\n\nTo change the error handling behavior, you can implement `ErrorWebExceptionHandler` and\nregister a bean definition of that type. Because a `WebExceptionHandler` is quite\nlow-level, Spring Boot also provides a convenient `AbstractErrorWebExceptionHandler` to\nlet you handle errors in a WebFlux functional way, as shown in the following example:\n\n[source,java,indent=0,subs="verbatim,quotes,attributes"]\n----\n\tpublic class CustomErrorWebExceptionHandler extends AbstractErrorWebExceptionHandler {\n\n\t\t// Define constructor here\n\n\t\t@Override\n\t\tprotected RouterFunction<ServerResponse> getRoutingFunction(ErrorAttributes errorAttributes) {\n\n\t\t\treturn RouterFunctions\n\t\t\t\t\t.route(aPredicate, aHandler)\n\t\t\t\t\t.andRoute(anotherPredicate, anotherHandler);\n\t\t}\n\n\t}\n----\n\nFor a more complete picture, you can also subclass `DefaultErrorWebExceptionHandler`\ndirectly and override specific methods.\n\n\n\n[[boot-features-webflux-error-handling-custom-error-pages]]\n===== Custom Error Pages\n\nIf you want to display a custom HTML error page for a given status code, you can add a\nfile to an `/error` folder. Error pages can either be static HTML (that is, added under\nany of the static resource folders) or built with templates. The name of the file should\nbe the exact status code or a series mask.\n\nFor example, to map `404` to a static HTML file, your folder structure would be as\nfollows:\n\n[source,indent=0,subs="verbatim,quotes,attributes"]\n----\n\tsrc/\n\t +- main/\n\t     +- java/\n\t     |   + <source code>\n\t     +- resources/\n\t         +- public/\n\t             +- error/\n\t             |   +- 404.html\n\t             +- <other public assets>\n----\n\nTo map all `5xx` errors by using a Mustache template, your folder structure would be as\nfollows:\n\n[source,indent=0,subs="verbatim,quotes,attributes"]\n----\n\tsrc/\n\t +- main/\n\t     +- java/\n\t     |   + <source code>\n\t     +- resources/\n\t         +- templates/\n\t             +- error/\n\t             |   +- 5xx.mustache\n\t             +- <other templates>\n----\n\n\n\n[[boot-features-webflux-web-filters]]\n==== Web Filters\nSpring WebFlux provides a `WebFilter` interface that can be implemented to filter HTTP\nrequest-response exchanges. `WebFilter` beans found in the application context will\nbe automatically used to filter each exchange.\n\nWhere the order of the filters is important they can implement `Ordered` or be annotated\nwith `@Order`. Spring Boot auto-configuration may configure web filters for you. When it\ndoes so, the orders shown in the following table will be used:\n\n|===\n| Web Filter | Order\n\n|`MetricsWebFilter`\n|`Ordered.HIGHEST_PRECEDENCE + 1`\n\n|`WebFilterChainProxy` (Spring Security)\n|`-100`\n\n|`HttpTraceWebFilter`\n|`Ordered.LOWEST_PRECEDENCE - 10`\n\n|===\n\n\n\n[[boot-features-jersey]]\n=== JAX-RS and Jersey\nIf you prefer the JAX-RS programming model for REST endpoints, you can use one of the\navailable implementations instead of Spring MVC. https://jersey.github.io/[Jersey] 1.x and\nhttp://cxf.apache.org/[Apache CXF] work quite well out of the box if you register their\n`Servlet` or `Filter` as a `@Bean` in your application context. Jersey 2.x has some native\nSpring support, so we also provide auto-configuration support for it in Spring Boot,\ntogether with a starter.\n\nTo get started with Jersey 2.x, include the `spring-boot-starter-jersey` as a dependency\nand then you need one `@Bean` of type `ResourceConfig` in which you register all the\nendpoints, as shown in the following example:\n\n[source,java,indent=0,subs="verbatim,quotes,attributes"]\n----\n\t@Component\n\tpublic class JerseyConfig extends ResourceConfig {\n\n\t\tpublic JerseyConfig() {\n\t\t\tregister(Endpoint.class);\n\t\t}\n\n\t}\n----\n\nWARNING: Jersey\'s support for scanning executable archives is rather limited. For example,\nit cannot scan for endpoints in a package found in a <<deployment.adoc#deployment-install,\nfully executable jar file>> or in `WEB-INF/classes` when running an executable war file.\nTo avoid this limitation, the `packages` method should not be used, and endpoints should\nbe registered individually by using the `register` method, as shown in the preceding\nexample.\n\nFor more advanced customizations, you can also register an arbitrary number of beans that\nimplement `ResourceConfigCustomizer`.\n\nAll the registered endpoints should be `@Components` with HTTP resource annotations\n(`@GET` and others), as shown in the following example:\n\n[source,java,indent=0,subs="verbatim,quotes,attributes"]\n----\n\t@Component\n\t@Path("/hello")\n\tpublic class Endpoint {\n\n\t\t@GET\n\t\tpublic String message() {\n\t\t\treturn "Hello";\n\t\t}\n\n\t}\n----\n\nSince the `Endpoint` is a Spring `@Component`, its lifecycle is managed by Spring and you\ncan use the `@Autowired` annotation to inject dependencies and use the `@Value`\nannotation to inject external configuration. By default, the Jersey servlet is registered\nand mapped to `/*`. You can change the mapping by adding `@ApplicationPath` to your\n`ResourceConfig`.\n\nBy default, Jersey is set up as a Servlet in a `@Bean` of type `ServletRegistrationBean`\nnamed `jerseyServletRegistration`. By default, the servlet is initialized lazily, but you\ncan customize that behavior by setting `spring.jersey.servlet.load-on-startup`. You can\ndisable or override that bean by creating one of your own with the same name. You can\nalso use a filter instead of a servlet by setting `spring.jersey.type=filter` (in which\ncase, the `@Bean` to replace or override is `jerseyFilterRegistration`). The filter has\nan `@Order`, which you can set with `spring.jersey.filter.order`. Both the servlet and\nthe filter registrations can be given init parameters by using `spring.jersey.init.*` to\nspecify a map of properties.\n\nThere is a {github-code}/spring-boot-samples/spring-boot-sample-jersey[Jersey sample] so\nthat you can see how to set things up. There is also a\n{github-code}/spring-boot-samples/spring-boot-sample-jersey1[Jersey 1.x sample]. Note\nthat, in the Jersey 1.x sample, the spring-boot maven plugin has been configured to\nunpack some Jersey jars so that they can be scanned by the JAX-RS implementation (because\nthe sample asks for them to be scanned in its `Filter` registration). If any of your\nJAX-RS resources are packaged as nested jars, you may need to do the same.\n\n\n\n[[boot-features-embedded-container]]\n=== Embedded Servlet Container Support\nSpring Boot includes support for embedded http://tomcat.apache.org/[Tomcat],\nhttps://www.eclipse.org/jetty/[Jetty], and http://undertow.io/[Undertow] servers. Most\ndevelopers use the appropriate "`Starter`" to obtain a fully configured instance. By\ndefault, the embedded server listens for HTTP requests on port `8080`.\n\nWARNING: If you choose to use Tomcat on https://www.centos.org/[CentOS], be aware that, by\ndefault, a temporary directory is used to store compiled JSPs, file uploads, and so on.\nThis directory may be deleted by `tmpwatch` while your application is running, leading to\nfailures. To avoid this behavior, you may want to customize your `tmpwatch` configuration\nsuch that `tomcat.*` directories are not deleted or configure `server.tomcat.basedir` such\nthat embedded Tomcat uses a different location.\n\n\n\n[[boot-features-embedded-container-servlets-filters-listeners]]\n==== Servlets, Filters, and listeners\nWhen using an embedded servlet container, you can register servlets, filters, and all the\nlisteners (such as `HttpSessionListener`) from the Servlet spec, either by using Spring\nbeans or by scanning for Servlet components.\n\n\n[[boot-features-embedded-container-servlets-filters-listeners-beans]]\n===== Registering Servlets, Filters, and Listeners as Spring Beans\nAny `Servlet`, `Filter`, or servlet `*Listener` instance that is a Spring bean is\nregistered with the embedded container. This can be particularly convenient if you want\nto refer to a value from your `application.properties` during configuration.\n\nBy default, if the context contains only a single Servlet, it is mapped to `/`. In the\ncase of multiple servlet beans, the bean name is used as a path prefix. Filters map to\n`+/*+`.\n\nIf convention-based mapping is not flexible enough, you can use the\n`ServletRegistrationBean`, `FilterRegistrationBean`, and\n`ServletListenerRegistrationBean` classes for complete control.\n\nSpring Boot ships with many auto-configurations that may define Filter beans. Here are a\nfew examples of Filters and their respective order (lower order value means higher\nprecedence):\n\n|===\n| Servlet Filter | Order\n\n|`OrderedCharacterEncodingFilter`\n|`Ordered.HIGHEST_PRECEDENCE`\n\n|`WebMvcMetricsFilter`\n|`Ordered.HIGHEST_PRECEDENCE + 1`\n\n|`ErrorPageFilter`\n|`Ordered.HIGHEST_PRECEDENCE + 1`\n\n|`HttpTraceFilter`\n|`Ordered.LOWEST_PRECEDENCE - 10`\n|===\n\nIt is usually safe to leave Filter beans unordered.\n\nIf a specific order is required, you should avoid configuring a Filter that reads the\nrequest body at `Ordered.HIGHEST_PRECEDENCE`, since it might go against the character\nencoding configuration of your application. If a Servlet filter wraps the request, it\nshould be configured with an order that is less than or equal to\n`FilterRegistrationBean.REQUEST_WRAPPER_FILTER_MAX_ORDER`.\n\n\n\n[[boot-features-embedded-container-context-initializer]]\n==== Servlet Context Initialization\nEmbedded servlet containers do not directly execute the Servlet 3.0+\n`javax.servlet.ServletContainerInitializer` interface or Spring\'s\n`org.springframework.web.WebApplicationInitializer` interface. This is an intentional\ndesign decision intended to reduce the risk that third party libraries designed to run\ninside a war may break Spring Boot applications.\n\nIf you need to perform servlet context initialization in a Spring Boot application, you\nshould register a bean that implements the\n`org.springframework.boot.web.servlet.ServletContextInitializer` interface. The\nsingle `onStartup` method provides access to the `ServletContext` and, if necessary, can\neasily be used as an adapter to an existing `WebApplicationInitializer`.\n\n\n\n[[boot-features-embedded-container-servlets-filters-listeners-scanning]]\n===== Scanning for Servlets, Filters, and listeners\nWhen using an embedded container, automatic registration of classes annotated with\n`@WebServlet`, `@WebFilter`, and `@WebListener` can be enabled by using\n`@ServletComponentScan`.\n\nTIP: `@ServletComponentScan` has no effect in a standalone container, where the\ncontainer\'s built-in discovery mechanisms are used instead.\n\n\n\n[[boot-features-embedded-container-application-context]]\n==== The ServletWebServerApplicationContext\nUnder the hood, Spring Boot uses a different type of `ApplicationContext` for embedded\nservlet container support.  The `ServletWebServerApplicationContext` is a special type of\n`WebApplicationContext` that bootstraps itself by searching for a single\n`ServletWebServerFactory` bean. Usually a `TomcatServletWebServerFactory`,\n`JettyServletWebServerFactory`, or `UndertowServletWebServerFactory`\nhas been auto-configured.\n\nNOTE: You usually do not need to be aware of these implementation classes. Most\napplications are auto-configured, and the appropriate `ApplicationContext` and\n`ServletWebServerFactory` are created on your behalf.\n\n\n\n[[boot-features-customizing-embedded-containers]]\n==== Customizing Embedded Servlet Containers\nCommon servlet container settings can be configured by using Spring `Environment`\nproperties. Usually, you would define the properties in your `application.properties`\nfile.\n\nCommon server settings include:\n\n* Network settings: Listen port for incoming HTTP requests (`server.port`), interface\naddress to bind to `server.address`, and so on.\n* Session settings: Whether the session is persistent (`server.servlet.session.persistence`),\nsession timeout (`server.servlet.session.timeout`), location of session data\n(`server.servlet.session.store-dir`), and session-cookie configuration\n(`server.servlet.session.cookie.*`).\n* Error management: Location of the error page (`server.error.path`) and so on.\n* <<howto.adoc#howto-configure-ssl,SSL>>\n* <<howto.adoc#how-to-enable-http-response-compression,HTTP compression>>\n\nSpring Boot tries as much as possible to expose common settings, but this is not always\npossible. For those cases, dedicated namespaces offer server-specific customizations (see\n`server.tomcat` and `server.undertow`). For instance,\n<<howto.adoc#howto-configure-accesslogs,access logs>> can be configured with specific\nfeatures of the embedded servlet container.\n\nTIP: See the\n{sc-spring-boot-autoconfigure}/web/ServerProperties.{sc-ext}[`ServerProperties`] class\nfor a complete list.\n\n\n\n[[boot-features-programmatic-embedded-container-customization]]\n===== Programmatic Customization\nIf you need to programmatically configure your embedded servlet container, you can\nregister a Spring bean that implements the `WebServerFactoryCustomizer` interface.\n`WebServerFactoryCustomizer` provides access to the\n`ConfigurableServletWebServerFactory`, which includes numerous customization setter\nmethods. The following example shows programmatically setting the port:\n\n[source,java,indent=0]\n----\n\timport org.springframework.boot.web.server.WebServerFactoryCustomizer;\n\timport org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;\n\timport org.springframework.stereotype.Component;\n\n\t@Component\n\tpublic class CustomizationBean implements WebServerFactoryCustomizer<ConfigurableServletWebServerFactory> {\n\n\t\t@Override\n\t\tpublic void customize(ConfigurableServletWebServerFactory server) {\n\t\t\tserver.setPort(9000);\n\t\t}\n\n\t}\n----\n\nNOTE: `TomcatServletWebServerFactory`, `JettyServletWebServerFactory` and `UndertowServletWebServerFactory`\nare dedicated variants of `ConfigurableServletWebServerFactory` that have additional customization setter methods\nfor Tomcat, Jetty and Undertow respectively.\n\n[[boot-features-customizing-configurableservletwebserverfactory-directly]]\n===== Customizing ConfigurableServletWebServerFactory Directly\nIf the preceding customization techniques are too limited, you can register the\n`TomcatServletWebServerFactory`, `JettyServletWebServerFactory`, or\n`UndertowServletWebServerFactory` bean yourself.\n\n[source,java,indent=0]\n----\n\t@Bean\n\tpublic ConfigurableServletWebServerFactory webServerFactory() {\n\t\tTomcatServletWebServerFactory factory = new TomcatServletWebServerFactory();\n\t\tfactory.setPort(9000);\n\t\tfactory.setSessionTimeout(10, TimeUnit.MINUTES);\n\t\tfactory.addErrorPages(new ErrorPage(HttpStatus.NOT_FOUND, "/notfound.html"));\n\t\treturn factory;\n\t}\n----\n\nSetters are provided for many configuration options. Several protected method "`hooks`"\nare also provided should you need to do something more exotic. See the\n{dc-spring-boot}/web/servlet/server/ConfigurableServletWebServerFactory.{dc-ext}[source\ncode documentation] for details.\n\n\n[[boot-features-jsp-limitations]]\n==== JSP Limitations\nWhen running a Spring Boot application that uses an embedded servlet container (and is\npackaged as an executable archive), there are some limitations in the JSP support.\n\n* With Jetty and Tomcat, it should work if you use war packaging. An executable war will\n  work when launched with `java -jar`, and will also be deployable to any standard\n  container. JSPs are not supported when using an executable jar.\n\n* Undertow does not support JSPs.\n\n* Creating a custom `error.jsp` page does not override the default view for\n<<boot-features-error-handling,error handling>>.\n<<boot-features-error-handling-custom-error-pages,Custom error pages>> should be used\ninstead.\n\nThere is a {github-code}/spring-boot-samples/spring-boot-sample-web-jsp[JSP sample] so\nthat you can see how to set things up.\n\n\n\n[[boot-features-security]]\n== Security\nIf {spring-security}[Spring Security] is on the classpath, then web applications are\nsecured by default. Spring Boot relies on Spring Security’s content-negotiation strategy\nto determine whether to use `httpBasic` or `formLogin`. To add method-level security to a\nweb application, you can also add `@EnableGlobalMethodSecurity` with your desired\nsettings. Additional information can be found in the\n{spring-security-reference}#jc-method[Spring Security Reference Guide].\n\nThe default `UserDetailsService` has a single user. The user name is `user`, and the\npassword is random and is printed at INFO level when the application starts, as shown in\nthe following example:\n\n[indent=0]\n----\n\tUsing generated security password: 78fa095d-3f4c-48b1-ad50-e24c31d5cf35\n----\n\nNOTE: If you fine-tune your logging configuration, ensure that the\n`org.springframework.boot.autoconfigure.security` category is set to log `INFO`-level\nmessages. Otherwise, the default password is not printed.\n\nYou can change the username and password by providing a `spring.security.user.name` and\n`spring.security.user.password`.\n\nThe basic features you get by default in a web application are:\n\n* A `UserDetailsService` (or `ReactiveUserDetailsService` in case of a WebFlux application)\nbean with in-memory store and a single user with a generated password (see\n{dc-spring-boot}/autoconfigure/security/SecurityProperties.User.html[`SecurityProperties.User`]\nfor the properties of the user).\n* Form-based login or HTTP Basic security (depending on Content-Type) for the entire\napplication (including actuator endpoints if actuator is on the classpath).\n* A `DefaultAuthenticationEventPublisher` for publishing authentication events.\n\nYou can provide a different `AuthenticationEventPublisher` by adding a bean for it.\n\n\n[[boot-features-security-mvc]]\n=== MVC Security\nThe default security configuration is implemented in `SecurityAutoConfiguration` and\n`UserDetailsServiceAutoConfiguration`. `SecurityAutoConfiguration` imports\n`SpringBootWebSecurityConfiguration` for web security and\n`UserDetailsServiceAutoConfiguration` configures authentication, which is also\nrelevant in non-web applications. To switch off the default web application security\nconfiguration completely, you can add a bean of type `WebSecurityConfigurerAdapter` (doing\nso does not disable the `UserDetailsService` configuration or Actuator\'s security).\n\nTo also switch off the `UserDetailsService` configuration, you can add a bean of type\n`UserDetailsService`, `AuthenticationProvider`, or `AuthenticationManager`.\nThere are several secure applications in the {github-code}/spring-boot-samples/[Spring\nBoot samples] to get you started with common use cases.\n\nAccess rules can be overridden by adding a custom `WebSecurityConfigurerAdapter`. Spring\nBoot provides convenience methods that can be used to override access rules for actuator\nendpoints and static resources. `EndpointRequest` can be used to create a `RequestMatcher`\nthat is based on the `management.endpoints.web.base-path` property.\n`PathRequest` can be used to create a `RequestMatcher` for resources in\ncommonly used locations.\n\n\n\n[[boot-features-security-webflux]]\n=== WebFlux Security\nSimilar to Spring MVC applications, you can secure your WebFlux applications by adding\nthe `spring-boot-starter-security` dependency. The default security configuration is\nimplemented in `ReactiveSecurityAutoConfiguration` and\n`UserDetailsServiceAutoConfiguration`. `ReactiveSecurityAutoConfiguration` imports\n`WebFluxSecurityConfiguration` for web security and `UserDetailsServiceAutoConfiguration`\nconfigures authentication, which is also relevant in non-web applications. To switch off the default web application security\nconfiguration completely, you can add a bean of type `WebFilterChainProxy` (doing so does\nnot disable the `UserDetailsService` configuration or Actuator\'s security).\n\nTo also switch off the `UserDetailsService` configuration, you can add a bean of type\n`ReactiveUserDetailsService` or `ReactiveAuthenticationManager`.\n\nAccess rules can be configured by adding a custom `SecurityWebFilterChain`. Spring\nBoot provides convenience methods that can be used to override access rules for actuator\nendpoints and static resources. `EndpointRequest` can be used to create a\n`ServerWebExchangeMatcher` that is based on the `management.endpoints.web.base-path`\nproperty.\n\n`PathRequest` can be used to create a `ServerWebExchangeMatcher` for resources in\ncommonly used locations.\n\nFor example, you can customize your security configuration by adding something like:\n\n[source,java,indent=0]\n----\ninclude::{code-examples}/web/security/CustomWebFluxSecurityExample.java[tag=configuration]\n----\n\n\n\n[[boot-features-security-oauth2]]\n=== OAuth2\nhttps://oauth.net/2/[OAuth2] is a widely used authorization framework that is supported by\nSpring.\n\n\n[[boot-features-security-oauth2-client]]\n==== Client\nIf you have `spring-security-oauth2-client` on your classpath, you can take advantage of\nsome auto-configuration to make it easy to set up an OAuth2 Client. This configuration\nmakes use of the properties under `OAuth2ClientProperties`.\n\nYou can register multiple OAuth2 clients and providers under the\n`spring.security.oauth2.client` prefix, as shown in the following example:\n\n[source,properties,indent=0]\n----\n\tspring.security.oauth2.client.registration.my-client-1.client-id=abcd\n\tspring.security.oauth2.client.registration.my-client-1.client-secret=password\n\tspring.security.oauth2.client.registration.my-client-1.client-name=Client for user scope\n\tspring.security.oauth2.client.registration.my-client-1.provider=my-oauth-provider\n\tspring.security.oauth2.client.registration.my-client-1.scope=user\n\tspring.security.oauth2.client.registration.my-client-1.redirect-uri-template=http://my-redirect-uri.com\n\tspring.security.oauth2.client.registration.my-client-1.client-authentication-method=basic\n\tspring.security.oauth2.client.registration.my-client-1.authorization-grant-type=authorization_code\n\n\tspring.security.oauth2.client.registration.my-client-2.client-id=abcd\n\tspring.security.oauth2.client.registration.my-client-2.client-secret=password\n\tspring.security.oauth2.client.registration.my-client-2.client-name=Client for email scope\n\tspring.security.oauth2.client.registration.my-client-2.provider=my-oauth-provider\n\tspring.security.oauth2.client.registration.my-client-2.scope=email\n\tspring.security.oauth2.client.registration.my-client-2.redirect-uri-template=http://my-redirect-uri.com\n\tspring.security.oauth2.client.registration.my-client-2.client-authentication-method=basic\n\tspring.security.oauth2.client.registration.my-client-2.authorization-grant-type=authorization_code\n\n\tspring.security.oauth2.client.provider.my-oauth-provider.authorization-uri=http://my-auth-server/oauth/authorize\n\tspring.security.oauth2.client.provider.my-oauth-provider.token-uri=http://my-auth-server/oauth/token\n\tspring.security.oauth2.client.provider.my-oauth-provider.user-info-uri=http://my-auth-server/userinfo\n\tspring.security.oauth2.client.provider.my-oauth-provider.jwk-set-uri=http://my-auth-server/token_keys\n\tspring.security.oauth2.client.provider.my-oauth-provider.user-name-attribute=name\n----\n\nBy default, Spring Security\'s `OAuth2LoginAuthenticationFilter` only processes URLs\nmatching `/login/oauth2/code/*`. If you want to customize the `redirect-uri-template` to\nuse a different pattern, you need to provide configuration to process that custom pattern.\nFor example, you can add your own `WebSecurityConfigurerAdapter` that resembles the\nfollowing:\n\n[source,java,indent=0]\n----\npublic class OAuth2LoginSecurityConfig extends WebSecurityConfigurerAdapter {\n\n\t@Override\n\tprotected void configure(HttpSecurity http) throws Exception {\n\t\thttp\n\t\t\t.authorizeRequests()\n\t\t\t\t.anyRequest().authenticated()\n\t\t\t\t.and()\n\t\t\t.oauth2Login()\n\t\t\t\t.redirectionEndpoint()\n\t\t\t\t\t.baseUri("/custom-callback");\n\t}\n}\n----\n\nFor common OAuth2 and OpenID providers, including Google, Github, Facebook, and Okta,\nwe provide a set of provider defaults (`google`, `github`, `facebook`, and `okta`,\nrespectively).\n\nIf you do not need to customize these providers, you can set the `provider` attribute to\nthe one for which you need to infer defaults. Also, if the ID of your client matches the\ndefault supported provider, Spring Boot infers that as well.\n\nIn other words, the two configurations in the following example use the Google provider:\n\n[source,properties,indent=0]\n----\n\tspring.security.oauth2.client.registration.my-client.client-id=abcd\n\tspring.security.oauth2.client.registration.my-client.client-secret=password\n\tspring.security.oauth2.client.registration.my-client.provider=google\n\n\tspring.security.oauth2.client.registration.google.client-id=abcd\n\tspring.security.oauth2.client.registration.google.client-secret=password\n----\n\n\n\n[[boot-features-security-oauth2-server]]\n==== Server\nCurrently, Spring Security does not provide support for implementing an OAuth 2.0\nAuthorization Server or Resource Server. However, this functionality is available from\nthe https://projects.spring.io/spring-security-oauth/[Spring Security OAuth] project,\nwhich will eventually be superseded by Spring Security completely. Until then, you can\nuse the `spring-security-oauth2-autoconfigure` module to easily set up an OAuth 2.0 server;\nsee its https://docs.spring.io/spring-security-oauth2-boot[documentation] for instructions.\n\n\n\n[[boot-features-security-actuator]]\n=== Actuator Security\nFor security purposes, all actuators other than `/health` and `/info` are disabled by\ndefault. The `management.endpoints.web.exposure.include` property can be used to enable\nthe actuators.\n\nIf Spring Security is on the classpath and no other WebSecurityConfigurerAdapter is\npresent, the actuators are secured by Spring Boot auto-config. If you define a custom\n`WebSecurityConfigurerAdapter`, Spring Boot auto-config will back off and you will be in\nfull control of actuator access rules.\n\nNOTE: Before setting the `management.endpoints.web.exposure.include`, ensure that the\nexposed actuators do not contain sensitive information and/or are secured by placing them\nbehind a firewall or by something like Spring Security.\n\n\n\n[[boot-features-security-csrf]]\n==== Cross Site Request Forgery Protection\nSince Spring Boot relies on Spring Security\'s defaults, CSRF protection is turned on by\ndefault. This means that the actuator endpoints that require a `POST` (shutdown and\nloggers endpoints), `PUT` or `DELETE` will get a 403 forbidden error when the default\nsecurity configuration is in use.\n\nNOTE: We recommend disabling CSRF protection completely only if you are creating a service\nthat is used by non-browser clients.\n\nAdditional information about CSRF protection can be found in the\n{spring-security-reference}#csrf[Spring Security Reference Guide].\n\n\n\n[[boot-features-sql]]\n== Working with SQL Databases\nThe {spring-framework}[Spring Framework] provides extensive support for working with SQL\ndatabases, from direct JDBC access using `JdbcTemplate` to complete "`object relational\nmapping`" technologies such as Hibernate. {spring-data}[Spring Data] provides an\nadditional level of functionality: creating `Repository` implementations directly from\ninterfaces and using conventions to generate queries from your method names.\n\n\n\n[[boot-features-configure-datasource]]\n=== Configure a DataSource\nJava\'s `javax.sql.DataSource` interface provides a standard method of working with\ndatabase connections. Traditionally, a \'DataSource\' uses a `URL` along with some\ncredentials to establish a database connection.\n\nTIP: See <<howto.adoc#howto-configure-a-datasource,the "`How-to`" section>> for more\nadvanced examples, typically to take full control over the configuration of the\nDataSource.\n\n\n\n[[boot-features-embedded-database-support]]\n==== Embedded Database Support\nIt is often convenient to develop applications by using an in-memory embedded database.\nObviously, in-memory databases do not provide persistent storage. You need to populate\nyour database when your application starts and be prepared to throw away data when your\napplication ends.\n\nTIP: The "`How-to`" section includes a <<howto.adoc#howto-database-initialization,\nsection on how to initialize a database>>.\n\nSpring Boot can auto-configure embedded http://www.h2database.com[H2],\nhttp://hsqldb.org/[HSQL], and http://db.apache.org/derby/[Derby] databases. You need not\nprovide any connection URLs. You need only include a build dependency to the embedded\ndatabase that you want to use.\n\n[NOTE]\n====\nIf you are using this feature in your tests, you may notice that the same database is\nreused by your whole test suite regardless of the number of application contexts that you\nuse. If you want to make sure that each context has a separate embedded database, you\nshould set `spring.datasource.generate-unique-name` to `true`.\n====\n\nFor example, the typical POM dependencies would be as follows:\n\n[source,xml,indent=0]\n----\n\t<dependency>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\n\t</dependency>\n\t<dependency>\n\t\t<groupId>org.hsqldb</groupId>\n\t\t<artifactId>hsqldb</artifactId>\n\t\t<scope>runtime</scope>\n\t</dependency>\n----\n\nNOTE: You need a dependency on `spring-jdbc` for an embedded database to be\nauto-configured. In this example, it is pulled in transitively through\n`spring-boot-starter-data-jpa`.\n\nTIP: If, for whatever reason, you do configure the connection URL for an embedded\ndatabase, take care to ensure that the database\'s automatic shutdown is disabled. If you\nuse H2, you should use `DB_CLOSE_ON_EXIT=FALSE` to do so. If you use HSQLDB, you should\nensure that `shutdown=true` is not used. Disabling the database\'s automatic shutdown lets\nSpring Boot control when the database is closed, thereby ensuring that it happens once\naccess to the database is no longer needed.\n\n\n\n[[boot-features-connect-to-production-database]]\n==== Connection to a Production Database\nProduction database connections can also be auto-configured by using a pooling\n`DataSource`. Spring Boot uses the following algorithm for choosing a specific\nimplementation:\n\n. We prefer https://github.com/brettwooldridge/HikariCP[HikariCP] for its performance and\nconcurrency. If HikariCP is available, we always choose it.\n. Otherwise, if the Tomcat pooling `DataSource` is available, we use it.\n. If neither HikariCP nor the Tomcat pooling datasource are available and if\nhttps://commons.apache.org/proper/commons-dbcp/[Commons DBCP2] is available, we use it.\n\nIf you use the `spring-boot-starter-jdbc` or `spring-boot-starter-data-jpa` "`starters`",\nyou automatically get a dependency to `HikariCP`.\n\nNOTE: You can bypass that algorithm completely and specify the connection pool to use by\nsetting the `spring.datasource.type` property. This is especially important if you run\nyour application in a Tomcat container, as `tomcat-jdbc` is provided by default.\n\nTIP: Additional connection pools can always be configured manually. If you define your\nown `DataSource` bean, auto-configuration does not occur.\n\nDataSource configuration is controlled by external configuration properties in\n`+spring.datasource.*+`. For example, you might declare the following section in\n`application.properties`:\n\n[source,properties,indent=0]\n----\n\tspring.datasource.url=jdbc:mysql://localhost/test\n\tspring.datasource.username=dbuser\n\tspring.datasource.password=dbpass\n\tspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n----\n\nNOTE: You should at least specify the URL by setting the `spring.datasource.url`\nproperty. Otherwise, Spring Boot tries to auto-configure an embedded database.\n\nTIP: You often do not need to specify the `driver-class-name`, since Spring Boot can\ndeduce it for most databases from the `url`.\n\nNOTE: For a pooling `DataSource` to be created, we need to be able to verify that a valid\n`Driver` class is available, so we check for that before doing anything. In other words,\nif you set `spring.datasource.driver-class-name=com.mysql.jdbc.Driver`, then that class\nhas to be loadable.\n\nSee\n{sc-spring-boot-autoconfigure}/jdbc/DataSourceProperties.{sc-ext}[`DataSourceProperties`]\nfor more of the supported options. These are the standard options that work regardless of\nthe actual implementation. It is also possible to fine-tune implementation-specific\nsettings by using their respective prefix (`+spring.datasource.hikari.*+`,\n`+spring.datasource.tomcat.*+`, and `+spring.datasource.dbcp2.*+`). Refer to the\ndocumentation of the connection pool implementation you are using for more details.\n\nFor instance, if you use the\nhttp://tomcat.apache.org/tomcat-8.0-doc/jdbc-pool.html#Common_Attributes[Tomcat\nconnection pool], you could customize many additional settings, as shown in the following\nexample:\n\n\n[source,properties,indent=0]\n----\n\t# Number of ms to wait before throwing an exception if no connection is available.\n\tspring.datasource.tomcat.max-wait=10000\n\n\t# Maximum number of active connections that can be allocated from this pool at the same time.\n\tspring.datasource.tomcat.max-active=50\n\n\t# Validate the connection before borrowing it from the pool.\n\tspring.datasource.tomcat.test-on-borrow=true\n----\n\n\n\n[[boot-features-connecting-to-a-jndi-datasource]]\n==== Connection to a JNDI DataSource\nIf you deploy your Spring Boot application to an Application Server, you might want to\nconfigure and manage your DataSource by using your Application Server\'s built-in features\nand access it by using JNDI.\n\nThe `spring.datasource.jndi-name` property can be used as an alternative to the\n`spring.datasource.url`, `spring.datasource.username`, and `spring.datasource.password`\nproperties to access the `DataSource` from a specific JNDI location. For example, the\nfollowing section in `application.properties` shows how you can access a JBoss AS defined\n`DataSource`:\n\n[source,properties,indent=0]\n----\n\tspring.datasource.jndi-name=java:jboss/datasources/customers\n----\n\n\n\n[[boot-features-using-jdbc-template]]\n=== Using JdbcTemplate\nSpring\'s `JdbcTemplate` and `NamedParameterJdbcTemplate` classes are auto-configured, and\nyou can `@Autowire` them directly into your own beans, as shown in the following example:\n\n[source,java,indent=0]\n----\n\timport org.springframework.beans.factory.annotation.Autowired;\n\timport org.springframework.jdbc.core.JdbcTemplate;\n\timport org.springframework.stereotype.Component;\n\n\t@Component\n\tpublic class MyBean {\n\n\t\tprivate final JdbcTemplate jdbcTemplate;\n\n\t\t@Autowired\n\t\tpublic MyBean(JdbcTemplate jdbcTemplate) {\n\t\t\tthis.jdbcTemplate = jdbcTemplate;\n\t\t}\n\n\t\t// ...\n\n\t}\n----\n\nYou can customize some properties of the template by using the `spring.jdbc.template.*`\nproperties, as shown in the following example:\n\n[source,properties,indent=0]\n----\n\tspring.jdbc.template.max-rows=500\n----\n\nNOTE: The `NamedParameterJdbcTemplate` reuses the same `JdbcTemplate` instance behind the\nscenes. If more than one `JdbcTemplate` is defined and no primary candidate exists, the\n`NamedParameterJdbcTemplate` is not auto-configured.\n\n\n\n[[boot-features-jpa-and-spring-data]]\n=== JPA and "`Spring Data`"\nThe Java Persistence API is a standard technology that lets you "`map`" objects to\nrelational databases. The `spring-boot-starter-data-jpa` POM provides a quick way to get\nstarted. It provides the following key dependencies:\n\n* Hibernate: One of the most popular JPA implementations.\n* Spring Data JPA: Makes it easy to implement JPA-based repositories.\n* Spring ORMs: Core ORM support from the Spring Framework.\n\nTIP: We do not go into too many details of JPA or {spring-data}[Spring Data] here. You can\nfollow the https://spring.io/guides/gs/accessing-data-jpa/["`Accessing Data with JPA`"]\nguide from https://spring.io and read the {spring-data-jpa}[Spring Data JPA] and\nhttps://hibernate.org/orm/documentation/[Hibernate] reference documentation.\n\n\n\n[[boot-features-entity-classes]]\n==== Entity Classes\nTraditionally, JPA "`Entity`" classes are specified in a `persistence.xml` file. With\nSpring Boot, this file is not necessary and "`Entity Scanning`" is used instead. By\ndefault, all packages below your main configuration class (the one annotated with\n`@EnableAutoConfiguration` or `@SpringBootApplication`) are searched.\n\nAny classes annotated with `@Entity`, `@Embeddable`, or `@MappedSuperclass` are\nconsidered. A typical entity class resembles the following example:\n\n[source,java,indent=0]\n----\n\tpackage com.example.myapp.domain;\n\n\timport java.io.Serializable;\n\timport javax.persistence.*;\n\n\t@Entity\n\tpublic class City implements Serializable {\n\n\t\t@Id\n\t\t@GeneratedValue\n\t\tprivate Long id;\n\n\t\t@Column(nullable = false)\n\t\tprivate String name;\n\n\t\t@Column(nullable = false)\n\t\tprivate String state;\n\n\t\t// ... additional members, often include @OneToMany mappings\n\n\t\tprotected City() {\n\t\t\t// no-args constructor required by JPA spec\n\t\t\t// this one is protected since it shouldn\'t be used directly\n\t\t}\n\n\t\tpublic City(String name, String state) {\n\t\t\tthis.name = name;\n\t\t\tthis.state = state;\n\t\t}\n\n\t\tpublic String getName() {\n\t\t\treturn this.name;\n\t\t}\n\n\t\tpublic String getState() {\n\t\t\treturn this.state;\n\t\t}\n\n\t\t// ... etc\n\n\t}\n----\n\nTIP: You can customize entity scanning locations by using the `@EntityScan` annotation.\nSee the "`<<howto.adoc#howto-separate-entity-definitions-from-spring-configuration>>`"\nhow-to.\n\n\n\n[[boot-features-spring-data-jpa-repositories]]\n==== Spring Data JPA Repositories\n{spring-data-jpa}[Spring Data JPA] repositories are interfaces that you can define to\naccess data. JPA queries are created automatically from your method names. For example, a\n`CityRepository` interface might declare a `findAllByState(String state)` method to find\nall the cities in a given state.\n\nFor more complex queries, you can annotate your method with Spring Data\'s\n{spring-data-javadoc}/repository/Query.html[`Query`] annotation.\n\nSpring Data repositories usually extend from the\n{spring-data-commons-javadoc}/repository/Repository.html[`Repository`] or\n{spring-data-commons-javadoc}/repository/CrudRepository.html[`CrudRepository`]\ninterfaces. If you use auto-configuration, repositories are searched from the package\ncontaining your main configuration class (the one annotated with\n`@EnableAutoConfiguration` or `@SpringBootApplication`) down.\n\nThe following example shows a typical Spring Data repository interface definition:\n\n[source,java,indent=0]\n----\n\tpackage com.example.myapp.domain;\n\n\timport org.springframework.data.domain.*;\n\timport org.springframework.data.repository.*;\n\n\tpublic interface CityRepository extends Repository<City, Long> {\n\n\t\tPage<City> findAll(Pageable pageable);\n\n\t\tCity findByNameAndStateAllIgnoringCase(String name, String state);\n\n\t}\n----\n\nTIP: We have barely scratched the surface of Spring Data JPA. For complete details, see\nthe https://docs.spring.io/spring-data/jpa/docs/current/reference/html/[Spring Data JPA\nreference documentation].\n\n\n\n[[boot-features-creating-and-dropping-jpa-databases]]\n==== Creating and Dropping JPA Databases\nBy default, JPA databases are automatically created *only* if you use an embedded\ndatabase (H2, HSQL, or Derby). You can explicitly configure JPA settings by using\n`+spring.jpa.*+` properties. For example, to create and drop tables you can add the\nfollowing line to your `application.properties`:\n\n[indent=0]\n----\n\tspring.jpa.hibernate.ddl-auto=create-drop\n----\n\nNOTE: Hibernate\'s own internal property name for this (if you happen to remember it\nbetter) is `hibernate.hbm2ddl.auto`. You can set it, along with other Hibernate native\nproperties, by using `+spring.jpa.properties.*+` (the prefix is stripped before adding\nthem to the entity manager). The following line shows an example of setting JPA\nproperties for Hibernate:\n\n[indent=0]\n----\n\tspring.jpa.properties.hibernate.globally_quoted_identifiers=true\n----\n\nThe line in the preceding example passes a value of `true` for the\n`hibernate.globally_quoted_identifiers` property to the Hibernate entity manager.\n\nBy default, the DDL execution (or validation) is deferred until the `ApplicationContext`\nhas started. There is also a `spring.jpa.generate-ddl` flag, but it is not used if\nHibernate auto-configuration is active, because the `ddl-auto` settings are more\nfine-grained.\n\n\n\n[[boot-features-jpa-in-web-environment]]\n==== Open EntityManager in View\nIf you are running a web application, Spring Boot by default registers\n{spring-javadoc}/orm/jpa/support/OpenEntityManagerInViewInterceptor.{dc-ext}[`OpenEntityManagerInViewInterceptor`]\nto apply the "`Open EntityManager in View`" pattern, to allow for lazy loading in web\nviews. If you do not want this behavior, you should set `spring.jpa.open-in-view` to\n`false` in your `application.properties`.\n\n\n\n[[boot-features-sql-h2-console]]\n=== Using H2\'s Web Console\nThe http://www.h2database.com[H2 database] provides a\nhttp://www.h2database.com/html/quickstart.html#h2_console[browser-based console] that\nSpring Boot can auto-configure for you. The console is auto-configured when the following\nconditions are met:\n\n* You are developing a servlet-based web application.\n* `com.h2database:h2` is on the classpath.\n* You are using <<using-spring-boot.adoc#using-boot-devtools,Spring Boot\'s developer\ntools>>.\n\nTIP: If you are not using Spring Boot\'s developer tools but would still like to make use\nof H2\'s console, you can configure the `spring.h2.console.enabled` property with a value\nof `true`.\n\nNOTE: The H2 console is only intended for use during development, so you should take\ncare to ensure that `spring.h2.console.enabled` is not set to `true` in production.\n\n\n\n[[boot-features-sql-h2-console-custom-path]]\n==== Changing the H2 Console\'s Path\nBy default, the console is available at `/h2-console`. You can customize the console\'s\npath by using the `spring.h2.console.path` property.\n\n\n\n[[boot-features-jooq]]\n=== Using jOOQ\nJava Object Oriented Querying (http://www.jooq.org/[jOOQ]) is a popular product from\nhttp://www.datageekery.com/[Data Geekery] which generates Java code from your\ndatabase and lets you build type-safe SQL queries through its fluent API. Both the\ncommercial and open source editions can be used with Spring Boot.\n\n\n\n==== Code Generation\nIn order to use jOOQ type-safe queries, you need to generate Java classes from your\ndatabase schema. You can follow the instructions in the\n{jooq-manual}/#jooq-in-7-steps-step3[jOOQ user manual]. If you use the\n`jooq-codegen-maven` plugin and you also use the `spring-boot-starter-parent`\n"`parent POM`", you can safely omit the plugin\'s `<version>` tag. You can also use Spring\nBoot-defined version variables (such as `h2.version`) to declare the plugin\'s database\ndependency. The following listing shows an example:\n\n[source,xml,indent=0]\n----\n\t<plugin>\n\t\t<groupId>org.jooq</groupId>\n\t\t<artifactId>jooq-codegen-maven</artifactId>\n\t\t<executions>\n\t\t\t...\n\t\t</executions>\n\t\t<dependencies>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.h2database</groupId>\n\t\t\t\t<artifactId>h2</artifactId>\n\t\t\t\t<version>${h2.version}</version>\n\t\t\t</dependency>\n\t\t</dependencies>\n\t\t<configuration>\n\t\t\t<jdbc>\n\t\t\t\t<driver>org.h2.Driver</driver>\n\t\t\t\t<url>jdbc:h2:~/yourdatabase</url>\n\t\t\t</jdbc>\n\t\t\t<generator>\n\t\t\t\t...\n\t\t\t</generator>\n\t\t</configuration>\n\t</plugin>\n----\n\n\n\n==== Using DSLContext\nThe fluent API offered by jOOQ is initiated through the `org.jooq.DSLContext` interface.\nSpring Boot auto-configures a `DSLContext` as a Spring Bean and connects it to your\napplication `DataSource`. To use the `DSLContext`, you can `@Autowire` it, as shown in\nthe following example:\n\n[source,java,indent=0]\n----\n\t@Component\n\tpublic class JooqExample implements CommandLineRunner {\n\n\t\tprivate final DSLContext create;\n\n\t\t@Autowired\n\t\tpublic JooqExample(DSLContext dslContext) {\n\t\t\tthis.create = dslContext;\n\t\t}\n\n\t}\n----\n\nTIP: The jOOQ manual tends to use a variable named `create` to hold the `DSLContext`.\n\nYou can then use the `DSLContext` to construct your queries, as shown in the following\nexample:\n\n[source,java,indent=0]\n----\n\tpublic List<GregorianCalendar> authorsBornAfter1980() {\n\t\treturn this.create.selectFrom(AUTHOR)\n\t\t\t.where(AUTHOR.DATE_OF_BIRTH.greaterThan(new GregorianCalendar(1980, 0, 1)))\n\t\t\t.fetch(AUTHOR.DATE_OF_BIRTH);\n\t}\n----\n\n\n\n==== jOOQ SQL Dialect\nUnless the `spring.jooq.sql-dialect` property has been configured, Spring Boot determines\nthe SQL dialect to use for your datasource. If Spring Boot could not detect the dialect,\nit uses `DEFAULT`.\n\nNOTE: Spring Boot can only auto-configure dialects supported by the open source version\nof jOOQ.\n\n\n\n==== Customizing jOOQ\nMore advanced customizations can be achieved by defining your own `@Bean` definitions,\nwhich is used when the jOOQ `Configuration` is created. You can define beans for the\nfollowing jOOQ Types:\n\n* `ConnectionProvider`\n* `TransactionProvider`\n* `RecordMapperProvider`\n* `RecordUnmapperProvider`\n* `RecordListenerProvider`\n* `ExecuteListenerProvider`\n* `VisitListenerProvider`\n* `TransactionListenerProvider`\n\nYou can also create your own `org.jooq.Configuration` `@Bean` if you want to take\ncomplete control of the jOOQ configuration.\n\n\n\n[[boot-features-nosql]]\n== Working with NoSQL Technologies\nSpring Data provides additional projects that help you access a variety of NoSQL\ntechnologies, including:\nhttps://projects.spring.io/spring-data-mongodb/[MongoDB],\nhttps://projects.spring.io/spring-data-neo4j/[Neo4J],\nhttps://github.com/spring-projects/spring-data-elasticsearch/[Elasticsearch],\nhttps://projects.spring.io/spring-data-solr/[Solr],\nhttps://projects.spring.io/spring-data-redis/[Redis],\nhttps://projects.spring.io/spring-data-gemfire/[Gemfire],\nhttps://projects.spring.io/spring-data-cassandra/[Cassandra],\nhttps://projects.spring.io/spring-data-couchbase/[Couchbase] and\nhttps://projects.spring.io/spring-data-ldap/[LDAP].\nSpring Boot provides auto-configuration for Redis, MongoDB, Neo4j, Elasticsearch, Solr\nCassandra, Couchbase, and LDAP. You can make use of the other projects, but you must\nconfigure them yourself. Refer to the appropriate reference documentation at\nhttps://projects.spring.io/spring-data[projects.spring.io/spring-data].\n\n\n\n[[boot-features-redis]]\n=== Redis\nhttp://redis.io/[Redis] is a cache, message broker, and richly-featured key-value store.\nSpring Boot offers basic auto-configuration for the\nhttps://github.com/lettuce-io/lettuce-core/[Lettuce] and\nhttps://github.com/xetorthio/jedis/[Jedis] client libraries and the abstractions on top\nof them provided by https://github.com/spring-projects/spring-data-redis[Spring Data\nRedis].\n\nThere is a `spring-boot-starter-data-redis` "`Starter`" for collecting the dependencies\nin a convenient way. By default, it uses\nhttps://github.com/lettuce-io/lettuce-core/[Lettuce]. That starter handles both\ntraditional and reactive applications.\n\nTIP: we also provide a `spring-boot-starter-data-redis-reactive` "`Starter`" for\nconsistency with the other stores with reactive support.\n\n\n\n[[boot-features-connecting-to-redis]]\n==== Connecting to Redis\nYou can inject an auto-configured `RedisConnectionFactory`, `StringRedisTemplate`, or\nvanilla `RedisTemplate` instance as you would any other Spring Bean. By default, the\ninstance tries to connect to a Redis server at `localhost:6379`. The following listing\nshows an example of such a bean:\n\n[source,java,indent=0]\n----\n\t@Component\n\tpublic class MyBean {\n\n\t\tprivate StringRedisTemplate template;\n\n\t\t@Autowired\n\t\tpublic MyBean(StringRedisTemplate template) {\n\t\t\tthis.template = template;\n\t\t}\n\n\t\t// ...\n\n\t}\n----\n\nTIP: You can also register an arbitrary number of beans that implement\n`LettuceClientConfigurationBuilderCustomizer` for more advanced customizations. If you\nuse Jedis, `JedisClientConfigurationBuilderCustomizer` is also available.\n\nIf you add your own `@Bean` of any of the auto-configured types, it replaces the default\n(except in the case of `RedisTemplate`, when the exclusion is based on the bean name,\n`redisTemplate`, not its type). By default, if `commons-pool2` is on the classpath, you\nget a pooled connection factory.\n\n\n\n[[boot-features-mongodb]]\n=== MongoDB\nhttp://www.mongodb.com/[MongoDB] is an open-source NoSQL document database that uses a\nJSON-like schema instead of traditional table-based relational data. Spring Boot offers\nseveral conveniences for working with MongoDB, including the\n`spring-boot-starter-data-mongodb` and `spring-boot-starter-data-mongodb-reactive`\n"`Starters`".\n\n\n\n[[boot-features-connecting-to-mongodb]]\n==== Connecting to a MongoDB Database\nTo access Mongo databases, you can inject an auto-configured\n`org.springframework.data.mongodb.MongoDbFactory`. By default, the instance tries to\nconnect to a MongoDB server at `mongodb://localhost/test` The following example shows how\nto connect to a MongoDB database:\n\n[source,java,indent=0]\n----\n\timport org.springframework.data.mongodb.MongoDbFactory;\n\timport com.mongodb.DB;\n\n\t@Component\n\tpublic class MyBean {\n\n\t\tprivate final MongoDbFactory mongo;\n\n\t\t@Autowired\n\t\tpublic MyBean(MongoDbFactory mongo) {\n\t\t\tthis.mongo = mongo;\n\t\t}\n\n\t\t// ...\n\n\t\tpublic void example() {\n\t\t\tDB db = mongo.getDb();\n\t\t\t// ...\n\t\t}\n\n\t}\n----\n\nYou can set the `spring.data.mongodb.uri` property to change the URL and configure\nadditional settings such as the _replica set_, as shown in the following example:\n\n[source,properties,indent=0]\n----\n\tspring.data.mongodb.uri=mongodb://user:secret@mongo1.example.com:12345,mongo2.example.com:23456/test\n----\n\nAlternatively, as long as you use Mongo 2.x, you can specify a `host`/`port`. For\nexample, you might declare the following settings in your `application.properties`:\n\n[source,properties,indent=0]\n----\n\tspring.data.mongodb.host=mongoserver\n\tspring.data.mongodb.port=27017\n----\n\nNOTE: If you use the Mongo 3.0 Java driver, `spring.data.mongodb.host` and\n`spring.data.mongodb.port` are not supported. In such cases, `spring.data.mongodb.uri`\nshould be used to provide all of the configuration.\n\nTIP: If `spring.data.mongodb.port` is not specified, the default of `27017` is used. You\ncould delete this line from the example shown earlier.\n\nTIP: If you do not use Spring Data Mongo, you can inject `com.mongodb.MongoClient` beans\ninstead of using `MongoDbFactory`. If you want to take complete control of establishing\nthe MongoDB connection, you can also declare your own `MongoDbFactory` or `MongoClient`\nbean.\n\nNOTE: If you are using the reactive driver, Netty is required for SSL. The\nauto-configuration configures this factory automatically if Netty is available and the\nfactory to use hasn\'t been customized already.\n\n[[boot-features-mongo-template]]\n==== MongoTemplate\n{spring-data-mongo}[Spring Data MongoDB] provides a\n{spring-data-mongo-javadoc}/core/MongoTemplate.html[`MongoTemplate`] class that is very\nsimilar in its design to Spring\'s `JdbcTemplate`. As with `JdbcTemplate`, Spring Boot\nauto-configures a bean for you to inject the template, as follows:\n\n[source,java,indent=0]\n----\n\timport org.springframework.beans.factory.annotation.Autowired;\n\timport org.springframework.data.mongodb.core.MongoTemplate;\n\timport org.springframework.stereotype.Component;\n\n\t@Component\n\tpublic class MyBean {\n\n\t\tprivate final MongoTemplate mongoTemplate;\n\n\t\t@Autowired\n\t\tpublic MyBean(MongoTemplate mongoTemplate) {\n\t\t\tthis.mongoTemplate = mongoTemplate;\n\t\t}\n\n\t\t// ...\n\n\t}\n----\n\nSee the\nhttps://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/core/MongoOperations.html[`MongoOperations`\nJavadoc] for complete details.\n\n\n\n[[boot-features-spring-data-mongo-repositories]]\n==== Spring Data MongoDB Repositories\nSpring Data includes repository support for MongoDB. As with the JPA repositories\ndiscussed earlier, the basic principle is that queries are constructed automatically,\nbased on method names.\n\nIn fact, both Spring Data JPA and Spring Data MongoDB share the same common\ninfrastructure. You could take the JPA example from earlier and, assuming that `City` is\nnow a Mongo data class rather than a JPA `@Entity`, it works in the same way, as shown\nin the following example:\n\n[source,java,indent=0]\n----\n\tpackage com.example.myapp.domain;\n\n\timport org.springframework.data.domain.*;\n\timport org.springframework.data.repository.*;\n\n\tpublic interface CityRepository extends Repository<City, Long> {\n\n\t\tPage<City> findAll(Pageable pageable);\n\n\t\tCity findByNameAndStateAllIgnoringCase(String name, String state);\n\n\t}\n----\n\nTIP: You can customize document scanning locations by using the `@EntityScan` annotation.\n\nTIP: For complete details of Spring Data MongoDB, including its rich object mapping\ntechnologies, refer to its https://projects.spring.io/spring-data-mongodb/[reference\ndocumentation].\n\n\n\n[[boot-features-mongo-embedded]]\n==== Embedded Mongo\nSpring Boot offers auto-configuration for\nhttps://github.com/flapdoodle-oss/de.flapdoodle.embed.mongo[Embedded Mongo]. To use it in\nyour Spring Boot application, add a dependency on\n`de.flapdoodle.embed:de.flapdoodle.embed.mongo`.\n\nThe port that Mongo listens on can be configured by setting the `spring.data.mongodb.port`\nproperty. To use a randomly allocated free port, use a value of 0. The `MongoClient`\ncreated by `MongoAutoConfiguration` is automatically configured to use the randomly\nallocated port.\n\nNOTE: If you do not configure a custom port, the embedded support uses a random port\n(rather than 27017) by default.\n\nIf you have SLF4J on the classpath, the output produced by Mongo is automatically routed\nto a logger named `org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongo`.\n\nYou can declare your own `IMongodConfig` and `IRuntimeConfig` beans to take control of\nthe Mongo instance\'s configuration and logging routing.\n\n\n\n[[boot-features-neo4j]]\n=== Neo4j\nhttp://neo4j.com/[Neo4j] is an open-source NoSQL graph database that uses a rich data\nmodel of nodes connected by first class relationships, which is better suited for\nconnected big data than traditional RDBMS approaches. Spring Boot offers several\nconveniences for working with Neo4j, including the `spring-boot-starter-data-neo4j`\n"`Starter`".\n\n\n\n[[boot-features-connecting-to-neo4j]]\n==== Connecting to a Neo4j Database\nTo access a Neo4j server, you can inject an auto-configured\n`org.neo4j.ogm.session.Session`. By default, the instance tries to connect to a Neo4j\nserver at `localhost:7687` using the Bolt protocol. The following example shows how to\ninject a Neo4j `Session`:\n\n[source,java,indent=0]\n----\n\t@Component\n\tpublic class MyBean {\n\n\t\tprivate final Session session;\n\n\t\t@Autowired\n\t\tpublic MyBean(Session session) {\n\t\t\tthis.session = session;\n\t\t}\n\n\t\t// ...\n\n\t}\n----\n\nYou can configure the uri and credentials to use by setting the `spring.data.neo4j.*`\nproperties, as shown in the following example:\n\n[source,properties,indent=0]\n----\n\tspring.data.neo4j.uri=bolt://my-server:7687\n\tspring.data.neo4j.username=neo4j\n\tspring.data.neo4j.password=secret\n----\n\nYou can take full control over the session creation by adding a\n`org.neo4j.ogm.config.Configuration` `@Bean`. Also, adding a `@Bean` of type\n`SessionFactory` disables the auto-configuration and gives you full control.\n\n\n\n[[boot-features-connecting-to-neo4j-embedded]]\n==== Using the Embedded Mode\nIf you add `org.neo4j:neo4j-ogm-embedded-driver` to the dependencies of your application,\nSpring Boot automatically configures an in-process embedded instance of Neo4j that does\nnot persist any data when your application shuts down.\n\n[NOTE]\n====\nAs the embedded Neo4j OGM  driver  does not provide the Neo4j kernel itself, you have\nto declare `org.neo4j:neo4j` as dependency yourself. Refer to\nhttps://neo4j.com/docs/ogm-manual/current/reference/#reference:getting-started[the\nNeo4j OGM documentation] for a list of compatible versions.\n====\n\nThe embedded driver takes precedence over the other drivers when there are multiple\ndrivers on the classpath. You can explicitly disable the embedded mode by setting\n`spring.data.neo4j.embedded.enabled=false`.\n\n<<boot-features-testing-spring-boot-applications-testing-autoconfigured-neo4j-test,Data Neo4j Tests>>\nautomatically make use of an embedded Neo4j instance if the embedded driver and Neo4j\nkernel are on the classpath as described above.\n\n[NOTE]\n====\nYou can enable persistence for the embedded mode by providing a path to a database file\nin your configuration, e.g. `spring.data.neo4j.uri=file://var/tmp/graph.db`.\n====\n\n\n\n[[boot-features-neo4j-ogm-session]]\n==== Neo4jSession\nBy default, if you are running a web application, the session is bound to the thread for\nthe entire processing of the request (that is, it uses the "Open Session in View"\npattern). If you do not want this behavior, add the following line to your\n`application.properties` file:\n\n[source,properties,indent=0]\n----\n\tspring.data.neo4j.open-in-view=false\n----\n\n\n\n[[boot-features-spring-data-neo4j-repositories]]\n==== Spring Data Neo4j Repositories\nSpring Data includes repository support for Neo4j.\n\nSpring Data Neo4j shares the common infrastructure with Spring Data JPA as many other\nSpring Data modules do. You could take the JPA example from earlier and define\n`City` as Neo4j OGM `@NodeEntity` rather than JPA `@Entity` and the repository\nabstraction works in the same way, as shown in the following example:\n\n[source,java,indent=0]\n----\n\tpackage com.example.myapp.domain;\n\n\timport java.util.Optional;\n\n\timport org.springframework.data.neo4j.repository.*;\n\n\tpublic interface CityRepository extends Neo4jRepository<City, Long> {\n\n\t\tOptional<City> findOneByNameAndState(String name, String state);\n\n\t}\n----\n\nThe `spring-boot-starter-data-neo4j` "`Starter`" enables the repository support as well\nas transaction management. You can customize the locations to look for repositories and\nentities by using `@EnableNeo4jRepositories` and `@EntityScan` respectively on a\n`@Configuration`-bean.\n\nTIP: For complete details of Spring Data Neo4j, including its object mapping\ntechnologies, refer to the https://projects.spring.io/spring-data-neo4j/[reference\ndocumentation].\n\n\n\n[[boot-features-gemfire]]\n=== Gemfire\nhttps://github.com/spring-projects/spring-data-gemfire[Spring Data Gemfire] provides\nconvenient Spring-friendly tools for accessing the\nhttps://pivotal.io/big-data/pivotal-gemfire#details[Pivotal Gemfire] data management\nplatform. There is a `spring-boot-starter-data-gemfire` "`Starter`" for collecting the\ndependencies in a convenient way. There is currently no auto-configuration support for\nGemfire, but you can enable Spring Data Repositories with a\nhttps://github.com/spring-projects/spring-data-gemfire/blob/master/src/main/java/org/springframework/data/gemfire/repository/config/EnableGemfireRepositories.java[single annotation: `@EnableGemfireRepositories`].\n\n\n\n[[boot-features-solr]]\n=== Solr\nhttp://lucene.apache.org/solr/[Apache Solr] is a search engine. Spring Boot offers basic\nauto-configuration for the Solr 5 client library and the abstractions on top of it\nprovided by https://github.com/spring-projects/spring-data-solr[Spring Data Solr]. There\nis a `spring-boot-starter-data-solr` "`Starter`" for collecting the dependencies in a\nconvenient way.\n\n\n[[boot-features-connecting-to-solr]]\n==== Connecting to Solr\nYou can inject an auto-configured `SolrClient` instance as you would any other Spring\nbean. By default, the instance tries to connect to a server at\n`http://localhost:8983/solr`. The following example shows how to inject a Solr bean:\n\n[source,java,indent=0]\n----\n\t@Component\n\tpublic class MyBean {\n\n\t\tprivate SolrClient solr;\n\n\t\t@Autowired\n\t\tpublic MyBean(SolrClient solr) {\n\t\t\tthis.solr = solr;\n\t\t}\n\n\t\t// ...\n\n\t}\n----\n\nIf you add your own `@Bean` of type `SolrClient`, it replaces the default.\n\n\n\n[[boot-features-spring-data-solr-repositories]]\n==== Spring Data Solr Repositories\nSpring Data includes repository support for Apache Solr. As with the JPA repositories\ndiscussed earlier, the basic principle is that queries are automatically constructed for \\\nyou based on method names.\n\nIn fact, both Spring Data JPA and Spring Data Solr share the same common infrastructure.\nYou could take the JPA example from earlier and, assuming that `City` is now a\n`@SolrDocument` class rather than a JPA `@Entity`, it works in the same way.\n\nTIP: For complete details of Spring Data Solr, refer to the\nhttps://projects.spring.io/spring-data-solr/[reference documentation].\n\n\n\n[[boot-features-elasticsearch]]\n=== Elasticsearch\nhttp://www.elasticsearch.org/[Elasticsearch] is an open source, distributed, real-time\nsearch and analytics engine. Spring Boot offers basic auto-configuration for\nElasticsearch and the abstractions on top of it provided by\nhttps://github.com/spring-projects/spring-data-elasticsearch[Spring Data Elasticsearch].\nThere is a `spring-boot-starter-data-elasticsearch` "`Starter`" for collecting the\ndependencies in a convenient way. Spring Boot also supports\nhttps://github.com/searchbox-io/Jest[Jest].\n\n\n\n[[boot-features-connecting-to-elasticsearch-jest]]\n==== Connecting to Elasticsearch by Using Jest\nIf you have `Jest` on the classpath, you can inject an auto-configured `JestClient` that\nby default targets `http://localhost:9200`. You can further tune how the client is\nconfigured, as shown in the following example:\n\n[source,properties,indent=0]\n----\n\tspring.elasticsearch.jest.uris=http://search.example.com:9200\n\tspring.elasticsearch.jest.read-timeout=10000\n\tspring.elasticsearch.jest.username=user\n\tspring.elasticsearch.jest.password=secret\n----\n\nYou can also register an arbitrary number of beans that implement\n`HttpClientConfigBuilderCustomizer` for more advanced customizations. The following\nexample tunes additional HTTP settings:\n\n[source,java,indent=0]\n----\ninclude::{code-examples}/elasticsearch/jest/JestClientCustomizationExample.java[tag=customizer]\n----\n\nTo take full control over the registration, define a `JestClient` bean.\n\n\n\n[[boot-features-connecting-to-elasticsearch-spring-data]]\n==== Connecting to Elasticsearch by Using Spring Data\nTo connect to Elasticsearch, you must provide the address of one or more cluster nodes.\nThe address can be specified by setting the `spring.data.elasticsearch.cluster-nodes`\nproperty to a comma-separated `host:port` list. With this configuration in place, an\n`ElasticsearchTemplate` or `TransportClient` can be injected like any other Spring bean,\nas shown in the following example:\n\n[source,properties,indent=0]\n----\n\tspring.data.elasticsearch.cluster-nodes=localhost:9300\n----\n\n[source,java,indent=0]\n----\n\t@Component\n\tpublic class MyBean {\n\n\t\tprivate final ElasticsearchTemplate template;\n\n\t\tpublic MyBean(ElasticsearchTemplate template) {\n\t\t\tthis.template = template;\n\t\t}\n\n\t\t// ...\n\n\t}\n----\n\nIf you add your own `ElasticsearchTemplate` or `TransportClient` `@Bean`, it replaces the\ndefault.\n\n\n\n[[boot-features-spring-data-elasticsearch-repositories]]\n==== Spring Data Elasticsearch Repositories\nSpring Data includes repository support for Elasticsearch. As with the JPA repositories\ndiscussed earlier, the basic principle is that queries are constructed for you\nautomatically based on method names.\n\nIn fact, both Spring Data JPA and Spring Data Elasticsearch share the same common\ninfrastructure. You could take the JPA example from earlier and, assuming that `City` is\nnow an Elasticsearch `@Document` class rather than a JPA `@Entity`, it works in the same\nway.\n\nTIP: For complete details of Spring Data Elasticsearch, refer to the\nhttps://docs.spring.io/spring-data/elasticsearch/docs/[reference documentation].\n\n\n\n[[boot-features-cassandra]]\n=== Cassandra\nhttp://cassandra.apache.org/[Cassandra] is an open source, distributed database\nmanagement system designed to handle large amounts of data across many commodity servers.\nSpring Boot offers auto-configuration for Cassandra and the abstractions on top of it\nprovided by https://github.com/spring-projects/spring-data-cassandra[Spring Data\nCassandra]. There is a `spring-boot-starter-data-cassandra` "`Starter`" for collecting\nthe dependencies in a convenient way.\n\n\n\n[[boot-features-connecting-to-cassandra]]\n==== Connecting to Cassandra\nYou can inject an auto-configured `CassandraTemplate` or a Cassandra `Session` instance\nas you would with any other Spring Bean. The `spring.data.cassandra.*` properties can be\nused to customize the connection. Generally, you provide `keyspace-name` and\n`contact-points` properties, as shown in the following example:\n\n[source,properties,indent=0]\n----\n\tspring.data.cassandra.keyspace-name=mykeyspace\n\tspring.data.cassandra.contact-points=cassandrahost1,cassandrahost2\n----\n\nThe following code listing shows how to inject a Cassandra bean:\n\n[source,java,indent=0]\n----\n\t@Component\n\tpublic class MyBean {\n\n\t\tprivate CassandraTemplate template;\n\n\t\t@Autowired\n\t\tpublic MyBean(CassandraTemplate template) {\n\t\t\tthis.template = template;\n\t\t}\n\n\t\t// ...\n\n\t}\n----\n\nIf you add your own `@Bean` of type `CassandraTemplate`, it replaces the default.\n\n\n\n[[boot-features-spring-data-cassandra-repositories]]\n==== Spring Data Cassandra Repositories\nSpring Data includes basic repository support for Cassandra. Currently, this is more\nlimited than the JPA repositories discussed earlier and needs to annotate finder methods\nwith `@Query`.\n\nTIP: For complete details of Spring Data Cassandra, refer to the\nhttps://docs.spring.io/spring-data/cassandra/docs/[reference documentation].\n\n\n\n[[boot-features-couchbase]]\n=== Couchbase\nhttp://www.couchbase.com/[Couchbase] is an open-source, distributed, multi-model NoSQL\ndocument-oriented database that is optimized for interactive applications. Spring Boot\noffers auto-configuration for Couchbase and the abstractions on top of it provided by\nhttps://github.com/spring-projects/spring-data-couchbase[Spring Data Couchbase]. There are\n`spring-boot-starter-data-couchbase` and `spring-boot-starter-data-couchbase-reactive`\n"`Starters`" for collecting the dependencies in a convenient way.\n\n\n\n[[boot-features-connecting-to-couchbase]]\n==== Connecting to Couchbase\nYou can get a `Bucket` and `Cluster` by adding the Couchbase SDK and some configuration.\nThe `spring.couchbase.*` properties can be used to customize the connection. Generally,\nyou provide the bootstrap hosts, bucket name, and password, as shown in the following\nexample:\n\n[source,properties,indent=0]\n----\n\tspring.couchbase.bootstrap-hosts=my-host-1,192.168.1.123\n\tspring.couchbase.bucket.name=my-bucket\n\tspring.couchbase.bucket.password=secret\n----\n\n[TIP]\n====\nYou need to provide _at least_ the bootstrap host(s), in which case the bucket name is\n`default` and the password is an empty String. Alternatively, you can define your own\n`org.springframework.data.couchbase.config.CouchbaseConfigurer` `@Bean` to take control\nover the whole configuration.\n====\n\nIt is also possible to customize some of the `CouchbaseEnvironment` settings. For\ninstance, the following configuration changes the timeout to use to open a new `Bucket`\nand enables SSL support:\n\n[source,properties,indent=0]\n----\n\tspring.couchbase.env.timeouts.connect=3000\n\tspring.couchbase.env.ssl.key-store=/location/of/keystore.jks\n\tspring.couchbase.env.ssl.key-store-password=secret\n----\n\nCheck the `spring.couchbase.env.*` properties for more details.\n\n\n\n[[boot-features-spring-data-couchbase-repositories]]\n==== Spring Data Couchbase Repositories\nSpring Data includes repository support for Couchbase. For complete details of Spring\nData Couchbase, refer to the\nhttps://docs.spring.io/spring-data/couchbase/docs/current/reference/html/[reference\ndocumentation].\n\nYou can inject an auto-configured `CouchbaseTemplate` instance as you would with any\nother Spring Bean, provided a _default_ `CouchbaseConfigurer` is available (which\nhappens when you enable Couchbase support, as explained earlier).\n\nThe following examples shows how to inject a Couchbase bean:\n\n[source,java,indent=0]\n----\n\t@Component\n\tpublic class MyBean {\n\n\t\tprivate final CouchbaseTemplate template;\n\n\t\t@Autowired\n\t\tpublic MyBean(CouchbaseTemplate template) {\n\t\t\tthis.template = template;\n\t\t}\n\n\t\t// ...\n\n\t}\n----\n\nThere are a few beans that you can define in your own configuration to override those\nprovided by the auto-configuration:\n\n* A `CouchbaseTemplate` `@Bean` with a name of `couchbaseTemplate`.\n* An `IndexManager` `@Bean` with a name of `couchbaseIndexManager`.\n* A `CustomConversions` `@Bean` with a name of `couchbaseCustomConversions`.\n\nTo avoid hard-coding those names in your own config, you can reuse `BeanNames` provided\nby Spring Data Couchbase. For instance, you can customize the converters to use, as\nfollows:\n\n[source,java,indent=0]\n----\n\t@Configuration\n\tpublic class SomeConfiguration {\n\n\t\t@Bean(BeanNames.COUCHBASE_CUSTOM_CONVERSIONS)\n\t\tpublic CustomConversions myCustomConversions() {\n\t\t\treturn new CustomConversions(...);\n\t\t}\n\n\t\t// ...\n\n\t}\n----\n\nTIP: If you want to fully bypass the auto-configuration for Spring Data Couchbase,\nprovide your own implementation of\n`org.springframework.data.couchbase.config.AbstractCouchbaseDataConfiguration`.\n\n\n\n[[boot-features-ldap]]\n=== LDAP\nhttps://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol[LDAP] (Lightweight\nDirectory Access Protocol) is an open, vendor-neutral, industry standard application\nprotocol for accessing and maintaining distributed directory information services over an\nIP network. Spring Boot offers auto-configuration for any compliant LDAP server as well\nas support for the embedded in-memory LDAP server from\nhttps://www.ldap.com/unboundid-ldap-sdk-for-java[UnboundID].\n\nLDAP abstractions are provided by\nhttps://github.com/spring-projects/spring-data-ldap[Spring Data LDAP].\nThere is a `spring-boot-starter-data-ldap` "`Starter`" for collecting the dependencies in\na convenient way.\n\n\n\n[[boot-features-ldap-connecting]]\n==== Connecting to an LDAP Server\nTo connect to an LDAP server, make sure you declare a dependency on the\n`spring-boot-starter-data-ldap` "`Starter`" or `spring-ldap-core` and then declare the\nURLs of your server in your application.properties, as shown in the following example:\n\n[source,properties,indent=0]\n----\n\tspring.ldap.urls=ldap://myserver:1235\n\tspring.ldap.username=admin\n\tspring.ldap.password=secret\n----\n\nIf you need to customize connection settings, you can use the `spring.ldap.base` and\n`spring.ldap.base-environment` properties.\n\n\n\n[[boot-features-ldap-spring-data-repositories]]\n==== Spring Data LDAP Repositories\nSpring Data includes repository support for LDAP. For complete details of Spring\nData LDAP, refer to the\nhttps://docs.spring.io/spring-data/ldap/docs/1.0.x/reference/html/[reference\ndocumentation].\n\nYou can also inject an auto-configured `LdapTemplate` instance as you would with any\nother Spring Bean, as shown in the following example:\n\n\n[source,java,indent=0]\n----\n\t@Component\n\tpublic class MyBean {\n\n\t\tprivate final LdapTemplate template;\n\n\t\t@Autowired\n\t\tpublic MyBean(LdapTemplate template) {\n\t\t\tthis.template = template;\n\t\t}\n\n\t\t// ...\n\n\t}\n----\n\n\n\n[[boot-features-ldap-embedded]]\n==== Embedded In-memory LDAP Server\nFor testing purposes, Spring Boot supports auto-configuration of an in-memory LDAP server\nfrom https://www.ldap.com/unboundid-ldap-sdk-for-java[UnboundID]. To configure the server,\nadd a dependency to `com.unboundid:unboundid-ldapsdk` and declare a `base-dn` property, as\nfollows:\n\n[source,properties,indent=0]\n----\n\tspring.ldap.embedded.base-dn=dc=spring,dc=io\n----\n\n[NOTE]\n====\nIt is possible to define multiple base-dn values, however, since distinguished names\nusually contain commas, they must be defined using the correct notation.\n\nIn yaml files, you can use the yaml list notation:\n\n[source,yaml,indent=0]\n----\n\tspring.ldap.embedded.base-dn:\n\t  - dc=spring,dc=io\n\t  - dc=pivotal,dc=io\n----\n\nIn properties files, you must include the index as part of the property name:\n\n[source,properties,indent=0]\n----\n\tspring.ldap.embedded.base-dn[0]=dc=spring,dc=io\n\tspring.ldap.embedded.base-dn[1]=dc=pivotal,dc=io\n----\n\n====\n\nBy default, the server starts on a random port and triggers the regular LDAP support.\nThere is no need to specify a `spring.ldap.urls` property.\n\nIf there is a `schema.ldif` file on your classpath, it is used to initialize the server.\nIf you want to load the initialization script from a different resource, you can also use\nthe `spring.ldap.embedded.ldif` property.\n\nBy default, a standard schema is used to validate `LDIF` files. You can turn off\nvalidation altogether by setting the `spring.ldap.embedded.validation.enabled` property.\nIf you have custom attributes, you can use `spring.ldap.embedded.validation.schema` to\ndefine your custom attribute types or object classes.\n\n\n\n[[boot-features-influxdb]]\n=== InfluxDB\nhttps://www.influxdata.com/[InfluxDB] is an open-source time series database optimized\nfor fast, high-availability storage and retrieval of time series data in fields such as\noperations monitoring, application metrics, Internet-of-Things sensor data, and real-time\nanalytics.\n\n\n\n[[boot-features-connecting-to-influxdb]]\n==== Connecting to InfluxDB\nSpring Boot auto-configures an `InfluxDB` instance, provided the `influxdb-java` client\nis on the classpath and the URL of the database is set, as shown in the following\nexample:\n\n[source,properties,indent=0]\n----\n\tspring.influx.url=http://172.0.0.1:8086\n----\n\nIf the connection to InfluxDB requires a user and password, you can set the\n`spring.influx.user` and `spring.influx.password` properties accordingly.\n\nInfluxDB relies on OkHttp. If you need to tune the http client `InfluxDB` uses behind the\nscenes, you can register an `OkHttpClient.Builder` bean.\n\n\n\n[[boot-features-caching]]\n== Caching\nThe Spring Framework provides support for transparently adding caching to an application.\nAt its core, the abstraction applies caching to methods, thus reducing the number of\nexecutions based on the information available in the cache. The caching logic is applied\ntransparently, without any interference to the invoker.  Spring Boot auto-configures the\ncache infrastructure as long as caching support is enabled via the `@EnableCaching`\nannotation.\n\nNOTE: Check the {spring-reference}integration.html#cache[relevant section] of the Spring\nFramework reference for more details.\n\nIn a nutshell, adding caching to an operation of your service is as easy as adding the\nrelevant annotation to its method, as shown in the following example:\n\n[source,java,indent=0]\n----\n\timport org.springframework.cache.annotation.Cacheable;\n\timport org.springframework.stereotype.Component;\n\n\t@Component\n\tpublic class MathService {\n\n\t\t@Cacheable("piDecimals")\n\t\tpublic int computePiDecimal(int i) {\n\t\t\t// ...\n\t\t}\n\n\t}\n----\n\nThis example demonstrates the use of caching on a potentially costly operation. Before\ninvoking `computePiDecimal`, the abstraction looks for an entry in the `piDecimals` cache\nthat matches the `i` argument. If an entry is found, the content in the cache is\nimmediately returned to the caller, and the method is not invoked. Otherwise, the method\nis invoked, and the cache is updated before returning the value.\n\nCAUTION: You can also use the standard JSR-107 (JCache) annotations (such as\n`@CacheResult`) transparently. However, we strongly advise you to not mix and match the\nSpring Cache and JCache annotations.\n\nIf you do not add any specific cache library, Spring Boot auto-configures a\n<<boot-features-caching-provider-simple,simple provider>> that uses concurrent maps in\nmemory. When a cache is required (such as `piDecimals` in the preceding example), this\nprovider creates it for you. The simple provider is not really recommended for\nproduction usage, but it is great for getting started and making sure that you understand\nthe features. When you have made up your mind about the cache provider to use, please\nmake sure to read its documentation to figure out how to configure the caches that your\napplication uses. Nearly all providers require you to explicitly configure every cache\nthat you use in the application. Some offer a way to customize the default caches defined\nby the `spring.cache.cache-names` property.\n\nTIP: It is also possible to transparently\n{spring-reference}integration.html#cache-annotations-put[update] or\n{spring-reference}integration.html#cache-annotations-evict[evict] data from the cache.\n\n\n\n[[boot-features-caching-provider]]\n=== Supported Cache Providers\nThe cache abstraction does not provide an actual store and relies on abstraction\nmaterialized by the `org.springframework.cache.Cache` and\n`org.springframework.cache.CacheManager` interfaces.\n\nIf you have not defined a bean of type `CacheManager` or a `CacheResolver` named\n`cacheResolver` (see\n{spring-javadoc}/cache/annotation/CachingConfigurer.html[`CachingConfigurer`]),\nSpring Boot tries to detect the following providers (in the indicated order):\n\n. <<boot-features-caching-provider-generic,Generic>>\n. <<boot-features-caching-provider-jcache,JCache (JSR-107)>> (EhCache 3, Hazelcast,\n  Infinispan, and others)\n. <<boot-features-caching-provider-ehcache2,EhCache 2.x>>\n. <<boot-features-caching-provider-hazelcast,Hazelcast>>\n. <<boot-features-caching-provider-infinispan,Infinispan>>\n. <<boot-features-caching-provider-couchbase,Couchbase>>\n. <<boot-features-caching-provider-redis,Redis>>\n. <<boot-features-caching-provider-caffeine,Caffeine>>\n. <<boot-features-caching-provider-simple,Simple>>\n\nTIP: It is also possible to _force_ a particular cache provider by setting the\n`spring.cache.type` property. Use this property if you need to\n<<boot-features-caching-provider-none,disable caching altogether>> in certain environment\n(such as tests).\n\nTIP: Use the `spring-boot-starter-cache` "`Starter`" to quickly add basic caching\ndependencies. The starter brings in `spring-context-support`. If you add dependencies\nmanually, you must include `spring-context-support` in order to use the JCache,\nEhCache 2.x, or Guava support.\n\nIf the `CacheManager` is auto-configured by Spring Boot, you can further tune its\nconfiguration before it is fully initialized by exposing a bean that implements the\n`CacheManagerCustomizer` interface. The following example sets a flag to say that null\nvalues should be passed down to the underlying map:\n\n[source,java,indent=0]\n----\n\t@Bean\n\tpublic CacheManagerCustomizer<ConcurrentMapCacheManager> cacheManagerCustomizer() {\n\t\treturn new CacheManagerCustomizer<ConcurrentMapCacheManager>() {\n\t\t\t@Override\n\t\t\tpublic void customize(ConcurrentMapCacheManager cacheManager) {\n\t\t\t\tcacheManager.setAllowNullValues(false);\n\t\t\t}\n\t\t};\n\t}\n----\n\n[NOTE]\n====\nIn the preceding example, an auto-configured `ConcurrentMapCacheManager` is expected. If\nthat is not the case (either you provided your own config or a different cache provider\nwas auto-configured), the customizer is not invoked at all. You can have as many\ncustomizers as you want, and you can also order them by using `@Order` or `Ordered`.\n====\n\n\n\n[[boot-features-caching-provider-generic]]\n==== Generic\nGeneric caching is used if the context defines _at least_ one\n`org.springframework.cache.Cache` bean. A `CacheManager` wrapping all beans of that type\nis created.\n\n\n\n[[boot-features-caching-provider-jcache]]\n==== JCache (JSR-107)\nhttps://jcp.org/en/jsr/detail?id=107[JCache] is bootstrapped through the presence of a\n`javax.cache.spi.CachingProvider` on the classpath (that is, a JSR-107 compliant caching\nlibrary exists on the classpath), and the `JCacheCacheManager` is provided by the\n`spring-boot-starter-cache` "`Starter`". Various compliant libraries are available, and\nSpring Boot provides dependency management for Ehcache 3, Hazelcast, and Infinispan. Any\nother compliant library can be added as well.\n\nIt might happen that more than one provider is present, in which case the provider must\nbe explicitly specified. Even if the JSR-107 standard does not enforce a standardized way\nto define the location of the configuration file, Spring Boot does its best to\naccommodate setting a cache with implementation details, as shown in the following\nexample:\n\n[source,properties,indent=0]\n----\n    # Only necessary if more than one provider is present\n\tspring.cache.jcache.provider=com.acme.MyCachingProvider\n\tspring.cache.jcache.config=classpath:acme.xml\n----\n\nNOTE: When a cache library offers both a native implementation and JSR-107 support,\nSpring Boot prefers the JSR-107 support, so that the same features are available if you\nswitch to a different JSR-107 implementation.\n\nTIP: Spring Boot has <<boot-features-hazelcast,general support for Hazelcast>>. If a\nsingle `HazelcastInstance` is available, it is automatically reused for the\n`CacheManager` as well, unless the `spring.cache.jcache.config` property is specified.\n\nThere are two ways to customize the underlying `javax.cache.cacheManager`:\n\n* Caches can be created on startup by setting the `spring.cache.cache-names` property. If\na custom `javax.cache.configuration.Configuration` bean is defined, it is used to\ncustomize them.\n* `org.springframework.boot.autoconfigure.cache.JCacheManagerCustomizer` beans are\ninvoked with the reference of the `CacheManager` for full customization.\n\nTIP: If a standard `javax.cache.CacheManager` bean is defined, it is wrapped\nautomatically in an `org.springframework.cache.CacheManager` implementation that the\nabstraction expects. No further customization is applied to it.\n\n\n\n[[boot-features-caching-provider-ehcache2]]\n==== EhCache 2.x\nhttp://www.ehcache.org/[EhCache] 2.x is used if a file named `ehcache.xml` can be found at\nthe root of the classpath. If EhCache 2.x is found, the `EhCacheCacheManager` provided by\nthe `spring-boot-starter-cache` "`Starter`" is used to bootstrap the cache manager. An\nalternate configuration file can be provided as well, as shown in the following example:\n\n[source,properties,indent=0]\n----\n\tspring.cache.ehcache.config=classpath:config/another-config.xml\n----\n\n\n\n[[boot-features-caching-provider-hazelcast]]\n==== Hazelcast\n\nSpring Boot has <<boot-features-hazelcast,general support for Hazelcast>>. If a\n`HazelcastInstance` has been auto-configured, it is automatically wrapped in a\n`CacheManager`.\n\n\n\n[[boot-features-caching-provider-infinispan]]\n==== Infinispan\nhttp://infinispan.org/[Infinispan] has no default configuration file location, so it must\nbe specified explicitly. Otherwise, the default bootstrap is used.\n\n[source,properties,indent=0]\n----\n\tspring.cache.infinispan.config=infinispan.xml\n----\n\nCaches can be created on startup by setting the `spring.cache.cache-names` property. If a\ncustom `ConfigurationBuilder` bean is defined, it is used to customize the caches.\n\n[NOTE]\n====\nThe support of Infinispan in Spring Boot is restricted to the embedded mode and is quite\nbasic. If you want more options, you should use the official Infinispan Spring Boot\nstarter instead. See\nhttps://github.com/infinispan/infinispan-spring-boot[Infinispan\'s documentation] for more\ndetails.\n====\n\n\n[[boot-features-caching-provider-couchbase]]\n==== Couchbase\nIf the https://www.couchbase.com/[Couchbase] Java client and the `couchbase-spring-cache`\nimplementation are available and Couchbase is <<boot-features-couchbase,configured>>, a\n`CouchbaseCacheManager` is auto-configured. It is also possible to create additional\ncaches on startup by setting the `spring.cache.cache-names` property. These caches\noperate on the `Bucket` that was auto-configured. You can _also_ create additional caches\non another `Bucket` by using the customizer. Assume you need two caches (`cache1` and\n`cache2`) on the "main" `Bucket` and one (`cache3`) cache with a custom time to live of 2\nseconds on the "`another`" `Bucket`. You can create the first two caches through\nconfiguration, as follows:\n\n[source,properties,indent=0]\n----\n\tspring.cache.cache-names=cache1,cache2\n----\n\nThen you can define a `@Configuration` class to configure the extra `Bucket` and the\n`cache3` cache, as follows:\n\n\n[source,java,indent=0]\n----\n\t@Configuration\n\tpublic class CouchbaseCacheConfiguration {\n\n\t\tprivate final Cluster cluster;\n\n\t\tpublic CouchbaseCacheConfiguration(Cluster cluster) {\n\t\t\tthis.cluster = cluster;\n\t\t}\n\n\t\t@Bean\n\t\tpublic Bucket anotherBucket() {\n\t\t\treturn this.cluster.openBucket("another", "secret");\n\t\t}\n\n\t\t@Bean\n\t\tpublic CacheManagerCustomizer<CouchbaseCacheManager> cacheManagerCustomizer() {\n\t\t\treturn c -> {\n\t\t\t\tc.prepareCache("cache3", CacheBuilder.newInstance(anotherBucket())\n\t\t\t\t\t\t.withExpiration(2));\n\t\t\t};\n\t\t}\n\n\t}\n----\n\nThis sample configuration reuses the `Cluster` that was created through\nauto-configuration.\n\n\n\n[[boot-features-caching-provider-redis]]\n==== Redis\nIf http://redis.io/[Redis] is available and configured, a `RedisCacheManager` is\nauto-configured. It is possible to create additional caches on startup by setting the\n`spring.cache.cache-names` property and cache defaults can be configured by using\n`spring.cache.redis.*` properties. For instance, the following configuration creates\n`cache1` and `cache2` caches with a _time to live_ of 10 minutes:\n\n[source,properties,indent=0]\n----\n\tspring.cache.cache-names=cache1,cache2\n\tspring.cache.redis.time-to-live=600000\n----\n\n[NOTE]\n====\nBy default, a key prefix is added so that, if two separate caches use the same\nkey, Redis does not have overlapping keys and cannot return invalid values. We strongly\nrecommend keeping this setting enabled if you create your own `RedisCacheManager`.\n====\n\nTIP: You can take full control of the configuration by adding a `RedisCacheConfiguration`\n`@Bean` of your own. This can be useful if you\'re looking for customizing the\nserialization strategy.\n\n\n\n[[boot-features-caching-provider-caffeine]]\n==== Caffeine\nhttps://github.com/ben-manes/caffeine[Caffeine] is a Java 8 rewrite of Guava\'s cache that\nsupersedes support for Guava. If Caffeine is present, a `CaffeineCacheManager` (provided\nby the `spring-boot-starter-cache` "`Starter`") is auto-configured. Caches can be created\non startup by setting the `spring.cache.cache-names` property and can be customized by one\nof the following (in the indicated order):\n\n. A cache spec defined by `spring.cache.caffeine.spec`\n. A `com.github.benmanes.caffeine.cache.CaffeineSpec` bean is defined\n. A `com.github.benmanes.caffeine.cache.Caffeine` bean is defined\n\nFor instance, the following configuration creates `cache1` and `cache2` caches with a\nmaximum size of 500 and a _time to live_ of 10 minutes\n\n[source,properties,indent=0]\n----\n\tspring.cache.cache-names=cache1,cache2\n\tspring.cache.caffeine.spec=maximumSize=500,expireAfterAccess=600s\n----\n\nIf a `com.github.benmanes.caffeine.cache.CacheLoader` bean is defined, it is\nautomatically associated to the `CaffeineCacheManager`. Since the `CacheLoader` is going\nto be associated with _all_ caches managed by the cache manager, it must be defined as\n`CacheLoader<Object, Object>`. The auto-configuration ignores any other generic type.\n\n\n\n[[boot-features-caching-provider-simple]]\n==== Simple\nIf none of the other providers can be found, a simple implementation using a\n`ConcurrentHashMap` as the cache store is configured. This is the default if no caching\nlibrary is present in your application. By default, caches are created as needed, but you\ncan restrict the list of available caches by setting the `cache-names` property. For\ninstance, if you want only `cache1` and `cache2` caches, set the `cache-names` property\nas follows:\n\n[source,properties,indent=0]\n----\n\tspring.cache.cache-names=cache1,cache2\n----\n\nIf you do so and your application uses a cache not listed, then it fails at runtime when\nthe cache is needed, but not on startup. This is similar to the way the "real" cache\nproviders behave if you use an undeclared cache.\n\n\n[[boot-features-caching-provider-none]]\n==== None\nWhen `@EnableCaching` is present in your configuration, a suitable cache configuration is\nexpected as well. If you need to disable caching altogether in certain environments,\nforce the cache type to `none` to use a no-op implementation, as shown in the following\nexample:\n\n[source,properties,indent=0]\n----\n\tspring.cache.type=none\n----\n\n\n\n[[boot-features-messaging]]\n== Messaging\nThe Spring Framework provides extensive support for integrating with messaging systems,\nfrom simplified use of the JMS API using `JmsTemplate` to a complete infrastructure to\nreceive messages asynchronously. Spring AMQP provides a similar feature set for the\nAdvanced Message Queuing Protocol. Spring Boot also provides auto-configuration\noptions for `RabbitTemplate` and RabbitMQ. Spring WebSocket natively includes support for\nSTOMP messaging, and Spring Boot has support for that through starters and a small amount\nof auto-configuration. Spring Boot also has support for Apache Kafka.\n\n\n\n[[boot-features-jms]]\n=== JMS\nThe `javax.jms.ConnectionFactory` interface provides a standard method of creating a\n`javax.jms.Connection` for interacting with a JMS broker. Although Spring needs a\n`ConnectionFactory` to work with JMS, you generally need not use it directly yourself and\ncan instead rely on higher level messaging abstractions. (See the\n{spring-reference}integration.html#jms[relevant section] of the Spring Framework\nreference documentation for details.) Spring Boot also auto-configures the necessary\ninfrastructure to send and receive messages.\n\n\n\n[[boot-features-activemq]]\n==== ActiveMQ Support\nWhen http://activemq.apache.org/[ActiveMQ] is available on the classpath, Spring Boot can\nalso configure a `ConnectionFactory`. If the broker is present, an embedded broker is\nautomatically started and configured (provided no broker URL is specified through\nconfiguration).\n\nNOTE: If you use `spring-boot-starter-activemq`, the necessary dependencies to connect or\nembed an ActiveMQ instance are provided, as is the Spring infrastructure to integrate with\nJMS.\n\nActiveMQ configuration is controlled by external configuration properties in\n`+spring.activemq.*+`. For example, you might declare the following section in\n`application.properties`:\n\n[source,properties,indent=0]\n----\n\tspring.activemq.broker-url=tcp://192.168.1.210:9876\n\tspring.activemq.user=admin\n\tspring.activemq.password=secret\n----\n\nYou can also pool JMS resources by adding a dependency to\n`org.apache.activemq:activemq-pool` and configuring the `PooledConnectionFactory`\naccordingly, as shown in the following example:\n\n[source,properties,indent=0]\n----\n\tspring.activemq.pool.enabled=true\n\tspring.activemq.pool.max-connections=50\n----\n\nWARNING: `PooledConnectionFactory` is not JMS 2.0 compliant\n\nTIP: See\n{sc-spring-boot-autoconfigure}/jms/activemq/ActiveMQProperties.{sc-ext}[`ActiveMQProperties`]\nfor more of the supported options. You can also register an arbitrary number of beans\nthat implement `ActiveMQConnectionFactoryCustomizer` for more advanced customizations.\n\nBy default, ActiveMQ creates a destination if it does not yet exist so that destinations\nare resolved against their provided names.\n\n\n\n[[boot-features-artemis]]\n==== Artemis Support\nSpring Boot can auto-configure a `ConnectionFactory` when it detects that\nhttp://activemq.apache.org/artemis/[Artemis] is available on the classpath. If the broker\nis present, an embedded broker is automatically started and configured (unless the mode\nproperty has been explicitly set). The supported modes are `embedded` (to make explicit\nthat an embedded broker is required and that an error should occur if the broker is not\navailable on the classpath) and `native` (to connect to a broker using the `netty`\ntransport protocol). When the latter is configured, Spring Boot configures a\n`ConnectionFactory` that connects to a broker running on the local machine with the\ndefault settings.\n\nNOTE: If you use `spring-boot-starter-artemis`, the necessary dependencies to\nconnect to an existing Artemis instance are provided, as well as the Spring\ninfrastructure to integrate with JMS. Adding `org.apache.activemq:artemis-jms-server` to\nyour application lets you use embedded mode.\n\nArtemis configuration is controlled by external configuration properties in\n`+spring.artemis.*+`. For example, you might declare the following section in\n`application.properties`:\n\n[source,properties,indent=0]\n----\n\tspring.artemis.mode=native\n\tspring.artemis.host=192.168.1.210\n\tspring.artemis.port=9876\n\tspring.artemis.user=admin\n\tspring.artemis.password=secret\n----\n\nWhen embedding the broker, you can choose if you want to enable persistence and list the\ndestinations that should be made available. These can be specified as a comma-separated\nlist to create them with the default options, or you can define bean(s) of type\n`org.apache.activemq.artemis.jms.server.config.JMSQueueConfiguration` or\n`org.apache.activemq.artemis.jms.server.config.TopicConfiguration`, for advanced queue\nand topic configurations, respectively.\n\nSee\n{sc-spring-boot-autoconfigure}/jms/artemis/ArtemisProperties.{sc-ext}[`ArtemisProperties`]\nfor more supported options.\n\nNo JNDI lookup is involved, and destinations are resolved against their names, using\neither the `name` attribute in the Artemis configuration or the names provided through\nconfiguration.\n\n\n\n[[boot-features-jms-jndi]]\n==== Using a JNDI ConnectionFactory\nIf you are running your application in an application server, Spring Boot tries to\nlocate a JMS `ConnectionFactory` by using JNDI. By default, the `java:/JmsXA` and\n`java:/XAConnectionFactory` location are checked. You can use the `spring.jms.jndi-name`\nproperty if you need to specify an alternative location, as shown in the following\nexample:\n\n[source,properties,indent=0]\n----\n\tspring.jms.jndi-name=java:/MyConnectionFactory\n----\n\n\n\n[[boot-features-using-jms-sending]]\n==== Sending a Message\nSpring\'s `JmsTemplate` is auto-configured, and you can autowire it directly into your own\nbeans, as shown in the following example:\n\n[source,java,indent=0]\n----\n\timport org.springframework.beans.factory.annotation.Autowired;\n\timport org.springframework.jms.core.JmsTemplate;\n\timport org.springframework.stereotype.Component;\n\n\t@Component\n\tpublic class MyBean {\n\n\t\tprivate final JmsTemplate jmsTemplate;\n\n\t\t@Autowired\n\t\tpublic MyBean(JmsTemplate jmsTemplate) {\n\t\t\tthis.jmsTemplate = jmsTemplate;\n\t\t}\n\n\t\t// ...\n\n\t}\n----\n\nNOTE: {spring-javadoc}/jms/core/JmsMessagingTemplate.{dc-ext}[`JmsMessagingTemplate`] can\nbe injected in a similar manner. If a `DestinationResolver` or a `MessageConverter` bean\nis defined, it is associated automatically to the auto-configured `JmsTemplate`.\n\n\n[[boot-features-using-jms-receiving]]\n==== Receiving a Message\nWhen the JMS infrastructure is present, any bean can be annotated with `@JmsListener` to\ncreate a listener endpoint. If no `JmsListenerContainerFactory` has been defined, a\ndefault one is configured automatically. If a `DestinationResolver` or a\n`MessageConverter` beans is defined, it is associated automatically to the default\nfactory.\n\nBy default, the default factory is transactional. If you run in an infrastructure where a\n`JtaTransactionManager` is present, it is associated to the listener container by default.\nIf not, the `sessionTransacted` flag is enabled. In that latter scenario, you can\nassociate your local data store transaction to the processing of an incoming message by\nadding `@Transactional` on your listener method (or a delegate thereof). This ensures that\nthe incoming message is acknowledged, once the local transaction has completed. This also\nincludes sending response messages that have been performed on the same JMS session.\n\nThe following component creates a listener endpoint on the `someQueue` destination:\n\n[source,java,indent=0]\n----\n\t@Component\n\tpublic class MyBean {\n\n\t\t@JmsListener(destination = "someQueue")\n\t\tpublic void processMessage(String content) {\n\t\t\t// ...\n\t\t}\n\n\t}\n----\n\nTIP: See {spring-javadoc}/jms/annotation/EnableJms.{dc-ext}[the Javadoc of `@EnableJms`]\nfor more details.\n\nIf you need to create more `JmsListenerContainerFactory` instances or if you want to\noverride the default, Spring Boot provides a\n`DefaultJmsListenerContainerFactoryConfigurer` that you can use to initialize a\n`DefaultJmsListenerContainerFactory` with the same settings as the one that is\nauto-configured.\n\nFor instance, the following example exposes another factory that uses a specific\n`MessageConverter`:\n\n[source,java,indent=0]\n----\n\t@Configuration\n\tstatic class JmsConfiguration {\n\n\t\t@Bean\n\t\tpublic DefaultJmsListenerContainerFactory myFactory(\n\t\t\t\tDefaultJmsListenerContainerFactoryConfigurer configurer) {\n\t\t\tDefaultJmsListenerContainerFactory factory =\n\t\t\t\t\tnew DefaultJmsListenerContainerFactory();\n\t\t\tconfigurer.configure(factory, connectionFactory());\n\t\t\tfactory.setMessageConverter(myMessageConverter());\n\t\t\treturn factory;\n\t\t}\n\n\t}\n----\n\nThen you can use the factory in any `@JmsListener`-annotated method as follows:\n\n[source,java,indent=0]\n[subs="verbatim,quotes"]\n----\n\t@Component\n\tpublic class MyBean {\n\n\t\t@JmsListener(destination = "someQueue", **containerFactory="myFactory"**)\n\t\tpublic void processMessage(String content) {\n\t\t\t// ...\n\t\t}\n\n\t}\n----\n\n\n[[boot-features-amqp]]\n=== AMQP\nThe Advanced Message Queuing Protocol (AMQP) is a platform-neutral, wire-level protocol\nfor message-oriented middleware. The Spring AMQP project applies core Spring concepts to\nthe development of AMQP-based messaging solutions. Spring Boot offers several conveniences\nfor working with AMQP through RabbitMQ, including the `spring-boot-starter-amqp`\n"`Starter`".\n\n\n\n[[boot-features-rabbitmq]]\n==== RabbitMQ support\nhttps://www.rabbitmq.com/[RabbitMQ] is a lightweight, reliable, scalable, and portable\nmessage broker based on the AMQP protocol. Spring uses `RabbitMQ` to communicate through\nthe AMQP protocol.\n\nRabbitMQ configuration is controlled by external configuration properties in\n`+spring.rabbitmq.*+`. For example, you might declare the following section in\n`application.properties`:\n\n[source,properties,indent=0]\n----\n\tspring.rabbitmq.host=localhost\n\tspring.rabbitmq.port=5672\n\tspring.rabbitmq.username=admin\n\tspring.rabbitmq.password=secret\n----\n\nIf a `ConnectionNameStrategy` bean exists in the context, it will be automatically used to\nname connections created by the auto-configured `ConnectionFactory`. See\n{sc-spring-boot-autoconfigure}/amqp/RabbitProperties.{sc-ext}[`RabbitProperties`] for more\nof the supported options.\n\nTIP: See\nhttps://spring.io/blog/2010/06/14/understanding-amqp-the-protocol-used-by-rabbitmq/[Understanding\nAMQP, the protocol used by RabbitMQ] for more details.\n\n\n\n[[boot-features-using-amqp-sending]]\n==== Sending a Message\nSpring\'s `AmqpTemplate` and `AmqpAdmin` are auto-configured, and you can autowire them\ndirectly into your own beans, as shown in the following example:\n\n[source,java,indent=0]\n----\n\timport org.springframework.amqp.core.AmqpAdmin;\n\timport org.springframework.amqp.core.AmqpTemplate;\n\timport org.springframework.beans.factory.annotation.Autowired;\n\timport org.springframework.stereotype.Component;\n\n\t@Component\n\tpublic class MyBean {\n\n\t\tprivate final AmqpAdmin amqpAdmin;\n\t\tprivate final AmqpTemplate amqpTemplate;\n\n\t\t@Autowired\n\t\tpublic MyBean(AmqpAdmin amqpAdmin, AmqpTemplate amqpTemplate) {\n\t\t\tthis.amqpAdmin = amqpAdmin;\n\t\t\tthis.amqpTemplate = amqpTemplate;\n\t\t}\n\n\t\t// ...\n\n\t}\n----\n\nNOTE: {spring-amqp-javadoc}/rabbit/core/RabbitMessagingTemplate.{dc-ext}[`RabbitMessagingTemplate`]\ncan be injected in a similar manner. If a `MessageConverter` bean is defined, it is\nassociated automatically to the auto-configured `AmqpTemplate`.\n\nIf necessary, any `org.springframework.amqp.core.Queue` that is defined as a bean is\nautomatically used to declare a corresponding queue on the RabbitMQ instance.\n\nTo retry operations, you can enable retries on the `AmqpTemplate` (for example, in the\nevent that the broker connection is lost). Retries are disabled by default.\n\n\n\n[[boot-features-using-amqp-receiving]]\n==== Receiving a Message\nWhen the Rabbit infrastructure is present, any bean can be annotated with\n`@RabbitListener` to create a listener endpoint. If no `RabbitListenerContainerFactory`\nhas been defined, a default `SimpleRabbitListenerContainerFactory` is automatically\nconfigured and you can switch to a direct container using the\n`spring.rabbitmq.listener.type` property.  If a `MessageConverter` or a `MessageRecoverer`\nbean is defined, it is automatically associated with the default factory.\n\nThe following sample component creates a listener endpoint on the `someQueue` queue:\n\n[source,java,indent=0]\n----\n\t@Component\n\tpublic class MyBean {\n\n\t\t@RabbitListener(queues = "someQueue")\n\t\tpublic void processMessage(String content) {\n\t\t\t// ...\n\t\t}\n\n\t}\n----\n\nTIP: See {spring-amqp-javadoc}/rabbit/annotation/EnableRabbit.{dc-ext}[the Javadoc of\n`@EnableRabbit`] for more details.\n\nIf you need to create more `RabbitListenerContainerFactory` instances or if you want to\noverride the default, Spring Boot provides a\n`SimpleRabbitListenerContainerFactoryConfigurer` and a\n`DirectRabbitListenerContainerFactoryConfigurer` that you can use to initialize a\n`SimpleRabbitListenerContainerFactory` and a `DirectRabbitListenerContainerFactory` with\nthe same settings as the factories used by the auto-configuration.\n\nTIP: It does not matter which container type you chose. Those two beans are exposed by\nthe auto-configuration.\n\nFor instance, the following configuration class exposes another factory that uses a\nspecific `MessageConverter`:\n\n[source,java,indent=0]\n----\n\t@Configuration\n\tstatic class RabbitConfiguration {\n\n\t\t@Bean\n\t\tpublic SimpleRabbitListenerContainerFactory myFactory(\n\t\t\t\tSimpleRabbitListenerContainerFactoryConfigurer configurer) {\n\t\t\tSimpleRabbitListenerContainerFactory factory =\n\t\t\t\t\tnew SimpleRabbitListenerContainerFactory();\n\t\t\tconfigurer.configure(factory, connectionFactory);\n\t\t\tfactory.setMessageConverter(myMessageConverter());\n\t\t\treturn factory;\n\t\t}\n\n\t}\n----\n\nThen you can use the factory in any `@RabbitListener`-annotated method, as follows:\n\n[source,java,indent=0]\n[subs="verbatim,quotes"]\n----\n\t@Component\n\tpublic class MyBean {\n\n\t\t@RabbitListener(queues = "someQueue", **containerFactory="myFactory"**)\n\t\tpublic void processMessage(String content) {\n\t\t\t// ...\n\t\t}\n\n\t}\n----\n\nYou can enable retries to handle situations where your listener throws an exception. By\ndefault, `RejectAndDontRequeueRecoverer` is used, but you can define a `MessageRecoverer`\nof your own. When retries are exhausted, the message is rejected and either dropped or\nrouted to a dead-letter exchange if the broker is configured to do so. By default,\nretries are disabled.\n\nIMPORTANT: By default, if retries are disabled and the listener throws an exception, the\ndelivery is retried indefinitely. You can modify this behavior in two ways: Set the\n`defaultRequeueRejected` property to `false` so that zero re-deliveries are attempted or\nthrow an `AmqpRejectAndDontRequeueException` to signal the message should be rejected.\nThe latter is the mechanism used when retries are enabled and the maximum number of\ndelivery attempts is reached.\n\n\n\n[[boot-features-kafka]]\n=== Apache Kafka Support\nhttp://kafka.apache.org/[Apache Kafka] is supported by providing auto-configuration of\nthe `spring-kafka` project.\n\nKafka configuration is controlled by external configuration properties in\n`spring.kafka.*`. For example, you might declare the following section in\n`application.properties`:\n\n[source,properties,indent=0]\n----\n\tspring.kafka.bootstrap-servers=localhost:9092\n\tspring.kafka.consumer.group-id=myGroup\n----\n\nTIP: To create a topic on startup, add a bean of type `NewTopic`. If the topic already\nexists, the bean is ignored.\n\nSee {sc-spring-boot-autoconfigure}/kafka/KafkaProperties.{sc-ext}[`KafkaProperties`]\nfor more supported options.\n\n\n\n[[boot-features-kafka-sending-a-message]]\n==== Sending a Message\nSpring\'s `KafkaTemplate` is auto-configured, and you can autowire it directly in your own\nbeans, as shown in the following example:\n\n[source,java,indent=0]\n----\n@Component\npublic class MyBean {\n\n\tprivate final KafkaTemplate kafkaTemplate;\n\n\t@Autowired\n\tpublic MyBean(KafkaTemplate kafkaTemplate) {\n\t\tthis.kafkaTemplate = kafkaTemplate;\n\t}\n\n\t// ...\n\n}\n----\n\nNOTE: If the property `spring.kafka.producer.transaction-id-prefix` is defined, a\n`KafkaTransactionManager` is automatically configured. Also, if a `RecordMessageConverter`\nbean is defined, it is automatically associated to the auto-configured `KafkaTemplate`.\n\n\n[[boot-features-kafka-receiving-a-message]]\n==== Receiving a Message\nWhen the Apache Kafka infrastructure is present, any bean can be annotated with\n`@KafkaListener` to create a listener endpoint. If no `KafkaListenerContainerFactory` has\nbeen defined, a default one is automatically configured with keys defined in\n`spring.kafka.listener.*`. Also, if a `RecordMessageConverter` bean is defined, it is\nautomatically associated to the default factory.\n\nThe following component creates a listener endpoint on the `someTopic` topic:\n\n[source,java,indent=0]\n----\n\t@Component\n\tpublic class MyBean {\n\n\t\t@KafkaListener(topics = "someTopic")\n\t\tpublic void processMessage(String content) {\n\t\t\t// ...\n\t\t}\n\n\t}\n----\n\n\n\n[[boot-features-kafka-extra-props]]\n==== Additional Kafka Properties\nThe properties supported by auto configuration are shown in\n<<common-application-properties>>. Note that, for the most part, these properties\n(hyphenated or camelCase) map directly to the Apache Kafka dotted properties. Refer to the\nApache Kafka documentation for details.\n\nThe first few of these properties apply to both producers and consumers but can be\nspecified at the producer or consumer level if you wish to use different values for each.\nApache Kafka designates properties with an importance of HIGH, MEDIUM, or LOW. Spring Boot\nauto-configuration supports all HIGH importance properties, some selected MEDIUM and LOW\nproperties, and any properties that do not have a default value.\n\nOnly a subset of the properties supported by Kafka are available through the\n`KafkaProperties` class. If you wish to configure the producer or consumer with additional\nproperties that are not directly supported, use the following properties:\n\n[source,properties,indent=0]\n----\n\tspring.kafka.properties.prop.one=first\n\tspring.kafka.admin.properties.prop.two=second\n\tspring.kafka.consumer.properties.prop.three=third\n\tspring.kafka.producer.properties.prop.four=fourth\n----\n\nThis sets the common `prop.one` Kafka property to `first` (applies to producers,\nconsumers and admins), the `prop.two` admin property to `second`, the `prop.three`\nconsumer property to `third` and the `prop.four` producer property to `fourth`.\n\nYou can also configure the Spring Kafka `JsonDeserializer` as follows:\n\n[source,properties,indent=0]\n----\nspring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer\nspring.kafka.consumer.properties.spring.json.value.default.type=com.example.Invoice\nspring.kafka.consumer.properties.spring.json.trusted.packages=com.example,org.acme\n----\n\nSimilarly, you can disable the `JsonSerializer` default behavior of sending type\ninformation in headers:\n\n[source,properties,indent=0]\n----\nspring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer\nspring.kafka.producer.properties.spring.json.add.type.headers=false\n----\n\nIMPORTANT: Properties set in this way override any configuration item that Spring Boot\nexplicitly supports.\n\n[[boot-features-resttemplate]]\n== Calling REST Services with `RestTemplate`\nIf you need to call remote REST services from your application, you can use the Spring\nFramework\'s {spring-javadoc}/web/client/RestTemplate.html[`RestTemplate`] class. Since\n`RestTemplate` instances often need to be customized before being used, Spring Boot does\nnot provide any single auto-configured `RestTemplate` bean. It does, however,\nauto-configure a `RestTemplateBuilder`, which can be used to create `RestTemplate`\ninstances when needed. The auto-configured `RestTemplateBuilder` ensures that sensible\n`HttpMessageConverters` are applied to `RestTemplate` instances.\n\nThe following code shows a typical example:\n\n[source,java,indent=0]\n----\n\t@Service\n\tpublic class MyService {\n\n\t\tprivate final RestTemplate restTemplate;\n\n\t\tpublic MyService(RestTemplateBuilder restTemplateBuilder) {\n\t\t\tthis.restTemplate = restTemplateBuilder.build();\n\t\t}\n\n\t\tpublic Details someRestCall(String name) {\n\t\t\treturn this.restTemplate.getForObject("/{name}/details", Details.class, name);\n\t\t}\n\n\t}\n----\n\nTIP: `RestTemplateBuilder` includes a number of useful methods that can be used to\nquickly configure a `RestTemplate`. For example, to add BASIC auth support, you can use\n`builder.basicAuthorization("user", "password").build()`.\n\n\n\n[[boot-features-resttemplate-customization]]\n=== RestTemplate Customization\nThere are three main approaches to `RestTemplate` customization, depending on how broadly\nyou want the customizations to apply.\n\nTo make the scope of any customizations as narrow as possible, inject the auto-configured\n`RestTemplateBuilder` and then call its methods as required. Each method call returns a\nnew `RestTemplateBuilder` instance, so the customizations only affect this use of the\nbuilder.\n\nTo make an application-wide, additive customization, use a `RestTemplateCustomizer` bean.\nAll such beans are automatically registered with the auto-configured `RestTemplateBuilder`\nand are applied to any templates that are built with it.\n\nThe following example shows a customizer that configures the use of a proxy for all hosts\nexcept `192.168.0.5`:\n\n[source,java,indent=0]\n----\ninclude::{code-examples}/web/client/RestTemplateProxyCustomizationExample.java[tag=customizer]\n----\n\nFinally, the most extreme (and rarely used) option is to create your own\n`RestTemplateBuilder` bean. Doing so switches off the auto-configuration of a\n`RestTemplateBuilder` and prevents any `RestTemplateCustomizer` beans from being used.\n\n\n\n[[boot-features-webclient]]\n== Calling REST Services with `WebClient`\nIf you have Spring WebFlux on your classpath, you can also choose to use `WebClient` to\ncall remote REST services. Compared to `RestTemplate`, this client has a more functional\nfeel and is fully reactive. You can create your own client instance with the builder,\n`WebClient.create()`. See the {spring-reference}web.html#web-reactive-client[relevant\nsection on WebClient].\n\nSpring Boot creates and pre-configures such a builder for you. For example, client HTTP\ncodecs are configured in the same fashion as the server ones (see\n<<boot-features-webflux-httpcodecs,WebFlux HTTP codecs auto-configuration>>).\n\nThe following code shows a typical example:\n\n[source,java,indent=0]\n----\n\t@Service\n\tpublic class MyService {\n\n\t\tprivate final WebClient webClient;\n\n\t\tpublic MyService(WebClient.Builder webClientBuilder) {\n\t\t\tthis.webClient = webClientBuilder.baseUrl("http://example.org").build();\n\t\t}\n\n\t\tpublic Mono<Details> someRestCall(String name) {\n\t\t\treturn this.webClient.get().uri("/{name}/details", name)\n\t\t\t\t\t\t\t.retrieve().bodyToMono(Details.class);\n\t\t}\n\n\t}\n----\n\n\n\n[[boot-features-webclient-customization]]\n=== WebClient Customization\nThere are three main approaches to `WebClient` customization, depending on how broadly you\nwant the customizations to apply.\n\nTo make the scope of any customizations as narrow as possible, inject the auto-configured\n`WebClient.Builder` and then call its methods as required. `WebClient.Builder` instances\nare stateful: Any change on the builder is reflected in all clients subsequently created\nwith it. If you want to create several clients with the same builder, you can also\nconsider cloning the builder with `WebClient.Builder other = builder.clone();`.\n\nTo make an application-wide, additive customization to all `WebClient.Builder` instances,\nyou can declare `WebClientCustomizer` beans and change the `WebClient.Builder` locally at\nthe point of injection.\n\nFinally, you can fall back to the original API and use `WebClient.create()`. In that case,\nno auto-configuration or `WebClientCustomizer` is applied.\n\n\n\n[[boot-features-validation]]\n== Validation\nThe method validation feature supported by Bean Validation 1.1 is automatically enabled\nas long as a JSR-303 implementation (such as Hibernate validator) is on the classpath.\nThis lets bean methods be annotated with `javax.validation` constraints on their\nparameters and/or on their return value. Target classes with such annotated methods need\nto be annotated with the `@Validated` annotation at the type level for their methods to\nbe searched for inline constraint annotations.\n\nFor instance, the following service triggers the validation of the first argument, making\nsure its size is between 8 and 10:\n\n[source,java,indent=0]\n----\n\t@Service\n\t@Validated\n\tpublic class MyBean {\n\n\t\tpublic Archive findByCodeAndAuthor(@Size(min = 8, max = 10) String code,\n\t\t\t\tAuthor author) {\n\t\t\t...\n\t\t}\n\n\t}\n----\n\n\n\n[[boot-features-email]]\n== Sending Email\nThe Spring Framework provides an easy abstraction for sending email by using the\n`JavaMailSender` interface, and Spring Boot provides auto-configuration for it as well as\na starter module.\n\nTIP: See the {spring-reference}integration.html#mail[reference documentation] for a\ndetailed explanation of how you can use `JavaMailSender`.\n\nIf `spring.mail.host` and the relevant libraries (as defined by\n`spring-boot-starter-mail`) are available, a default `JavaMailSender` is created if none\nexists. The sender can be further customized by configuration items from the\n`spring.mail` namespace. See\n{sc-spring-boot-autoconfigure}/mail/MailProperties.{sc-ext}[`MailProperties`] for more\ndetails.\n\nIn particular, certain default timeout values are infinite, and you may want to change\nthat to avoid having a thread blocked by an unresponsive mail server, as shown in the\nfollowing example:\n\n[source,properties,indent=0]\n----\n\tspring.mail.properties.mail.smtp.connectiontimeout=5000\n\tspring.mail.properties.mail.smtp.timeout=3000\n\tspring.mail.properties.mail.smtp.writetimeout=5000\n----\n\nIt is also possible to configure a `JavaMailSender` with an existing `Session` from JNDI:\n\n[source,properties,indent=0]\n----\n\tspring.mail.jndi-name=mail/Session\n----\n\nWhen a `jndi-name` is set, it takes precedence over all other Session-related settings.\n\n\n\n[[boot-features-jta]]\n== Distributed Transactions with JTA\nSpring Boot supports distributed JTA transactions across multiple XA resources by using\neither an http://www.atomikos.com/[Atomikos] or https://github.com/bitronix/btm[Bitronix]\nembedded transaction manager. JTA transactions are also supported when deploying to a\nsuitable Java EE Application Server.\n\nWhen a JTA environment is detected, Spring\'s `JtaTransactionManager` is used to manage\ntransactions. Auto-configured JMS, DataSource, and JPA beans are upgraded to support XA\ntransactions. You can use standard Spring idioms, such as `@Transactional`, to participate\nin a distributed transaction. If you are within a JTA environment and still want to use\nlocal transactions, you can set the `spring.jta.enabled` property to `false` to disable\nthe JTA auto-configuration.\n\n\n\n[[boot-features-jta-atomikos]]\n=== Using an Atomikos Transaction Manager\nhttps://www.atomikos.com/[Atomikos] is a popular open source transaction manager which can\nbe embedded into your Spring Boot application. You can use the\n`spring-boot-starter-jta-atomikos` Starter to pull in the appropriate Atomikos libraries.\nSpring Boot auto-configures Atomikos and ensures that appropriate `depends-on` settings\nare applied to your Spring beans for correct startup and shutdown ordering.\n\nBy default, Atomikos transaction logs are written to a `transaction-logs` directory in\nyour application\'s home directory (the directory in which your application jar file\nresides). You can customize the location of this directory by setting a\n`spring.jta.log-dir` property in your `application.properties` file. Properties starting\nwith `spring.jta.atomikos.properties` can also be used to customize the Atomikos\n`UserTransactionServiceImp`. See the\n{dc-spring-boot}/jta/atomikos/AtomikosProperties.{dc-ext}[`AtomikosProperties` Javadoc]\nfor complete details.\n\nNOTE: To ensure that multiple transaction managers can safely coordinate the same\nresource managers, each Atomikos instance must be configured with a unique ID. By default,\nthis ID is the IP address of the machine on which Atomikos is running. To ensure\nuniqueness in production, you should configure the `spring.jta.transaction-manager-id`\nproperty with a different value for each instance of your application.\n\n\n\n[[boot-features-jta-bitronix]]\n=== Using a Bitronix Transaction Manager\nhttps://github.com/bitronix/btm[Bitronix] is a popular open-source JTA transaction\nmanager implementation. You can use the `spring-boot-starter-jta-bitronix` starter to add\nthe appropriate Bitronix dependencies to your project. As with Atomikos, Spring Boot\nautomatically configures Bitronix and post-processes your beans to ensure that startup and\nshutdown ordering is correct.\n\nBy default, Bitronix transaction log files (`part1.btm` and `part2.btm`) are written to\na `transaction-logs` directory in your application home directory. You can customize the\nlocation of this directory by setting the `spring.jta.log-dir` property. Properties\nstarting with `spring.jta.bitronix.properties` are also bound to the\n`bitronix.tm.Configuration` bean, allowing for complete customization. See the\nhttps://github.com/bitronix/btm/wiki/Transaction-manager-configuration[Bitronix\ndocumentation] for details.\n\nNOTE: To ensure that multiple transaction managers can safely coordinate the same\nresource managers, each Bitronix instance must be configured with a unique ID. By default,\nthis ID is the IP address of the machine on which Bitronix is running. To ensure\nuniqueness in production, you should configure the `spring.jta.transaction-manager-id`\nproperty with a different value for each instance of your application.\n\n\n\n[[boot-features-jta-narayana]]\n=== Using a Narayana Transaction Manager\nhttp://narayana.io/[Narayana] is a popular open source JTA transaction manager\nimplementation supported by JBoss. You can use the `spring-boot-starter-jta-narayana`\nstarter to add the appropriate Narayana dependencies to your project. As with Atomikos and\nBitronix, Spring Boot automatically configures Narayana and post-processes your beans to\nensure that startup and shutdown ordering is correct.\n\nBy default, Narayana transaction logs are written to a `transaction-logs` directory in\nyour application home directory (the directory in which your application jar file\nresides). You can customize the location of this directory by setting a\n`spring.jta.log-dir` property in your `application.properties` file. Properties starting\nwith `spring.jta.narayana.properties` can also be used to customize the Narayana\nconfiguration. See the\n{dc-spring-boot}/jta/narayana/NarayanaProperties.{dc-ext}[`NarayanaProperties` Javadoc]\nfor complete details.\n\nNOTE: To ensure that multiple transaction managers can safely coordinate the same\nresource managers, each Narayana instance must be configured with a unique ID. By\ndefault, this ID is set to `1`. To ensure uniqueness in production, you should configure\nthe `spring.jta.transaction-manager-id` property with a different value for each instance\nof your application.\n\n\n\n[[boot-features-jta-javaee]]\n=== Using a Java EE Managed Transaction Manager\nIf you package your Spring Boot application as a `war` or `ear` file and deploy it to a\nJava EE application server, you can use your application server\'s built-in transaction\nmanager. Spring Boot tries to auto-configure a transaction manager by looking at common\nJNDI locations (`java:comp/UserTransaction`, `java:comp/TransactionManager`, and so on).\nIf you use a transaction service provided by your application server, you generally also\nwant to ensure that all resources are managed by the server and exposed over JNDI. Spring\nBoot tries to auto-configure JMS by looking for a `ConnectionFactory` at the JNDI path\n(`java:/JmsXA` or `java:/XAConnectionFactory`), and you can use the\n<<boot-features-connecting-to-a-jndi-datasource, `spring.datasource.jndi-name` property>>\nto configure your `DataSource`.\n\n\n\n[[boot-features-jta-mixed-jms]]\n=== Mixing XA and Non-XA JMS Connections\nWhen using JTA, the primary JMS `ConnectionFactory` bean is XA-aware and participates\nin distributed transactions. In some situations, you might want to process certain JMS\nmessages by using a non-XA `ConnectionFactory`. For example, your JMS processing logic\nmight take longer than the XA timeout.\n\nIf you want to use a non-XA `ConnectionFactory`, you can inject the\n`nonXaJmsConnectionFactory` bean rather than the `@Primary` `jmsConnectionFactory` bean.\nFor consistency, the `jmsConnectionFactory` bean is also provided by using the bean alias\n`xaJmsConnectionFactory`.\n\nThe following example shows how to inject `ConnectionFactory` instances:\n\n[source,java,indent=0,subs="verbatim,quotes,attributes"]\n----\n\t// Inject the primary (XA aware) ConnectionFactory\n\t@Autowired\n\tprivate ConnectionFactory defaultConnectionFactory;\n\n\t// Inject the XA aware ConnectionFactory (uses the alias and injects the same as above)\n\t@Autowired\n\t@Qualifier("xaJmsConnectionFactory")\n\tprivate ConnectionFactory xaConnectionFactory;\n\n\t// Inject the non-XA aware ConnectionFactory\n\t@Autowired\n\t@Qualifier("nonXaJmsConnectionFactory")\n\tprivate ConnectionFactory nonXaConnectionFactory;\n----\n\n\n\n[[boot-features-jta-supporting-alternative-embedded]]\n=== Supporting an Alternative Embedded Transaction Manager\nThe {sc-spring-boot}/jms/XAConnectionFactoryWrapper.{sc-ext}[`XAConnectionFactoryWrapper`]\nand {sc-spring-boot}/jdbc/XADataSourceWrapper.{sc-ext}[`XADataSourceWrapper`] interfaces\ncan be used to support alternative embedded transaction managers. The interfaces are\nresponsible for wrapping `XAConnectionFactory` and `XADataSource` beans and exposing them\nas regular `ConnectionFactory` and `DataSource` beans, which transparently enroll in the\ndistributed transaction. DataSource and JMS auto-configuration use JTA variants, provided\nyou have a `JtaTransactionManager` bean and appropriate XA wrapper beans registered\nwithin your `ApplicationContext`.\n\nThe {sc-spring-boot}/jta/bitronix/BitronixXAConnectionFactoryWrapper.{sc-ext}[BitronixXAConnectionFactoryWrapper]\nand {sc-spring-boot}/jta/bitronix/BitronixXADataSourceWrapper.{sc-ext}[BitronixXADataSourceWrapper]\nprovide good examples of how to write XA wrappers.\n\n\n\n[[boot-features-hazelcast]]\n== Hazelcast\n\nIf https://hazelcast.com/[Hazelcast] is on the classpath and a suitable configuration is\nfound, Spring Boot auto-configures a `HazelcastInstance` that you can inject in your\napplication.\n\nIf you define a `com.hazelcast.config.Config` bean, Spring Boot uses that. If your\nconfiguration defines an instance name, Spring Boot tries to locate an existing instance\nrather than creating a new one.\n\nYou could also specify the `hazelcast.xml` configuration file to use through\nconfiguration, as shown in the following example:\n\n[source,properties,indent=0]\n----\n\tspring.hazelcast.config=classpath:config/my-hazelcast.xml\n----\n\nOtherwise, Spring Boot tries to find the Hazelcast configuration from the default\nlocations: `hazelcast.xml` in the working directory or at the root of the classpath. We\nalso check if the `hazelcast.config` system property is set. See the\nhttp://docs.hazelcast.org/docs/latest/manual/html-single/[Hazelcast documentation] for\nmore details.\n\nIf `hazelcast-client` is present on the classpath, Spring Boot first attempts to create a\nclient by checking the following configuration options:\n\n* The presence of a `com.hazelcast.client.config.ClientConfig` bean.\n* A configuration file defined by the `spring.hazelcast.config` property.\n* The presence of the `hazelcast.client.config` system property.\n* A `hazelcast-client.xml` in the working directory or at the root of the classpath.\n\nNOTE: Spring Boot also has\n<<boot-features-caching-provider-hazelcast,explicit caching support for Hazelcast>>. If\ncaching is enabled, the `HazelcastInstance` is automatically wrapped in a `CacheManager`\nimplementation.\n\n\n\n[[boot-features-quartz]]\n== Quartz Scheduler\nSpring Boot offers several conveniences for working with the\nhttp://www.quartz-scheduler.org/[Quartz scheduler], including the\n`spring-boot-starter-quartz` "`Starter`". If Quartz is available, a `Scheduler` is\nauto-configured (through the `SchedulerFactoryBean` abstraction).\n\nBeans of the following types are automatically picked up and associated with the\n`Scheduler`:\n\n* `JobDetail`: defines a particular Job. `JobDetail` instances can be built with the\n`JobBuilder` API.\n* `Calendar`.\n* `Trigger`: defines when a particular job is triggered.\n\nBy default, an in-memory `JobStore` is used. However, it is possible to configure a\nJDBC-based store if a `DataSource` bean is available in your application and if the\n`spring.quartz.job-store-type` property is configured accordingly, as shown in the\nfollowing example:\n\n[source,properties,indent=0]\n----\n\tspring.quartz.job-store-type=jdbc\n----\n\nWhen the JDBC store is used, the schema can be initialized on startup, as shown in the\nfollowing example:\n\n[source,properties,indent=0]\n----\n\tspring.quartz.jdbc.initialize-schema=always\n----\n\nWARNING: By default, the database is detected and initialized by using the standard scripts\nprovided with the Quartz library. These scripts drop existing tables, deleting all triggers\non every restart. It is also possible to provide a custom script by setting the\n`spring.quartz.jdbc.schema` property.\n\nTo have Quartz use a `DataSource` other than the application\'s main `DataSource`, declare\na `DataSource` bean, annotating its `@Bean` method with `@QuartzDataSource`. Doing so\nensures that the Quartz-specific `DataSource` is used by both the `SchedulerFactoryBean`\nand for schema initialization.\n\nQuartz Scheduler configuration can be customized by using Quartz configuration properties\n()`spring.quartz.properties.*`) and `SchedulerFactoryBeanCustomizer` beans, which allow\nprogrammatic `SchedulerFactoryBean` customization.\n\nNOTE: In particular, an `Executor` bean is not associated with the scheduler as Quartz\noffers a way to configure the scheduler via `spring.quartz.properties`. If you need\nto customize the task executor, consider implementing `SchedulerFactoryBeanCustomizer`.\n\nJobs can define setters to inject data map properties. Regular beans can also be injected\nin a similar manner, as shown in the following example:\n\n[source,java,indent=0]\n----\n\tpublic class SampleJob extends QuartzJobBean {\n\n\t\tprivate MyService myService;\n\n\t\tprivate String name;\n\n\t\t// Inject "MyService" bean\n\t\tpublic void setMyService(MyService myService) { ... }\n\n\t\t// Inject the "name" job data property\n\t\tpublic void setName(String name) { ... }\n\n\t\t@Override\n\t\tprotected void executeInternal(JobExecutionContext context)\n\t\t\t\tthrows JobExecutionException {\n\t\t\t...\n\t\t}\n\n\t}\n----\n\n\n\n[[boot-features-integration]]\n== Spring Integration\nSpring Boot offers several conveniences for working with {spring-integration}[Spring\nIntegration], including the `spring-boot-starter-integration` "`Starter`". Spring\nIntegration provides abstractions over messaging and also other transports such as HTTP,\nTCP, and others. If Spring Integration is available on your classpath, it is initialized\nthrough the `@EnableIntegration` annotation.\n\nSpring Boot also configures some features that are triggered by the presence of additional\nSpring Integration modules. If `spring-integration-jmx` is also on the classpath,\nmessage processing statistics are published over JMX . If `spring-integration-jdbc` is\navailable, the default database schema can be created on startup, as shown in the\nfollowing line:\n\n[source,properties,indent=0]\n----\n\tspring.integration.jdbc.initialize-schema=always\n----\n\nSee the\n{sc-spring-boot-autoconfigure}/integration/IntegrationAutoConfiguration.{sc-ext}[`IntegrationAutoConfiguration`]\nand {sc-spring-boot-autoconfigure}/integration/IntegrationProperties.{sc-ext}[`IntegrationProperties`]\nclasses for more details.\n\nBy default, if a Micrometer `meterRegistry` bean is present, Spring Integration metrics\nwill be managed by Micrometer. If you wish to use legacy Spring Integration metrics, add\na `DefaultMetricsFactory` bean to the application context.\n\n\n\n[[boot-features-session]]\n== Spring Session\nSpring Boot provides {spring-session}[Spring Session] auto-configuration for a wide range\nof data stores. When building a Servlet web application, the following stores can be\nauto-configured:\n\n* JDBC\n* Redis\n* Hazelcast\n* MongoDB\n\nWhen building a reactive web application, the following stores can be auto-configured:\n\n* Redis\n* MongoDB\n\nIf a single Spring Session module is present on the classpath, Spring Boot uses that store\nimplementation automatically. If you have more than one implementation, you must choose\nthe {sc-spring-boot-autoconfigure}/session/StoreType.{sc-ext}[`StoreType`] that you wish\nto use to store the sessions. For instance, to use JDBC as the back-end store, you can\nconfigure your application as follows:\n\n[source,properties,indent=0]\n----\n    spring.session.store-type=jdbc\n----\n\nTIP: You can disable Spring Session by setting the `store-type` to `none`.\n\nEach store has specific additional settings. For instance, it is possible to customize\nthe name of the table for the JDBC store, as shown in the following example:\n\n[source,properties,indent=0]\n----\n    spring.session.jdbc.table-name=SESSIONS\n----\n\nFor setting the timeout of the session you can use the `spring.session.timeout` property.\nIf that property is not set, the auto-configuration falls back to the value of\n`server.servlet.session.timeout`.\n\n[[boot-features-jmx]]\n== Monitoring and Management over JMX\nJava Management Extensions (JMX) provide a standard mechanism to monitor and manage\napplications. By default, Spring Boot creates an `MBeanServer` bean with an ID of\n`mbeanServer` and exposes any of your beans that are annotated with Spring JMX\nannotations (`@ManagedResource`, `@ManagedAttribute`, or `@ManagedOperation`).\n\nSee the\n{sc-spring-boot-autoconfigure}/jmx/JmxAutoConfiguration.{sc-ext}[`JmxAutoConfiguration`]\nclass for more details.\n\n\n\n[[boot-features-testing]]\n== Testing\nSpring Boot provides a number of utilities and annotations to help when testing your\napplication. Test support is provided by two modules: `spring-boot-test` contains core\nitems, and `spring-boot-test-autoconfigure` supports auto-configuration for tests.\n\nMost developers use the `spring-boot-starter-test` "`Starter`", which imports both Spring\nBoot test modules as well as JUnit, AssertJ, Hamcrest, and a number of other useful\nlibraries.\n\n\n\n[[boot-features-test-scope-dependencies]]\n=== Test Scope Dependencies\nThe `spring-boot-starter-test` "`Starter`" (in the `test` `scope`) contains\nthe following provided libraries:\n\n* http://junit.org[JUnit]: The de-facto standard for unit testing Java applications.\n* {spring-reference}testing.html#integration-testing[Spring Test] & Spring Boot Test:\nUtilities and integration test support for Spring Boot applications.\n* http://joel-costigliola.github.io/assertj/[AssertJ]: A fluent assertion library.\n* http://hamcrest.org/JavaHamcrest/[Hamcrest]: A library of matcher objects (also known\nas constraints or predicates).\n* http://mockito.org/[Mockito]: A Java mocking framework.\n* https://github.com/skyscreamer/JSONassert[JSONassert]: An assertion library for JSON.\n* https://github.com/jayway/JsonPath[JsonPath]: XPath for JSON.\n\nWe generally find these common libraries to be useful when writing tests. If these\nlibraries do not suit your needs, you can add additional test dependencies of your own.\n\n\n\n[[boot-features-testing-spring-applications]]\n=== Testing Spring Applications\nOne of the major advantages of dependency injection is that it should make your code\neasier to unit test. You can instantiate objects by using the `new` operator without\neven involving Spring. You can also use _mock objects_ instead of real dependencies.\n\nOften, you need to move beyond unit testing and start integration testing (with\na Spring `ApplicationContext`). It is useful to be able to perform integration testing\nwithout requiring deployment of your application or needing to connect to other\ninfrastructure.\n\nThe Spring Framework includes a dedicated test module for such integration testing. You\ncan declare a dependency directly to `org.springframework:spring-test` or use the\n`spring-boot-starter-test` "`Starter`" to pull it in transitively.\n\nIf you have not used the `spring-test` module before, you should start by reading the\n{spring-reference}testing.html#testing[relevant section] of the Spring Framework\nreference documentation.\n\n\n\n[[boot-features-testing-spring-boot-applications]]\n=== Testing Spring Boot Applications\nA Spring Boot application is a Spring `ApplicationContext`, so nothing very special has\nto be done to test it beyond what you would normally do with a vanilla Spring context.\n\nNOTE: External properties, logging, and other features of Spring Boot are installed in the\ncontext by default only if you use `SpringApplication` to create it.\n\nSpring Boot provides a `@SpringBootTest` annotation, which can be used as an alternative\nto the standard `spring-test` `@ContextConfiguration` annotation when you need Spring\nBoot features. The annotation works by\n<<boot-features-testing-spring-boot-applications-detecting-config,creating the\n`ApplicationContext` used in your tests through `SpringApplication`>>. In addition to\n`@SpringBootTest` a number of other annotations are also provided for\n<<boot-features-testing-spring-boot-applications-testing-autoconfigured-tests,testing more\nspecific slices>> of an application.\n\nTIP: Don\'t forget to also add `@RunWith(SpringRunner.class)` to your test, otherwise\nthe annotations will be ignored.\n\nBy default, `@SpringBootTest` will not start a server. You can use the `webEnvironment`\nattribute of `@SpringBootTest` to further refine how your tests run:\n\n* `MOCK`(Default) : Loads a web `ApplicationContext` and provides a mock web\nenvironment. Embedded servers are not started when using this annotation. If a web\nenvironment is not available on your classpath, this mode transparently falls back to\ncreating a regular non-web `ApplicationContext`. It can be used in conjunction with\n<<boot-features-testing-spring-boot-applications-testing-with-mock-environment,\n`@AutoConfigureMockMvc` or `@AutoConfigureWebTestClient`>> for mock-based testing of your\nweb application.\n* `RANDOM_PORT`: Loads a `WebServerApplicationContext` and provides a real web\nenvironment. Embedded servers are started and listen on a random port.\n* `DEFINED_PORT`: Loads a `WebServerApplicationContext` and provides a real web\nenvironment. Embedded servers  are started and listen on a defined port (from your\n`application.properties` or on the default port of `8080`).\n* `NONE`: Loads an `ApplicationContext` by using `SpringApplication` but does not provide\n_any_ web environment (mock or otherwise).\n\nNOTE: If your test is `@Transactional`, it rolls back the transaction at the end of each\ntest method by default. However, as using this arrangement with either `RANDOM_PORT` or\n`DEFINED_PORT` implicitly provides a real servlet environment, the HTTP client and server\nrun in separate threads and, thus, in separate transactions. Any transaction initiated on\nthe server does not roll back in this case.\n\n\n\n[[boot-features-testing-spring-boot-applications-detecting-web-app-type]]\n==== Detecting Web Application Type\nIf Spring MVC is available, a regular MVC-based application context is configured. If you\nhave only Spring WebFlux, we\'ll detect that and configure a WebFlux-based application\ncontext instead.\n\nIf both are present, Spring MVC takes precedence. If you want to test a reactive web\napplication in this scenario, you must set the `spring.main.web-application-type`\nproperty:\n\n[source,java,indent=0]\n----\n\t@RunWith(SpringRunner.class)\n\t@SpringBootTest(properties = "spring.main.web-application-type=reactive")\n\tpublic class MyWebFluxTests { ... }\n----\n\n\n\n[[boot-features-testing-spring-boot-applications-detecting-config]]\n==== Detecting Test Configuration\nIf you are familiar with the Spring Test Framework, you may be used to using\n`@ContextConfiguration(classes=...)` in order to specify which Spring `@Configuration` to\nload. Alternatively, you might have often used nested `@Configuration` classes within\nyour test.\n\nWhen testing Spring Boot applications, this is often not required. Spring Boot\'s `@*Test`\nannotations search for your primary configuration automatically whenever you do not\nexplicitly define one.\n\nThe search algorithm works up from the package that contains the test until it finds a\nclass annotated with `@SpringBootApplication` or `@SpringBootConfiguration`. As long as\nyou <<using-boot-structuring-your-code, structured your code>> in a sensible way, your\nmain configuration is usually found.\n\n[NOTE]\n====\nIf you use a\n<<boot-features-testing-spring-boot-applications-testing-autoconfigured-tests, test\nannotation to test a more specific slice of your application>>, you should avoid adding\nconfiguration settings that are specific to a particular area on the\n<<boot-features-testing-spring-boot-applications-testing-user-configuration, main\nmethod\'s application class>>.\n\nThe underlying component scan configuration of `@SpringBootApplication` defines exclude\nfilters that are used to make sure slicing works as expected. If you are using an explicit\n`@ComponentScan` directive on your `@SpringBootApplication`-annotated class, be aware that\nthose filters will be disabled. If you are using slicing, you should define them again.\n====\n\nIf you want to customize the primary configuration, you can use a nested\n`@TestConfiguration` class. Unlike a nested `@Configuration` class, which would be used\ninstead of your application\'s primary configuration, a nested `@TestConfiguration` class\nis used in addition to your application\'s primary configuration.\n\nNOTE: Spring\'s test framework caches application contexts between tests. Therefore, as\nlong as your tests share the same configuration (no matter how it is discovered), the\npotentially time-consuming process of loading the context happens only once.\n\n\n\n[[boot-features-testing-spring-boot-applications-excluding-config]]\n==== Excluding Test Configuration\nIf your application uses component scanning (for example, if you use\n`@SpringBootApplication` or `@ComponentScan`), you may find top-level configuration\nclasses that you created only for specific tests accidentally get picked up everywhere.\n\nAs we <<boot-features-testing-spring-boot-applications-detecting-config,have seen\nearlier>>, `@TestConfiguration` can be used on an inner class of a test to customize the\nprimary configuration. When placed on a top-level class, `@TestConfiguration` indicates\nthat classes in `src/test/java` should not be picked up by scanning. You can then import\nthat class explicitly where it is required, as shown in the following example:\n\n[source,java,indent=0]\n----\n\t@RunWith(SpringRunner.class)\n\t@SpringBootTest\n\t@Import(MyTestsConfiguration.class)\n\tpublic class MyTests {\n\n\t\t@Test\n\t\tpublic void exampleTest() {\n\t\t\t...\n\t\t}\n\n\t}\n----\n\nNOTE: If you directly use `@ComponentScan` (that is, not through\n`@SpringBootApplication`) you need to register the `TypeExcludeFilter` with it. See\n{dc-spring-boot}/context/TypeExcludeFilter.{dc-ext}[the Javadoc] for details.\n\n\n[[boot-features-testing-spring-boot-applications-testing-with-mock-environment]]\n==== Testing with a mock environment\nBy default, `@SpringBootTest` does not start the server. If you have web endpoints that\nyou want to test against this mock environment, you can additionally configure\n{spring-reference}/testing.html#spring-mvc-test-framework[`MockMvc`] as shown in the\nfollowing example:\n\n[source,java,indent=0]\n----\ninclude::{code-examples}/test/web/MockMvcExampleTests.java[tag=test-mock-mvc]\n----\n\nTIP: If you want to focus only on the web layer and not start a complete\n`ApplicationContext`, consider\n<<boot-features-testing-spring-boot-applications-testing-autoconfigured-mvc-tests,using\n`@WebMvcTest` instead>>.\n\nAlternatively, you can configure a\n{spring-reference}testing.html#webtestclient-tests[`WebTestClient`] as shown in the\nfollowing example:\n\n[source,java,indent=0]\n----\ninclude::{code-examples}/test/web/MockWebTestClientExampleTests.java[tag=test-mock-web-test-client]\n----\n\n\n\n[[boot-features-testing-spring-boot-applications-testing-with-running-server]]\n==== Testing with a running server\nIf you need to start a full running server, we recommend that you use random ports.\nIf you use `@SpringBootTest(webEnvironment=WebEnvironment.RANDOM_PORT)`, an\navailable port is picked at random each time your test runs.\n\nThe `@LocalServerPort` annotation can be used to\n<<howto-discover-the-http-port-at-runtime,inject the actual port used>> into your test.\nFor convenience, tests that need to make REST calls to the started server can\nadditionally `@Autowire` a\n{spring-reference}testing.html#webtestclient-tests[`WebTestClient`], which resolves\nrelative links to the running server and comes with a dedicated API for verifying\nresponses, as shown in the following example:\n\n[source,java,indent=0]\n----\ninclude::{code-examples}/test/web/RandomPortWebTestClientExampleTests.java[tag=test-random-port]\n----\n\nThis setup requires `spring-webflux` on the classpath. If you can\'t or won\'t add webflux,\nSpring Boot also provides a `TestRestTemplate` facility:\n\n[source,java,indent=0]\n----\ninclude::{code-examples}/test/web/RandomPortTestRestTemplateExampleTests.java[tag=test-random-port]\n----\n\n\n\n[[boot-features-testing-spring-boot-applications-jmx]]\n==== Using JMX\nAs the test context framework caches context, JMX is disabled by default to prevent\nidentical components to register on the same domain. If such test needs access to an\n`MBeanServer`, consider marking it dirty as well:\n\n[source,java,indent=0]\n----\ninclude::{test-examples}/jmx/SampleJmxTests.java[tag=test]\n----\n\n\n\n[[boot-features-testing-spring-boot-applications-mocking-beans]]\n==== Mocking and Spying Beans\nWhen running tests, it is sometimes necessary to mock certain components within your\napplication context. For example, you may have a facade over some remote service that is\nunavailable during development. Mocking can also be useful when you want to simulate\nfailures that might be hard to trigger in a real environment.\n\nSpring Boot includes a `@MockBean` annotation that can be used to define a Mockito mock\nfor a bean inside your `ApplicationContext`. You can use the annotation to add new beans\nor replace a single existing bean definition. The annotation can be used directly on test\nclasses, on fields within your test, or on `@Configuration` classes and fields. When used\non a field, the instance of the created mock is also injected. Mock beans are\nautomatically reset after each test method.\n\n[NOTE]\n====\nIf your test uses one of Spring Boot\'s test annotations (such as `@SpringBootTest`), this\nfeature is automatically enabled. To use this feature with a different\narrangement, a listener must be explicitly added, as shown in the following example:\n\n[source,java,indent=0]\n----\n\t@TestExecutionListeners(MockitoTestExecutionListener.class)\n----\n\n====\n\nThe following example replaces an existing `RemoteService` bean with a mock\nimplementation:\n\n[source,java,indent=0]\n----\n\timport org.junit.*;\n\timport org.junit.runner.*;\n\timport org.springframework.beans.factory.annotation.*;\n\timport org.springframework.boot.test.context.*;\n\timport org.springframework.boot.test.mock.mockito.*;\n\timport org.springframework.test.context.junit4.*;\n\n\timport static org.assertj.core.api.Assertions.*;\n\timport static org.mockito.BDDMockito.*;\n\n\t@RunWith(SpringRunner.class)\n\t@SpringBootTest\n\tpublic class MyTests {\n\n\t\t@MockBean\n\t\tprivate RemoteService remoteService;\n\n\t\t@Autowired\n\t\tprivate Reverser reverser;\n\n\t\t@Test\n\t\tpublic void exampleTest() {\n\t\t\t// RemoteService has been injected into the reverser bean\n\t\t\tgiven(this.remoteService.someCall()).willReturn("mock");\n\t\t\tString reverse = reverser.reverseSomeCall();\n\t\t\tassertThat(reverse).isEqualTo("kcom");\n\t\t}\n\n\t}\n----\n\nAdditionally, you can use `@SpyBean` to wrap any existing bean with a Mockito `spy`. See\nthe {dc-spring-boot-test}/mock/mockito/SpyBean.{dc-ext}[Javadoc] for full details.\n\nNOTE: While Spring\'s test framework caches application contexts between tests and reuses\na context for tests sharing the same configuration, the use of `@MockBean` or `@SpyBean`\ninfluences the cache key, which will most likely increase the number of contexts.\n\nTIP: If you are using `@SpyBean` to spy on a bean with `@Cacheable` methods that refer\nto parameters by name, your application must be compiled with `-parameters`. This\nensures that the parameter names are available to the caching infrastructure once the\nbean has been spied upon.\n\n\n\n[[boot-features-testing-spring-boot-applications-testing-autoconfigured-tests]]\n==== Auto-configured Tests\nSpring Boot\'s auto-configuration system works well for applications but can sometimes be\na little too much for tests. It often helps to load only the parts of the configuration\nthat are required to test a "`slice`" of your application. For example, you might want to\ntest that Spring MVC controllers are mapping URLs correctly, and you do not want to\ninvolve database calls in those tests, or you might want to test JPA entities, and you\nare not interested in the web layer when those tests run.\n\nThe `spring-boot-test-autoconfigure` module includes a number of annotations that can be\nused to automatically configure such "`slices`". Each of them works in a similar way,\nproviding a `@...Test` annotation that loads the `ApplicationContext` and one or\nmore `@AutoConfigure...` annotations that can be used to customize auto-configuration\nsettings.\n\nNOTE: Each slice restricts component scan to appropriate components and loads a very\nrestricted set of auto-configuration classes. If you need to exclude one of them,\nmost `@...Test` annotations provide an `excludeAutoConfiguration` attribute.\nAlternatively, you can use `@ImportAutoConfiguration#exclude`.\n\nTIP: It is also possible to use the `@AutoConfigure...` annotations with the standard\n`@SpringBootTest` annotation. You can use this combination if you are not interested in\n"`slicing`" your application but you want some of the auto-configured test beans.\n\n\n\n[[boot-features-testing-spring-boot-applications-testing-autoconfigured-json-tests]]\n==== Auto-configured JSON Tests\nTo test that object JSON serialization and deserialization is working as expected, you can\nuse the `@JsonTest` annotation. `@JsonTest` auto-configures the available supported JSON\nmapper, which can be one of the following libraries:\n\n* Jackson `ObjectMapper`, any `@JsonComponent` beans and any Jackson ``Module``s\n* `Gson`\n* `Jsonb`\n\nTIP: A list of the auto-configurations that are enabled by `@JsonTest` can be\n<<appendix-test-auto-configuration#test-auto-configuration,found in the appendix>>.\n\nIf you need to configure elements of the auto-configuration, you can use the\n`@AutoConfigureJsonTesters` annotation.\n\nSpring Boot includes AssertJ-based helpers that work with the JSONAssert and JsonPath\nlibraries to check that JSON appears as expected. The `JacksonTester`, `GsonTester`,\n`JsonbTester`, and `BasicJsonTester` classes can be used for Jackson, Gson, Jsonb, and\nStrings respectively. Any helper fields on the test class can be `@Autowired` when using\n`@JsonTest`. The following example shows a test class for Jackson:\n\n[source,java,indent=0]\n----\n\timport org.junit.*;\n\timport org.junit.runner.*;\n\timport org.springframework.beans.factory.annotation.*;\n\timport org.springframework.boot.test.autoconfigure.json.*;\n\timport org.springframework.boot.test.context.*;\n\timport org.springframework.boot.test.json.*;\n\timport org.springframework.test.context.junit4.*;\n\n\timport static org.assertj.core.api.Assertions.*;\n\n\t@RunWith(SpringRunner.class)\n\t@JsonTest\n\tpublic class MyJsonTests {\n\n\t\t@Autowired\n\t\tprivate JacksonTester<VehicleDetails> json;\n\n\t\t@Test\n\t\tpublic void testSerialize() throws Exception {\n\t\t\tVehicleDetails details = new VehicleDetails("Honda", "Civic");\n\t\t\t// Assert against a `.json` file in the same package as the test\n\t\t\tassertThat(this.json.write(details)).isEqualToJson("expected.json");\n\t\t\t// Or use JSON path based assertions\n\t\t\tassertThat(this.json.write(details)).hasJsonPathStringValue("@.make");\n\t\t\tassertThat(this.json.write(details)).extractingJsonPathStringValue("@.make")\n\t\t\t\t\t.isEqualTo("Honda");\n\t\t}\n\n\t\t@Test\n\t\tpublic void testDeserialize() throws Exception {\n\t\t\tString content = "{\\"make\\":\\"Ford\\",\\"model\\":\\"Focus\\"}";\n\t\t\tassertThat(this.json.parse(content))\n\t\t\t\t\t.isEqualTo(new VehicleDetails("Ford", "Focus"));\n\t\t\tassertThat(this.json.parseObject(content).getMake()).isEqualTo("Ford");\n\t\t}\n\n\t}\n----\n\nNOTE: JSON helper classes can also be used directly in standard unit tests. To do so,\ncall the `initFields` method of the helper in your `@Before` method if you do not use\n`@JsonTest`.\n\n\n\n[[boot-features-testing-spring-boot-applications-testing-autoconfigured-mvc-tests]]\n==== Auto-configured Spring MVC Tests\nTo test whether Spring MVC controllers are working as expected, use the `@WebMvcTest`\nannotation. `@WebMvcTest` auto-configures the Spring MVC infrastructure and limits\nscanned beans to `@Controller`, `@ControllerAdvice`, `@JsonComponent`, `Converter`,\n`GenericConverter`, `Filter`, `WebMvcConfigurer`, and `HandlerMethodArgumentResolver`.\nRegular `@Component` beans are not scanned when using this annotation.\n\nTIP: A list of the auto-configuration settings that are enabled by `@WebMvcTest` can be\n<<appendix-test-auto-configuration#test-auto-configuration,found in the appendix>>.\n\nTIP: If you need to register extra components, such as the Jackson `Module`, you can\nimport additional configuration classes by using `@Import` on your test.\n\nOften, `@WebMvcTest` is limited to a single controller and is used in combination with\n`@MockBean` to provide mock implementations for required collaborators.\n\n`@WebMvcTest` also auto-configures `MockMvc`. Mock MVC offers a powerful way to quickly\ntest MVC controllers without needing to start a full HTTP server.\n\nTIP: You can also auto-configure `MockMvc` in a non-`@WebMvcTest` (such as\n`@SpringBootTest`) by annotating it with `@AutoConfigureMockMvc`. The following example\nuses `MockMvc`:\n\n[source,java,indent=0]\n----\n\timport org.junit.*;\n\timport org.junit.runner.*;\n\timport org.springframework.beans.factory.annotation.*;\n\timport org.springframework.boot.test.autoconfigure.web.servlet.*;\n\timport org.springframework.boot.test.mock.mockito.*;\n\n\timport static org.assertj.core.api.Assertions.*;\n\timport static org.mockito.BDDMockito.*;\n\timport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\n\timport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n\n\t@RunWith(SpringRunner.class)\n\t@WebMvcTest(UserVehicleController.class)\n\tpublic class MyControllerTests {\n\n\t\t@Autowired\n\t\tprivate MockMvc mvc;\n\n\t\t@MockBean\n\t\tprivate UserVehicleService userVehicleService;\n\n\t\t@Test\n\t\tpublic void testExample() throws Exception {\n\t\t\tgiven(this.userVehicleService.getVehicleDetails("sboot"))\n\t\t\t\t\t.willReturn(new VehicleDetails("Honda", "Civic"));\n\t\t\tthis.mvc.perform(get("/sboot/vehicle").accept(MediaType.TEXT_PLAIN))\n\t\t\t\t\t.andExpect(status().isOk()).andExpect(content().string("Honda Civic"));\n\t\t}\n\n\t}\n----\n\nTIP: If you need to configure elements of the auto-configuration (for example, when\nservlet filters should be applied) you can use attributes in the `@AutoConfigureMockMvc`\nannotation.\n\nIf you use HtmlUnit or Selenium, auto-configuration also provides an HTMLUnit `WebClient`\nbean and/or a `WebDriver` bean. The following example uses HtmlUnit:\n\n\n[source,java,indent=0]\n----\n\timport com.gargoylesoftware.htmlunit.*;\n\timport org.junit.*;\n\timport org.junit.runner.*;\n\timport org.springframework.beans.factory.annotation.*;\n\timport org.springframework.boot.test.autoconfigure.web.servlet.*;\n\timport org.springframework.boot.test.mock.mockito.*;\n\n\timport static org.assertj.core.api.Assertions.*;\n\timport static org.mockito.BDDMockito.*;\n\n\t@RunWith(SpringRunner.class)\n\t@WebMvcTest(UserVehicleController.class)\n\tpublic class MyHtmlUnitTests {\n\n\t\t@Autowired\n\t\tprivate WebClient webClient;\n\n\t\t@MockBean\n\t\tprivate UserVehicleService userVehicleService;\n\n\t\t@Test\n\t\tpublic void testExample() throws Exception {\n\t\t\tgiven(this.userVehicleService.getVehicleDetails("sboot"))\n\t\t\t\t\t.willReturn(new VehicleDetails("Honda", "Civic"));\n\t\t\tHtmlPage page = this.webClient.getPage("/sboot/vehicle.html");\n\t\t\tassertThat(page.getBody().getTextContent()).isEqualTo("Honda Civic");\n\t\t}\n\n\t}\n----\n\nNOTE: By default, Spring Boot puts `WebDriver` beans in a special "`scope`" to ensure\nthat the driver exits after each test and that a new instance is injected. If you do\nnot want this behavior, you can add `@Scope("singleton")` to your `WebDriver` `@Bean`\ndefinition.\n\nWARNING: The `webDriver` scope created by Spring Boot will replace any user defined scope\nof the same name. If you define your own `webDriver` scope you may find it stops working\nwhen you use `@WebMvcTest`.\n\nTIP: Sometimes writing Spring MVC tests is not enough; Spring Boot can help you run\n<<boot-features-testing-spring-boot-applications-testing-with-running-server,\nfull end-to-end tests with an actual server>>.\n\n\n\n[[boot-features-testing-spring-boot-applications-testing-autoconfigured-webflux-tests]]\n==== Auto-configured Spring WebFlux Tests\nTo test that {spring-reference}/web-reactive.html[Spring WebFlux] controllers are\nworking as expected, you can use the `@WebFluxTest` annotation. `@WebFluxTest`\nauto-configures the Spring WebFlux infrastructure and limits scanned beans to\n`@Controller`, `@ControllerAdvice`, `@JsonComponent`, `Converter`, `GenericConverter`, and\n`WebFluxConfigurer`. Regular `@Component` beans are not scanned when the `@WebFluxTest`\nannotation is used.\n\nTIP: A list of the auto-configurations that are enabled by `@WebFluxTest` can be\n<<appendix-test-auto-configuration#test-auto-configuration,found in the appendix>>.\n\nTIP: If you need to register extra components, such as Jackson `Module`, you can import\nadditional configuration classes using `@Import` on your test.\n\nOften, `@WebFluxTest` is limited to a single controller and used in combination with the\n`@MockBean` annotation to provide mock implementations for required collaborators.\n\n`@WebFluxTest` also auto-configures\n{spring-reference}testing.html#webtestclient[`WebTestClient`], which offers\na powerful way to quickly test WebFlux controllers without needing to start a full HTTP\nserver.\n\nTIP: You can also auto-configure `WebTestClient` in a non-`@WebFluxTest` (such as\n`@SpringBootTest`) by annotating it with `@AutoConfigureWebTestClient`. The following\nexample shows a class that uses both `@WebFluxTest` and a `WebTestClient`:\n\n[source,java,indent=0]\n----\n\timport org.junit.Test;\n\timport org.junit.runner.RunWith;\n\n\timport org.springframework.beans.factory.annotation.Autowired;\n\timport org.springframework.boot.test.autoconfigure.web.reactive.WebFluxTest;\n\timport org.springframework.http.MediaType;\n\timport org.springframework.test.context.junit4.SpringRunner;\n\timport org.springframework.test.web.reactive.server.WebTestClient;\n\n\t@RunWith(SpringRunner.class)\n\t@WebFluxTest(UserVehicleController.class)\n\tpublic class MyControllerTests {\n\n\t\t@Autowired\n\t\tprivate WebTestClient webClient;\n\n\t\t@MockBean\n\t\tprivate UserVehicleService userVehicleService;\n\n\t\t@Test\n\t\tpublic void testExample() throws Exception {\n\t\t\tgiven(this.userVehicleService.getVehicleDetails("sboot"))\n\t\t\t\t\t.willReturn(new VehicleDetails("Honda", "Civic"));\n\t\t\tthis.webClient.get().uri("/sboot/vehicle").accept(MediaType.TEXT_PLAIN)\n\t\t\t\t\t.exchange()\n\t\t\t\t\t.expectStatus().isOk()\n\t\t\t\t\t.expectBody(String.class).isEqualTo("Honda Civic");\n\t\t}\n\n\t}\n----\n\nTIP: This setup is only supported by WebFlux applications as using `WebTestClient` in a\nmocked web application only works with WebFlux at the moment.\n\nNOTE: `@WebFluxTest` cannot detect routes registered via the functional web framework. For\ntesting `RouterFunction` beans in the context, consider importing your `RouterFunction`\nyourself via `@Import` or using `@SpringBootTest`.\n\nTIP: Sometimes writing Spring WebFlux tests is not enough; Spring Boot can help you run\n<<boot-features-testing-spring-boot-applications-testing-with-running-server,\nfull end-to-end tests with an actual server>>.\n\n\n\n[[boot-features-testing-spring-boot-applications-testing-autoconfigured-jpa-test]]\n==== Auto-configured Data JPA Tests\nYou can use the `@DataJpaTest` annotation to test JPA applications. By default, it\nconfigures an in-memory embedded database, scans for `@Entity` classes, and configures\nSpring Data JPA repositories. Regular `@Component` beans are not loaded into the\n`ApplicationContext`.\n\nTIP: A list of the auto-configuration settings that are enabled by `@DataJpaTest` can be\n<<appendix-test-auto-configuration#test-auto-configuration,found in the appendix>>.\n\nBy default, data JPA tests are transactional and roll back at the end of each test. See\nthe {spring-reference}testing.html#testcontext-tx-enabling-transactions[relevant section]\nin the Spring Framework Reference Documentation for more details. If that is not what you\nwant, you can disable transaction management for a test or for the whole class as\nfollows:\n\n[source,java,indent=0]\n----\n\timport org.junit.Test;\n\timport org.junit.runner.RunWith;\n\timport org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n\timport org.springframework.test.context.junit4.SpringRunner;\n\timport org.springframework.transaction.annotation.Propagation;\n\timport org.springframework.transaction.annotation.Transactional;\n\n\t@RunWith(SpringRunner.class)\n\t@DataJpaTest\n\t@Transactional(propagation = Propagation.NOT_SUPPORTED)\n\tpublic class ExampleNonTransactionalTests {\n\n\t}\n----\n\nData JPA tests may also inject a\n{sc-spring-boot-test-autoconfigure}/orm/jpa/TestEntityManager.{sc-ext}[`TestEntityManager`]\nbean, which provides an alternative to the standard JPA `EntityManager` that is\nspecifically designed for tests. If you want to use `TestEntityManager` outside of\n`@DataJpaTest` instances, you can also use the `@AutoConfigureTestEntityManager`\nannotation. A `JdbcTemplate` is also available if you need that. The following example\nshows the `@DataJpaTest` annotation in use:\n\n[source,java,indent=0]\n----\n\timport org.junit.*;\n\timport org.junit.runner.*;\n\timport org.springframework.boot.test.autoconfigure.orm.jpa.*;\n\n\timport static org.assertj.core.api.Assertions.*;\n\n\t@RunWith(SpringRunner.class)\n\t@DataJpaTest\n\tpublic class ExampleRepositoryTests {\n\n\t\t@Autowired\n\t\tprivate TestEntityManager entityManager;\n\n\t\t@Autowired\n\t\tprivate UserRepository repository;\n\n\t\t@Test\n\t\tpublic void testExample() throws Exception {\n\t\t\tthis.entityManager.persist(new User("sboot", "1234"));\n\t\t\tUser user = this.repository.findByUsername("sboot");\n\t\t\tassertThat(user.getUsername()).isEqualTo("sboot");\n\t\t\tassertThat(user.getVin()).isEqualTo("1234");\n\t\t}\n\n\t}\n----\n\nIn-memory embedded databases generally work well for tests, since they are fast and do\nnot require any installation. If, however, you prefer to run tests against a real\ndatabase you can use the `@AutoConfigureTestDatabase` annotation, as shown in the\nfollowing example:\n\n[source,java,indent=0]\n----\n\t@RunWith(SpringRunner.class)\n\t@DataJpaTest\n\t@AutoConfigureTestDatabase(replace=Replace.NONE)\n\tpublic class ExampleRepositoryTests {\n\n\t\t// ...\n\n\t}\n----\n\n\n\n[[boot-features-testing-spring-boot-applications-testing-autoconfigured-jdbc-test]]\n==== Auto-configured JDBC Tests\n`@JdbcTest` is similar to `@DataJpaTest` but is for tests that only require a\n`DataSource`. By default, it configures an in-memory embedded database and a\n`JdbcTemplate`. Regular `@Component` beans are not loaded into the `ApplicationContext`.\n\nTIP: A list of the auto-configurations that are enabled by `@JdbcTest` can be\n<<appendix-test-auto-configuration#test-auto-configuration,found in the appendix>>.\n\nBy default, JDBC tests are transactional and roll back at the end of each test. See the\n{spring-reference}testing.html#testcontext-tx-enabling-transactions[relevant section] in\nthe Spring Framework Reference Documentation for more details. If that is not what you\nwant, you can disable transaction management for a test or for the whole class, as\nfollows:\n\n[source,java,indent=0]\n----\n\timport org.junit.Test;\n\timport org.junit.runner.RunWith;\n\timport org.springframework.boot.test.autoconfigure.jdbc.JdbcTest;\n\timport org.springframework.test.context.junit4.SpringRunner;\n\timport org.springframework.transaction.annotation.Propagation;\n\timport org.springframework.transaction.annotation.Transactional;\n\n\t@RunWith(SpringRunner.class)\n\t@JdbcTest\n\t@Transactional(propagation = Propagation.NOT_SUPPORTED)\n\tpublic class ExampleNonTransactionalTests {\n\n\t}\n----\n\nIf you prefer your test to run against a real database, you can use the\n`@AutoConfigureTestDatabase` annotation in the same way as for `DataJpaTest`. (See\n"<<boot-features-testing-spring-boot-applications-testing-autoconfigured-jpa-test>>".)\n\n\n\n[[boot-features-testing-spring-boot-applications-testing-autoconfigured-jooq-test]]\n==== Auto-configured jOOQ Tests\nYou can use `@JooqTest` in a similar fashion as `@JdbcTest` but for jOOQ-related tests.\nAs jOOQ relies heavily on a Java-based schema that corresponds with the database schema,\nthe existing `DataSource` is used. If you want to replace it with an in-memory database,\nyou can use `@AutoConfigureTestDatabase` to override those settings. (For more about using\njOOQ with Spring Boot, see "<<boot-features-jooq>>", earlier in this chapter.) Regular\n`@Component` beans are not loaded into the `ApplicationContext`.\n\nTIP: A list of the auto-configurations that are enabled by `@JooqTest` can be\n<<appendix-test-auto-configuration#test-auto-configuration,found in the appendix>>.\n\n`@JooqTest` configures a `DSLContext`. Regular `@Component` beans are not loaded into the\n`ApplicationContext`. The following example shows the `@JooqTest` annotation in use:\n\n[source,java,indent=0]\n----\n\timport org.jooq.DSLContext;\n\timport org.junit.Test;\n\timport org.junit.runner.RunWith;\n\timport org.springframework.boot.test.autoconfigure.jooq.JooqTest;\n\timport org.springframework.test.context.junit4.SpringRunner;\n\n\t@RunWith(SpringRunner.class)\n\t@JooqTest\n\tpublic class ExampleJooqTests {\n\n\t\t@Autowired\n\t\tprivate DSLContext dslContext;\n\t}\n----\n\nJOOQ tests are transactional and roll back at the end of each test by default. If that is\nnot what you want, you can disable transaction management for a test or for the whole\ntest class as\n<<boot-features-testing-spring-boot-applications-testing-autoconfigured-jdbc-test,shown\nin the JDBC example>>.\n\n\n\n\n[[boot-features-testing-spring-boot-applications-testing-autoconfigured-mongo-test]]\n==== Auto-configured Data MongoDB Tests\nYou can use `@DataMongoTest` to test MongoDB applications. By default, it configures an\nin-memory embedded MongoDB (if available), configures a `MongoTemplate`, scans for\n`@Document` classes, and configures Spring Data MongoDB repositories. Regular\n`@Component` beans are not loaded into the `ApplicationContext`. (For more about using\nMongoDB with Spring Boot, see "<<boot-features-mongodb>>", earlier in this chapter.)\n\nTIP: A list of the auto-configuration settings that are enabled by `@DataMongoTest` can be\n<<appendix-test-auto-configuration#test-auto-configuration,found in the appendix>>.\n\nThe following class shows the `@DataMongoTest` annotation in use:\n\n[source,java,indent=0]\n----\n\timport org.junit.runner.RunWith;\n\timport org.springframework.beans.factory.annotation.Autowired;\n\timport org.springframework.boot.test.autoconfigure.data.mongo.DataMongoTest;\n\timport org.springframework.data.mongodb.core.MongoTemplate;\n\timport org.springframework.test.context.junit4.SpringRunner;\n\n\t@RunWith(SpringRunner.class)\n\t@DataMongoTest\n\tpublic class ExampleDataMongoTests {\n\n\t\t@Autowired\n\t\tprivate MongoTemplate mongoTemplate;\n\n\t\t//\n\t}\n----\n\nIn-memory embedded MongoDB generally works well for tests, since it is fast and does not\nrequire any developer installation. If, however, you prefer to run tests against a real\nMongoDB server, you should exclude the embedded MongoDB auto-configuration, as shown in\nthe following example:\n\n[source,java,indent=0]\n----\n\timport org.junit.runner.RunWith;\n  import org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration;\n\timport org.springframework.boot.test.autoconfigure.data.mongo.DataMongoTest;\n\timport org.springframework.test.context.junit4.SpringRunner;\n\n\t@RunWith(SpringRunner.class)\n\t@DataMongoTest(excludeAutoConfiguration = EmbeddedMongoAutoConfiguration.class)\n\tpublic class ExampleDataMongoNonEmbeddedTests {\n\n\t}\n----\n\n\n\n\n[[boot-features-testing-spring-boot-applications-testing-autoconfigured-neo4j-test]]\n==== Auto-configured Data Neo4j Tests\nYou can use `@DataNeo4jTest` to test Neo4j applications. By default, it uses an in-memory\nembedded Neo4j (if the embedded driver is available), scans for `@NodeEntity` classes, and\nconfigures Spring Data Neo4j repositories. Regular `@Component` beans are not loaded into\nthe `ApplicationContext`. (For more about using Neo4J with Spring Boot, see\n"<<boot-features-neo4j>>", earlier in this chapter.)\n\nTIP: A list of the auto-configuration settings that are enabled by `@DataNeo4jTest` can be\n<<appendix-test-auto-configuration#test-auto-configuration,found in the appendix>>.\n\nThe following example shows a typical setup for using Neo4J tests in Spring Boot:\n\n[source,java,indent=0]\n----\n\timport org.junit.runner.RunWith;\n\timport org.springframework.beans.factory.annotation.Autowired;\n\timport org.springframework.boot.test.autoconfigure.data.neo4j.DataNeo4jTest;\n\timport org.springframework.test.context.junit4.SpringRunner;\n\n\t@RunWith(SpringRunner.class)\n\t@DataNeo4jTest\n\tpublic class ExampleDataNeo4jTests {\n\n\t\t@Autowired\n\t\tprivate YourRepository repository;\n\n\t\t//\n\t}\n----\n\nBy default, Data Neo4j tests are transactional and roll back at the end of each test.\nSee the {spring-reference}testing.html#testcontext-tx-enabling-transactions[relevant\nsection] in the Spring Framework Reference Documentation for more details. If that is not\nwhat you want, you can disable transaction management for a test or for the whole class,\nas follows:\n\n[source,java,indent=0]\n----\n\timport org.junit.Test;\n\timport org.junit.runner.RunWith;\n\timport org.springframework.boot.test.autoconfigure.data.neo4j.DataNeo4jTest;\n\timport org.springframework.test.context.junit4.SpringRunner;\n\timport org.springframework.transaction.annotation.Propagation;\n\timport org.springframework.transaction.annotation.Transactional;\n\n\t@RunWith(SpringRunner.class)\n\t@DataNeo4jTest\n\t@Transactional(propagation = Propagation.NOT_SUPPORTED)\n\tpublic class ExampleNonTransactionalTests {\n\n\t}\n----\n\n\n\n\n[[boot-features-testing-spring-boot-applications-testing-autoconfigured-redis-test]]\n==== Auto-configured Data Redis Tests\nYou can use `@DataRedisTest` to test Redis applications. By default, it scans for\n`@RedisHash` classes and configures Spring Data Redis repositories. Regular `@Component`\nbeans are not loaded into the `ApplicationContext`. (For more about using Redis with\nSpring Boot, see "<<boot-features-redis>>", earlier in this chapter.)\n\nTIP: A list of the auto-configuration settings that are enabled by `@DataRedisTest` can be\n<<appendix-test-auto-configuration#test-auto-configuration,found in the appendix>>.\n\nThe following example shows the `@DataRedisTest` annotation in use:\n\n[source,java,indent=0]\n----\n\timport org.junit.runner.RunWith;\n\timport org.springframework.beans.factory.annotation.Autowired;\n\timport org.springframework.boot.test.autoconfigure.data.redis.DataRedisTest;\n\timport org.springframework.test.context.junit4.SpringRunner;\n\n\t@RunWith(SpringRunner.class)\n\t@DataRedisTest\n\tpublic class ExampleDataRedisTests {\n\n\t\t@Autowired\n\t\tprivate YourRepository repository;\n\n\t\t//\n\t}\n----\n\n\n\n[[boot-features-testing-spring-boot-applications-testing-autoconfigured-ldap-test]]\n==== Auto-configured Data LDAP Tests\nYou can use `@DataLdapTest` to test LDAP applications. By default, it configures an\nin-memory embedded LDAP (if available), configures an `LdapTemplate`, scans for `@Entry`\nclasses, and configures Spring Data LDAP repositories. Regular `@Component` beans are not\nloaded into the `ApplicationContext`. (For more about using LDAP with\nSpring Boot, see "<<boot-features-ldap>>", earlier in this chapter.)\n\nTIP: A list of the auto-configuration settings that are enabled by `@DataLdapTest` can be\n<<appendix-test-auto-configuration#test-auto-configuration,found in the appendix>>.\n\nThe following example shows the `@DataLdapTest` annotation in use:\n\n[source,java,indent=0]\n----\n\timport org.junit.runner.RunWith;\n\timport org.springframework.beans.factory.annotation.Autowired;\n\timport org.springframework.boot.test.autoconfigure.data.ldap.DataLdapTest;\n\timport org.springframework.ldap.core.LdapTemplate;\n\timport org.springframework.test.context.junit4.SpringRunner;\n\n\t@RunWith(SpringRunner.class)\n\t@DataLdapTest\n\tpublic class ExampleDataLdapTests {\n\n\t\t@Autowired\n\t\tprivate LdapTemplate ldapTemplate;\n\n\t\t//\n\t}\n----\n\nIn-memory embedded LDAP generally works well for tests, since it is fast and does not\nrequire any developer installation. If, however, you prefer to run tests against a real\nLDAP server, you should exclude the embedded LDAP auto-configuration, as shown in the\nfollowing example:\n\n[source,java,indent=0]\n----\n\timport org.junit.runner.RunWith;\n\timport org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration;\n\timport org.springframework.boot.test.autoconfigure.data.ldap.DataLdapTest;\n\timport org.springframework.test.context.junit4.SpringRunner;\n\n\t@RunWith(SpringRunner.class)\n\t@DataLdapTest(excludeAutoConfiguration = EmbeddedLdapAutoConfiguration.class)\n\tpublic class ExampleDataLdapNonEmbeddedTests {\n\n\t}\n----\n\n\n\n[[boot-features-testing-spring-boot-applications-testing-autoconfigured-rest-client]]\n==== Auto-configured REST Clients\nYou can use the `@RestClientTest` annotation to test REST clients. By default, it\nauto-configures Jackson, GSON, and Jsonb support, configures a `RestTemplateBuilder`, and\nadds support for `MockRestServiceServer`. Regular `@Component` beans are not loaded into\nthe `ApplicationContext`.\n\nTIP: A list of the auto-configuration settings that are enabled by `@RestClientTest` can\nbe <<appendix-test-auto-configuration#test-auto-configuration,found in the appendix>>.\n\nThe specific beans that you want to test should be specified by using the `value` or\n`components` attribute of `@RestClientTest`, as shown in the following example:\n\n[source,java,indent=0]\n----\n\t@RunWith(SpringRunner.class)\n\t@RestClientTest(RemoteVehicleDetailsService.class)\n\tpublic class ExampleRestClientTest {\n\n\t\t@Autowired\n\t\tprivate RemoteVehicleDetailsService service;\n\n\t\t@Autowired\n\t\tprivate MockRestServiceServer server;\n\n\t\t@Test\n\t\tpublic void getVehicleDetailsWhenResultIsSuccessShouldReturnDetails()\n\t\t\t\tthrows Exception {\n\t\t\tthis.server.expect(requestTo("/greet/details"))\n\t\t\t\t\t.andRespond(withSuccess("hello", MediaType.TEXT_PLAIN));\n\t\t\tString greeting = this.service.callRestService();\n\t\t\tassertThat(greeting).isEqualTo("hello");\n\t\t}\n\n\t}\n----\n\n\n\n[[boot-features-testing-spring-boot-applications-testing-autoconfigured-rest-docs]]\n==== Auto-configured Spring REST Docs Tests\nYou can use the `@AutoConfigureRestDocs` annotation to use {spring-rest-docs}[Spring REST\nDocs] in your tests with Mock MVC, REST Assured, or WebTestClient. It removes the need for\nthe JUnit rule in Spring REST Docs.\n\n`@AutoConfigureRestDocs` can be used to override the default output directory\n(`target/generated-snippets` if you are using Maven or `build/generated-snippets` if you\nare using Gradle). It can also be used to configure the host, scheme, and port that\nappears in any documented URIs.\n\n\n\n[[boot-features-testing-spring-boot-applications-testing-autoconfigured-rest-docs-mock-mvc]]\n===== Auto-configured Spring REST Docs Tests with Mock MVC\n`@AutoConfigureRestDocs` customizes the `MockMvc` bean to use Spring REST Docs. You can\ninject it by using `@Autowired` and use it in your tests as you normally would when using\nMock MVC and Spring REST Docs, as shown in the following example:\n\n[source,java,indent=0]\n----\n\timport org.junit.Test;\n\timport org.junit.runner.RunWith;\n\n\timport org.springframework.beans.factory.annotation.Autowired;\n\timport org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n\timport org.springframework.http.MediaType;\n\timport org.springframework.test.context.junit4.SpringRunner;\n\timport org.springframework.test.web.servlet.MockMvc;\n\n\timport static org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.document;\n\timport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n\timport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n\n\t@RunWith(SpringRunner.class)\n\t@WebMvcTest(UserController.class)\n\t@AutoConfigureRestDocs\n\tpublic class UserDocumentationTests {\n\n\t\t@Autowired\n\t\tprivate MockMvc mvc;\n\n\t\t@Test\n\t\tpublic void listUsers() throws Exception {\n\t\t\tthis.mvc.perform(get("/users").accept(MediaType.TEXT_PLAIN))\n\t\t\t\t\t.andExpect(status().isOk())\n\t\t\t\t\t.andDo(document("list-users"));\n\t\t}\n\n\t}\n----\n\nIf you require more control over Spring REST Docs configuration than offered by the\nattributes of `@AutoConfigureRestDocs`, you can use a\n`RestDocsMockMvcConfigurationCustomizer` bean, as shown in the following example:\n\n[source,java,indent=0]\n----\n\t@TestConfiguration\n\tstatic class CustomizationConfiguration\n\t\t\timplements RestDocsMockMvcConfigurationCustomizer {\n\n\t\t@Override\n\t\tpublic void customize(MockMvcRestDocumentationConfigurer configurer) {\n\t\t\tconfigurer.snippets().withTemplateFormat(TemplateFormats.markdown());\n\t\t}\n\n\t}\n----\n\nIf you want to make use of Spring REST Docs support for a parameterized output directory,\nyou can create a `RestDocumentationResultHandler` bean. The auto-configuration calls\n`alwaysDo` with this result handler, thereby causing each `MockMvc` call to automatically\ngenerate the default snippets. The following example shows a\n`RestDocumentationResultHandler` being defined:\n\n[source,java,indent=0]\n----\n\t@TestConfiguration\n\tstatic class ResultHandlerConfiguration {\n\n\t\t@Bean\n\t\tpublic RestDocumentationResultHandler restDocumentation() {\n\t\t\treturn MockMvcRestDocumentation.document("{method-name}");\n\t\t}\n\n\t}\n----\n\n\n\n[[boot-features-testing-spring-boot-applications-testing-autoconfigured-rest-docs-rest-assured]]\n===== Auto-configured Spring REST Docs Tests with REST Assured\n`@AutoConfigureRestDocs` makes a `RequestSpecification` bean, preconfigured to use Spring\nREST Docs, available to your tests. You can inject it by using `@Autowired` and use it in\nyour tests as you normally would when using REST Assured and Spring REST Docs, as shown\nin the following example:\n\n[source,java,indent=0]\n----\ninclude::{code-examples}/test/autoconfigure/restdocs/restassured/UserDocumentationTests.java[tag=source]\n----\n\nIf you require more control over Spring REST Docs configuration than offered by the\nattributes of `@AutoConfigureRestDocs`, a `RestDocsRestAssuredConfigurationCustomizer`\nbean can be used, as shown in the following example:\n\n[source,java,indent=0]\n----\ninclude::{code-examples}/test/autoconfigure/restdocs/restassured/AdvancedConfigurationExample.java[tag=configuration]\n----\n\n\n\n[[boot-features-testing-spring-boot-applications-testing-auto-configured-additional-auto-config]]\n==== Additional Auto-configuration and Slicing\nEach slice provides one or more `@AutoConfigure...` annotations that namely defines the\nauto-configurations that should be included as part of a slice. Additional\nauto-configurations can be added by creating a custom `@AutoConfigure...` annotation or\nsimply by adding `@ImportAutoConfiguration` to the test as shown in the following example:\n\n[source,java,indent=0]\n----\n\t@RunWith(SpringRunner.class)\n\t@JdbcTest\n\t@ImportAutoConfiguration(IntegrationAutoConfiguration.class)\n\tpublic class ExampleJdbcTests {\n\n\t}\n----\n\nNOTE: Make sure to not use the regular `@Import` annotation to import auto-configurations\nas they are handled in a specific way by Spring Boot.\n\n\n\n[[boot-features-testing-spring-boot-applications-testing-user-configuration]]\n==== User Configuration and Slicing\nIf you <<using-boot-structuring-your-code, structure your code>> in a sensible way, your\n`@SpringBootApplication` class is\n<<boot-features-testing-spring-boot-applications-detecting-config, used by default>> as\nthe configuration of your tests.\n\nIt then becomes important not to litter the application\'s main class with configuration\nsettings that are specific to a particular area of its functionality.\n\nAssume that you are using Spring Batch and you rely on the auto-configuration for it.\nYou could define your `@SpringBootApplication` as follows:\n\n[source,java,indent=0]\n----\n\t@SpringBootApplication\n\t@EnableBatchProcessing\n\tpublic class SampleApplication { ... }\n----\n\nBecause this class is the source configuration for the test, any slice test actually\ntries to start Spring Batch, which is definitely not what you want to do. A recommended\napproach is to move that area-specific configuration to a separate `@Configuration` class\nat the same level as your application, as shown in the following example:\n\n[source,java,indent=0]\n----\n\t@Configuration\n\t@EnableBatchProcessing\n\tpublic class BatchConfiguration { ... }\n----\n\nNOTE: Depending on the complexity of your application, you may either have a single\n`@Configuration` class for your customizations or one class per domain area. The latter\napproach lets you enable it in one of your tests, if necessary, with the `@Import`\nannotation.\n\nAnother source of confusion is classpath scanning. Assume that, while you structured your\ncode in a sensible way, you need to scan an additional package. Your application may\nresemble the following code:\n\n[source,java,indent=0]\n----\n\t@SpringBootApplication\n\t@ComponentScan({ "com.example.app", "org.acme.another" })\n\tpublic class SampleApplication { ... }\n----\n\nDoing so effectively overrides the default component scan directive with the side effect\nof scanning those two packages regardless of the slice that you chose. For instance, a\n`@DataJpaTest` seems to suddenly scan components and user configurations of your\napplication. Again, moving the custom directive to a separate class is a good way to fix\nthis issue.\n\nTIP: If this is not an option for you, you can create a `@SpringBootConfiguration`\nsomewhere in the hierarchy of your test so that it is used instead. Alternatively, you\ncan specify a source for your test, which disables the behavior of finding a default one.\n\n\n\n[[boot-features-testing-spring-boot-applications-with-spock]]\n==== Using Spock to Test Spring Boot Applications\nIf you wish to use Spock to test a Spring Boot application, you should add a dependency\non Spock\'s `spock-spring` module to your application\'s build. `spock-spring` integrates\nSpring\'s test framework into Spock. It is recommended that you use Spock 1.2 or later to\nbenefit from a number of improvements to Spock\'s Spring Framework and Spring Boot\nintegration. See http://spockframework.org/spock/docs/1.2/modules.html#_spring_module[the\ndocumentation for Spock\'s Spring module] for further details.\n\n\n\n[[boot-features-test-utilities]]\n=== Test Utilities\nA few test utility classes that are generally useful when testing your application are\npackaged as part of `spring-boot`.\n\n\n\n[[boot-features-configfileapplicationcontextinitializer-test-utility]]\n==== ConfigFileApplicationContextInitializer\n`ConfigFileApplicationContextInitializer` is an `ApplicationContextInitializer` that you\ncan apply to your tests to load Spring Boot `application.properties` files. You can use\nit when you do not need the full set of features provided by `@SpringBootTest`, as shown\nin the following example:\n\n[source,java,indent=0]\n----\n\t@ContextConfiguration(classes = Config.class,\n\t\tinitializers = ConfigFileApplicationContextInitializer.class)\n----\n\nNOTE: Using `ConfigFileApplicationContextInitializer` alone does not provide support for\n`@Value("${...}")` injection. Its only job is to ensure that `application.properties`\nfiles are loaded into Spring\'s `Environment`. For `@Value` support, you need to either\nadditionally configure a `PropertySourcesPlaceholderConfigurer` or use `@SpringBootTest`,\nwhich auto-configures one for you.\n\n\n\n[[boot-features-test-property-values]]\n==== TestPropertyValues\n`TestPropertyValues` lets you quickly add properties to a\n`ConfigurableEnvironment` or `ConfigurableApplicationContext`. You can call it with\n`key=value` strings, as follows:\n\n[source,java,indent=0]\n----\n\tTestPropertyValues.of("org=Spring", "name=Boot").applyTo(env);\n----\n\n\n\n[[boot-features-output-capture-test-utility]]\n==== OutputCapture\n`OutputCapture` is a JUnit `Rule` that you can use to capture `System.out` and\n`System.err` output. You can declare the capture as a `@Rule` and then use `toString()`\nfor assertions, as follows:\n\n[source,java,indent=0]\n----\n\timport org.junit.Rule;\n\timport org.junit.Test;\n\timport org.springframework.boot.test.rule.OutputCapture;\n\n\timport static org.hamcrest.Matchers.*;\n\timport static org.junit.Assert.*;\n\n\tpublic class MyTest {\n\n\t\t@Rule\n\t\tpublic OutputCapture capture = new OutputCapture();\n\n\t\t@Test\n\t\tpublic void testName() throws Exception {\n\t\t\tSystem.out.println("Hello World!");\n\t\t\tassertThat(capture.toString(), containsString("World"));\n\t\t}\n\n\t}\n----\n\n[[boot-features-rest-templates-test-utility]]\n==== TestRestTemplate\n\nTIP: Spring Framework 5.0 provides a new `WebTestClient` that works for\n<<boot-features-testing-spring-boot-applications-testing-autoconfigured-webflux-tests,\nWebFlux integration tests>> and both\n<<boot-features-testing-spring-boot-applications-testing-with-running-server,\nWebFlux and MVC end-to-end testing>>. It provides a fluent API for assertions,\nunlike `TestRestTemplate`.\n\n\n`TestRestTemplate` is a convenience alternative to Spring\'s `RestTemplate` that is useful\nin integration tests. You can get a vanilla template or one that sends Basic HTTP\nauthentication (with a username and password). In either case, the template behaves in a\ntest-friendly way by not throwing exceptions on server-side errors. It is recommended,\nbut not mandatory, to use the Apache HTTP Client (version 4.3.2 or better). If you have\nthat on your classpath, the `TestRestTemplate` responds by configuring the client\nappropriately. If you do use Apache\'s HTTP client, some additional test-friendly features\nare enabled:\n\n* Redirects are not followed (so you can assert the response location).\n* Cookies are ignored (so the template is stateless).\n\n`TestRestTemplate` can be instantiated directly in your integration tests, as shown in\nthe following example:\n\n[source,java,indent=0]\n----\n\tpublic class MyTest {\n\n\t\tprivate TestRestTemplate template = new TestRestTemplate();\n\n\t\t@Test\n\t\tpublic void testRequest() throws Exception {\n\t\t\tHttpHeaders headers = this.template.getForEntity(\n\t\t\t\t\t"http://myhost.example.com/example", String.class).getHeaders();\n\t\t\tassertThat(headers.getLocation()).hasHost("other.example.com");\n\t\t}\n\n\t}\n----\n\nAlternatively, if you use the `@SpringBootTest` annotation with\n`WebEnvironment.RANDOM_PORT` or `WebEnvironment.DEFINED_PORT`, you can inject a\nfully configured `TestRestTemplate` and start using it. If necessary, additional\ncustomizations can be applied through the `RestTemplateBuilder` bean. Any URLs that do\nnot specify a host and port automatically connect to the embedded server, as shown in the\nfollowing example:\n\n[source,java,indent=0]\n----\ninclude::{test-examples}/web/client/SampleWebClientTests.java[tag=test]\n----\n\n\n\n[[boot-features-websockets]]\n== WebSockets\nSpring Boot provides WebSockets auto-configuration for embedded Tomcat 8.5, Jetty\n9, and Undertow. If you deploy a war file to a standalone container, Spring Boot assumes\nthat the container is responsible for the configuration of its WebSocket support.\n\nSpring Framework provides {spring-reference}web.html#websocket[rich WebSocket support]\nthat can be easily accessed through the `spring-boot-starter-websocket` module.\n\n\n\n[[boot-features-webservices]]\n== Web Services\nSpring Boot provides Web Services auto-configuration so that all you must do is define\nyour `Endpoints`.\n\nThe {spring-webservices-reference}[Spring Web Services features] can be easily accessed\nwith the `spring-boot-starter-webservices` module.\n\n`SimpleWsdl11Definition` and `SimpleXsdSchema` beans can be automatically created for\nyour WSDLs and XSDs respectively. To do so, configure their location, as shown in the\nfollowing example:\n\n\n[source,properties,indent=0]\n----\n\tspring.webservices.wsdl-locations=classpath:/wsdl\n----\n\n\n\n[[boot-features-developing-auto-configuration]]\n== Creating Your Own Auto-configuration\nIf you work in a company that develops shared libraries, or if you work on an open-source\nor commercial library, you might want to develop your own auto-configuration.\nAuto-configuration classes can be bundled in external jars and still be picked-up by\nSpring Boot.\n\nAuto-configuration can be associated to a "`starter`" that provides the auto-configuration\ncode as well as the typical libraries that you would use with it. We first cover what\nyou need to know to build your own auto-configuration and then we move on to the\n<<boot-features-custom-starter,typical steps required to create a custom starter>>.\n\nTIP: A https://github.com/snicoll-demos/spring-boot-master-auto-configuration[demo\nproject] is available to showcase how you can create a starter step-by-step.\n\n\n\n[[boot-features-understanding-auto-configured-beans]]\n=== Understanding Auto-configured Beans\nUnder the hood, auto-configuration is implemented with standard `@Configuration` classes.\nAdditional `@Conditional` annotations are used to constrain when the auto-configuration\nshould apply. Usually, auto-configuration classes use `@ConditionalOnClass` and\n`@ConditionalOnMissingBean` annotations. This ensures that auto-configuration applies\nonly when relevant classes are found and when you have not declared your own\n`@Configuration`.\n\nYou can browse the source code of {sc-spring-boot-autoconfigure}[`spring-boot-autoconfigure`]\nto see the `@Configuration` classes that Spring provides (see the\n{github-code}/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/spring.factories[`META-INF/spring.factories`]\nfile).\n\n\n\n[[boot-features-locating-auto-configuration-candidates]]\n=== Locating Auto-configuration Candidates\nSpring Boot checks for the presence of a `META-INF/spring.factories` file within your\npublished jar. The file should list your configuration classes under the\n`EnableAutoConfiguration` key, as shown in the following example:\n\n[indent=0]\n----\n\torg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\n\tcom.mycorp.libx.autoconfigure.LibXAutoConfiguration,\\\n\tcom.mycorp.libx.autoconfigure.LibXWebAutoConfiguration\n----\n\nYou can use the\n{sc-spring-boot-autoconfigure}/AutoConfigureAfter.{sc-ext}[`@AutoConfigureAfter`] or\n{sc-spring-boot-autoconfigure}/AutoConfigureBefore.{sc-ext}[`@AutoConfigureBefore`]\nannotations if your configuration needs to be applied in a specific order. For example,\nif you provide web-specific configuration, your class may need to be applied after\n`WebMvcAutoConfiguration`.\n\nIf you want to order certain auto-configurations that should not have any direct\nknowledge of each other, you can also use `@AutoConfigureOrder`. That annotation has the\nsame semantic as the regular `@Order` annotation but provides a dedicated order for\nauto-configuration classes.\n\n[NOTE]\n====\nAuto-configurations must be loaded that way _only_. Make sure that they are defined in\na specific package space and that, in particular, they are never the target of component\nscanning.\n====\n\n\n\n[[boot-features-condition-annotations]]\n=== Condition Annotations\nYou almost always want to include one or more `@Conditional` annotations on your\nauto-configuration class. The `@ConditionalOnMissingBean` annotation is one common\nexample that is used to allow developers to override auto-configuration if they are\nnot happy with your defaults.\n\nSpring Boot includes a number of `@Conditional` annotations that you can reuse in your\nown code by annotating `@Configuration` classes or individual `@Bean` methods. These\nannotations include:\n\n* <<boot-features-class-conditions>>\n* <<boot-features-bean-conditions>>\n* <<boot-features-property-conditions>>\n* <<boot-features-resource-conditions>>\n* <<boot-features-web-application-conditions>>\n* <<boot-features-spel-conditions>>\n\n\n[[boot-features-class-conditions]]\n==== Class Conditions\nThe `@ConditionalOnClass` and `@ConditionalOnMissingClass` annotations let\n`@Configuration` classes be included based on the presence or absence of specific classes.\nDue to the fact that annotation metadata is parsed by using http://asm.ow2.org/[ASM], you\ncan use the `value` attribute to refer to the real class, even though that class might not\nactually appear on the running application classpath. You can also use the `name`\nattribute if you prefer to specify the class name by using a `String` value.\n\nThis mechanism does not apply the same way to `@Bean` methods where typically the return\ntype is the target of the condition: before the condition on the method applies, the JVM\nwill have loaded the class and potentially processed method references which will fail if\nthe class is not present.\n\nTo handle this scenario, a separate `@Configuration` class can be used to isolate the\ncondition, as shown in the following example:\n\n[source,java,indent=0]\n----\n\t@Configuration\n\t// Some conditions\n\tpublic class MyAutoConfiguration {\n\n\t\t// Auto-configured beans\n\n\t\t@Configuration\n\t\t@ConditionalOnClass(EmbeddedAcmeService.class)\n\t\tstatic class EmbeddedConfiguration {\n\n\t\t\t@Bean\n\t\t\t@ConditionalOnMissingBean\n\t\t\tpublic EmbeddedAcmeService embeddedAcmeService() { ... }\n\n\t\t}\n\n\t}\n----\n\n[TIP]\n====\nIf you use `@ConditionalOnClass` or `@ConditionalOnMissingClass` as a part of a\nmeta-annotation to compose your own composed annotations, you must use `name` as referring\nto the class in such a case is not handled.\n====\n\n\n\n[[boot-features-bean-conditions]]\n==== Bean Conditions\nThe `@ConditionalOnBean` and `@ConditionalOnMissingBean` annotations let a bean be\nincluded based on the presence or absence of specific beans. You can use the `value`\nattribute to specify beans by type or `name` to specify beans by name. The `search`\nattribute lets you limit the `ApplicationContext` hierarchy that should be considered\nwhen searching for beans.\n\nWhen placed on a `@Bean` method, the target type defaults to the return type of the\nmethod, as shown in the following example:\n\n[source,java,indent=0]\n----\n\t@Configuration\n\tpublic class MyAutoConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic MyService myService() { ... }\n\n\t}\n----\n\nIn the preceding example, the `myService` bean is going to be created if no bean of type\n`MyService` is already contained in the `ApplicationContext`.\n\nTIP: You need to be very careful about the order in which bean definitions are added, as\nthese conditions are evaluated based on what has been processed so far. For this reason,\nwe recommend using only `@ConditionalOnBean` and `@ConditionalOnMissingBean` annotations\non auto-configuration classes (since these are guaranteed to load after any user-defined\nbean definitions have been added).\n\nNOTE: `@ConditionalOnBean` and `@ConditionalOnMissingBean` do not prevent `@Configuration`\nclasses from being created. The only difference between using these conditions at the class level\nand marking each contained `@Bean` method with the annotation is that the former prevents\nregistration of the `@Configuration` class as a bean if the condition does not match.\n\n\n\n[[boot-features-property-conditions]]\n==== Property Conditions\nThe `@ConditionalOnProperty` annotation lets configuration be included based on a Spring\nEnvironment property. Use the `prefix` and `name` attributes to specify the property that\nshould be checked. By default, any property that exists and is not equal to `false` is\nmatched. You can also create more advanced checks by using the `havingValue` and\n`matchIfMissing` attributes.\n\n\n\n[[boot-features-resource-conditions]]\n==== Resource Conditions\nThe `@ConditionalOnResource` annotation lets configuration be included only when a\nspecific resource is present. Resources can be specified by using the usual Spring\nconventions, as shown in the following example: `file:/home/user/test.dat`.\n\n\n\n[[boot-features-web-application-conditions]]\n==== Web Application Conditions\nThe `@ConditionalOnWebApplication` and `@ConditionalOnNotWebApplication` annotations let\nconfiguration be included depending on whether the application is a "`web application`".\nA web application is any application that uses a Spring `WebApplicationContext`,\ndefines a `session` scope, or has a `StandardServletEnvironment`.\n\n\n\n[[boot-features-spel-conditions]]\n==== SpEL Expression Conditions\nThe `@ConditionalOnExpression` annotation lets configuration be included based on the\nresult of a {spring-reference}core.html#expressions[SpEL expression].\n\n\n\n[[boot-features-test-autoconfig]]\n=== Testing your Auto-configuration\nAn auto-configuration can be affected by many factors: user configuration (`@Bean`\ndefinition and `Environment` customization), condition evaluation (presence of a\nparticular library), and others. Concretely, each test should create a well defined\n`ApplicationContext` that represents a combination of those customizations.\n`ApplicationContextRunner` provides a great way to achieve that.\n\n`ApplicationContextRunner` is usually defined as a field of the test class to gather the\nbase, common configuration. The following example makes sure that\n`UserServiceAutoConfiguration` is always invoked:\n\n[source,java,indent=0]\n----\ninclude::{test-examples}/autoconfigure/UserServiceAutoConfigurationTests.java[tag=runner]\n----\n\nTIP: If multiple auto-configurations have to be defined, there is no need to order their\ndeclarations as they are invoked in the exact same order as when running the\napplication.\n\nEach test can use the runner to represent a particular use case. For instance, the sample\nbelow invokes a user configuration (`UserConfiguration`) and checks that the\nauto-configuration backs off properly. Invoking `run` provides a callback context that can\nbe used with `Assert4J`.\n\n[source,java,indent=0]\n----\ninclude::{test-examples}/autoconfigure/UserServiceAutoConfigurationTests.java[tag=test-user-config]\n----\n\nIt is also possible to easily customize the `Environment`, as shown in the following\nexample:\n\n[source,java,indent=0]\n----\ninclude::{test-examples}/autoconfigure/UserServiceAutoConfigurationTests.java[tag=test-env]\n----\n\nThe runner can also be used to display the `ConditionEvaluationReport`. The report can be printed\nat `INFO` or `DEBUG` level. The following example shows how to use the `ConditionEvaluationReportLoggingListener`\nto print the report in auto-configuration tests.\n\n[source,java,indent=0]\n----\n\t@Test\n\tpublic void autoConfigTest {\n\t\tConditionEvaluationReportLoggingListener initializer = new ConditionEvaluationReportLoggingListener(\n\t\t\t\tLogLevel.INFO);\n\t\tApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t\t\t.withInitializer(initializer).run((context) -> {\n\t\t\t\t\t\t// Do something...\n\t\t\t\t});\n\t}\n----\n\n\n\n==== Simulating a Web Context\nIf you need to test an auto-configuration that only operates in a Servlet or Reactive web\napplication context, use the `WebApplicationContextRunner` or\n`ReactiveWebApplicationContextRunner` respectively.\n\n\n\n==== Overriding the Classpath\nIt is also possible to test what happens when a particular class and/or package is not\npresent at runtime. Spring Boot ships with a `FilteredClassLoader` that can easily be used\nby the runner. In the following example, we assert that if `UserService` is not present, the\nauto-configuration is properly disabled:\n\n[source,java,indent=0]\n----\ninclude::{test-examples}/autoconfigure/UserServiceAutoConfigurationTests.java[tag=test-classloader]\n----\n\n\n\n[[boot-features-custom-starter]]\n=== Creating Your Own Starter\nA full Spring Boot starter for a library may contain the following components:\n\n* The `autoconfigure` module that contains the auto-configuration code.\n* The `starter` module that provides a dependency to the `autoconfigure` module as well\nas the library and any additional dependencies that are typically useful. In a nutshell,\nadding the starter should provide everything needed to start using that library.\n\nTIP: You may combine the auto-configuration code and the dependency management in a\nsingle module if you do not need to separate those two concerns.\n\n\n\n[[boot-features-custom-starter-naming]]\n==== Naming\nYou should make sure to provide a proper namespace for your starter. Do not start your\nmodule names with `spring-boot`, even if you use a different Maven `groupId`. We may\noffer official support for the thing you auto-configure in the future.\n\nAs a rule of thumb, you should name a combined module after the starter. For example,\nassume that you are creating a starter for "acme" and that you name the auto-configure\nmodule `acme-spring-boot-autoconfigure` and the starter `acme-spring-boot-starter`. If\nyou only have one module that combines the two, name it `acme-spring-boot-starter`.\n\nAlso, if your starter provides configuration keys, use a unique namespace for them. In\nparticular, do not include your keys in the namespaces that Spring Boot uses (such as\n`server`, `management`, `spring`, and so on). If you use the same namespace, we may modify\nthese namespaces in the future in ways that break your modules.\n\nMake sure to\n<<appendix-configuration-metadata#configuration-metadata-annotation-processor,trigger\nmeta-data generation>> so that IDE assistance is available for your keys as well. You may\nwant to review the generated meta-data (`META-INF/spring-configuration-metadata.json`) to\nmake sure your keys are properly documented.\n\n\n\n[[boot-features-custom-starter-module-autoconfigure]]\n==== `autoconfigure` Module\nThe `autoconfigure` module contains everything that is necessary to get started with the\nlibrary. It may also contain configuration key definitions (such as\n`@ConfigurationProperties`) and any callback interface that can be used to further\ncustomize how the components are initialized.\n\nTIP: You should mark the dependencies to the library as optional so that you can include\nthe `autoconfigure` module in your projects more easily. If you do it that way, the\nlibrary is not provided and, by default, Spring Boot backs off.\n\nSpring Boot uses an annotation processor to collect the conditions on auto-configurations\nin a metadata file (`META-INF/spring-autoconfigure-metadata.properties`). If that file is\npresent, it is used to eagerly filter auto-configurations that do not match, which will\nimprove startup time. It is recommended to add the following dependency in a module that\ncontains auto-configurations:\n\n[source,xml,indent=0,subs="verbatim,quotes,attributes"]\n----\n\t<dependency>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-autoconfigure-processor</artifactId>\n\t\t<optional>true</optional>\n\t</dependency>\n----\n\nWith Gradle 4.5 and earlier, the dependency should be declared in the `compileOnly`\nconfiguration, as shown in the following example:\n\n[source,groovy,indent=0,subs="verbatim,quotes,attributes"]\n----\n\tdependencies {\n\t\tcompileOnly "org.springframework.boot:spring-boot-autoconfigure-processor"\n\t}\n----\n\nWith Gradle 4.6 and later, the dependency should be declared in the `annotationProcessor`\nconfiguration, as shown in the following example:\n\n[source,groovy,indent=0,subs="verbatim,quotes,attributes"]\n----\n\tdependencies {\n\t\tannotationProcessor "org.springframework.boot:spring-boot-autoconfigure-processor"\n\t}\n----\n\n\n\n[[boot-features-custom-starter-module-starter]]\n==== Starter Module\nThe starter is really an empty jar. Its only purpose is to provide the necessary\ndependencies to work with the library. You can think of it as an opinionated view of what\nis required to get started.\n\nDo not make assumptions about the project in which your starter is added. If the library\nyou are auto-configuring typically requires other starters, mention them as well.\nProviding a proper set of _default_ dependencies may be hard if the number of optional\ndependencies is high, as you should avoid including dependencies that are unnecessary for\na typical usage of the library. In other words, you should not include optional\ndependencies.\n\nNOTE: Either way, your starter must reference the core Spring Boot starter\n(`spring-boot-starter`) directly or indirectly (i.e. no need to add it if your starter\nrelies on another starter). If a project is created with only your custom starter, Spring\nBoot\'s core features will be honoured by the presence of the core starter.\n\n\n\n[[boot-features-kotlin]]\n== Kotlin support\nhttps://kotlinlang.org[Kotlin] is a statically-typed language targeting the JVM (and other\nplatforms) which allows writing concise and elegant code while providing\n{kotlin-documentation}java-interop.html[interoperability] with existing libraries written\nin Java.\n\nSpring Boot provides Kotlin support by leveraging the support in other Spring projects\nsuch as Spring Framework, Spring Data, and Reactor. See the\n{spring-reference}languages.html#kotlin[Spring Framework Kotlin support documentation]\nfor more information.\n\nThe easiest way to start with Spring Boot and Kotlin is to follow\nhttps://spring.io/guides/tutorials/spring-boot-kotlin/[this comprehensive tutorial]. You\ncan create new Kotlin projects via\nhttps://start.spring.io/#!language=kotlin[start.spring.io]. Feel free to join the #spring\nchannel of http://slack.kotlinlang.org/[Kotlin Slack] or ask a question with the `spring`\nand `kotlin` tags on https://stackoverflow.com/questions/tagged/spring+kotlin[Stack\nOverflow] if you need support.\n\n\n\n[[boot-features-kotlin-requirements]]\n=== Requirements\nSpring Boot supports Kotlin 1.2.x. To use Kotlin, `org.jetbrains.kotlin:kotlin-stdlib` and\n`org.jetbrains.kotlin:kotlin-reflect` must be present on the classpath. The\n`kotlin-stdlib` variants `kotlin-stdlib-jdk7` and `kotlin-stdlib-jdk8` can also be used.\n\nSince https://discuss.kotlinlang.org/t/classes-final-by-default/166[Kotlin classes are\nfinal by default], you are likely to want to configure\n{kotlin-documentation}compiler-plugins.html#spring-support[kotlin-spring]\nplugin in order to automatically open Spring-annotated classes so that they can be\nproxied.\n\nhttps://github.com/FasterXML/jackson-module-kotlin[Jackson\'s Kotlin module] is required\nfor serializing / deserializing JSON data in Kotlin. It is automatically registered when\nfound on the classpath. A warning message is logged if Jackson and Kotlin are present but\nthe Jackson Kotlin module is not.\n\nTIP: These dependencies and plugins are provided by default if one bootstraps a Kotlin\nproject on https://start.spring.io/#!language=kotlin[start.spring.io].\n\n\n\n[[boot-features-kotlin-null-safety]]\n=== Null-safety\nOne of Kotlin\'s key features is {kotlin-documentation}null-safety.html[null-safety]. It\ndeals with `null` values at compile time rather than deferring the problem to runtime and\nencountering a `NullPointerException`. This helps to eliminate a common source of bugs\nwithout paying the cost of wrappers like `Optional`. Kotlin also allows using functional\nconstructs with nullable values as described in this\nhttp://www.baeldung.com/kotlin-null-safety[comprehensive guide to null-safety in Kotlin].\n\nAlthough Java does not allow one to express null-safety in its type system, Spring\nFramework, Spring Data, and Reactor now provide null-safety of their API via\ntooling-friendly annotations. By default, types from Java APIs used in Kotlin are\nrecognized as\n{kotlin-documentation}java-interop.html#null-safety-and-platform-types[platform types]\nfor which null-checks are relaxed.\n{kotlin-documentation}java-interop.html#jsr-305-support[Kotlin\'s support for JSR 305\nannotations] combined with nullability annotations provide null-safety for the related\nSpring API in Kotlin.\n\nThe JSR 305 checks can be configured by adding the `-Xjsr305` compiler flag with the\nfollowing options: `-Xjsr305={strict|warn|ignore}`. The default behavior is the same as\n`-Xjsr305=warn`. The `strict` value is required to have null-safety taken in account in\nKotlin types inferred from Spring API but should be used with the knowledge that Spring\nAPI nullability declaration could evolve even between minor releases and more checks may\nbe added in the future).\n\nWARNING: Generic type arguments, varargs and array elements nullability are not yet\nsupported. See https://jira.spring.io/browse/SPR-15942[SPR-15942] for up-to-date\ninformation. Also be aware that Spring Boot\'s own API is {github-issues}10712[not yet\nannotated].\n\n\n\n[[boot-features-kotlin-api]]\n=== Kotlin API\n\n\n\n[[boot-features-kotlin-api-runapplication]]\n==== runApplication\nSpring Boot provides an idiomatic way to run an application with\n`runApplication<MyApplication>(*args)` as shown in the following example:\n\n[source,kotlin,indent=0]\n----\nimport org.springframework.boot.autoconfigure.SpringBootApplication\nimport org.springframework.boot.runApplication\n\n@SpringBootApplication\nclass MyApplication\n\nfun main(args: Array<String>) {\n\trunApplication<MyApplication>(*args)\n}\n----\n\nThis is a drop-in replacement for\n`SpringApplication.run(MyApplication::class.java, *args)`. It also allows customization\nof the application as shown in the following example:\n\n[source,kotlin,indent=0]\n----\nrunApplication<MyApplication>(*args) {\n\tsetBannerMode(OFF)\n}\n----\n\n\n\n[[boot-features-kotlin-api-extensions]]\n==== Extensions\nKotlin {kotlin-documentation}extensions.html[extensions] provide the ability\nto extend existing classes with additional functionality. The Spring Boot Kotlin API makes\nuse of these extensions to add new Kotlin specific conveniences to existing APIs.\n\n`TestRestTemplate` extensions, similar to those provided by Spring Framework for\n`RestOperations` in Spring Framework, are provided. Among other things, the extensions\nmake it possible to take advantage of Kotlin reified type parameters.\n\n\n\n[[boot-features-kotlin-dependency-management]]\n=== Dependency management\nIn order to avoid mixing different version of Kotlin dependencies on the classpath,\ndependency management of the following Kotlin dependencies is provided:\n\n - `kotlin-reflect`\n - `kotlin-runtime`\n - `kotlin-stdlib`\n - `kotlin-stdlib-jdk7`\n - `kotlin-stdlib-jdk8`\n - `kotlin-stdlib-jre7`\n - `kotlin-stdlib-jre8`\n\nWith Maven, the Kotlin version can be customized via the `kotlin.version` property and\nplugin management is provided for `kotlin-maven-plugin`. With Gradle, the Spring Boot\nplugin automatically aligns the `kotlin.version` with the version of the Kotlin plugin.\n\n\n\n[[boot-features-kotlin-configuration-properties]]\n=== `@ConfigurationProperties`\n`@ConfigurationProperties` currently only works with `lateinit` or nullable `var`\nproperties (the former is recommended), since immutable classes initialized by\nconstructors are {github-issues}8762[not yet supported].\n\n[source,kotlin,indent=0]\n----\n@ConfigurationProperties("example.kotlin")\nclass KotlinExampleProperties {\n\n\tlateinit var name: String\n\n\tlateinit var description: String\n\n\tval myService = MyService()\n\n\tclass MyService {\n\n\t\tlateinit var apiToken: String\n\n\t\tlateinit var uri: URI\n\n\t}\n\n}\n----\n\nTIP: To generate\n<<appendix-configuration-metadata#configuration-metadata-annotation-processor,your own\nmetadata>> using the annotation processor, {kotlin-documentation}kapt.html[`kapt` should\nbe configured] with the `spring-boot-configuration-processor` dependency.\n\n\n[[boot-features-kotlin-testing]]\n=== Testing\nWhile it is possible to use JUnit 4 (the default provided by `spring-boot-starter-test`)\nto test Kotlin code, JUnit 5 is recommended. JUnit 5 enables a test class to be\ninstantiated once and reused for all of the class\'s tests. This makes it possible to use\n`@BeforeAll` and `@AfterAll` annotations on non-static methods, which is a good fit for\nKotlin.\n\nTo use JUnit 5, exclude `junit:junit` dependency from `spring-boot-starter-test`, add\nJUnit 5 dependencies, and configure the Maven or Gradle plugin accordingly. See the\n{junit5-documentation}/#dependency-metadata-junit-jupiter-samples[JUnit 5\ndocumentation] for more details. You also need to\n{junit5-documentation}/#writing-tests-test-instance-lifecycle-changing-default[switch test\ninstance lifecycle to "per-class"].\n\n\n\n[[boot-features-kotlin-resources]]\n=== Resources\n\n\n\n[[boot-features-kotlin-resources-further-reading]]\n==== Further reading\n* {kotlin-documentation}[Kotlin language reference]\n* http://slack.kotlinlang.org/[Kotlin Slack] (with a dedicated #spring channel)\n* https://stackoverflow.com/questions/tagged/spring+kotlin[Stackoverflow with `spring` and `kotlin` tags]\n* https://try.kotlinlang.org/[Try Kotlin in your browser]\n* https://blog.jetbrains.com/kotlin/[Kotlin blog]\n* https://kotlin.link/[Awesome Kotlin]\n* https://spring.io/guides/tutorials/spring-boot-kotlin/[Tutorial: building web applications with Spring Boot and Kotlin]\n* https://spring.io/blog/2016/02/15/developing-spring-boot-applications-with-kotlin[Developing Spring Boot applications with Kotlin]\n* https://spring.io/blog/2016/03/20/a-geospatial-messenger-with-kotlin-spring-boot-and-postgresql[A Geospatial Messenger with Kotlin, Spring Boot and PostgreSQL]\n* https://spring.io/blog/2017/01/04/introducing-kotlin-support-in-spring-framework-5-0[Introducing Kotlin support in Spring Framework 5.0]\n* https://spring.io/blog/2017/08/01/spring-framework-5-kotlin-apis-the-functional-way[Spring Framework 5 Kotlin APIs, the functional way]\n\n\n\n[[boot-features-kotlin-resources-examples]]\n==== Examples\n\n* https://github.com/sdeleuze/spring-boot-kotlin-demo[spring-boot-kotlin-demo]: regular Spring Boot + Spring Data JPA project\n* https://github.com/mixitconf/mixit[mixit]: Spring Boot 2 + WebFlux + Reactive Spring Data MongoDB\n* https://github.com/sdeleuze/spring-kotlin-fullstack[spring-kotlin-fullstack]: WebFlux Kotlin fullstack example with Kotlin2js for frontend instead of JavaScript or TypeScript\n* https://github.com/spring-petclinic/spring-petclinic-kotlin[spring-petclinic-kotlin]: Kotlin version of the Spring PetClinic Sample Application\n* https://github.com/sdeleuze/spring-kotlin-deepdive[spring-kotlin-deepdive]: a step by step migration for Boot 1.0 + Java to Boot 2.0 + Kotlin\n\n\n\n[[boot-features-whats-next]]\n== What to Read Next\nIf you want to learn more about any of the classes discussed in this section, you can\ncheck out the {dc-root}[Spring Boot API documentation] or you can browse the\n{github-code}[source code directly]. If you have specific questions, take a look at the\n<<howto.adoc#howto, how-to>> section.\n\nIf you are comfortable with Spring Boot\'s core features, you can continue on and read\nabout <<production-ready-features.adoc#production-ready, production-ready features>>.\n', 'source_code_before': '[[boot-features]]\n= Spring Boot features\n\n[partintro]\n--\nThis section dives into the details of Spring Boot. Here you can learn about the key\nfeatures that you may want to use and customize. If you have not already done so, you\nmight want to read the "<<getting-started.adoc#getting-started>>" and\n"<<using-spring-boot.adoc#using-boot>>" sections, so that you have a good grounding of the\nbasics.\n--\n\n\n\n[[boot-features-spring-application]]\n== SpringApplication\nThe `SpringApplication` class provides a convenient way to bootstrap a Spring application\nthat is started from a `main()` method. In many situations, you can delegate to the\nstatic `SpringApplication.run` method, as shown in the following example:\n\n[source,java,indent=0]\n----\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(MySpringConfiguration.class, args);\n\t}\n----\n\nWhen your application starts, you should see something similar to the following output:\n\n[indent=0,subs="attributes"]\n----\n  .   ____          _            __ _ _\n /\\\\ / ___\'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | \'_ | \'_| | \'_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  \'  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::   v{spring-boot-version}\n\n2013-07-31 00:08:16.117  INFO 56603 --- [           main] o.s.b.s.app.SampleApplication            : Starting SampleApplication v0.1.0 on mycomputer with PID 56603 (/apps/myapp.jar started by pwebb)\n2013-07-31 00:08:16.166  INFO 56603 --- [           main] ationConfigServletWebServerApplicationContext : Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6e5a8246: startup date [Wed Jul 31 00:08:16 PDT 2013]; root of context hierarchy\n2014-03-04 13:09:54.912  INFO 41370 --- [           main] .t.TomcatServletWebServerFactory : Server initialized with port: 8080\n2014-03-04 13:09:56.501  INFO 41370 --- [           main] o.s.b.s.app.SampleApplication            : Started SampleApplication in 2.992 seconds (JVM running for 3.658)\n----\n\nBy default, `INFO` logging messages are shown, including some relevant startup details,\nsuch as the user that launched the application. If you need a log level other than `INFO`,\nyou can set it, as described in <<boot-features-custom-log-levels>>,\n\n\n\n[[boot-features-startup-failure]]\n=== Startup Failure\nIf your application fails to start, registered `FailureAnalyzers` get a chance to provide\na dedicated error message and a concrete action to fix the problem. For instance, if you\nstart a web application on port `8080` and that port is already in use, you should see\nsomething similar to the following message:\n\n[indent=0]\n----\n\t***************************\n\tAPPLICATION FAILED TO START\n\t***************************\n\n\tDescription:\n\n\tEmbedded servlet container failed to start. Port 8080 was already in use.\n\n\tAction:\n\n\tIdentify and stop the process that\'s listening on port 8080 or configure this application to listen on another port.\n----\n\nNOTE: Spring Boot provides numerous `FailureAnalyzer` implementations, and you can\n<<howto.adoc#howto-failure-analyzer,add your own>>.\n\nIf no failure analyzers are able to handle the exception, you can still display the full\nconditions report to better understand what went wrong. To do so, you need to\n<<boot-features-external-config,enable the `debug` property>> or\n<<boot-features-custom-log-levels,enable `DEBUG` logging>> for\n`org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener`.\n\nFor instance, if you are running your application by using `java -jar`, you can enable\nthe `debug` property as follows:\n\n[indent=0,subs="attributes"]\n----\n\t$ java -jar myproject-0.0.1-SNAPSHOT.jar --debug\n----\n\n\n\n[[boot-features-banner]]\n=== Customizing the Banner\nThe banner that is printed on start up can be changed by adding a `banner.txt` file to\nyour classpath or by setting the `spring.banner.location` property to the location of such\na file. If the file has an encoding other than UTF-8, you can set `spring.banner.charset`.\nIn addition to a text file, you can also add a `banner.gif`, `banner.jpg`, or `banner.png`\nimage file to your classpath or set the `spring.banner.image.location` property. Images\nare converted into an ASCII art representation and printed above any text banner.\n\nInside your `banner.txt` file, you can use any of the following placeholders:\n\n.Banner variables\n|===\n| Variable | Description\n\n|`${application.version}`\n|The version number of your application, as declared in `MANIFEST.MF`. For example,\n`Implementation-Version: 1.0` is printed as `1.0`.\n\n|`${application.formatted-version}`\n|The version number of your application, as declared in `MANIFEST.MF` and formatted for\ndisplay (surrounded with brackets and prefixed with `v`). For example `(v1.0)`.\n\n|`${spring-boot.version}`\n|The Spring Boot version that you are using. For example `{spring-boot-version}`.\n\n|`${spring-boot.formatted-version}`\n|The Spring Boot version that you are using, formatted for display (surrounded with\nbrackets and prefixed with `v`). For example `(v{spring-boot-version})`.\n\n|`${Ansi.NAME}` (or `${AnsiColor.NAME}`, `${AnsiBackground.NAME}`, `${AnsiStyle.NAME}`)\n|Where `NAME` is the name of an ANSI escape code. See\n{sc-spring-boot}/ansi/AnsiPropertySource.{sc-ext}[`AnsiPropertySource`] for details.\n\n|`${application.title}`\n|The title of your application, as declared in `MANIFEST.MF`. For example\n`Implementation-Title: MyApp` is printed as `MyApp`.\n|===\n\nTIP: The `SpringApplication.setBanner(...)` method can be used if you want to generate\na banner programmatically. Use the `org.springframework.boot.Banner` interface and\nimplement your own `printBanner()` method.\n\nYou can also use the `spring.main.banner-mode` property to determine if the banner has\nto be printed on `System.out` (`console`), sent to the configured logger (`log`), or not\nproduced at all (`off`).\n\nThe printed banner is registered as a singleton bean under the following name:\n`springBootBanner`.\n\n[NOTE]\n====\nYAML maps `off` to `false`, so be sure to add quotes if you want to disable the banner in\nyour application, as shown in the following example:\n\n[source,yaml,indent=0]\n----\n\tspring:\n\t\tmain:\n\t\t\tbanner-mode: "off"\n----\n====\n\n[[boot-features-customizing-spring-application]]\n=== Customizing SpringApplication\nIf the `SpringApplication` defaults are not to your taste, you can instead create a local\ninstance and customize it. For example, to turn off the banner, you could write:\n\n[source,java,indent=0]\n----\n\tpublic static void main(String[] args) {\n\t\tSpringApplication app = new SpringApplication(MySpringConfiguration.class);\n\t\tapp.setBannerMode(Banner.Mode.OFF);\n\t\tapp.run(args);\n\t}\n----\n\nNOTE: The constructor arguments passed to `SpringApplication` are configuration sources\nfor Spring beans. In most cases, these are references to `@Configuration` classes, but\nthey could also be references to XML configuration or to packages that should be scanned.\n\nIt is also possible to configure the `SpringApplication` by using an\n`application.properties` file. See _<<boot-features-external-config>>_ for details.\n\nFor a complete list of the configuration options, see the\n{dc-spring-boot}/SpringApplication.{dc-ext}[`SpringApplication` Javadoc].\n\n\n\n[[boot-features-fluent-builder-api]]\n=== Fluent Builder API\nIf you need to build an `ApplicationContext` hierarchy (multiple contexts with a\nparent/child relationship) or if you prefer using a "`fluent`" builder API, you can\nuse the `SpringApplicationBuilder`.\n\nThe `SpringApplicationBuilder` lets you chain together multiple method calls and includes\n`parent` and `child` methods that let you create a hierarchy, as shown in the following\nexample:\n\n[source,java,indent=0]\n----\ninclude::{code-examples}/builder/SpringApplicationBuilderExample.java[tag=hierarchy]\n----\n\nNOTE: There are some restrictions when creating an `ApplicationContext` hierarchy. For\nexample, Web components *must* be contained within the child context, and the same\n`Environment` is used for both parent and child contexts. See the\n{dc-spring-boot}/builder/SpringApplicationBuilder.{dc-ext}[`SpringApplicationBuilder`\nJavadoc] for full details.\n\n\n\n[[boot-features-application-events-and-listeners]]\n=== Application Events and Listeners\nIn addition to the usual Spring Framework events, such as\n{spring-javadoc}/context/event/ContextRefreshedEvent.{dc-ext}[`ContextRefreshedEvent`],\na `SpringApplication` sends some additional application events.\n\n[NOTE]\n====\nSome events are actually triggered before the `ApplicationContext` is created, so you\ncannot register a listener on those as a `@Bean`. You can register them with the\n`SpringApplication.addListeners(...)` method or the\n`SpringApplicationBuilder.listeners(...)` method.\n\nIf you want those listeners to be registered automatically, regardless of the way the\napplication is created, you can add a `META-INF/spring.factories` file to your project\nand reference your listener(s) by using the\n`org.springframework.context.ApplicationListener` key, as shown in the following example:\n\n[indent=0]\n----\n\torg.springframework.context.ApplicationListener=com.example.project.MyListener\n----\n\n====\n\nApplication events are sent in the following order, as your application runs:\n\n. An `ApplicationStartingEvent` is sent at the start of a run but before any processing,\nexcept for the registration of listeners and initializers.\n. An `ApplicationEnvironmentPreparedEvent` is sent when the `Environment` to be used in\nthe context is known but before the context is created.\n. An `ApplicationPreparedEvent` is sent just before the refresh is started but after bean\ndefinitions have been loaded.\n. An `ApplicationStartedEvent` is sent after the context has been refreshed but before any\napplication and command-line runners have been called.\n. An `ApplicationReadyEvent` is sent after any application and command-line runners have\nbeen called. It indicates that the application is ready to service requests.\n. An `ApplicationFailedEvent` is sent if there is an exception on startup.\n\nTIP: You often need not use application events, but it can be handy to know that they\nexist. Internally, Spring Boot uses events to handle a variety of tasks.\n\nApplication events are sent by using Spring Framework\'s event publishing mechanism. Part\nof this mechanism ensures that an event published to the listeners in a child context is\nalso published to the listeners in any ancestor contexts. As a result of this, if your\napplication uses a hierarchy of `SpringApplication` instances, a listener may receive\nmultiple instances of the same type of application event.\n\nTo allow your listener to distinguish between an event for its context and an event for\na descendant context, it should request that its application context is injected and then\ncompare the injected context with the context of the event. The context can be injected\nby implementing `ApplicationContextAware` or, if the listener is a bean, by using\n`@Autowired`.\n\n\n\n[[boot-features-web-environment]]\n=== Web Environment\nA `SpringApplication` attempts to create the right type of `ApplicationContext` on your\nbehalf. The algorithm used to determine a `WebApplicationType` is fairly simple:\n\n* If Spring MVC is present, an `AnnotationConfigServletWebServerApplicationContext` is\nused\n* If Spring MVC is not present and Spring WebFlux is present, an\n`AnnotationConfigReactiveWebServerApplicationContext` is used\n* Otherwise, `AnnotationConfigApplicationContext` is used\n\nThis means that if you are using Spring MVC and the new `WebClient` from Spring WebFlux in\nthe same application, Spring MVC will be used by default. You can override that easily\nby calling `setWebApplicationType(WebApplicationType)`.\n\nIt is also possible to take complete control of the `ApplicationContext` type that is\nused by calling `setApplicationContextClass(...)`.\n\nTIP: It is often desirable to call `setWebApplicationType(WebApplicationType.NONE)` when\nusing `SpringApplication` within a JUnit test.\n\n\n\n[[boot-features-application-arguments]]\n=== Accessing Application Arguments\nIf you need to access the application arguments that were passed to\n`SpringApplication.run(...)`, you can inject a\n`org.springframework.boot.ApplicationArguments` bean. The `ApplicationArguments`\ninterface provides access to both the raw `String[]` arguments as well as parsed `option`\nand `non-option` arguments, as shown in the following example:\n\n[source,java,indent=0]\n----\n\timport org.springframework.boot.*;\n\timport org.springframework.beans.factory.annotation.*;\n\timport org.springframework.stereotype.*;\n\n\t@Component\n\tpublic class MyBean {\n\n\t\t@Autowired\n\t\tpublic MyBean(ApplicationArguments args) {\n\t\t\tboolean debug = args.containsOption("debug");\n\t\t\tList<String> files = args.getNonOptionArgs();\n\t\t\t// if run with "--debug logfile.txt" debug=true, files=["logfile.txt"]\n\t\t}\n\n\t}\n----\n\nTIP: Spring Boot also registers a `CommandLinePropertySource` with the Spring\n`Environment`. This lets you also inject single application arguments by using the\n`@Value` annotation.\n\n\n\n[[boot-features-command-line-runner]]\n=== Using the ApplicationRunner or CommandLineRunner\nIf you need to run some specific code once the `SpringApplication` has started, you can\nimplement the `ApplicationRunner` or `CommandLineRunner` interfaces. Both interfaces work\nin the same way and offer a single `run` method, which is called just before\n`SpringApplication.run(...)` completes.\n\nThe `CommandLineRunner` interfaces provides access to application arguments as a simple\nstring array, whereas the `ApplicationRunner` uses the `ApplicationArguments` interface\ndiscussed earlier. The following example shows a `CommandLineRunner` with a `run` method:\n\n[source,java,indent=0]\n----\n\timport org.springframework.boot.*;\n\timport org.springframework.stereotype.*;\n\n\t@Component\n\tpublic class MyBean implements CommandLineRunner {\n\n\t\tpublic void run(String... args) {\n\t\t\t// Do something...\n\t\t}\n\n\t}\n----\n\nIf several `CommandLineRunner` or `ApplicationRunner` beans are defined that must be\ncalled in a specific order, you can additionally implement the\n`org.springframework.core.Ordered` interface or use the\n`org.springframework.core.annotation.Order` annotation.\n\n\n\n[[boot-features-application-exit]]\n=== Application Exit\nEach `SpringApplication` registers a shutdown hook with the JVM to ensure that the\n`ApplicationContext` closes gracefully on exit. All the standard Spring lifecycle\ncallbacks (such as the `DisposableBean` interface or the `@PreDestroy` annotation) can be\nused.\n\nIn addition, beans may implement the `org.springframework.boot.ExitCodeGenerator`\ninterface if they wish to return a specific exit code when `SpringApplication.exit()` is\ncalled. This exit code can then be passed to `System.exit()` to return it as a status\ncode, as shown in the following example:\n\n[source,java,indent=0]\n----\ninclude::{code-examples}/ExitCodeApplication.java[tag=example]\n----\n\nAlso, the `ExitCodeGenerator` interface may be implemented by exceptions. When such an\nexception is encountered, Spring Boot returns the exit code provided by the implemented\n`getExitCode()` method.\n\n\n[[boot-features-application-admin]]\n=== Admin Features\nIt is possible to enable admin-related features for the application by specifying the\n`spring.application.admin.enabled` property. This exposes the\n{sc-spring-boot}/admin/SpringApplicationAdminMXBean.{sc-ext}[`SpringApplicationAdminMXBean`]\non the platform `MBeanServer`. You could use this feature to administer your Spring Boot\napplication remotely. This feature could also be useful for any service wrapper\nimplementation.\n\nTIP: If you want to know on which HTTP port the application is running, get the property\nwith a key of `local.server.port`.\n\nCAUTION: Take care when enabling this feature, as the MBean exposes a method to shutdown\nthe application.\n\n\n\n[[boot-features-external-config]]\n== Externalized Configuration\nSpring Boot lets you externalize your configuration so that you can work with the same\napplication code in different environments. You can use properties files, YAML files,\nenvironment variables, and command-line arguments to externalize configuration. Property\nvalues can be injected directly into your beans by using the `@Value` annotation,\naccessed through Spring\'s `Environment` abstraction, or be\n<<boot-features-external-config-typesafe-configuration-properties,bound to structured\nobjects>> through `@ConfigurationProperties`.\n\nSpring Boot uses a very particular `PropertySource` order that is designed to allow\nsensible overriding of values. Properties are considered in the following order:\n\n. <<using-boot-devtools-globalsettings,Devtools global settings properties>>\non your home directory (`~/.spring-boot-devtools.properties` when devtools is active).\n. {spring-javadoc}/test/context/TestPropertySource.{dc-ext}[`@TestPropertySource`]\nannotations on your tests.\n. {dc-spring-boot-test}/context/SpringBootTest.{dc-ext}[`@SpringBootTest#properties`]\nannotation attribute on your tests.\n. Command line arguments.\n. Properties from `SPRING_APPLICATION_JSON` (inline JSON embedded in an environment\nvariable or system property).\n. `ServletConfig` init parameters.\n. `ServletContext` init parameters.\n. JNDI attributes from `java:comp/env`.\n. Java System properties (`System.getProperties()`).\n. OS environment variables.\n. A `RandomValuePropertySource` that has properties only in `+random.*+`.\n. <<boot-features-external-config-profile-specific-properties,Profile-specific\napplication properties>> outside of your packaged jar\n(`application-{profile}.properties` and YAML variants).\n. <<boot-features-external-config-profile-specific-properties,Profile-specific\napplication properties>> packaged inside your jar (`application-{profile}.properties`\nand YAML variants).\n. Application properties outside of your packaged jar (`application.properties` and YAML\nvariants).\n. Application properties packaged inside your jar (`application.properties` and YAML\nvariants).\n. {spring-javadoc}/context/annotation/PropertySource.{dc-ext}[`@PropertySource`]\nannotations on your `@Configuration` classes.\n. Default properties (specified by setting `SpringApplication.setDefaultProperties`).\n\nTo provide a concrete example, suppose you develop a `@Component` that uses a `name`\nproperty, as shown in the following example:\n\n[source,java,indent=0]\n----\n\timport org.springframework.stereotype.*;\n\timport org.springframework.beans.factory.annotation.*;\n\n\t@Component\n\tpublic class MyBean {\n\n\t    @Value("${name}")\n\t    private String name;\n\n\t    // ...\n\n\t}\n----\n\nOn your application classpath (for example, inside your jar) you can have an\n`application.properties` file that provides a sensible default property value for `name`.\nWhen running in a new environment, an `application.properties` file can be provided\noutside of your jar that overrides the `name`. For one-off testing, you can launch with a\nspecific command line switch (for example, `java -jar app.jar --name="Spring"`).\n\n[TIP]\n====\nThe `SPRING_APPLICATION_JSON` properties can be supplied on the command line with an\nenvironment variable. For example, you could use the following line in a UN{asterisk}X\nshell:\n\n----\n$ SPRING_APPLICATION_JSON=\'{"acme":{"name":"test"}}\' java -jar myapp.jar\n----\n\nIn the preceding example, you end up with `acme.name=test` in the Spring `Environment`.\nYou can also supply the JSON as `spring.application.json` in a System property, as shown\nin the following example:\n\n----\n$ java -Dspring.application.json=\'{"name":"test"}\' -jar myapp.jar\n----\n\nYou can also supply the JSON by using a command line argument, as shown in the following\nexample:\n\n----\n$ java -jar myapp.jar --spring.application.json=\'{"name":"test"}\'\n----\n\nYou can also supply the JSON as a JNDI variable, as follows:\n`java:comp/env/spring.application.json`.\n====\n\n\n\n[[boot-features-external-config-random-values]]\n=== Configuring Random Values\nThe `RandomValuePropertySource` is useful for injecting random values (for example, into\nsecrets or test cases). It can produce integers, longs, uuids, or strings, as shown in the\nfollowing example:\n\n[source,properties,indent=0]\n----\n\tmy.secret=${random.value}\n\tmy.number=${random.int}\n\tmy.bignumber=${random.long}\n\tmy.uuid=${random.uuid}\n\tmy.number.less.than.ten=${random.int(10)}\n\tmy.number.in.range=${random.int[1024,65536]}\n----\n\nThe `+random.int*+` syntax is `OPEN value (,max) CLOSE` where the `OPEN,CLOSE` are any\ncharacter and `value,max` are integers. If `max` is provided, then `value` is the minimum\nvalue and `max` is the maximum value (exclusive).\n\n\n\n[[boot-features-external-config-command-line-args]]\n=== Accessing Command Line Properties\nBy default, `SpringApplication` converts any command line option arguments (that is,\narguments starting with `--`, such as `--server.port=9000`) to a `property` and adds\nthem to the Spring `Environment`. As mentioned previously, command line properties always\ntake precedence over other property sources.\n\nIf you do not want command line properties to be added to the `Environment`, you can\ndisable them by using `SpringApplication.setAddCommandLineProperties(false)`.\n\n\n\n[[boot-features-external-config-application-property-files]]\n=== Application Property Files\n`SpringApplication` loads properties from `application.properties` files in the following\nlocations and adds them to the Spring `Environment`:\n\n. A `/config` subdirectory of the current directory\n. The current directory\n. A classpath `/config` package\n. The classpath root\n\nThe list is ordered by precedence (properties defined in locations higher in the list\noverride those defined in lower locations).\n\nNOTE: You can also <<boot-features-external-config-yaml, use YAML (\'.yml\') files>> as an\nalternative to \'.properties\'.\n\nIf you do not like `application.properties` as the configuration file name, you can\nswitch to another file name by specifying a `spring.config.name` environment property.\nYou can also refer to an explicit location by using the `spring.config.location`\nenvironment property (which is a comma-separated list of directory locations or file\npaths). The following example shows how to specify a different file name:\n\n[indent=0]\n----\n\t$ java -jar myproject.jar --spring.config.name=myproject\n----\n\nThe following example shows how to specify two locations:\n\n[indent=0]\n----\n\t$ java -jar myproject.jar --spring.config.location=classpath:/default.properties,classpath:/override.properties\n----\n\nWARNING: `spring.config.name` and `spring.config.location` are used very early to\ndetermine which files have to be loaded, so they must be defined as an environment\nproperty (typically an OS environment variable, a system property, or a command-line\nargument).\n\nIf `spring.config.location` contains directories (as opposed to files), they should end\nin `/` (and, at runtime, be appended with the names generated from `spring.config.name`\nbefore being loaded, including profile-specific file names). Files specified in\n`spring.config.location` are used as-is, with no support for profile-specific variants,\nand are overridden by any profile-specific properties.\n\nConfig locations are searched in reverse order. By default, the configured locations are\n`classpath:/,classpath:/config/,file:./,file:./config/`. The resulting search order is\nthe following:\n\n. `file:./config/`\n. `file:./`\n. `classpath:/config/`\n. `classpath:/`\n\nWhen custom config locations are configured by using `spring.config.location`, they\nreplace the default locations. For example, if `spring.config.location` is configured with\nthe value `classpath:/custom-config/,file:./custom-config/`, the search order becomes the\nfollowing:\n\n. `file:./custom-config/`\n. `classpath:custom-config/`\n\nAlternatively, when custom config locations are configured by using\n`spring.config.additional-location`, they are used in addition to the default locations.\nAdditional locations are searched before the default locations. For example, if\nadditional locations of `classpath:/custom-config/,file:./custom-config/` are configured,\nthe search order becomes the following:\n\n. `file:./custom-config/`\n. `classpath:custom-config/`\n. `file:./config/`\n. `file:./`\n. `classpath:/config/`\n. `classpath:/`\n\nThis search ordering lets you specify default values in one configuration file and then\nselectively override those values in another. You can provide default values for your\napplication in `application.properties` (or whatever other basename you choose with\n`spring.config.name`) in one of the default locations. These default values can then be\noverridden at runtime with a different file located in one of the custom locations.\n\nNOTE: If you use environment variables rather than system properties, most operating\nsystems disallow period-separated key names, but you can use underscores instead (for\nexample, `SPRING_CONFIG_NAME` instead of `spring.config.name`).\n\nNOTE: If your application runs in a container, then JNDI properties (in `java:comp/env`)\nor servlet context initialization parameters can be used instead of, or as well as,\nenvironment variables or system properties.\n\n\n\n[[boot-features-external-config-profile-specific-properties]]\n=== Profile-specific Properties\nIn addition to `application.properties` files, profile-specific properties can also be\ndefined by using the following naming convention: `application-{profile}.properties`. The\n`Environment` has a set of default profiles (by default, `[default]`) that are used if no\nactive profiles are set. In other words, if no profiles are explicitly activated, then\nproperties from `application-default.properties` are loaded.\n\nProfile-specific properties are loaded from the same locations as standard\n`application.properties`, with profile-specific files always overriding the non-specific\nones, whether or not the profile-specific files are inside or outside your\npackaged jar.\n\nIf several profiles are specified, a last-wins strategy applies. For example, profiles\nspecified by the `spring.profiles.active` property are added after those configured\nthrough the `SpringApplication` API and therefore take precedence.\n\nNOTE: If you have specified any files in `spring.config.location`, profile-specific\nvariants of those files are not considered. Use directories in\n`spring.config.location` if you want to also use profile-specific properties.\n\n\n\n[[boot-features-external-config-placeholders-in-properties]]\n=== Placeholders in Properties\nThe values in `application.properties` are filtered through the existing `Environment`\nwhen they are used, so you can refer back to previously defined values (for example, from\nSystem properties).\n\n[source,properties,indent=0]\n----\n\tapp.name=MyApp\n\tapp.description=${app.name} is a Spring Boot application\n----\n\nTIP: You can also use this technique to create "`short`" variants of existing Spring Boot\nproperties. See the _<<howto.adoc#howto-use-short-command-line-arguments>>_ how-to for\ndetails.\n\n\n\n[[boot-features-encrypting-properties]]\n=== Encrypting Properties\nSpring Boot does not provide any built in support for encrypting property values, however,\nit does provide the hook points necessary to modify values contained in the Spring\n`Environment`. The `EnvironmentPostProcessor` interface allows you to manipulate the\n`Environment` before the application starts. See <<howto-customize-the-environment-or-application-context>>\nfor details.\n\nIf you\'re looking for a secure way to store credentials and passwords, the\nhttps://cloud.spring.io/spring-cloud-vault/[Spring Cloud Vault] project provides\nsupport for storing externalized configuration in\nhttps://www.vaultproject.io/[HashiCorp Vault].\n\n\n\n[[boot-features-external-config-yaml]]\n=== Using YAML Instead of Properties\nhttp://yaml.org[YAML] is a superset of JSON and, as such, is a convenient format for\nspecifying hierarchical configuration data. The `SpringApplication` class automatically\nsupports YAML as an alternative to properties whenever you have the\nhttp://www.snakeyaml.org/[SnakeYAML] library on your classpath.\n\nNOTE: If you use "`Starters`", SnakeYAML is automatically provided by\n`spring-boot-starter`.\n\n\n\n[[boot-features-external-config-loading-yaml]]\n==== Loading YAML\nSpring Framework provides two convenient classes that can be used to load YAML documents.\nThe `YamlPropertiesFactoryBean` loads YAML as `Properties` and the `YamlMapFactoryBean`\nloads YAML as a `Map`.\n\nFor example, consider the following YAML document:\n\n[source,yaml,indent=0]\n----\n\tenvironments:\n\t\tdev:\n\t\t\turl: http://dev.example.com\n\t\t\tname: Developer Setup\n\t\tprod:\n\t\t\turl: http://another.example.com\n\t\t\tname: My Cool App\n----\n\nThe preceding example would be transformed into the following properties:\n\n[source,properties,indent=0]\n----\n\tenvironments.dev.url=http://dev.example.com\n\tenvironments.dev.name=Developer Setup\n\tenvironments.prod.url=http://another.example.com\n\tenvironments.prod.name=My Cool App\n----\n\nYAML lists are represented as property keys with `[index]` dereferencers. For example,\nconsider the following YAML:\n\n[source,yaml,indent=0]\n----\n\t my:\n\t\tservers:\n\t\t\t- dev.example.com\n\t\t\t- another.example.com\n----\n\nThe preceding example would be transformed into these properties:\n\n[source,properties,indent=0]\n----\n\tmy.servers[0]=dev.example.com\n\tmy.servers[1]=another.example.com\n----\n\nTo bind to properties like that by using Spring Boot\'s `Binder` utilities (which is what\n`@ConfigurationProperties` does), you need to have a property in the target bean of type\n`java.util.List` (or `Set`) and you either need to provide a setter or initialize it with\na mutable value. For example, the following example binds to the properties shown\npreviously:\n\n[source,java,indent=0]\n----\n\t@ConfigurationProperties(prefix="my")\n\tpublic class Config {\n\n\t\tprivate List<String> servers = new ArrayList<String>();\n\n\t\tpublic List<String> getServers() {\n\t\t\treturn this.servers;\n\t\t}\n\t}\n----\n\n\n\n[[boot-features-external-config-exposing-yaml-to-spring]]\n==== Exposing YAML as Properties in the Spring Environment\nThe `YamlPropertySourceLoader` class can be used to expose YAML as a `PropertySource` in\nthe Spring `Environment`. Doing so lets you use the `@Value` annotation with placeholders\nsyntax to access YAML properties.\n\n\n\n[[boot-features-external-config-multi-profile-yaml]]\n==== Multi-profile YAML Documents\nYou can specify multiple profile-specific YAML documents in a single file by using a\n`spring.profiles` key to indicate when the document applies, as shown in the following\nexample:\n\n[source,yaml,indent=0]\n----\n\tserver:\n\t\taddress: 192.168.1.100\n\t---\n\tspring:\n\t\tprofiles: development\n\tserver:\n\t\taddress: 127.0.0.1\n\t---\n\tspring:\n\t\tprofiles: production\n\tserver:\n\t\taddress: 192.168.1.120\n----\n\nIn the preceding example, if the `development` profile is active, the `server.address`\nproperty is `127.0.0.1`. Similarly, if the `production` profile is active, the\n`server.address` property is `192.168.1.120`. If the `development` and `production`\nprofiles are *not* enabled, then the value for the property is `192.168.1.100`.\n\nIf none are explicitly active when the application context starts, the default profiles\nare activated. So, in the following YAML, we set a value for `spring.security.user.password`\nthat is available *only* in the "default" profile:\n\n[source,yaml,indent=0]\n----\n\tserver:\n\t  port: 8000\n\t---\n\tspring:\n\t  profiles: default\n\t  security:\n\t    user:\n\t      password: weak\n----\n\nWhereas, in the following example, the password is always set because it is not attached\nto any profile, and it would have to be explicitly reset in all other profiles as\nnecessary:\n\n[source,yaml,indent=0]\n----\n\tserver:\n\t  port: 8000\n\tspring:\n\t  security:\n\t    user:\n\t      password: weak\n----\n\nSpring profiles designated by using the `spring.profiles` element may optionally be\nnegated by using the `!` character. If both negated and non-negated profiles are\nspecified for a single document, at least one non-negated profile must match, and no\nnegated profiles may match.\n\n\n\n[[boot-features-external-config-yaml-shortcomings]]\n==== YAML Shortcomings\nYAML files cannot be loaded by using the `@PropertySource` annotation. So, in the case\nthat you need to load values that way, you need to use a properties file.\n\n\n\n[[boot-features-external-config-typesafe-configuration-properties]]\n=== Type-safe Configuration Properties\nUsing the `@Value("${property}")` annotation to inject configuration properties can\nsometimes be cumbersome, especially if you are working with multiple properties or your\ndata is hierarchical in nature. Spring Boot provides an alternative method of working\nwith properties that lets strongly typed beans govern and validate the configuration of\nyour application, as shown in the following example:\n\n[source,java,indent=0]\n----\n\tpackage com.example;\n\n\timport java.net.InetAddress;\n\timport java.util.ArrayList;\n\timport java.util.Collections;\n\timport java.util.List;\n\n\timport org.springframework.boot.context.properties.ConfigurationProperties;\n\n\t@ConfigurationProperties("acme")\n\tpublic class AcmeProperties {\n\n\t\tprivate boolean enabled;\n\n\t\tprivate InetAddress remoteAddress;\n\n\t\tprivate final Security security = new Security();\n\n\t\tpublic boolean isEnabled() { ... }\n\n\t\tpublic void setEnabled(boolean enabled) { ... }\n\n\t\tpublic InetAddress getRemoteAddress() { ... }\n\n\t\tpublic void setRemoteAddress(InetAddress remoteAddress) { ... }\n\n\t\tpublic Security getSecurity() { ... }\n\n\t\tpublic static class Security {\n\n\t\t\tprivate String username;\n\n\t\t\tprivate String password;\n\n\t\t\tprivate List<String> roles = new ArrayList<>(Collections.singleton("USER"));\n\n\t\t\tpublic String getUsername() { ... }\n\n\t\t\tpublic void setUsername(String username) { ... }\n\n\t\t\tpublic String getPassword() { ... }\n\n\t\t\tpublic void setPassword(String password) { ... }\n\n\t\t\tpublic List<String> getRoles() { ... }\n\n\t\t\tpublic void setRoles(List<String> roles) { ... }\n\n\t\t}\n\t}\n----\n\nThe preceding POJO defines the following properties:\n\n* `acme.enabled`, with a value of `false` by default.\n* `acme.remote-address`, with a type that can be coerced from `String`.\n* `acme.security.username`, with a nested "security" object whose name is determined by\nthe name of the property. In particular, the return type is not used at all there and\ncould have been `SecurityProperties`.\n* `acme.security.password`.\n* `acme.security.roles`, with a collection of `String`.\n\n[NOTE]\n====\nGetters and setters are usually mandatory, since binding is through standard Java Beans\nproperty descriptors, just like in Spring MVC. A setter may be omitted in the following\ncases:\n\n* Maps, as long as they are initialized, need a getter but not necessarily a setter,\nsince they can be mutated by the binder.\n* Collections and arrays can be accessed either through an index (typically with YAML) or\nby using a single comma-separated value (properties). In the latter case, a setter is\nmandatory. We recommend to always add a setter for such types. If you initialize a\ncollection, make sure it is not immutable (as in the preceding example).\n* If nested POJO properties are initialized (like the `Security` field in the preceding\nexample), a setter is not required. If you want the binder to create the instance on the\nfly by using its default constructor, you need a setter.\n\nSome people use Project Lombok to add getters and setters automatically. Make sure that\nLombok does not generate any particular constructor for such a type, as it is used\nautomatically by the container to instantiate the object.\n\nFinally, only standard Java Bean properties are considered and binding on static\nproperties is not supported.\n====\n\nTIP: See also the <<boot-features-external-config-vs-value,differences between `@Value`\nand `@ConfigurationProperties`>>.\n\nYou also need to list the properties classes to register in the\n`@EnableConfigurationProperties` annotation, as shown in the following example:\n\n[source,java,indent=0]\n----\n\t@Configuration\n\t@EnableConfigurationProperties(AcmeProperties.class)\n\tpublic class MyConfiguration {\n\t}\n----\n\n[NOTE]\n====\nWhen the `@ConfigurationProperties` bean is registered that way, the bean has a\nconventional name: `<prefix>-<fqn>`, where `<prefix>` is the environment key prefix\nspecified in the `@ConfigurationProperties` annotation and `<fqn>` is the fully qualified\nname of the bean. If the annotation does not provide any prefix, only the fully qualified\nname of the bean is used.\n\nThe bean name in the example above is `acme-com.example.AcmeProperties`.\n====\n\nEven if the preceding configuration creates a regular bean for `AcmeProperties`, we\nrecommend that `@ConfigurationProperties` only deal with the environment and, in\nparticular, does not inject other beans from the context. Having said that, the\n`@EnableConfigurationProperties` annotation is _also_ automatically applied to your\nproject so that any _existing_ bean annotated with `@ConfigurationProperties` is\nconfigured from the `Environment`. You could shortcut `MyConfiguration` by making sure\n`AcmeProperties` is already a bean, as shown in the following example:\n\n[source,java,indent=0]\n----\n\t@Component\n\t@ConfigurationProperties(prefix="acme")\n\tpublic class AcmeProperties {\n\n\t\t// ... see the preceding example\n\n\t}\n----\n\nThis style of configuration works particularly well with the `SpringApplication` external\nYAML configuration, as shown in the following example:\n\n[source,yaml,indent=0]\n----\n\t# application.yml\n\n\tacme:\n\t\tremote-address: 192.168.1.1\n\t\tsecurity:\n\t\t\tusername: admin\n\t\t\troles:\n\t\t\t  - USER\n\t\t\t  - ADMIN\n\n\t# additional configuration as required\n----\n\nTo work with `@ConfigurationProperties` beans, you can inject them in the same way\nas any other bean, as shown in the following example:\n\n[source,java,indent=0]\n----\n\t@Service\n\tpublic class MyService {\n\n\t\tprivate final AcmeProperties properties;\n\n\t\t@Autowired\n\t\tpublic MyService(AcmeProperties properties) {\n\t\t    this.properties = properties;\n\t\t}\n\n\t \t//...\n\n\t\t@PostConstruct\n\t\tpublic void openConnection() {\n\t\t\tServer server = new Server(this.properties.getRemoteAddress());\n\t\t\t// ...\n\t\t}\n\n\t}\n----\n\nTIP: Using `@ConfigurationProperties` also lets you generate metadata files that can be\nused by IDEs to offer auto-completion for your own keys. See the\n<<configuration-metadata>> appendix for details.\n\n\n\n[[boot-features-external-config-3rd-party-configuration]]\n==== Third-party Configuration\nAs well as using `@ConfigurationProperties` to annotate a class, you can also use it on\npublic `@Bean` methods. Doing so can be particularly useful when you want to bind\nproperties to third-party components that are outside of your control.\n\nTo configure a bean from the `Environment` properties, add `@ConfigurationProperties` to\nits bean registration, as shown in the following example:\n\n[source,java,indent=0]\n----\n\t@ConfigurationProperties(prefix = "another")\n\t@Bean\n\tpublic AnotherComponent anotherComponent() {\n\t\t...\n\t}\n----\n\nAny property defined with the `another` prefix is mapped onto that `AnotherComponent` bean\nin manner similar to the preceding `AcmeProperties` example.\n\n\n\n[[boot-features-external-config-relaxed-binding]]\n==== Relaxed Binding\nSpring Boot uses some relaxed rules for binding `Environment` properties to\n`@ConfigurationProperties` beans, so there does not need to be an exact match between the\n`Environment` property name and the bean property name.  Common examples where this is\nuseful include dash-separated environment properties (for example, `context-path` binds\nto `contextPath`), and capitalized environment properties (for example, `PORT` binds to\n`port`).\n\nFor example, consider the following `@ConfigurationProperties` class:\n\n[source,java,indent=0]\n----\n\t@ConfigurationProperties(prefix="acme.my-project.person")\n\tpublic class OwnerProperties {\n\n\t\tprivate String firstName;\n\n\t\tpublic String getFirstName() {\n\t\t\treturn this.firstName;\n\t\t}\n\n\t\tpublic void setFirstName(String firstName) {\n\t\t\tthis.firstName = firstName;\n\t\t}\n\n\t}\n----\n\nIn the preceding example, the following properties names can all be used:\n\n.relaxed binding\n[cols="1,4"]\n|===\n| Property | Note\n\n|`acme.my-project.person.first-name`\n|Kebab case, which is recommended for use in `.properties` and `.yml` files.\n\n|`acme.myProject.person.firstName`\n|Standard camel case syntax.\n\n|`acme.my_project.person.first_name`\n|Underscore notation, which is an alternative format for use in `.properties` and `.yml`\nfiles.\n\n|`ACME_MYPROJECT_PERSON_FIRSTNAME`\n|Upper case format, which is recommended when using system environment variables.\n|===\n\nNOTE: The `prefix` value for the annotation _must_ be in kebab case (lowercase and\nseparated by `-`, such as `acme.my-project.person`).\n\n.relaxed binding rules per property source\n[cols="2,4,4"]\n|===\n| Property Source | Simple | List\n\n|Properties Files\n|Camel case, kebab case, or underscore notation\n|Standard list syntax using `[ ]` or comma-separated values\n\n|YAML Files\n|Camel case, kebab case, or underscore notation\n|Standard YAML list syntax or comma-separated values\n\n|Environment Variables\n|Upper case format with underscore as the delimiter. `_` should not be used within a\nproperty name\n|Numeric values surrounded by underscores, such as `MY_ACME_1_OTHER = my.acme[1].other`\n\n|System properties\n|Camel case, kebab case, or underscore notation\n|Standard list syntax using `[ ]` or comma-separated values\n|===\n\nTIP: We recommend that, when possible, properties are stored in lower-case kebab format,\nsuch as `my.property-name=acme`.\n\nWhen binding to `Map` properties, if the `key` contains anything other than lowercase\nalpha-numeric characters or `-`, you need to use the bracket notation so that the original\nvalue is preserved. If the key is not surrounded by `[]`, any characters that are not alpha-numeric\nor `-` are removed. For example, consider binding the following properties to a `Map`:\n\n[source,yaml,indent=0]\n----\n\tacme:\n\t  map:\n\t    "[/key1]": value1\n\t    "[/key2]": value2\n\t    /key3: value3\n\n----\n\nThe properties above will bind to a `Map` with `/key1`, `/key2` and `key3` as the keys in the map.\n\n\n[[boot-features-external-config-complex-type-merge]]\n==== Merging Complex Types\nWhen lists are configured in more than one place, overriding works by replacing the entire\nlist.\n\nFor example, assume a `MyPojo` object with `name` and `description` attributes that are\n`null` by default. The following example exposes a list of `MyPojo` objects from\n`AcmeProperties`:\n\n[source,java,indent=0]\n----\n\t@ConfigurationProperties("acme")\n\tpublic class AcmeProperties {\n\n\t\tprivate final List<MyPojo> list = new ArrayList<>();\n\n\t\tpublic List<MyPojo> getList() {\n\t\t\treturn this.list;\n\t\t}\n\n\t}\n----\n\nConsider the following configuration:\n\n[source,yaml,indent=0]\n----\n\tacme:\n\t  list:\n\t    - name: my name\n\t      description: my description\n\t---\n\tspring:\n\t  profiles: dev\n\tacme:\n\t  list:\n\t    - name: my another name\n----\n\nIf the `dev` profile is not active, `AcmeProperties.list` contains one `MyPojo` entry,\nas previously defined. If the `dev` profile is enabled, however, the `list` _still_\ncontains only one entry (with a name of `my another name` and a description of `null`).\nThis configuration _does not_ add a second `MyPojo` instance to the list, and it does not\nmerge the items.\n\nWhen a `List` is specified in multiple profiles, the one with the highest priority\n(and only that one) is used. Consider the following example:\n\n[source,yaml,indent=0]\n----\n\tacme:\n\t  list:\n\t    - name: my name\n\t      description: my description\n\t    - name: another name\n\t      description: another description\n\t---\n\tspring:\n\t  profiles: dev\n\tacme:\n\t  list:\n\t    - name: my another name\n----\n\nIn the preceding example, if the `dev` profile is active, `AcmeProperties.list` contains\n_one_ `MyPojo` entry (with a name of `my another name` and a description of `null`).\nFor YAML, both comma-separated lists and YAML lists can be used for\ncompletely overriding the contents of the list.\n\nFor `Map` properties, you can bind with property values drawn from multiple sources. However,\nfor the same property in multiple sources, the one with the highest priority is used.\nThe following example exposes a `Map<String, MyPojo>` from `AcmeProperties`:\n\n[source,java,indent=0]\n----\n\t@ConfigurationProperties("acme")\n\tpublic class AcmeProperties {\n\n\t\tprivate final Map<String, MyPojo> map = new HashMap<>();\n\n\t\tpublic Map<String, MyPojo> getMap() {\n\t\t\treturn this.map;\n\t\t}\n\n\t}\n----\n\nConsider the following configuration:\n\n[source,yaml,indent=0]\n----\n\tacme:\n\t  map:\n\t    key1:\n\t      name: my name 1\n\t      description: my description 1\n\t---\n\tspring:\n\t  profiles: dev\n\tacme:\n\t  map:\n\t    key1:\n\t      name: dev name 1\n\t    key2:\n\t      name: dev name 2\n\t      description: dev description 2\n----\n\nIf the `dev` profile is not active, `AcmeProperties.map` contains one entry with key `key1`\n(with a name of `my name 1` and a description of `my description 1`).\nIf the `dev` profile is enabled, however, `map` contains two entries with keys `key1`\n(with a name of `dev name 1` and a description of `my description 1`) and\n`key2` (with a name of `dev name 2` and a description of `dev description 2`).\n\nNOTE: The preceding merging rules apply to properties from all property sources and not just\nYAML files.\n\n[[boot-features-external-config-conversion]]\n==== Properties Conversion\nSpring Boot attempts to coerce the external application properties to the right type when\nit binds to the `@ConfigurationProperties` beans. If you need custom type conversion, you\ncan provide a `ConversionService` bean (with a bean named `conversionService`) or custom\nproperty editors (through a `CustomEditorConfigurer` bean) or custom `Converters` (with\nbean definitions annotated as `@ConfigurationPropertiesBinding`).\n\nNOTE: As this bean is requested very early during the application lifecycle, make sure to\nlimit the dependencies that your `ConversionService` is using. Typically, any dependency\nthat you require may not be fully initialized at creation time. You may want to rename\nyour custom `ConversionService` if it is not required for configuration keys coercion and\nonly rely on custom converters qualified with `@ConfigurationPropertiesBinding`.\n\n\n\n[[boot-features-external-config-conversion-duration]]\n===== Converting durations\nSpring Boot has dedicated support for expressing durations. If you expose a\n`java.time.Duration` property, the following formats in application properties are\navailable:\n\n* A regular `long` representation (using milliseconds as the default unit unless a\n`@DurationUnit` has been specified)\n* The standard ISO-8601 format\n{java-javadoc}/java/time/Duration.html#parse-java.lang.CharSequence-[used by\n`java.util.Duration`]\n* A more readable format where the value and the unit are coupled (e.g. `10s` means 10\nseconds)\n\nConsider the following example:\n\n[source,java,indent=0]\n----\ninclude::{code-examples}/context/properties/bind/AppSystemProperties.java[tag=example]\n----\n\nTo specify a session timeout of 30 seconds, `30`, `PT30S` and `30s` are all equivalent. A\nread timeout of 500ms can be specified in any of the following form: `500`, `PT0.5S` and\n`500ms`.\n\nYou can also use any of the supported unit. These are:\n\n* `ns` for nanoseconds\n* `us` for microseconds\n* `ms` for milliseconds\n* `s` for seconds\n* `m` for minutes\n* `h` for hours\n* `d` for days\n\nThe default unit is milliseconds and can be overridden using `@DurationUnit` as illustrated\nin the sample above.\n\nTIP: If you are upgrading from a previous version that is simply using `Long` to express\nthe duration, make sure to define the unit (using `@DurationUnit`) if it isn\'t\nmilliseconds alongside the switch to `Duration`. Doing so gives a transparent upgrade path\nwhile supporting a much richer format.\n\n\n\n[[boot-features-external-config-validation]]\n==== @ConfigurationProperties Validation\nSpring Boot attempts to validate `@ConfigurationProperties` classes whenever they are\nannotated with Spring\'s `@Validated` annotation. You can use JSR-303 `javax.validation`\nconstraint annotations directly on your configuration class. To do so, ensure that a\ncompliant JSR-303 implementation is on your classpath and then add constraint annotations\nto your fields, as shown in the following example:\n\n[source,java,indent=0]\n----\n\t@ConfigurationProperties(prefix="acme")\n\t@Validated\n\tpublic class AcmeProperties {\n\n\t\t@NotNull\n\t\tprivate InetAddress remoteAddress;\n\n\t\t// ... getters and setters\n\n\t}\n----\n\nTIP: You can also trigger validation by annotating the `@Bean` method that creates the\nconfiguration properties with `@Validated`.\n\nAlthough nested properties will also be validated when bound, it\'s good practice to\nalso annotate the associated field as `@Valid`. This ensure that validation is triggered\neven if no nested properties are found. The following example builds on the preceding\n`AcmeProperties` example:\n\n[source,java,indent=0]\n----\n\t@ConfigurationProperties(prefix="acme")\n\t@Validated\n\tpublic class AcmeProperties {\n\n\t\t@NotNull\n\t\tprivate InetAddress remoteAddress;\n\n\t\t@Valid\n\t\tprivate final Security security = new Security();\n\n\t\t// ... getters and setters\n\n\t\tpublic static class Security {\n\n\t\t\t@NotEmpty\n\t\t\tpublic String username;\n\n\t\t\t// ... getters and setters\n\n\t\t}\n\n\t}\n----\n\nYou can also add a custom Spring `Validator` by creating a bean definition called\n`configurationPropertiesValidator`. The `@Bean` method should be declared `static`. The\nconfiguration properties validator is created very early in the application\'s lifecycle,\nand declaring the `@Bean` method as static lets the bean be created without having to\ninstantiate the `@Configuration` class. Doing so avoids any problems that may be caused\nby early instantiation. There is a\n{github-code}/spring-boot-samples/spring-boot-sample-property-validation[property\nvalidation sample] that shows how to set things up.\n\nTIP: The `spring-boot-actuator` module includes an endpoint that exposes all\n`@ConfigurationProperties` beans. Point your web browser to\n`/actuator/configprops` or use the equivalent JMX endpoint. See the\n"<<production-ready-features.adoc#production-ready-endpoints, Production ready features>>"\nsection for details.\n\n\n\n[[boot-features-external-config-vs-value]]\n==== @ConfigurationProperties vs. @Value\nThe `@Value` annotation is a core container feature, and it does not provide the same\nfeatures as type-safe configuration properties. The following table summarizes the\nfeatures that are supported by `@ConfigurationProperties` and `@Value`:\n\n[cols="4,2,2"]\n|===\n|Feature |`@ConfigurationProperties` |`@Value`\n\n| <<boot-features-external-config-relaxed-binding,Relaxed binding>>\n| Yes\n| No\n\n| <<appendix-configuration-metadata.adoc#configuration-metadata,Meta-data support>>\n| Yes\n| No\n\n| `SpEL` evaluation\n| No\n| Yes\n|===\n\nIf you define a set of configuration keys for your own components, we recommend you\ngroup them in a POJO annotated with `@ConfigurationProperties`. You should also be aware\nthat, since `@Value` does not support relaxed binding, it is not a good candidate if you\nneed to provide the value by using environment variables.\n\nFinally, while you can write a `SpEL` expression in `@Value`, such expressions are not\nprocessed from <<boot-features-external-config-application-property-files,application\nproperty files>>.\n\n\n\n[[boot-features-profiles]]\n== Profiles\nSpring Profiles provide a way to segregate parts of your application configuration and\nmake it be available only in certain environments.  Any `@Component` or `@Configuration`\ncan be marked with `@Profile` to limit when it is loaded, as shown in the following\nexample:\n\n[source,java,indent=0]\n----\n\t@Configuration\n\t@Profile("production")\n\tpublic class ProductionConfiguration {\n\n\t\t// ...\n\n\t}\n----\n\nYou can use a `spring.profiles.active` `Environment` property to specify which profiles\nare active. You can specify the property in any of the ways described earlier in this\nchapter. For example, you could include it in your `application.properties`, as shown in\nthe following example:\n\n[source,properties,indent=0]\n----\n\tspring.profiles.active=dev,hsqldb\n----\n\nYou could also specify it on the command line by using the following switch:\n`--spring.profiles.active=dev,hsqldb`.\n\n\n\n[[boot-features-adding-active-profiles]]\n=== Adding Active Profiles\nThe `spring.profiles.active` property follows the same ordering rules as other\nproperties: The highest `PropertySource` wins. This means that you can specify active\nprofiles in `application.properties` and then *replace* them by using the command line\nswitch.\n\nSometimes, it is useful to have profile-specific properties that *add* to the active\nprofiles rather than replace them. The `spring.profiles.include` property can be used to\nunconditionally add active profiles. The `SpringApplication` entry point also has a Java\nAPI for setting additional profiles (that is, on top of those activated by the\n`spring.profiles.active` property). See the `setAdditionalProfiles()` method in\n{dc-spring-boot}/SpringApplication.html[SpringApplication].\n\nFor example, when an application with the following properties is run by using the\nswitch, `--spring.profiles.active=prod`, the `proddb` and `prodmq` profiles are also\nactivated:\n\n[source,yaml,indent=0]\n----\n\t---\n\tmy.property: fromyamlfile\n\t---\n\tspring.profiles: prod\n\tspring.profiles.include:\n\t  - proddb\n\t  - prodmq\n----\n\nNOTE: Remember that the `spring.profiles` property can be defined in a YAML document to\ndetermine when this particular document is included in the configuration. See\n<<howto-change-configuration-depending-on-the-environment>> for more details.\n\n\n\n[[boot-features-programmatically-setting-profiles]]\n=== Programmatically Setting Profiles\nYou can programmatically set active profiles by calling\n`SpringApplication.setAdditionalProfiles(...)` before your application runs. It is also\npossible to activate profiles by using Spring\'s `ConfigurableEnvironment` interface.\n\n\n\n[[boot-features-profile-specific-configuration]]\n=== Profile-specific Configuration Files\nProfile-specific variants of both `application.properties` (or `application.yml`) and\nfiles referenced through `@ConfigurationProperties` are considered as files and loaded.\nSee "<<boot-features-external-config-profile-specific-properties>>" for details.\n\n\n\n[[boot-features-logging]]\n== Logging\nSpring Boot uses http://commons.apache.org/logging[Commons Logging] for all internal\nlogging but leaves the underlying log implementation open. Default configurations are\nprovided for\n{java-javadoc}/java/util/logging/package-summary.html[Java Util\nLogging], http://logging.apache.org/log4j/2.x/[Log4J2], and\nhttp://logback.qos.ch/[Logback]. In each case, loggers are pre-configured to use console\noutput with optional file output also available.\n\nBy default, if you use the "`Starters`", Logback is used for logging. Appropriate Logback\nrouting is also included to ensure that dependent libraries that use Java Util Logging,\nCommons Logging, Log4J, or SLF4J all work correctly.\n\nTIP: There are a lot of logging frameworks available for Java. Do not worry if the above\nlist seems confusing. Generally, you do not need to change your logging dependencies and\nthe Spring Boot defaults work just fine.\n\n\n\n[[boot-features-logging-format]]\n=== Log Format\nThe default log output from Spring Boot resembles the following example:\n\n[indent=0]\n----\n2014-03-05 10:57:51.112  INFO 45469 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet Engine: Apache Tomcat/7.0.52\n2014-03-05 10:57:51.253  INFO 45469 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext\n2014-03-05 10:57:51.253  INFO 45469 --- [ost-startStop-1] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1358 ms\n2014-03-05 10:57:51.698  INFO 45469 --- [ost-startStop-1] o.s.b.c.e.ServletRegistrationBean        : Mapping servlet: \'dispatcherServlet\' to [/]\n2014-03-05 10:57:51.702  INFO 45469 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: \'hiddenHttpMethodFilter\' to: [/*]\n----\n\nThe following items are output:\n\n* Date and Time: Millisecond precision and easily sortable.\n* Log Level: `ERROR`, `WARN`, `INFO`, `DEBUG`, or `TRACE`.\n* Process ID.\n* A `---` separator to distinguish the start of actual log messages.\n* Thread name: Enclosed in square brackets (may be truncated for console output).\n* Logger name: This is usually the source class name (often abbreviated).\n* The log message.\n\nNOTE: Logback does not have a `FATAL` level. It is mapped to `ERROR`.\n\n\n[[boot-features-logging-console-output]]\n=== Console Output\nThe default log configuration echoes messages to the console as they are written. By\ndefault, `ERROR`-level, `WARN`-level, and `INFO`-level messages are logged. You can also\nenable a "`debug`" mode by starting your application with a `--debug` flag.\n\n[indent=0]\n----\n\t$ java -jar myapp.jar --debug\n----\n\nNOTE: You can also specify `debug=true` in your `application.properties`.\n\nWhen the debug mode is enabled, a selection of core loggers (embedded container,\nHibernate, and Spring Boot) are configured to output more information. Enabling the debug\nmode does _not_ configure your application to log all messages with `DEBUG` level.\n\nAlternatively, you can enable a "`trace`" mode by starting your application with a\n`--trace` flag (or `trace=true` in your `application.properties`). Doing so enables trace\nlogging for a selection of core loggers (embedded container, Hibernate schema generation,\nand the whole Spring portfolio).\n\n[[boot-features-logging-color-coded-output]]\n==== Color-coded Output\nIf your terminal supports ANSI, color output is used to aid readability. You can set\n`spring.output.ansi.enabled` to a\n{dc-spring-boot}/ansi/AnsiOutput.Enabled.{dc-ext}[supported value] to override the auto\ndetection.\n\nColor coding is configured by using the `%clr` conversion word. In its simplest form, the\nconverter colors the output according to the log level, as shown in the following\nexample:\n\n[source,indent=0]\n----\n%clr(%5p)\n----\n\nThe following table describes the mapping of log levels to colors:\n\n|===\n|Level | Color\n\n|`FATAL`\n| Red\n\n|`ERROR`\n| Red\n\n|`WARN`\n| Yellow\n\n|`INFO`\n| Green\n\n|`DEBUG`\n| Green\n\n|`TRACE`\n| Green\n|===\n\nAlternatively, you can specify the color or style that should be used by providing it as\nan option to the conversion. For example, to make the text yellow, use the following\nsetting:\n\n[source,indent=0]\n----\n%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){yellow}\n----\n\nThe following colors and styles are supported:\n\n* `blue`\n* `cyan`\n* `faint`\n* `green`\n* `magenta`\n* `red`\n* `yellow`\n\n[[boot-features-logging-file-output]]\n=== File Output\nBy default, Spring Boot logs only to the console and does not write log files. If you\nwant to write log files in addition to the console output, you need to set a\n`logging.file` or `logging.path` property (for example, in your\n`application.properties`).\n\nThe following table shows how the `logging.*` properties can be used together:\n\n.Logging properties\n[cols="1,1,1,4"]\n|===\n|`logging.file` |`logging.path` |Example |Description\n\n|_(none)_\n|_(none)_\n|\n|Console only logging.\n\n|Specific file\n|_(none)_\n|`my.log`\n|Writes to the specified log file. Names can be an exact location or relative to the\ncurrent directory.\n\n|_(none)_\n|Specific directory\n|`/var/log`\n|Writes `spring.log` to the specified directory. Names can be an exact location or\nrelative to the current directory.\n|===\n\nLog files rotate when they reach 10 MB and, as with console output, `ERROR`-level,\n`WARN`-level, and `INFO`-level messages are logged by default. Size limits can be changed\nusing the `logging.file.max-size` property. Previously rotated files are archived\nindefinitely unless the `logging.file.max-history` property has been set.\n\nNOTE: The logging system is initialized early in the application lifecycle. Consequently,\nlogging properties are not found in property files loaded through `@PropertySource`\nannotations.\n\nTIP: Logging properties are independent of the actual logging infrastructure. As a\nresult, specific configuration keys (such as `logback.configurationFile` for Logback) are\nnot managed by spring Boot.\n\n\n[[boot-features-custom-log-levels]]\n=== Log Levels\nAll the supported logging systems can have the logger levels set in the Spring\n`Environment` (for example, in `application.properties`) by using\n`+logging.level.<logger-name>=<level>+` where `level` is one of TRACE, DEBUG, INFO, WARN,\nERROR, FATAL, or OFF. The `root` logger can be configured by using `logging.level.root`.\n\nThe following example shows potential logging settings in `application.properties`:\n\n[source,properties,indent=0,subs="verbatim,quotes,attributes"]\n----\n\tlogging.level.root=WARN\n\tlogging.level.org.springframework.web=DEBUG\n\tlogging.level.org.hibernate=ERROR\n----\n\n\n\n[[boot-features-custom-log-configuration]]\n=== Custom Log Configuration\nThe various logging systems can be activated by including the appropriate libraries on\nthe classpath and can be further customized by providing a suitable configuration file in\nthe root of the classpath or in a location specified by the following Spring `Environment`\nproperty: `logging.config`.\n\nYou can force Spring Boot to use a particular logging system by using the\n`org.springframework.boot.logging.LoggingSystem` system property. The value should be the\nfully qualified class name of a `LoggingSystem` implementation. You can also disable\nSpring Boot\'s logging configuration entirely by using a value of `none`.\n\nNOTE: Since logging is initialized *before* the `ApplicationContext` is created, it is\nnot possible to control logging from `@PropertySources` in Spring `@Configuration` files.\nThe only way to change the logging system or disable it entirely is via System properties.\n\nDepending on your logging system, the following files are loaded:\n\n|===\n|Logging System |Customization\n\n|Logback\n|`logback-spring.xml`, `logback-spring.groovy`, `logback.xml`, or `logback.groovy`\n\n|Log4j2\n|`log4j2-spring.xml` or `log4j2.xml`\n\n|JDK (Java Util Logging)\n|`logging.properties`\n|===\n\nNOTE: When possible, we recommend that you use the `-spring` variants for your logging\nconfiguration (for example, `logback-spring.xml` rather than `logback.xml`). If you use\nstandard configuration locations, Spring cannot completely control log initialization.\n\nWARNING: There are known classloading issues with Java Util Logging that cause problems\nwhen running from an \'executable jar\'. We recommend that you avoid it when running from\nan \'executable jar\' if at all possible.\n\nTo help with the customization, some other properties are transferred from the Spring\n`Environment` to System properties, as described in the following table:\n\n|===\n|Spring Environment |System Property |Comments\n\n|`logging.exception-conversion-word`\n|`LOG_EXCEPTION_CONVERSION_WORD`\n|The conversion word used when logging exceptions.\n\n|`logging.file`\n|`LOG_FILE`\n|If defined, it is used in the default log configuration.\n\n|`logging.file.max-size`\n|`LOG_FILE_MAX_SIZE`\n|Maximum log file size (if LOG_FILE enabled). (Only supported with the default Logback\nsetup.)\n\n|`logging.file.max-history`\n|`LOG_FILE_MAX_HISTORY`\n|Maximum number of archive log files to keep (if LOG_FILE enabled). (Only supported with\nthe default Logback setup.)\n\n|`logging.path`\n|`LOG_PATH`\n|If defined, it is used in the default log configuration.\n\n|`logging.pattern.console`\n|`CONSOLE_LOG_PATTERN`\n|The log pattern to use on the console (stdout). (Only supported with the default Logback\nsetup.)\n\n|`logging.pattern.dateformat`\n|`LOG_DATEFORMAT_PATTERN`\n|Appender pattern for log date format. (Only supported with the default Logback setup.)\n\n|`logging.pattern.file`\n|`FILE_LOG_PATTERN`\n|The log pattern to use in a file (if `LOG_FILE` is enabled). (Only supported with the\ndefault Logback setup.)\n\n|`logging.pattern.level`\n|`LOG_LEVEL_PATTERN`\n|The format to use when rendering the log level (default `%5p`). (Only supported with the\ndefault Logback setup.)\n\n|`PID`\n|`PID`\n|The current process ID (discovered if possible and when not already defined as an OS\nenvironment variable).\n|===\n\nAll the supported logging systems can consult System properties when parsing their\nconfiguration files.  See the default configurations in `spring-boot.jar` for examples:\n\n* {github-code}/spring-boot-project/spring-boot/src/main/resources/org/springframework/boot/logging/logback/defaults.xml[Logback]\n* {github-code}/spring-boot-project/spring-boot/src/main/resources/org/springframework/boot/logging/log4j2/log4j2.xml[Log4j 2]\n* {github-code}/spring-boot-project/spring-boot/src/main/resources/org/springframework/boot/logging/java/logging-file.properties[Java Util logging]\n\n[TIP]\n====\nIf you want to use a placeholder in a logging property, you should use\n<<boot-features-external-config-placeholders-in-properties,Spring Boot\'s syntax>> and not\nthe syntax of the underlying framework. Notably, if you use Logback, you should use `:`\nas the delimiter between a property name and its default value and not use `:-`.\n====\n\n[TIP]\n====\n\nYou can add MDC and other ad-hoc content to log lines by overriding only the\n`LOG_LEVEL_PATTERN` (or `logging.pattern.level` with Logback). For example, if you use\n`logging.pattern.level=user:%X{user} %5p`, then the default log format contains an MDC\nentry for "user", if it exists, as shown in the following example.\n\n----\n2015-09-30 12:30:04.031 user:someone INFO 22174 --- [  nio-8080-exec-0] demo.Controller\nHandling authenticated request\n----\n====\n\n\n\n[[boot-features-logback-extensions]]\n=== Logback Extensions\nSpring Boot includes a number of extensions to Logback that can help with advanced\nconfiguration. You can use these extensions in your `logback-spring.xml` configuration\nfile.\n\nNOTE: Because the standard `logback.xml` configuration file is loaded too early, you\ncannot use extensions in it. You need to either use `logback-spring.xml` or define a\n`logging.config` property.\n\nWARNING: The extensions cannot be used with Logback\'s\nhttp://logback.qos.ch/manual/configuration.html#autoScan[configuration scanning]. If you\nattempt to do so, making changes to the configuration file results in an error similar to\none of the following being logged:\n\n----\nERROR in ch.qos.logback.core.joran.spi.Interpreter@4:71 - no applicable action for [springProperty], current ElementPath is [[configuration][springProperty]]\nERROR in ch.qos.logback.core.joran.spi.Interpreter@4:71 - no applicable action for [springProfile], current ElementPath is [[configuration][springProfile]]\n----\n\n\n\n==== Profile-specific Configuration\nThe `<springProfile>` tag lets you optionally include or exclude sections of\nconfiguration based on the active Spring profiles. Profile sections are supported\nanywhere within the `<configuration>` element. Use the `name` attribute to specify which\nprofile accepts the configuration. Multiple profiles can be specified with a\ncomma-separated list. The following listing shows three sample profiles:\n\n[source,xml,indent=0]\n----\n\t<springProfile name="staging">\n\t\t<!-- configuration to be enabled when the "staging" profile is active -->\n\t</springProfile>\n\n\t<springProfile name="dev, staging">\n\t\t<!-- configuration to be enabled when the "dev" or "staging" profiles are active -->\n\t</springProfile>\n\n\t<springProfile name="!production">\n\t\t<!-- configuration to be enabled when the "production" profile is not active -->\n\t</springProfile>\n----\n\n\n\n==== Environment Properties\nThe `<springProperty>` tag lets you expose properties from the Spring `Environment` for\nuse within Logback. Doing so can be useful if you want to access values from your\n`application.properties` file in your Logback configuration. The tag works in a similar\nway to Logback\'s standard `<property>` tag. However, rather than specifying a direct\n`value`, you specify the `source` of the property (from the `Environment`). If you need\nto store the property somewhere other than in `local` scope, you can use the `scope`\nattribute. If you need a fallback value (in case the property is not set in the\n`Environment`), you can use the `defaultValue` attribute. The following example shows how\nto expose properties for use within Logback:\n\n[source,xml,indent=0]\n----\n\t<springProperty scope="context" name="fluentHost" source="myapp.fluentd.host"\n\t\t\tdefaultValue="localhost"/>\n\t<appender name="FLUENT" class="ch.qos.logback.more.appenders.DataFluentAppender">\n\t\t<remoteHost>${fluentHost}</remoteHost>\n\t\t...\n\t</appender>\n----\n\nNOTE: The `source` must be specified in kebab case (such as `my.property-name`).\nHowever, properties can be added to the `Environment` by using the relaxed rules.\n\n\n\n[[boot-features-json]]\n== JSON\nSpring Boot provides integration with three JSON mapping libraries:\n\n- Gson\n- Jackson\n- JSON-B\n\nJackson is the preferred and default library.\n\n\n\n[[boot-features-json-jackson]]\n=== Jackson\nAuto-configuration for Jackson is provided and Jackson is part of\n`spring-boot-starter-json`. When Jackson is on the classpath an `ObjectMapper`\nbean is automatically configured. Several configuration properties are provided for\n<<howto.adoc#howto-customize-the-jackson-objectmapper,customizing the configuration of the\n`ObjectMapper`>>.\n\n\n\n[[boot-features-json-gson]]\n=== Gson\nAuto-configuration for Gson is provided. When Gson is on the classpath a `Gson` bean is\nautomatically configured.  Several `+spring.gson.*+` configuration properties are\nprovided for customizing the configuration. To take more control, one or more\n`GsonBuilderCustomizer` beans can be used.\n\n\n\n[[boot-features-json-json-b]]\n=== JSON-B\nAuto-configuration for JSON-B is provided. When the JSON-B API and an implementation are\non the classpath a `Jsonb` bean will be automatically configured. The preferred JSON-B\nimplementation is Apache Johnzon for which dependency management is provided.\n\n\n\n[[boot-features-developing-web-applications]]\n== Developing Web Applications\nSpring Boot is well suited for web application development. You can create a\nself-contained HTTP server by using embedded Tomcat, Jetty, Undertow, or Netty. Most web\napplications use the `spring-boot-starter-web` module to get up and running quickly. You\ncan also choose to build reactive web applications by using the\n`spring-boot-starter-webflux` module.\n\nIf you have not yet developed a Spring Boot web application, you can follow the\n"Hello World!" example in the\n_<<getting-started.adoc#getting-started-first-application, Getting started>>_ section.\n\n\n\n[[boot-features-spring-mvc]]\n=== The "`Spring Web MVC Framework`"\nThe {spring-reference}web.html#mvc[Spring Web MVC framework] (often referred to as simply\n"`Spring MVC`") is a rich "`model view controller`" web framework. Spring MVC lets you\ncreate special `@Controller` or `@RestController` beans to handle incoming HTTP requests.\nMethods in your controller are mapped to HTTP by using `@RequestMapping` annotations.\n\nThe following code shows a typical `@RestController` that serves JSON data:\n\n[source,java,indent=0]\n----\n\t@RestController\n\t@RequestMapping(value="/users")\n\tpublic class MyRestController {\n\n\t\t@RequestMapping(value="/{user}", method=RequestMethod.GET)\n\t\tpublic User getUser(@PathVariable Long user) {\n\t\t\t// ...\n\t\t}\n\n\t\t@RequestMapping(value="/{user}/customers", method=RequestMethod.GET)\n\t\tList<Customer> getUserCustomers(@PathVariable Long user) {\n\t\t\t// ...\n\t\t}\n\n\t\t@RequestMapping(value="/{user}", method=RequestMethod.DELETE)\n\t\tpublic User deleteUser(@PathVariable Long user) {\n\t\t\t// ...\n\t\t}\n\n\t}\n----\n\nSpring MVC is part of the core Spring Framework, and detailed information is available in\nthe  {spring-reference}web.html#mvc[reference documentation]. There are also several\nguides that cover Spring MVC available at https://spring.io/guides.\n\n\n\n[[boot-features-spring-mvc-auto-configuration]]\n==== Spring MVC Auto-configuration\nSpring Boot provides auto-configuration for Spring MVC that works well with most\napplications.\n\nThe auto-configuration adds the following features on top of Spring\'s defaults:\n\n* Inclusion of `ContentNegotiatingViewResolver` and `BeanNameViewResolver` beans.\n* Support for serving static resources, including support for WebJars (covered\n<<boot-features-spring-mvc-static-content,later in this document>>)).\n* Automatic registration of `Converter`, `GenericConverter`, and `Formatter` beans.\n* Support for `HttpMessageConverters` (covered\n<<boot-features-spring-mvc-message-converters,later in this document>>).\n* Automatic registration of `MessageCodesResolver` (covered\n<<boot-features-spring-message-codes,later in this document>>).\n* Static `index.html` support.\n* Custom `Favicon` support (covered <<boot-features-spring-mvc-favicon,later in this\ndocument>>).\n* Automatic use of a `ConfigurableWebBindingInitializer` bean (covered\n<<boot-features-spring-mvc-web-binding-initializer,later in this document>>).\n\nIf you want to keep Spring Boot MVC features and you want to add additional\n{spring-reference}web.html#mvc[MVC configuration] (interceptors, formatters, view\ncontrollers, and other features), you can add your own `@Configuration` class of type\n`WebMvcConfigurer` but *without* `@EnableWebMvc`. If you wish to provide custom\ninstances of `RequestMappingHandlerMapping`, `RequestMappingHandlerAdapter`, or\n`ExceptionHandlerExceptionResolver`, you can declare a `WebMvcRegistrationsAdapter`\ninstance to provide such components.\n\nIf you want to take complete control of Spring MVC, you can add your own `@Configuration`\nannotated with `@EnableWebMvc`.\n\n\n[[boot-features-spring-mvc-message-converters]]\n==== HttpMessageConverters\nSpring MVC uses the `HttpMessageConverter` interface to convert HTTP requests and\nresponses. Sensible defaults are included out of the box. For example, objects can be\nautomatically converted to JSON (by using the Jackson library) or XML (by using the\nJackson XML extension, if available, or by using JAXB if the Jackson XML extension is not\navailable). By default, strings are encoded in `UTF-8`.\n\nIf you need to add or customize converters, you can use Spring Boot\'s\n`HttpMessageConverters` class, as shown in the following listing:\n\n[source,java,indent=0]\n----\n\timport org.springframework.boot.autoconfigure.web.HttpMessageConverters;\n\timport org.springframework.context.annotation.*;\n\timport org.springframework.http.converter.*;\n\n\t@Configuration\n\tpublic class MyConfiguration {\n\n\t\t@Bean\n\t\tpublic HttpMessageConverters customConverters() {\n\t\t\tHttpMessageConverter<?> additional = ...\n\t\t\tHttpMessageConverter<?> another = ...\n\t\t\treturn new HttpMessageConverters(additional, another);\n\t\t}\n\n\t}\n----\n\nAny `HttpMessageConverter` bean that is present in the context is added to the list of\nconverters. You can also override default converters in the same way.\n\n\n\n[[boot-features-json-components]]\n==== Custom JSON Serializers and Deserializers\nIf you use Jackson to serialize and deserialize JSON data, you might want to write your\nown `JsonSerializer` and `JsonDeserializer` classes. Custom serializers are usually\nhttps://github.com/FasterXML/jackson-docs/wiki/JacksonHowToCustomSerializers[registered with Jackson through\na module], but Spring Boot provides an alternative `@JsonComponent` annotation that makes\nit easier to directly register Spring Beans.\n\nYou can use the `@JsonComponent` annotation directly on `JsonSerializer` or\n`JsonDeserializer` implementations. You can also use it on classes that contain\nserializers/deserializers as inner classes, as shown in the following example:\n\n[source,java,indent=0]\n----\n\timport java.io.*;\n\timport com.fasterxml.jackson.core.*;\n\timport com.fasterxml.jackson.databind.*;\n\timport org.springframework.boot.jackson.*;\n\n\t@JsonComponent\n\tpublic class Example {\n\n\t\tpublic static class Serializer extends JsonSerializer<SomeObject> {\n\t\t\t// ...\n\t\t}\n\n\t\tpublic static class Deserializer extends JsonDeserializer<SomeObject> {\n\t\t\t// ...\n\t\t}\n\n\t}\n----\n\nAll `@JsonComponent` beans in the `ApplicationContext` are automatically registered with\nJackson. Because `@JsonComponent` is meta-annotated with `@Component`, the usual\ncomponent-scanning rules apply.\n\nSpring Boot also provides\n{sc-spring-boot}/jackson/JsonObjectSerializer.{sc-ext}[`JsonObjectSerializer`] and\n{sc-spring-boot}/jackson/JsonObjectDeserializer.{sc-ext}[`JsonObjectDeserializer`] base\nclasses that provide useful alternatives to the standard Jackson versions when\nserializing objects. See\n{dc-spring-boot}/jackson/JsonObjectSerializer.{dc-ext}[`JsonObjectSerializer`]\nand {dc-spring-boot}/jackson/JsonObjectDeserializer.{dc-ext}[`JsonObjectDeserializer`] in\nthe Javadoc for details.\n\n\n\n[[boot-features-spring-message-codes]]\n==== MessageCodesResolver\nSpring MVC has a strategy for generating error codes for rendering error messages from\nbinding errors: `MessageCodesResolver`. If you set the\n`spring.mvc.message-codes-resolver.format` property `PREFIX_ERROR_CODE` or\n`POSTFIX_ERROR_CODE`, Spring Boot creates one for you (see the enumeration in\n{spring-javadoc}/validation/DefaultMessageCodesResolver.Format.{dc-ext}[`DefaultMessageCodesResolver.Format`]).\n\n\n\n[[boot-features-spring-mvc-static-content]]\n==== Static Content\nBy default, Spring Boot serves static content from a directory called `/static` (or\n`/public` or `/resources` or `/META-INF/resources`) in the classpath or from the root of\nthe `ServletContext`.  It uses the `ResourceHttpRequestHandler` from Spring MVC so that\nyou can modify that behavior by adding your own `WebMvcConfigurer` and overriding the\n`addResourceHandlers` method.\n\nIn a stand-alone web application, the default servlet from the container is also enabled\nand acts as a fallback, serving content from the root of the `ServletContext` if Spring\ndecides not to handle it. Most of the time, this does not happen (unless you modify the\ndefault MVC configuration), because Spring can always handle requests through the\n`DispatcherServlet`.\n\nBy default, resources are mapped on `+/**+`, but you can tune that with the\n`spring.mvc.static-path-pattern` property. For instance, relocating all resources to\n`/resources/**` can be achieved as follows:\n\n[source,properties,indent=0,subs="verbatim,quotes,attributes"]\n----\n\tspring.mvc.static-path-pattern=/resources/**\n----\n\nYou can also customize the static resource locations by using the\n`spring.resources.static-locations` property (replacing the default values with a list of\ndirectory locations). The root Servlet context path, `"/"`, is automatically added as a\nlocation as well.\n\nIn addition to the "`standard`" static resource locations mentioned earlier, a special\ncase is made for https://www.webjars.org/[Webjars content]. Any resources with a path in\n`+/webjars/**+` are served from jar files if they are packaged in the Webjars format.\n\nTIP: Do not use the `src/main/webapp` directory if your application is packaged as a jar.\nAlthough this directory is a common standard, it works *only* with war packaging, and it\nis silently ignored by most build tools if you generate a jar.\n\nSpring Boot also supports the advanced resource handling features provided by Spring MVC,\nallowing use cases such as cache-busting static resources or using version agnostic URLs\nfor Webjars.\n\nTo use version agnostic URLs for Webjars, add the `webjars-locator-core` dependency.\nThen declare your Webjar. Using jQuery as an example, adding\n`"/webjars/jquery/jquery.min.js"` results in\n`"/webjars/jquery/x.y.z/jquery.min.js"`. where `x.y.z` is the Webjar version.\n\nNOTE: If you use JBoss, you need to declare the `webjars-locator-jboss-vfs`\ndependency instead of the `webjars-locator-core`. Otherwise, all Webjars resolve as a\n`404`.\n\nTo use cache busting, the following configuration configures a cache busting solution for\nall static resources, effectively adding a content hash, such as\n`<link href="/css/spring-2a2d595e6ed9a0b24f027f2b63b134d6.css"/>`, in URLs:\n\n[source,properties,indent=0,subs="verbatim,quotes,attributes"]\n----\n\tspring.resources.chain.strategy.content.enabled=true\n\tspring.resources.chain.strategy.content.paths=/**\n----\n\nNOTE: Links to resources are rewritten in templates at runtime, thanks to a\n`ResourceUrlEncodingFilter` that is auto-configured for Thymeleaf and FreeMarker. You\nshould manually declare this filter when using JSPs. Other template engines are currently\nnot automatically supported but can be with custom template macros/helpers and the use of\nthe\n{spring-javadoc}/web/servlet/resource/ResourceUrlProvider.{dc-ext}[`ResourceUrlProvider`].\n\nWhen loading resources dynamically with, for example, a JavaScript module loader,\nrenaming files is not an option. That is why other strategies are also supported and can\nbe combined. A "fixed" strategy adds a static version string in the URL without changing\nthe file name, as shown in the following example:\n\n[source,properties,indent=0,subs="verbatim,quotes,attributes"]\n----\n\tspring.resources.chain.strategy.content.enabled=true\n\tspring.resources.chain.strategy.content.paths=/**\n\tspring.resources.chain.strategy.fixed.enabled=true\n\tspring.resources.chain.strategy.fixed.paths=/js/lib/\n\tspring.resources.chain.strategy.fixed.version=v12\n----\n\nWith this configuration, JavaScript modules located under `"/js/lib/"` use a fixed\nversioning strategy (`"/v12/js/lib/mymodule.js"`), while other resources still use the\ncontent one (`<link href="/css/spring-2a2d595e6ed9a0b24f027f2b63b134d6.css"/>`).\n\nSee {sc-spring-boot-autoconfigure}/web/ResourceProperties.{sc-ext}[`ResourceProperties`]\nfor more supported options.\n\n[TIP]\n====\nThis feature has been thoroughly described in a dedicated\nhttps://spring.io/blog/2014/07/24/spring-framework-4-1-handling-static-web-resources[blog\npost] and in Spring Framework\'s\n{spring-reference}web.html#mvc-config-static-resources[reference documentation].\n====\n\n[[boot-features-spring-mvc-welcome-page]]\n==== Welcome Page\nSpring Boot supports both static and templated welcome pages. It first looks for an\n`index.html` file in the configured static content locations. If one is not found, it\nthen looks for an `index` template. If either is found, it is automatically used as the\nwelcome page of the application.\n\n\n\n[[boot-features-spring-mvc-favicon]]\n==== Custom Favicon\nSpring Boot looks for a `favicon.ico` in the configured static content locations and the\nroot of the classpath (in that order). If such a file is present, it is automatically\nused as the favicon of the application.\n\n\n[[boot-features-spring-mvc-pathmatch]]\n==== Path Matching and Content Negotiation\nSpring MVC can map incoming HTTP requests to handlers by looking at the request path and\nmatching it to the mappings defined in your application (for example, `@GetMapping`\nannotations on Controller methods).\n\nSpring Boot chooses to disable suffix pattern matching by default, which means that\nrequests like `"GET /projects/spring-boot.json"` won\'t be matched to\n`@GetMapping("/projects/spring-boot")` mappings.\nThis is considered as a\n{spring-reference}web.html#mvc-ann-requestmapping-suffix-pattern-match[best practice\nfor Spring MVC applications]. This feature was mainly useful in the past for HTTP\nclients which did not send proper "Accept" request headers; we needed to make sure\nto send the correct Content Type to the client. Nowadays, Content Negotiation\nis much more reliable.\n\nThere are other ways to deal with HTTP clients that don\'t consistently send proper\n"Accept" request headers. Instead of using suffix matching, we can use a query\nparameter to ensure that requests like `"GET /projects/spring-boot?format=json"`\nwill be mapped to `@GetMapping("/projects/spring-boot")`:\n\n[source,properties,indent=0,subs="verbatim,quotes,attributes"]\n----\n\tspring.mvc.contentnegotiation.favor-parameter=true\n\n\t# We can change the parameter name, which is "format" by default:\n\t# spring.mvc.contentnegotiation.parameter-name=myparam\n\n\t# We can also register additional file extensions/media types with:\n\tspring.mvc.contentnegotiation.media-types.markdown=text/markdown\n----\n\nIf you understand the caveats and would still like your application to use\nsuffix pattern matching, the following configuration is required:\n\n[source,properties,indent=0,subs="verbatim,quotes,attributes"]\n----\n\tspring.mvc.contentnegotiation.favor-path-extension=true\n\tspring.mvc.pathmatch.use-suffix-pattern=true\n----\n\nAlternatively, rather than open all suffix patterns, it\'s more secure to just support\nregistered suffix patterns:\n\n[source,properties,indent=0,subs="verbatim,quotes,attributes"]\n----\n\tspring.mvc.contentnegotiation.favor-path-extension=true\n\tspring.mvc.pathmatch.use-registered-suffix-pattern=true\n\n\t# You can also register additional file extensions/media types with:\n\t# spring.mvc.contentnegotiation.media-types.adoc=text/asciidoc\n----\n\n\n\n[[boot-features-spring-mvc-web-binding-initializer]]\n==== ConfigurableWebBindingInitializer\nSpring MVC uses a `WebBindingInitializer` to initialize a `WebDataBinder` for a\nparticular request. If you create your own `ConfigurableWebBindingInitializer` `@Bean`,\nSpring Boot automatically configures Spring MVC to use it.\n\n\n\n[[boot-features-spring-mvc-template-engines]]\n==== Template Engines\nAs well as REST web services, you can also use Spring MVC to serve dynamic HTML content.\nSpring MVC supports a variety of templating technologies, including Thymeleaf,\nFreeMarker, and JSPs. Also, many other templating engines include their own Spring MVC\nintegrations.\n\nSpring Boot includes auto-configuration support for the following templating engines:\n\n * https://freemarker.apache.org/docs/[FreeMarker]\n * http://docs.groovy-lang.org/docs/next/html/documentation/template-engines.html#_the_markuptemplateengine[Groovy]\n * http://www.thymeleaf.org[Thymeleaf]\n * https://mustache.github.io/[Mustache]\n\nTIP: If possible, JSPs should be avoided. There are several\n<<boot-features-jsp-limitations, known limitations>> when using them with embedded\nservlet containers.\n\nWhen you use one of these templating engines with the default configuration, your\ntemplates are picked up automatically from `src/main/resources/templates`.\n\nTIP: Depending on how you run your application, IntelliJ IDEA orders the classpath\ndifferently. Running your application in the IDE from its main method results in a\ndifferent ordering than when you run your application by using Maven or Gradle or from\nits packaged jar. This can cause Spring Boot to fail to find the templates on the\nclasspath. If you have this problem, you can reorder the classpath in the IDE to place\nthe module\'s classes and resources first. Alternatively, you can configure the template\nprefix to search every `templates` directory on the classpath, as follows:\n`classpath*:/templates/`.\n\n\n\n[[boot-features-error-handling]]\n==== Error Handling\nBy default, Spring Boot provides an `/error` mapping that handles all errors in a\nsensible way, and it is registered as a "`global`" error page in the servlet container.\nFor machine clients, it produces a JSON response with details of the error, the HTTP\nstatus, and the exception message. For browser clients, there is a "`whitelabel`" error\nview that renders the same data in HTML format (to customize it, add a `View` that\nresolves to `error`). To replace the default behavior completely, you can implement\n`ErrorController` and register a bean definition of that type or add a bean of type\n`ErrorAttributes` to use the existing mechanism but replace the contents.\n\nTIP: The `BasicErrorController` can be used as a base class for a custom\n`ErrorController`. This is particularly useful if you want to add a handler for a new\ncontent type (the default is to handle `text/html` specifically and provide a fallback\nfor everything else). To do so, extend `BasicErrorController`, add a public method with a\n`@RequestMapping` that has a `produces` attribute, and create a bean of your new type.\n\nYou can also define a class annotated with `@ControllerAdvice` to customize the JSON\ndocument to return for a particular controller and/or exception type, as shown in the\nfollowing example:\n\n[source,java,indent=0,subs="verbatim,quotes,attributes"]\n----\n\t@ControllerAdvice(basePackageClasses = AcmeController.class)\n\tpublic class AcmeControllerAdvice extends ResponseEntityExceptionHandler {\n\n\t\t@ExceptionHandler(YourException.class)\n\t\t@ResponseBody\n\t\tResponseEntity<?> handleControllerException(HttpServletRequest request, Throwable ex) {\n\t\t\tHttpStatus status = getStatus(request);\n\t\t\treturn new ResponseEntity<>(new CustomErrorType(status.value(), ex.getMessage()), status);\n\t\t}\n\n\t\tprivate HttpStatus getStatus(HttpServletRequest request) {\n\t\t\tInteger statusCode = (Integer) request.getAttribute("javax.servlet.error.status_code");\n\t\t\tif (statusCode == null) {\n\t\t\t\treturn HttpStatus.INTERNAL_SERVER_ERROR;\n\t\t\t}\n\t\t\treturn HttpStatus.valueOf(statusCode);\n\t\t}\n\n\t}\n----\n\nIn the preceding example, if `YourException` is thrown by a controller defined in the\nsame package as `AcmeController`, a JSON representation of the `CustomErrorType` POJO is\nused instead of the `ErrorAttributes` representation.\n\n\n\n[[boot-features-error-handling-custom-error-pages]]\n===== Custom Error Pages\nIf you want to display a custom HTML error page for a given status code, you can add a\nfile to an `/error` folder. Error pages can either be static HTML (that is, added under\nany of the static resource folders) or be built by using templates. The name of the file\nshould be the exact status code or a series mask.\n\nFor example, to map `404` to a static HTML file, your folder structure would be as\nfollows:\n\n[source,indent=0,subs="verbatim,quotes,attributes"]\n----\n\tsrc/\n\t +- main/\n\t     +- java/\n\t     |   + <source code>\n\t     +- resources/\n\t         +- public/\n\t             +- error/\n\t             |   +- 404.html\n\t             +- <other public assets>\n----\n\nTo map all `5xx` errors by using a FreeMarker template, your folder structure would be as\nfollows:\n\n[source,indent=0,subs="verbatim,quotes,attributes"]\n----\n\tsrc/\n\t +- main/\n\t     +- java/\n\t     |   + <source code>\n\t     +- resources/\n\t         +- templates/\n\t             +- error/\n\t             |   +- 5xx.ftl\n\t             +- <other templates>\n----\n\nFor more complex mappings, you can also add beans that implement the `ErrorViewResolver`\ninterface, as shown in the following example:\n\n[source,java,indent=0,subs="verbatim,quotes,attributes"]\n----\n\tpublic class MyErrorViewResolver implements ErrorViewResolver {\n\n\t\t@Override\n\t\tpublic ModelAndView resolveErrorView(HttpServletRequest request,\n\t\t\t\tHttpStatus status, Map<String, Object> model) {\n\t\t\t// Use the request or status to optionally return a ModelAndView\n\t\t\treturn ...\n\t\t}\n\n\t}\n----\n\n\nYou can also use regular Spring MVC features such as\n{spring-reference}web.html#mvc-exceptionhandlers[`@ExceptionHandler` methods] and\n{spring-reference}web.html#mvc-ann-controller-advice[`@ControllerAdvice`]. The\n`ErrorController` then picks up any unhandled exceptions.\n\n\n\n[[boot-features-error-handling-mapping-error-pages-without-mvc]]\n===== Mapping Error Pages outside of Spring MVC\nFor applications that do not use Spring MVC, you can use the `ErrorPageRegistrar`\ninterface to directly register `ErrorPages`. This abstraction works directly with the\nunderlying embedded servlet container and works even if you do not have a Spring MVC\n`DispatcherServlet`.\n\n\n[source,java,indent=0,subs="verbatim,quotes,attributes"]\n----\n\t@Bean\n\tpublic ErrorPageRegistrar errorPageRegistrar(){\n\t\treturn new MyErrorPageRegistrar();\n\t}\n\n\t// ...\n\n\tprivate static class MyErrorPageRegistrar implements ErrorPageRegistrar {\n\n\t\t@Override\n\t\tpublic void registerErrorPages(ErrorPageRegistry registry) {\n\t\t\tregistry.addErrorPages(new ErrorPage(HttpStatus.BAD_REQUEST, "/400"));\n\t\t}\n\n\t}\n----\n\nNOTE: If you register an `ErrorPage` with a path that ends up being handled by a `Filter`\n(as is common with some non-Spring web frameworks, like Jersey and Wicket), then the\n`Filter` has to be explicitly registered as an `ERROR` dispatcher, as shown in the\nfollowing example:\n\n[source,java,indent=0,subs="verbatim,quotes,attributes"]\n----\n\t@Bean\n\tpublic FilterRegistrationBean myFilter() {\n\t\tFilterRegistrationBean registration = new FilterRegistrationBean();\n\t\tregistration.setFilter(new MyFilter());\n\t\t...\n\t\tregistration.setDispatcherTypes(EnumSet.allOf(DispatcherType.class));\n\t\treturn registration;\n\t}\n----\n\nNote that the default `FilterRegistrationBean` does not include the `ERROR` dispatcher\ntype.\n\n\n\n[[boot-features-error-handling-websphere]]\nCAUTION:When deployed to a servlet container, Spring Boot uses its error page filter to\nforward a request with an error status to the appropriate error page. The request can only\nbe forwarded to the correct error page if the response has not already been committed. By\ndefault, WebSphere Application Server 8.0 and later commits the response upon successful\ncompletion of a servlet\'s service method. You should disable this behavior by setting\n`com.ibm.ws.webcontainer.invokeFlushAfterService` to `false`.\n\n\n\n[[boot-features-spring-hateoas]]\n==== Spring HATEOAS\nIf you develop a RESTful API that makes use of hypermedia, Spring Boot provides\nauto-configuration for Spring HATEOAS that works well with most applications. The\nauto-configuration replaces the need to use `@EnableHypermediaSupport` and registers a\nnumber of beans to ease building hypermedia-based applications, including a\n`LinkDiscoverers` (for client side support) and an `ObjectMapper` configured to correctly\nmarshal responses into the desired representation. The `ObjectMapper` is customized by\nsetting the various `spring.jackson.*` properties or, if one exists, by a\n`Jackson2ObjectMapperBuilder` bean.\n\nYou can take control of Spring HATEOAS\'s configuration by using\n`@EnableHypermediaSupport`. Note that doing so disables the `ObjectMapper` customization\ndescribed earlier.\n\n\n\n[[boot-features-cors]]\n==== CORS Support\n\nhttps://en.wikipedia.org/wiki/Cross-origin_resource_sharing[Cross-origin resource sharing]\n(CORS) is a http://www.w3.org/TR/cors/[W3C specification] implemented by\nhttps://caniuse.com/#feat=cors[most browsers] that lets you specify in a flexible\nway what kind of cross-domain requests are authorized, instead of using some less secure\nand less powerful approaches such as IFRAME or JSONP.\n\nAs of version 4.2, Spring MVC {spring-reference}web.html#cors[supports CORS].\nUsing {spring-reference}web.html#controller-method-cors-configuration[controller method\nCORS configuration] with\n{spring-javadoc}/web/bind/annotation/CrossOrigin.{dc-ext}[`@CrossOrigin`]\nannotations in your Spring Boot application does not require any specific configuration.\n{spring-reference}web.html#global-cors-configuration[Global CORS configuration] can be\ndefined by registering a `WebMvcConfigurer` bean with a customized\n`addCorsMappings(CorsRegistry)` method, as shown in the following example:\n\n[source,java,indent=0]\n----\n\t@Configuration\n\tpublic class MyConfiguration {\n\n\t\t@Bean\n\t\tpublic WebMvcConfigurer corsConfigurer() {\n\t\t\treturn new WebMvcConfigurer() {\n\t\t\t\t@Override\n\t\t\t\tpublic void addCorsMappings(CorsRegistry registry) {\n\t\t\t\t\tregistry.addMapping("/api/**");\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n----\n\n\n\n[[boot-features-webflux]]\n=== The "`Spring WebFlux Framework`"\n\nSpring WebFlux is the new reactive web framework introduced in Spring Framework 5.0.\nUnlike Spring MVC, it does not require the Servlet API, is fully asynchronous and\nnon-blocking, and implements the http://www.reactive-streams.org/[Reactive Streams]\nspecification through https://projectreactor.io/[the Reactor project].\n\nSpring WebFlux comes in two flavors: functional and annotation-based. The\nannotation-based one is quite close to the Spring MVC model, as shown in the\nfollowing example:\n\n[source,java,indent=0]\n----\n\t@RestController\n\t@RequestMapping("/users")\n\tpublic class MyRestController {\n\n\t\t@GetMapping("/{user}")\n\t\tpublic Mono<User> getUser(@PathVariable Long user) {\n\t\t\t// ...\n\t\t}\n\n\t\t@GetMapping("/{user}/customers")\n\t\tpublic Flux<Customer> getUserCustomers(@PathVariable Long user) {\n\t\t\t// ...\n\t\t}\n\n\t\t@DeleteMapping("/{user}")\n\t\tpublic Mono<User> deleteUser(@PathVariable Long user) {\n\t\t\t// ...\n\t\t}\n\n\t}\n----\n\n"`WebFlux.fn`", the functional variant, separates the routing configuration from the\nactual handling of the requests, as shown in the following example:\n\n[source,java,indent=0]\n----\n\t@Configuration\n\tpublic class RoutingConfiguration {\n\n\t\t@Bean\n\t\tpublic RouterFunction<ServerResponse> monoRouterFunction(UserHandler userHandler) {\n\t\t\treturn route(GET("/{user}").and(accept(APPLICATION_JSON)), userHandler::getUser)\n\t\t\t\t\t.andRoute(GET("/{user}/customers").and(accept(APPLICATION_JSON)), userHandler::getUserCustomers)\n\t\t\t\t\t.andRoute(DELETE("/{user}").and(accept(APPLICATION_JSON)), userHandler::deleteUser);\n\t\t}\n\n\t}\n\n\t@Component\n\tpublic class UserHandler {\n\n\t\tpublic Mono<ServerResponse> getUser(ServerRequest request) {\n\t\t\t// ...\n\t\t}\n\n\t\tpublic Mono<ServerResponse> getUserCustomers(ServerRequest request) {\n\t\t\t// ...\n\t\t}\n\n\t\tpublic Mono<ServerResponse> deleteUser(ServerRequest request) {\n\t\t\t// ...\n\t\t}\n\t}\n----\n\nWebFlux is part of the Spring Framework and detailed information is available in its\n{spring-reference}web-reactive.html#webflux-fn[reference documentation].\n\nTIP: You can define as many `RouterFunction` beans as you like to modularize the\ndefinition of the router. Beans can be ordered if you need to apply a precedence.\n\nTo get started, add the `spring-boot-starter-webflux` module to your application.\n\nNOTE: Adding both `spring-boot-starter-web` and `spring-boot-starter-webflux` modules in\nyour application results in Spring Boot auto-configuring Spring MVC, not WebFlux. This\nbehavior has been chosen because many Spring developers add `spring-boot-starter-webflux`\nto their Spring MVC application to use the reactive `WebClient`. You can still enforce\nyour choice by setting the chosen application type to\n`SpringApplication.setWebApplicationType(WebApplicationType.REACTIVE)`.\n\n\n\n[[boot-features-webflux-auto-configuration]]\n==== Spring WebFlux Auto-configuration\nSpring Boot provides auto-configuration for Spring WebFlux that works well with most\napplications.\n\nThe auto-configuration adds the following features on top of Spring\'s defaults:\n\n* Configuring codecs for `HttpMessageReader` and `HttpMessageWriter` instances (described\n<<boot-features-webflux-httpcodecs,later in this document>>).\n* Support for serving static resources, including support for WebJars (described\n<<boot-features-spring-mvc-static-content,later in this document>>).\n\nIf you want to keep Spring Boot WebFlux features and you want to add additional\n{spring-reference}web.html#web-reactive[WebFlux configuration], you can add your own\n`@Configuration` class of type `WebFluxConfigurer` but *without* `@EnableWebFlux`.\n\nIf you want to take complete control of Spring WebFlux, you can add your own\n`@Configuration` annotated with `@EnableWebFlux`.\n\n\n\n[[boot-features-webflux-httpcodecs]]\n==== HTTP Codecs with HttpMessageReaders and HttpMessageWriters\nSpring WebFlux uses the `HttpMessageReader` and `HttpMessageWriter` interfaces to convert\nHTTP requests and responses. They are configured with `CodecConfigurer` to have sensible\ndefaults by looking at the libraries available in your classpath.\n\nSpring Boot applies further customization by using `CodecCustomizer` instances. For\nexample, `spring.jackson.*` configuration keys are applied to the Jackson codec.\n\nIf you need to add or customize codecs, you can create a custom `CodecCustomizer`\ncomponent, as shown in the following example:\n\n[source,java,indent=0]\n----\n\timport org.springframework.boot.web.codec.CodecCustomizer;\n\n\t@Configuration\n\tpublic class MyConfiguration {\n\n\t\t@Bean\n\t\tpublic CodecCustomizer myCodecCustomizer() {\n\t\t\treturn codecConfigurer -> {\n\t\t\t\t// ...\n\t\t\t}\n\t\t}\n\n\t}\n----\n\nYou can also leverage <<boot-features-json-components,Boot\'s custom JSON serializers and\ndeserializers>>.\n\n\n\n[[boot-features-webflux-static-content]]\n==== Static Content\nBy default, Spring Boot serves static content from a directory called `/static` (or\n`/public` or `/resources` or `/META-INF/resources`) in the classpath. It uses the\n`ResourceWebHandler` from Spring WebFlux so that you can modify that behavior by adding\nyour own `WebFluxConfigurer` and overriding the `addResourceHandlers` method.\n\nBy default, resources are mapped on `+/**+`, but you can tune that by setting the\n`spring.webflux.static-path-pattern` property. For instance, relocating all resources to\n`/resources/**` can be achieved as follows:\n\n[source,properties,indent=0,subs="verbatim,quotes,attributes"]\n----\n\tspring.webflux.static-path-pattern=/resources/**\n----\n\nYou can also customize the static resource locations by using\n`spring.resources.static-locations`. Doing so replaces the default values with a list of\ndirectory locations. If you do so, the default welcome page detection switches to your\ncustom locations. So, if there is an `index.html` in any of your locations on startup, it\nis the home page of the application.\n\nIn addition to the "`standard`" static resource locations listed earlier, a special case\nis made for https://www.webjars.org/[Webjars content]. Any resources with a path in\n`+/webjars/**+` are served from jar files if they are packaged in the Webjars format.\n\nTIP: Spring WebFlux applications do not strictly depend on the Servlet API, so they\ncannot be deployed as war files and do not use the `src/main/webapp` directory.\n\n\n\n[[boot-features-webflux-template-engines]]\n==== Template Engines\nAs well as REST web services, you can also use Spring WebFlux to serve dynamic HTML\ncontent. Spring WebFlux supports a variety of templating technologies, including\nThymeleaf, FreeMarker, and Mustache.\n\nSpring Boot includes auto-configuration support for the following templating engines:\n\n * https://freemarker.apache.org/docs/[FreeMarker]\n * http://www.thymeleaf.org[Thymeleaf]\n * http://mustache.github.io/[Mustache]\n\nWhen you use one of these templating engines with the default configuration, your\ntemplates are picked up automatically from `src/main/resources/templates`.\n\n\n\n[[boot-features-webflux-error-handling]]\n==== Error Handling\n\nSpring Boot provides a `WebExceptionHandler` that handles all errors in a sensible way.\nIts position in the processing order is immediately before the handlers provided by\nWebFlux, which are considered last. For machine clients, it produces a JSON response\nwith details of the error, the HTTP status, and the exception message. For browser\nclients, there is a "`whitelabel`" error handler that renders the same data in HTML\nformat. You can also provide your own HTML templates to display errors (see the\n<<boot-features-webflux-error-handling-custom-error-pages,next section>>).\n\nThe first step to customizing this feature often involves using the existing mechanism\nbut replacing or augmenting the error contents. For that, you can add a bean of type\n`ErrorAttributes`.\n\nTo change the error handling behavior, you can implement `ErrorWebExceptionHandler` and\nregister a bean definition of that type. Because a `WebExceptionHandler` is quite\nlow-level, Spring Boot also provides a convenient `AbstractErrorWebExceptionHandler` to\nlet you handle errors in a WebFlux functional way, as shown in the following example:\n\n[source,java,indent=0,subs="verbatim,quotes,attributes"]\n----\n\tpublic class CustomErrorWebExceptionHandler extends AbstractErrorWebExceptionHandler {\n\n\t\t// Define constructor here\n\n\t\t@Override\n\t\tprotected RouterFunction<ServerResponse> getRoutingFunction(ErrorAttributes errorAttributes) {\n\n\t\t\treturn RouterFunctions\n\t\t\t\t\t.route(aPredicate, aHandler)\n\t\t\t\t\t.andRoute(anotherPredicate, anotherHandler);\n\t\t}\n\n\t}\n----\n\nFor a more complete picture, you can also subclass `DefaultErrorWebExceptionHandler`\ndirectly and override specific methods.\n\n\n\n[[boot-features-webflux-error-handling-custom-error-pages]]\n===== Custom Error Pages\n\nIf you want to display a custom HTML error page for a given status code, you can add a\nfile to an `/error` folder. Error pages can either be static HTML (that is, added under\nany of the static resource folders) or built with templates. The name of the file should\nbe the exact status code or a series mask.\n\nFor example, to map `404` to a static HTML file, your folder structure would be as\nfollows:\n\n[source,indent=0,subs="verbatim,quotes,attributes"]\n----\n\tsrc/\n\t +- main/\n\t     +- java/\n\t     |   + <source code>\n\t     +- resources/\n\t         +- public/\n\t             +- error/\n\t             |   +- 404.html\n\t             +- <other public assets>\n----\n\nTo map all `5xx` errors by using a Mustache template, your folder structure would be as\nfollows:\n\n[source,indent=0,subs="verbatim,quotes,attributes"]\n----\n\tsrc/\n\t +- main/\n\t     +- java/\n\t     |   + <source code>\n\t     +- resources/\n\t         +- templates/\n\t             +- error/\n\t             |   +- 5xx.mustache\n\t             +- <other templates>\n----\n\n\n\n[[boot-features-webflux-web-filters]]\n==== Web Filters\nSpring WebFlux provides a `WebFilter` interface that can be implemented to filter HTTP\nrequest-response exchanges. `WebFilter` beans found in the application context will\nbe automatically used to filter each exchange.\n\nWhere the order of the filters is important they can implement `Ordered` or be annotated\nwith `@Order`. Spring Boot auto-configuration may configure web filters for you. When it\ndoes so, the orders shown in the following table will be used:\n\n|===\n| Web Filter | Order\n\n|`MetricsWebFilter`\n|`Ordered.HIGHEST_PRECEDENCE + 1`\n\n|`WebFilterChainProxy` (Spring Security)\n|`-100`\n\n|`HttpTraceWebFilter`\n|`Ordered.LOWEST_PRECEDENCE - 10`\n\n|===\n\n\n\n[[boot-features-jersey]]\n=== JAX-RS and Jersey\nIf you prefer the JAX-RS programming model for REST endpoints, you can use one of the\navailable implementations instead of Spring MVC. https://jersey.github.io/[Jersey] 1.x and\nhttp://cxf.apache.org/[Apache CXF] work quite well out of the box if you register their\n`Servlet` or `Filter` as a `@Bean` in your application context. Jersey 2.x has some native\nSpring support, so we also provide auto-configuration support for it in Spring Boot,\ntogether with a starter.\n\nTo get started with Jersey 2.x, include the `spring-boot-starter-jersey` as a dependency\nand then you need one `@Bean` of type `ResourceConfig` in which you register all the\nendpoints, as shown in the following example:\n\n[source,java,indent=0,subs="verbatim,quotes,attributes"]\n----\n\t@Component\n\tpublic class JerseyConfig extends ResourceConfig {\n\n\t\tpublic JerseyConfig() {\n\t\t\tregister(Endpoint.class);\n\t\t}\n\n\t}\n----\n\nWARNING: Jersey\'s support for scanning executable archives is rather limited. For example,\nit cannot scan for endpoints in a package found in a <<deployment.adoc#deployment-install,\nfully executable jar file>> or in `WEB-INF/classes` when running an executable war file.\nTo avoid this limitation, the `packages` method should not be used, and endpoints should\nbe registered individually by using the `register` method, as shown in the preceding\nexample.\n\nFor more advanced customizations, you can also register an arbitrary number of beans that\nimplement `ResourceConfigCustomizer`.\n\nAll the registered endpoints should be `@Components` with HTTP resource annotations\n(`@GET` and others), as shown in the following example:\n\n[source,java,indent=0,subs="verbatim,quotes,attributes"]\n----\n\t@Component\n\t@Path("/hello")\n\tpublic class Endpoint {\n\n\t\t@GET\n\t\tpublic String message() {\n\t\t\treturn "Hello";\n\t\t}\n\n\t}\n----\n\nSince the `Endpoint` is a Spring `@Component`, its lifecycle is managed by Spring and you\ncan use the `@Autowired` annotation to inject dependencies and use the `@Value`\nannotation to inject external configuration. By default, the Jersey servlet is registered\nand mapped to `/*`. You can change the mapping by adding `@ApplicationPath` to your\n`ResourceConfig`.\n\nBy default, Jersey is set up as a Servlet in a `@Bean` of type `ServletRegistrationBean`\nnamed `jerseyServletRegistration`. By default, the servlet is initialized lazily, but you\ncan customize that behavior by setting `spring.jersey.servlet.load-on-startup`. You can\ndisable or override that bean by creating one of your own with the same name. You can\nalso use a filter instead of a servlet by setting `spring.jersey.type=filter` (in which\ncase, the `@Bean` to replace or override is `jerseyFilterRegistration`). The filter has\nan `@Order`, which you can set with `spring.jersey.filter.order`. Both the servlet and\nthe filter registrations can be given init parameters by using `spring.jersey.init.*` to\nspecify a map of properties.\n\nThere is a {github-code}/spring-boot-samples/spring-boot-sample-jersey[Jersey sample] so\nthat you can see how to set things up. There is also a\n{github-code}/spring-boot-samples/spring-boot-sample-jersey1[Jersey 1.x sample]. Note\nthat, in the Jersey 1.x sample, the spring-boot maven plugin has been configured to\nunpack some Jersey jars so that they can be scanned by the JAX-RS implementation (because\nthe sample asks for them to be scanned in its `Filter` registration). If any of your\nJAX-RS resources are packaged as nested jars, you may need to do the same.\n\n\n\n[[boot-features-embedded-container]]\n=== Embedded Servlet Container Support\nSpring Boot includes support for embedded http://tomcat.apache.org/[Tomcat],\nhttps://www.eclipse.org/jetty/[Jetty], and http://undertow.io/[Undertow] servers. Most\ndevelopers use the appropriate "`Starter`" to obtain a fully configured instance. By\ndefault, the embedded server listens for HTTP requests on port `8080`.\n\nWARNING: If you choose to use Tomcat on https://www.centos.org/[CentOS], be aware that, by\ndefault, a temporary directory is used to store compiled JSPs, file uploads, and so on.\nThis directory may be deleted by `tmpwatch` while your application is running, leading to\nfailures. To avoid this behavior, you may want to customize your `tmpwatch` configuration\nsuch that `tomcat.*` directories are not deleted or configure `server.tomcat.basedir` such\nthat embedded Tomcat uses a different location.\n\n\n\n[[boot-features-embedded-container-servlets-filters-listeners]]\n==== Servlets, Filters, and listeners\nWhen using an embedded servlet container, you can register servlets, filters, and all the\nlisteners (such as `HttpSessionListener`) from the Servlet spec, either by using Spring\nbeans or by scanning for Servlet components.\n\n\n[[boot-features-embedded-container-servlets-filters-listeners-beans]]\n===== Registering Servlets, Filters, and Listeners as Spring Beans\nAny `Servlet`, `Filter`, or servlet `*Listener` instance that is a Spring bean is\nregistered with the embedded container. This can be particularly convenient if you want\nto refer to a value from your `application.properties` during configuration.\n\nBy default, if the context contains only a single Servlet, it is mapped to `/`. In the\ncase of multiple servlet beans, the bean name is used as a path prefix. Filters map to\n`+/*+`.\n\nIf convention-based mapping is not flexible enough, you can use the\n`ServletRegistrationBean`, `FilterRegistrationBean`, and\n`ServletListenerRegistrationBean` classes for complete control.\n\nSpring Boot ships with many auto-configurations that may define Filter beans. Here are a\nfew examples of Filters and their respective order (lower order value means higher\nprecedence):\n\n|===\n| Servlet Filter | Order\n\n|`OrderedCharacterEncodingFilter`\n|`Ordered.HIGHEST_PRECEDENCE`\n\n|`WebMvcMetricsFilter`\n|`Ordered.HIGHEST_PRECEDENCE + 1`\n\n|`ErrorPageFilter`\n|`Ordered.HIGHEST_PRECEDENCE + 1`\n\n|`HttpTraceFilter`\n|`Ordered.LOWEST_PRECEDENCE - 10`\n|===\n\nIt is usually safe to leave Filter beans unordered.\n\nIf a specific order is required, you should avoid configuring a Filter that reads the\nrequest body at `Ordered.HIGHEST_PRECEDENCE`, since it might go against the character\nencoding configuration of your application. If a Servlet filter wraps the request, it\nshould be configured with an order that is less than or equal to\n`FilterRegistrationBean.REQUEST_WRAPPER_FILTER_MAX_ORDER`.\n\n\n\n[[boot-features-embedded-container-context-initializer]]\n==== Servlet Context Initialization\nEmbedded servlet containers do not directly execute the Servlet 3.0+\n`javax.servlet.ServletContainerInitializer` interface or Spring\'s\n`org.springframework.web.WebApplicationInitializer` interface. This is an intentional\ndesign decision intended to reduce the risk that third party libraries designed to run\ninside a war may break Spring Boot applications.\n\nIf you need to perform servlet context initialization in a Spring Boot application, you\nshould register a bean that implements the\n`org.springframework.boot.web.servlet.ServletContextInitializer` interface. The\nsingle `onStartup` method provides access to the `ServletContext` and, if necessary, can\neasily be used as an adapter to an existing `WebApplicationInitializer`.\n\n\n\n[[boot-features-embedded-container-servlets-filters-listeners-scanning]]\n===== Scanning for Servlets, Filters, and listeners\nWhen using an embedded container, automatic registration of classes annotated with\n`@WebServlet`, `@WebFilter`, and `@WebListener` can be enabled by using\n`@ServletComponentScan`.\n\nTIP: `@ServletComponentScan` has no effect in a standalone container, where the\ncontainer\'s built-in discovery mechanisms are used instead.\n\n\n\n[[boot-features-embedded-container-application-context]]\n==== The ServletWebServerApplicationContext\nUnder the hood, Spring Boot uses a different type of `ApplicationContext` for embedded\nservlet container support.  The `ServletWebServerApplicationContext` is a special type of\n`WebApplicationContext` that bootstraps itself by searching for a single\n`ServletWebServerFactory` bean. Usually a `TomcatServletWebServerFactory`,\n`JettyServletWebServerFactory`, or `UndertowServletWebServerFactory`\nhas been auto-configured.\n\nNOTE: You usually do not need to be aware of these implementation classes. Most\napplications are auto-configured, and the appropriate `ApplicationContext` and\n`ServletWebServerFactory` are created on your behalf.\n\n\n\n[[boot-features-customizing-embedded-containers]]\n==== Customizing Embedded Servlet Containers\nCommon servlet container settings can be configured by using Spring `Environment`\nproperties. Usually, you would define the properties in your `application.properties`\nfile.\n\nCommon server settings include:\n\n* Network settings: Listen port for incoming HTTP requests (`server.port`), interface\naddress to bind to `server.address`, and so on.\n* Session settings: Whether the session is persistent (`server.servlet.session.persistence`),\nsession timeout (`server.servlet.session.timeout`), location of session data\n(`server.servlet.session.store-dir`), and session-cookie configuration\n(`server.servlet.session.cookie.*`).\n* Error management: Location of the error page (`server.error.path`) and so on.\n* <<howto.adoc#howto-configure-ssl,SSL>>\n* <<howto.adoc#how-to-enable-http-response-compression,HTTP compression>>\n\nSpring Boot tries as much as possible to expose common settings, but this is not always\npossible. For those cases, dedicated namespaces offer server-specific customizations (see\n`server.tomcat` and `server.undertow`). For instance,\n<<howto.adoc#howto-configure-accesslogs,access logs>> can be configured with specific\nfeatures of the embedded servlet container.\n\nTIP: See the\n{sc-spring-boot-autoconfigure}/web/ServerProperties.{sc-ext}[`ServerProperties`] class\nfor a complete list.\n\n\n\n[[boot-features-programmatic-embedded-container-customization]]\n===== Programmatic Customization\nIf you need to programmatically configure your embedded servlet container, you can\nregister a Spring bean that implements the `WebServerFactoryCustomizer` interface.\n`WebServerFactoryCustomizer` provides access to the\n`ConfigurableServletWebServerFactory`, which includes numerous customization setter\nmethods. The following example shows programmatically setting the port:\n\n[source,java,indent=0]\n----\n\timport org.springframework.boot.web.server.WebServerFactoryCustomizer;\n\timport org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;\n\timport org.springframework.stereotype.Component;\n\n\t@Component\n\tpublic class CustomizationBean implements WebServerFactoryCustomizer<ConfigurableServletWebServerFactory> {\n\n\t\t@Override\n\t\tpublic void customize(ConfigurableServletWebServerFactory server) {\n\t\t\tserver.setPort(9000);\n\t\t}\n\n\t}\n----\n\nNOTE: `TomcatServletWebServerFactory`, `JettyServletWebServerFactory` and `UndertowServletWebServerFactory`\nare dedicated variants of `ConfigurableServletWebServerFactory` that have additional customization setter methods\nfor Tomcat, Jetty and Undertow respectively.\n\n[[boot-features-customizing-configurableservletwebserverfactory-directly]]\n===== Customizing ConfigurableServletWebServerFactory Directly\nIf the preceding customization techniques are too limited, you can register the\n`TomcatServletWebServerFactory`, `JettyServletWebServerFactory`, or\n`UndertowServletWebServerFactory` bean yourself.\n\n[source,java,indent=0]\n----\n\t@Bean\n\tpublic ConfigurableServletWebServerFactory webServerFactory() {\n\t\tTomcatServletWebServerFactory factory = new TomcatServletWebServerFactory();\n\t\tfactory.setPort(9000);\n\t\tfactory.setSessionTimeout(10, TimeUnit.MINUTES);\n\t\tfactory.addErrorPages(new ErrorPage(HttpStatus.NOT_FOUND, "/notfound.html"));\n\t\treturn factory;\n\t}\n----\n\nSetters are provided for many configuration options. Several protected method "`hooks`"\nare also provided should you need to do something more exotic. See the\n{dc-spring-boot}/web/servlet/server/ConfigurableServletWebServerFactory.{dc-ext}[source\ncode documentation] for details.\n\n\n[[boot-features-jsp-limitations]]\n==== JSP Limitations\nWhen running a Spring Boot application that uses an embedded servlet container (and is\npackaged as an executable archive), there are some limitations in the JSP support.\n\n* With Jetty and Tomcat, it should work if you use war packaging. An executable war will\n  work when launched with `java -jar`, and will also be deployable to any standard\n  container. JSPs are not supported when using an executable jar.\n\n* Undertow does not support JSPs.\n\n* Creating a custom `error.jsp` page does not override the default view for\n<<boot-features-error-handling,error handling>>.\n<<boot-features-error-handling-custom-error-pages,Custom error pages>> should be used\ninstead.\n\nThere is a {github-code}/spring-boot-samples/spring-boot-sample-web-jsp[JSP sample] so\nthat you can see how to set things up.\n\n\n\n[[boot-features-security]]\n== Security\nIf {spring-security}[Spring Security] is on the classpath, then web applications are\nsecured by default. Spring Boot relies on Spring Security’s content-negotiation strategy\nto determine whether to use `httpBasic` or `formLogin`. To add method-level security to a\nweb application, you can also add `@EnableGlobalMethodSecurity` with your desired\nsettings. Additional information can be found in the\n{spring-security-reference}#jc-method[Spring Security Reference Guide].\n\nThe default `UserDetailsService` has a single user. The user name is `user`, and the\npassword is random and is printed at INFO level when the application starts, as shown in\nthe following example:\n\n[indent=0]\n----\n\tUsing generated security password: 78fa095d-3f4c-48b1-ad50-e24c31d5cf35\n----\n\nNOTE: If you fine-tune your logging configuration, ensure that the\n`org.springframework.boot.autoconfigure.security` category is set to log `INFO`-level\nmessages. Otherwise, the default password is not printed.\n\nYou can change the username and password by providing a `spring.security.user.name` and\n`spring.security.user.password`.\n\nThe basic features you get by default in a web application are:\n\n* A `UserDetailsService` (or `ReactiveUserDetailsService` in case of a WebFlux application)\nbean with in-memory store and a single user with a generated password (see\n{dc-spring-boot}/autoconfigure/security/SecurityProperties.User.html[`SecurityProperties.User`]\nfor the properties of the user).\n* Form-based login or HTTP Basic security (depending on Content-Type) for the entire\napplication (including actuator endpoints if actuator is on the classpath).\n* A `DefaultAuthenticationEventPublisher` for publishing authentication events.\n\nYou can provide a different `AuthenticationEventPublisher` by adding a bean for it.\n\n\n[[boot-features-security-mvc]]\n=== MVC Security\nThe default security configuration is implemented in `SecurityAutoConfiguration` and\n`UserDetailsServiceAutoConfiguration`. `SecurityAutoConfiguration` imports\n`SpringBootWebSecurityConfiguration` for web security and\n`UserDetailsServiceAutoConfiguration` configures authentication, which is also\nrelevant in non-web applications. To switch off the default web application security\nconfiguration completely, you can add a bean of type `WebSecurityConfigurerAdapter` (doing\nso does not disable the `UserDetailsService` configuration or Actuator\'s security).\n\nTo also switch off the `UserDetailsService` configuration, you can add a bean of type\n`UserDetailsService`, `AuthenticationProvider`, or `AuthenticationManager`.\nThere are several secure applications in the {github-code}/spring-boot-samples/[Spring\nBoot samples] to get you started with common use cases.\n\nAccess rules can be overridden by adding a custom `WebSecurityConfigurerAdapter`. Spring\nBoot provides convenience methods that can be used to override access rules for actuator\nendpoints and static resources. `EndpointRequest` can be used to create a `RequestMatcher`\nthat is based on the `management.endpoints.web.base-path` property.\n`PathRequest` can be used to create a `RequestMatcher` for resources in\ncommonly used locations.\n\n\n\n[[boot-features-security-webflux]]\n=== WebFlux Security\nSimilar to Spring MVC applications, you can secure your WebFlux applications by adding\nthe `spring-boot-starter-security` dependency. The default security configuration is\nimplemented in `ReactiveSecurityAutoConfiguration` and\n`UserDetailsServiceAutoConfiguration`. `ReactiveSecurityAutoConfiguration` imports\n`WebFluxSecurityConfiguration` for web security and `UserDetailsServiceAutoConfiguration`\nconfigures authentication, which is also relevant in non-web applications. To switch off the default web application security\nconfiguration completely, you can add a bean of type `WebFilterChainProxy` (doing so does\nnot disable the `UserDetailsService` configuration or Actuator\'s security).\n\nTo also switch off the `UserDetailsService` configuration, you can add a bean of type\n`ReactiveUserDetailsService` or `ReactiveAuthenticationManager`.\n\nAccess rules can be configured by adding a custom `SecurityWebFilterChain`. Spring\nBoot provides convenience methods that can be used to override access rules for actuator\nendpoints and static resources. `EndpointRequest` can be used to create a\n`ServerWebExchangeMatcher` that is based on the `management.endpoints.web.base-path`\nproperty.\n\n`PathRequest` can be used to create a `ServerWebExchangeMatcher` for resources in\ncommonly used locations.\n\nFor example, you can customize your security configuration by adding something like:\n\n[source,java,indent=0]\n----\ninclude::{code-examples}/web/security/CustomWebFluxSecurityExample.java[tag=configuration]\n----\n\n\n\n[[boot-features-security-oauth2]]\n=== OAuth2\nhttps://oauth.net/2/[OAuth2] is a widely used authorization framework that is supported by\nSpring.\n\n\n[[boot-features-security-oauth2-client]]\n==== Client\nIf you have `spring-security-oauth2-client` on your classpath, you can take advantage of\nsome auto-configuration to make it easy to set up an OAuth2 Client. This configuration\nmakes use of the properties under `OAuth2ClientProperties`.\n\nYou can register multiple OAuth2 clients and providers under the\n`spring.security.oauth2.client` prefix, as shown in the following example:\n\n[source,properties,indent=0]\n----\n\tspring.security.oauth2.client.registration.my-client-1.client-id=abcd\n\tspring.security.oauth2.client.registration.my-client-1.client-secret=password\n\tspring.security.oauth2.client.registration.my-client-1.client-name=Client for user scope\n\tspring.security.oauth2.client.registration.my-client-1.provider=my-oauth-provider\n\tspring.security.oauth2.client.registration.my-client-1.scope=user\n\tspring.security.oauth2.client.registration.my-client-1.redirect-uri-template=http://my-redirect-uri.com\n\tspring.security.oauth2.client.registration.my-client-1.client-authentication-method=basic\n\tspring.security.oauth2.client.registration.my-client-1.authorization-grant-type=authorization_code\n\n\tspring.security.oauth2.client.registration.my-client-2.client-id=abcd\n\tspring.security.oauth2.client.registration.my-client-2.client-secret=password\n\tspring.security.oauth2.client.registration.my-client-2.client-name=Client for email scope\n\tspring.security.oauth2.client.registration.my-client-2.provider=my-oauth-provider\n\tspring.security.oauth2.client.registration.my-client-2.scope=email\n\tspring.security.oauth2.client.registration.my-client-2.redirect-uri-template=http://my-redirect-uri.com\n\tspring.security.oauth2.client.registration.my-client-2.client-authentication-method=basic\n\tspring.security.oauth2.client.registration.my-client-2.authorization-grant-type=authorization_code\n\n\tspring.security.oauth2.client.provider.my-oauth-provider.authorization-uri=http://my-auth-server/oauth/authorize\n\tspring.security.oauth2.client.provider.my-oauth-provider.token-uri=http://my-auth-server/oauth/token\n\tspring.security.oauth2.client.provider.my-oauth-provider.user-info-uri=http://my-auth-server/userinfo\n\tspring.security.oauth2.client.provider.my-oauth-provider.jwk-set-uri=http://my-auth-server/token_keys\n\tspring.security.oauth2.client.provider.my-oauth-provider.user-name-attribute=name\n----\n\nBy default, Spring Security\'s `OAuth2LoginAuthenticationFilter` only processes URLs\nmatching `/login/oauth2/code/*`. If you want to customize the `redirect-uri-template` to\nuse a different pattern, you need to provide configuration to process that custom pattern.\nFor example, you can add your own `WebSecurityConfigurerAdapter` that resembles the\nfollowing:\n\n[source,java,indent=0]\n----\npublic class OAuth2LoginSecurityConfig extends WebSecurityConfigurerAdapter {\n\n\t@Override\n\tprotected void configure(HttpSecurity http) throws Exception {\n\t\thttp\n\t\t\t.authorizeRequests()\n\t\t\t\t.anyRequest().authenticated()\n\t\t\t\t.and()\n\t\t\t.oauth2Login()\n\t\t\t\t.redirectionEndpoint()\n\t\t\t\t\t.baseUri("/custom-callback");\n\t}\n}\n----\n\nFor common OAuth2 and OpenID providers, including Google, Github, Facebook, and Okta,\nwe provide a set of provider defaults (`google`, `github`, `facebook`, and `okta`,\nrespectively).\n\nIf you do not need to customize these providers, you can set the `provider` attribute to\nthe one for which you need to infer defaults. Also, if the ID of your client matches the\ndefault supported provider, Spring Boot infers that as well.\n\nIn other words, the two configurations in the following example use the Google provider:\n\n[source,properties,indent=0]\n----\n\tspring.security.oauth2.client.registration.my-client.client-id=abcd\n\tspring.security.oauth2.client.registration.my-client.client-secret=password\n\tspring.security.oauth2.client.registration.my-client.provider=google\n\n\tspring.security.oauth2.client.registration.google.client-id=abcd\n\tspring.security.oauth2.client.registration.google.client-secret=password\n----\n\n\n\n[[boot-features-security-oauth2-server]]\n==== Server\nCurrently, Spring Security does not provide support for implementing an OAuth 2.0\nAuthorization Server or Resource Server. However, this functionality is available from\nthe https://projects.spring.io/spring-security-oauth/[Spring Security OAuth] project,\nwhich will eventually be superseded by Spring Security completely. Until then, you can\nuse the `spring-security-oauth2-autoconfigure` module to easily set up an OAuth 2.0 server;\nsee its https://docs.spring.io/spring-security-oauth2-boot[documentation] for instructions.\n\n\n\n[[boot-features-security-actuator]]\n=== Actuator Security\nFor security purposes, all actuators other than `/health` and `/info` are disabled by\ndefault. The `management.endpoints.web.exposure.include` property can be used to enable\nthe actuators.\n\nIf Spring Security is on the classpath and no other WebSecurityConfigurerAdapter is\npresent, the actuators are secured by Spring Boot auto-config. If you define a custom\n`WebSecurityConfigurerAdapter`, Spring Boot auto-config will back off and you will be in\nfull control of actuator access rules.\n\nNOTE: Before setting the `management.endpoints.web.exposure.include`, ensure that the\nexposed actuators do not contain sensitive information and/or are secured by placing them\nbehind a firewall or by something like Spring Security.\n\n\n\n[[boot-features-security-csrf]]\n==== Cross Site Request Forgery Protection\nSince Spring Boot relies on Spring Security\'s defaults, CSRF protection is turned on by\ndefault. This means that the actuator endpoints that require a `POST` (shutdown and\nloggers endpoints), `PUT` or `DELETE` will get a 403 forbidden error when the default\nsecurity configuration is in use.\n\nNOTE: We recommend disabling CSRF protection completely only if you are creating a service\nthat is used by non-browser clients.\n\nAdditional information about CSRF protection can be found in the\n{spring-security-reference}#csrf[Spring Security Reference Guide].\n\n\n\n[[boot-features-sql]]\n== Working with SQL Databases\nThe {spring-framework}[Spring Framework] provides extensive support for working with SQL\ndatabases, from direct JDBC access using `JdbcTemplate` to complete "`object relational\nmapping`" technologies such as Hibernate. {spring-data}[Spring Data] provides an\nadditional level of functionality: creating `Repository` implementations directly from\ninterfaces and using conventions to generate queries from your method names.\n\n\n\n[[boot-features-configure-datasource]]\n=== Configure a DataSource\nJava\'s `javax.sql.DataSource` interface provides a standard method of working with\ndatabase connections. Traditionally, a \'DataSource\' uses a `URL` along with some\ncredentials to establish a database connection.\n\nTIP: See <<howto.adoc#howto-configure-a-datasource,the "`How-to`" section>> for more\nadvanced examples, typically to take full control over the configuration of the\nDataSource.\n\n\n\n[[boot-features-embedded-database-support]]\n==== Embedded Database Support\nIt is often convenient to develop applications by using an in-memory embedded database.\nObviously, in-memory databases do not provide persistent storage. You need to populate\nyour database when your application starts and be prepared to throw away data when your\napplication ends.\n\nTIP: The "`How-to`" section includes a <<howto.adoc#howto-database-initialization,\nsection on how to initialize a database>>.\n\nSpring Boot can auto-configure embedded http://www.h2database.com[H2],\nhttp://hsqldb.org/[HSQL], and http://db.apache.org/derby/[Derby] databases. You need not\nprovide any connection URLs. You need only include a build dependency to the embedded\ndatabase that you want to use.\n\n[NOTE]\n====\nIf you are using this feature in your tests, you may notice that the same database is\nreused by your whole test suite regardless of the number of application contexts that you\nuse. If you want to make sure that each context has a separate embedded database, you\nshould set `spring.datasource.generate-unique-name` to `true`.\n====\n\nFor example, the typical POM dependencies would be as follows:\n\n[source,xml,indent=0]\n----\n\t<dependency>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\n\t</dependency>\n\t<dependency>\n\t\t<groupId>org.hsqldb</groupId>\n\t\t<artifactId>hsqldb</artifactId>\n\t\t<scope>runtime</scope>\n\t</dependency>\n----\n\nNOTE: You need a dependency on `spring-jdbc` for an embedded database to be\nauto-configured. In this example, it is pulled in transitively through\n`spring-boot-starter-data-jpa`.\n\nTIP: If, for whatever reason, you do configure the connection URL for an embedded\ndatabase, take care to ensure that the database\'s automatic shutdown is disabled. If you\nuse H2, you should use `DB_CLOSE_ON_EXIT=FALSE` to do so. If you use HSQLDB, you should\nensure that `shutdown=true` is not used. Disabling the database\'s automatic shutdown lets\nSpring Boot control when the database is closed, thereby ensuring that it happens once\naccess to the database is no longer needed.\n\n\n\n[[boot-features-connect-to-production-database]]\n==== Connection to a Production Database\nProduction database connections can also be auto-configured by using a pooling\n`DataSource`. Spring Boot uses the following algorithm for choosing a specific\nimplementation:\n\n. We prefer https://github.com/brettwooldridge/HikariCP[HikariCP] for its performance and\nconcurrency. If HikariCP is available, we always choose it.\n. Otherwise, if the Tomcat pooling `DataSource` is available, we use it.\n. If neither HikariCP nor the Tomcat pooling datasource are available and if\nhttps://commons.apache.org/proper/commons-dbcp/[Commons DBCP2] is available, we use it.\n\nIf you use the `spring-boot-starter-jdbc` or `spring-boot-starter-data-jpa` "`starters`",\nyou automatically get a dependency to `HikariCP`.\n\nNOTE: You can bypass that algorithm completely and specify the connection pool to use by\nsetting the `spring.datasource.type` property. This is especially important if you run\nyour application in a Tomcat container, as `tomcat-jdbc` is provided by default.\n\nTIP: Additional connection pools can always be configured manually. If you define your\nown `DataSource` bean, auto-configuration does not occur.\n\nDataSource configuration is controlled by external configuration properties in\n`+spring.datasource.*+`. For example, you might declare the following section in\n`application.properties`:\n\n[source,properties,indent=0]\n----\n\tspring.datasource.url=jdbc:mysql://localhost/test\n\tspring.datasource.username=dbuser\n\tspring.datasource.password=dbpass\n\tspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n----\n\nNOTE: You should at least specify the URL by setting the `spring.datasource.url`\nproperty. Otherwise, Spring Boot tries to auto-configure an embedded database.\n\nTIP: You often do not need to specify the `driver-class-name`, since Spring Boot can\ndeduce it for most databases from the `url`.\n\nNOTE: For a pooling `DataSource` to be created, we need to be able to verify that a valid\n`Driver` class is available, so we check for that before doing anything. In other words,\nif you set `spring.datasource.driver-class-name=com.mysql.jdbc.Driver`, then that class\nhas to be loadable.\n\nSee\n{sc-spring-boot-autoconfigure}/jdbc/DataSourceProperties.{sc-ext}[`DataSourceProperties`]\nfor more of the supported options. These are the standard options that work regardless of\nthe actual implementation. It is also possible to fine-tune implementation-specific\nsettings by using their respective prefix (`+spring.datasource.hikari.*+`,\n`+spring.datasource.tomcat.*+`, and `+spring.datasource.dbcp2.*+`). Refer to the\ndocumentation of the connection pool implementation you are using for more details.\n\nFor instance, if you use the\nhttp://tomcat.apache.org/tomcat-8.0-doc/jdbc-pool.html#Common_Attributes[Tomcat\nconnection pool], you could customize many additional settings, as shown in the following\nexample:\n\n\n[source,properties,indent=0]\n----\n\t# Number of ms to wait before throwing an exception if no connection is available.\n\tspring.datasource.tomcat.max-wait=10000\n\n\t# Maximum number of active connections that can be allocated from this pool at the same time.\n\tspring.datasource.tomcat.max-active=50\n\n\t# Validate the connection before borrowing it from the pool.\n\tspring.datasource.tomcat.test-on-borrow=true\n----\n\n\n\n[[boot-features-connecting-to-a-jndi-datasource]]\n==== Connection to a JNDI DataSource\nIf you deploy your Spring Boot application to an Application Server, you might want to\nconfigure and manage your DataSource by using your Application Server\'s built-in features\nand access it by using JNDI.\n\nThe `spring.datasource.jndi-name` property can be used as an alternative to the\n`spring.datasource.url`, `spring.datasource.username`, and `spring.datasource.password`\nproperties to access the `DataSource` from a specific JNDI location. For example, the\nfollowing section in `application.properties` shows how you can access a JBoss AS defined\n`DataSource`:\n\n[source,properties,indent=0]\n----\n\tspring.datasource.jndi-name=java:jboss/datasources/customers\n----\n\n\n\n[[boot-features-using-jdbc-template]]\n=== Using JdbcTemplate\nSpring\'s `JdbcTemplate` and `NamedParameterJdbcTemplate` classes are auto-configured, and\nyou can `@Autowire` them directly into your own beans, as shown in the following example:\n\n[source,java,indent=0]\n----\n\timport org.springframework.beans.factory.annotation.Autowired;\n\timport org.springframework.jdbc.core.JdbcTemplate;\n\timport org.springframework.stereotype.Component;\n\n\t@Component\n\tpublic class MyBean {\n\n\t\tprivate final JdbcTemplate jdbcTemplate;\n\n\t\t@Autowired\n\t\tpublic MyBean(JdbcTemplate jdbcTemplate) {\n\t\t\tthis.jdbcTemplate = jdbcTemplate;\n\t\t}\n\n\t\t// ...\n\n\t}\n----\n\nYou can customize some properties of the template by using the `spring.jdbc.template.*`\nproperties, as shown in the following example:\n\n[source,properties,indent=0]\n----\n\tspring.jdbc.template.max-rows=500\n----\n\nNOTE: The `NamedParameterJdbcTemplate` reuses the same `JdbcTemplate` instance behind the\nscenes. If more than one `JdbcTemplate` is defined and no primary candidate exists, the\n`NamedParameterJdbcTemplate` is not auto-configured.\n\n\n\n[[boot-features-jpa-and-spring-data]]\n=== JPA and "`Spring Data`"\nThe Java Persistence API is a standard technology that lets you "`map`" objects to\nrelational databases. The `spring-boot-starter-data-jpa` POM provides a quick way to get\nstarted. It provides the following key dependencies:\n\n* Hibernate: One of the most popular JPA implementations.\n* Spring Data JPA: Makes it easy to implement JPA-based repositories.\n* Spring ORMs: Core ORM support from the Spring Framework.\n\nTIP: We do not go into too many details of JPA or {spring-data}[Spring Data] here. You can\nfollow the https://spring.io/guides/gs/accessing-data-jpa/["`Accessing Data with JPA`"]\nguide from https://spring.io and read the {spring-data-jpa}[Spring Data JPA] and\nhttps://hibernate.org/orm/documentation/[Hibernate] reference documentation.\n\n\n\n[[boot-features-entity-classes]]\n==== Entity Classes\nTraditionally, JPA "`Entity`" classes are specified in a `persistence.xml` file. With\nSpring Boot, this file is not necessary and "`Entity Scanning`" is used instead. By\ndefault, all packages below your main configuration class (the one annotated with\n`@EnableAutoConfiguration` or `@SpringBootApplication`) are searched.\n\nAny classes annotated with `@Entity`, `@Embeddable`, or `@MappedSuperclass` are\nconsidered. A typical entity class resembles the following example:\n\n[source,java,indent=0]\n----\n\tpackage com.example.myapp.domain;\n\n\timport java.io.Serializable;\n\timport javax.persistence.*;\n\n\t@Entity\n\tpublic class City implements Serializable {\n\n\t\t@Id\n\t\t@GeneratedValue\n\t\tprivate Long id;\n\n\t\t@Column(nullable = false)\n\t\tprivate String name;\n\n\t\t@Column(nullable = false)\n\t\tprivate String state;\n\n\t\t// ... additional members, often include @OneToMany mappings\n\n\t\tprotected City() {\n\t\t\t// no-args constructor required by JPA spec\n\t\t\t// this one is protected since it shouldn\'t be used directly\n\t\t}\n\n\t\tpublic City(String name, String state) {\n\t\t\tthis.name = name;\n\t\t\tthis.state = state;\n\t\t}\n\n\t\tpublic String getName() {\n\t\t\treturn this.name;\n\t\t}\n\n\t\tpublic String getState() {\n\t\t\treturn this.state;\n\t\t}\n\n\t\t// ... etc\n\n\t}\n----\n\nTIP: You can customize entity scanning locations by using the `@EntityScan` annotation.\nSee the "`<<howto.adoc#howto-separate-entity-definitions-from-spring-configuration>>`"\nhow-to.\n\n\n\n[[boot-features-spring-data-jpa-repositories]]\n==== Spring Data JPA Repositories\n{spring-data-jpa}[Spring Data JPA] repositories are interfaces that you can define to\naccess data. JPA queries are created automatically from your method names. For example, a\n`CityRepository` interface might declare a `findAllByState(String state)` method to find\nall the cities in a given state.\n\nFor more complex queries, you can annotate your method with Spring Data\'s\n{spring-data-javadoc}/repository/Query.html[`Query`] annotation.\n\nSpring Data repositories usually extend from the\n{spring-data-commons-javadoc}/repository/Repository.html[`Repository`] or\n{spring-data-commons-javadoc}/repository/CrudRepository.html[`CrudRepository`]\ninterfaces. If you use auto-configuration, repositories are searched from the package\ncontaining your main configuration class (the one annotated with\n`@EnableAutoConfiguration` or `@SpringBootApplication`) down.\n\nThe following example shows a typical Spring Data repository interface definition:\n\n[source,java,indent=0]\n----\n\tpackage com.example.myapp.domain;\n\n\timport org.springframework.data.domain.*;\n\timport org.springframework.data.repository.*;\n\n\tpublic interface CityRepository extends Repository<City, Long> {\n\n\t\tPage<City> findAll(Pageable pageable);\n\n\t\tCity findByNameAndStateAllIgnoringCase(String name, String state);\n\n\t}\n----\n\nTIP: We have barely scratched the surface of Spring Data JPA. For complete details, see\nthe https://docs.spring.io/spring-data/jpa/docs/current/reference/html/[Spring Data JPA\nreference documentation].\n\n\n\n[[boot-features-creating-and-dropping-jpa-databases]]\n==== Creating and Dropping JPA Databases\nBy default, JPA databases are automatically created *only* if you use an embedded\ndatabase (H2, HSQL, or Derby). You can explicitly configure JPA settings by using\n`+spring.jpa.*+` properties. For example, to create and drop tables you can add the\nfollowing line to your `application.properties`:\n\n[indent=0]\n----\n\tspring.jpa.hibernate.ddl-auto=create-drop\n----\n\nNOTE: Hibernate\'s own internal property name for this (if you happen to remember it\nbetter) is `hibernate.hbm2ddl.auto`. You can set it, along with other Hibernate native\nproperties, by using `+spring.jpa.properties.*+` (the prefix is stripped before adding\nthem to the entity manager). The following line shows an example of setting JPA\nproperties for Hibernate:\n\n[indent=0]\n----\n\tspring.jpa.properties.hibernate.globally_quoted_identifiers=true\n----\n\nThe line in the preceding example passes a value of `true` for the\n`hibernate.globally_quoted_identifiers` property to the Hibernate entity manager.\n\nBy default, the DDL execution (or validation) is deferred until the `ApplicationContext`\nhas started. There is also a `spring.jpa.generate-ddl` flag, but it is not used if\nHibernate auto-configuration is active, because the `ddl-auto` settings are more\nfine-grained.\n\n\n\n[[boot-features-jpa-in-web-environment]]\n==== Open EntityManager in View\nIf you are running a web application, Spring Boot by default registers\n{spring-javadoc}/orm/jpa/support/OpenEntityManagerInViewInterceptor.{dc-ext}[`OpenEntityManagerInViewInterceptor`]\nto apply the "`Open EntityManager in View`" pattern, to allow for lazy loading in web\nviews. If you do not want this behavior, you should set `spring.jpa.open-in-view` to\n`false` in your `application.properties`.\n\n\n\n[[boot-features-sql-h2-console]]\n=== Using H2\'s Web Console\nThe http://www.h2database.com[H2 database] provides a\nhttp://www.h2database.com/html/quickstart.html#h2_console[browser-based console] that\nSpring Boot can auto-configure for you. The console is auto-configured when the following\nconditions are met:\n\n* You are developing a servlet-based web application.\n* `com.h2database:h2` is on the classpath.\n* You are using <<using-spring-boot.adoc#using-boot-devtools,Spring Boot\'s developer\ntools>>.\n\nTIP: If you are not using Spring Boot\'s developer tools but would still like to make use\nof H2\'s console, you can configure the `spring.h2.console.enabled` property with a value\nof `true`.\n\nNOTE: The H2 console is only intended for use during development, so you should take\ncare to ensure that `spring.h2.console.enabled` is not set to `true` in production.\n\n\n\n[[boot-features-sql-h2-console-custom-path]]\n==== Changing the H2 Console\'s Path\nBy default, the console is available at `/h2-console`. You can customize the console\'s\npath by using the `spring.h2.console.path` property.\n\n\n\n[[boot-features-jooq]]\n=== Using jOOQ\nJava Object Oriented Querying (http://www.jooq.org/[jOOQ]) is a popular product from\nhttp://www.datageekery.com/[Data Geekery] which generates Java code from your\ndatabase and lets you build type-safe SQL queries through its fluent API. Both the\ncommercial and open source editions can be used with Spring Boot.\n\n\n\n==== Code Generation\nIn order to use jOOQ type-safe queries, you need to generate Java classes from your\ndatabase schema. You can follow the instructions in the\n{jooq-manual}/#jooq-in-7-steps-step3[jOOQ user manual]. If you use the\n`jooq-codegen-maven` plugin and you also use the `spring-boot-starter-parent`\n"`parent POM`", you can safely omit the plugin\'s `<version>` tag. You can also use Spring\nBoot-defined version variables (such as `h2.version`) to declare the plugin\'s database\ndependency. The following listing shows an example:\n\n[source,xml,indent=0]\n----\n\t<plugin>\n\t\t<groupId>org.jooq</groupId>\n\t\t<artifactId>jooq-codegen-maven</artifactId>\n\t\t<executions>\n\t\t\t...\n\t\t</executions>\n\t\t<dependencies>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.h2database</groupId>\n\t\t\t\t<artifactId>h2</artifactId>\n\t\t\t\t<version>${h2.version}</version>\n\t\t\t</dependency>\n\t\t</dependencies>\n\t\t<configuration>\n\t\t\t<jdbc>\n\t\t\t\t<driver>org.h2.Driver</driver>\n\t\t\t\t<url>jdbc:h2:~/yourdatabase</url>\n\t\t\t</jdbc>\n\t\t\t<generator>\n\t\t\t\t...\n\t\t\t</generator>\n\t\t</configuration>\n\t</plugin>\n----\n\n\n\n==== Using DSLContext\nThe fluent API offered by jOOQ is initiated through the `org.jooq.DSLContext` interface.\nSpring Boot auto-configures a `DSLContext` as a Spring Bean and connects it to your\napplication `DataSource`. To use the `DSLContext`, you can `@Autowire` it, as shown in\nthe following example:\n\n[source,java,indent=0]\n----\n\t@Component\n\tpublic class JooqExample implements CommandLineRunner {\n\n\t\tprivate final DSLContext create;\n\n\t\t@Autowired\n\t\tpublic JooqExample(DSLContext dslContext) {\n\t\t\tthis.create = dslContext;\n\t\t}\n\n\t}\n----\n\nTIP: The jOOQ manual tends to use a variable named `create` to hold the `DSLContext`.\n\nYou can then use the `DSLContext` to construct your queries, as shown in the following\nexample:\n\n[source,java,indent=0]\n----\n\tpublic List<GregorianCalendar> authorsBornAfter1980() {\n\t\treturn this.create.selectFrom(AUTHOR)\n\t\t\t.where(AUTHOR.DATE_OF_BIRTH.greaterThan(new GregorianCalendar(1980, 0, 1)))\n\t\t\t.fetch(AUTHOR.DATE_OF_BIRTH);\n\t}\n----\n\n\n\n==== jOOQ SQL Dialect\nUnless the `spring.jooq.sql-dialect` property has been configured, Spring Boot determines\nthe SQL dialect to use for your datasource. If Spring Boot could not detect the dialect,\nit uses `DEFAULT`.\n\nNOTE: Spring Boot can only auto-configure dialects supported by the open source version\nof jOOQ.\n\n\n\n==== Customizing jOOQ\nMore advanced customizations can be achieved by defining your own `@Bean` definitions,\nwhich is used when the jOOQ `Configuration` is created. You can define beans for the\nfollowing jOOQ Types:\n\n* `ConnectionProvider`\n* `TransactionProvider`\n* `RecordMapperProvider`\n* `RecordUnmapperProvider`\n* `RecordListenerProvider`\n* `ExecuteListenerProvider`\n* `VisitListenerProvider`\n* `TransactionListenerProvider`\n\nYou can also create your own `org.jooq.Configuration` `@Bean` if you want to take\ncomplete control of the jOOQ configuration.\n\n\n\n[[boot-features-nosql]]\n== Working with NoSQL Technologies\nSpring Data provides additional projects that help you access a variety of NoSQL\ntechnologies, including:\nhttps://projects.spring.io/spring-data-mongodb/[MongoDB],\nhttps://projects.spring.io/spring-data-neo4j/[Neo4J],\nhttps://github.com/spring-projects/spring-data-elasticsearch/[Elasticsearch],\nhttps://projects.spring.io/spring-data-solr/[Solr],\nhttps://projects.spring.io/spring-data-redis/[Redis],\nhttps://projects.spring.io/spring-data-gemfire/[Gemfire],\nhttps://projects.spring.io/spring-data-cassandra/[Cassandra],\nhttps://projects.spring.io/spring-data-couchbase/[Couchbase] and\nhttps://projects.spring.io/spring-data-ldap/[LDAP].\nSpring Boot provides auto-configuration for Redis, MongoDB, Neo4j, Elasticsearch, Solr\nCassandra, Couchbase, and LDAP. You can make use of the other projects, but you must\nconfigure them yourself. Refer to the appropriate reference documentation at\nhttps://projects.spring.io/spring-data[projects.spring.io/spring-data].\n\n\n\n[[boot-features-redis]]\n=== Redis\nhttp://redis.io/[Redis] is a cache, message broker, and richly-featured key-value store.\nSpring Boot offers basic auto-configuration for the\nhttps://github.com/lettuce-io/lettuce-core/[Lettuce] and\nhttps://github.com/xetorthio/jedis/[Jedis] client libraries and the abstractions on top\nof them provided by https://github.com/spring-projects/spring-data-redis[Spring Data\nRedis].\n\nThere is a `spring-boot-starter-data-redis` "`Starter`" for collecting the dependencies\nin a convenient way. By default, it uses\nhttps://github.com/lettuce-io/lettuce-core/[Lettuce]. That starter handles both\ntraditional and reactive applications.\n\nTIP: we also provide a `spring-boot-starter-data-redis-reactive` "`Starter`" for\nconsistency with the other stores with reactive support.\n\n\n\n[[boot-features-connecting-to-redis]]\n==== Connecting to Redis\nYou can inject an auto-configured `RedisConnectionFactory`, `StringRedisTemplate`, or\nvanilla `RedisTemplate` instance as you would any other Spring Bean. By default, the\ninstance tries to connect to a Redis server at `localhost:6379`. The following listing\nshows an example of such a bean:\n\n[source,java,indent=0]\n----\n\t@Component\n\tpublic class MyBean {\n\n\t\tprivate StringRedisTemplate template;\n\n\t\t@Autowired\n\t\tpublic MyBean(StringRedisTemplate template) {\n\t\t\tthis.template = template;\n\t\t}\n\n\t\t// ...\n\n\t}\n----\n\nTIP: You can also register an arbitrary number of beans that implement\n`LettuceClientConfigurationBuilderCustomizer` for more advanced customizations. If you\nuse Jedis, `JedisClientConfigurationBuilderCustomizer` is also available.\n\nIf you add your own `@Bean` of any of the auto-configured types, it replaces the default\n(except in the case of `RedisTemplate`, when the exclusion is based on the bean name,\n`redisTemplate`, not its type). By default, if `commons-pool2` is on the classpath, you\nget a pooled connection factory.\n\n\n\n[[boot-features-mongodb]]\n=== MongoDB\nhttp://www.mongodb.com/[MongoDB] is an open-source NoSQL document database that uses a\nJSON-like schema instead of traditional table-based relational data. Spring Boot offers\nseveral conveniences for working with MongoDB, including the\n`spring-boot-starter-data-mongodb` and `spring-boot-starter-data-mongodb-reactive`\n"`Starters`".\n\n\n\n[[boot-features-connecting-to-mongodb]]\n==== Connecting to a MongoDB Database\nTo access Mongo databases, you can inject an auto-configured\n`org.springframework.data.mongodb.MongoDbFactory`. By default, the instance tries to\nconnect to a MongoDB server at `mongodb://localhost/test` The following example shows how\nto connect to a MongoDB database:\n\n[source,java,indent=0]\n----\n\timport org.springframework.data.mongodb.MongoDbFactory;\n\timport com.mongodb.DB;\n\n\t@Component\n\tpublic class MyBean {\n\n\t\tprivate final MongoDbFactory mongo;\n\n\t\t@Autowired\n\t\tpublic MyBean(MongoDbFactory mongo) {\n\t\t\tthis.mongo = mongo;\n\t\t}\n\n\t\t// ...\n\n\t\tpublic void example() {\n\t\t\tDB db = mongo.getDb();\n\t\t\t// ...\n\t\t}\n\n\t}\n----\n\nYou can set the `spring.data.mongodb.uri` property to change the URL and configure\nadditional settings such as the _replica set_, as shown in the following example:\n\n[source,properties,indent=0]\n----\n\tspring.data.mongodb.uri=mongodb://user:secret@mongo1.example.com:12345,mongo2.example.com:23456/test\n----\n\nAlternatively, as long as you use Mongo 2.x, you can specify a `host`/`port`. For\nexample, you might declare the following settings in your `application.properties`:\n\n[source,properties,indent=0]\n----\n\tspring.data.mongodb.host=mongoserver\n\tspring.data.mongodb.port=27017\n----\n\nNOTE: If you use the Mongo 3.0 Java driver, `spring.data.mongodb.host` and\n`spring.data.mongodb.port` are not supported. In such cases, `spring.data.mongodb.uri`\nshould be used to provide all of the configuration.\n\nTIP: If `spring.data.mongodb.port` is not specified, the default of `27017` is used. You\ncould delete this line from the example shown earlier.\n\nTIP: If you do not use Spring Data Mongo, you can inject `com.mongodb.MongoClient` beans\ninstead of using `MongoDbFactory`. If you want to take complete control of establishing\nthe MongoDB connection, you can also declare your own `MongoDbFactory` or `MongoClient`\nbean.\n\nNOTE: If you are using the reactive driver, Netty is required for SSL. The\nauto-configuration configures this factory automatically if Netty is available and the\nfactory to use hasn\'t been customized already.\n\n[[boot-features-mongo-template]]\n==== MongoTemplate\n{spring-data-mongo}[Spring Data MongoDB] provides a\n{spring-data-mongo-javadoc}/core/MongoTemplate.html[`MongoTemplate`] class that is very\nsimilar in its design to Spring\'s `JdbcTemplate`. As with `JdbcTemplate`, Spring Boot\nauto-configures a bean for you to inject the template, as follows:\n\n[source,java,indent=0]\n----\n\timport org.springframework.beans.factory.annotation.Autowired;\n\timport org.springframework.data.mongodb.core.MongoTemplate;\n\timport org.springframework.stereotype.Component;\n\n\t@Component\n\tpublic class MyBean {\n\n\t\tprivate final MongoTemplate mongoTemplate;\n\n\t\t@Autowired\n\t\tpublic MyBean(MongoTemplate mongoTemplate) {\n\t\t\tthis.mongoTemplate = mongoTemplate;\n\t\t}\n\n\t\t// ...\n\n\t}\n----\n\nSee the\nhttps://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/core/MongoOperations.html[`MongoOperations`\nJavadoc] for complete details.\n\n\n\n[[boot-features-spring-data-mongo-repositories]]\n==== Spring Data MongoDB Repositories\nSpring Data includes repository support for MongoDB. As with the JPA repositories\ndiscussed earlier, the basic principle is that queries are constructed automatically,\nbased on method names.\n\nIn fact, both Spring Data JPA and Spring Data MongoDB share the same common\ninfrastructure. You could take the JPA example from earlier and, assuming that `City` is\nnow a Mongo data class rather than a JPA `@Entity`, it works in the same way, as shown\nin the following example:\n\n[source,java,indent=0]\n----\n\tpackage com.example.myapp.domain;\n\n\timport org.springframework.data.domain.*;\n\timport org.springframework.data.repository.*;\n\n\tpublic interface CityRepository extends Repository<City, Long> {\n\n\t\tPage<City> findAll(Pageable pageable);\n\n\t\tCity findByNameAndStateAllIgnoringCase(String name, String state);\n\n\t}\n----\n\nTIP: You can customize document scanning locations by using the `@EntityScan` annotation.\n\nTIP: For complete details of Spring Data MongoDB, including its rich object mapping\ntechnologies, refer to its https://projects.spring.io/spring-data-mongodb/[reference\ndocumentation].\n\n\n\n[[boot-features-mongo-embedded]]\n==== Embedded Mongo\nSpring Boot offers auto-configuration for\nhttps://github.com/flapdoodle-oss/de.flapdoodle.embed.mongo[Embedded Mongo]. To use it in\nyour Spring Boot application, add a dependency on\n`de.flapdoodle.embed:de.flapdoodle.embed.mongo`.\n\nThe port that Mongo listens on can be configured by setting the `spring.data.mongodb.port`\nproperty. To use a randomly allocated free port, use a value of 0. The `MongoClient`\ncreated by `MongoAutoConfiguration` is automatically configured to use the randomly\nallocated port.\n\nNOTE: If you do not configure a custom port, the embedded support uses a random port\n(rather than 27017) by default.\n\nIf you have SLF4J on the classpath, the output produced by Mongo is automatically routed\nto a logger named `org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongo`.\n\nYou can declare your own `IMongodConfig` and `IRuntimeConfig` beans to take control of\nthe Mongo instance\'s configuration and logging routing.\n\n\n\n[[boot-features-neo4j]]\n=== Neo4j\nhttp://neo4j.com/[Neo4j] is an open-source NoSQL graph database that uses a rich data\nmodel of nodes connected by first class relationships, which is better suited for\nconnected big data than traditional RDBMS approaches. Spring Boot offers several\nconveniences for working with Neo4j, including the `spring-boot-starter-data-neo4j`\n"`Starter`".\n\n\n\n[[boot-features-connecting-to-neo4j]]\n==== Connecting to a Neo4j Database\nTo access a Neo4j server, you can inject an auto-configured\n`org.neo4j.ogm.session.Session`. By default, the instance tries to connect to a Neo4j\nserver at `localhost:7687` using the Bolt protocol. The following example shows how to\ninject a Neo4j `Session`:\n\n[source,java,indent=0]\n----\n\t@Component\n\tpublic class MyBean {\n\n\t\tprivate final Session session;\n\n\t\t@Autowired\n\t\tpublic MyBean(Session session) {\n\t\t\tthis.session = session;\n\t\t}\n\n\t\t// ...\n\n\t}\n----\n\nYou can configure the uri and credentials to use by setting the `spring.data.neo4j.*`\nproperties, as shown in the following example:\n\n[source,properties,indent=0]\n----\n\tspring.data.neo4j.uri=bolt://my-server:7687\n\tspring.data.neo4j.username=neo4j\n\tspring.data.neo4j.password=secret\n----\n\nYou can take full control over the session creation by adding a\n`org.neo4j.ogm.config.Configuration` `@Bean`. Also, adding a `@Bean` of type\n`SessionFactory` disables the auto-configuration and gives you full control.\n\n\n\n[[boot-features-connecting-to-neo4j-embedded]]\n==== Using the Embedded Mode\nIf you add `org.neo4j:neo4j-ogm-embedded-driver` to the dependencies of your application,\nSpring Boot automatically configures an in-process embedded instance of Neo4j that does\nnot persist any data when your application shuts down.\n\n[NOTE]\n====\nAs the embedded Neo4j OGM  driver  does not provide the Neo4j kernel itself, you have\nto declare `org.neo4j:neo4j` as dependency yourself. Refer to\nhttps://neo4j.com/docs/ogm-manual/current/reference/#reference:getting-started[the\nNeo4j OGM documentation] for a list of compatible versions.\n====\n\nThe embedded driver takes precedence over the other drivers when there are multiple\ndrivers on the classpath. You can explicitly disable the embedded mode by setting\n`spring.data.neo4j.embedded.enabled=false`.\n\n<<boot-features-testing-spring-boot-applications-testing-autoconfigured-neo4j-test,Data Neo4j Tests>>\nautomatically make use of an embedded Neo4j instance if the embedded driver and Neo4j\nkernel are on the classpath as described above.\n\n[NOTE]\n====\nYou can enable persistence for the embedded mode by providing a path to a database file\nin your configuration, e.g. `spring.data.neo4j.uri=file://var/tmp/graph.db`.\n====\n\n\n\n[[boot-features-neo4j-ogm-session]]\n==== Neo4jSession\nBy default, if you are running a web application, the session is bound to the thread for\nthe entire processing of the request (that is, it uses the "Open Session in View"\npattern). If you do not want this behavior, add the following line to your\n`application.properties` file:\n\n[source,properties,indent=0]\n----\n\tspring.data.neo4j.open-in-view=false\n----\n\n\n\n[[boot-features-spring-data-neo4j-repositories]]\n==== Spring Data Neo4j Repositories\nSpring Data includes repository support for Neo4j.\n\nSpring Data Neo4j shares the common infrastructure with Spring Data JPA as many other\nSpring Data modules do. You could take the JPA example from earlier and define\n`City` as Neo4j OGM `@NodeEntity` rather than JPA `@Entity` and the repository\nabstraction works in the same way, as shown in the following example:\n\n[source,java,indent=0]\n----\n\tpackage com.example.myapp.domain;\n\n\timport java.util.Optional;\n\n\timport org.springframework.data.neo4j.repository.*;\n\n\tpublic interface CityRepository extends Neo4jRepository<City, Long> {\n\n\t\tOptional<City> findOneByNameAndState(String name, String state);\n\n\t}\n----\n\nThe `spring-boot-starter-data-neo4j` "`Starter`" enables the repository support as well\nas transaction management. You can customize the locations to look for repositories and\nentities by using `@EnableNeo4jRepositories` and `@EntityScan` respectively on a\n`@Configuration`-bean.\n\nTIP: For complete details of Spring Data Neo4j, including its object mapping\ntechnologies, refer to the https://projects.spring.io/spring-data-neo4j/[reference\ndocumentation].\n\n\n\n[[boot-features-gemfire]]\n=== Gemfire\nhttps://github.com/spring-projects/spring-data-gemfire[Spring Data Gemfire] provides\nconvenient Spring-friendly tools for accessing the\nhttps://pivotal.io/big-data/pivotal-gemfire#details[Pivotal Gemfire] data management\nplatform. There is a `spring-boot-starter-data-gemfire` "`Starter`" for collecting the\ndependencies in a convenient way. There is currently no auto-configuration support for\nGemfire, but you can enable Spring Data Repositories with a\nhttps://github.com/spring-projects/spring-data-gemfire/blob/master/src/main/java/org/springframework/data/gemfire/repository/config/EnableGemfireRepositories.java[single annotation: `@EnableGemfireRepositories`].\n\n\n\n[[boot-features-solr]]\n=== Solr\nhttp://lucene.apache.org/solr/[Apache Solr] is a search engine. Spring Boot offers basic\nauto-configuration for the Solr 5 client library and the abstractions on top of it\nprovided by https://github.com/spring-projects/spring-data-solr[Spring Data Solr]. There\nis a `spring-boot-starter-data-solr` "`Starter`" for collecting the dependencies in a\nconvenient way.\n\n\n[[boot-features-connecting-to-solr]]\n==== Connecting to Solr\nYou can inject an auto-configured `SolrClient` instance as you would any other Spring\nbean. By default, the instance tries to connect to a server at\n`http://localhost:8983/solr`. The following example shows how to inject a Solr bean:\n\n[source,java,indent=0]\n----\n\t@Component\n\tpublic class MyBean {\n\n\t\tprivate SolrClient solr;\n\n\t\t@Autowired\n\t\tpublic MyBean(SolrClient solr) {\n\t\t\tthis.solr = solr;\n\t\t}\n\n\t\t// ...\n\n\t}\n----\n\nIf you add your own `@Bean` of type `SolrClient`, it replaces the default.\n\n\n\n[[boot-features-spring-data-solr-repositories]]\n==== Spring Data Solr Repositories\nSpring Data includes repository support for Apache Solr. As with the JPA repositories\ndiscussed earlier, the basic principle is that queries are automatically constructed for \\\nyou based on method names.\n\nIn fact, both Spring Data JPA and Spring Data Solr share the same common infrastructure.\nYou could take the JPA example from earlier and, assuming that `City` is now a\n`@SolrDocument` class rather than a JPA `@Entity`, it works in the same way.\n\nTIP: For complete details of Spring Data Solr, refer to the\nhttps://projects.spring.io/spring-data-solr/[reference documentation].\n\n\n\n[[boot-features-elasticsearch]]\n=== Elasticsearch\nhttp://www.elasticsearch.org/[Elasticsearch] is an open source, distributed, real-time\nsearch and analytics engine. Spring Boot offers basic auto-configuration for\nElasticsearch and the abstractions on top of it provided by\nhttps://github.com/spring-projects/spring-data-elasticsearch[Spring Data Elasticsearch].\nThere is a `spring-boot-starter-data-elasticsearch` "`Starter`" for collecting the\ndependencies in a convenient way. Spring Boot also supports\nhttps://github.com/searchbox-io/Jest[Jest].\n\n\n\n[[boot-features-connecting-to-elasticsearch-jest]]\n==== Connecting to Elasticsearch by Using Jest\nIf you have `Jest` on the classpath, you can inject an auto-configured `JestClient` that\nby default targets `http://localhost:9200`. You can further tune how the client is\nconfigured, as shown in the following example:\n\n[source,properties,indent=0]\n----\n\tspring.elasticsearch.jest.uris=http://search.example.com:9200\n\tspring.elasticsearch.jest.read-timeout=10000\n\tspring.elasticsearch.jest.username=user\n\tspring.elasticsearch.jest.password=secret\n----\n\nYou can also register an arbitrary number of beans that implement\n`HttpClientConfigBuilderCustomizer` for more advanced customizations. The following\nexample tunes additional HTTP settings:\n\n[source,java,indent=0]\n----\ninclude::{code-examples}/elasticsearch/jest/JestClientCustomizationExample.java[tag=customizer]\n----\n\nTo take full control over the registration, define a `JestClient` bean.\n\n\n\n[[boot-features-connecting-to-elasticsearch-spring-data]]\n==== Connecting to Elasticsearch by Using Spring Data\nTo connect to Elasticsearch, you must provide the address of one or more cluster nodes.\nThe address can be specified by setting the `spring.data.elasticsearch.cluster-nodes`\nproperty to a comma-separated `host:port` list. With this configuration in place, an\n`ElasticsearchTemplate` or `TransportClient` can be injected like any other Spring bean,\nas shown in the following example:\n\n[source,properties,indent=0]\n----\n\tspring.data.elasticsearch.cluster-nodes=localhost:9300\n----\n\n[source,java,indent=0]\n----\n\t@Component\n\tpublic class MyBean {\n\n\t\tprivate final ElasticsearchTemplate template;\n\n\t\tpublic MyBean(ElasticsearchTemplate template) {\n\t\t\tthis.template = template;\n\t\t}\n\n\t\t// ...\n\n\t}\n----\n\nIf you add your own `ElasticsearchTemplate` or `TransportClient` `@Bean`, it replaces the\ndefault.\n\n\n\n[[boot-features-spring-data-elasticsearch-repositories]]\n==== Spring Data Elasticsearch Repositories\nSpring Data includes repository support for Elasticsearch. As with the JPA repositories\ndiscussed earlier, the basic principle is that queries are constructed for you\nautomatically based on method names.\n\nIn fact, both Spring Data JPA and Spring Data Elasticsearch share the same common\ninfrastructure. You could take the JPA example from earlier and, assuming that `City` is\nnow an Elasticsearch `@Document` class rather than a JPA `@Entity`, it works in the same\nway.\n\nTIP: For complete details of Spring Data Elasticsearch, refer to the\nhttps://docs.spring.io/spring-data/elasticsearch/docs/[reference documentation].\n\n\n\n[[boot-features-cassandra]]\n=== Cassandra\nhttp://cassandra.apache.org/[Cassandra] is an open source, distributed database\nmanagement system designed to handle large amounts of data across many commodity servers.\nSpring Boot offers auto-configuration for Cassandra and the abstractions on top of it\nprovided by https://github.com/spring-projects/spring-data-cassandra[Spring Data\nCassandra]. There is a `spring-boot-starter-data-cassandra` "`Starter`" for collecting\nthe dependencies in a convenient way.\n\n\n\n[[boot-features-connecting-to-cassandra]]\n==== Connecting to Cassandra\nYou can inject an auto-configured `CassandraTemplate` or a Cassandra `Session` instance\nas you would with any other Spring Bean. The `spring.data.cassandra.*` properties can be\nused to customize the connection. Generally, you provide `keyspace-name` and\n`contact-points` properties, as shown in the following example:\n\n[source,properties,indent=0]\n----\n\tspring.data.cassandra.keyspace-name=mykeyspace\n\tspring.data.cassandra.contact-points=cassandrahost1,cassandrahost2\n----\n\nThe following code listing shows how to inject a Cassandra bean:\n\n[source,java,indent=0]\n----\n\t@Component\n\tpublic class MyBean {\n\n\t\tprivate CassandraTemplate template;\n\n\t\t@Autowired\n\t\tpublic MyBean(CassandraTemplate template) {\n\t\t\tthis.template = template;\n\t\t}\n\n\t\t// ...\n\n\t}\n----\n\nIf you add your own `@Bean` of type `CassandraTemplate`, it replaces the default.\n\n\n\n[[boot-features-spring-data-cassandra-repositories]]\n==== Spring Data Cassandra Repositories\nSpring Data includes basic repository support for Cassandra. Currently, this is more\nlimited than the JPA repositories discussed earlier and needs to annotate finder methods\nwith `@Query`.\n\nTIP: For complete details of Spring Data Cassandra, refer to the\nhttps://docs.spring.io/spring-data/cassandra/docs/[reference documentation].\n\n\n\n[[boot-features-couchbase]]\n=== Couchbase\nhttp://www.couchbase.com/[Couchbase] is an open-source, distributed, multi-model NoSQL\ndocument-oriented database that is optimized for interactive applications. Spring Boot\noffers auto-configuration for Couchbase and the abstractions on top of it provided by\nhttps://github.com/spring-projects/spring-data-couchbase[Spring Data Couchbase]. There are\n`spring-boot-starter-data-couchbase` and `spring-boot-starter-data-couchbase-reactive`\n"`Starters`" for collecting the dependencies in a convenient way.\n\n\n\n[[boot-features-connecting-to-couchbase]]\n==== Connecting to Couchbase\nYou can get a `Bucket` and `Cluster` by adding the Couchbase SDK and some configuration.\nThe `spring.couchbase.*` properties can be used to customize the connection. Generally,\nyou provide the bootstrap hosts, bucket name, and password, as shown in the following\nexample:\n\n[source,properties,indent=0]\n----\n\tspring.couchbase.bootstrap-hosts=my-host-1,192.168.1.123\n\tspring.couchbase.bucket.name=my-bucket\n\tspring.couchbase.bucket.password=secret\n----\n\n[TIP]\n====\nYou need to provide _at least_ the bootstrap host(s), in which case the bucket name is\n`default` and the password is an empty String. Alternatively, you can define your own\n`org.springframework.data.couchbase.config.CouchbaseConfigurer` `@Bean` to take control\nover the whole configuration.\n====\n\nIt is also possible to customize some of the `CouchbaseEnvironment` settings. For\ninstance, the following configuration changes the timeout to use to open a new `Bucket`\nand enables SSL support:\n\n[source,properties,indent=0]\n----\n\tspring.couchbase.env.timeouts.connect=3000\n\tspring.couchbase.env.ssl.key-store=/location/of/keystore.jks\n\tspring.couchbase.env.ssl.key-store-password=secret\n----\n\nCheck the `spring.couchbase.env.*` properties for more details.\n\n\n\n[[boot-features-spring-data-couchbase-repositories]]\n==== Spring Data Couchbase Repositories\nSpring Data includes repository support for Couchbase. For complete details of Spring\nData Couchbase, refer to the\nhttps://docs.spring.io/spring-data/couchbase/docs/current/reference/html/[reference\ndocumentation].\n\nYou can inject an auto-configured `CouchbaseTemplate` instance as you would with any\nother Spring Bean, provided a _default_ `CouchbaseConfigurer` is available (which\nhappens when you enable Couchbase support, as explained earlier).\n\nThe following examples shows how to inject a Couchbase bean:\n\n[source,java,indent=0]\n----\n\t@Component\n\tpublic class MyBean {\n\n\t\tprivate final CouchbaseTemplate template;\n\n\t\t@Autowired\n\t\tpublic MyBean(CouchbaseTemplate template) {\n\t\t\tthis.template = template;\n\t\t}\n\n\t\t// ...\n\n\t}\n----\n\nThere are a few beans that you can define in your own configuration to override those\nprovided by the auto-configuration:\n\n* A `CouchbaseTemplate` `@Bean` with a name of `couchbaseTemplate`.\n* An `IndexManager` `@Bean` with a name of `couchbaseIndexManager`.\n* A `CustomConversions` `@Bean` with a name of `couchbaseCustomConversions`.\n\nTo avoid hard-coding those names in your own config, you can reuse `BeanNames` provided\nby Spring Data Couchbase. For instance, you can customize the converters to use, as\nfollows:\n\n[source,java,indent=0]\n----\n\t@Configuration\n\tpublic class SomeConfiguration {\n\n\t\t@Bean(BeanNames.COUCHBASE_CUSTOM_CONVERSIONS)\n\t\tpublic CustomConversions myCustomConversions() {\n\t\t\treturn new CustomConversions(...);\n\t\t}\n\n\t\t// ...\n\n\t}\n----\n\nTIP: If you want to fully bypass the auto-configuration for Spring Data Couchbase,\nprovide your own implementation of\n`org.springframework.data.couchbase.config.AbstractCouchbaseDataConfiguration`.\n\n\n\n[[boot-features-ldap]]\n=== LDAP\nhttps://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol[LDAP] (Lightweight\nDirectory Access Protocol) is an open, vendor-neutral, industry standard application\nprotocol for accessing and maintaining distributed directory information services over an\nIP network. Spring Boot offers auto-configuration for any compliant LDAP server as well\nas support for the embedded in-memory LDAP server from\nhttps://www.ldap.com/unboundid-ldap-sdk-for-java[UnboundID].\n\nLDAP abstractions are provided by\nhttps://github.com/spring-projects/spring-data-ldap[Spring Data LDAP].\nThere is a `spring-boot-starter-data-ldap` "`Starter`" for collecting the dependencies in\na convenient way.\n\n\n\n[[boot-features-ldap-connecting]]\n==== Connecting to an LDAP Server\nTo connect to an LDAP server, make sure you declare a dependency on the\n`spring-boot-starter-data-ldap` "`Starter`" or `spring-ldap-core` and then declare the\nURLs of your server in your application.properties, as shown in the following example:\n\n[source,properties,indent=0]\n----\n\tspring.ldap.urls=ldap://myserver:1235\n\tspring.ldap.username=admin\n\tspring.ldap.password=secret\n----\n\nIf you need to customize connection settings, you can use the `spring.ldap.base` and\n`spring.ldap.base-environment` properties.\n\n\n\n[[boot-features-ldap-spring-data-repositories]]\n==== Spring Data LDAP Repositories\nSpring Data includes repository support for LDAP. For complete details of Spring\nData LDAP, refer to the\nhttps://docs.spring.io/spring-data/ldap/docs/1.0.x/reference/html/[reference\ndocumentation].\n\nYou can also inject an auto-configured `LdapTemplate` instance as you would with any\nother Spring Bean, as shown in the following example:\n\n\n[source,java,indent=0]\n----\n\t@Component\n\tpublic class MyBean {\n\n\t\tprivate final LdapTemplate template;\n\n\t\t@Autowired\n\t\tpublic MyBean(LdapTemplate template) {\n\t\t\tthis.template = template;\n\t\t}\n\n\t\t// ...\n\n\t}\n----\n\n\n\n[[boot-features-ldap-embedded]]\n==== Embedded In-memory LDAP Server\nFor testing purposes, Spring Boot supports auto-configuration of an in-memory LDAP server\nfrom https://www.ldap.com/unboundid-ldap-sdk-for-java[UnboundID]. To configure the server,\nadd a dependency to `com.unboundid:unboundid-ldapsdk` and declare a `base-dn` property, as\nfollows:\n\n[source,properties,indent=0]\n----\n\tspring.ldap.embedded.base-dn=dc=spring,dc=io\n----\n\n[NOTE]\n====\nIt is possible to define multiple base-dn values, however, since distinguished names\nusually contain commas, they must be defined using the correct notation.\n\nIn yaml files, you can use the yaml list notation:\n\n[source,yaml,indent=0]\n----\n\tspring.ldap.embedded.base-dn:\n\t  - dc=spring,dc=io\n\t  - dc=pivotal,dc=io\n----\n\nIn properties files, you must include the index as part of the property name:\n\n[source,properties,indent=0]\n----\n\tspring.ldap.embedded.base-dn[0]=dc=spring,dc=io\n\tspring.ldap.embedded.base-dn[1]=dc=pivotal,dc=io\n----\n\n====\n\nBy default, the server starts on a random port and triggers the regular LDAP support.\nThere is no need to specify a `spring.ldap.urls` property.\n\nIf there is a `schema.ldif` file on your classpath, it is used to initialize the server.\nIf you want to load the initialization script from a different resource, you can also use\nthe `spring.ldap.embedded.ldif` property.\n\nBy default, a standard schema is used to validate `LDIF` files. You can turn off\nvalidation altogether by setting the `spring.ldap.embedded.validation.enabled` property.\nIf you have custom attributes, you can use `spring.ldap.embedded.validation.schema` to\ndefine your custom attribute types or object classes.\n\n\n\n[[boot-features-influxdb]]\n=== InfluxDB\nhttps://www.influxdata.com/[InfluxDB] is an open-source time series database optimized\nfor fast, high-availability storage and retrieval of time series data in fields such as\noperations monitoring, application metrics, Internet-of-Things sensor data, and real-time\nanalytics.\n\n\n\n[[boot-features-connecting-to-influxdb]]\n==== Connecting to InfluxDB\nSpring Boot auto-configures an `InfluxDB` instance, provided the `influxdb-java` client\nis on the classpath and the URL of the database is set, as shown in the following\nexample:\n\n[source,properties,indent=0]\n----\n\tspring.influx.url=http://172.0.0.1:8086\n----\n\nIf the connection to InfluxDB requires a user and password, you can set the\n`spring.influx.user` and `spring.influx.password` properties accordingly.\n\nInfluxDB relies on OkHttp. If you need to tune the http client `InfluxDB` uses behind the\nscenes, you can register an `OkHttpClient.Builder` bean.\n\n\n\n[[boot-features-caching]]\n== Caching\nThe Spring Framework provides support for transparently adding caching to an application.\nAt its core, the abstraction applies caching to methods, thus reducing the number of\nexecutions based on the information available in the cache. The caching logic is applied\ntransparently, without any interference to the invoker.  Spring Boot auto-configures the\ncache infrastructure as long as caching support is enabled via the `@EnableCaching`\nannotation.\n\nNOTE: Check the {spring-reference}integration.html#cache[relevant section] of the Spring\nFramework reference for more details.\n\nIn a nutshell, adding caching to an operation of your service is as easy as adding the\nrelevant annotation to its method, as shown in the following example:\n\n[source,java,indent=0]\n----\n\timport org.springframework.cache.annotation.Cacheable;\n\timport org.springframework.stereotype.Component;\n\n\t@Component\n\tpublic class MathService {\n\n\t\t@Cacheable("piDecimals")\n\t\tpublic int computePiDecimal(int i) {\n\t\t\t// ...\n\t\t}\n\n\t}\n----\n\nThis example demonstrates the use of caching on a potentially costly operation. Before\ninvoking `computePiDecimal`, the abstraction looks for an entry in the `piDecimals` cache\nthat matches the `i` argument. If an entry is found, the content in the cache is\nimmediately returned to the caller, and the method is not invoked. Otherwise, the method\nis invoked, and the cache is updated before returning the value.\n\nCAUTION: You can also use the standard JSR-107 (JCache) annotations (such as\n`@CacheResult`) transparently. However, we strongly advise you to not mix and match the\nSpring Cache and JCache annotations.\n\nIf you do not add any specific cache library, Spring Boot auto-configures a\n<<boot-features-caching-provider-simple,simple provider>> that uses concurrent maps in\nmemory. When a cache is required (such as `piDecimals` in the preceding example), this\nprovider creates it for you. The simple provider is not really recommended for\nproduction usage, but it is great for getting started and making sure that you understand\nthe features. When you have made up your mind about the cache provider to use, please\nmake sure to read its documentation to figure out how to configure the caches that your\napplication uses. Nearly all providers require you to explicitly configure every cache\nthat you use in the application. Some offer a way to customize the default caches defined\nby the `spring.cache.cache-names` property.\n\nTIP: It is also possible to transparently\n{spring-reference}integration.html#cache-annotations-put[update] or\n{spring-reference}integration.html#cache-annotations-evict[evict] data from the cache.\n\n\n\n[[boot-features-caching-provider]]\n=== Supported Cache Providers\nThe cache abstraction does not provide an actual store and relies on abstraction\nmaterialized by the `org.springframework.cache.Cache` and\n`org.springframework.cache.CacheManager` interfaces.\n\nIf you have not defined a bean of type `CacheManager` or a `CacheResolver` named\n`cacheResolver` (see\n{spring-javadoc}/cache/annotation/CachingConfigurer.html[`CachingConfigurer`]),\nSpring Boot tries to detect the following providers (in the indicated order):\n\n. <<boot-features-caching-provider-generic,Generic>>\n. <<boot-features-caching-provider-jcache,JCache (JSR-107)>> (EhCache 3, Hazelcast,\n  Infinispan, and others)\n. <<boot-features-caching-provider-ehcache2,EhCache 2.x>>\n. <<boot-features-caching-provider-hazelcast,Hazelcast>>\n. <<boot-features-caching-provider-infinispan,Infinispan>>\n. <<boot-features-caching-provider-couchbase,Couchbase>>\n. <<boot-features-caching-provider-redis,Redis>>\n. <<boot-features-caching-provider-caffeine,Caffeine>>\n. <<boot-features-caching-provider-simple,Simple>>\n\nTIP: It is also possible to _force_ a particular cache provider by setting the\n`spring.cache.type` property. Use this property if you need to\n<<boot-features-caching-provider-none,disable caching altogether>> in certain environment\n(such as tests).\n\nTIP: Use the `spring-boot-starter-cache` "`Starter`" to quickly add basic caching\ndependencies. The starter brings in `spring-context-support`. If you add dependencies\nmanually, you must include `spring-context-support` in order to use the JCache,\nEhCache 2.x, or Guava support.\n\nIf the `CacheManager` is auto-configured by Spring Boot, you can further tune its\nconfiguration before it is fully initialized by exposing a bean that implements the\n`CacheManagerCustomizer` interface. The following example sets a flag to say that null\nvalues should be passed down to the underlying map:\n\n[source,java,indent=0]\n----\n\t@Bean\n\tpublic CacheManagerCustomizer<ConcurrentMapCacheManager> cacheManagerCustomizer() {\n\t\treturn new CacheManagerCustomizer<ConcurrentMapCacheManager>() {\n\t\t\t@Override\n\t\t\tpublic void customize(ConcurrentMapCacheManager cacheManager) {\n\t\t\t\tcacheManager.setAllowNullValues(false);\n\t\t\t}\n\t\t};\n\t}\n----\n\n[NOTE]\n====\nIn the preceding example, an auto-configured `ConcurrentMapCacheManager` is expected. If\nthat is not the case (either you provided your own config or a different cache provider\nwas auto-configured), the customizer is not invoked at all. You can have as many\ncustomizers as you want, and you can also order them by using `@Order` or `Ordered`.\n====\n\n\n\n[[boot-features-caching-provider-generic]]\n==== Generic\nGeneric caching is used if the context defines _at least_ one\n`org.springframework.cache.Cache` bean. A `CacheManager` wrapping all beans of that type\nis created.\n\n\n\n[[boot-features-caching-provider-jcache]]\n==== JCache (JSR-107)\nhttps://jcp.org/en/jsr/detail?id=107[JCache] is bootstrapped through the presence of a\n`javax.cache.spi.CachingProvider` on the classpath (that is, a JSR-107 compliant caching\nlibrary exists on the classpath), and the `JCacheCacheManager` is provided by the\n`spring-boot-starter-cache` "`Starter`". Various compliant libraries are available, and\nSpring Boot provides dependency management for Ehcache 3, Hazelcast, and Infinispan. Any\nother compliant library can be added as well.\n\nIt might happen that more than one provider is present, in which case the provider must\nbe explicitly specified. Even if the JSR-107 standard does not enforce a standardized way\nto define the location of the configuration file, Spring Boot does its best to\naccommodate setting a cache with implementation details, as shown in the following\nexample:\n\n[source,properties,indent=0]\n----\n    # Only necessary if more than one provider is present\n\tspring.cache.jcache.provider=com.acme.MyCachingProvider\n\tspring.cache.jcache.config=classpath:acme.xml\n----\n\nNOTE: When a cache library offers both a native implementation and JSR-107 support,\nSpring Boot prefers the JSR-107 support, so that the same features are available if you\nswitch to a different JSR-107 implementation.\n\nTIP: Spring Boot has <<boot-features-hazelcast,general support for Hazelcast>>. If a\nsingle `HazelcastInstance` is available, it is automatically reused for the\n`CacheManager` as well, unless the `spring.cache.jcache.config` property is specified.\n\nThere are two ways to customize the underlying `javax.cache.cacheManager`:\n\n* Caches can be created on startup by setting the `spring.cache.cache-names` property. If\na custom `javax.cache.configuration.Configuration` bean is defined, it is used to\ncustomize them.\n* `org.springframework.boot.autoconfigure.cache.JCacheManagerCustomizer` beans are\ninvoked with the reference of the `CacheManager` for full customization.\n\nTIP: If a standard `javax.cache.CacheManager` bean is defined, it is wrapped\nautomatically in an `org.springframework.cache.CacheManager` implementation that the\nabstraction expects. No further customization is applied to it.\n\n\n\n[[boot-features-caching-provider-ehcache2]]\n==== EhCache 2.x\nhttp://www.ehcache.org/[EhCache] 2.x is used if a file named `ehcache.xml` can be found at\nthe root of the classpath. If EhCache 2.x is found, the `EhCacheCacheManager` provided by\nthe `spring-boot-starter-cache` "`Starter`" is used to bootstrap the cache manager. An\nalternate configuration file can be provided as well, as shown in the following example:\n\n[source,properties,indent=0]\n----\n\tspring.cache.ehcache.config=classpath:config/another-config.xml\n----\n\n\n\n[[boot-features-caching-provider-hazelcast]]\n==== Hazelcast\n\nSpring Boot has <<boot-features-hazelcast,general support for Hazelcast>>. If a\n`HazelcastInstance` has been auto-configured, it is automatically wrapped in a\n`CacheManager`.\n\n\n\n[[boot-features-caching-provider-infinispan]]\n==== Infinispan\nhttp://infinispan.org/[Infinispan] has no default configuration file location, so it must\nbe specified explicitly. Otherwise, the default bootstrap is used.\n\n[source,properties,indent=0]\n----\n\tspring.cache.infinispan.config=infinispan.xml\n----\n\nCaches can be created on startup by setting the `spring.cache.cache-names` property. If a\ncustom `ConfigurationBuilder` bean is defined, it is used to customize the caches.\n\n[NOTE]\n====\nThe support of Infinispan in Spring Boot is restricted to the embedded mode and is quite\nbasic. If you want more options, you should use the official Infinispan Spring Boot\nstarter instead. See\nhttps://github.com/infinispan/infinispan-spring-boot[Infinispan\'s documentation] for more\ndetails.\n====\n\n\n[[boot-features-caching-provider-couchbase]]\n==== Couchbase\nIf the https://www.couchbase.com/[Couchbase] Java client and the `couchbase-spring-cache`\nimplementation are available and Couchbase is <<boot-features-couchbase,configured>>, a\n`CouchbaseCacheManager` is auto-configured. It is also possible to create additional\ncaches on startup by setting the `spring.cache.cache-names` property. These caches\noperate on the `Bucket` that was auto-configured. You can _also_ create additional caches\non another `Bucket` by using the customizer. Assume you need two caches (`cache1` and\n`cache2`) on the "main" `Bucket` and one (`cache3`) cache with a custom time to live of 2\nseconds on the "`another`" `Bucket`. You can create the first two caches through\nconfiguration, as follows:\n\n[source,properties,indent=0]\n----\n\tspring.cache.cache-names=cache1,cache2\n----\n\nThen you can define a `@Configuration` class to configure the extra `Bucket` and the\n`cache3` cache, as follows:\n\n\n[source,java,indent=0]\n----\n\t@Configuration\n\tpublic class CouchbaseCacheConfiguration {\n\n\t\tprivate final Cluster cluster;\n\n\t\tpublic CouchbaseCacheConfiguration(Cluster cluster) {\n\t\t\tthis.cluster = cluster;\n\t\t}\n\n\t\t@Bean\n\t\tpublic Bucket anotherBucket() {\n\t\t\treturn this.cluster.openBucket("another", "secret");\n\t\t}\n\n\t\t@Bean\n\t\tpublic CacheManagerCustomizer<CouchbaseCacheManager> cacheManagerCustomizer() {\n\t\t\treturn c -> {\n\t\t\t\tc.prepareCache("cache3", CacheBuilder.newInstance(anotherBucket())\n\t\t\t\t\t\t.withExpiration(2));\n\t\t\t};\n\t\t}\n\n\t}\n----\n\nThis sample configuration reuses the `Cluster` that was created through\nauto-configuration.\n\n\n\n[[boot-features-caching-provider-redis]]\n==== Redis\nIf http://redis.io/[Redis] is available and configured, a `RedisCacheManager` is\nauto-configured. It is possible to create additional caches on startup by setting the\n`spring.cache.cache-names` property and cache defaults can be configured by using\n`spring.cache.redis.*` properties. For instance, the following configuration creates\n`cache1` and `cache2` caches with a _time to live_ of 10 minutes:\n\n[source,properties,indent=0]\n----\n\tspring.cache.cache-names=cache1,cache2\n\tspring.cache.redis.time-to-live=600000\n----\n\n[NOTE]\n====\nBy default, a key prefix is added so that, if two separate caches use the same\nkey, Redis does not have overlapping keys and cannot return invalid values. We strongly\nrecommend keeping this setting enabled if you create your own `RedisCacheManager`.\n====\n\nTIP: You can take full control of the configuration by adding a `RedisCacheConfiguration`\n`@Bean` of your own. This can be useful if you\'re looking for customizing the\nserialization strategy.\n\n\n\n[[boot-features-caching-provider-caffeine]]\n==== Caffeine\nhttps://github.com/ben-manes/caffeine[Caffeine] is a Java 8 rewrite of Guava\'s cache that\nsupersedes support for Guava. If Caffeine is present, a `CaffeineCacheManager` (provided\nby the `spring-boot-starter-cache` "`Starter`") is auto-configured. Caches can be created\non startup by setting the `spring.cache.cache-names` property and can be customized by one\nof the following (in the indicated order):\n\n. A cache spec defined by `spring.cache.caffeine.spec`\n. A `com.github.benmanes.caffeine.cache.CaffeineSpec` bean is defined\n. A `com.github.benmanes.caffeine.cache.Caffeine` bean is defined\n\nFor instance, the following configuration creates `cache1` and `cache2` caches with a\nmaximum size of 500 and a _time to live_ of 10 minutes\n\n[source,properties,indent=0]\n----\n\tspring.cache.cache-names=cache1,cache2\n\tspring.cache.caffeine.spec=maximumSize=500,expireAfterAccess=600s\n----\n\nIf a `com.github.benmanes.caffeine.cache.CacheLoader` bean is defined, it is\nautomatically associated to the `CaffeineCacheManager`. Since the `CacheLoader` is going\nto be associated with _all_ caches managed by the cache manager, it must be defined as\n`CacheLoader<Object, Object>`. The auto-configuration ignores any other generic type.\n\n\n\n[[boot-features-caching-provider-simple]]\n==== Simple\nIf none of the other providers can be found, a simple implementation using a\n`ConcurrentHashMap` as the cache store is configured. This is the default if no caching\nlibrary is present in your application. By default, caches are created as needed, but you\ncan restrict the list of available caches by setting the `cache-names` property. For\ninstance, if you want only `cache1` and `cache2` caches, set the `cache-names` property\nas follows:\n\n[source,properties,indent=0]\n----\n\tspring.cache.cache-names=cache1,cache2\n----\n\nIf you do so and your application uses a cache not listed, then it fails at runtime when\nthe cache is needed, but not on startup. This is similar to the way the "real" cache\nproviders behave if you use an undeclared cache.\n\n\n[[boot-features-caching-provider-none]]\n==== None\nWhen `@EnableCaching` is present in your configuration, a suitable cache configuration is\nexpected as well. If you need to disable caching altogether in certain environments,\nforce the cache type to `none` to use a no-op implementation, as shown in the following\nexample:\n\n[source,properties,indent=0]\n----\n\tspring.cache.type=none\n----\n\n\n\n[[boot-features-messaging]]\n== Messaging\nThe Spring Framework provides extensive support for integrating with messaging systems,\nfrom simplified use of the JMS API using `JmsTemplate` to a complete infrastructure to\nreceive messages asynchronously. Spring AMQP provides a similar feature set for the\nAdvanced Message Queuing Protocol. Spring Boot also provides auto-configuration\noptions for `RabbitTemplate` and RabbitMQ. Spring WebSocket natively includes support for\nSTOMP messaging, and Spring Boot has support for that through starters and a small amount\nof auto-configuration. Spring Boot also has support for Apache Kafka.\n\n\n\n[[boot-features-jms]]\n=== JMS\nThe `javax.jms.ConnectionFactory` interface provides a standard method of creating a\n`javax.jms.Connection` for interacting with a JMS broker. Although Spring needs a\n`ConnectionFactory` to work with JMS, you generally need not use it directly yourself and\ncan instead rely on higher level messaging abstractions. (See the\n{spring-reference}integration.html#jms[relevant section] of the Spring Framework\nreference documentation for details.) Spring Boot also auto-configures the necessary\ninfrastructure to send and receive messages.\n\n\n\n[[boot-features-activemq]]\n==== ActiveMQ Support\nWhen http://activemq.apache.org/[ActiveMQ] is available on the classpath, Spring Boot can\nalso configure a `ConnectionFactory`. If the broker is present, an embedded broker is\nautomatically started and configured (provided no broker URL is specified through\nconfiguration).\n\nNOTE: If you use `spring-boot-starter-activemq`, the necessary dependencies to connect or\nembed an ActiveMQ instance are provided, as is the Spring infrastructure to integrate with\nJMS.\n\nActiveMQ configuration is controlled by external configuration properties in\n`+spring.activemq.*+`. For example, you might declare the following section in\n`application.properties`:\n\n[source,properties,indent=0]\n----\n\tspring.activemq.broker-url=tcp://192.168.1.210:9876\n\tspring.activemq.user=admin\n\tspring.activemq.password=secret\n----\n\nYou can also pool JMS resources by adding a dependency to\n`org.apache.activemq:activemq-pool` and configuring the `PooledConnectionFactory`\naccordingly, as shown in the following example:\n\n[source,properties,indent=0]\n----\n\tspring.activemq.pool.enabled=true\n\tspring.activemq.pool.max-connections=50\n----\n\nWARNING: `PooledConnectionFactory` is not JMS 2.0 compliant\n\nTIP: See\n{sc-spring-boot-autoconfigure}/jms/activemq/ActiveMQProperties.{sc-ext}[`ActiveMQProperties`]\nfor more of the supported options. You can also register an arbitrary number of beans\nthat implement `ActiveMQConnectionFactoryCustomizer` for more advanced customizations.\n\nBy default, ActiveMQ creates a destination if it does not yet exist so that destinations\nare resolved against their provided names.\n\n\n\n[[boot-features-artemis]]\n==== Artemis Support\nSpring Boot can auto-configure a `ConnectionFactory` when it detects that\nhttp://activemq.apache.org/artemis/[Artemis] is available on the classpath. If the broker\nis present, an embedded broker is automatically started and configured (unless the mode\nproperty has been explicitly set). The supported modes are `embedded` (to make explicit\nthat an embedded broker is required and that an error should occur if the broker is not\navailable on the classpath) and `native` (to connect to a broker using the `netty`\ntransport protocol). When the latter is configured, Spring Boot configures a\n`ConnectionFactory` that connects to a broker running on the local machine with the\ndefault settings.\n\nNOTE: If you use `spring-boot-starter-artemis`, the necessary dependencies to\nconnect to an existing Artemis instance are provided, as well as the Spring\ninfrastructure to integrate with JMS. Adding `org.apache.activemq:artemis-jms-server` to\nyour application lets you use embedded mode.\n\nArtemis configuration is controlled by external configuration properties in\n`+spring.artemis.*+`. For example, you might declare the following section in\n`application.properties`:\n\n[source,properties,indent=0]\n----\n\tspring.artemis.mode=native\n\tspring.artemis.host=192.168.1.210\n\tspring.artemis.port=9876\n\tspring.artemis.user=admin\n\tspring.artemis.password=secret\n----\n\nWhen embedding the broker, you can choose if you want to enable persistence and list the\ndestinations that should be made available. These can be specified as a comma-separated\nlist to create them with the default options, or you can define bean(s) of type\n`org.apache.activemq.artemis.jms.server.config.JMSQueueConfiguration` or\n`org.apache.activemq.artemis.jms.server.config.TopicConfiguration`, for advanced queue\nand topic configurations, respectively.\n\nSee\n{sc-spring-boot-autoconfigure}/jms/artemis/ArtemisProperties.{sc-ext}[`ArtemisProperties`]\nfor more supported options.\n\nNo JNDI lookup is involved, and destinations are resolved against their names, using\neither the `name` attribute in the Artemis configuration or the names provided through\nconfiguration.\n\n\n\n[[boot-features-jms-jndi]]\n==== Using a JNDI ConnectionFactory\nIf you are running your application in an application server, Spring Boot tries to\nlocate a JMS `ConnectionFactory` by using JNDI. By default, the `java:/JmsXA` and\n`java:/XAConnectionFactory` location are checked. You can use the `spring.jms.jndi-name`\nproperty if you need to specify an alternative location, as shown in the following\nexample:\n\n[source,properties,indent=0]\n----\n\tspring.jms.jndi-name=java:/MyConnectionFactory\n----\n\n\n\n[[boot-features-using-jms-sending]]\n==== Sending a Message\nSpring\'s `JmsTemplate` is auto-configured, and you can autowire it directly into your own\nbeans, as shown in the following example:\n\n[source,java,indent=0]\n----\n\timport org.springframework.beans.factory.annotation.Autowired;\n\timport org.springframework.jms.core.JmsTemplate;\n\timport org.springframework.stereotype.Component;\n\n\t@Component\n\tpublic class MyBean {\n\n\t\tprivate final JmsTemplate jmsTemplate;\n\n\t\t@Autowired\n\t\tpublic MyBean(JmsTemplate jmsTemplate) {\n\t\t\tthis.jmsTemplate = jmsTemplate;\n\t\t}\n\n\t\t// ...\n\n\t}\n----\n\nNOTE: {spring-javadoc}/jms/core/JmsMessagingTemplate.{dc-ext}[`JmsMessagingTemplate`] can\nbe injected in a similar manner. If a `DestinationResolver` or a `MessageConverter` bean\nis defined, it is associated automatically to the auto-configured `JmsTemplate`.\n\n\n[[boot-features-using-jms-receiving]]\n==== Receiving a Message\nWhen the JMS infrastructure is present, any bean can be annotated with `@JmsListener` to\ncreate a listener endpoint. If no `JmsListenerContainerFactory` has been defined, a\ndefault one is configured automatically. If a `DestinationResolver` or a\n`MessageConverter` beans is defined, it is associated automatically to the default\nfactory.\n\nBy default, the default factory is transactional. If you run in an infrastructure where a\n`JtaTransactionManager` is present, it is associated to the listener container by default.\nIf not, the `sessionTransacted` flag is enabled. In that latter scenario, you can\nassociate your local data store transaction to the processing of an incoming message by\nadding `@Transactional` on your listener method (or a delegate thereof). This ensures that\nthe incoming message is acknowledged, once the local transaction has completed. This also\nincludes sending response messages that have been performed on the same JMS session.\n\nThe following component creates a listener endpoint on the `someQueue` destination:\n\n[source,java,indent=0]\n----\n\t@Component\n\tpublic class MyBean {\n\n\t\t@JmsListener(destination = "someQueue")\n\t\tpublic void processMessage(String content) {\n\t\t\t// ...\n\t\t}\n\n\t}\n----\n\nTIP: See {spring-javadoc}/jms/annotation/EnableJms.{dc-ext}[the Javadoc of `@EnableJms`]\nfor more details.\n\nIf you need to create more `JmsListenerContainerFactory` instances or if you want to\noverride the default, Spring Boot provides a\n`DefaultJmsListenerContainerFactoryConfigurer` that you can use to initialize a\n`DefaultJmsListenerContainerFactory` with the same settings as the one that is\nauto-configured.\n\nFor instance, the following example exposes another factory that uses a specific\n`MessageConverter`:\n\n[source,java,indent=0]\n----\n\t@Configuration\n\tstatic class JmsConfiguration {\n\n\t\t@Bean\n\t\tpublic DefaultJmsListenerContainerFactory myFactory(\n\t\t\t\tDefaultJmsListenerContainerFactoryConfigurer configurer) {\n\t\t\tDefaultJmsListenerContainerFactory factory =\n\t\t\t\t\tnew DefaultJmsListenerContainerFactory();\n\t\t\tconfigurer.configure(factory, connectionFactory());\n\t\t\tfactory.setMessageConverter(myMessageConverter());\n\t\t\treturn factory;\n\t\t}\n\n\t}\n----\n\nThen you can use the factory in any `@JmsListener`-annotated method as follows:\n\n[source,java,indent=0]\n[subs="verbatim,quotes"]\n----\n\t@Component\n\tpublic class MyBean {\n\n\t\t@JmsListener(destination = "someQueue", **containerFactory="myFactory"**)\n\t\tpublic void processMessage(String content) {\n\t\t\t// ...\n\t\t}\n\n\t}\n----\n\n\n[[boot-features-amqp]]\n=== AMQP\nThe Advanced Message Queuing Protocol (AMQP) is a platform-neutral, wire-level protocol\nfor message-oriented middleware. The Spring AMQP project applies core Spring concepts to\nthe development of AMQP-based messaging solutions. Spring Boot offers several conveniences\nfor working with AMQP through RabbitMQ, including the `spring-boot-starter-amqp`\n"`Starter`".\n\n\n\n[[boot-features-rabbitmq]]\n==== RabbitMQ support\nhttps://www.rabbitmq.com/[RabbitMQ] is a lightweight, reliable, scalable, and portable\nmessage broker based on the AMQP protocol. Spring uses `RabbitMQ` to communicate through\nthe AMQP protocol.\n\nRabbitMQ configuration is controlled by external configuration properties in\n`+spring.rabbitmq.*+`. For example, you might declare the following section in\n`application.properties`:\n\n[source,properties,indent=0]\n----\n\tspring.rabbitmq.host=localhost\n\tspring.rabbitmq.port=5672\n\tspring.rabbitmq.username=admin\n\tspring.rabbitmq.password=secret\n----\n\nIf a `ConnectionNameStrategy` bean exists in the context, it will be automatically used to\nname connections created by the auto-configured `ConnectionFactory`. See\n{sc-spring-boot-autoconfigure}/amqp/RabbitProperties.{sc-ext}[`RabbitProperties`] for more\nof the supported options.\n\nTIP: See\nhttps://spring.io/blog/2010/06/14/understanding-amqp-the-protocol-used-by-rabbitmq/[Understanding\nAMQP, the protocol used by RabbitMQ] for more details.\n\n\n\n[[boot-features-using-amqp-sending]]\n==== Sending a Message\nSpring\'s `AmqpTemplate` and `AmqpAdmin` are auto-configured, and you can autowire them\ndirectly into your own beans, as shown in the following example:\n\n[source,java,indent=0]\n----\n\timport org.springframework.amqp.core.AmqpAdmin;\n\timport org.springframework.amqp.core.AmqpTemplate;\n\timport org.springframework.beans.factory.annotation.Autowired;\n\timport org.springframework.stereotype.Component;\n\n\t@Component\n\tpublic class MyBean {\n\n\t\tprivate final AmqpAdmin amqpAdmin;\n\t\tprivate final AmqpTemplate amqpTemplate;\n\n\t\t@Autowired\n\t\tpublic MyBean(AmqpAdmin amqpAdmin, AmqpTemplate amqpTemplate) {\n\t\t\tthis.amqpAdmin = amqpAdmin;\n\t\t\tthis.amqpTemplate = amqpTemplate;\n\t\t}\n\n\t\t// ...\n\n\t}\n----\n\nNOTE: {spring-amqp-javadoc}/rabbit/core/RabbitMessagingTemplate.{dc-ext}[`RabbitMessagingTemplate`]\ncan be injected in a similar manner. If a `MessageConverter` bean is defined, it is\nassociated automatically to the auto-configured `AmqpTemplate`.\n\nIf necessary, any `org.springframework.amqp.core.Queue` that is defined as a bean is\nautomatically used to declare a corresponding queue on the RabbitMQ instance.\n\nTo retry operations, you can enable retries on the `AmqpTemplate` (for example, in the\nevent that the broker connection is lost). Retries are disabled by default.\n\n\n\n[[boot-features-using-amqp-receiving]]\n==== Receiving a Message\nWhen the Rabbit infrastructure is present, any bean can be annotated with\n`@RabbitListener` to create a listener endpoint. If no `RabbitListenerContainerFactory`\nhas been defined, a default `SimpleRabbitListenerContainerFactory` is automatically\nconfigured and you can switch to a direct container using the\n`spring.rabbitmq.listener.type` property.  If a `MessageConverter` or a `MessageRecoverer`\nbean is defined, it is automatically associated with the default factory.\n\nThe following sample component creates a listener endpoint on the `someQueue` queue:\n\n[source,java,indent=0]\n----\n\t@Component\n\tpublic class MyBean {\n\n\t\t@RabbitListener(queues = "someQueue")\n\t\tpublic void processMessage(String content) {\n\t\t\t// ...\n\t\t}\n\n\t}\n----\n\nTIP: See {spring-amqp-javadoc}/rabbit/annotation/EnableRabbit.{dc-ext}[the Javadoc of\n`@EnableRabbit`] for more details.\n\nIf you need to create more `RabbitListenerContainerFactory` instances or if you want to\noverride the default, Spring Boot provides a\n`SimpleRabbitListenerContainerFactoryConfigurer` and a\n`DirectRabbitListenerContainerFactoryConfigurer` that you can use to initialize a\n`SimpleRabbitListenerContainerFactory` and a `DirectRabbitListenerContainerFactory` with\nthe same settings as the factories used by the auto-configuration.\n\nTIP: It does not matter which container type you chose. Those two beans are exposed by\nthe auto-configuration.\n\nFor instance, the following configuration class exposes another factory that uses a\nspecific `MessageConverter`:\n\n[source,java,indent=0]\n----\n\t@Configuration\n\tstatic class RabbitConfiguration {\n\n\t\t@Bean\n\t\tpublic SimpleRabbitListenerContainerFactory myFactory(\n\t\t\t\tSimpleRabbitListenerContainerFactoryConfigurer configurer) {\n\t\t\tSimpleRabbitListenerContainerFactory factory =\n\t\t\t\t\tnew SimpleRabbitListenerContainerFactory();\n\t\t\tconfigurer.configure(factory, connectionFactory);\n\t\t\tfactory.setMessageConverter(myMessageConverter());\n\t\t\treturn factory;\n\t\t}\n\n\t}\n----\n\nThen you can use the factory in any `@RabbitListener`-annotated method, as follows:\n\n[source,java,indent=0]\n[subs="verbatim,quotes"]\n----\n\t@Component\n\tpublic class MyBean {\n\n\t\t@RabbitListener(queues = "someQueue", **containerFactory="myFactory"**)\n\t\tpublic void processMessage(String content) {\n\t\t\t// ...\n\t\t}\n\n\t}\n----\n\nYou can enable retries to handle situations where your listener throws an exception. By\ndefault, `RejectAndDontRequeueRecoverer` is used, but you can define a `MessageRecoverer`\nof your own. When retries are exhausted, the message is rejected and either dropped or\nrouted to a dead-letter exchange if the broker is configured to do so. By default,\nretries are disabled.\n\nIMPORTANT: By default, if retries are disabled and the listener throws an exception, the\ndelivery is retried indefinitely. You can modify this behavior in two ways: Set the\n`defaultRequeueRejected` property to `false` so that zero re-deliveries are attempted or\nthrow an `AmqpRejectAndDontRequeueException` to signal the message should be rejected.\nThe latter is the mechanism used when retries are enabled and the maximum number of\ndelivery attempts is reached.\n\n\n\n[[boot-features-kafka]]\n=== Apache Kafka Support\nhttp://kafka.apache.org/[Apache Kafka] is supported by providing auto-configuration of\nthe `spring-kafka` project.\n\nKafka configuration is controlled by external configuration properties in\n`spring.kafka.*`. For example, you might declare the following section in\n`application.properties`:\n\n[source,properties,indent=0]\n----\n\tspring.kafka.bootstrap-servers=localhost:9092\n\tspring.kafka.consumer.group-id=myGroup\n----\n\nTIP: To create a topic on startup, add a bean of type `NewTopic`. If the topic already\nexists, the bean is ignored.\n\nSee {sc-spring-boot-autoconfigure}/kafka/KafkaProperties.{sc-ext}[`KafkaProperties`]\nfor more supported options.\n\n\n\n[[boot-features-kafka-sending-a-message]]\n==== Sending a Message\nSpring\'s `KafkaTemplate` is auto-configured, and you can autowire it directly in your own\nbeans, as shown in the following example:\n\n[source,java,indent=0]\n----\n@Component\npublic class MyBean {\n\n\tprivate final KafkaTemplate kafkaTemplate;\n\n\t@Autowired\n\tpublic MyBean(KafkaTemplate kafkaTemplate) {\n\t\tthis.kafkaTemplate = kafkaTemplate;\n\t}\n\n\t// ...\n\n}\n----\n\nNOTE: If the property `spring.kafka.producer.transaction-id-prefix` is defined, a\n`KafkaTransactionManager` is automatically configured. Also, if a `RecordMessageConverter`\nbean is defined, it is automatically associated to the auto-configured `KafkaTemplate`.\n\n\n[[boot-features-kafka-receiving-a-message]]\n==== Receiving a Message\nWhen the Apache Kafka infrastructure is present, any bean can be annotated with\n`@KafkaListener` to create a listener endpoint. If no `KafkaListenerContainerFactory` has\nbeen defined, a default one is automatically configured with keys defined in\n`spring.kafka.listener.*`. Also, if a `RecordMessageConverter` bean is defined, it is\nautomatically associated to the default factory.\n\nThe following component creates a listener endpoint on the `someTopic` topic:\n\n[source,java,indent=0]\n----\n\t@Component\n\tpublic class MyBean {\n\n\t\t@KafkaListener(topics = "someTopic")\n\t\tpublic void processMessage(String content) {\n\t\t\t// ...\n\t\t}\n\n\t}\n----\n\n\n\n[[boot-features-kafka-extra-props]]\n==== Additional Kafka Properties\nThe properties supported by auto configuration are shown in\n<<common-application-properties>>. Note that, for the most part, these properties\n(hyphenated or camelCase) map directly to the Apache Kafka dotted properties. Refer to the\nApache Kafka documentation for details.\n\nThe first few of these properties apply to both producers and consumers but can be\nspecified at the producer or consumer level if you wish to use different values for each.\nApache Kafka designates properties with an importance of HIGH, MEDIUM, or LOW. Spring Boot\nauto-configuration supports all HIGH importance properties, some selected MEDIUM and LOW\nproperties, and any properties that do not have a default value.\n\nOnly a subset of the properties supported by Kafka are available through the\n`KafkaProperties` class. If you wish to configure the producer or consumer with additional\nproperties that are not directly supported, use the following properties:\n\n[source,properties,indent=0]\n----\n\tspring.kafka.properties.prop.one=first\n\tspring.kafka.admin.properties.prop.two=second\n\tspring.kafka.consumer.properties.prop.three=third\n\tspring.kafka.producer.properties.prop.four=fourth\n----\n\nThis sets the common `prop.one` Kafka property to `first` (applies to producers,\nconsumers and admins), the `prop.two` admin property to `second`, the `prop.three`\nconsumer property to `third` and the `prop.four` producer property to `fourth`.\n\nYou can also configure the Spring Kafka `JsonDeserializer` as follows:\n\n[source,properties,indent=0]\n----\nspring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer\nspring.kafka.consumer.properties.spring.json.value.default.type=com.example.Invoice\nspring.kafka.consumer.properties.spring.json.trusted.packages=com.example,org.acme\n----\n\nSimilarly, you can disable the `JsonSerializer` default behavior of sending type\ninformation in headers:\n\n[source,properties,indent=0]\n----\nspring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer\nspring.kafka.producer.properties.spring.json.add.type.headers=false\n----\n\nIMPORTANT: Properties set in this way override any configuration item that Spring Boot\nexplicitly supports.\n\n[[boot-features-resttemplate]]\n== Calling REST Services with `RestTemplate`\nIf you need to call remote REST services from your application, you can use the Spring\nFramework\'s {spring-javadoc}/web/client/RestTemplate.html[`RestTemplate`] class. Since\n`RestTemplate` instances often need to be customized before being used, Spring Boot does\nnot provide any single auto-configured `RestTemplate` bean. It does, however,\nauto-configure a `RestTemplateBuilder`, which can be used to create `RestTemplate`\ninstances when needed. The auto-configured `RestTemplateBuilder` ensures that sensible\n`HttpMessageConverters` are applied to `RestTemplate` instances.\n\nThe following code shows a typical example:\n\n[source,java,indent=0]\n----\n\t@Service\n\tpublic class MyService {\n\n\t\tprivate final RestTemplate restTemplate;\n\n\t\tpublic MyService(RestTemplateBuilder restTemplateBuilder) {\n\t\t\tthis.restTemplate = restTemplateBuilder.build();\n\t\t}\n\n\t\tpublic Details someRestCall(String name) {\n\t\t\treturn this.restTemplate.getForObject("/{name}/details", Details.class, name);\n\t\t}\n\n\t}\n----\n\nTIP: `RestTemplateBuilder` includes a number of useful methods that can be used to\nquickly configure a `RestTemplate`. For example, to add BASIC auth support, you can use\n`builder.basicAuthorization("user", "password").build()`.\n\n\n\n[[boot-features-resttemplate-customization]]\n=== RestTemplate Customization\nThere are three main approaches to `RestTemplate` customization, depending on how broadly\nyou want the customizations to apply.\n\nTo make the scope of any customizations as narrow as possible, inject the auto-configured\n`RestTemplateBuilder` and then call its methods as required. Each method call returns a\nnew `RestTemplateBuilder` instance, so the customizations only affect this use of the\nbuilder.\n\nTo make an application-wide, additive customization, use a `RestTemplateCustomizer` bean.\nAll such beans are automatically registered with the auto-configured `RestTemplateBuilder`\nand are applied to any templates that are built with it.\n\nThe following example shows a customizer that configures the use of a proxy for all hosts\nexcept `192.168.0.5`:\n\n[source,java,indent=0]\n----\ninclude::{code-examples}/web/client/RestTemplateProxyCustomizationExample.java[tag=customizer]\n----\n\nFinally, the most extreme (and rarely used) option is to create your own\n`RestTemplateBuilder` bean. Doing so switches off the auto-configuration of a\n`RestTemplateBuilder` and prevents any `RestTemplateCustomizer` beans from being used.\n\n\n\n[[boot-features-webclient]]\n== Calling REST Services with `WebClient`\nIf you have Spring WebFlux on your classpath, you can also choose to use `WebClient` to\ncall remote REST services. Compared to `RestTemplate`, this client has a more functional\nfeel and is fully reactive. You can create your own client instance with the builder,\n`WebClient.create()`. See the {spring-reference}web.html#web-reactive-client[relevant\nsection on WebClient].\n\nSpring Boot creates and pre-configures such a builder for you. For example, client HTTP\ncodecs are configured in the same fashion as the server ones (see\n<<boot-features-webflux-httpcodecs,WebFlux HTTP codecs auto-configuration>>).\n\nThe following code shows a typical example:\n\n[source,java,indent=0]\n----\n\t@Service\n\tpublic class MyService {\n\n\t\tprivate final WebClient webClient;\n\n\t\tpublic MyService(WebClient.Builder webClientBuilder) {\n\t\t\tthis.webClient = webClientBuilder.baseUrl("http://example.org").build();\n\t\t}\n\n\t\tpublic Mono<Details> someRestCall(String name) {\n\t\t\treturn this.webClient.get().uri("/{name}/details", name)\n\t\t\t\t\t\t\t.retrieve().bodyToMono(Details.class);\n\t\t}\n\n\t}\n----\n\n\n\n[[boot-features-webclient-customization]]\n=== WebClient Customization\nThere are three main approaches to `WebClient` customization, depending on how broadly you\nwant the customizations to apply.\n\nTo make the scope of any customizations as narrow as possible, inject the auto-configured\n`WebClient.Builder` and then call its methods as required. `WebClient.Builder` instances\nare stateful: Any change on the builder is reflected in all clients subsequently created\nwith it. If you want to create several clients with the same builder, you can also\nconsider cloning the builder with `WebClient.Builder other = builder.clone();`.\n\nTo make an application-wide, additive customization to all `WebClient.Builder` instances,\nyou can declare `WebClientCustomizer` beans and change the `WebClient.Builder` locally at\nthe point of injection.\n\nFinally, you can fall back to the original API and use `WebClient.create()`. In that case,\nno auto-configuration or `WebClientCustomizer` is applied.\n\n\n\n[[boot-features-validation]]\n== Validation\nThe method validation feature supported by Bean Validation 1.1 is automatically enabled\nas long as a JSR-303 implementation (such as Hibernate validator) is on the classpath.\nThis lets bean methods be annotated with `javax.validation` constraints on their\nparameters and/or on their return value. Target classes with such annotated methods need\nto be annotated with the `@Validated` annotation at the type level for their methods to\nbe searched for inline constraint annotations.\n\nFor instance, the following service triggers the validation of the first argument, making\nsure its size is between 8 and 10:\n\n[source,java,indent=0]\n----\n\t@Service\n\t@Validated\n\tpublic class MyBean {\n\n\t\tpublic Archive findByCodeAndAuthor(@Size(min = 8, max = 10) String code,\n\t\t\t\tAuthor author) {\n\t\t\t...\n\t\t}\n\n\t}\n----\n\n\n\n[[boot-features-email]]\n== Sending Email\nThe Spring Framework provides an easy abstraction for sending email by using the\n`JavaMailSender` interface, and Spring Boot provides auto-configuration for it as well as\na starter module.\n\nTIP: See the {spring-reference}integration.html#mail[reference documentation] for a\ndetailed explanation of how you can use `JavaMailSender`.\n\nIf `spring.mail.host` and the relevant libraries (as defined by\n`spring-boot-starter-mail`) are available, a default `JavaMailSender` is created if none\nexists. The sender can be further customized by configuration items from the\n`spring.mail` namespace. See\n{sc-spring-boot-autoconfigure}/mail/MailProperties.{sc-ext}[`MailProperties`] for more\ndetails.\n\nIn particular, certain default timeout values are infinite, and you may want to change\nthat to avoid having a thread blocked by an unresponsive mail server, as shown in the\nfollowing example:\n\n[source,properties,indent=0]\n----\n\tspring.mail.properties.mail.smtp.connectiontimeout=5000\n\tspring.mail.properties.mail.smtp.timeout=3000\n\tspring.mail.properties.mail.smtp.writetimeout=5000\n----\n\nIt is also possible to configure a `JavaMailSender` with an existing `Session` from JNDI:\n\n[source,properties,indent=0]\n----\n\tspring.mail.jndi-name=mail/Session\n----\n\nWhen a `jndi-name` is set, it takes precedence over all other Session-related settings.\n\n\n\n[[boot-features-jta]]\n== Distributed Transactions with JTA\nSpring Boot supports distributed JTA transactions across multiple XA resources by using\neither an http://www.atomikos.com/[Atomikos] or https://github.com/bitronix/btm[Bitronix]\nembedded transaction manager. JTA transactions are also supported when deploying to a\nsuitable Java EE Application Server.\n\nWhen a JTA environment is detected, Spring\'s `JtaTransactionManager` is used to manage\ntransactions. Auto-configured JMS, DataSource, and JPA beans are upgraded to support XA\ntransactions. You can use standard Spring idioms, such as `@Transactional`, to participate\nin a distributed transaction. If you are within a JTA environment and still want to use\nlocal transactions, you can set the `spring.jta.enabled` property to `false` to disable\nthe JTA auto-configuration.\n\n\n\n[[boot-features-jta-atomikos]]\n=== Using an Atomikos Transaction Manager\nhttps://www.atomikos.com/[Atomikos] is a popular open source transaction manager which can\nbe embedded into your Spring Boot application. You can use the\n`spring-boot-starter-jta-atomikos` Starter to pull in the appropriate Atomikos libraries.\nSpring Boot auto-configures Atomikos and ensures that appropriate `depends-on` settings\nare applied to your Spring beans for correct startup and shutdown ordering.\n\nBy default, Atomikos transaction logs are written to a `transaction-logs` directory in\nyour application\'s home directory (the directory in which your application jar file\nresides). You can customize the location of this directory by setting a\n`spring.jta.log-dir` property in your `application.properties` file. Properties starting\nwith `spring.jta.atomikos.properties` can also be used to customize the Atomikos\n`UserTransactionServiceImp`. See the\n{dc-spring-boot}/jta/atomikos/AtomikosProperties.{dc-ext}[`AtomikosProperties` Javadoc]\nfor complete details.\n\nNOTE: To ensure that multiple transaction managers can safely coordinate the same\nresource managers, each Atomikos instance must be configured with a unique ID. By default,\nthis ID is the IP address of the machine on which Atomikos is running. To ensure\nuniqueness in production, you should configure the `spring.jta.transaction-manager-id`\nproperty with a different value for each instance of your application.\n\n\n\n[[boot-features-jta-bitronix]]\n=== Using a Bitronix Transaction Manager\nhttps://github.com/bitronix/btm[Bitronix] is a popular open-source JTA transaction\nmanager implementation. You can use the `spring-boot-starter-jta-bitronix` starter to add\nthe appropriate Bitronix dependencies to your project. As with Atomikos, Spring Boot\nautomatically configures Bitronix and post-processes your beans to ensure that startup and\nshutdown ordering is correct.\n\nBy default, Bitronix transaction log files (`part1.btm` and `part2.btm`) are written to\na `transaction-logs` directory in your application home directory. You can customize the\nlocation of this directory by setting the `spring.jta.log-dir` property. Properties\nstarting with `spring.jta.bitronix.properties` are also bound to the\n`bitronix.tm.Configuration` bean, allowing for complete customization. See the\nhttps://github.com/bitronix/btm/wiki/Transaction-manager-configuration[Bitronix\ndocumentation] for details.\n\nNOTE: To ensure that multiple transaction managers can safely coordinate the same\nresource managers, each Bitronix instance must be configured with a unique ID. By default,\nthis ID is the IP address of the machine on which Bitronix is running. To ensure\nuniqueness in production, you should configure the `spring.jta.transaction-manager-id`\nproperty with a different value for each instance of your application.\n\n\n\n[[boot-features-jta-narayana]]\n=== Using a Narayana Transaction Manager\nhttp://narayana.io/[Narayana] is a popular open source JTA transaction manager\nimplementation supported by JBoss. You can use the `spring-boot-starter-jta-narayana`\nstarter to add the appropriate Narayana dependencies to your project. As with Atomikos and\nBitronix, Spring Boot automatically configures Narayana and post-processes your beans to\nensure that startup and shutdown ordering is correct.\n\nBy default, Narayana transaction logs are written to a `transaction-logs` directory in\nyour application home directory (the directory in which your application jar file\nresides). You can customize the location of this directory by setting a\n`spring.jta.log-dir` property in your `application.properties` file. Properties starting\nwith `spring.jta.narayana.properties` can also be used to customize the Narayana\nconfiguration. See the\n{dc-spring-boot}/jta/narayana/NarayanaProperties.{dc-ext}[`NarayanaProperties` Javadoc]\nfor complete details.\n\nNOTE: To ensure that multiple transaction managers can safely coordinate the same\nresource managers, each Narayana instance must be configured with a unique ID. By\ndefault, this ID is set to `1`. To ensure uniqueness in production, you should configure\nthe `spring.jta.transaction-manager-id` property with a different value for each instance\nof your application.\n\n\n\n[[boot-features-jta-javaee]]\n=== Using a Java EE Managed Transaction Manager\nIf you package your Spring Boot application as a `war` or `ear` file and deploy it to a\nJava EE application server, you can use your application server\'s built-in transaction\nmanager. Spring Boot tries to auto-configure a transaction manager by looking at common\nJNDI locations (`java:comp/UserTransaction`, `java:comp/TransactionManager`, and so on).\nIf you use a transaction service provided by your application server, you generally also\nwant to ensure that all resources are managed by the server and exposed over JNDI. Spring\nBoot tries to auto-configure JMS by looking for a `ConnectionFactory` at the JNDI path\n(`java:/JmsXA` or `java:/XAConnectionFactory`), and you can use the\n<<boot-features-connecting-to-a-jndi-datasource, `spring.datasource.jndi-name` property>>\nto configure your `DataSource`.\n\n\n\n[[boot-features-jta-mixed-jms]]\n=== Mixing XA and Non-XA JMS Connections\nWhen using JTA, the primary JMS `ConnectionFactory` bean is XA-aware and participates\nin distributed transactions. In some situations, you might want to process certain JMS\nmessages by using a non-XA `ConnectionFactory`. For example, your JMS processing logic\nmight take longer than the XA timeout.\n\nIf you want to use a non-XA `ConnectionFactory`, you can inject the\n`nonXaJmsConnectionFactory` bean rather than the `@Primary` `jmsConnectionFactory` bean.\nFor consistency, the `jmsConnectionFactory` bean is also provided by using the bean alias\n`xaJmsConnectionFactory`.\n\nThe following example shows how to inject `ConnectionFactory` instances:\n\n[source,java,indent=0,subs="verbatim,quotes,attributes"]\n----\n\t// Inject the primary (XA aware) ConnectionFactory\n\t@Autowired\n\tprivate ConnectionFactory defaultConnectionFactory;\n\n\t// Inject the XA aware ConnectionFactory (uses the alias and injects the same as above)\n\t@Autowired\n\t@Qualifier("xaJmsConnectionFactory")\n\tprivate ConnectionFactory xaConnectionFactory;\n\n\t// Inject the non-XA aware ConnectionFactory\n\t@Autowired\n\t@Qualifier("nonXaJmsConnectionFactory")\n\tprivate ConnectionFactory nonXaConnectionFactory;\n----\n\n\n\n[[boot-features-jta-supporting-alternative-embedded]]\n=== Supporting an Alternative Embedded Transaction Manager\nThe {sc-spring-boot}/jms/XAConnectionFactoryWrapper.{sc-ext}[`XAConnectionFactoryWrapper`]\nand {sc-spring-boot}/jdbc/XADataSourceWrapper.{sc-ext}[`XADataSourceWrapper`] interfaces\ncan be used to support alternative embedded transaction managers. The interfaces are\nresponsible for wrapping `XAConnectionFactory` and `XADataSource` beans and exposing them\nas regular `ConnectionFactory` and `DataSource` beans, which transparently enroll in the\ndistributed transaction. DataSource and JMS auto-configuration use JTA variants, provided\nyou have a `JtaTransactionManager` bean and appropriate XA wrapper beans registered\nwithin your `ApplicationContext`.\n\nThe {sc-spring-boot}/jta/bitronix/BitronixXAConnectionFactoryWrapper.{sc-ext}[BitronixXAConnectionFactoryWrapper]\nand {sc-spring-boot}/jta/bitronix/BitronixXADataSourceWrapper.{sc-ext}[BitronixXADataSourceWrapper]\nprovide good examples of how to write XA wrappers.\n\n\n\n[[boot-features-hazelcast]]\n== Hazelcast\n\nIf https://hazelcast.com/[Hazelcast] is on the classpath and a suitable configuration is\nfound, Spring Boot auto-configures a `HazelcastInstance` that you can inject in your\napplication.\n\nIf you define a `com.hazelcast.config.Config` bean, Spring Boot uses that. If your\nconfiguration defines an instance name, Spring Boot tries to locate an existing instance\nrather than creating a new one.\n\nYou could also specify the `hazelcast.xml` configuration file to use through\nconfiguration, as shown in the following example:\n\n[source,properties,indent=0]\n----\n\tspring.hazelcast.config=classpath:config/my-hazelcast.xml\n----\n\nOtherwise, Spring Boot tries to find the Hazelcast configuration from the default\nlocations: `hazelcast.xml` in the working directory or at the root of the classpath. We\nalso check if the `hazelcast.config` system property is set. See the\nhttp://docs.hazelcast.org/docs/latest/manual/html-single/[Hazelcast documentation] for\nmore details.\n\nIf `hazelcast-client` is present on the classpath, Spring Boot first attempts to create a\nclient by checking the following configuration options:\n\n* The presence of a `com.hazelcast.client.config.ClientConfig` bean.\n* A configuration file defined by the `spring.hazelcast.config` property.\n* The presence of the `hazelcast.client.config` system property.\n* A `hazelcast-client.xml` in the working directory or at the root of the classpath.\n\nNOTE: Spring Boot also has\n<<boot-features-caching-provider-hazelcast,explicit caching support for Hazelcast>>. If\ncaching is enabled, the `HazelcastInstance` is automatically wrapped in a `CacheManager`\nimplementation.\n\n\n\n[[boot-features-quartz]]\n== Quartz Scheduler\nSpring Boot offers several conveniences for working with the\nhttp://www.quartz-scheduler.org/[Quartz scheduler], including the\n`spring-boot-starter-quartz` "`Starter`". If Quartz is available, a `Scheduler` is\nauto-configured (through the `SchedulerFactoryBean` abstraction).\n\nBeans of the following types are automatically picked up and associated with the\n`Scheduler`:\n\n* `JobDetail`: defines a particular Job. `JobDetail` instances can be built with the\n`JobBuilder` API.\n* `Calendar`.\n* `Trigger`: defines when a particular job is triggered.\n\nBy default, an in-memory `JobStore` is used. However, it is possible to configure a\nJDBC-based store if a `DataSource` bean is available in your application and if the\n`spring.quartz.job-store-type` property is configured accordingly, as shown in the\nfollowing example:\n\n[source,properties,indent=0]\n----\n\tspring.quartz.job-store-type=jdbc\n----\n\nWhen the JDBC store is used, the schema can be initialized on startup, as shown in the\nfollowing example:\n\n[source,properties,indent=0]\n----\n\tspring.quartz.jdbc.initialize-schema=always\n----\n\nWARNING: By default, the database is detected and initialized by using the standard scripts\nprovided with the Quartz library. These scripts drop existing tables, deleting all triggers\non every restart. It is also possible to provide a custom script by setting the\n`spring.quartz.jdbc.schema` property.\n\nTo have Quartz use a `DataSource` other than the application\'s main `DataSource`, declare\na `DataSource` bean, annotating its `@Bean` method with `@QuartzDataSource`. Doing so\nensures that the Quartz-specific `DataSource` is used by both the `SchedulerFactoryBean`\nand for schema initialization.\n\nQuartz Scheduler configuration can be customized by using Quartz configuration properties\n()`spring.quartz.properties.*`) and `SchedulerFactoryBeanCustomizer` beans, which allow\nprogrammatic `SchedulerFactoryBean` customization.\n\nNOTE: In particular, an `Executor` bean is not associated with the scheduler as Quartz\noffers a way to configure the scheduler via `spring.quartz.properties`. If you need\nto customize the task executor, consider implementing `SchedulerFactoryBeanCustomizer`.\n\nJobs can define setters to inject data map properties. Regular beans can also be injected\nin a similar manner, as shown in the following example:\n\n[source,java,indent=0]\n----\n\tpublic class SampleJob extends QuartzJobBean {\n\n\t\tprivate MyService myService;\n\n\t\tprivate String name;\n\n\t\t// Inject "MyService" bean\n\t\tpublic void setMyService(MyService myService) { ... }\n\n\t\t// Inject the "name" job data property\n\t\tpublic void setName(String name) { ... }\n\n\t\t@Override\n\t\tprotected void executeInternal(JobExecutionContext context)\n\t\t\t\tthrows JobExecutionException {\n\t\t\t...\n\t\t}\n\n\t}\n----\n\n\n\n[[boot-features-integration]]\n== Spring Integration\nSpring Boot offers several conveniences for working with {spring-integration}[Spring\nIntegration], including the `spring-boot-starter-integration` "`Starter`". Spring\nIntegration provides abstractions over messaging and also other transports such as HTTP,\nTCP, and others. If Spring Integration is available on your classpath, it is initialized\nthrough the `@EnableIntegration` annotation.\n\nSpring Boot also configures some features that are triggered by the presence of additional\nSpring Integration modules. If `spring-integration-jmx` is also on the classpath,\nmessage processing statistics are published over JMX . If `spring-integration-jdbc` is\navailable, the default database schema can be created on startup, as shown in the\nfollowing line:\n\n[source,properties,indent=0]\n----\n\tspring.integration.jdbc.initialize-schema=always\n----\n\nSee the\n{sc-spring-boot-autoconfigure}/integration/IntegrationAutoConfiguration.{sc-ext}[`IntegrationAutoConfiguration`]\nand {sc-spring-boot-autoconfigure}/integration/IntegrationProperties.{sc-ext}[`IntegrationProperties`]\nclasses for more details.\n\nBy default, if a Micrometer `meterRegistry` bean is present, Spring Integration metrics\nwill be managed by Micrometer. If you wish to use legacy Spring Integration metrics, add\na `DefaultMetricsFactory` bean to the application context.\n\n\n\n[[boot-features-session]]\n== Spring Session\nSpring Boot provides {spring-session}[Spring Session] auto-configuration for a wide range\nof data stores. When building a Servlet web application, the following stores can be\nauto-configured:\n\n* JDBC\n* Redis\n* Hazelcast\n* MongoDB\n\nWhen building a reactive web application, the following stores can be auto-configured:\n\n* Redis\n* MongoDB\n\nIf a single Spring Session module is present on the classpath, Spring Boot uses that store\nimplementation automatically. If you have more than one implementation, you must choose\nthe {sc-spring-boot-autoconfigure}/session/StoreType.{sc-ext}[`StoreType`] that you wish\nto use to store the sessions. For instance, to use JDBC as the back-end store, you can\nconfigure your application as follows:\n\n[source,properties,indent=0]\n----\n    spring.session.store-type=jdbc\n----\n\nTIP: You can disable Spring Session by setting the `store-type` to `none`.\n\nEach store has specific additional settings. For instance, it is possible to customize\nthe name of the table for the JDBC store, as shown in the following example:\n\n[source,properties,indent=0]\n----\n    spring.session.jdbc.table-name=SESSIONS\n----\n\nFor setting the timeout of the session you can use the `spring.session.timeout` property.\nIf that property is not set, the auto-configuration falls back to the value of\n`server.servlet.session.timeout`.\n\n[[boot-features-jmx]]\n== Monitoring and Management over JMX\nJava Management Extensions (JMX) provide a standard mechanism to monitor and manage\napplications. By default, Spring Boot creates an `MBeanServer` bean with an ID of\n`mbeanServer` and exposes any of your beans that are annotated with Spring JMX\nannotations (`@ManagedResource`, `@ManagedAttribute`, or `@ManagedOperation`).\n\nSee the\n{sc-spring-boot-autoconfigure}/jmx/JmxAutoConfiguration.{sc-ext}[`JmxAutoConfiguration`]\nclass for more details.\n\n\n\n[[boot-features-testing]]\n== Testing\nSpring Boot provides a number of utilities and annotations to help when testing your\napplication. Test support is provided by two modules: `spring-boot-test` contains core\nitems, and `spring-boot-test-autoconfigure` supports auto-configuration for tests.\n\nMost developers use the `spring-boot-starter-test` "`Starter`", which imports both Spring\nBoot test modules as well as JUnit, AssertJ, Hamcrest, and a number of other useful\nlibraries.\n\n\n\n[[boot-features-test-scope-dependencies]]\n=== Test Scope Dependencies\nThe `spring-boot-starter-test` "`Starter`" (in the `test` `scope`) contains\nthe following provided libraries:\n\n* http://junit.org[JUnit]: The de-facto standard for unit testing Java applications.\n* {spring-reference}testing.html#integration-testing[Spring Test] & Spring Boot Test:\nUtilities and integration test support for Spring Boot applications.\n* http://joel-costigliola.github.io/assertj/[AssertJ]: A fluent assertion library.\n* http://hamcrest.org/JavaHamcrest/[Hamcrest]: A library of matcher objects (also known\nas constraints or predicates).\n* http://mockito.org/[Mockito]: A Java mocking framework.\n* https://github.com/skyscreamer/JSONassert[JSONassert]: An assertion library for JSON.\n* https://github.com/jayway/JsonPath[JsonPath]: XPath for JSON.\n\nWe generally find these common libraries to be useful when writing tests. If these\nlibraries do not suit your needs, you can add additional test dependencies of your own.\n\n\n\n[[boot-features-testing-spring-applications]]\n=== Testing Spring Applications\nOne of the major advantages of dependency injection is that it should make your code\neasier to unit test. You can instantiate objects by using the `new` operator without\neven involving Spring. You can also use _mock objects_ instead of real dependencies.\n\nOften, you need to move beyond unit testing and start integration testing (with\na Spring `ApplicationContext`). It is useful to be able to perform integration testing\nwithout requiring deployment of your application or needing to connect to other\ninfrastructure.\n\nThe Spring Framework includes a dedicated test module for such integration testing. You\ncan declare a dependency directly to `org.springframework:spring-test` or use the\n`spring-boot-starter-test` "`Starter`" to pull it in transitively.\n\nIf you have not used the `spring-test` module before, you should start by reading the\n{spring-reference}testing.html#testing[relevant section] of the Spring Framework\nreference documentation.\n\n\n\n[[boot-features-testing-spring-boot-applications]]\n=== Testing Spring Boot Applications\nA Spring Boot application is a Spring `ApplicationContext`, so nothing very special has\nto be done to test it beyond what you would normally do with a vanilla Spring context.\n\nNOTE: External properties, logging, and other features of Spring Boot are installed in the\ncontext by default only if you use `SpringApplication` to create it.\n\nSpring Boot provides a `@SpringBootTest` annotation, which can be used as an alternative\nto the standard `spring-test` `@ContextConfiguration` annotation when you need Spring\nBoot features. The annotation works by\n<<boot-features-testing-spring-boot-applications-detecting-config,creating the\n`ApplicationContext` used in your tests through `SpringApplication`>>. In addition to\n`@SpringBootTest` a number of other annotations are also provided for\n<<boot-features-testing-spring-boot-applications-testing-autoconfigured-tests,testing more\nspecific slices>> of an application.\n\nTIP: Don\'t forget to also add `@RunWith(SpringRunner.class)` to your test, otherwise\nthe annotations will be ignored.\n\nBy default, `@SpringBootTest` will not start a server. You can use the `webEnvironment`\nattribute of `@SpringBootTest` to further refine how your tests run:\n\n* `MOCK`(Default) : Loads a web `ApplicationContext` and provides a mock web\nenvironment. Embedded servers are not started when using this annotation. If a web\nenvironment is not available on your classpath, this mode transparently falls back to\ncreating a regular non-web `ApplicationContext`. It can be used in conjunction with\n<<boot-features-testing-spring-boot-applications-testing-with-mock-environment,\n`@AutoConfigureMockMvc` or `@AutoConfigureWebTestClient`>> for mock-based testing of your\nweb application.\n* `RANDOM_PORT`: Loads a `WebServerApplicationContext` and provides a real web\nenvironment. Embedded servers are started and listen on a random port.\n* `DEFINED_PORT`: Loads a `WebServerApplicationContext` and provides a real web\nenvironment. Embedded servers  are started and listen on a defined port (from your\n`application.properties` or on the default port of `8080`).\n* `NONE`: Loads an `ApplicationContext` by using `SpringApplication` but does not provide\n_any_ web environment (mock or otherwise).\n\nNOTE: If your test is `@Transactional`, it rolls back the transaction at the end of each\ntest method by default. However, as using this arrangement with either `RANDOM_PORT` or\n`DEFINED_PORT` implicitly provides a real servlet environment, the HTTP client and server\nrun in separate threads and, thus, in separate transactions. Any transaction initiated on\nthe server does not roll back in this case.\n\n\n\n[[boot-features-testing-spring-boot-applications-detecting-web-app-type]]\n==== Detecting Web Application Type\nIf Spring MVC is available, a regular MVC-based application context is configured. If you\nhave only Spring WebFlux, we\'ll detect that and configure a WebFlux-based application\ncontext instead.\n\nIf both are present, Spring MVC takes precedence. If you want to test a reactive web\napplication in this scenario, you must set the `spring.main.web-application-type`\nproperty:\n\n[source,java,indent=0]\n----\n\t@RunWith(SpringRunner.class)\n\t@SpringBootTest(properties = "spring.main.web-application-type=reactive")\n\tpublic class MyWebFluxTests { ... }\n----\n\n\n\n[[boot-features-testing-spring-boot-applications-detecting-config]]\n==== Detecting Test Configuration\nIf you are familiar with the Spring Test Framework, you may be used to using\n`@ContextConfiguration(classes=...)` in order to specify which Spring `@Configuration` to\nload. Alternatively, you might have often used nested `@Configuration` classes within\nyour test.\n\nWhen testing Spring Boot applications, this is often not required. Spring Boot\'s `@*Test`\nannotations search for your primary configuration automatically whenever you do not\nexplicitly define one.\n\nThe search algorithm works up from the package that contains the test until it finds a\nclass annotated with `@SpringBootApplication` or `@SpringBootConfiguration`. As long as\nyou <<using-boot-structuring-your-code, structured your code>> in a sensible way, your\nmain configuration is usually found.\n\n[NOTE]\n====\nIf you use a\n<<boot-features-testing-spring-boot-applications-testing-autoconfigured-tests, test\nannotation to test a more specific slice of your application>>, you should avoid adding\nconfiguration settings that are specific to a particular area on the\n<<boot-features-testing-spring-boot-applications-testing-user-configuration, main\nmethod\'s application class>>.\n\nThe underlying component scan configuration of `@SpringBootApplication` defines exclude\nfilters that are used to make sure slicing works as expected. If you are using an explicit\n`@ComponentScan` directive on your `@SpringBootApplication`-annotated class, be aware that\nthose filters will be disabled. If you are using slicing, you should define them again.\n====\n\nIf you want to customize the primary configuration, you can use a nested\n`@TestConfiguration` class. Unlike a nested `@Configuration` class, which would be used\ninstead of your application\'s primary configuration, a nested `@TestConfiguration` class\nis used in addition to your application\'s primary configuration.\n\nNOTE: Spring\'s test framework caches application contexts between tests. Therefore, as\nlong as your tests share the same configuration (no matter how it is discovered), the\npotentially time-consuming process of loading the context happens only once.\n\n\n\n[[boot-features-testing-spring-boot-applications-excluding-config]]\n==== Excluding Test Configuration\nIf your application uses component scanning (for example, if you use\n`@SpringBootApplication` or `@ComponentScan`), you may find top-level configuration\nclasses that you created only for specific tests accidentally get picked up everywhere.\n\nAs we <<boot-features-testing-spring-boot-applications-detecting-config,have seen\nearlier>>, `@TestConfiguration` can be used on an inner class of a test to customize the\nprimary configuration. When placed on a top-level class, `@TestConfiguration` indicates\nthat classes in `src/test/java` should not be picked up by scanning. You can then import\nthat class explicitly where it is required, as shown in the following example:\n\n[source,java,indent=0]\n----\n\t@RunWith(SpringRunner.class)\n\t@SpringBootTest\n\t@Import(MyTestsConfiguration.class)\n\tpublic class MyTests {\n\n\t\t@Test\n\t\tpublic void exampleTest() {\n\t\t\t...\n\t\t}\n\n\t}\n----\n\nNOTE: If you directly use `@ComponentScan` (that is, not through\n`@SpringBootApplication`) you need to register the `TypeExcludeFilter` with it. See\n{dc-spring-boot}/context/TypeExcludeFilter.{dc-ext}[the Javadoc] for details.\n\n\n[[boot-features-testing-spring-boot-applications-testing-with-mock-environment]]\n==== Testing with a mock environment\nBy default, `@SpringBootTest` does not start the server. If you have web endpoints that\nyou want to test against this mock environment, you can additionally configure\n{spring-reference}/testing.html#spring-mvc-test-framework[`MockMvc`] as shown in the\nfollowing example:\n\n[source,java,indent=0]\n----\ninclude::{code-examples}/test/web/MockMvcExampleTests.java[tag=test-mock-mvc]\n----\n\nTIP: If you want to focus only on the web layer and not start a complete\n`ApplicationContext`, consider\n<<boot-features-testing-spring-boot-applications-testing-autoconfigured-mvc-tests,using\n`@WebMvcTest` instead>>.\n\nAlternatively, you can configure a\n{spring-reference}testing.html#webtestclient-tests[`WebTestClient`] as shown in the\nfollowing example:\n\n[source,java,indent=0]\n----\ninclude::{code-examples}/test/web/MockWebTestClientExampleTests.java[tag=test-mock-web-test-client]\n----\n\n\n\n[[boot-features-testing-spring-boot-applications-testing-with-running-server]]\n==== Testing with a running server\nIf you need to start a full running server, we recommend that you use random ports.\nIf you use `@SpringBootTest(webEnvironment=WebEnvironment.RANDOM_PORT)`, an\navailable port is picked at random each time your test runs.\n\nThe `@LocalServerPort` annotation can be used to\n<<howto-discover-the-http-port-at-runtime,inject the actual port used>> into your test.\nFor convenience, tests that need to make REST calls to the started server can\nadditionally `@Autowire` a\n{spring-reference}testing.html#webtestclient-tests[`WebTestClient`], which resolves\nrelative links to the running server and comes with a dedicated API for verifying\nresponses, as shown in the following example:\n\n[source,java,indent=0]\n----\ninclude::{code-examples}/test/web/RandomPortWebTestClientExampleTests.java[tag=test-random-port]\n----\n\nThis setup requires `spring-webflux` on the classpath. If you can\'t or won\'t add webflux,\nSpring Boot also provides a `TestRestTemplate` facility:\n\n[source,java,indent=0]\n----\ninclude::{code-examples}/test/web/RandomPortTestRestTemplateExampleTests.java[tag=test-random-port]\n----\n\n\n\n[[boot-features-testing-spring-boot-applications-jmx]]\n==== Using JMX\nAs the test context framework caches context, JMX is disabled by default to prevent\nidentical components to register on the same domain. If such test needs access to an\n`MBeanServer`, consider marking it dirty as well:\n\n[source,java,indent=0]\n----\ninclude::{test-examples}/jmx/SampleJmxTests.java[tag=test]\n----\n\n\n\n[[boot-features-testing-spring-boot-applications-mocking-beans]]\n==== Mocking and Spying Beans\nWhen running tests, it is sometimes necessary to mock certain components within your\napplication context. For example, you may have a facade over some remote service that is\nunavailable during development. Mocking can also be useful when you want to simulate\nfailures that might be hard to trigger in a real environment.\n\nSpring Boot includes a `@MockBean` annotation that can be used to define a Mockito mock\nfor a bean inside your `ApplicationContext`. You can use the annotation to add new beans\nor replace a single existing bean definition. The annotation can be used directly on test\nclasses, on fields within your test, or on `@Configuration` classes and fields. When used\non a field, the instance of the created mock is also injected. Mock beans are\nautomatically reset after each test method.\n\n[NOTE]\n====\nIf your test uses one of Spring Boot\'s test annotations (such as `@SpringBootTest`), this\nfeature is automatically enabled. To use this feature with a different\narrangement, a listener must be explicitly added, as shown in the following example:\n\n[source,java,indent=0]\n----\n\t@TestExecutionListeners(MockitoTestExecutionListener.class)\n----\n\n====\n\nThe following example replaces an existing `RemoteService` bean with a mock\nimplementation:\n\n[source,java,indent=0]\n----\n\timport org.junit.*;\n\timport org.junit.runner.*;\n\timport org.springframework.beans.factory.annotation.*;\n\timport org.springframework.boot.test.context.*;\n\timport org.springframework.boot.test.mock.mockito.*;\n\timport org.springframework.test.context.junit4.*;\n\n\timport static org.assertj.core.api.Assertions.*;\n\timport static org.mockito.BDDMockito.*;\n\n\t@RunWith(SpringRunner.class)\n\t@SpringBootTest\n\tpublic class MyTests {\n\n\t\t@MockBean\n\t\tprivate RemoteService remoteService;\n\n\t\t@Autowired\n\t\tprivate Reverser reverser;\n\n\t\t@Test\n\t\tpublic void exampleTest() {\n\t\t\t// RemoteService has been injected into the reverser bean\n\t\t\tgiven(this.remoteService.someCall()).willReturn("mock");\n\t\t\tString reverse = reverser.reverseSomeCall();\n\t\t\tassertThat(reverse).isEqualTo("kcom");\n\t\t}\n\n\t}\n----\n\nAdditionally, you can use `@SpyBean` to wrap any existing bean with a Mockito `spy`. See\nthe {dc-spring-boot-test}/mock/mockito/SpyBean.{dc-ext}[Javadoc] for full details.\n\nNOTE: While Spring\'s test framework caches application contexts between tests and reuses\na context for tests sharing the same configuration, the use of `@MockBean` or `@SpyBean`\ninfluences the cache key, which will most likely increase the number of contexts.\n\nTIP: If you are using `@SpyBean` to spy on a bean with `@Cacheable` methods that refer\nto parameters by name, your application must be compiled with `-parameters`. This\nensures that the parameter names are available to the caching infrastructure once the\nbean has been spied upon.\n\n\n\n[[boot-features-testing-spring-boot-applications-testing-autoconfigured-tests]]\n==== Auto-configured Tests\nSpring Boot\'s auto-configuration system works well for applications but can sometimes be\na little too much for tests. It often helps to load only the parts of the configuration\nthat are required to test a "`slice`" of your application. For example, you might want to\ntest that Spring MVC controllers are mapping URLs correctly, and you do not want to\ninvolve database calls in those tests, or you might want to test JPA entities, and you\nare not interested in the web layer when those tests run.\n\nThe `spring-boot-test-autoconfigure` module includes a number of annotations that can be\nused to automatically configure such "`slices`". Each of them works in a similar way,\nproviding a `@...Test` annotation that loads the `ApplicationContext` and one or\nmore `@AutoConfigure...` annotations that can be used to customize auto-configuration\nsettings.\n\nNOTE: Each slice restricts component scan to appropriate components and loads a very\nrestricted set of auto-configuration classes. If you need to exclude one of them,\nmost `@...Test` annotations provide an `excludeAutoConfiguration` attribute.\nAlternatively, you can use `@ImportAutoConfiguration#exclude`.\n\nTIP: It is also possible to use the `@AutoConfigure...` annotations with the standard\n`@SpringBootTest` annotation. You can use this combination if you are not interested in\n"`slicing`" your application but you want some of the auto-configured test beans.\n\n\n\n[[boot-features-testing-spring-boot-applications-testing-autoconfigured-json-tests]]\n==== Auto-configured JSON Tests\nTo test that object JSON serialization and deserialization is working as expected, you can\nuse the `@JsonTest` annotation. `@JsonTest` auto-configures the available supported JSON\nmapper, which can be one of the following libraries:\n\n* Jackson `ObjectMapper`, any `@JsonComponent` beans and any Jackson ``Module``s\n* `Gson`\n* `Jsonb`\n\nTIP: A list of the auto-configurations that are enabled by `@JsonTest` can be\n<<appendix-test-auto-configuration#test-auto-configuration,found in the appendix>>.\n\nIf you need to configure elements of the auto-configuration, you can use the\n`@AutoConfigureJsonTesters` annotation.\n\nSpring Boot includes AssertJ-based helpers that work with the JSONAssert and JsonPath\nlibraries to check that JSON appears as expected. The `JacksonTester`, `GsonTester`,\n`JsonbTester`, and `BasicJsonTester` classes can be used for Jackson, Gson, Jsonb, and\nStrings respectively. Any helper fields on the test class can be `@Autowired` when using\n`@JsonTest`. The following example shows a test class for Jackson:\n\n[source,java,indent=0]\n----\n\timport org.junit.*;\n\timport org.junit.runner.*;\n\timport org.springframework.beans.factory.annotation.*;\n\timport org.springframework.boot.test.autoconfigure.json.*;\n\timport org.springframework.boot.test.context.*;\n\timport org.springframework.boot.test.json.*;\n\timport org.springframework.test.context.junit4.*;\n\n\timport static org.assertj.core.api.Assertions.*;\n\n\t@RunWith(SpringRunner.class)\n\t@JsonTest\n\tpublic class MyJsonTests {\n\n\t\t@Autowired\n\t\tprivate JacksonTester<VehicleDetails> json;\n\n\t\t@Test\n\t\tpublic void testSerialize() throws Exception {\n\t\t\tVehicleDetails details = new VehicleDetails("Honda", "Civic");\n\t\t\t// Assert against a `.json` file in the same package as the test\n\t\t\tassertThat(this.json.write(details)).isEqualToJson("expected.json");\n\t\t\t// Or use JSON path based assertions\n\t\t\tassertThat(this.json.write(details)).hasJsonPathStringValue("@.make");\n\t\t\tassertThat(this.json.write(details)).extractingJsonPathStringValue("@.make")\n\t\t\t\t\t.isEqualTo("Honda");\n\t\t}\n\n\t\t@Test\n\t\tpublic void testDeserialize() throws Exception {\n\t\t\tString content = "{\\"make\\":\\"Ford\\",\\"model\\":\\"Focus\\"}";\n\t\t\tassertThat(this.json.parse(content))\n\t\t\t\t\t.isEqualTo(new VehicleDetails("Ford", "Focus"));\n\t\t\tassertThat(this.json.parseObject(content).getMake()).isEqualTo("Ford");\n\t\t}\n\n\t}\n----\n\nNOTE: JSON helper classes can also be used directly in standard unit tests. To do so,\ncall the `initFields` method of the helper in your `@Before` method if you do not use\n`@JsonTest`.\n\n\n\n[[boot-features-testing-spring-boot-applications-testing-autoconfigured-mvc-tests]]\n==== Auto-configured Spring MVC Tests\nTo test whether Spring MVC controllers are working as expected, use the `@WebMvcTest`\nannotation. `@WebMvcTest` auto-configures the Spring MVC infrastructure and limits\nscanned beans to `@Controller`, `@ControllerAdvice`, `@JsonComponent`, `Converter`,\n`GenericConverter`, `Filter`, `WebMvcConfigurer`, and `HandlerMethodArgumentResolver`.\nRegular `@Component` beans are not scanned when using this annotation.\n\nTIP: A list of the auto-configuration settings that are enabled by `@WebMvcTest` can be\n<<appendix-test-auto-configuration#test-auto-configuration,found in the appendix>>.\n\nTIP: If you need to register extra components, such as the Jackson `Module`, you can\nimport additional configuration classes by using `@Import` on your test.\n\nOften, `@WebMvcTest` is limited to a single controller and is used in combination with\n`@MockBean` to provide mock implementations for required collaborators.\n\n`@WebMvcTest` also auto-configures `MockMvc`. Mock MVC offers a powerful way to quickly\ntest MVC controllers without needing to start a full HTTP server.\n\nTIP: You can also auto-configure `MockMvc` in a non-`@WebMvcTest` (such as\n`@SpringBootTest`) by annotating it with `@AutoConfigureMockMvc`. The following example\nuses `MockMvc`:\n\n[source,java,indent=0]\n----\n\timport org.junit.*;\n\timport org.junit.runner.*;\n\timport org.springframework.beans.factory.annotation.*;\n\timport org.springframework.boot.test.autoconfigure.web.servlet.*;\n\timport org.springframework.boot.test.mock.mockito.*;\n\n\timport static org.assertj.core.api.Assertions.*;\n\timport static org.mockito.BDDMockito.*;\n\timport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\n\timport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n\n\t@RunWith(SpringRunner.class)\n\t@WebMvcTest(UserVehicleController.class)\n\tpublic class MyControllerTests {\n\n\t\t@Autowired\n\t\tprivate MockMvc mvc;\n\n\t\t@MockBean\n\t\tprivate UserVehicleService userVehicleService;\n\n\t\t@Test\n\t\tpublic void testExample() throws Exception {\n\t\t\tgiven(this.userVehicleService.getVehicleDetails("sboot"))\n\t\t\t\t\t.willReturn(new VehicleDetails("Honda", "Civic"));\n\t\t\tthis.mvc.perform(get("/sboot/vehicle").accept(MediaType.TEXT_PLAIN))\n\t\t\t\t\t.andExpect(status().isOk()).andExpect(content().string("Honda Civic"));\n\t\t}\n\n\t}\n----\n\nTIP: If you need to configure elements of the auto-configuration (for example, when\nservlet filters should be applied) you can use attributes in the `@AutoConfigureMockMvc`\nannotation.\n\nIf you use HtmlUnit or Selenium, auto-configuration also provides an HTMLUnit `WebClient`\nbean and/or a `WebDriver` bean. The following example uses HtmlUnit:\n\n\n[source,java,indent=0]\n----\n\timport com.gargoylesoftware.htmlunit.*;\n\timport org.junit.*;\n\timport org.junit.runner.*;\n\timport org.springframework.beans.factory.annotation.*;\n\timport org.springframework.boot.test.autoconfigure.web.servlet.*;\n\timport org.springframework.boot.test.mock.mockito.*;\n\n\timport static org.assertj.core.api.Assertions.*;\n\timport static org.mockito.BDDMockito.*;\n\n\t@RunWith(SpringRunner.class)\n\t@WebMvcTest(UserVehicleController.class)\n\tpublic class MyHtmlUnitTests {\n\n\t\t@Autowired\n\t\tprivate WebClient webClient;\n\n\t\t@MockBean\n\t\tprivate UserVehicleService userVehicleService;\n\n\t\t@Test\n\t\tpublic void testExample() throws Exception {\n\t\t\tgiven(this.userVehicleService.getVehicleDetails("sboot"))\n\t\t\t\t\t.willReturn(new VehicleDetails("Honda", "Civic"));\n\t\t\tHtmlPage page = this.webClient.getPage("/sboot/vehicle.html");\n\t\t\tassertThat(page.getBody().getTextContent()).isEqualTo("Honda Civic");\n\t\t}\n\n\t}\n----\n\nNOTE: By default, Spring Boot puts `WebDriver` beans in a special "`scope`" to ensure\nthat the driver exits after each test and that a new instance is injected. If you do\nnot want this behavior, you can add `@Scope("singleton")` to your `WebDriver` `@Bean`\ndefinition.\n\nWARNING: The `webDriver` scope created by Spring Boot will replace any user defined scope\nof the same name. If you define your own `webDriver` scope you may find it stops working\nwhen you use `@WebMvcTest`.\n\nTIP: Sometimes writing Spring MVC tests is not enough; Spring Boot can help you run\n<<boot-features-testing-spring-boot-applications-testing-with-running-server,\nfull end-to-end tests with an actual server>>.\n\n\n\n[[boot-features-testing-spring-boot-applications-testing-autoconfigured-webflux-tests]]\n==== Auto-configured Spring WebFlux Tests\nTo test that {spring-reference}/web-reactive.html[Spring WebFlux] controllers are\nworking as expected, you can use the `@WebFluxTest` annotation. `@WebFluxTest`\nauto-configures the Spring WebFlux infrastructure and limits scanned beans to\n`@Controller`, `@ControllerAdvice`, `@JsonComponent`, `Converter`, `GenericConverter`, and\n`WebFluxConfigurer`. Regular `@Component` beans are not scanned when the `@WebFluxTest`\nannotation is used.\n\nTIP: A list of the auto-configurations that are enabled by `@WebFluxTest` can be\n<<appendix-test-auto-configuration#test-auto-configuration,found in the appendix>>.\n\nTIP: If you need to register extra components, such as Jackson `Module`, you can import\nadditional configuration classes using `@Import` on your test.\n\nOften, `@WebFluxTest` is limited to a single controller and used in combination with the\n`@MockBean` annotation to provide mock implementations for required collaborators.\n\n`@WebFluxTest` also auto-configures\n{spring-reference}testing.html#webtestclient[`WebTestClient`], which offers\na powerful way to quickly test WebFlux controllers without needing to start a full HTTP\nserver.\n\nTIP: You can also auto-configure `WebTestClient` in a non-`@WebFluxTest` (such as\n`@SpringBootTest`) by annotating it with `@AutoConfigureWebTestClient`. The following\nexample shows a class that uses both `@WebFluxTest` and a `WebTestClient`:\n\n[source,java,indent=0]\n----\n\timport org.junit.Test;\n\timport org.junit.runner.RunWith;\n\n\timport org.springframework.beans.factory.annotation.Autowired;\n\timport org.springframework.boot.test.autoconfigure.web.reactive.WebFluxTest;\n\timport org.springframework.http.MediaType;\n\timport org.springframework.test.context.junit4.SpringRunner;\n\timport org.springframework.test.web.reactive.server.WebTestClient;\n\n\t@RunWith(SpringRunner.class)\n\t@WebFluxTest(UserVehicleController.class)\n\tpublic class MyControllerTests {\n\n\t\t@Autowired\n\t\tprivate WebTestClient webClient;\n\n\t\t@MockBean\n\t\tprivate UserVehicleService userVehicleService;\n\n\t\t@Test\n\t\tpublic void testExample() throws Exception {\n\t\t\tgiven(this.userVehicleService.getVehicleDetails("sboot"))\n\t\t\t\t\t.willReturn(new VehicleDetails("Honda", "Civic"));\n\t\t\tthis.webClient.get().uri("/sboot/vehicle").accept(MediaType.TEXT_PLAIN)\n\t\t\t\t\t.exchange()\n\t\t\t\t\t.expectStatus().isOk()\n\t\t\t\t\t.expectBody(String.class).isEqualTo("Honda Civic");\n\t\t}\n\n\t}\n----\n\nTIP: This setup is only supported by WebFlux applications as using `WebTestClient` in a\nmocked web application only works with WebFlux at the moment.\n\nNOTE: `@WebFluxTest` cannot detect routes registered via the functional web framework. For\ntesting `RouterFunction` beans in the context, consider importing your `RouterFunction`\nyourself via `@Import` or using `@SpringBootTest`.\n\nTIP: Sometimes writing Spring WebFlux tests is not enough; Spring Boot can help you run\n<<boot-features-testing-spring-boot-applications-testing-with-running-server,\nfull end-to-end tests with an actual server>>.\n\n\n\n[[boot-features-testing-spring-boot-applications-testing-autoconfigured-jpa-test]]\n==== Auto-configured Data JPA Tests\nYou can use the `@DataJpaTest` annotation to test JPA applications. By default, it\nconfigures an in-memory embedded database, scans for `@Entity` classes, and configures\nSpring Data JPA repositories. Regular `@Component` beans are not loaded into the\n`ApplicationContext`.\n\nTIP: A list of the auto-configuration settings that are enabled by `@DataJpaTest` can be\n<<appendix-test-auto-configuration#test-auto-configuration,found in the appendix>>.\n\nBy default, data JPA tests are transactional and roll back at the end of each test. See\nthe {spring-reference}testing.html#testcontext-tx-enabling-transactions[relevant section]\nin the Spring Framework Reference Documentation for more details. If that is not what you\nwant, you can disable transaction management for a test or for the whole class as\nfollows:\n\n[source,java,indent=0]\n----\n\timport org.junit.Test;\n\timport org.junit.runner.RunWith;\n\timport org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n\timport org.springframework.test.context.junit4.SpringRunner;\n\timport org.springframework.transaction.annotation.Propagation;\n\timport org.springframework.transaction.annotation.Transactional;\n\n\t@RunWith(SpringRunner.class)\n\t@DataJpaTest\n\t@Transactional(propagation = Propagation.NOT_SUPPORTED)\n\tpublic class ExampleNonTransactionalTests {\n\n\t}\n----\n\nData JPA tests may also inject a\n{sc-spring-boot-test-autoconfigure}/orm/jpa/TestEntityManager.{sc-ext}[`TestEntityManager`]\nbean, which provides an alternative to the standard JPA `EntityManager` that is\nspecifically designed for tests. If you want to use `TestEntityManager` outside of\n`@DataJpaTest` instances, you can also use the `@AutoConfigureTestEntityManager`\nannotation. A `JdbcTemplate` is also available if you need that. The following example\nshows the `@DataJpaTest` annotation in use:\n\n[source,java,indent=0]\n----\n\timport org.junit.*;\n\timport org.junit.runner.*;\n\timport org.springframework.boot.test.autoconfigure.orm.jpa.*;\n\n\timport static org.assertj.core.api.Assertions.*;\n\n\t@RunWith(SpringRunner.class)\n\t@DataJpaTest\n\tpublic class ExampleRepositoryTests {\n\n\t\t@Autowired\n\t\tprivate TestEntityManager entityManager;\n\n\t\t@Autowired\n\t\tprivate UserRepository repository;\n\n\t\t@Test\n\t\tpublic void testExample() throws Exception {\n\t\t\tthis.entityManager.persist(new User("sboot", "1234"));\n\t\t\tUser user = this.repository.findByUsername("sboot");\n\t\t\tassertThat(user.getUsername()).isEqualTo("sboot");\n\t\t\tassertThat(user.getVin()).isEqualTo("1234");\n\t\t}\n\n\t}\n----\n\nIn-memory embedded databases generally work well for tests, since they are fast and do\nnot require any installation. If, however, you prefer to run tests against a real\ndatabase you can use the `@AutoConfigureTestDatabase` annotation, as shown in the\nfollowing example:\n\n[source,java,indent=0]\n----\n\t@RunWith(SpringRunner.class)\n\t@DataJpaTest\n\t@AutoConfigureTestDatabase(replace=Replace.NONE)\n\tpublic class ExampleRepositoryTests {\n\n\t\t// ...\n\n\t}\n----\n\n\n\n[[boot-features-testing-spring-boot-applications-testing-autoconfigured-jdbc-test]]\n==== Auto-configured JDBC Tests\n`@JdbcTest` is similar to `@DataJpaTest` but is for tests that only require a\n`DataSource`. By default, it configures an in-memory embedded database and a\n`JdbcTemplate`. Regular `@Component` beans are not loaded into the `ApplicationContext`.\n\nTIP: A list of the auto-configurations that are enabled by `@JdbcTest` can be\n<<appendix-test-auto-configuration#test-auto-configuration,found in the appendix>>.\n\nBy default, JDBC tests are transactional and roll back at the end of each test. See the\n{spring-reference}testing.html#testcontext-tx-enabling-transactions[relevant section] in\nthe Spring Framework Reference Documentation for more details. If that is not what you\nwant, you can disable transaction management for a test or for the whole class, as\nfollows:\n\n[source,java,indent=0]\n----\n\timport org.junit.Test;\n\timport org.junit.runner.RunWith;\n\timport org.springframework.boot.test.autoconfigure.jdbc.JdbcTest;\n\timport org.springframework.test.context.junit4.SpringRunner;\n\timport org.springframework.transaction.annotation.Propagation;\n\timport org.springframework.transaction.annotation.Transactional;\n\n\t@RunWith(SpringRunner.class)\n\t@JdbcTest\n\t@Transactional(propagation = Propagation.NOT_SUPPORTED)\n\tpublic class ExampleNonTransactionalTests {\n\n\t}\n----\n\nIf you prefer your test to run against a real database, you can use the\n`@AutoConfigureTestDatabase` annotation in the same way as for `DataJpaTest`. (See\n"<<boot-features-testing-spring-boot-applications-testing-autoconfigured-jpa-test>>".)\n\n\n\n[[boot-features-testing-spring-boot-applications-testing-autoconfigured-jooq-test]]\n==== Auto-configured jOOQ Tests\nYou can use `@JooqTest` in a similar fashion as `@JdbcTest` but for jOOQ-related tests.\nAs jOOQ relies heavily on a Java-based schema that corresponds with the database schema,\nthe existing `DataSource` is used. If you want to replace it with an in-memory database,\nyou can use `@AutoConfigureTestDatabase` to override those settings. (For more about using\njOOQ with Spring Boot, see "<<boot-features-jooq>>", earlier in this chapter.) Regular\n`@Component` beans are not loaded into the `ApplicationContext`.\n\nTIP: A list of the auto-configurations that are enabled by `@JooqTest` can be\n<<appendix-test-auto-configuration#test-auto-configuration,found in the appendix>>.\n\n`@JooqTest` configures a `DSLContext`. Regular `@Component` beans are not loaded into the\n`ApplicationContext`. The following example shows the `@JooqTest` annotation in use:\n\n[source,java,indent=0]\n----\n\timport org.jooq.DSLContext;\n\timport org.junit.Test;\n\timport org.junit.runner.RunWith;\n\timport org.springframework.boot.test.autoconfigure.jooq.JooqTest;\n\timport org.springframework.test.context.junit4.SpringRunner;\n\n\t@RunWith(SpringRunner.class)\n\t@JooqTest\n\tpublic class ExampleJooqTests {\n\n\t\t@Autowired\n\t\tprivate DSLContext dslContext;\n\t}\n----\n\nJOOQ tests are transactional and roll back at the end of each test by default. If that is\nnot what you want, you can disable transaction management for a test or for the whole\ntest class as\n<<boot-features-testing-spring-boot-applications-testing-autoconfigured-jdbc-test,shown\nin the JDBC example>>.\n\n\n\n\n[[boot-features-testing-spring-boot-applications-testing-autoconfigured-mongo-test]]\n==== Auto-configured Data MongoDB Tests\nYou can use `@DataMongoTest` to test MongoDB applications. By default, it configures an\nin-memory embedded MongoDB (if available), configures a `MongoTemplate`, scans for\n`@Document` classes, and configures Spring Data MongoDB repositories. Regular\n`@Component` beans are not loaded into the `ApplicationContext`. (For more about using\nMongoDB with Spring Boot, see "<<boot-features-mongodb>>", earlier in this chapter.)\n\nTIP: A list of the auto-configuration settings that are enabled by `@DataMongoTest` can be\n<<appendix-test-auto-configuration#test-auto-configuration,found in the appendix>>.\n\nThe following class shows the `@DataMongoTest` annotation in use:\n\n[source,java,indent=0]\n----\n\timport org.junit.runner.RunWith;\n\timport org.springframework.beans.factory.annotation.Autowired;\n\timport org.springframework.boot.test.autoconfigure.data.mongo.DataMongoTest;\n\timport org.springframework.data.mongodb.core.MongoTemplate;\n\timport org.springframework.test.context.junit4.SpringRunner;\n\n\t@RunWith(SpringRunner.class)\n\t@DataMongoTest\n\tpublic class ExampleDataMongoTests {\n\n\t\t@Autowired\n\t\tprivate MongoTemplate mongoTemplate;\n\n\t\t//\n\t}\n----\n\nIn-memory embedded MongoDB generally works well for tests, since it is fast and does not\nrequire any developer installation. If, however, you prefer to run tests against a real\nMongoDB server, you should exclude the embedded MongoDB auto-configuration, as shown in\nthe following example:\n\n[source,java,indent=0]\n----\n\timport org.junit.runner.RunWith;\n  import org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration;\n\timport org.springframework.boot.test.autoconfigure.data.mongo.DataMongoTest;\n\timport org.springframework.test.context.junit4.SpringRunner;\n\n\t@RunWith(SpringRunner.class)\n\t@DataMongoTest(excludeAutoConfiguration = EmbeddedMongoAutoConfiguration.class)\n\tpublic class ExampleDataMongoNonEmbeddedTests {\n\n\t}\n----\n\n\n\n\n[[boot-features-testing-spring-boot-applications-testing-autoconfigured-neo4j-test]]\n==== Auto-configured Data Neo4j Tests\nYou can use `@DataNeo4jTest` to test Neo4j applications. By default, it uses an in-memory\nembedded Neo4j (if the embedded driver is available), scans for `@NodeEntity` classes, and\nconfigures Spring Data Neo4j repositories. Regular `@Component` beans are not loaded into\nthe `ApplicationContext`. (For more about using Neo4J with Spring Boot, see\n"<<boot-features-neo4j>>", earlier in this chapter.)\n\nTIP: A list of the auto-configuration settings that are enabled by `@DataNeo4jTest` can be\n<<appendix-test-auto-configuration#test-auto-configuration,found in the appendix>>.\n\nThe following example shows a typical setup for using Neo4J tests in Spring Boot:\n\n[source,java,indent=0]\n----\n\timport org.junit.runner.RunWith;\n\timport org.springframework.beans.factory.annotation.Autowired;\n\timport org.springframework.boot.test.autoconfigure.data.neo4j.DataNeo4jTest;\n\timport org.springframework.test.context.junit4.SpringRunner;\n\n\t@RunWith(SpringRunner.class)\n\t@DataNeo4jTest\n\tpublic class ExampleDataNeo4jTests {\n\n\t\t@Autowired\n\t\tprivate YourRepository repository;\n\n\t\t//\n\t}\n----\n\nBy default, Data Neo4j tests are transactional and roll back at the end of each test.\nSee the {spring-reference}testing.html#testcontext-tx-enabling-transactions[relevant\nsection] in the Spring Framework Reference Documentation for more details. If that is not\nwhat you want, you can disable transaction management for a test or for the whole class,\nas follows:\n\n[source,java,indent=0]\n----\n\timport org.junit.Test;\n\timport org.junit.runner.RunWith;\n\timport org.springframework.boot.test.autoconfigure.data.neo4j.DataNeo4jTest;\n\timport org.springframework.test.context.junit4.SpringRunner;\n\timport org.springframework.transaction.annotation.Propagation;\n\timport org.springframework.transaction.annotation.Transactional;\n\n\t@RunWith(SpringRunner.class)\n\t@DataNeo4jTest\n\t@Transactional(propagation = Propagation.NOT_SUPPORTED)\n\tpublic class ExampleNonTransactionalTests {\n\n\t}\n----\n\n\n\n\n[[boot-features-testing-spring-boot-applications-testing-autoconfigured-redis-test]]\n==== Auto-configured Data Redis Tests\nYou can use `@DataRedisTest` to test Redis applications. By default, it scans for\n`@RedisHash` classes and configures Spring Data Redis repositories. Regular `@Component`\nbeans are not loaded into the `ApplicationContext`. (For more about using Redis with\nSpring Boot, see "<<boot-features-redis>>", earlier in this chapter.)\n\nTIP: A list of the auto-configuration settings that are enabled by `@DataRedisTest` can be\n<<appendix-test-auto-configuration#test-auto-configuration,found in the appendix>>.\n\nThe following example shows the `@DataRedisTest` annotation in use:\n\n[source,java,indent=0]\n----\n\timport org.junit.runner.RunWith;\n\timport org.springframework.beans.factory.annotation.Autowired;\n\timport org.springframework.boot.test.autoconfigure.data.redis.DataRedisTest;\n\timport org.springframework.test.context.junit4.SpringRunner;\n\n\t@RunWith(SpringRunner.class)\n\t@DataRedisTest\n\tpublic class ExampleDataRedisTests {\n\n\t\t@Autowired\n\t\tprivate YourRepository repository;\n\n\t\t//\n\t}\n----\n\n\n\n[[boot-features-testing-spring-boot-applications-testing-autoconfigured-ldap-test]]\n==== Auto-configured Data LDAP Tests\nYou can use `@DataLdapTest` to test LDAP applications. By default, it configures an\nin-memory embedded LDAP (if available), configures an `LdapTemplate`, scans for `@Entry`\nclasses, and configures Spring Data LDAP repositories. Regular `@Component` beans are not\nloaded into the `ApplicationContext`. (For more about using LDAP with\nSpring Boot, see "<<boot-features-ldap>>", earlier in this chapter.)\n\nTIP: A list of the auto-configuration settings that are enabled by `@DataLdapTest` can be\n<<appendix-test-auto-configuration#test-auto-configuration,found in the appendix>>.\n\nThe following example shows the `@DataLdapTest` annotation in use:\n\n[source,java,indent=0]\n----\n\timport org.junit.runner.RunWith;\n\timport org.springframework.beans.factory.annotation.Autowired;\n\timport org.springframework.boot.test.autoconfigure.data.ldap.DataLdapTest;\n\timport org.springframework.ldap.core.LdapTemplate;\n\timport org.springframework.test.context.junit4.SpringRunner;\n\n\t@RunWith(SpringRunner.class)\n\t@DataLdapTest\n\tpublic class ExampleDataLdapTests {\n\n\t\t@Autowired\n\t\tprivate LdapTemplate ldapTemplate;\n\n\t\t//\n\t}\n----\n\nIn-memory embedded LDAP generally works well for tests, since it is fast and does not\nrequire any developer installation. If, however, you prefer to run tests against a real\nLDAP server, you should exclude the embedded LDAP auto-configuration, as shown in the\nfollowing example:\n\n[source,java,indent=0]\n----\n\timport org.junit.runner.RunWith;\n\timport org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration;\n\timport org.springframework.boot.test.autoconfigure.data.ldap.DataLdapTest;\n\timport org.springframework.test.context.junit4.SpringRunner;\n\n\t@RunWith(SpringRunner.class)\n\t@DataLdapTest(excludeAutoConfiguration = EmbeddedLdapAutoConfiguration.class)\n\tpublic class ExampleDataLdapNonEmbeddedTests {\n\n\t}\n----\n\n\n\n[[boot-features-testing-spring-boot-applications-testing-autoconfigured-rest-client]]\n==== Auto-configured REST Clients\nYou can use the `@RestClientTest` annotation to test REST clients. By default, it\nauto-configures Jackson, GSON, and Jsonb support, configures a `RestTemplateBuilder`, and\nadds support for `MockRestServiceServer`. Regular `@Component` beans are not loaded into\nthe `ApplicationContext`.\n\nTIP: A list of the auto-configuration settings that are enabled by `@RestClientTest` can\nbe <<appendix-test-auto-configuration#test-auto-configuration,found in the appendix>>.\n\nThe specific beans that you want to test should be specified by using the `value` or\n`components` attribute of `@RestClientTest`, as shown in the following example:\n\n[source,java,indent=0]\n----\n\t@RunWith(SpringRunner.class)\n\t@RestClientTest(RemoteVehicleDetailsService.class)\n\tpublic class ExampleRestClientTest {\n\n\t\t@Autowired\n\t\tprivate RemoteVehicleDetailsService service;\n\n\t\t@Autowired\n\t\tprivate MockRestServiceServer server;\n\n\t\t@Test\n\t\tpublic void getVehicleDetailsWhenResultIsSuccessShouldReturnDetails()\n\t\t\t\tthrows Exception {\n\t\t\tthis.server.expect(requestTo("/greet/details"))\n\t\t\t\t\t.andRespond(withSuccess("hello", MediaType.TEXT_PLAIN));\n\t\t\tString greeting = this.service.callRestService();\n\t\t\tassertThat(greeting).isEqualTo("hello");\n\t\t}\n\n\t}\n----\n\n\n\n[[boot-features-testing-spring-boot-applications-testing-autoconfigured-rest-docs]]\n==== Auto-configured Spring REST Docs Tests\nYou can use the `@AutoConfigureRestDocs` annotation to use {spring-rest-docs}[Spring REST\nDocs] in your tests with Mock MVC, REST Assured, or WebTestClient. It removes the need for\nthe JUnit rule in Spring REST Docs.\n\n`@AutoConfigureRestDocs` can be used to override the default output directory\n(`target/generated-snippets` if you are using Maven or `build/generated-snippets` if you\nare using Gradle). It can also be used to configure the host, scheme, and port that\nappears in any documented URIs.\n\n\n\n[[boot-features-testing-spring-boot-applications-testing-autoconfigured-rest-docs-mock-mvc]]\n===== Auto-configured Spring REST Docs Tests with Mock MVC\n`@AutoConfigureRestDocs` customizes the `MockMvc` bean to use Spring REST Docs. You can\ninject it by using `@Autowired` and use it in your tests as you normally would when using\nMock MVC and Spring REST Docs, as shown in the following example:\n\n[source,java,indent=0]\n----\n\timport org.junit.Test;\n\timport org.junit.runner.RunWith;\n\n\timport org.springframework.beans.factory.annotation.Autowired;\n\timport org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n\timport org.springframework.http.MediaType;\n\timport org.springframework.test.context.junit4.SpringRunner;\n\timport org.springframework.test.web.servlet.MockMvc;\n\n\timport static org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.document;\n\timport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n\timport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n\n\t@RunWith(SpringRunner.class)\n\t@WebMvcTest(UserController.class)\n\t@AutoConfigureRestDocs\n\tpublic class UserDocumentationTests {\n\n\t\t@Autowired\n\t\tprivate MockMvc mvc;\n\n\t\t@Test\n\t\tpublic void listUsers() throws Exception {\n\t\t\tthis.mvc.perform(get("/users").accept(MediaType.TEXT_PLAIN))\n\t\t\t\t\t.andExpect(status().isOk())\n\t\t\t\t\t.andDo(document("list-users"));\n\t\t}\n\n\t}\n----\n\nIf you require more control over Spring REST Docs configuration than offered by the\nattributes of `@AutoConfigureRestDocs`, you can use a\n`RestDocsMockMvcConfigurationCustomizer` bean, as shown in the following example:\n\n[source,java,indent=0]\n----\n\t@TestConfiguration\n\tstatic class CustomizationConfiguration\n\t\t\timplements RestDocsMockMvcConfigurationCustomizer {\n\n\t\t@Override\n\t\tpublic void customize(MockMvcRestDocumentationConfigurer configurer) {\n\t\t\tconfigurer.snippets().withTemplateFormat(TemplateFormats.markdown());\n\t\t}\n\n\t}\n----\n\nIf you want to make use of Spring REST Docs support for a parameterized output directory,\nyou can create a `RestDocumentationResultHandler` bean. The auto-configuration calls\n`alwaysDo` with this result handler, thereby causing each `MockMvc` call to automatically\ngenerate the default snippets. The following example shows a\n`RestDocumentationResultHandler` being defined:\n\n[source,java,indent=0]\n----\n\t@TestConfiguration\n\tstatic class ResultHandlerConfiguration {\n\n\t\t@Bean\n\t\tpublic RestDocumentationResultHandler restDocumentation() {\n\t\t\treturn MockMvcRestDocumentation.document("{method-name}");\n\t\t}\n\n\t}\n----\n\n\n\n[[boot-features-testing-spring-boot-applications-testing-autoconfigured-rest-docs-rest-assured]]\n===== Auto-configured Spring REST Docs Tests with REST Assured\n`@AutoConfigureRestDocs` makes a `RequestSpecification` bean, preconfigured to use Spring\nREST Docs, available to your tests. You can inject it by using `@Autowired` and use it in\nyour tests as you normally would when using REST Assured and Spring REST Docs, as shown\nin the following example:\n\n[source,java,indent=0]\n----\ninclude::{code-examples}/test/autoconfigure/restdocs/restassured/UserDocumentationTests.java[tag=source]\n----\n\nIf you require more control over Spring REST Docs configuration than offered by the\nattributes of `@AutoConfigureRestDocs`, a `RestDocsRestAssuredConfigurationCustomizer`\nbean can be used, as shown in the following example:\n\n[source,java,indent=0]\n----\ninclude::{code-examples}/test/autoconfigure/restdocs/restassured/AdvancedConfigurationExample.java[tag=configuration]\n----\n\n\n\n[[boot-features-testing-spring-boot-applications-testing-auto-configured-additional-auto-config]]\n==== Additional Auto-configuration and Slicing\nEach slice provides one or more `@AutoConfigure...` annotations that namely defines the\nauto-configurations that should be included as part of a slice. Additional\nauto-configurations can be added by creating a custom `@AutoConfigure...` annotation or\nsimply by adding `@ImportAutoConfiguration` to the test as shown in the following example:\n\n[source,java,indent=0]\n----\n\t@RunWith(SpringRunner.class)\n\t@JdbcTest\n\t@ImportAutoConfiguration(IntegrationAutoConfiguration.class)\n\tpublic class ExampleJdbcTests {\n\n\t}\n----\n\nNOTE: Make sure to not use the regular `@Import` annotation to import auto-configurations\nas they are handled in a specific way by Spring Boot.\n\n\n\n[[boot-features-testing-spring-boot-applications-testing-user-configuration]]\n==== User Configuration and Slicing\nIf you <<using-boot-structuring-your-code, structure your code>> in a sensible way, your\n`@SpringBootApplication` class is\n<<boot-features-testing-spring-boot-applications-detecting-config, used by default>> as\nthe configuration of your tests.\n\nIt then becomes important not to litter the application\'s main class with configuration\nsettings that are specific to a particular area of its functionality.\n\nAssume that you are using Spring Batch and you rely on the auto-configuration for it.\nYou could define your `@SpringBootApplication` as follows:\n\n[source,java,indent=0]\n----\n\t@SpringBootApplication\n\t@EnableBatchProcessing\n\tpublic class SampleApplication { ... }\n----\n\nBecause this class is the source configuration for the test, any slice test actually\ntries to start Spring Batch, which is definitely not what you want to do. A recommended\napproach is to move that area-specific configuration to a separate `@Configuration` class\nat the same level as your application, as shown in the following example:\n\n[source,java,indent=0]\n----\n\t@Configuration\n\t@EnableBatchProcessing\n\tpublic class BatchConfiguration { ... }\n----\n\nNOTE: Depending on the complexity of your application, you may either have a single\n`@Configuration` class for your customizations or one class per domain area. The latter\napproach lets you enable it in one of your tests, if necessary, with the `@Import`\nannotation.\n\nAnother source of confusion is classpath scanning. Assume that, while you structured your\ncode in a sensible way, you need to scan an additional package. Your application may\nresemble the following code:\n\n[source,java,indent=0]\n----\n\t@SpringBootApplication\n\t@ComponentScan({ "com.example.app", "org.acme.another" })\n\tpublic class SampleApplication { ... }\n----\n\nDoing so effectively overrides the default component scan directive with the side effect\nof scanning those two packages regardless of the slice that you chose. For instance, a\n`@DataJpaTest` seems to suddenly scan components and user configurations of your\napplication. Again, moving the custom directive to a separate class is a good way to fix\nthis issue.\n\nTIP: If this is not an option for you, you can create a `@SpringBootConfiguration`\nsomewhere in the hierarchy of your test so that it is used instead. Alternatively, you\ncan specify a source for your test, which disables the behavior of finding a default one.\n\n\n\n[[boot-features-testing-spring-boot-applications-with-spock]]\n==== Using Spock to Test Spring Boot Applications\nIf you wish to use Spock to test a Spring Boot application, you should add a dependency\non Spock\'s `spock-spring` module to your application\'s build. `spock-spring` integrates\nSpring\'s test framework into Spock. It is recommended that you use Spock 1.2 or later to\nbenefit from a number of improvements to Spock\'s Spring Framework and Spring Boot\nintegration. See http://spockframework.org/spock/docs/1.2/modules.html#_spring_module[the\ndocumentation for Spock\'s Spring module] for further details.\n\n\n\n[[boot-features-test-utilities]]\n=== Test Utilities\nA few test utility classes that are generally useful when testing your application are\npackaged as part of `spring-boot`.\n\n\n\n[[boot-features-configfileapplicationcontextinitializer-test-utility]]\n==== ConfigFileApplicationContextInitializer\n`ConfigFileApplicationContextInitializer` is an `ApplicationContextInitializer` that you\ncan apply to your tests to load Spring Boot `application.properties` files. You can use\nit when you do not need the full set of features provided by `@SpringBootTest`, as shown\nin the following example:\n\n[source,java,indent=0]\n----\n\t@ContextConfiguration(classes = Config.class,\n\t\tinitializers = ConfigFileApplicationContextInitializer.class)\n----\n\nNOTE: Using `ConfigFileApplicationContextInitializer` alone does not provide support for\n`@Value("${...}")` injection. Its only job is to ensure that `application.properties`\nfiles are loaded into Spring\'s `Environment`. For `@Value` support, you need to either\nadditionally configure a `PropertySourcesPlaceholderConfigurer` or use `@SpringBootTest`,\nwhich auto-configures one for you.\n\n\n\n[[boot-features-test-property-values]]\n==== TestPropertyValues\n`TestPropertyValues` lets you quickly add properties to a\n`ConfigurableEnvironment` or `ConfigurableApplicationContext`. You can call it with\n`key=value` strings, as follows:\n\n[source,java,indent=0]\n----\n\tTestPropertyValues.of("org=Spring", "name=Boot").applyTo(env);\n----\n\n\n\n[[boot-features-output-capture-test-utility]]\n==== OutputCapture\n`OutputCapture` is a JUnit `Rule` that you can use to capture `System.out` and\n`System.err` output. You can declare the capture as a `@Rule` and then use `toString()`\nfor assertions, as follows:\n\n[source,java,indent=0]\n----\n\timport org.junit.Rule;\n\timport org.junit.Test;\n\timport org.springframework.boot.test.rule.OutputCapture;\n\n\timport static org.hamcrest.Matchers.*;\n\timport static org.junit.Assert.*;\n\n\tpublic class MyTest {\n\n\t\t@Rule\n\t\tpublic OutputCapture capture = new OutputCapture();\n\n\t\t@Test\n\t\tpublic void testName() throws Exception {\n\t\t\tSystem.out.println("Hello World!");\n\t\t\tassertThat(capture.toString(), containsString("World"));\n\t\t}\n\n\t}\n----\n\n[[boot-features-rest-templates-test-utility]]\n==== TestRestTemplate\n\nTIP: Spring Framework 5.0 provides a new `WebTestClient` that works for\n<<boot-features-testing-spring-boot-applications-testing-autoconfigured-webflux-tests,\nWebFlux integration tests>> and both\n<<boot-features-testing-spring-boot-applications-testing-with-running-server,\nWebFlux and MVC end-to-end testing>>. It provides a fluent API for assertions,\nunlike `TestRestTemplate`.\n\n\n`TestRestTemplate` is a convenience alternative to Spring\'s `RestTemplate` that is useful\nin integration tests. You can get a vanilla template or one that sends Basic HTTP\nauthentication (with a username and password). In either case, the template behaves in a\ntest-friendly way by not throwing exceptions on server-side errors. It is recommended,\nbut not mandatory, to use the Apache HTTP Client (version 4.3.2 or better). If you have\nthat on your classpath, the `TestRestTemplate` responds by configuring the client\nappropriately. If you do use Apache\'s HTTP client, some additional test-friendly features\nare enabled:\n\n* Redirects are not followed (so you can assert the response location).\n* Cookies are ignored (so the template is stateless).\n\n`TestRestTemplate` can be instantiated directly in your integration tests, as shown in\nthe following example:\n\n[source,java,indent=0]\n----\n\tpublic class MyTest {\n\n\t\tprivate TestRestTemplate template = new TestRestTemplate();\n\n\t\t@Test\n\t\tpublic void testRequest() throws Exception {\n\t\t\tHttpHeaders headers = this.template.getForEntity(\n\t\t\t\t\t"http://myhost.example.com/example", String.class).getHeaders();\n\t\t\tassertThat(headers.getLocation()).hasHost("other.example.com");\n\t\t}\n\n\t}\n----\n\nAlternatively, if you use the `@SpringBootTest` annotation with\n`WebEnvironment.RANDOM_PORT` or `WebEnvironment.DEFINED_PORT`, you can inject a\nfully configured `TestRestTemplate` and start using it. If necessary, additional\ncustomizations can be applied through the `RestTemplateBuilder` bean. Any URLs that do\nnot specify a host and port automatically connect to the embedded server, as shown in the\nfollowing example:\n\n[source,java,indent=0]\n----\ninclude::{test-examples}/web/client/SampleWebClientTests.java[tag=test]\n----\n\n\n\n[[boot-features-websockets]]\n== WebSockets\nSpring Boot provides WebSockets auto-configuration for embedded Tomcat 8.5, Jetty\n9, and Undertow. If you deploy a war file to a standalone container, Spring Boot assumes\nthat the container is responsible for the configuration of its WebSocket support.\n\nSpring Framework provides {spring-reference}web.html#websocket[rich WebSocket support]\nthat can be easily accessed through the `spring-boot-starter-websocket` module.\n\n\n\n[[boot-features-webservices]]\n== Web Services\nSpring Boot provides Web Services auto-configuration so that all you must do is define\nyour `Endpoints`.\n\nThe {spring-webservices-reference}[Spring Web Services features] can be easily accessed\nwith the `spring-boot-starter-webservices` module.\n\n`SimpleWsdl11Definition` and `SimpleXsdSchema` beans can be automatically created for\nyour WSDLs and XSDs respectively. To do so, configure their location, as shown in the\nfollowing example:\n\n\n[source,properties,indent=0]\n----\n\tspring.webservices.wsdl-locations=classpath:/wsdl\n----\n\n\n\n[[boot-features-developing-auto-configuration]]\n== Creating Your Own Auto-configuration\nIf you work in a company that develops shared libraries, or if you work on an open-source\nor commercial library, you might want to develop your own auto-configuration.\nAuto-configuration classes can be bundled in external jars and still be picked-up by\nSpring Boot.\n\nAuto-configuration can be associated to a "`starter`" that provides the auto-configuration\ncode as well as the typical libraries that you would use with it. We first cover what\nyou need to know to build your own auto-configuration and then we move on to the\n<<boot-features-custom-starter,typical steps required to create a custom starter>>.\n\nTIP: A https://github.com/snicoll-demos/spring-boot-master-auto-configuration[demo\nproject] is available to showcase how you can create a starter step-by-step.\n\n\n\n[[boot-features-understanding-auto-configured-beans]]\n=== Understanding Auto-configured Beans\nUnder the hood, auto-configuration is implemented with standard `@Configuration` classes.\nAdditional `@Conditional` annotations are used to constrain when the auto-configuration\nshould apply. Usually, auto-configuration classes use `@ConditionalOnClass` and\n`@ConditionalOnMissingBean` annotations. This ensures that auto-configuration applies\nonly when relevant classes are found and when you have not declared your own\n`@Configuration`.\n\nYou can browse the source code of {sc-spring-boot-autoconfigure}[`spring-boot-autoconfigure`]\nto see the `@Configuration` classes that Spring provides (see the\n{github-code}/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/spring.factories[`META-INF/spring.factories`]\nfile).\n\n\n\n[[boot-features-locating-auto-configuration-candidates]]\n=== Locating Auto-configuration Candidates\nSpring Boot checks for the presence of a `META-INF/spring.factories` file within your\npublished jar. The file should list your configuration classes under the\n`EnableAutoConfiguration` key, as shown in the following example:\n\n[indent=0]\n----\n\torg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\n\tcom.mycorp.libx.autoconfigure.LibXAutoConfiguration,\\\n\tcom.mycorp.libx.autoconfigure.LibXWebAutoConfiguration\n----\n\nYou can use the\n{sc-spring-boot-autoconfigure}/AutoConfigureAfter.{sc-ext}[`@AutoConfigureAfter`] or\n{sc-spring-boot-autoconfigure}/AutoConfigureBefore.{sc-ext}[`@AutoConfigureBefore`]\nannotations if your configuration needs to be applied in a specific order. For example,\nif you provide web-specific configuration, your class may need to be applied after\n`WebMvcAutoConfiguration`.\n\nIf you want to order certain auto-configurations that should not have any direct\nknowledge of each other, you can also use `@AutoConfigureOrder`. That annotation has the\nsame semantic as the regular `@Order` annotation but provides a dedicated order for\nauto-configuration classes.\n\n[NOTE]\n====\nAuto-configurations must be loaded that way _only_. Make sure that they are defined in\na specific package space and that, in particular, they are never the target of component\nscanning.\n====\n\n\n\n[[boot-features-condition-annotations]]\n=== Condition Annotations\nYou almost always want to include one or more `@Conditional` annotations on your\nauto-configuration class. The `@ConditionalOnMissingBean` annotation is one common\nexample that is used to allow developers to override auto-configuration if they are\nnot happy with your defaults.\n\nSpring Boot includes a number of `@Conditional` annotations that you can reuse in your\nown code by annotating `@Configuration` classes or individual `@Bean` methods. These\nannotations include:\n\n* <<boot-features-class-conditions>>\n* <<boot-features-bean-conditions>>\n* <<boot-features-property-conditions>>\n* <<boot-features-resource-conditions>>\n* <<boot-features-web-application-conditions>>\n* <<boot-features-spel-conditions>>\n\n\n[[boot-features-class-conditions]]\n==== Class Conditions\nThe `@ConditionalOnClass` and `@ConditionalOnMissingClass` annotations let configuration\nbe included based on the presence or absence of specific classes. Due to the fact that\nannotation metadata is parsed by using http://asm.ow2.org/[ASM], you can use the `value`\nattribute to refer to the real class, even though that class might not actually appear on\nthe running application classpath. You can also use the `name` attribute if you prefer to\nspecify the class name by using a `String` value.\n\n[TIP]\n====\nIf you use `@ConditionalOnClass` or `@ConditionalOnMissingClass` as a part of a\nmeta-annotation to compose your own composed annotations, you must use `name` as referring\nto the class in such a case is not handled.\n====\n\n\n\n[[boot-features-bean-conditions]]\n==== Bean Conditions\nThe `@ConditionalOnBean` and `@ConditionalOnMissingBean` annotations let a bean be\nincluded based on the presence or absence of specific beans. You can use the `value`\nattribute to specify beans by type or `name` to specify beans by name. The `search`\nattribute lets you limit the `ApplicationContext` hierarchy that should be considered\nwhen searching for beans.\n\nWhen placed on a `@Bean` method, the target type defaults to the return type of the\nmethod, as shown in the following example:\n\n[source,java,indent=0]\n----\n\t@Configuration\n\tpublic class MyAutoConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic MyService myService() { ... }\n\n\t}\n----\n\nIn the preceding example, the `myService` bean is going to be created if no bean of type\n`MyService` is already contained in the `ApplicationContext`.\n\nTIP: You need to be very careful about the order in which bean definitions are added, as\nthese conditions are evaluated based on what has been processed so far. For this reason,\nwe recommend using only `@ConditionalOnBean` and `@ConditionalOnMissingBean` annotations\non auto-configuration classes (since these are guaranteed to load after any user-defined\nbean definitions have been added).\n\nNOTE: `@ConditionalOnBean` and `@ConditionalOnMissingBean` do not prevent `@Configuration`\nclasses from being created. The only difference between using these conditions at the class level\nand marking each contained `@Bean` method with the annotation is that the former prevents\nregistration of the `@Configuration` class as a bean if the condition does not match.\n\n\n\n[[boot-features-property-conditions]]\n==== Property Conditions\nThe `@ConditionalOnProperty` annotation lets configuration be included based on a Spring\nEnvironment property. Use the `prefix` and `name` attributes to specify the property that\nshould be checked. By default, any property that exists and is not equal to `false` is\nmatched. You can also create more advanced checks by using the `havingValue` and\n`matchIfMissing` attributes.\n\n\n\n[[boot-features-resource-conditions]]\n==== Resource Conditions\nThe `@ConditionalOnResource` annotation lets configuration be included only when a\nspecific resource is present. Resources can be specified by using the usual Spring\nconventions, as shown in the following example: `file:/home/user/test.dat`.\n\n\n\n[[boot-features-web-application-conditions]]\n==== Web Application Conditions\nThe `@ConditionalOnWebApplication` and `@ConditionalOnNotWebApplication` annotations let\nconfiguration be included depending on whether the application is a "`web application`".\nA web application is any application that uses a Spring `WebApplicationContext`,\ndefines a `session` scope, or has a `StandardServletEnvironment`.\n\n\n\n[[boot-features-spel-conditions]]\n==== SpEL Expression Conditions\nThe `@ConditionalOnExpression` annotation lets configuration be included based on the\nresult of a {spring-reference}core.html#expressions[SpEL expression].\n\n\n\n[[boot-features-test-autoconfig]]\n=== Testing your Auto-configuration\nAn auto-configuration can be affected by many factors: user configuration (`@Bean`\ndefinition and `Environment` customization), condition evaluation (presence of a\nparticular library), and others. Concretely, each test should create a well defined\n`ApplicationContext` that represents a combination of those customizations.\n`ApplicationContextRunner` provides a great way to achieve that.\n\n`ApplicationContextRunner` is usually defined as a field of the test class to gather the\nbase, common configuration. The following example makes sure that\n`UserServiceAutoConfiguration` is always invoked:\n\n[source,java,indent=0]\n----\ninclude::{test-examples}/autoconfigure/UserServiceAutoConfigurationTests.java[tag=runner]\n----\n\nTIP: If multiple auto-configurations have to be defined, there is no need to order their\ndeclarations as they are invoked in the exact same order as when running the\napplication.\n\nEach test can use the runner to represent a particular use case. For instance, the sample\nbelow invokes a user configuration (`UserConfiguration`) and checks that the\nauto-configuration backs off properly. Invoking `run` provides a callback context that can\nbe used with `Assert4J`.\n\n[source,java,indent=0]\n----\ninclude::{test-examples}/autoconfigure/UserServiceAutoConfigurationTests.java[tag=test-user-config]\n----\n\nIt is also possible to easily customize the `Environment`, as shown in the following\nexample:\n\n[source,java,indent=0]\n----\ninclude::{test-examples}/autoconfigure/UserServiceAutoConfigurationTests.java[tag=test-env]\n----\n\nThe runner can also be used to display the `ConditionEvaluationReport`. The report can be printed\nat `INFO` or `DEBUG` level. The following example shows how to use the `ConditionEvaluationReportLoggingListener`\nto print the report in auto-configuration tests.\n\n[source,java,indent=0]\n----\n\t@Test\n\tpublic void autoConfigTest {\n\t\tConditionEvaluationReportLoggingListener initializer = new ConditionEvaluationReportLoggingListener(\n\t\t\t\tLogLevel.INFO);\n\t\tApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t\t\t.withInitializer(initializer).run((context) -> {\n\t\t\t\t\t\t// Do something...\n\t\t\t\t});\n\t}\n----\n\n\n\n==== Simulating a Web Context\nIf you need to test an auto-configuration that only operates in a Servlet or Reactive web\napplication context, use the `WebApplicationContextRunner` or\n`ReactiveWebApplicationContextRunner` respectively.\n\n\n\n==== Overriding the Classpath\nIt is also possible to test what happens when a particular class and/or package is not\npresent at runtime. Spring Boot ships with a `FilteredClassLoader` that can easily be used\nby the runner. In the following example, we assert that if `UserService` is not present, the\nauto-configuration is properly disabled:\n\n[source,java,indent=0]\n----\ninclude::{test-examples}/autoconfigure/UserServiceAutoConfigurationTests.java[tag=test-classloader]\n----\n\n\n\n[[boot-features-custom-starter]]\n=== Creating Your Own Starter\nA full Spring Boot starter for a library may contain the following components:\n\n* The `autoconfigure` module that contains the auto-configuration code.\n* The `starter` module that provides a dependency to the `autoconfigure` module as well\nas the library and any additional dependencies that are typically useful. In a nutshell,\nadding the starter should provide everything needed to start using that library.\n\nTIP: You may combine the auto-configuration code and the dependency management in a\nsingle module if you do not need to separate those two concerns.\n\n\n\n[[boot-features-custom-starter-naming]]\n==== Naming\nYou should make sure to provide a proper namespace for your starter. Do not start your\nmodule names with `spring-boot`, even if you use a different Maven `groupId`. We may\noffer official support for the thing you auto-configure in the future.\n\nAs a rule of thumb, you should name a combined module after the starter. For example,\nassume that you are creating a starter for "acme" and that you name the auto-configure\nmodule `acme-spring-boot-autoconfigure` and the starter `acme-spring-boot-starter`. If\nyou only have one module that combines the two, name it `acme-spring-boot-starter`.\n\nAlso, if your starter provides configuration keys, use a unique namespace for them. In\nparticular, do not include your keys in the namespaces that Spring Boot uses (such as\n`server`, `management`, `spring`, and so on). If you use the same namespace, we may modify\nthese namespaces in the future in ways that break your modules.\n\nMake sure to\n<<appendix-configuration-metadata#configuration-metadata-annotation-processor,trigger\nmeta-data generation>> so that IDE assistance is available for your keys as well. You may\nwant to review the generated meta-data (`META-INF/spring-configuration-metadata.json`) to\nmake sure your keys are properly documented.\n\n\n\n[[boot-features-custom-starter-module-autoconfigure]]\n==== `autoconfigure` Module\nThe `autoconfigure` module contains everything that is necessary to get started with the\nlibrary. It may also contain configuration key definitions (such as\n`@ConfigurationProperties`) and any callback interface that can be used to further\ncustomize how the components are initialized.\n\nTIP: You should mark the dependencies to the library as optional so that you can include\nthe `autoconfigure` module in your projects more easily. If you do it that way, the\nlibrary is not provided and, by default, Spring Boot backs off.\n\nSpring Boot uses an annotation processor to collect the conditions on auto-configurations\nin a metadata file (`META-INF/spring-autoconfigure-metadata.properties`). If that file is\npresent, it is used to eagerly filter auto-configurations that do not match, which will\nimprove startup time. It is recommended to add the following dependency in a module that\ncontains auto-configurations:\n\n[source,xml,indent=0,subs="verbatim,quotes,attributes"]\n----\n\t<dependency>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-autoconfigure-processor</artifactId>\n\t\t<optional>true</optional>\n\t</dependency>\n----\n\nWith Gradle 4.5 and earlier, the dependency should be declared in the `compileOnly`\nconfiguration, as shown in the following example:\n\n[source,groovy,indent=0,subs="verbatim,quotes,attributes"]\n----\n\tdependencies {\n\t\tcompileOnly "org.springframework.boot:spring-boot-autoconfigure-processor"\n\t}\n----\n\nWith Gradle 4.6 and later, the dependency should be declared in the `annotationProcessor`\nconfiguration, as shown in the following example:\n\n[source,groovy,indent=0,subs="verbatim,quotes,attributes"]\n----\n\tdependencies {\n\t\tannotationProcessor "org.springframework.boot:spring-boot-autoconfigure-processor"\n\t}\n----\n\n\n\n[[boot-features-custom-starter-module-starter]]\n==== Starter Module\nThe starter is really an empty jar. Its only purpose is to provide the necessary\ndependencies to work with the library. You can think of it as an opinionated view of what\nis required to get started.\n\nDo not make assumptions about the project in which your starter is added. If the library\nyou are auto-configuring typically requires other starters, mention them as well.\nProviding a proper set of _default_ dependencies may be hard if the number of optional\ndependencies is high, as you should avoid including dependencies that are unnecessary for\na typical usage of the library. In other words, you should not include optional\ndependencies.\n\nNOTE: Either way, your starter must reference the core Spring Boot starter\n(`spring-boot-starter`) directly or indirectly (i.e. no need to add it if your starter\nrelies on another starter). If a project is created with only your custom starter, Spring\nBoot\'s core features will be honoured by the presence of the core starter.\n\n\n\n[[boot-features-kotlin]]\n== Kotlin support\nhttps://kotlinlang.org[Kotlin] is a statically-typed language targeting the JVM (and other\nplatforms) which allows writing concise and elegant code while providing\n{kotlin-documentation}java-interop.html[interoperability] with existing libraries written\nin Java.\n\nSpring Boot provides Kotlin support by leveraging the support in other Spring projects\nsuch as Spring Framework, Spring Data, and Reactor. See the\n{spring-reference}languages.html#kotlin[Spring Framework Kotlin support documentation]\nfor more information.\n\nThe easiest way to start with Spring Boot and Kotlin is to follow\nhttps://spring.io/guides/tutorials/spring-boot-kotlin/[this comprehensive tutorial]. You\ncan create new Kotlin projects via\nhttps://start.spring.io/#!language=kotlin[start.spring.io]. Feel free to join the #spring\nchannel of http://slack.kotlinlang.org/[Kotlin Slack] or ask a question with the `spring`\nand `kotlin` tags on https://stackoverflow.com/questions/tagged/spring+kotlin[Stack\nOverflow] if you need support.\n\n\n\n[[boot-features-kotlin-requirements]]\n=== Requirements\nSpring Boot supports Kotlin 1.2.x. To use Kotlin, `org.jetbrains.kotlin:kotlin-stdlib` and\n`org.jetbrains.kotlin:kotlin-reflect` must be present on the classpath. The\n`kotlin-stdlib` variants `kotlin-stdlib-jdk7` and `kotlin-stdlib-jdk8` can also be used.\n\nSince https://discuss.kotlinlang.org/t/classes-final-by-default/166[Kotlin classes are\nfinal by default], you are likely to want to configure\n{kotlin-documentation}compiler-plugins.html#spring-support[kotlin-spring]\nplugin in order to automatically open Spring-annotated classes so that they can be\nproxied.\n\nhttps://github.com/FasterXML/jackson-module-kotlin[Jackson\'s Kotlin module] is required\nfor serializing / deserializing JSON data in Kotlin. It is automatically registered when\nfound on the classpath. A warning message is logged if Jackson and Kotlin are present but\nthe Jackson Kotlin module is not.\n\nTIP: These dependencies and plugins are provided by default if one bootstraps a Kotlin\nproject on https://start.spring.io/#!language=kotlin[start.spring.io].\n\n\n\n[[boot-features-kotlin-null-safety]]\n=== Null-safety\nOne of Kotlin\'s key features is {kotlin-documentation}null-safety.html[null-safety]. It\ndeals with `null` values at compile time rather than deferring the problem to runtime and\nencountering a `NullPointerException`. This helps to eliminate a common source of bugs\nwithout paying the cost of wrappers like `Optional`. Kotlin also allows using functional\nconstructs with nullable values as described in this\nhttp://www.baeldung.com/kotlin-null-safety[comprehensive guide to null-safety in Kotlin].\n\nAlthough Java does not allow one to express null-safety in its type system, Spring\nFramework, Spring Data, and Reactor now provide null-safety of their API via\ntooling-friendly annotations. By default, types from Java APIs used in Kotlin are\nrecognized as\n{kotlin-documentation}java-interop.html#null-safety-and-platform-types[platform types]\nfor which null-checks are relaxed.\n{kotlin-documentation}java-interop.html#jsr-305-support[Kotlin\'s support for JSR 305\nannotations] combined with nullability annotations provide null-safety for the related\nSpring API in Kotlin.\n\nThe JSR 305 checks can be configured by adding the `-Xjsr305` compiler flag with the\nfollowing options: `-Xjsr305={strict|warn|ignore}`. The default behavior is the same as\n`-Xjsr305=warn`. The `strict` value is required to have null-safety taken in account in\nKotlin types inferred from Spring API but should be used with the knowledge that Spring\nAPI nullability declaration could evolve even between minor releases and more checks may\nbe added in the future).\n\nWARNING: Generic type arguments, varargs and array elements nullability are not yet\nsupported. See https://jira.spring.io/browse/SPR-15942[SPR-15942] for up-to-date\ninformation. Also be aware that Spring Boot\'s own API is {github-issues}10712[not yet\nannotated].\n\n\n\n[[boot-features-kotlin-api]]\n=== Kotlin API\n\n\n\n[[boot-features-kotlin-api-runapplication]]\n==== runApplication\nSpring Boot provides an idiomatic way to run an application with\n`runApplication<MyApplication>(*args)` as shown in the following example:\n\n[source,kotlin,indent=0]\n----\nimport org.springframework.boot.autoconfigure.SpringBootApplication\nimport org.springframework.boot.runApplication\n\n@SpringBootApplication\nclass MyApplication\n\nfun main(args: Array<String>) {\n\trunApplication<MyApplication>(*args)\n}\n----\n\nThis is a drop-in replacement for\n`SpringApplication.run(MyApplication::class.java, *args)`. It also allows customization\nof the application as shown in the following example:\n\n[source,kotlin,indent=0]\n----\nrunApplication<MyApplication>(*args) {\n\tsetBannerMode(OFF)\n}\n----\n\n\n\n[[boot-features-kotlin-api-extensions]]\n==== Extensions\nKotlin {kotlin-documentation}extensions.html[extensions] provide the ability\nto extend existing classes with additional functionality. The Spring Boot Kotlin API makes\nuse of these extensions to add new Kotlin specific conveniences to existing APIs.\n\n`TestRestTemplate` extensions, similar to those provided by Spring Framework for\n`RestOperations` in Spring Framework, are provided. Among other things, the extensions\nmake it possible to take advantage of Kotlin reified type parameters.\n\n\n\n[[boot-features-kotlin-dependency-management]]\n=== Dependency management\nIn order to avoid mixing different version of Kotlin dependencies on the classpath,\ndependency management of the following Kotlin dependencies is provided:\n\n - `kotlin-reflect`\n - `kotlin-runtime`\n - `kotlin-stdlib`\n - `kotlin-stdlib-jdk7`\n - `kotlin-stdlib-jdk8`\n - `kotlin-stdlib-jre7`\n - `kotlin-stdlib-jre8`\n\nWith Maven, the Kotlin version can be customized via the `kotlin.version` property and\nplugin management is provided for `kotlin-maven-plugin`. With Gradle, the Spring Boot\nplugin automatically aligns the `kotlin.version` with the version of the Kotlin plugin.\n\n\n\n[[boot-features-kotlin-configuration-properties]]\n=== `@ConfigurationProperties`\n`@ConfigurationProperties` currently only works with `lateinit` or nullable `var`\nproperties (the former is recommended), since immutable classes initialized by\nconstructors are {github-issues}8762[not yet supported].\n\n[source,kotlin,indent=0]\n----\n@ConfigurationProperties("example.kotlin")\nclass KotlinExampleProperties {\n\n\tlateinit var name: String\n\n\tlateinit var description: String\n\n\tval myService = MyService()\n\n\tclass MyService {\n\n\t\tlateinit var apiToken: String\n\n\t\tlateinit var uri: URI\n\n\t}\n\n}\n----\n\nTIP: To generate\n<<appendix-configuration-metadata#configuration-metadata-annotation-processor,your own\nmetadata>> using the annotation processor, {kotlin-documentation}kapt.html[`kapt` should\nbe configured] with the `spring-boot-configuration-processor` dependency.\n\n\n[[boot-features-kotlin-testing]]\n=== Testing\nWhile it is possible to use JUnit 4 (the default provided by `spring-boot-starter-test`)\nto test Kotlin code, JUnit 5 is recommended. JUnit 5 enables a test class to be\ninstantiated once and reused for all of the class\'s tests. This makes it possible to use\n`@BeforeAll` and `@AfterAll` annotations on non-static methods, which is a good fit for\nKotlin.\n\nTo use JUnit 5, exclude `junit:junit` dependency from `spring-boot-starter-test`, add\nJUnit 5 dependencies, and configure the Maven or Gradle plugin accordingly. See the\n{junit5-documentation}/#dependency-metadata-junit-jupiter-samples[JUnit 5\ndocumentation] for more details. You also need to\n{junit5-documentation}/#writing-tests-test-instance-lifecycle-changing-default[switch test\ninstance lifecycle to "per-class"].\n\n\n\n[[boot-features-kotlin-resources]]\n=== Resources\n\n\n\n[[boot-features-kotlin-resources-further-reading]]\n==== Further reading\n* {kotlin-documentation}[Kotlin language reference]\n* http://slack.kotlinlang.org/[Kotlin Slack] (with a dedicated #spring channel)\n* https://stackoverflow.com/questions/tagged/spring+kotlin[Stackoverflow with `spring` and `kotlin` tags]\n* https://try.kotlinlang.org/[Try Kotlin in your browser]\n* https://blog.jetbrains.com/kotlin/[Kotlin blog]\n* https://kotlin.link/[Awesome Kotlin]\n* https://spring.io/guides/tutorials/spring-boot-kotlin/[Tutorial: building web applications with Spring Boot and Kotlin]\n* https://spring.io/blog/2016/02/15/developing-spring-boot-applications-with-kotlin[Developing Spring Boot applications with Kotlin]\n* https://spring.io/blog/2016/03/20/a-geospatial-messenger-with-kotlin-spring-boot-and-postgresql[A Geospatial Messenger with Kotlin, Spring Boot and PostgreSQL]\n* https://spring.io/blog/2017/01/04/introducing-kotlin-support-in-spring-framework-5-0[Introducing Kotlin support in Spring Framework 5.0]\n* https://spring.io/blog/2017/08/01/spring-framework-5-kotlin-apis-the-functional-way[Spring Framework 5 Kotlin APIs, the functional way]\n\n\n\n[[boot-features-kotlin-resources-examples]]\n==== Examples\n\n* https://github.com/sdeleuze/spring-boot-kotlin-demo[spring-boot-kotlin-demo]: regular Spring Boot + Spring Data JPA project\n* https://github.com/mixitconf/mixit[mixit]: Spring Boot 2 + WebFlux + Reactive Spring Data MongoDB\n* https://github.com/sdeleuze/spring-kotlin-fullstack[spring-kotlin-fullstack]: WebFlux Kotlin fullstack example with Kotlin2js for frontend instead of JavaScript or TypeScript\n* https://github.com/spring-petclinic/spring-petclinic-kotlin[spring-petclinic-kotlin]: Kotlin version of the Spring PetClinic Sample Application\n* https://github.com/sdeleuze/spring-kotlin-deepdive[spring-kotlin-deepdive]: a step by step migration for Boot 1.0 + Java to Boot 2.0 + Kotlin\n\n\n\n[[boot-features-whats-next]]\n== What to Read Next\nIf you want to learn more about any of the classes discussed in this section, you can\ncheck out the {dc-root}[Spring Boot API documentation] or you can browse the\n{github-code}[source code directly]. If you have specific questions, take a look at the\n<<howto.adoc#howto, how-to>> section.\n\nIf you are comfortable with Spring Boot\'s core features, you can continue on and read\nabout <<production-ready-features.adoc#production-ready, production-ready features>>.\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
