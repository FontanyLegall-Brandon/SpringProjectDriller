{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/SocialWebAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/SocialWebAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2016 the original author or authors.\n+ * Copyright 2012-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -18,7 +18,7 @@ package org.springframework.boot.autoconfigure.social;\n \n import java.util.List;\n \n-import org.thymeleaf.spring4.SpringTemplateEngine;\n+import org.thymeleaf.spring4.resourceresolver.SpringResourceResourceResolver;\n \n import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n@@ -164,7 +164,7 @@ public class SocialWebAutoConfiguration {\n \t}\n \n \t@Configuration\n-\t@ConditionalOnClass(SpringTemplateEngine.class)\n+\t@ConditionalOnClass(SpringResourceResourceResolver.class)\n \tprotected static class SpringSocialThymeleafConfig {\n \n \t\t@Bean\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.social;\n\nimport java.util.List;\n\nimport org.thymeleaf.spring4.resourceresolver.SpringResourceResourceResolver;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContext;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.social.UserIdSource;\nimport org.springframework.social.config.annotation.EnableSocial;\nimport org.springframework.social.config.annotation.SocialConfigurerAdapter;\nimport org.springframework.social.connect.ConnectionFactoryLocator;\nimport org.springframework.social.connect.ConnectionRepository;\nimport org.springframework.social.connect.UsersConnectionRepository;\nimport org.springframework.social.connect.web.ConnectController;\nimport org.springframework.social.connect.web.ConnectInterceptor;\nimport org.springframework.social.connect.web.DisconnectInterceptor;\nimport org.springframework.social.connect.web.ProviderSignInController;\nimport org.springframework.social.connect.web.ProviderSignInInterceptor;\nimport org.springframework.social.connect.web.SignInAdapter;\nimport org.springframework.social.connect.web.thymeleaf.SpringSocialDialect;\nimport org.springframework.util.Assert;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.web.servlet.view.BeanNameViewResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Social\'s web connection\n * support.\n *\n * @author Craig Walls\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass({ ConnectController.class, SocialConfigurerAdapter.class })\n@ConditionalOnBean({ ConnectionFactoryLocator.class, UsersConnectionRepository.class })\n@AutoConfigureBefore(ThymeleafAutoConfiguration.class)\n@AutoConfigureAfter(WebMvcAutoConfiguration.class)\npublic class SocialWebAutoConfiguration {\n\n\t@Configuration\n\t@EnableSocial\n\t@ConditionalOnWebApplication\n\tprotected static class SocialAutoConfigurationAdapter\n\t\t\textends SocialConfigurerAdapter {\n\n\t\tprivate final List<ConnectInterceptor<?>> connectInterceptors;\n\n\t\tprivate final List<DisconnectInterceptor<?>> disconnectInterceptors;\n\n\t\tprivate final List<ProviderSignInInterceptor<?>> signInInterceptors;\n\n\t\tpublic SocialAutoConfigurationAdapter(\n\t\t\t\tObjectProvider<List<ConnectInterceptor<?>>> connectInterceptorsProvider,\n\t\t\t\tObjectProvider<List<DisconnectInterceptor<?>>> disconnectInterceptorsProvider,\n\t\t\t\tObjectProvider<List<ProviderSignInInterceptor<?>>> signInInterceptorsProvider) {\n\t\t\tthis.connectInterceptors = connectInterceptorsProvider.getIfAvailable();\n\t\t\tthis.disconnectInterceptors = disconnectInterceptorsProvider.getIfAvailable();\n\t\t\tthis.signInInterceptors = signInInterceptorsProvider.getIfAvailable();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(ConnectController.class)\n\t\tpublic ConnectController connectController(\n\t\t\t\tConnectionFactoryLocator factoryLocator,\n\t\t\t\tConnectionRepository repository) {\n\t\t\tConnectController controller = new ConnectController(factoryLocator,\n\t\t\t\t\trepository);\n\t\t\tif (!CollectionUtils.isEmpty(this.connectInterceptors)) {\n\t\t\t\tcontroller.setConnectInterceptors(this.connectInterceptors);\n\t\t\t}\n\t\t\tif (!CollectionUtils.isEmpty(this.disconnectInterceptors)) {\n\t\t\t\tcontroller.setDisconnectInterceptors(this.disconnectInterceptors);\n\t\t\t}\n\t\t\treturn controller;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnProperty(prefix = "spring.social", name = "auto-connection-views")\n\t\tpublic BeanNameViewResolver beanNameViewResolver() {\n\t\t\tBeanNameViewResolver viewResolver = new BeanNameViewResolver();\n\t\t\tviewResolver.setOrder(Ordered.HIGHEST_PRECEDENCE);\n\t\t\treturn viewResolver;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnBean(SignInAdapter.class)\n\t\t@ConditionalOnMissingBean\n\t\tpublic ProviderSignInController signInController(\n\t\t\t\tConnectionFactoryLocator factoryLocator,\n\t\t\t\tUsersConnectionRepository usersRepository, SignInAdapter signInAdapter) {\n\t\t\tProviderSignInController controller = new ProviderSignInController(\n\t\t\t\t\tfactoryLocator, usersRepository, signInAdapter);\n\t\t\tif (!CollectionUtils.isEmpty(this.signInInterceptors)) {\n\t\t\t\tcontroller.setSignInInterceptors(this.signInInterceptors);\n\t\t\t}\n\t\t\treturn controller;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@EnableSocial\n\t@ConditionalOnWebApplication\n\t@ConditionalOnMissingClass("org.springframework.security.core.context.SecurityContextHolder")\n\tprotected static class AnonymousUserIdSourceConfig extends SocialConfigurerAdapter {\n\n\t\t@Override\n\t\tpublic UserIdSource getUserIdSource() {\n\t\t\treturn new UserIdSource() {\n\t\t\t\t@Override\n\t\t\t\tpublic String getUserId() {\n\t\t\t\t\treturn "anonymous";\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@EnableSocial\n\t@ConditionalOnWebApplication\n\t@ConditionalOnClass(SecurityContextHolder.class)\n\tprotected static class AuthenticationUserIdSourceConfig\n\t\t\textends SocialConfigurerAdapter {\n\n\t\t@Override\n\t\tpublic UserIdSource getUserIdSource() {\n\t\t\treturn new SecurityContextUserIdSource();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(SpringResourceResourceResolver.class)\n\tprotected static class SpringSocialThymeleafConfig {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic SpringSocialDialect springSocialDialect() {\n\t\t\treturn new SpringSocialDialect();\n\t\t}\n\n\t}\n\n\tprivate static class SecurityContextUserIdSource implements UserIdSource {\n\n\t\t@Override\n\t\tpublic String getUserId() {\n\t\t\tSecurityContext context = SecurityContextHolder.getContext();\n\t\t\tAuthentication authentication = context.getAuthentication();\n\t\t\tAssert.state(authentication != null,\n\t\t\t\t\t"Unable to get a " + "ConnectionRepository: no user signed in");\n\t\t\treturn authentication.getName();\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.social;\n\nimport java.util.List;\n\nimport org.thymeleaf.spring4.SpringTemplateEngine;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContext;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.social.UserIdSource;\nimport org.springframework.social.config.annotation.EnableSocial;\nimport org.springframework.social.config.annotation.SocialConfigurerAdapter;\nimport org.springframework.social.connect.ConnectionFactoryLocator;\nimport org.springframework.social.connect.ConnectionRepository;\nimport org.springframework.social.connect.UsersConnectionRepository;\nimport org.springframework.social.connect.web.ConnectController;\nimport org.springframework.social.connect.web.ConnectInterceptor;\nimport org.springframework.social.connect.web.DisconnectInterceptor;\nimport org.springframework.social.connect.web.ProviderSignInController;\nimport org.springframework.social.connect.web.ProviderSignInInterceptor;\nimport org.springframework.social.connect.web.SignInAdapter;\nimport org.springframework.social.connect.web.thymeleaf.SpringSocialDialect;\nimport org.springframework.util.Assert;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.web.servlet.view.BeanNameViewResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Social\'s web connection\n * support.\n *\n * @author Craig Walls\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass({ ConnectController.class, SocialConfigurerAdapter.class })\n@ConditionalOnBean({ ConnectionFactoryLocator.class, UsersConnectionRepository.class })\n@AutoConfigureBefore(ThymeleafAutoConfiguration.class)\n@AutoConfigureAfter(WebMvcAutoConfiguration.class)\npublic class SocialWebAutoConfiguration {\n\n\t@Configuration\n\t@EnableSocial\n\t@ConditionalOnWebApplication\n\tprotected static class SocialAutoConfigurationAdapter\n\t\t\textends SocialConfigurerAdapter {\n\n\t\tprivate final List<ConnectInterceptor<?>> connectInterceptors;\n\n\t\tprivate final List<DisconnectInterceptor<?>> disconnectInterceptors;\n\n\t\tprivate final List<ProviderSignInInterceptor<?>> signInInterceptors;\n\n\t\tpublic SocialAutoConfigurationAdapter(\n\t\t\t\tObjectProvider<List<ConnectInterceptor<?>>> connectInterceptorsProvider,\n\t\t\t\tObjectProvider<List<DisconnectInterceptor<?>>> disconnectInterceptorsProvider,\n\t\t\t\tObjectProvider<List<ProviderSignInInterceptor<?>>> signInInterceptorsProvider) {\n\t\t\tthis.connectInterceptors = connectInterceptorsProvider.getIfAvailable();\n\t\t\tthis.disconnectInterceptors = disconnectInterceptorsProvider.getIfAvailable();\n\t\t\tthis.signInInterceptors = signInInterceptorsProvider.getIfAvailable();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(ConnectController.class)\n\t\tpublic ConnectController connectController(\n\t\t\t\tConnectionFactoryLocator factoryLocator,\n\t\t\t\tConnectionRepository repository) {\n\t\t\tConnectController controller = new ConnectController(factoryLocator,\n\t\t\t\t\trepository);\n\t\t\tif (!CollectionUtils.isEmpty(this.connectInterceptors)) {\n\t\t\t\tcontroller.setConnectInterceptors(this.connectInterceptors);\n\t\t\t}\n\t\t\tif (!CollectionUtils.isEmpty(this.disconnectInterceptors)) {\n\t\t\t\tcontroller.setDisconnectInterceptors(this.disconnectInterceptors);\n\t\t\t}\n\t\t\treturn controller;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnProperty(prefix = "spring.social", name = "auto-connection-views")\n\t\tpublic BeanNameViewResolver beanNameViewResolver() {\n\t\t\tBeanNameViewResolver viewResolver = new BeanNameViewResolver();\n\t\t\tviewResolver.setOrder(Ordered.HIGHEST_PRECEDENCE);\n\t\t\treturn viewResolver;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnBean(SignInAdapter.class)\n\t\t@ConditionalOnMissingBean\n\t\tpublic ProviderSignInController signInController(\n\t\t\t\tConnectionFactoryLocator factoryLocator,\n\t\t\t\tUsersConnectionRepository usersRepository, SignInAdapter signInAdapter) {\n\t\t\tProviderSignInController controller = new ProviderSignInController(\n\t\t\t\t\tfactoryLocator, usersRepository, signInAdapter);\n\t\t\tif (!CollectionUtils.isEmpty(this.signInInterceptors)) {\n\t\t\t\tcontroller.setSignInInterceptors(this.signInInterceptors);\n\t\t\t}\n\t\t\treturn controller;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@EnableSocial\n\t@ConditionalOnWebApplication\n\t@ConditionalOnMissingClass("org.springframework.security.core.context.SecurityContextHolder")\n\tprotected static class AnonymousUserIdSourceConfig extends SocialConfigurerAdapter {\n\n\t\t@Override\n\t\tpublic UserIdSource getUserIdSource() {\n\t\t\treturn new UserIdSource() {\n\t\t\t\t@Override\n\t\t\t\tpublic String getUserId() {\n\t\t\t\t\treturn "anonymous";\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@EnableSocial\n\t@ConditionalOnWebApplication\n\t@ConditionalOnClass(SecurityContextHolder.class)\n\tprotected static class AuthenticationUserIdSourceConfig\n\t\t\textends SocialConfigurerAdapter {\n\n\t\t@Override\n\t\tpublic UserIdSource getUserIdSource() {\n\t\t\treturn new SecurityContextUserIdSource();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(SpringTemplateEngine.class)\n\tprotected static class SpringSocialThymeleafConfig {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic SpringSocialDialect springSocialDialect() {\n\t\t\treturn new SpringSocialDialect();\n\t\t}\n\n\t}\n\n\tprivate static class SecurityContextUserIdSource implements UserIdSource {\n\n\t\t@Override\n\t\tpublic String getUserId() {\n\t\t\tSecurityContext context = SecurityContextHolder.getContext();\n\t\t\tAuthentication authentication = context.getAuthentication();\n\t\t\tAssert.state(authentication != null,\n\t\t\t\t\t"Unable to get a " + "ConnectionRepository: no user signed in");\n\t\t\treturn authentication.getName();\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
