{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/HazelcastJCacheCustomizationConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2012-2017 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.cache;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Properties;\n+\n+import com.hazelcast.core.HazelcastInstance;\n+\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.io.Resource;\n+\n+/**\n+ * JCache customization for Hazelcast.\n+ *\n+ * @author Stephane Nicoll\n+ */\n+@Configuration\n+@ConditionalOnClass(HazelcastInstance.class)\n+class HazelcastJCacheCustomizationConfiguration {\n+\n+\t@Bean\n+\tpublic HazelcastPropertiesCustomizer hazelcastPropertiesCustomizer(\n+\t\t\tObjectProvider<HazelcastInstance> hazelcastInstance) {\n+\t\treturn new HazelcastPropertiesCustomizer(\n+\t\t\t\thazelcastInstance.getIfUnique());\n+\t}\n+\n+\tprivate static class HazelcastPropertiesCustomizer\n+\t\t\timplements JCachePropertiesCustomizer {\n+\n+\t\tprivate final HazelcastInstance hazelcastInstance;\n+\n+\t\tHazelcastPropertiesCustomizer(HazelcastInstance hazelcastInstance) {\n+\t\t\tthis.hazelcastInstance = hazelcastInstance;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void customize(CacheProperties cacheProperties, Properties properties) {\n+\t\t\tResource configLocation = cacheProperties\n+\t\t\t\t\t.resolveConfigLocation(cacheProperties.getJcache().getConfig());\n+\t\t\tif (configLocation != null) {\n+\t\t\t\t// Hazelcast does not use the URI as a mean to specify a custom config.\n+\t\t\t\tproperties.setProperty("hazelcast.config.location",\n+\t\t\t\t\t\ttoUri(configLocation).toString());\n+\t\t\t}\n+\t\t\telse if (this.hazelcastInstance != null) {\n+\t\t\t\tString name = this.hazelcastInstance.getName();\n+\t\t\t\tif (name != null) {\n+\t\t\t\t\tproperties.setProperty("hazelcast.instance.name", name);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\tprivate static URI toUri(Resource config) {\n+\t\t\ttry {\n+\t\t\t\treturn config.getURI();\n+\t\t\t}\n+\t\t\tcatch (IOException ex) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t"Could not get URI from " + config, ex);\n+\t\t\t}\n+\t\t}\n+\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.cache;\n\nimport java.io.IOException;\nimport java.net.URI;\nimport java.util.Properties;\n\nimport com.hazelcast.core.HazelcastInstance;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.Resource;\n\n/**\n * JCache customization for Hazelcast.\n *\n * @author Stephane Nicoll\n */\n@Configuration\n@ConditionalOnClass(HazelcastInstance.class)\nclass HazelcastJCacheCustomizationConfiguration {\n\n\t@Bean\n\tpublic HazelcastPropertiesCustomizer hazelcastPropertiesCustomizer(\n\t\t\tObjectProvider<HazelcastInstance> hazelcastInstance) {\n\t\treturn new HazelcastPropertiesCustomizer(\n\t\t\t\thazelcastInstance.getIfUnique());\n\t}\n\n\tprivate static class HazelcastPropertiesCustomizer\n\t\t\timplements JCachePropertiesCustomizer {\n\n\t\tprivate final HazelcastInstance hazelcastInstance;\n\n\t\tHazelcastPropertiesCustomizer(HazelcastInstance hazelcastInstance) {\n\t\t\tthis.hazelcastInstance = hazelcastInstance;\n\t\t}\n\n\t\t@Override\n\t\tpublic void customize(CacheProperties cacheProperties, Properties properties) {\n\t\t\tResource configLocation = cacheProperties\n\t\t\t\t\t.resolveConfigLocation(cacheProperties.getJcache().getConfig());\n\t\t\tif (configLocation != null) {\n\t\t\t\t// Hazelcast does not use the URI as a mean to specify a custom config.\n\t\t\t\tproperties.setProperty("hazelcast.config.location",\n\t\t\t\t\t\ttoUri(configLocation).toString());\n\t\t\t}\n\t\t\telse if (this.hazelcastInstance != null) {\n\t\t\t\tString name = this.hazelcastInstance.getName();\n\t\t\t\tif (name != null) {\n\t\t\t\t\tproperties.setProperty("hazelcast.instance.name", name);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tprivate static URI toUri(Resource config) {\n\t\t\ttry {\n\t\t\t\treturn config.getURI();\n\t\t\t}\n\t\t\tcatch (IOException ex) {\n\t\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\t"Could not get URI from " + config, ex);\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
