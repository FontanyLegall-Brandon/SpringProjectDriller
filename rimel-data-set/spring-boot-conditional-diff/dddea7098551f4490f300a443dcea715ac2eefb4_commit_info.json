{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/info/ProjectInfoAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/info/ProjectInfoAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -22,9 +22,11 @@ import java.util.Properties;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionOutcome;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnResource;\n import org.springframework.boot.autoconfigure.condition.SpringBootCondition;\n import org.springframework.boot.bind.RelaxedPropertyResolver;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.info.BuildProperties;\n import org.springframework.boot.info.GitProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.ConditionContext;\n@@ -60,6 +62,13 @@ public class ProjectInfoAutoConfiguration {\n \t\treturn new GitProperties(loadFrom(this.properties.getGit().getLocation(), "git"));\n \t}\n \n+\t@ConditionalOnResource(resources = "${spring.info.build.location:classpath:META-INF/boot/build.properties}")\n+\t@ConditionalOnMissingBean\n+\t@Bean\n+\tpublic BuildProperties buildProperties() throws Exception {\n+\t\treturn new BuildProperties(loadFrom(this.properties.getBuild().getLocation(), "build"));\n+\t}\n+\n \tprotected Properties loadFrom(Resource location, String prefix) throws IOException {\n \t\tString p = prefix.endsWith(".") ? prefix : prefix + ".";\n \t\tProperties source = PropertiesLoaderUtils.loadProperties(location);\n@@ -72,7 +81,6 @@ public class ProjectInfoAutoConfiguration {\n \t\treturn target;\n \t}\n \n-\n \tstatic class GitResourceAvailableCondition extends SpringBootCondition {\n \n \t\tprivate final ResourceLoader defaultResourceLoader = new DefaultResourceLoader();\n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.info;\n\nimport java.io.IOException;\nimport java.util.Properties;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnResource;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.bind.RelaxedPropertyResolver;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.info.BuildProperties;\nimport org.springframework.boot.info.GitProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.PropertyResolver;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.core.io.support.PropertiesLoaderUtils;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for various project information.\n *\n * @author Stephane Nicoll\n * @since 1.4.0\n */\n@Configuration\n@EnableConfigurationProperties(ProjectInfoProperties.class)\npublic class ProjectInfoAutoConfiguration {\n\n\tprivate final ProjectInfoProperties properties;\n\n\tpublic ProjectInfoAutoConfiguration(ProjectInfoProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Conditional(GitResourceAvailableCondition.class)\n\t@ConditionalOnMissingBean\n\t@Bean\n\tpublic GitProperties gitProperties() throws Exception {\n\t\treturn new GitProperties(loadFrom(this.properties.getGit().getLocation(), "git"));\n\t}\n\n\t@ConditionalOnResource(resources = "${spring.info.build.location:classpath:META-INF/boot/build.properties}")\n\t@ConditionalOnMissingBean\n\t@Bean\n\tpublic BuildProperties buildProperties() throws Exception {\n\t\treturn new BuildProperties(loadFrom(this.properties.getBuild().getLocation(), "build"));\n\t}\n\n\tprotected Properties loadFrom(Resource location, String prefix) throws IOException {\n\t\tString p = prefix.endsWith(".") ? prefix : prefix + ".";\n\t\tProperties source = PropertiesLoaderUtils.loadProperties(location);\n\t\tProperties target = new Properties();\n\t\tfor (String key : source.stringPropertyNames()) {\n\t\t\tif (key.startsWith(p)) {\n\t\t\t\ttarget.put(key.substring(p.length(), key.length()), source.get(key));\n\t\t\t}\n\t\t}\n\t\treturn target;\n\t}\n\n\tstatic class GitResourceAvailableCondition extends SpringBootCondition {\n\n\t\tprivate final ResourceLoader defaultResourceLoader = new DefaultResourceLoader();\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tResourceLoader loader = context.getResourceLoader() == null\n\t\t\t\t\t? this.defaultResourceLoader : context.getResourceLoader();\n\t\t\tPropertyResolver propertyResolver = context.getEnvironment();\n\t\t\tRelaxedPropertyResolver resolver = new RelaxedPropertyResolver(\n\t\t\t\t\tpropertyResolver, "spring.info.git.");\n\t\t\tString location = resolver.getProperty("location");\n\t\t\tif (location == null) {\n\t\t\t\tresolver = new RelaxedPropertyResolver(propertyResolver, "spring.git.");\n\t\t\t\tlocation = resolver.getProperty("properties");\n\t\t\t\tif (location == null) {\n\t\t\t\t\tlocation = "classpath:git.properties";\n\t\t\t\t}\n\t\t\t}\n\t\t\tboolean match = loader.getResource(location).exists();\n\t\t\treturn new ConditionOutcome(match,\n\t\t\t\t\t"Git info " + (match ? "found" : "not found") + " at " + location);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.info;\n\nimport java.io.IOException;\nimport java.util.Properties;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.bind.RelaxedPropertyResolver;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.info.GitProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.PropertyResolver;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.core.io.support.PropertiesLoaderUtils;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for various project information.\n *\n * @author Stephane Nicoll\n * @since 1.4.0\n */\n@Configuration\n@EnableConfigurationProperties(ProjectInfoProperties.class)\npublic class ProjectInfoAutoConfiguration {\n\n\tprivate final ProjectInfoProperties properties;\n\n\tpublic ProjectInfoAutoConfiguration(ProjectInfoProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Conditional(GitResourceAvailableCondition.class)\n\t@ConditionalOnMissingBean\n\t@Bean\n\tpublic GitProperties gitProperties() throws Exception {\n\t\treturn new GitProperties(loadFrom(this.properties.getGit().getLocation(), "git"));\n\t}\n\n\tprotected Properties loadFrom(Resource location, String prefix) throws IOException {\n\t\tString p = prefix.endsWith(".") ? prefix : prefix + ".";\n\t\tProperties source = PropertiesLoaderUtils.loadProperties(location);\n\t\tProperties target = new Properties();\n\t\tfor (String key : source.stringPropertyNames()) {\n\t\t\tif (key.startsWith(p)) {\n\t\t\t\ttarget.put(key.substring(p.length(), key.length()), source.get(key));\n\t\t\t}\n\t\t}\n\t\treturn target;\n\t}\n\n\n\tstatic class GitResourceAvailableCondition extends SpringBootCondition {\n\n\t\tprivate final ResourceLoader defaultResourceLoader = new DefaultResourceLoader();\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tResourceLoader loader = context.getResourceLoader() == null\n\t\t\t\t\t? this.defaultResourceLoader : context.getResourceLoader();\n\t\t\tPropertyResolver propertyResolver = context.getEnvironment();\n\t\t\tRelaxedPropertyResolver resolver = new RelaxedPropertyResolver(\n\t\t\t\t\tpropertyResolver, "spring.info.git.");\n\t\t\tString location = resolver.getProperty("location");\n\t\t\tif (location == null) {\n\t\t\t\tresolver = new RelaxedPropertyResolver(propertyResolver, "spring.git.");\n\t\t\t\tlocation = resolver.getProperty("properties");\n\t\t\t\tif (location == null) {\n\t\t\t\t\tlocation = "classpath:git.properties";\n\t\t\t\t}\n\t\t\t}\n\t\t\tboolean match = loader.getResource(location).exists();\n\t\t\treturn new ConditionOutcome(match,\n\t\t\t\t\t"Git info " + (match ? "found" : "not found") + " at " + location);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
