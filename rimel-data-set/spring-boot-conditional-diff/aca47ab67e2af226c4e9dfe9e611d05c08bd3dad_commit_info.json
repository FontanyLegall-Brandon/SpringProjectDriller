{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2014 the original author or authors.\n+ * Copyright 2012-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -288,6 +288,7 @@ public class WebMvcAutoConfiguration {\n \t\t}\n \n \t\t@Configuration\n+\t\t@ConditionalOnProperty(value = "spring.favicon.enabled", matchIfMissing = true)\n \t\tpublic static class FaviconConfiguration implements ResourceLoaderAware {\n \n \t\t\tprivate ResourceLoader resourceLoader;\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.List;\n\nimport javax.servlet.Servlet;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.ListableBeanFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ResourceLoaderAware;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.core.convert.converter.GenericConverter;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.format.Formatter;\nimport org.springframework.format.FormatterRegistry;\nimport org.springframework.format.datetime.DateFormatter;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.util.StringUtils;\nimport org.springframework.validation.DefaultMessageCodesResolver;\nimport org.springframework.validation.MessageCodesResolver;\nimport org.springframework.web.accept.ContentNegotiationManager;\nimport org.springframework.web.context.request.RequestContextListener;\nimport org.springframework.web.filter.HiddenHttpMethodFilter;\nimport org.springframework.web.servlet.DispatcherServlet;\nimport org.springframework.web.servlet.LocaleResolver;\nimport org.springframework.web.servlet.View;\nimport org.springframework.web.servlet.ViewResolver;\nimport org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\nimport org.springframework.web.servlet.config.annotation.ViewControllerRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\nimport org.springframework.web.servlet.handler.SimpleUrlHandlerMapping;\nimport org.springframework.web.servlet.i18n.FixedLocaleResolver;\nimport org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;\nimport org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;\nimport org.springframework.web.servlet.resource.ResourceHttpRequestHandler;\nimport org.springframework.web.servlet.view.BeanNameViewResolver;\nimport org.springframework.web.servlet.view.ContentNegotiatingViewResolver;\nimport org.springframework.web.servlet.view.InternalResourceViewResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link EnableWebMvc Web MVC}.\n *\n * @author Phillip Webb\n * @author Dave Syer\n * @author Andy Wilkinson\n */\n@Configuration\n@ConditionalOnWebApplication\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class,\n\t\tWebMvcConfigurerAdapter.class })\n@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)\n@Order(Ordered.HIGHEST_PRECEDENCE + 10)\n@AutoConfigureAfter(DispatcherServletAutoConfiguration.class)\npublic class WebMvcAutoConfiguration {\n\n\tprivate static final String[] SERVLET_RESOURCE_LOCATIONS = { "/" };\n\n\tprivate static final String[] CLASSPATH_RESOURCE_LOCATIONS = {\n\t\t\t"classpath:/META-INF/resources/", "classpath:/resources/",\n\t\t\t"classpath:/static/", "classpath:/public/" };\n\n\tprivate static final String[] RESOURCE_LOCATIONS;\n\tstatic {\n\t\tRESOURCE_LOCATIONS = new String[CLASSPATH_RESOURCE_LOCATIONS.length\n\t\t\t\t+ SERVLET_RESOURCE_LOCATIONS.length];\n\t\tSystem.arraycopy(SERVLET_RESOURCE_LOCATIONS, 0, RESOURCE_LOCATIONS, 0,\n\t\t\t\tSERVLET_RESOURCE_LOCATIONS.length);\n\t\tSystem.arraycopy(CLASSPATH_RESOURCE_LOCATIONS, 0, RESOURCE_LOCATIONS,\n\t\t\t\tSERVLET_RESOURCE_LOCATIONS.length, CLASSPATH_RESOURCE_LOCATIONS.length);\n\t}\n\n\tprivate static final String[] STATIC_INDEX_HTML_RESOURCES;\n\tstatic {\n\t\tSTATIC_INDEX_HTML_RESOURCES = new String[RESOURCE_LOCATIONS.length];\n\t\tfor (int i = 0; i < STATIC_INDEX_HTML_RESOURCES.length; i++) {\n\t\t\tSTATIC_INDEX_HTML_RESOURCES[i] = RESOURCE_LOCATIONS[i] + "index.html";\n\t\t}\n\t}\n\n\tpublic static String DEFAULT_PREFIX = "";\n\n\tpublic static String DEFAULT_SUFFIX = "";\n\n\t@Bean\n\t@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)\n\tpublic HiddenHttpMethodFilter hiddenHttpMethodFilter() {\n\t\treturn new HiddenHttpMethodFilter();\n\t}\n\n\t// Defined as a nested config to ensure WebMvcConfigurerAdapter is not read when not\n\t// on the classpath\n\t@Configuration\n\t@Import(EnableWebMvcConfiguration.class)\n\t@EnableConfigurationProperties({ WebMvcProperties.class, ResourceProperties.class })\n\tpublic static class WebMvcAutoConfigurationAdapter extends WebMvcConfigurerAdapter {\n\n\t\tprivate static Log logger = LogFactory.getLog(WebMvcConfigurerAdapter.class);\n\n\t\t@Value("${spring.view.prefix:}")\n\t\tprivate String prefix = "";\n\n\t\t@Value("${spring.view.suffix:}")\n\t\tprivate String suffix = "";\n\n\t\t@Autowired\n\t\tprivate ResourceProperties resourceProperties = new ResourceProperties();\n\n\t\t@Autowired\n\t\tprivate WebMvcProperties mvcProperties = new WebMvcProperties();\n\n\t\t@Autowired\n\t\tprivate ListableBeanFactory beanFactory;\n\n\t\t@Autowired\n\t\tprivate ResourceLoader resourceLoader;\n\n\t\t@Autowired\n\t\tprivate HttpMessageConverters messageConverters;\n\n\t\t@Override\n\t\tpublic void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n\t\t\tconverters.addAll(this.messageConverters.getConverters());\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(InternalResourceViewResolver.class)\n\t\tpublic InternalResourceViewResolver defaultViewResolver() {\n\t\t\tInternalResourceViewResolver resolver = new InternalResourceViewResolver();\n\t\t\tresolver.setPrefix(this.prefix);\n\t\t\tresolver.setSuffix(this.suffix);\n\t\t\treturn resolver;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(RequestContextListener.class)\n\t\tpublic RequestContextListener requestContextListener() {\n\t\t\treturn new RequestContextListener();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnBean(View.class)\n\t\tpublic BeanNameViewResolver beanNameViewResolver() {\n\t\t\tBeanNameViewResolver resolver = new BeanNameViewResolver();\n\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 10);\n\t\t\treturn resolver;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnBean(ViewResolver.class)\n\t\t@ConditionalOnMissingBean(name = "viewResolver", value = ContentNegotiatingViewResolver.class)\n\t\tpublic ContentNegotiatingViewResolver viewResolver(BeanFactory beanFactory) {\n\t\t\tContentNegotiatingViewResolver resolver = new ContentNegotiatingViewResolver();\n\t\t\tresolver.setContentNegotiationManager(beanFactory\n\t\t\t\t\t.getBean(ContentNegotiationManager.class));\n\t\t\t// ContentNegotiatingViewResolver uses all the other view resolvers to locate\n\t\t\t// a view so it should have a high precedence\n\t\t\tresolver.setOrder(Ordered.HIGHEST_PRECEDENCE);\n\t\t\treturn resolver;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(LocaleResolver.class)\n\t\t@ConditionalOnProperty(prefix = "spring.mvc", name = "locale")\n\t\tpublic LocaleResolver localeResolver() {\n\t\t\treturn new FixedLocaleResolver(\n\t\t\t\t\tStringUtils.parseLocaleString(this.mvcProperties.getLocale()));\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnProperty(prefix = "spring.mvc", name = "date-format")\n\t\tpublic Formatter<Date> dateFormatter() {\n\t\t\treturn new DateFormatter(this.mvcProperties.getDateFormat());\n\t\t}\n\n\t\t@Override\n\t\tpublic MessageCodesResolver getMessageCodesResolver() {\n\t\t\tif (this.mvcProperties.getMessageCodesResolverFormat() != null) {\n\t\t\t\tDefaultMessageCodesResolver resolver = new DefaultMessageCodesResolver();\n\t\t\t\tresolver.setMessageCodeFormatter(this.mvcProperties\n\t\t\t\t\t\t.getMessageCodesResolverFormat());\n\t\t\t\treturn resolver;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t@Override\n\t\tpublic void addFormatters(FormatterRegistry registry) {\n\t\t\tfor (Converter<?, ?> converter : getBeansOfType(Converter.class)) {\n\t\t\t\tregistry.addConverter(converter);\n\t\t\t}\n\n\t\t\tfor (GenericConverter converter : getBeansOfType(GenericConverter.class)) {\n\t\t\t\tregistry.addConverter(converter);\n\t\t\t}\n\n\t\t\tfor (Formatter<?> formatter : getBeansOfType(Formatter.class)) {\n\t\t\t\tregistry.addFormatter(formatter);\n\t\t\t}\n\t\t}\n\n\t\tprivate <T> Collection<T> getBeansOfType(Class<T> type) {\n\t\t\treturn this.beanFactory.getBeansOfType(type).values();\n\t\t}\n\n\t\t@Override\n\t\tpublic void addResourceHandlers(ResourceHandlerRegistry registry) {\n\t\t\tif (!this.resourceProperties.isAddMappings()) {\n\t\t\t\tlogger.debug("Default resource handling disabled");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tInteger cachePeriod = this.resourceProperties.getCachePeriod();\n\t\t\tif (!registry.hasMappingForPattern("/webjars/**")) {\n\t\t\t\tregistry.addResourceHandler("/webjars/**")\n\t\t\t\t\t\t.addResourceLocations("classpath:/META-INF/resources/webjars/")\n\t\t\t\t\t\t.setCachePeriod(cachePeriod);\n\t\t\t}\n\t\t\tif (!registry.hasMappingForPattern("/**")) {\n\t\t\t\tregistry.addResourceHandler("/**")\n\t\t\t\t\t\t.addResourceLocations(RESOURCE_LOCATIONS)\n\t\t\t\t\t\t.setCachePeriod(cachePeriod);\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void addViewControllers(ViewControllerRegistry registry) {\n\t\t\taddStaticIndexHtmlViewControllers(registry);\n\t\t}\n\n\t\tprivate void addStaticIndexHtmlViewControllers(ViewControllerRegistry registry) {\n\t\t\tfor (String resource : STATIC_INDEX_HTML_RESOURCES) {\n\t\t\t\tif (this.resourceLoader.getResource(resource).exists()) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlogger.info("Adding welcome page: "\n\t\t\t\t\t\t\t\t+ this.resourceLoader.getResource(resource).getURL());\n\t\t\t\t\t}\n\t\t\t\t\tcatch (IOException ex) {\n\t\t\t\t\t\t// Ignore\n\t\t\t\t\t}\n\t\t\t\t\t// Use forward: prefix so that no view resolution is done\n\t\t\t\t\tregistry.addViewController("/").setViewName("forward:/index.html");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t@Configuration\n\t\t@ConditionalOnProperty(value = "spring.favicon.enabled", matchIfMissing = true)\n\t\tpublic static class FaviconConfiguration implements ResourceLoaderAware {\n\n\t\t\tprivate ResourceLoader resourceLoader;\n\n\t\t\t@Bean\n\t\t\tpublic SimpleUrlHandlerMapping faviconHandlerMapping() {\n\t\t\t\tSimpleUrlHandlerMapping mapping = new SimpleUrlHandlerMapping();\n\t\t\t\tmapping.setOrder(Integer.MIN_VALUE + 1);\n\t\t\t\tmapping.setUrlMap(Collections.singletonMap("**/favicon.ico",\n\t\t\t\t\t\tfaviconRequestHandler()));\n\t\t\t\treturn mapping;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void setResourceLoader(ResourceLoader resourceLoader) {\n\t\t\t\tthis.resourceLoader = resourceLoader;\n\t\t\t}\n\n\t\t\t@Bean\n\t\t\tpublic ResourceHttpRequestHandler faviconRequestHandler() {\n\t\t\t\tResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler();\n\t\t\t\trequestHandler.setLocations(getLocations());\n\t\t\t\treturn requestHandler;\n\t\t\t}\n\n\t\t\tprivate List<Resource> getLocations() {\n\t\t\t\tList<Resource> locations = new ArrayList<Resource>(\n\t\t\t\t\t\tCLASSPATH_RESOURCE_LOCATIONS.length + 1);\n\t\t\t\tfor (String location : CLASSPATH_RESOURCE_LOCATIONS) {\n\t\t\t\t\tlocations.add(this.resourceLoader.getResource(location));\n\t\t\t\t}\n\t\t\t\tlocations.add(new ClassPathResource("/"));\n\t\t\t\treturn Collections.unmodifiableList(locations);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Configuration equivalent to {@code @EnableWebMvc}.\n\t */\n\t@Configuration\n\tpublic static class EnableWebMvcConfiguration extends DelegatingWebMvcConfiguration {\n\n\t\t@Autowired(required = false)\n\t\tprivate WebMvcProperties mvcProperties;\n\n\t\t@Bean\n\t\t@Override\n\t\tpublic RequestMappingHandlerAdapter requestMappingHandlerAdapter() {\n\t\t\tRequestMappingHandlerAdapter adapter = super.requestMappingHandlerAdapter();\n\t\t\tadapter.setIgnoreDefaultModelOnRedirect(this.mvcProperties == null ? true\n\t\t\t\t\t: this.mvcProperties.isIgnoreDefaultModelOnRedirect());\n\t\t\treturn adapter;\n\t\t}\n\n\t\t@Bean\n\t\t@Primary\n\t\t@Override\n\t\tpublic RequestMappingHandlerMapping requestMappingHandlerMapping() {\n\t\t\t// Must be @Primary for MvcUriComponentsBuilder to work\n\t\t\treturn super.requestMappingHandlerMapping();\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.List;\n\nimport javax.servlet.Servlet;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.ListableBeanFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ResourceLoaderAware;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.core.convert.converter.GenericConverter;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.format.Formatter;\nimport org.springframework.format.FormatterRegistry;\nimport org.springframework.format.datetime.DateFormatter;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.util.StringUtils;\nimport org.springframework.validation.DefaultMessageCodesResolver;\nimport org.springframework.validation.MessageCodesResolver;\nimport org.springframework.web.accept.ContentNegotiationManager;\nimport org.springframework.web.context.request.RequestContextListener;\nimport org.springframework.web.filter.HiddenHttpMethodFilter;\nimport org.springframework.web.servlet.DispatcherServlet;\nimport org.springframework.web.servlet.LocaleResolver;\nimport org.springframework.web.servlet.View;\nimport org.springframework.web.servlet.ViewResolver;\nimport org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\nimport org.springframework.web.servlet.config.annotation.ViewControllerRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\nimport org.springframework.web.servlet.handler.SimpleUrlHandlerMapping;\nimport org.springframework.web.servlet.i18n.FixedLocaleResolver;\nimport org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;\nimport org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;\nimport org.springframework.web.servlet.resource.ResourceHttpRequestHandler;\nimport org.springframework.web.servlet.view.BeanNameViewResolver;\nimport org.springframework.web.servlet.view.ContentNegotiatingViewResolver;\nimport org.springframework.web.servlet.view.InternalResourceViewResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link EnableWebMvc Web MVC}.\n *\n * @author Phillip Webb\n * @author Dave Syer\n * @author Andy Wilkinson\n */\n@Configuration\n@ConditionalOnWebApplication\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class,\n\t\tWebMvcConfigurerAdapter.class })\n@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)\n@Order(Ordered.HIGHEST_PRECEDENCE + 10)\n@AutoConfigureAfter(DispatcherServletAutoConfiguration.class)\npublic class WebMvcAutoConfiguration {\n\n\tprivate static final String[] SERVLET_RESOURCE_LOCATIONS = { "/" };\n\n\tprivate static final String[] CLASSPATH_RESOURCE_LOCATIONS = {\n\t\t\t"classpath:/META-INF/resources/", "classpath:/resources/",\n\t\t\t"classpath:/static/", "classpath:/public/" };\n\n\tprivate static final String[] RESOURCE_LOCATIONS;\n\tstatic {\n\t\tRESOURCE_LOCATIONS = new String[CLASSPATH_RESOURCE_LOCATIONS.length\n\t\t\t\t+ SERVLET_RESOURCE_LOCATIONS.length];\n\t\tSystem.arraycopy(SERVLET_RESOURCE_LOCATIONS, 0, RESOURCE_LOCATIONS, 0,\n\t\t\t\tSERVLET_RESOURCE_LOCATIONS.length);\n\t\tSystem.arraycopy(CLASSPATH_RESOURCE_LOCATIONS, 0, RESOURCE_LOCATIONS,\n\t\t\t\tSERVLET_RESOURCE_LOCATIONS.length, CLASSPATH_RESOURCE_LOCATIONS.length);\n\t}\n\n\tprivate static final String[] STATIC_INDEX_HTML_RESOURCES;\n\tstatic {\n\t\tSTATIC_INDEX_HTML_RESOURCES = new String[RESOURCE_LOCATIONS.length];\n\t\tfor (int i = 0; i < STATIC_INDEX_HTML_RESOURCES.length; i++) {\n\t\t\tSTATIC_INDEX_HTML_RESOURCES[i] = RESOURCE_LOCATIONS[i] + "index.html";\n\t\t}\n\t}\n\n\tpublic static String DEFAULT_PREFIX = "";\n\n\tpublic static String DEFAULT_SUFFIX = "";\n\n\t@Bean\n\t@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)\n\tpublic HiddenHttpMethodFilter hiddenHttpMethodFilter() {\n\t\treturn new HiddenHttpMethodFilter();\n\t}\n\n\t// Defined as a nested config to ensure WebMvcConfigurerAdapter is not read when not\n\t// on the classpath\n\t@Configuration\n\t@Import(EnableWebMvcConfiguration.class)\n\t@EnableConfigurationProperties({ WebMvcProperties.class, ResourceProperties.class })\n\tpublic static class WebMvcAutoConfigurationAdapter extends WebMvcConfigurerAdapter {\n\n\t\tprivate static Log logger = LogFactory.getLog(WebMvcConfigurerAdapter.class);\n\n\t\t@Value("${spring.view.prefix:}")\n\t\tprivate String prefix = "";\n\n\t\t@Value("${spring.view.suffix:}")\n\t\tprivate String suffix = "";\n\n\t\t@Autowired\n\t\tprivate ResourceProperties resourceProperties = new ResourceProperties();\n\n\t\t@Autowired\n\t\tprivate WebMvcProperties mvcProperties = new WebMvcProperties();\n\n\t\t@Autowired\n\t\tprivate ListableBeanFactory beanFactory;\n\n\t\t@Autowired\n\t\tprivate ResourceLoader resourceLoader;\n\n\t\t@Autowired\n\t\tprivate HttpMessageConverters messageConverters;\n\n\t\t@Override\n\t\tpublic void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n\t\t\tconverters.addAll(this.messageConverters.getConverters());\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(InternalResourceViewResolver.class)\n\t\tpublic InternalResourceViewResolver defaultViewResolver() {\n\t\t\tInternalResourceViewResolver resolver = new InternalResourceViewResolver();\n\t\t\tresolver.setPrefix(this.prefix);\n\t\t\tresolver.setSuffix(this.suffix);\n\t\t\treturn resolver;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(RequestContextListener.class)\n\t\tpublic RequestContextListener requestContextListener() {\n\t\t\treturn new RequestContextListener();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnBean(View.class)\n\t\tpublic BeanNameViewResolver beanNameViewResolver() {\n\t\t\tBeanNameViewResolver resolver = new BeanNameViewResolver();\n\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 10);\n\t\t\treturn resolver;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnBean(ViewResolver.class)\n\t\t@ConditionalOnMissingBean(name = "viewResolver", value = ContentNegotiatingViewResolver.class)\n\t\tpublic ContentNegotiatingViewResolver viewResolver(BeanFactory beanFactory) {\n\t\t\tContentNegotiatingViewResolver resolver = new ContentNegotiatingViewResolver();\n\t\t\tresolver.setContentNegotiationManager(beanFactory\n\t\t\t\t\t.getBean(ContentNegotiationManager.class));\n\t\t\t// ContentNegotiatingViewResolver uses all the other view resolvers to locate\n\t\t\t// a view so it should have a high precedence\n\t\t\tresolver.setOrder(Ordered.HIGHEST_PRECEDENCE);\n\t\t\treturn resolver;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(LocaleResolver.class)\n\t\t@ConditionalOnProperty(prefix = "spring.mvc", name = "locale")\n\t\tpublic LocaleResolver localeResolver() {\n\t\t\treturn new FixedLocaleResolver(\n\t\t\t\t\tStringUtils.parseLocaleString(this.mvcProperties.getLocale()));\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnProperty(prefix = "spring.mvc", name = "date-format")\n\t\tpublic Formatter<Date> dateFormatter() {\n\t\t\treturn new DateFormatter(this.mvcProperties.getDateFormat());\n\t\t}\n\n\t\t@Override\n\t\tpublic MessageCodesResolver getMessageCodesResolver() {\n\t\t\tif (this.mvcProperties.getMessageCodesResolverFormat() != null) {\n\t\t\t\tDefaultMessageCodesResolver resolver = new DefaultMessageCodesResolver();\n\t\t\t\tresolver.setMessageCodeFormatter(this.mvcProperties\n\t\t\t\t\t\t.getMessageCodesResolverFormat());\n\t\t\t\treturn resolver;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t@Override\n\t\tpublic void addFormatters(FormatterRegistry registry) {\n\t\t\tfor (Converter<?, ?> converter : getBeansOfType(Converter.class)) {\n\t\t\t\tregistry.addConverter(converter);\n\t\t\t}\n\n\t\t\tfor (GenericConverter converter : getBeansOfType(GenericConverter.class)) {\n\t\t\t\tregistry.addConverter(converter);\n\t\t\t}\n\n\t\t\tfor (Formatter<?> formatter : getBeansOfType(Formatter.class)) {\n\t\t\t\tregistry.addFormatter(formatter);\n\t\t\t}\n\t\t}\n\n\t\tprivate <T> Collection<T> getBeansOfType(Class<T> type) {\n\t\t\treturn this.beanFactory.getBeansOfType(type).values();\n\t\t}\n\n\t\t@Override\n\t\tpublic void addResourceHandlers(ResourceHandlerRegistry registry) {\n\t\t\tif (!this.resourceProperties.isAddMappings()) {\n\t\t\t\tlogger.debug("Default resource handling disabled");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tInteger cachePeriod = this.resourceProperties.getCachePeriod();\n\t\t\tif (!registry.hasMappingForPattern("/webjars/**")) {\n\t\t\t\tregistry.addResourceHandler("/webjars/**")\n\t\t\t\t\t\t.addResourceLocations("classpath:/META-INF/resources/webjars/")\n\t\t\t\t\t\t.setCachePeriod(cachePeriod);\n\t\t\t}\n\t\t\tif (!registry.hasMappingForPattern("/**")) {\n\t\t\t\tregistry.addResourceHandler("/**")\n\t\t\t\t\t\t.addResourceLocations(RESOURCE_LOCATIONS)\n\t\t\t\t\t\t.setCachePeriod(cachePeriod);\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void addViewControllers(ViewControllerRegistry registry) {\n\t\t\taddStaticIndexHtmlViewControllers(registry);\n\t\t}\n\n\t\tprivate void addStaticIndexHtmlViewControllers(ViewControllerRegistry registry) {\n\t\t\tfor (String resource : STATIC_INDEX_HTML_RESOURCES) {\n\t\t\t\tif (this.resourceLoader.getResource(resource).exists()) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlogger.info("Adding welcome page: "\n\t\t\t\t\t\t\t\t+ this.resourceLoader.getResource(resource).getURL());\n\t\t\t\t\t}\n\t\t\t\t\tcatch (IOException ex) {\n\t\t\t\t\t\t// Ignore\n\t\t\t\t\t}\n\t\t\t\t\t// Use forward: prefix so that no view resolution is done\n\t\t\t\t\tregistry.addViewController("/").setViewName("forward:/index.html");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t@Configuration\n\t\tpublic static class FaviconConfiguration implements ResourceLoaderAware {\n\n\t\t\tprivate ResourceLoader resourceLoader;\n\n\t\t\t@Bean\n\t\t\tpublic SimpleUrlHandlerMapping faviconHandlerMapping() {\n\t\t\t\tSimpleUrlHandlerMapping mapping = new SimpleUrlHandlerMapping();\n\t\t\t\tmapping.setOrder(Integer.MIN_VALUE + 1);\n\t\t\t\tmapping.setUrlMap(Collections.singletonMap("**/favicon.ico",\n\t\t\t\t\t\tfaviconRequestHandler()));\n\t\t\t\treturn mapping;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void setResourceLoader(ResourceLoader resourceLoader) {\n\t\t\t\tthis.resourceLoader = resourceLoader;\n\t\t\t}\n\n\t\t\t@Bean\n\t\t\tpublic ResourceHttpRequestHandler faviconRequestHandler() {\n\t\t\t\tResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler();\n\t\t\t\trequestHandler.setLocations(getLocations());\n\t\t\t\treturn requestHandler;\n\t\t\t}\n\n\t\t\tprivate List<Resource> getLocations() {\n\t\t\t\tList<Resource> locations = new ArrayList<Resource>(\n\t\t\t\t\t\tCLASSPATH_RESOURCE_LOCATIONS.length + 1);\n\t\t\t\tfor (String location : CLASSPATH_RESOURCE_LOCATIONS) {\n\t\t\t\t\tlocations.add(this.resourceLoader.getResource(location));\n\t\t\t\t}\n\t\t\t\tlocations.add(new ClassPathResource("/"));\n\t\t\t\treturn Collections.unmodifiableList(locations);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Configuration equivalent to {@code @EnableWebMvc}.\n\t */\n\t@Configuration\n\tpublic static class EnableWebMvcConfiguration extends DelegatingWebMvcConfiguration {\n\n\t\t@Autowired(required = false)\n\t\tprivate WebMvcProperties mvcProperties;\n\n\t\t@Bean\n\t\t@Override\n\t\tpublic RequestMappingHandlerAdapter requestMappingHandlerAdapter() {\n\t\t\tRequestMappingHandlerAdapter adapter = super.requestMappingHandlerAdapter();\n\t\t\tadapter.setIgnoreDefaultModelOnRedirect(this.mvcProperties == null ? true\n\t\t\t\t\t: this.mvcProperties.isIgnoreDefaultModelOnRedirect());\n\t\t\treturn adapter;\n\t\t}\n\n\t\t@Bean\n\t\t@Primary\n\t\t@Override\n\t\tpublic RequestMappingHandlerMapping requestMappingHandlerMapping() {\n\t\t\t// Must be @Primary for MvcUriComponentsBuilder to work\n\t\t\treturn super.requestMappingHandlerMapping();\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
