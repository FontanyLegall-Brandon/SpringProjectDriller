{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -29,6 +29,7 @@ import org.springframework.batch.core.launch.JobOperator;\n import org.springframework.batch.core.launch.support.SimpleJobOperator;\n import org.springframework.batch.core.repository.JobRepository;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.ExitCodeGenerator;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n@@ -91,7 +92,7 @@ public class BatchAutoConfiguration {\n \t}\n \n \t@Bean\n-\t@ConditionalOnMissingBean\n+\t@ConditionalOnMissingBean(ExitCodeGenerator.class)\n \tpublic JobExecutionExitCodeGenerator jobExecutionExitCodeGenerator() {\n \t\treturn new JobExecutionExitCodeGenerator();\n \t}\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.batch;\n\nimport javax.persistence.EntityManagerFactory;\nimport javax.sql.DataSource;\n\nimport org.springframework.batch.core.configuration.ListableJobLocator;\nimport org.springframework.batch.core.configuration.annotation.BatchConfigurer;\nimport org.springframework.batch.core.converter.JobParametersConverter;\nimport org.springframework.batch.core.explore.JobExplorer;\nimport org.springframework.batch.core.explore.support.JobExplorerFactoryBean;\nimport org.springframework.batch.core.launch.JobLauncher;\nimport org.springframework.batch.core.launch.JobOperator;\nimport org.springframework.batch.core.launch.support.SimpleJobOperator;\nimport org.springframework.batch.core.repository.JobRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.ExitCodeGenerator;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jdbc.core.JdbcOperations;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Batch. By default a\n * Runner will be created and all jobs in the context will be executed on startup.\n * <p>\n * Disable this behavior with {@literal spring.batch.job.enabled=false}).\n * <p>\n * Alternatively, discrete Job names to execute on startup can be supplied by the User\n * with a comma-delimited list: {@literal spring.batch.job.names=job1,job2}. In this case\n * the Runner will first find jobs registered as Beans, then those in the existing\n * JobRegistry.\n *\n * @author Dave Syer\n * @author Eddú Meléndez\n */\n@Configuration\n@ConditionalOnClass({ JobLauncher.class, DataSource.class, JdbcOperations.class })\n@AutoConfigureAfter(HibernateJpaAutoConfiguration.class)\n@ConditionalOnBean(JobLauncher.class)\n@EnableConfigurationProperties(BatchProperties.class)\npublic class BatchAutoConfiguration {\n\n\t@Autowired\n\tprivate BatchProperties properties;\n\n\t@Autowired(required = false)\n\tprivate JobParametersConverter jobParametersConverter;\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnBean(DataSource.class)\n\tpublic BatchDatabaseInitializer batchDatabaseInitializer() {\n\t\treturn new BatchDatabaseInitializer();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnProperty(prefix = "spring.batch.job", name = "enabled", havingValue = "true", matchIfMissing = true)\n\tpublic JobLauncherCommandLineRunner jobLauncherCommandLineRunner(\n\t\t\tJobLauncher jobLauncher, JobExplorer jobExplorer) {\n\t\tJobLauncherCommandLineRunner runner = new JobLauncherCommandLineRunner(\n\t\t\t\tjobLauncher, jobExplorer);\n\t\tString jobNames = this.properties.getJob().getNames();\n\t\tif (StringUtils.hasText(jobNames)) {\n\t\t\trunner.setJobNames(jobNames);\n\t\t}\n\t\treturn runner;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(ExitCodeGenerator.class)\n\tpublic JobExecutionExitCodeGenerator jobExecutionExitCodeGenerator() {\n\t\treturn new JobExecutionExitCodeGenerator();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnBean(DataSource.class)\n\tpublic JobExplorer jobExplorer(DataSource dataSource) throws Exception {\n\t\tJobExplorerFactoryBean factory = new JobExplorerFactoryBean();\n\t\tfactory.setDataSource(dataSource);\n\t\tString tablePrefix = this.properties.getTablePrefix();\n\t\tif (StringUtils.hasText(tablePrefix)) {\n\t\t\tfactory.setTablePrefix(tablePrefix);\n\t\t}\n\t\tfactory.afterPropertiesSet();\n\t\treturn factory.getObject();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(JobOperator.class)\n\tpublic SimpleJobOperator jobOperator(JobExplorer jobExplorer, JobLauncher jobLauncher,\n\t\t\tListableJobLocator jobRegistry, JobRepository jobRepository)\n\t\t\t\t\tthrows Exception {\n\t\tSimpleJobOperator factory = new SimpleJobOperator();\n\t\tfactory.setJobExplorer(jobExplorer);\n\t\tfactory.setJobLauncher(jobLauncher);\n\t\tfactory.setJobRegistry(jobRegistry);\n\t\tfactory.setJobRepository(jobRepository);\n\t\tif (this.jobParametersConverter != null) {\n\t\t\tfactory.setJobParametersConverter(this.jobParametersConverter);\n\t\t}\n\t\treturn factory;\n\t}\n\n\t@ConditionalOnClass(name = "javax.persistence.EntityManagerFactory")\n\t@ConditionalOnMissingBean(BatchConfigurer.class)\n\t@Configuration\n\tprotected static class JpaBatchConfiguration {\n\n\t\t@Autowired\n\t\tprivate BatchProperties properties;\n\n\t\t// The EntityManagerFactory may not be discoverable by type when this condition\n\t\t// is evaluated, so we need a well-known bean name. This is the one used by Spring\n\t\t// Boot in the JPA auto configuration.\n\t\t@Bean\n\t\t@ConditionalOnBean(name = "entityManagerFactory")\n\t\tpublic BasicBatchConfigurer jpaBatchConfigurer(DataSource dataSource,\n\t\t\t\tEntityManagerFactory entityManagerFactory) {\n\t\t\treturn new BasicBatchConfigurer(this.properties, dataSource,\n\t\t\t\t\tentityManagerFactory);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "entityManagerFactory")\n\t\tpublic BasicBatchConfigurer basicBatchConfigurer(DataSource dataSource) {\n\t\t\treturn new BasicBatchConfigurer(this.properties, dataSource);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.batch;\n\nimport javax.persistence.EntityManagerFactory;\nimport javax.sql.DataSource;\n\nimport org.springframework.batch.core.configuration.ListableJobLocator;\nimport org.springframework.batch.core.configuration.annotation.BatchConfigurer;\nimport org.springframework.batch.core.converter.JobParametersConverter;\nimport org.springframework.batch.core.explore.JobExplorer;\nimport org.springframework.batch.core.explore.support.JobExplorerFactoryBean;\nimport org.springframework.batch.core.launch.JobLauncher;\nimport org.springframework.batch.core.launch.JobOperator;\nimport org.springframework.batch.core.launch.support.SimpleJobOperator;\nimport org.springframework.batch.core.repository.JobRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jdbc.core.JdbcOperations;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Batch. By default a\n * Runner will be created and all jobs in the context will be executed on startup.\n * <p>\n * Disable this behavior with {@literal spring.batch.job.enabled=false}).\n * <p>\n * Alternatively, discrete Job names to execute on startup can be supplied by the User\n * with a comma-delimited list: {@literal spring.batch.job.names=job1,job2}. In this case\n * the Runner will first find jobs registered as Beans, then those in the existing\n * JobRegistry.\n *\n * @author Dave Syer\n * @author Eddú Meléndez\n */\n@Configuration\n@ConditionalOnClass({ JobLauncher.class, DataSource.class, JdbcOperations.class })\n@AutoConfigureAfter(HibernateJpaAutoConfiguration.class)\n@ConditionalOnBean(JobLauncher.class)\n@EnableConfigurationProperties(BatchProperties.class)\npublic class BatchAutoConfiguration {\n\n\t@Autowired\n\tprivate BatchProperties properties;\n\n\t@Autowired(required = false)\n\tprivate JobParametersConverter jobParametersConverter;\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnBean(DataSource.class)\n\tpublic BatchDatabaseInitializer batchDatabaseInitializer() {\n\t\treturn new BatchDatabaseInitializer();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnProperty(prefix = "spring.batch.job", name = "enabled", havingValue = "true", matchIfMissing = true)\n\tpublic JobLauncherCommandLineRunner jobLauncherCommandLineRunner(\n\t\t\tJobLauncher jobLauncher, JobExplorer jobExplorer) {\n\t\tJobLauncherCommandLineRunner runner = new JobLauncherCommandLineRunner(\n\t\t\t\tjobLauncher, jobExplorer);\n\t\tString jobNames = this.properties.getJob().getNames();\n\t\tif (StringUtils.hasText(jobNames)) {\n\t\t\trunner.setJobNames(jobNames);\n\t\t}\n\t\treturn runner;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic JobExecutionExitCodeGenerator jobExecutionExitCodeGenerator() {\n\t\treturn new JobExecutionExitCodeGenerator();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnBean(DataSource.class)\n\tpublic JobExplorer jobExplorer(DataSource dataSource) throws Exception {\n\t\tJobExplorerFactoryBean factory = new JobExplorerFactoryBean();\n\t\tfactory.setDataSource(dataSource);\n\t\tString tablePrefix = this.properties.getTablePrefix();\n\t\tif (StringUtils.hasText(tablePrefix)) {\n\t\t\tfactory.setTablePrefix(tablePrefix);\n\t\t}\n\t\tfactory.afterPropertiesSet();\n\t\treturn factory.getObject();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(JobOperator.class)\n\tpublic SimpleJobOperator jobOperator(JobExplorer jobExplorer, JobLauncher jobLauncher,\n\t\t\tListableJobLocator jobRegistry, JobRepository jobRepository)\n\t\t\t\t\tthrows Exception {\n\t\tSimpleJobOperator factory = new SimpleJobOperator();\n\t\tfactory.setJobExplorer(jobExplorer);\n\t\tfactory.setJobLauncher(jobLauncher);\n\t\tfactory.setJobRegistry(jobRegistry);\n\t\tfactory.setJobRepository(jobRepository);\n\t\tif (this.jobParametersConverter != null) {\n\t\t\tfactory.setJobParametersConverter(this.jobParametersConverter);\n\t\t}\n\t\treturn factory;\n\t}\n\n\t@ConditionalOnClass(name = "javax.persistence.EntityManagerFactory")\n\t@ConditionalOnMissingBean(BatchConfigurer.class)\n\t@Configuration\n\tprotected static class JpaBatchConfiguration {\n\n\t\t@Autowired\n\t\tprivate BatchProperties properties;\n\n\t\t// The EntityManagerFactory may not be discoverable by type when this condition\n\t\t// is evaluated, so we need a well-known bean name. This is the one used by Spring\n\t\t// Boot in the JPA auto configuration.\n\t\t@Bean\n\t\t@ConditionalOnBean(name = "entityManagerFactory")\n\t\tpublic BasicBatchConfigurer jpaBatchConfigurer(DataSource dataSource,\n\t\t\t\tEntityManagerFactory entityManagerFactory) {\n\t\t\treturn new BasicBatchConfigurer(this.properties, dataSource,\n\t\t\t\t\tentityManagerFactory);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "entityManagerFactory")\n\t\tpublic BasicBatchConfigurer basicBatchConfigurer(DataSource dataSource) {\n\t\t\treturn new BasicBatchConfigurer(this.properties, dataSource);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
