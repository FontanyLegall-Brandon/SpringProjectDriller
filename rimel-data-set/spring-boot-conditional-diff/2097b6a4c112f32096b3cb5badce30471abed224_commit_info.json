{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -50,6 +50,7 @@ import org.springframework.boot.autoconfigure.template.TemplateLocation;\n import org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties.Reactive;\n import org.springframework.boot.autoconfigure.web.ConditionalOnEnabledResourceChain;\n import org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration;\n+import org.springframework.boot.autoconfigure.web.servlet.ConditionalOnMissingFilterBean;\n import org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.boot.context.properties.PropertyMapper;\n@@ -169,8 +170,8 @@ public class ThymeleafAutoConfiguration {\n \tstatic class ThymeleafWebMvcConfiguration {\n \n \t\t@Bean\n-\t\t@ConditionalOnMissingBean(ResourceUrlEncodingFilter.class)\n \t\t@ConditionalOnEnabledResourceChain\n+\t\t@ConditionalOnMissingFilterBean(ResourceUrlEncodingFilter.class)\n \t\tpublic FilterRegistrationBean<ResourceUrlEncodingFilter> resourceUrlEncodingFilter() {\n \t\t\tFilterRegistrationBean<ResourceUrlEncodingFilter> registration = new FilterRegistrationBean<>(\n \t\t\t\t\tnew ResourceUrlEncodingFilter());\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.thymeleaf;\n\nimport java.util.Collection;\nimport java.util.LinkedHashMap;\n\nimport javax.annotation.PostConstruct;\nimport javax.servlet.DispatcherType;\n\nimport com.github.mxab.thymeleaf.extras.dataattribute.dialect.DataAttributeDialect;\nimport nz.net.ultraq.thymeleaf.LayoutDialect;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.thymeleaf.dialect.IDialect;\nimport org.thymeleaf.extras.java8time.dialect.Java8TimeDialect;\nimport org.thymeleaf.extras.springsecurity5.dialect.SpringSecurityDialect;\nimport org.thymeleaf.spring5.ISpringWebFluxTemplateEngine;\nimport org.thymeleaf.spring5.SpringTemplateEngine;\nimport org.thymeleaf.spring5.SpringWebFluxTemplateEngine;\nimport org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver;\nimport org.thymeleaf.spring5.view.ThymeleafViewResolver;\nimport org.thymeleaf.spring5.view.reactive.ThymeleafReactiveViewResolver;\nimport org.thymeleaf.templatemode.TemplateMode;\nimport org.thymeleaf.templateresolver.ITemplateResolver;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.autoconfigure.template.TemplateLocation;\nimport org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties.Reactive;\nimport org.springframework.boot.autoconfigure.web.ConditionalOnEnabledResourceChain;\nimport org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.servlet.ConditionalOnMissingFilterBean;\nimport org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.context.properties.PropertyMapper;\nimport org.springframework.boot.web.servlet.FilterRegistrationBean;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.util.MimeType;\nimport org.springframework.util.unit.DataSize;\nimport org.springframework.web.servlet.resource.ResourceUrlEncodingFilter;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Thymeleaf.\n *\n * @author Dave Syer\n * @author Andy Wilkinson\n * @author Stephane Nicoll\n * @author Brian Clozel\n * @author Eddú Meléndez\n * @author Daniel Fernández\n * @author Kazuki Shimizu\n * @author Artsiom Yudovin\n */\n@Configuration\n@EnableConfigurationProperties(ThymeleafProperties.class)\n@ConditionalOnClass(TemplateMode.class)\n@AutoConfigureAfter({ WebMvcAutoConfiguration.class, WebFluxAutoConfiguration.class })\npublic class ThymeleafAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnMissingBean(name = "defaultTemplateResolver")\n\tstatic class DefaultTemplateResolverConfiguration {\n\n\t\tprivate static final Log logger = LogFactory\n\t\t\t\t.getLog(DefaultTemplateResolverConfiguration.class);\n\n\t\tprivate final ThymeleafProperties properties;\n\n\t\tprivate final ApplicationContext applicationContext;\n\n\t\tDefaultTemplateResolverConfiguration(ThymeleafProperties properties,\n\t\t\t\tApplicationContext applicationContext) {\n\t\t\tthis.properties = properties;\n\t\t\tthis.applicationContext = applicationContext;\n\t\t}\n\n\t\t@PostConstruct\n\t\tpublic void checkTemplateLocationExists() {\n\t\t\tboolean checkTemplateLocation = this.properties.isCheckTemplateLocation();\n\t\t\tif (checkTemplateLocation) {\n\t\t\t\tTemplateLocation location = new TemplateLocation(\n\t\t\t\t\t\tthis.properties.getPrefix());\n\t\t\t\tif (!location.exists(this.applicationContext)) {\n\t\t\t\t\tlogger.warn("Cannot find template location: " + location\n\t\t\t\t\t\t\t+ " (please add some templates or check "\n\t\t\t\t\t\t\t+ "your Thymeleaf configuration)");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t@Bean\n\t\tpublic SpringResourceTemplateResolver defaultTemplateResolver() {\n\t\t\tSpringResourceTemplateResolver resolver = new SpringResourceTemplateResolver();\n\t\t\tresolver.setApplicationContext(this.applicationContext);\n\t\t\tresolver.setPrefix(this.properties.getPrefix());\n\t\t\tresolver.setSuffix(this.properties.getSuffix());\n\t\t\tresolver.setTemplateMode(this.properties.getMode());\n\t\t\tif (this.properties.getEncoding() != null) {\n\t\t\t\tresolver.setCharacterEncoding(this.properties.getEncoding().name());\n\t\t\t}\n\t\t\tresolver.setCacheable(this.properties.isCache());\n\t\t\tInteger order = this.properties.getTemplateResolverOrder();\n\t\t\tif (order != null) {\n\t\t\t\tresolver.setOrder(order);\n\t\t\t}\n\t\t\tresolver.setCheckExistence(this.properties.isCheckTemplate());\n\t\t\treturn resolver;\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class ThymeleafDefaultConfiguration {\n\n\t\tprivate final ThymeleafProperties properties;\n\n\t\tprivate final Collection<ITemplateResolver> templateResolvers;\n\n\t\tprivate final ObjectProvider<IDialect> dialects;\n\n\t\tpublic ThymeleafDefaultConfiguration(ThymeleafProperties properties,\n\t\t\t\tCollection<ITemplateResolver> templateResolvers,\n\t\t\t\tObjectProvider<IDialect> dialectsProvider) {\n\t\t\tthis.properties = properties;\n\t\t\tthis.templateResolvers = templateResolvers;\n\t\t\tthis.dialects = dialectsProvider;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic SpringTemplateEngine templateEngine() {\n\t\t\tSpringTemplateEngine engine = new SpringTemplateEngine();\n\t\t\tengine.setEnableSpringELCompiler(this.properties.isEnableSpringElCompiler());\n\t\t\tengine.setRenderHiddenMarkersBeforeCheckboxes(\n\t\t\t\t\tthis.properties.isRenderHiddenMarkersBeforeCheckboxes());\n\t\t\tthis.templateResolvers.forEach(engine::addTemplateResolver);\n\t\t\tthis.dialects.orderedStream().forEach(engine::addDialect);\n\t\t\treturn engine;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnWebApplication(type = Type.SERVLET)\n\t@ConditionalOnProperty(name = "spring.thymeleaf.enabled", matchIfMissing = true)\n\tstatic class ThymeleafWebMvcConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnEnabledResourceChain\n\t\t@ConditionalOnMissingFilterBean(ResourceUrlEncodingFilter.class)\n\t\tpublic FilterRegistrationBean<ResourceUrlEncodingFilter> resourceUrlEncodingFilter() {\n\t\t\tFilterRegistrationBean<ResourceUrlEncodingFilter> registration = new FilterRegistrationBean<>(\n\t\t\t\t\tnew ResourceUrlEncodingFilter());\n\t\t\tregistration.setDispatcherTypes(DispatcherType.REQUEST, DispatcherType.ERROR);\n\t\t\treturn registration;\n\t\t}\n\n\t\t@Configuration\n\t\tstatic class ThymeleafViewResolverConfiguration {\n\n\t\t\tprivate final ThymeleafProperties properties;\n\n\t\t\tprivate final SpringTemplateEngine templateEngine;\n\n\t\t\tThymeleafViewResolverConfiguration(ThymeleafProperties properties,\n\t\t\t\t\tSpringTemplateEngine templateEngine) {\n\t\t\t\tthis.properties = properties;\n\t\t\t\tthis.templateEngine = templateEngine;\n\t\t\t}\n\n\t\t\t@Bean\n\t\t\t@ConditionalOnMissingBean(name = "thymeleafViewResolver")\n\t\t\tpublic ThymeleafViewResolver thymeleafViewResolver() {\n\t\t\t\tThymeleafViewResolver resolver = new ThymeleafViewResolver();\n\t\t\t\tresolver.setTemplateEngine(this.templateEngine);\n\t\t\t\tresolver.setCharacterEncoding(this.properties.getEncoding().name());\n\t\t\t\tresolver.setContentType(\n\t\t\t\t\t\tappendCharset(this.properties.getServlet().getContentType(),\n\t\t\t\t\t\t\t\tresolver.getCharacterEncoding()));\n\t\t\t\tresolver.setProducePartialOutputWhileProcessing(this.properties\n\t\t\t\t\t\t.getServlet().isProducePartialOutputWhileProcessing());\n\t\t\t\tresolver.setExcludedViewNames(this.properties.getExcludedViewNames());\n\t\t\t\tresolver.setViewNames(this.properties.getViewNames());\n\t\t\t\t// This resolver acts as a fallback resolver (e.g. like a\n\t\t\t\t// InternalResourceViewResolver) so it needs to have low precedence\n\t\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 5);\n\t\t\t\tresolver.setCache(this.properties.isCache());\n\t\t\t\treturn resolver;\n\t\t\t}\n\n\t\t\tprivate String appendCharset(MimeType type, String charset) {\n\t\t\t\tif (type.getCharset() != null) {\n\t\t\t\t\treturn type.toString();\n\t\t\t\t}\n\t\t\t\tLinkedHashMap<String, String> parameters = new LinkedHashMap<>();\n\t\t\t\tparameters.put("charset", charset);\n\t\t\t\tparameters.putAll(type.getParameters());\n\t\t\t\treturn new MimeType(type, parameters).toString();\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnWebApplication(type = Type.REACTIVE)\n\t@ConditionalOnProperty(name = "spring.thymeleaf.enabled", matchIfMissing = true)\n\tstatic class ThymeleafReactiveConfiguration {\n\n\t\tprivate final ThymeleafProperties properties;\n\n\t\tprivate final Collection<ITemplateResolver> templateResolvers;\n\n\t\tprivate final ObjectProvider<IDialect> dialects;\n\n\t\tThymeleafReactiveConfiguration(ThymeleafProperties properties,\n\t\t\t\tCollection<ITemplateResolver> templateResolvers,\n\t\t\t\tObjectProvider<IDialect> dialectsProvider) {\n\t\t\tthis.properties = properties;\n\t\t\tthis.templateResolvers = templateResolvers;\n\t\t\tthis.dialects = dialectsProvider;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(ISpringWebFluxTemplateEngine.class)\n\t\tpublic SpringWebFluxTemplateEngine templateEngine() {\n\t\t\tSpringWebFluxTemplateEngine engine = new SpringWebFluxTemplateEngine();\n\t\t\tengine.setEnableSpringELCompiler(this.properties.isEnableSpringElCompiler());\n\t\t\tengine.setRenderHiddenMarkersBeforeCheckboxes(\n\t\t\t\t\tthis.properties.isRenderHiddenMarkersBeforeCheckboxes());\n\t\t\tthis.templateResolvers.forEach(engine::addTemplateResolver);\n\t\t\tthis.dialects.orderedStream().forEach(engine::addDialect);\n\t\t\treturn engine;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnWebApplication(type = Type.REACTIVE)\n\t@ConditionalOnProperty(name = "spring.thymeleaf.enabled", matchIfMissing = true)\n\tstatic class ThymeleafWebFluxConfiguration {\n\n\t\tprivate final ThymeleafProperties properties;\n\n\t\tThymeleafWebFluxConfiguration(ThymeleafProperties properties) {\n\t\t\tthis.properties = properties;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "thymeleafReactiveViewResolver")\n\t\tpublic ThymeleafReactiveViewResolver thymeleafViewResolver(\n\t\t\t\tISpringWebFluxTemplateEngine templateEngine) {\n\t\t\tThymeleafReactiveViewResolver resolver = new ThymeleafReactiveViewResolver();\n\t\t\tresolver.setTemplateEngine(templateEngine);\n\t\t\tmapProperties(this.properties, resolver);\n\t\t\tmapReactiveProperties(this.properties.getReactive(), resolver);\n\t\t\t// This resolver acts as a fallback resolver (e.g. like a\n\t\t\t// InternalResourceViewResolver) so it needs to have low precedence\n\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 5);\n\t\t\treturn resolver;\n\t\t}\n\n\t\tprivate void mapProperties(ThymeleafProperties properties,\n\t\t\t\tThymeleafReactiveViewResolver resolver) {\n\t\t\tPropertyMapper map = PropertyMapper.get();\n\t\t\tmap.from(properties::getEncoding).to(resolver::setDefaultCharset);\n\t\t\tresolver.setExcludedViewNames(properties.getExcludedViewNames());\n\t\t\tresolver.setViewNames(properties.getViewNames());\n\t\t}\n\n\t\tprivate void mapReactiveProperties(Reactive properties,\n\t\t\t\tThymeleafReactiveViewResolver resolver) {\n\t\t\tPropertyMapper map = PropertyMapper.get();\n\t\t\tmap.from(properties::getMediaTypes).whenNonNull()\n\t\t\t\t\t.to(resolver::setSupportedMediaTypes);\n\t\t\tmap.from(properties::getMaxChunkSize).asInt(DataSize::toBytes)\n\t\t\t\t\t.when((size) -> size > 0).to(resolver::setResponseMaxChunkSizeBytes);\n\t\t\tmap.from(properties::getFullModeViewNames).to(resolver::setFullModeViewNames);\n\t\t\tmap.from(properties::getChunkedModeViewNames)\n\t\t\t\t\t.to(resolver::setChunkedModeViewNames);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(name = "nz.net.ultraq.thymeleaf.LayoutDialect")\n\tprotected static class ThymeleafWebLayoutConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic LayoutDialect layoutDialect() {\n\t\t\treturn new LayoutDialect();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(DataAttributeDialect.class)\n\tprotected static class DataAttributeDialectConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic DataAttributeDialect dialect() {\n\t\t\treturn new DataAttributeDialect();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ SpringSecurityDialect.class })\n\tprotected static class ThymeleafSecurityDialectConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic SpringSecurityDialect securityDialect() {\n\t\t\treturn new SpringSecurityDialect();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(Java8TimeDialect.class)\n\tprotected static class ThymeleafJava8TimeDialect {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic Java8TimeDialect java8TimeDialect() {\n\t\t\treturn new Java8TimeDialect();\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.thymeleaf;\n\nimport java.util.Collection;\nimport java.util.LinkedHashMap;\n\nimport javax.annotation.PostConstruct;\nimport javax.servlet.DispatcherType;\n\nimport com.github.mxab.thymeleaf.extras.dataattribute.dialect.DataAttributeDialect;\nimport nz.net.ultraq.thymeleaf.LayoutDialect;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.thymeleaf.dialect.IDialect;\nimport org.thymeleaf.extras.java8time.dialect.Java8TimeDialect;\nimport org.thymeleaf.extras.springsecurity5.dialect.SpringSecurityDialect;\nimport org.thymeleaf.spring5.ISpringWebFluxTemplateEngine;\nimport org.thymeleaf.spring5.SpringTemplateEngine;\nimport org.thymeleaf.spring5.SpringWebFluxTemplateEngine;\nimport org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver;\nimport org.thymeleaf.spring5.view.ThymeleafViewResolver;\nimport org.thymeleaf.spring5.view.reactive.ThymeleafReactiveViewResolver;\nimport org.thymeleaf.templatemode.TemplateMode;\nimport org.thymeleaf.templateresolver.ITemplateResolver;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.autoconfigure.template.TemplateLocation;\nimport org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties.Reactive;\nimport org.springframework.boot.autoconfigure.web.ConditionalOnEnabledResourceChain;\nimport org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.context.properties.PropertyMapper;\nimport org.springframework.boot.web.servlet.FilterRegistrationBean;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.util.MimeType;\nimport org.springframework.util.unit.DataSize;\nimport org.springframework.web.servlet.resource.ResourceUrlEncodingFilter;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Thymeleaf.\n *\n * @author Dave Syer\n * @author Andy Wilkinson\n * @author Stephane Nicoll\n * @author Brian Clozel\n * @author Eddú Meléndez\n * @author Daniel Fernández\n * @author Kazuki Shimizu\n * @author Artsiom Yudovin\n */\n@Configuration\n@EnableConfigurationProperties(ThymeleafProperties.class)\n@ConditionalOnClass(TemplateMode.class)\n@AutoConfigureAfter({ WebMvcAutoConfiguration.class, WebFluxAutoConfiguration.class })\npublic class ThymeleafAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnMissingBean(name = "defaultTemplateResolver")\n\tstatic class DefaultTemplateResolverConfiguration {\n\n\t\tprivate static final Log logger = LogFactory\n\t\t\t\t.getLog(DefaultTemplateResolverConfiguration.class);\n\n\t\tprivate final ThymeleafProperties properties;\n\n\t\tprivate final ApplicationContext applicationContext;\n\n\t\tDefaultTemplateResolverConfiguration(ThymeleafProperties properties,\n\t\t\t\tApplicationContext applicationContext) {\n\t\t\tthis.properties = properties;\n\t\t\tthis.applicationContext = applicationContext;\n\t\t}\n\n\t\t@PostConstruct\n\t\tpublic void checkTemplateLocationExists() {\n\t\t\tboolean checkTemplateLocation = this.properties.isCheckTemplateLocation();\n\t\t\tif (checkTemplateLocation) {\n\t\t\t\tTemplateLocation location = new TemplateLocation(\n\t\t\t\t\t\tthis.properties.getPrefix());\n\t\t\t\tif (!location.exists(this.applicationContext)) {\n\t\t\t\t\tlogger.warn("Cannot find template location: " + location\n\t\t\t\t\t\t\t+ " (please add some templates or check "\n\t\t\t\t\t\t\t+ "your Thymeleaf configuration)");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t@Bean\n\t\tpublic SpringResourceTemplateResolver defaultTemplateResolver() {\n\t\t\tSpringResourceTemplateResolver resolver = new SpringResourceTemplateResolver();\n\t\t\tresolver.setApplicationContext(this.applicationContext);\n\t\t\tresolver.setPrefix(this.properties.getPrefix());\n\t\t\tresolver.setSuffix(this.properties.getSuffix());\n\t\t\tresolver.setTemplateMode(this.properties.getMode());\n\t\t\tif (this.properties.getEncoding() != null) {\n\t\t\t\tresolver.setCharacterEncoding(this.properties.getEncoding().name());\n\t\t\t}\n\t\t\tresolver.setCacheable(this.properties.isCache());\n\t\t\tInteger order = this.properties.getTemplateResolverOrder();\n\t\t\tif (order != null) {\n\t\t\t\tresolver.setOrder(order);\n\t\t\t}\n\t\t\tresolver.setCheckExistence(this.properties.isCheckTemplate());\n\t\t\treturn resolver;\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class ThymeleafDefaultConfiguration {\n\n\t\tprivate final ThymeleafProperties properties;\n\n\t\tprivate final Collection<ITemplateResolver> templateResolvers;\n\n\t\tprivate final ObjectProvider<IDialect> dialects;\n\n\t\tpublic ThymeleafDefaultConfiguration(ThymeleafProperties properties,\n\t\t\t\tCollection<ITemplateResolver> templateResolvers,\n\t\t\t\tObjectProvider<IDialect> dialectsProvider) {\n\t\t\tthis.properties = properties;\n\t\t\tthis.templateResolvers = templateResolvers;\n\t\t\tthis.dialects = dialectsProvider;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic SpringTemplateEngine templateEngine() {\n\t\t\tSpringTemplateEngine engine = new SpringTemplateEngine();\n\t\t\tengine.setEnableSpringELCompiler(this.properties.isEnableSpringElCompiler());\n\t\t\tengine.setRenderHiddenMarkersBeforeCheckboxes(\n\t\t\t\t\tthis.properties.isRenderHiddenMarkersBeforeCheckboxes());\n\t\t\tthis.templateResolvers.forEach(engine::addTemplateResolver);\n\t\t\tthis.dialects.orderedStream().forEach(engine::addDialect);\n\t\t\treturn engine;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnWebApplication(type = Type.SERVLET)\n\t@ConditionalOnProperty(name = "spring.thymeleaf.enabled", matchIfMissing = true)\n\tstatic class ThymeleafWebMvcConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(ResourceUrlEncodingFilter.class)\n\t\t@ConditionalOnEnabledResourceChain\n\t\tpublic FilterRegistrationBean<ResourceUrlEncodingFilter> resourceUrlEncodingFilter() {\n\t\t\tFilterRegistrationBean<ResourceUrlEncodingFilter> registration = new FilterRegistrationBean<>(\n\t\t\t\t\tnew ResourceUrlEncodingFilter());\n\t\t\tregistration.setDispatcherTypes(DispatcherType.REQUEST, DispatcherType.ERROR);\n\t\t\treturn registration;\n\t\t}\n\n\t\t@Configuration\n\t\tstatic class ThymeleafViewResolverConfiguration {\n\n\t\t\tprivate final ThymeleafProperties properties;\n\n\t\t\tprivate final SpringTemplateEngine templateEngine;\n\n\t\t\tThymeleafViewResolverConfiguration(ThymeleafProperties properties,\n\t\t\t\t\tSpringTemplateEngine templateEngine) {\n\t\t\t\tthis.properties = properties;\n\t\t\t\tthis.templateEngine = templateEngine;\n\t\t\t}\n\n\t\t\t@Bean\n\t\t\t@ConditionalOnMissingBean(name = "thymeleafViewResolver")\n\t\t\tpublic ThymeleafViewResolver thymeleafViewResolver() {\n\t\t\t\tThymeleafViewResolver resolver = new ThymeleafViewResolver();\n\t\t\t\tresolver.setTemplateEngine(this.templateEngine);\n\t\t\t\tresolver.setCharacterEncoding(this.properties.getEncoding().name());\n\t\t\t\tresolver.setContentType(\n\t\t\t\t\t\tappendCharset(this.properties.getServlet().getContentType(),\n\t\t\t\t\t\t\t\tresolver.getCharacterEncoding()));\n\t\t\t\tresolver.setProducePartialOutputWhileProcessing(this.properties\n\t\t\t\t\t\t.getServlet().isProducePartialOutputWhileProcessing());\n\t\t\t\tresolver.setExcludedViewNames(this.properties.getExcludedViewNames());\n\t\t\t\tresolver.setViewNames(this.properties.getViewNames());\n\t\t\t\t// This resolver acts as a fallback resolver (e.g. like a\n\t\t\t\t// InternalResourceViewResolver) so it needs to have low precedence\n\t\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 5);\n\t\t\t\tresolver.setCache(this.properties.isCache());\n\t\t\t\treturn resolver;\n\t\t\t}\n\n\t\t\tprivate String appendCharset(MimeType type, String charset) {\n\t\t\t\tif (type.getCharset() != null) {\n\t\t\t\t\treturn type.toString();\n\t\t\t\t}\n\t\t\t\tLinkedHashMap<String, String> parameters = new LinkedHashMap<>();\n\t\t\t\tparameters.put("charset", charset);\n\t\t\t\tparameters.putAll(type.getParameters());\n\t\t\t\treturn new MimeType(type, parameters).toString();\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnWebApplication(type = Type.REACTIVE)\n\t@ConditionalOnProperty(name = "spring.thymeleaf.enabled", matchIfMissing = true)\n\tstatic class ThymeleafReactiveConfiguration {\n\n\t\tprivate final ThymeleafProperties properties;\n\n\t\tprivate final Collection<ITemplateResolver> templateResolvers;\n\n\t\tprivate final ObjectProvider<IDialect> dialects;\n\n\t\tThymeleafReactiveConfiguration(ThymeleafProperties properties,\n\t\t\t\tCollection<ITemplateResolver> templateResolvers,\n\t\t\t\tObjectProvider<IDialect> dialectsProvider) {\n\t\t\tthis.properties = properties;\n\t\t\tthis.templateResolvers = templateResolvers;\n\t\t\tthis.dialects = dialectsProvider;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(ISpringWebFluxTemplateEngine.class)\n\t\tpublic SpringWebFluxTemplateEngine templateEngine() {\n\t\t\tSpringWebFluxTemplateEngine engine = new SpringWebFluxTemplateEngine();\n\t\t\tengine.setEnableSpringELCompiler(this.properties.isEnableSpringElCompiler());\n\t\t\tengine.setRenderHiddenMarkersBeforeCheckboxes(\n\t\t\t\t\tthis.properties.isRenderHiddenMarkersBeforeCheckboxes());\n\t\t\tthis.templateResolvers.forEach(engine::addTemplateResolver);\n\t\t\tthis.dialects.orderedStream().forEach(engine::addDialect);\n\t\t\treturn engine;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnWebApplication(type = Type.REACTIVE)\n\t@ConditionalOnProperty(name = "spring.thymeleaf.enabled", matchIfMissing = true)\n\tstatic class ThymeleafWebFluxConfiguration {\n\n\t\tprivate final ThymeleafProperties properties;\n\n\t\tThymeleafWebFluxConfiguration(ThymeleafProperties properties) {\n\t\t\tthis.properties = properties;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "thymeleafReactiveViewResolver")\n\t\tpublic ThymeleafReactiveViewResolver thymeleafViewResolver(\n\t\t\t\tISpringWebFluxTemplateEngine templateEngine) {\n\t\t\tThymeleafReactiveViewResolver resolver = new ThymeleafReactiveViewResolver();\n\t\t\tresolver.setTemplateEngine(templateEngine);\n\t\t\tmapProperties(this.properties, resolver);\n\t\t\tmapReactiveProperties(this.properties.getReactive(), resolver);\n\t\t\t// This resolver acts as a fallback resolver (e.g. like a\n\t\t\t// InternalResourceViewResolver) so it needs to have low precedence\n\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 5);\n\t\t\treturn resolver;\n\t\t}\n\n\t\tprivate void mapProperties(ThymeleafProperties properties,\n\t\t\t\tThymeleafReactiveViewResolver resolver) {\n\t\t\tPropertyMapper map = PropertyMapper.get();\n\t\t\tmap.from(properties::getEncoding).to(resolver::setDefaultCharset);\n\t\t\tresolver.setExcludedViewNames(properties.getExcludedViewNames());\n\t\t\tresolver.setViewNames(properties.getViewNames());\n\t\t}\n\n\t\tprivate void mapReactiveProperties(Reactive properties,\n\t\t\t\tThymeleafReactiveViewResolver resolver) {\n\t\t\tPropertyMapper map = PropertyMapper.get();\n\t\t\tmap.from(properties::getMediaTypes).whenNonNull()\n\t\t\t\t\t.to(resolver::setSupportedMediaTypes);\n\t\t\tmap.from(properties::getMaxChunkSize).asInt(DataSize::toBytes)\n\t\t\t\t\t.when((size) -> size > 0).to(resolver::setResponseMaxChunkSizeBytes);\n\t\t\tmap.from(properties::getFullModeViewNames).to(resolver::setFullModeViewNames);\n\t\t\tmap.from(properties::getChunkedModeViewNames)\n\t\t\t\t\t.to(resolver::setChunkedModeViewNames);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(name = "nz.net.ultraq.thymeleaf.LayoutDialect")\n\tprotected static class ThymeleafWebLayoutConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic LayoutDialect layoutDialect() {\n\t\t\treturn new LayoutDialect();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(DataAttributeDialect.class)\n\tprotected static class DataAttributeDialectConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic DataAttributeDialect dialect() {\n\t\t\treturn new DataAttributeDialect();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ SpringSecurityDialect.class })\n\tprotected static class ThymeleafSecurityDialectConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic SpringSecurityDialect securityDialect() {\n\t\t\treturn new SpringSecurityDialect();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(Java8TimeDialect.class)\n\tprotected static class ThymeleafJava8TimeDialect {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic Java8TimeDialect java8TimeDialect() {\n\t\t\treturn new Java8TimeDialect();\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
