{'_old_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java'), '_new_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -25,32 +25,23 @@ import javax.annotation.PostConstruct;\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.actuate.endpoint.mvc.ActuatorDocsEndpoint;\n-import org.springframework.boot.actuate.endpoint.mvc.HalBrowserMvcEndpoint;\n-import org.springframework.boot.actuate.endpoint.mvc.HalBrowserMvcEndpoint.HalBrowserLocation;\n+import org.springframework.boot.actuate.endpoint.mvc.ActuatorMvcEndpoint;\n import org.springframework.boot.actuate.endpoint.mvc.HypermediaDisabled;\n-import org.springframework.boot.actuate.endpoint.mvc.LinksMvcEndpoint;\n import org.springframework.boot.actuate.endpoint.mvc.MvcEndpoint;\n import org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints;\n-import org.springframework.boot.autoconfigure.condition.ConditionOutcome;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnResource;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n-import org.springframework.boot.autoconfigure.condition.SpringBootCondition;\n import org.springframework.boot.autoconfigure.web.HttpMessageConverters;\n import org.springframework.boot.autoconfigure.web.ResourceProperties;\n import org.springframework.boot.autoconfigure.web.ServerProperties;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.ConditionContext;\n-import org.springframework.context.annotation.Conditional;\n import org.springframework.core.MethodParameter;\n import org.springframework.core.annotation.AnnotationUtils;\n-import org.springframework.core.io.DefaultResourceLoader;\n-import org.springframework.core.io.ResourceLoader;\n-import org.springframework.core.type.AnnotatedTypeMetadata;\n import org.springframework.hateoas.Link;\n import org.springframework.hateoas.Resource;\n import org.springframework.hateoas.ResourceSupport;\n@@ -75,7 +66,6 @@ import com.fasterxml.jackson.annotation.JsonUnwrapped;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n \n-import static org.springframework.hateoas.mvc.BasicLinkBuilder.linkToCurrentMapping;\n import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;\n \n /**\n@@ -83,6 +73,7 @@ import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;\n  *\n  * @author Dave Syer\n  * @author Phillip Webb\n+ * @author Andy Wilkinson\n  * @since 1.3.0\n  */\n @ManagementContextConfiguration\n@@ -93,16 +84,15 @@ import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;\n @EnableConfigurationProperties(ResourceProperties.class)\n public class EndpointWebMvcHypermediaManagementContextConfiguration {\n \n-\t@ConditionalOnProperty(value = "endpoints.hal.enabled", matchIfMissing = true)\n-\t@Conditional(HalBrowserCondition.class)\n+\t@ConditionalOnProperty(prefix = "endpoints.actuator", name = "enabled", matchIfMissing = true)\n \t@Bean\n-\tpublic HalBrowserMvcEndpoint halBrowserMvcEndpoint(\n-\t\t\tManagementServerProperties management, ResourceProperties resources) {\n-\t\treturn new HalBrowserMvcEndpoint(management);\n+\tpublic ActuatorMvcEndpoint actuatorMvcEndpoint(ManagementServerProperties management,\n+\t\t\tResourceProperties resources) {\n+\t\treturn new ActuatorMvcEndpoint(management);\n \t}\n \n \t@Bean\n-\t@ConditionalOnProperty(value = "endpoints.docs.enabled", matchIfMissing = true)\n+\t@ConditionalOnProperty(prefix = "endpoints.docs", name = "enabled", matchIfMissing = true)\n \t@ConditionalOnResource(resources = "classpath:/META-INF/resources/spring-boot-actuator/docs/index.html")\n \tpublic ActuatorDocsEndpoint actuatorDocsEndpoint(ManagementServerProperties management) {\n \t\treturn new ActuatorDocsEndpoint(management);\n@@ -111,7 +101,7 @@ public class EndpointWebMvcHypermediaManagementContextConfiguration {\n \t@Bean\n \t@ConditionalOnBean(ActuatorDocsEndpoint.class)\n \t@ConditionalOnMissingBean(CurieProvider.class)\n-\t@ConditionalOnProperty(value = "endpoints.docs.curies.enabled", matchIfMissing = false)\n+\t@ConditionalOnProperty(prefix = "endpoints.docs.curies", name = "enabled", matchIfMissing = false)\n \tpublic DefaultCurieProvider curieProvider(ServerProperties server,\n \t\t\tManagementServerProperties management, ActuatorDocsEndpoint endpoint) {\n \t\tString path = management.getContextPath() + endpoint.getPath()\n@@ -124,217 +114,167 @@ public class EndpointWebMvcHypermediaManagementContextConfiguration {\n \t}\n \n \t/**\n-\t * {@link SpringBootCondition} to detect the HAL browser.\n+\t * Controller advice that adds links to the actuator endpoint\'s path.\n \t */\n-\tprotected static class HalBrowserCondition extends SpringBootCondition {\n+\t@ControllerAdvice\n+\tpublic static class ActuatorEndpointLinksAdvice implements ResponseBodyAdvice<Object> {\n \n-\t\t@Override\n-\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n-\t\t\t\tAnnotatedTypeMetadata metadata) {\n-\t\t\tResourceLoader loader = context.getResourceLoader();\n-\t\t\tloader = (loader == null ? new DefaultResourceLoader() : loader);\n-\t\t\tHalBrowserLocation found = HalBrowserMvcEndpoint\n-\t\t\t\t\t.getHalBrowserLocation(loader);\n-\t\t\treturn new ConditionOutcome(found != null, "HAL Browser "\n-\t\t\t\t\t+ (found == null ? "not found" : "at " + found));\n-\t\t}\n-\n-\t}\n-\n-\t/**\n-\t * Configuration for Endpoint links.\n-\t */\n-\t@ConditionalOnProperty(value = "endpoints.links.enabled", matchIfMissing = true)\n-\tpublic static class LinksConfiguration {\n+\t\t@Autowired\n+\t\tprivate MvcEndpoints endpoints;\n \n-\t\t@Bean\n-\t\tpublic LinksMvcEndpoint linksMvcEndpoint(ResourceProperties resources) {\n-\t\t\treturn new LinksMvcEndpoint();\n-\t\t}\n-\n-\t\t/**\n-\t\t * Controller advice that adds links to the home page and/or the management\n-\t\t * context path. The home page is enhanced if it is composed already of a\n-\t\t * {@link ResourceSupport} (e.g. when using Spring Data REST).\n-\t\t */\n-\t\t@ControllerAdvice\n-\t\tpublic static class HomePageLinksAdvice implements ResponseBodyAdvice<Object> {\n+\t\t@Autowired(required = false)\n+\t\tprivate ActuatorMvcEndpoint actuatorEndpoint;\n \n-\t\t\t@Autowired\n-\t\t\tprivate MvcEndpoints endpoints;\n+\t\t@Autowired\n+\t\tprivate ManagementServerProperties management;\n \n-\t\t\t@Autowired(required = false)\n-\t\t\tprivate LinksMvcEndpoint linksEndpoint;\n+\t\tprivate LinksEnhancer linksEnhancer;\n \n-\t\t\t@Autowired\n-\t\t\tprivate ManagementServerProperties management;\n+\t\t@PostConstruct\n+\t\tpublic void init() {\n+\t\t\tthis.linksEnhancer = new LinksEnhancer(this.management.getContextPath(),\n+\t\t\t\t\tthis.endpoints);\n+\t\t}\n \n-\t\t\tprivate LinksEnhancer linksEnhancer;\n+\t\t@Override\n+\t\tpublic boolean supports(MethodParameter returnType,\n+\t\t\t\tClass<? extends HttpMessageConverter<?>> converterType) {\n+\t\t\treturnType.increaseNestingLevel();\n+\t\t\tType nestedType = returnType.getNestedGenericParameterType();\n+\t\t\treturnType.decreaseNestingLevel();\n+\t\t\treturn ResourceSupport.class.isAssignableFrom(returnType.getParameterType())\n+\t\t\t\t\t|| TypeUtils.isAssignable(ResourceSupport.class, nestedType);\n+\t\t}\n \n-\t\t\t@PostConstruct\n-\t\t\tpublic void init() {\n-\t\t\t\tthis.linksEnhancer = new LinksEnhancer(this.management.getContextPath(),\n-\t\t\t\t\t\tthis.endpoints);\n+\t\t@Override\n+\t\tpublic Object beforeBodyWrite(Object body, MethodParameter returnType,\n+\t\t\t\tMediaType selectedContentType,\n+\t\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType,\n+\t\t\t\tServerHttpRequest request, ServerHttpResponse response) {\n+\t\t\tif (request instanceof ServletServerHttpRequest) {\n+\t\t\t\tbeforeBodyWrite(body, (ServletServerHttpRequest) request);\n \t\t\t}\n+\t\t\treturn body;\n+\t\t}\n \n-\t\t\t@Override\n-\t\t\tpublic boolean supports(MethodParameter returnType,\n-\t\t\t\t\tClass<? extends HttpMessageConverter<?>> converterType) {\n-\t\t\t\tClass<?> controllerType = returnType.getDeclaringClass();\n-\t\t\t\tif (!LinksMvcEndpoint.class.isAssignableFrom(controllerType)\n-\t\t\t\t\t\t&& MvcEndpoint.class.isAssignableFrom(controllerType)) {\n-\t\t\t\t\treturn false;\n-\t\t\t\t}\n-\t\t\t\treturnType.increaseNestingLevel();\n-\t\t\t\tType nestedType = returnType.getNestedGenericParameterType();\n-\t\t\t\treturnType.decreaseNestingLevel();\n-\t\t\t\treturn ResourceSupport.class.isAssignableFrom(returnType\n-\t\t\t\t\t\t.getParameterType())\n-\t\t\t\t\t\t|| TypeUtils.isAssignable(ResourceSupport.class, nestedType);\n+\t\tprivate void beforeBodyWrite(Object body, ServletServerHttpRequest request) {\n+\t\t\tObject pattern = request.getServletRequest().getAttribute(\n+\t\t\t\t\tHandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE);\n+\t\t\tif (pattern != null && body instanceof ResourceSupport) {\n+\t\t\t\tbeforeBodyWrite(pattern.toString(), (ResourceSupport) body);\n \t\t\t}\n+\t\t}\n \n-\t\t\t@Override\n-\t\t\tpublic Object beforeBodyWrite(Object body, MethodParameter returnType,\n-\t\t\t\t\tMediaType selectedContentType,\n-\t\t\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType,\n-\t\t\t\t\tServerHttpRequest request, ServerHttpResponse response) {\n-\t\t\t\tif (request instanceof ServletServerHttpRequest) {\n-\t\t\t\t\tbeforeBodyWrite(body, (ServletServerHttpRequest) request);\n-\t\t\t\t}\n-\t\t\t\treturn body;\n+\t\tprivate void beforeBodyWrite(String path, ResourceSupport body) {\n+\t\t\tif (isActuatorEndpointPath(path)) {\n+\t\t\t\tthis.linksEnhancer\n+\t\t\t\t\t\t.addEndpointLinks(body, this.actuatorEndpoint.getPath());\n \t\t\t}\n+\t\t}\n \n-\t\t\tprivate void beforeBodyWrite(Object body, ServletServerHttpRequest request) {\n-\t\t\t\tObject pattern = request.getServletRequest().getAttribute(\n-\t\t\t\t\t\tHandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE);\n-\t\t\t\tif (pattern != null && body instanceof ResourceSupport) {\n-\t\t\t\t\tbeforeBodyWrite(pattern.toString(), (ResourceSupport) body);\n-\t\t\t\t}\n-\t\t\t}\n+\t\tprivate boolean isActuatorEndpointPath(String path) {\n+\t\t\treturn this.actuatorEndpoint != null\n+\t\t\t\t\t&& (this.management.getContextPath() + this.actuatorEndpoint\n+\t\t\t\t\t\t\t.getPath()).equals(path);\n+\t\t}\n \n-\t\t\tprivate void beforeBodyWrite(String path, ResourceSupport body) {\n-\t\t\t\tif (isLinksPath(path)) {\n-\t\t\t\t\tthis.linksEnhancer.addEndpointLinks(body,\n-\t\t\t\t\t\t\tthis.linksEndpoint.getPath());\n-\t\t\t\t}\n-\t\t\t\telse if (isHomePage(path)) {\n-\t\t\t\t\tbody.add(linkToCurrentMapping()\n-\t\t\t\t\t\t\t.slash(this.management.getContextPath())\n-\t\t\t\t\t\t\t.slash(this.linksEndpoint.getPath()).withRel("actuator"));\n-\t\t\t\t}\n-\t\t\t}\n+\t}\n \n-\t\t\tprivate boolean isLinksPath(String path) {\n-\t\t\t\treturn this.linksEndpoint != null\n-\t\t\t\t\t\t&& (this.management.getContextPath() + this.linksEndpoint\n-\t\t\t\t\t\t\t\t.getPath()).equals(path);\n-\t\t\t}\n+\t/**\n+\t * Controller advice that adds links to the existing Actuator endpoints. By default\n+\t * all the top-level resources are enhanced with a "self" link. Those resources that\n+\t * could not be enhanced (e.g. "/env/{name}") because their values are "primitive" are\n+\t * ignored. Those that have values of type Collection (e.g. /trace) are transformed in\n+\t * to maps, and the original collection value is added with a key equal to the\n+\t * endpoint name.\n+\t */\n+\t@ControllerAdvice(assignableTypes = MvcEndpoint.class)\n+\tpublic static class MvcEndpointAdvice implements ResponseBodyAdvice<Object> {\n \n-\t\t\tprivate boolean isHomePage(String path) {\n-\t\t\t\treturn "".equals(path) || "/".equals(path);\n-\t\t\t}\n+\t\t@Autowired\n+\t\tprivate ManagementServerProperties management;\n+\n+\t\t@Autowired\n+\t\tprivate HttpMessageConverters converters;\n \n+\t\tprivate Map<MediaType, HttpMessageConverter<?>> converterCache = new ConcurrentHashMap<MediaType, HttpMessageConverter<?>>();\n+\n+\t\t@Autowired\n+\t\tprivate ObjectMapper mapper;\n+\n+\t\t@Override\n+\t\tpublic boolean supports(MethodParameter returnType,\n+\t\t\t\tClass<? extends HttpMessageConverter<?>> converterType) {\n+\t\t\tClass<?> controllerType = returnType.getDeclaringClass();\n+\t\t\treturn !ActuatorMvcEndpoint.class.isAssignableFrom(controllerType);\n \t\t}\n \n-\t\t/**\n-\t\t * Controller advice that adds links to the existing Actuator endpoints. By\n-\t\t * default all the top-level resources are enhanced with a "self" link. Those\n-\t\t * resources that could not be enhanced (e.g. "/env/{name}") because their values\n-\t\t * are "primitive" are ignored. Those that have values of type Collection (e.g.\n-\t\t * /trace) are transformed in to maps, and the original collection value is added\n-\t\t * with a key equal to the endpoint name.\n-\t\t */\n-\t\t@ControllerAdvice(assignableTypes = MvcEndpoint.class)\n-\t\tpublic static class MvcEndpointAdvice implements ResponseBodyAdvice<Object> {\n-\n-\t\t\t@Autowired\n-\t\t\tprivate ManagementServerProperties management;\n-\n-\t\t\t@Autowired\n-\t\t\tprivate HttpMessageConverters converters;\n-\n-\t\t\tprivate Map<MediaType, HttpMessageConverter<?>> converterCache = new ConcurrentHashMap<MediaType, HttpMessageConverter<?>>();\n-\n-\t\t\t@Autowired\n-\t\t\tprivate ObjectMapper mapper;\n-\n-\t\t\t@Override\n-\t\t\tpublic boolean supports(MethodParameter returnType,\n-\t\t\t\t\tClass<? extends HttpMessageConverter<?>> converterType) {\n-\t\t\t\tClass<?> controllerType = returnType.getDeclaringClass();\n-\t\t\t\treturn !LinksMvcEndpoint.class.isAssignableFrom(controllerType)\n-\t\t\t\t\t\t&& !HalBrowserMvcEndpoint.class.isAssignableFrom(controllerType);\n+\t\t@Override\n+\t\tpublic Object beforeBodyWrite(Object body, MethodParameter returnType,\n+\t\t\t\tMediaType selectedContentType,\n+\t\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType,\n+\t\t\t\tServerHttpRequest request, ServerHttpResponse response) {\n+\t\t\tif (request instanceof ServletServerHttpRequest) {\n+\t\t\t\treturn beforeBodyWrite(body, returnType, selectedContentType,\n+\t\t\t\t\t\tselectedConverterType, (ServletServerHttpRequest) request,\n+\t\t\t\t\t\tresponse);\n \t\t\t}\n+\t\t\treturn body;\n+\t\t}\n \n-\t\t\t@Override\n-\t\t\tpublic Object beforeBodyWrite(Object body, MethodParameter returnType,\n-\t\t\t\t\tMediaType selectedContentType,\n-\t\t\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType,\n-\t\t\t\t\tServerHttpRequest request, ServerHttpResponse response) {\n-\t\t\t\tif (request instanceof ServletServerHttpRequest) {\n-\t\t\t\t\treturn beforeBodyWrite(body, returnType, selectedContentType,\n-\t\t\t\t\t\t\tselectedConverterType, (ServletServerHttpRequest) request,\n-\t\t\t\t\t\t\tresponse);\n-\t\t\t\t}\n+\t\tprivate Object beforeBodyWrite(Object body, MethodParameter returnType,\n+\t\t\t\tMediaType selectedContentType,\n+\t\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType,\n+\t\t\t\tServletServerHttpRequest request, ServerHttpResponse response) {\n+\t\t\tif (body == null || body instanceof Resource) {\n+\t\t\t\t// Assume it already was handled or it already has its links\n \t\t\t\treturn body;\n \t\t\t}\n-\n-\t\t\tprivate Object beforeBodyWrite(Object body, MethodParameter returnType,\n-\t\t\t\t\tMediaType selectedContentType,\n-\t\t\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType,\n-\t\t\t\t\tServletServerHttpRequest request, ServerHttpResponse response) {\n-\t\t\t\tif (body == null || body instanceof Resource) {\n-\t\t\t\t\t// Assume it already was handled or it already has its links\n-\t\t\t\t\treturn body;\n-\t\t\t\t}\n-\t\t\t\tHttpMessageConverter<Object> converter = findConverter(\n-\t\t\t\t\t\tselectedConverterType, selectedContentType);\n-\t\t\t\tif (converter == null || isHypermediaDisabled(returnType)) {\n-\t\t\t\t\t// Not a resource that can be enhanced with a link\n-\t\t\t\t\treturn body;\n-\t\t\t\t}\n-\t\t\t\tString path = getPath(request);\n-\t\t\t\ttry {\n-\t\t\t\t\tconverter.write(new EndpointResource(body, path),\n-\t\t\t\t\t\t\tselectedContentType, response);\n-\t\t\t\t}\n-\t\t\t\tcatch (IOException ex) {\n-\t\t\t\t\tthrow new HttpMessageNotWritableException("Cannot write response", ex);\n-\t\t\t\t}\n-\t\t\t\treturn null;\n+\t\t\tHttpMessageConverter<Object> converter = findConverter(selectedConverterType,\n+\t\t\t\t\tselectedContentType);\n+\t\t\tif (converter == null || isHypermediaDisabled(returnType)) {\n+\t\t\t\t// Not a resource that can be enhanced with a link\n+\t\t\t\treturn body;\n \t\t\t}\n-\n-\t\t\t@SuppressWarnings("unchecked")\n-\t\t\tprivate HttpMessageConverter<Object> findConverter(\n-\t\t\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType,\n-\t\t\t\t\tMediaType mediaType) {\n-\t\t\t\tif (this.converterCache.containsKey(mediaType)) {\n-\t\t\t\t\treturn (HttpMessageConverter<Object>) this.converterCache\n-\t\t\t\t\t\t\t.get(mediaType);\n-\t\t\t\t}\n-\t\t\t\tfor (HttpMessageConverter<?> converter : this.converters) {\n-\t\t\t\t\tif (selectedConverterType.isAssignableFrom(converter.getClass())\n-\t\t\t\t\t\t\t&& converter.canWrite(EndpointResource.class, mediaType)) {\n-\t\t\t\t\t\tthis.converterCache.put(mediaType, converter);\n-\t\t\t\t\t\treturn (HttpMessageConverter<Object>) converter;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\treturn null;\n+\t\t\tString path = getPath(request);\n+\t\t\ttry {\n+\t\t\t\tconverter.write(new EndpointResource(body, path), selectedContentType,\n+\t\t\t\t\t\tresponse);\n \t\t\t}\n-\n-\t\t\tprivate boolean isHypermediaDisabled(MethodParameter returnType) {\n-\t\t\t\treturn AnnotationUtils.findAnnotation(returnType.getMethod(),\n-\t\t\t\t\t\tHypermediaDisabled.class) != null\n-\t\t\t\t\t\t|| AnnotationUtils.findAnnotation(returnType.getMethod()\n-\t\t\t\t\t\t\t\t.getDeclaringClass(), HypermediaDisabled.class) != null;\n+\t\t\tcatch (IOException ex) {\n+\t\t\t\tthrow new HttpMessageNotWritableException("Cannot write response", ex);\n \t\t\t}\n+\t\t\treturn null;\n+\t\t}\n \n-\t\t\tprivate String getPath(ServletServerHttpRequest request) {\n-\t\t\t\tString path = (String) request.getServletRequest().getAttribute(\n-\t\t\t\t\t\tHandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE);\n-\t\t\t\treturn (path == null ? "" : path);\n+\t\t@SuppressWarnings("unchecked")\n+\t\tprivate HttpMessageConverter<Object> findConverter(\n+\t\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType,\n+\t\t\t\tMediaType mediaType) {\n+\t\t\tif (this.converterCache.containsKey(mediaType)) {\n+\t\t\t\treturn (HttpMessageConverter<Object>) this.converterCache.get(mediaType);\n+\t\t\t}\n+\t\t\tfor (HttpMessageConverter<?> converter : this.converters) {\n+\t\t\t\tif (selectedConverterType.isAssignableFrom(converter.getClass())\n+\t\t\t\t\t\t&& converter.canWrite(EndpointResource.class, mediaType)) {\n+\t\t\t\t\tthis.converterCache.put(mediaType, converter);\n+\t\t\t\t\treturn (HttpMessageConverter<Object>) converter;\n+\t\t\t\t}\n \t\t\t}\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tprivate boolean isHypermediaDisabled(MethodParameter returnType) {\n+\t\t\treturn AnnotationUtils.findAnnotation(returnType.getMethod(),\n+\t\t\t\t\tHypermediaDisabled.class) != null\n+\t\t\t\t\t|| AnnotationUtils.findAnnotation(returnType.getMethod()\n+\t\t\t\t\t\t\t.getDeclaringClass(), HypermediaDisabled.class) != null;\n+\t\t}\n \n+\t\tprivate String getPath(ServletServerHttpRequest request) {\n+\t\t\tString path = (String) request.getServletRequest().getAttribute(\n+\t\t\t\t\tHandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE);\n+\t\t\treturn (path == null ? "" : path);\n \t\t}\n \n \t}\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport java.io.IOException;\nimport java.lang.reflect.Type;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport javax.annotation.PostConstruct;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuate.endpoint.mvc.ActuatorDocsEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.ActuatorMvcEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.HypermediaDisabled;\nimport org.springframework.boot.actuate.endpoint.mvc.MvcEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnResource;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.web.HttpMessageConverters;\nimport org.springframework.boot.autoconfigure.web.ResourceProperties;\nimport org.springframework.boot.autoconfigure.web.ServerProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.core.MethodParameter;\nimport org.springframework.core.annotation.AnnotationUtils;\nimport org.springframework.hateoas.Link;\nimport org.springframework.hateoas.Resource;\nimport org.springframework.hateoas.ResourceSupport;\nimport org.springframework.hateoas.UriTemplate;\nimport org.springframework.hateoas.hal.CurieProvider;\nimport org.springframework.hateoas.hal.DefaultCurieProvider;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.http.converter.HttpMessageNotWritableException;\nimport org.springframework.http.server.ServerHttpRequest;\nimport org.springframework.http.server.ServerHttpResponse;\nimport org.springframework.http.server.ServletServerHttpRequest;\nimport org.springframework.util.TypeUtils;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.servlet.HandlerMapping;\nimport org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice;\n\nimport com.fasterxml.jackson.annotation.JsonAnyGetter;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.annotation.JsonUnwrapped;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n\nimport static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;\n\n/**\n * Configuration for hypermedia in HTTP endpoints.\n *\n * @author Dave Syer\n * @author Phillip Webb\n * @author Andy Wilkinson\n * @since 1.3.0\n */\n@ManagementContextConfiguration\n@ConditionalOnClass(Link.class)\n@ConditionalOnWebApplication\n@ConditionalOnBean(HttpMessageConverters.class)\n@ConditionalOnProperty(value = "endpoints.enabled", matchIfMissing = true)\n@EnableConfigurationProperties(ResourceProperties.class)\npublic class EndpointWebMvcHypermediaManagementContextConfiguration {\n\n\t@ConditionalOnProperty(prefix = "endpoints.actuator", name = "enabled", matchIfMissing = true)\n\t@Bean\n\tpublic ActuatorMvcEndpoint actuatorMvcEndpoint(ManagementServerProperties management,\n\t\t\tResourceProperties resources) {\n\t\treturn new ActuatorMvcEndpoint(management);\n\t}\n\n\t@Bean\n\t@ConditionalOnProperty(prefix = "endpoints.docs", name = "enabled", matchIfMissing = true)\n\t@ConditionalOnResource(resources = "classpath:/META-INF/resources/spring-boot-actuator/docs/index.html")\n\tpublic ActuatorDocsEndpoint actuatorDocsEndpoint(ManagementServerProperties management) {\n\t\treturn new ActuatorDocsEndpoint(management);\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(ActuatorDocsEndpoint.class)\n\t@ConditionalOnMissingBean(CurieProvider.class)\n\t@ConditionalOnProperty(prefix = "endpoints.docs.curies", name = "enabled", matchIfMissing = false)\n\tpublic DefaultCurieProvider curieProvider(ServerProperties server,\n\t\t\tManagementServerProperties management, ActuatorDocsEndpoint endpoint) {\n\t\tString path = management.getContextPath() + endpoint.getPath()\n\t\t\t\t+ "/#spring_boot_actuator__{rel}";\n\t\tif (server.getPort() == management.getPort() && management.getPort() != null\n\t\t\t\t&& management.getPort() != 0) {\n\t\t\tpath = server.getPath(path);\n\t\t}\n\t\treturn new DefaultCurieProvider("boot", new UriTemplate(path));\n\t}\n\n\t/**\n\t * Controller advice that adds links to the actuator endpoint\'s path.\n\t */\n\t@ControllerAdvice\n\tpublic static class ActuatorEndpointLinksAdvice implements ResponseBodyAdvice<Object> {\n\n\t\t@Autowired\n\t\tprivate MvcEndpoints endpoints;\n\n\t\t@Autowired(required = false)\n\t\tprivate ActuatorMvcEndpoint actuatorEndpoint;\n\n\t\t@Autowired\n\t\tprivate ManagementServerProperties management;\n\n\t\tprivate LinksEnhancer linksEnhancer;\n\n\t\t@PostConstruct\n\t\tpublic void init() {\n\t\t\tthis.linksEnhancer = new LinksEnhancer(this.management.getContextPath(),\n\t\t\t\t\tthis.endpoints);\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean supports(MethodParameter returnType,\n\t\t\t\tClass<? extends HttpMessageConverter<?>> converterType) {\n\t\t\treturnType.increaseNestingLevel();\n\t\t\tType nestedType = returnType.getNestedGenericParameterType();\n\t\t\treturnType.decreaseNestingLevel();\n\t\t\treturn ResourceSupport.class.isAssignableFrom(returnType.getParameterType())\n\t\t\t\t\t|| TypeUtils.isAssignable(ResourceSupport.class, nestedType);\n\t\t}\n\n\t\t@Override\n\t\tpublic Object beforeBodyWrite(Object body, MethodParameter returnType,\n\t\t\t\tMediaType selectedContentType,\n\t\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType,\n\t\t\t\tServerHttpRequest request, ServerHttpResponse response) {\n\t\t\tif (request instanceof ServletServerHttpRequest) {\n\t\t\t\tbeforeBodyWrite(body, (ServletServerHttpRequest) request);\n\t\t\t}\n\t\t\treturn body;\n\t\t}\n\n\t\tprivate void beforeBodyWrite(Object body, ServletServerHttpRequest request) {\n\t\t\tObject pattern = request.getServletRequest().getAttribute(\n\t\t\t\t\tHandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE);\n\t\t\tif (pattern != null && body instanceof ResourceSupport) {\n\t\t\t\tbeforeBodyWrite(pattern.toString(), (ResourceSupport) body);\n\t\t\t}\n\t\t}\n\n\t\tprivate void beforeBodyWrite(String path, ResourceSupport body) {\n\t\t\tif (isActuatorEndpointPath(path)) {\n\t\t\t\tthis.linksEnhancer\n\t\t\t\t\t\t.addEndpointLinks(body, this.actuatorEndpoint.getPath());\n\t\t\t}\n\t\t}\n\n\t\tprivate boolean isActuatorEndpointPath(String path) {\n\t\t\treturn this.actuatorEndpoint != null\n\t\t\t\t\t&& (this.management.getContextPath() + this.actuatorEndpoint\n\t\t\t\t\t\t\t.getPath()).equals(path);\n\t\t}\n\n\t}\n\n\t/**\n\t * Controller advice that adds links to the existing Actuator endpoints. By default\n\t * all the top-level resources are enhanced with a "self" link. Those resources that\n\t * could not be enhanced (e.g. "/env/{name}") because their values are "primitive" are\n\t * ignored. Those that have values of type Collection (e.g. /trace) are transformed in\n\t * to maps, and the original collection value is added with a key equal to the\n\t * endpoint name.\n\t */\n\t@ControllerAdvice(assignableTypes = MvcEndpoint.class)\n\tpublic static class MvcEndpointAdvice implements ResponseBodyAdvice<Object> {\n\n\t\t@Autowired\n\t\tprivate ManagementServerProperties management;\n\n\t\t@Autowired\n\t\tprivate HttpMessageConverters converters;\n\n\t\tprivate Map<MediaType, HttpMessageConverter<?>> converterCache = new ConcurrentHashMap<MediaType, HttpMessageConverter<?>>();\n\n\t\t@Autowired\n\t\tprivate ObjectMapper mapper;\n\n\t\t@Override\n\t\tpublic boolean supports(MethodParameter returnType,\n\t\t\t\tClass<? extends HttpMessageConverter<?>> converterType) {\n\t\t\tClass<?> controllerType = returnType.getDeclaringClass();\n\t\t\treturn !ActuatorMvcEndpoint.class.isAssignableFrom(controllerType);\n\t\t}\n\n\t\t@Override\n\t\tpublic Object beforeBodyWrite(Object body, MethodParameter returnType,\n\t\t\t\tMediaType selectedContentType,\n\t\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType,\n\t\t\t\tServerHttpRequest request, ServerHttpResponse response) {\n\t\t\tif (request instanceof ServletServerHttpRequest) {\n\t\t\t\treturn beforeBodyWrite(body, returnType, selectedContentType,\n\t\t\t\t\t\tselectedConverterType, (ServletServerHttpRequest) request,\n\t\t\t\t\t\tresponse);\n\t\t\t}\n\t\t\treturn body;\n\t\t}\n\n\t\tprivate Object beforeBodyWrite(Object body, MethodParameter returnType,\n\t\t\t\tMediaType selectedContentType,\n\t\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType,\n\t\t\t\tServletServerHttpRequest request, ServerHttpResponse response) {\n\t\t\tif (body == null || body instanceof Resource) {\n\t\t\t\t// Assume it already was handled or it already has its links\n\t\t\t\treturn body;\n\t\t\t}\n\t\t\tHttpMessageConverter<Object> converter = findConverter(selectedConverterType,\n\t\t\t\t\tselectedContentType);\n\t\t\tif (converter == null || isHypermediaDisabled(returnType)) {\n\t\t\t\t// Not a resource that can be enhanced with a link\n\t\t\t\treturn body;\n\t\t\t}\n\t\t\tString path = getPath(request);\n\t\t\ttry {\n\t\t\t\tconverter.write(new EndpointResource(body, path), selectedContentType,\n\t\t\t\t\t\tresponse);\n\t\t\t}\n\t\t\tcatch (IOException ex) {\n\t\t\t\tthrow new HttpMessageNotWritableException("Cannot write response", ex);\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t@SuppressWarnings("unchecked")\n\t\tprivate HttpMessageConverter<Object> findConverter(\n\t\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType,\n\t\t\t\tMediaType mediaType) {\n\t\t\tif (this.converterCache.containsKey(mediaType)) {\n\t\t\t\treturn (HttpMessageConverter<Object>) this.converterCache.get(mediaType);\n\t\t\t}\n\t\t\tfor (HttpMessageConverter<?> converter : this.converters) {\n\t\t\t\tif (selectedConverterType.isAssignableFrom(converter.getClass())\n\t\t\t\t\t\t&& converter.canWrite(EndpointResource.class, mediaType)) {\n\t\t\t\t\tthis.converterCache.put(mediaType, converter);\n\t\t\t\t\treturn (HttpMessageConverter<Object>) converter;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\tprivate boolean isHypermediaDisabled(MethodParameter returnType) {\n\t\t\treturn AnnotationUtils.findAnnotation(returnType.getMethod(),\n\t\t\t\t\tHypermediaDisabled.class) != null\n\t\t\t\t\t|| AnnotationUtils.findAnnotation(returnType.getMethod()\n\t\t\t\t\t\t\t.getDeclaringClass(), HypermediaDisabled.class) != null;\n\t\t}\n\n\t\tprivate String getPath(ServletServerHttpRequest request) {\n\t\t\tString path = (String) request.getServletRequest().getAttribute(\n\t\t\t\t\tHandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE);\n\t\t\treturn (path == null ? "" : path);\n\t\t}\n\n\t}\n\n\t@JsonInclude(content = Include.NON_NULL)\n\t@JacksonXmlRootElement(localName = "resource")\n\tprivate static class EndpointResource extends ResourceSupport {\n\n\t\tprivate Object content;\n\n\t\tprivate Map<String, Object> embedded;\n\n\t\t@SuppressWarnings("unchecked")\n\t\tpublic EndpointResource(Object content, String path) {\n\t\t\tthis.content = content instanceof Map ? null : content;\n\t\t\tthis.embedded = (Map<String, Object>) (this.content == null ? content : null);\n\t\t\tadd(linkTo(Object.class).slash(path).withSelfRel());\n\t\t}\n\n\t\t@JsonUnwrapped\n\t\tpublic Object getContent() {\n\t\t\treturn this.content;\n\t\t}\n\n\t\t@JsonAnyGetter\n\t\tpublic Map<String, Object> getEmbedded() {\n\t\t\treturn this.embedded;\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport java.io.IOException;\nimport java.lang.reflect.Type;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport javax.annotation.PostConstruct;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuate.endpoint.mvc.ActuatorDocsEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.HalBrowserMvcEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.HalBrowserMvcEndpoint.HalBrowserLocation;\nimport org.springframework.boot.actuate.endpoint.mvc.HypermediaDisabled;\nimport org.springframework.boot.actuate.endpoint.mvc.LinksMvcEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.MvcEndpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnResource;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.autoconfigure.web.HttpMessageConverters;\nimport org.springframework.boot.autoconfigure.web.ResourceProperties;\nimport org.springframework.boot.autoconfigure.web.ServerProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.core.MethodParameter;\nimport org.springframework.core.annotation.AnnotationUtils;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.hateoas.Link;\nimport org.springframework.hateoas.Resource;\nimport org.springframework.hateoas.ResourceSupport;\nimport org.springframework.hateoas.UriTemplate;\nimport org.springframework.hateoas.hal.CurieProvider;\nimport org.springframework.hateoas.hal.DefaultCurieProvider;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.http.converter.HttpMessageNotWritableException;\nimport org.springframework.http.server.ServerHttpRequest;\nimport org.springframework.http.server.ServerHttpResponse;\nimport org.springframework.http.server.ServletServerHttpRequest;\nimport org.springframework.util.TypeUtils;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.servlet.HandlerMapping;\nimport org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice;\n\nimport com.fasterxml.jackson.annotation.JsonAnyGetter;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.annotation.JsonUnwrapped;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n\nimport static org.springframework.hateoas.mvc.BasicLinkBuilder.linkToCurrentMapping;\nimport static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;\n\n/**\n * Configuration for hypermedia in HTTP endpoints.\n *\n * @author Dave Syer\n * @author Phillip Webb\n * @since 1.3.0\n */\n@ManagementContextConfiguration\n@ConditionalOnClass(Link.class)\n@ConditionalOnWebApplication\n@ConditionalOnBean(HttpMessageConverters.class)\n@ConditionalOnProperty(value = "endpoints.enabled", matchIfMissing = true)\n@EnableConfigurationProperties(ResourceProperties.class)\npublic class EndpointWebMvcHypermediaManagementContextConfiguration {\n\n\t@ConditionalOnProperty(value = "endpoints.hal.enabled", matchIfMissing = true)\n\t@Conditional(HalBrowserCondition.class)\n\t@Bean\n\tpublic HalBrowserMvcEndpoint halBrowserMvcEndpoint(\n\t\t\tManagementServerProperties management, ResourceProperties resources) {\n\t\treturn new HalBrowserMvcEndpoint(management);\n\t}\n\n\t@Bean\n\t@ConditionalOnProperty(value = "endpoints.docs.enabled", matchIfMissing = true)\n\t@ConditionalOnResource(resources = "classpath:/META-INF/resources/spring-boot-actuator/docs/index.html")\n\tpublic ActuatorDocsEndpoint actuatorDocsEndpoint(ManagementServerProperties management) {\n\t\treturn new ActuatorDocsEndpoint(management);\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(ActuatorDocsEndpoint.class)\n\t@ConditionalOnMissingBean(CurieProvider.class)\n\t@ConditionalOnProperty(value = "endpoints.docs.curies.enabled", matchIfMissing = false)\n\tpublic DefaultCurieProvider curieProvider(ServerProperties server,\n\t\t\tManagementServerProperties management, ActuatorDocsEndpoint endpoint) {\n\t\tString path = management.getContextPath() + endpoint.getPath()\n\t\t\t\t+ "/#spring_boot_actuator__{rel}";\n\t\tif (server.getPort() == management.getPort() && management.getPort() != null\n\t\t\t\t&& management.getPort() != 0) {\n\t\t\tpath = server.getPath(path);\n\t\t}\n\t\treturn new DefaultCurieProvider("boot", new UriTemplate(path));\n\t}\n\n\t/**\n\t * {@link SpringBootCondition} to detect the HAL browser.\n\t */\n\tprotected static class HalBrowserCondition extends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tResourceLoader loader = context.getResourceLoader();\n\t\t\tloader = (loader == null ? new DefaultResourceLoader() : loader);\n\t\t\tHalBrowserLocation found = HalBrowserMvcEndpoint\n\t\t\t\t\t.getHalBrowserLocation(loader);\n\t\t\treturn new ConditionOutcome(found != null, "HAL Browser "\n\t\t\t\t\t+ (found == null ? "not found" : "at " + found));\n\t\t}\n\n\t}\n\n\t/**\n\t * Configuration for Endpoint links.\n\t */\n\t@ConditionalOnProperty(value = "endpoints.links.enabled", matchIfMissing = true)\n\tpublic static class LinksConfiguration {\n\n\t\t@Bean\n\t\tpublic LinksMvcEndpoint linksMvcEndpoint(ResourceProperties resources) {\n\t\t\treturn new LinksMvcEndpoint();\n\t\t}\n\n\t\t/**\n\t\t * Controller advice that adds links to the home page and/or the management\n\t\t * context path. The home page is enhanced if it is composed already of a\n\t\t * {@link ResourceSupport} (e.g. when using Spring Data REST).\n\t\t */\n\t\t@ControllerAdvice\n\t\tpublic static class HomePageLinksAdvice implements ResponseBodyAdvice<Object> {\n\n\t\t\t@Autowired\n\t\t\tprivate MvcEndpoints endpoints;\n\n\t\t\t@Autowired(required = false)\n\t\t\tprivate LinksMvcEndpoint linksEndpoint;\n\n\t\t\t@Autowired\n\t\t\tprivate ManagementServerProperties management;\n\n\t\t\tprivate LinksEnhancer linksEnhancer;\n\n\t\t\t@PostConstruct\n\t\t\tpublic void init() {\n\t\t\t\tthis.linksEnhancer = new LinksEnhancer(this.management.getContextPath(),\n\t\t\t\t\t\tthis.endpoints);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic boolean supports(MethodParameter returnType,\n\t\t\t\t\tClass<? extends HttpMessageConverter<?>> converterType) {\n\t\t\t\tClass<?> controllerType = returnType.getDeclaringClass();\n\t\t\t\tif (!LinksMvcEndpoint.class.isAssignableFrom(controllerType)\n\t\t\t\t\t\t&& MvcEndpoint.class.isAssignableFrom(controllerType)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturnType.increaseNestingLevel();\n\t\t\t\tType nestedType = returnType.getNestedGenericParameterType();\n\t\t\t\treturnType.decreaseNestingLevel();\n\t\t\t\treturn ResourceSupport.class.isAssignableFrom(returnType\n\t\t\t\t\t\t.getParameterType())\n\t\t\t\t\t\t|| TypeUtils.isAssignable(ResourceSupport.class, nestedType);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic Object beforeBodyWrite(Object body, MethodParameter returnType,\n\t\t\t\t\tMediaType selectedContentType,\n\t\t\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType,\n\t\t\t\t\tServerHttpRequest request, ServerHttpResponse response) {\n\t\t\t\tif (request instanceof ServletServerHttpRequest) {\n\t\t\t\t\tbeforeBodyWrite(body, (ServletServerHttpRequest) request);\n\t\t\t\t}\n\t\t\t\treturn body;\n\t\t\t}\n\n\t\t\tprivate void beforeBodyWrite(Object body, ServletServerHttpRequest request) {\n\t\t\t\tObject pattern = request.getServletRequest().getAttribute(\n\t\t\t\t\t\tHandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE);\n\t\t\t\tif (pattern != null && body instanceof ResourceSupport) {\n\t\t\t\t\tbeforeBodyWrite(pattern.toString(), (ResourceSupport) body);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprivate void beforeBodyWrite(String path, ResourceSupport body) {\n\t\t\t\tif (isLinksPath(path)) {\n\t\t\t\t\tthis.linksEnhancer.addEndpointLinks(body,\n\t\t\t\t\t\t\tthis.linksEndpoint.getPath());\n\t\t\t\t}\n\t\t\t\telse if (isHomePage(path)) {\n\t\t\t\t\tbody.add(linkToCurrentMapping()\n\t\t\t\t\t\t\t.slash(this.management.getContextPath())\n\t\t\t\t\t\t\t.slash(this.linksEndpoint.getPath()).withRel("actuator"));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprivate boolean isLinksPath(String path) {\n\t\t\t\treturn this.linksEndpoint != null\n\t\t\t\t\t\t&& (this.management.getContextPath() + this.linksEndpoint\n\t\t\t\t\t\t\t\t.getPath()).equals(path);\n\t\t\t}\n\n\t\t\tprivate boolean isHomePage(String path) {\n\t\t\t\treturn "".equals(path) || "/".equals(path);\n\t\t\t}\n\n\t\t}\n\n\t\t/**\n\t\t * Controller advice that adds links to the existing Actuator endpoints. By\n\t\t * default all the top-level resources are enhanced with a "self" link. Those\n\t\t * resources that could not be enhanced (e.g. "/env/{name}") because their values\n\t\t * are "primitive" are ignored. Those that have values of type Collection (e.g.\n\t\t * /trace) are transformed in to maps, and the original collection value is added\n\t\t * with a key equal to the endpoint name.\n\t\t */\n\t\t@ControllerAdvice(assignableTypes = MvcEndpoint.class)\n\t\tpublic static class MvcEndpointAdvice implements ResponseBodyAdvice<Object> {\n\n\t\t\t@Autowired\n\t\t\tprivate ManagementServerProperties management;\n\n\t\t\t@Autowired\n\t\t\tprivate HttpMessageConverters converters;\n\n\t\t\tprivate Map<MediaType, HttpMessageConverter<?>> converterCache = new ConcurrentHashMap<MediaType, HttpMessageConverter<?>>();\n\n\t\t\t@Autowired\n\t\t\tprivate ObjectMapper mapper;\n\n\t\t\t@Override\n\t\t\tpublic boolean supports(MethodParameter returnType,\n\t\t\t\t\tClass<? extends HttpMessageConverter<?>> converterType) {\n\t\t\t\tClass<?> controllerType = returnType.getDeclaringClass();\n\t\t\t\treturn !LinksMvcEndpoint.class.isAssignableFrom(controllerType)\n\t\t\t\t\t\t&& !HalBrowserMvcEndpoint.class.isAssignableFrom(controllerType);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic Object beforeBodyWrite(Object body, MethodParameter returnType,\n\t\t\t\t\tMediaType selectedContentType,\n\t\t\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType,\n\t\t\t\t\tServerHttpRequest request, ServerHttpResponse response) {\n\t\t\t\tif (request instanceof ServletServerHttpRequest) {\n\t\t\t\t\treturn beforeBodyWrite(body, returnType, selectedContentType,\n\t\t\t\t\t\t\tselectedConverterType, (ServletServerHttpRequest) request,\n\t\t\t\t\t\t\tresponse);\n\t\t\t\t}\n\t\t\t\treturn body;\n\t\t\t}\n\n\t\t\tprivate Object beforeBodyWrite(Object body, MethodParameter returnType,\n\t\t\t\t\tMediaType selectedContentType,\n\t\t\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType,\n\t\t\t\t\tServletServerHttpRequest request, ServerHttpResponse response) {\n\t\t\t\tif (body == null || body instanceof Resource) {\n\t\t\t\t\t// Assume it already was handled or it already has its links\n\t\t\t\t\treturn body;\n\t\t\t\t}\n\t\t\t\tHttpMessageConverter<Object> converter = findConverter(\n\t\t\t\t\t\tselectedConverterType, selectedContentType);\n\t\t\t\tif (converter == null || isHypermediaDisabled(returnType)) {\n\t\t\t\t\t// Not a resource that can be enhanced with a link\n\t\t\t\t\treturn body;\n\t\t\t\t}\n\t\t\t\tString path = getPath(request);\n\t\t\t\ttry {\n\t\t\t\t\tconverter.write(new EndpointResource(body, path),\n\t\t\t\t\t\t\tselectedContentType, response);\n\t\t\t\t}\n\t\t\t\tcatch (IOException ex) {\n\t\t\t\t\tthrow new HttpMessageNotWritableException("Cannot write response", ex);\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t@SuppressWarnings("unchecked")\n\t\t\tprivate HttpMessageConverter<Object> findConverter(\n\t\t\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType,\n\t\t\t\t\tMediaType mediaType) {\n\t\t\t\tif (this.converterCache.containsKey(mediaType)) {\n\t\t\t\t\treturn (HttpMessageConverter<Object>) this.converterCache\n\t\t\t\t\t\t\t.get(mediaType);\n\t\t\t\t}\n\t\t\t\tfor (HttpMessageConverter<?> converter : this.converters) {\n\t\t\t\t\tif (selectedConverterType.isAssignableFrom(converter.getClass())\n\t\t\t\t\t\t\t&& converter.canWrite(EndpointResource.class, mediaType)) {\n\t\t\t\t\t\tthis.converterCache.put(mediaType, converter);\n\t\t\t\t\t\treturn (HttpMessageConverter<Object>) converter;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tprivate boolean isHypermediaDisabled(MethodParameter returnType) {\n\t\t\t\treturn AnnotationUtils.findAnnotation(returnType.getMethod(),\n\t\t\t\t\t\tHypermediaDisabled.class) != null\n\t\t\t\t\t\t|| AnnotationUtils.findAnnotation(returnType.getMethod()\n\t\t\t\t\t\t\t\t.getDeclaringClass(), HypermediaDisabled.class) != null;\n\t\t\t}\n\n\t\t\tprivate String getPath(ServletServerHttpRequest request) {\n\t\t\t\tString path = (String) request.getServletRequest().getAttribute(\n\t\t\t\t\t\tHandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE);\n\t\t\t\treturn (path == null ? "" : path);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t@JsonInclude(content = Include.NON_NULL)\n\t@JacksonXmlRootElement(localName = "resource")\n\tprivate static class EndpointResource extends ResourceSupport {\n\n\t\tprivate Object content;\n\n\t\tprivate Map<String, Object> embedded;\n\n\t\t@SuppressWarnings("unchecked")\n\t\tpublic EndpointResource(Object content, String path) {\n\t\t\tthis.content = content instanceof Map ? null : content;\n\t\t\tthis.embedded = (Map<String, Object>) (this.content == null ? content : null);\n\t\t\tadd(linkTo(Object.class).slash(path).withSelfRel());\n\t\t}\n\n\t\t@JsonUnwrapped\n\t\tpublic Object getContent() {\n\t\t\treturn this.content;\n\t\t}\n\n\t\t@JsonAnyGetter\n\t\tpublic Map<String, Object> getEmbedded() {\n\t\t\treturn this.embedded;\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
