{'_old_path': PosixPath('spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/scan/valid/a/AScanConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/scan/valid/a/AScanConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,6 +16,12 @@\n package org.springframework.boot.context.properties.scan.valid.a;\n \n import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.context.annotation.Condition;\n+import org.springframework.context.annotation.ConditionContext;\n+import org.springframework.context.annotation.Conditional;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.core.io.ByteArrayResource;\n+import org.springframework.core.type.AnnotatedTypeMetadata;\n \n /**\n  * @author Madhura Bhave\n@@ -27,4 +33,27 @@ public class AScanConfiguration {\n \n \t}\n \n+\t@Profile("test")\n+\t@ConfigurationProperties(prefix = "profile")\n+\tstatic class MyProfileProperties {\n+\n+\t}\n+\n+\t@Conditional(TestResourceCondition.class)\n+\t@ConfigurationProperties(prefix = "resource")\n+\tstatic class MyResourceProperties {\n+\n+\t}\n+\n+\tstatic class TestResourceCondition implements Condition {\n+\n+\t\t@Override\n+\t\tpublic boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n+\t\t\tByteArrayResource resource = (ByteArrayResource) context.getResourceLoader()\n+\t\t\t\t\t.getResource("test");\n+\t\t\treturn (new String(resource.getByteArray())).equals("test");\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.boot.context.properties.scan.valid.a;\n\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Condition;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Profile;\nimport org.springframework.core.io.ByteArrayResource;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\n\n/**\n * @author Madhura Bhave\n */\npublic class AScanConfiguration {\n\n\t@ConfigurationProperties(prefix = "a")\n\tstatic class AProperties {\n\n\t}\n\n\t@Profile("test")\n\t@ConfigurationProperties(prefix = "profile")\n\tstatic class MyProfileProperties {\n\n\t}\n\n\t@Conditional(TestResourceCondition.class)\n\t@ConfigurationProperties(prefix = "resource")\n\tstatic class MyResourceProperties {\n\n\t}\n\n\tstatic class TestResourceCondition implements Condition {\n\n\t\t@Override\n\t\tpublic boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n\t\t\tByteArrayResource resource = (ByteArrayResource) context.getResourceLoader()\n\t\t\t\t\t.getResource("test");\n\t\t\treturn (new String(resource.getByteArray())).equals("test");\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.boot.context.properties.scan.valid.a;\n\nimport org.springframework.boot.context.properties.ConfigurationProperties;\n\n/**\n * @author Madhura Bhave\n */\npublic class AScanConfiguration {\n\n\t@ConfigurationProperties(prefix = "a")\n\tstatic class AProperties {\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
