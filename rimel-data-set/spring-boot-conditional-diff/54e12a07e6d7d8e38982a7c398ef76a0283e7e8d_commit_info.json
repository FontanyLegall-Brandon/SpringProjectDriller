{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/lifecycle/SpringApplicationLifecycleAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2012-2015 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.lifecycle;\n+\n+import javax.management.MalformedObjectNameException;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.jmx.export.MBeanExporter;\n+\n+/**\n+ * Register a JMX component that allows to manage the lifecycle of the current\n+ * application. Intended for internal use only.\n+ *\n+ * @author Stephane Nicoll\n+ * @since 1.3.0\n+ * @see SpringApplicationLifecycleMXBean\n+ */\n+@Configuration\n+@AutoConfigureAfter(JmxAutoConfiguration.class)\n+@ConditionalOnProperty(value = "spring.application.lifecycle.enabled", havingValue = "true", matchIfMissing = false)\n+class SpringApplicationLifecycleAutoConfiguration {\n+\n+\t/**\n+\t * The property to use to customize the {@code ObjectName} of the application lifecycle mbean.\n+\t */\n+\tstatic final String JMX_NAME_PROPERTY = "spring.application.lifecycle.jmx-name";\n+\n+\t/**\n+\t * The default {@code ObjectName} of the application lifecycle mbean.\n+\t */\n+\tstatic final String DEFAULT_JMX_NAME = "org.springframework.boot:type=Lifecycle,name=springApplicationLifecycle";\n+\n+\t@Autowired(required = false)\n+\tprivate MBeanExporter mbeanExporter;\n+\n+\t@Autowired\n+\tprivate Environment environment;\n+\n+\t@Bean\n+\tpublic SpringApplicationLifecycleRegistrar springApplicationLifecycleRegistrar()\n+\t\t\tthrows MalformedObjectNameException {\n+\n+\t\tString jmxName = this.environment.getProperty(JMX_NAME_PROPERTY, DEFAULT_JMX_NAME);\n+\t\tif (mbeanExporter != null) { // Make sure to not register that MBean twice\n+\t\t\tmbeanExporter.addExcludedBean(jmxName);\n+\t\t}\n+\t\treturn new SpringApplicationLifecycleRegistrar(jmxName);\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.lifecycle;\n\nimport javax.management.MalformedObjectNameException;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\nimport org.springframework.jmx.export.MBeanExporter;\n\n/**\n * Register a JMX component that allows to manage the lifecycle of the current\n * application. Intended for internal use only.\n *\n * @author Stephane Nicoll\n * @since 1.3.0\n * @see SpringApplicationLifecycleMXBean\n */\n@Configuration\n@AutoConfigureAfter(JmxAutoConfiguration.class)\n@ConditionalOnProperty(value = "spring.application.lifecycle.enabled", havingValue = "true", matchIfMissing = false)\nclass SpringApplicationLifecycleAutoConfiguration {\n\n\t/**\n\t * The property to use to customize the {@code ObjectName} of the application lifecycle mbean.\n\t */\n\tstatic final String JMX_NAME_PROPERTY = "spring.application.lifecycle.jmx-name";\n\n\t/**\n\t * The default {@code ObjectName} of the application lifecycle mbean.\n\t */\n\tstatic final String DEFAULT_JMX_NAME = "org.springframework.boot:type=Lifecycle,name=springApplicationLifecycle";\n\n\t@Autowired(required = false)\n\tprivate MBeanExporter mbeanExporter;\n\n\t@Autowired\n\tprivate Environment environment;\n\n\t@Bean\n\tpublic SpringApplicationLifecycleRegistrar springApplicationLifecycleRegistrar()\n\t\t\tthrows MalformedObjectNameException {\n\n\t\tString jmxName = this.environment.getProperty(JMX_NAME_PROPERTY, DEFAULT_JMX_NAME);\n\t\tif (mbeanExporter != null) { // Make sure to not register that MBean twice\n\t\t\tmbeanExporter.addExcludedBean(jmxName);\n\t\t}\n\t\treturn new SpringApplicationLifecycleRegistrar(jmxName);\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
