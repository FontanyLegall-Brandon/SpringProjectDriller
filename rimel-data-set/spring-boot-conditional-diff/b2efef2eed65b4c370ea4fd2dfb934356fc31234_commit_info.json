{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/WebSecurityEnablerConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/WebSecurityEnablerConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,8 +16,6 @@\n \n package org.springframework.boot.autoconfigure.security;\n \n-import javax.servlet.Filter;\n-\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n@@ -29,14 +27,14 @@ import org.springframework.security.config.annotation.web.configuration.WebSecur\n  * {@link EnableWebSecurity} annotation. This will make\n  * sure that the annotation is present with default security auto-configuration and also\n  * if the user adds custom security and forgets to add the annotation. If {@link EnableWebSecurity}\n- * has already been added or if a {@link Filter} with name springSecurityFilterChain\n+ * has already been added or if a bean with name springSecurityFilterChain\n  * has been configured by the user, this will back-off.\n  *\n  * @author Madhura Bhave\n  * @since 2.0.0\n  */\n @ConditionalOnBean(WebSecurityConfigurerAdapter.class)\n-@ConditionalOnMissingBean(value = Filter.class, name = "springSecurityFilterChain")\n+@ConditionalOnMissingBean(name = "springSecurityFilterChain")\n @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n @EnableWebSecurity\n public class WebSecurityEnablerConfiguration {\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\n/**\n * If there is a bean of type WebSecurityConfigurerAdapter, this adds the\n * {@link EnableWebSecurity} annotation. This will make\n * sure that the annotation is present with default security auto-configuration and also\n * if the user adds custom security and forgets to add the annotation. If {@link EnableWebSecurity}\n * has already been added or if a bean with name springSecurityFilterChain\n * has been configured by the user, this will back-off.\n *\n * @author Madhura Bhave\n * @since 2.0.0\n */\n@ConditionalOnBean(WebSecurityConfigurerAdapter.class)\n@ConditionalOnMissingBean(name = "springSecurityFilterChain")\n@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n@EnableWebSecurity\npublic class WebSecurityEnablerConfiguration {\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security;\n\nimport javax.servlet.Filter;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\n/**\n * If there is a bean of type WebSecurityConfigurerAdapter, this adds the\n * {@link EnableWebSecurity} annotation. This will make\n * sure that the annotation is present with default security auto-configuration and also\n * if the user adds custom security and forgets to add the annotation. If {@link EnableWebSecurity}\n * has already been added or if a {@link Filter} with name springSecurityFilterChain\n * has been configured by the user, this will back-off.\n *\n * @author Madhura Bhave\n * @since 2.0.0\n */\n@ConditionalOnBean(WebSecurityConfigurerAdapter.class)\n@ConditionalOnMissingBean(value = Filter.class, name = "springSecurityFilterChain")\n@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n@EnableWebSecurity\npublic class WebSecurityEnablerConfiguration {\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
