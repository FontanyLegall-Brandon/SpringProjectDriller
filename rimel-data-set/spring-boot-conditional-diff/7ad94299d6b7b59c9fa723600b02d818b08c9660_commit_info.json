{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/tomcat/TomcatMetricsAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/tomcat/TomcatMetricsAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,20 +16,16 @@\n \n package org.springframework.boot.actuate.autoconfigure.metrics.web.tomcat;\n \n-import java.util.Collections;\n-\n+import io.micrometer.core.instrument.MeterRegistry;\n import io.micrometer.core.instrument.binder.tomcat.TomcatMetrics;\n-import org.apache.catalina.Context;\n import org.apache.catalina.Manager;\n \n+import org.springframework.boot.actuate.metrics.web.tomcat.TomcatMetricsBinder;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\n-import org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactory;\n-import org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;\n-import org.springframework.boot.web.server.WebServerFactoryCustomizer;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n@@ -44,30 +40,11 @@ import org.springframework.context.annotation.Configuration;\n @ConditionalOnClass({ TomcatMetrics.class, Manager.class })\n public class TomcatMetricsAutoConfiguration {\n \n-\tprivate volatile Context context;\n-\n-\t@Bean\n-\t@ConditionalOnMissingBean\n-\tpublic TomcatMetrics tomcatMetrics() {\n-\t\treturn new TomcatMetrics(\n-\t\t\t\t(this.context != null) ? this.context.getManager() : null,\n-\t\t\t\tCollections.emptyList());\n-\t}\n-\n \t@Bean\n-\t@ConditionalOnWebApplication(type = Type.SERVLET)\n-\tpublic WebServerFactoryCustomizer<TomcatServletWebServerFactory> contextCapturingServletTomcatCustomizer() {\n-\t\treturn (tomcatFactory) -> tomcatFactory.addContextCustomizers(this::setContext);\n-\t}\n-\n-\t@Bean\n-\t@ConditionalOnWebApplication(type = Type.REACTIVE)\n-\tpublic WebServerFactoryCustomizer<TomcatReactiveWebServerFactory> contextCapturingReactiveTomcatCustomizer() {\n-\t\treturn (tomcatFactory) -> tomcatFactory.addContextCustomizers(this::setContext);\n-\t}\n-\n-\tprivate void setContext(Context context) {\n-\t\tthis.context = context;\n+\t@ConditionalOnBean(MeterRegistry.class)\n+\t@ConditionalOnMissingBean({ TomcatMetrics.class, TomcatMetricsBinder.class })\n+\tpublic TomcatMetricsBinder tomcatMetricsBinder(MeterRegistry meterRegistry) {\n+\t\treturn new TomcatMetricsBinder(meterRegistry);\n \t}\n \n }\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics.web.tomcat;\n\nimport io.micrometer.core.instrument.MeterRegistry;\nimport io.micrometer.core.instrument.binder.tomcat.TomcatMetrics;\nimport org.apache.catalina.Manager;\n\nimport org.springframework.boot.actuate.metrics.web.tomcat.TomcatMetricsBinder;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link TomcatMetrics}.\n *\n * @author Andy Wilkinson\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnWebApplication\n@ConditionalOnClass({ TomcatMetrics.class, Manager.class })\npublic class TomcatMetricsAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnBean(MeterRegistry.class)\n\t@ConditionalOnMissingBean({ TomcatMetrics.class, TomcatMetricsBinder.class })\n\tpublic TomcatMetricsBinder tomcatMetricsBinder(MeterRegistry meterRegistry) {\n\t\treturn new TomcatMetricsBinder(meterRegistry);\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics.web.tomcat;\n\nimport java.util.Collections;\n\nimport io.micrometer.core.instrument.binder.tomcat.TomcatMetrics;\nimport org.apache.catalina.Context;\nimport org.apache.catalina.Manager;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactory;\nimport org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;\nimport org.springframework.boot.web.server.WebServerFactoryCustomizer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link TomcatMetrics}.\n *\n * @author Andy Wilkinson\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnWebApplication\n@ConditionalOnClass({ TomcatMetrics.class, Manager.class })\npublic class TomcatMetricsAutoConfiguration {\n\n\tprivate volatile Context context;\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic TomcatMetrics tomcatMetrics() {\n\t\treturn new TomcatMetrics(\n\t\t\t\t(this.context != null) ? this.context.getManager() : null,\n\t\t\t\tCollections.emptyList());\n\t}\n\n\t@Bean\n\t@ConditionalOnWebApplication(type = Type.SERVLET)\n\tpublic WebServerFactoryCustomizer<TomcatServletWebServerFactory> contextCapturingServletTomcatCustomizer() {\n\t\treturn (tomcatFactory) -> tomcatFactory.addContextCustomizers(this::setContext);\n\t}\n\n\t@Bean\n\t@ConditionalOnWebApplication(type = Type.REACTIVE)\n\tpublic WebServerFactoryCustomizer<TomcatReactiveWebServerFactory> contextCapturingReactiveTomcatCustomizer() {\n\t\treturn (tomcatFactory) -> tomcatFactory.addContextCustomizers(this::setContext);\n\t}\n\n\tprivate void setContext(Context context) {\n\t\tthis.context = context;\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
