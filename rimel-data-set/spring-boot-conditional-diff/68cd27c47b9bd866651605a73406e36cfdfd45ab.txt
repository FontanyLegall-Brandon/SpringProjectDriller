@@ -50,44 +50,50 @@ import org.springframework.util.StringUtils;
 @Configuration
 @AutoConfigureAfter({ MetricsAutoConfiguration.class, DataSourceAutoConfiguration.class,
 		SimpleMetricsExportAutoConfiguration.class })
-@ConditionalOnBean({ DataSource.class, DataSourcePoolMetadataProvider.class,
-		MeterRegistry.class })
+@ConditionalOnBean({ DataSource.class, MeterRegistry.class })
 public class DataSourcePoolMetricsAutoConfiguration {
 
-	private static final String DATASOURCE_SUFFIX = ;
+	@Configuration
+	@ConditionalOnBean(DataSourcePoolMetadataProvider.class)
+	static class DataSourcePoolMetadataMetricsConfiguration {
 
-	private final MeterRegistry registry;
+		private static final String DATASOURCE_SUFFIX = ;
 
-	private final Collection<DataSourcePoolMetadataProvider> metadataProviders;
+		private final MeterRegistry registry;
 
-	public DataSourcePoolMetricsAutoConfiguration(MeterRegistry registry,
-			Collection<DataSourcePoolMetadataProvider> metadataProviders) {
-		this.registry = registry;
-		this.metadataProviders = metadataProviders;
-	}
+		private final Collection<DataSourcePoolMetadataProvider> metadataProviders;
 
-	@Autowired
-	public void bindDataSourcesToRegistry(Map<String, DataSource> dataSources) {
-		dataSources.forEach(this::bindDataSourceToRegistry);
-	}
+		DataSourcePoolMetadataMetricsConfiguration(MeterRegistry registry,
+				Collection<DataSourcePoolMetadataProvider> metadataProviders) {
+			this.registry = registry;
+			this.metadataProviders = metadataProviders;
+		}
 
-	private void bindDataSourceToRegistry(String beanName, DataSource dataSource) {
-		String dataSourceName = getDataSourceName(beanName);
-		new DataSourcePoolMetrics(dataSource, this.metadataProviders, dataSourceName,
-				Collections.emptyList()).bindTo(this.registry);
-	}
+		@Autowired
+		public void bindDataSourcesToRegistry(Map<String, DataSource> dataSources) {
+			dataSources.forEach(this::bindDataSourceToRegistry);
+		}
+
+		private void bindDataSourceToRegistry(String beanName, DataSource dataSource) {
+			String dataSourceName = getDataSourceName(beanName);
+			new DataSourcePoolMetrics(dataSource, this.metadataProviders, dataSourceName,
+					Collections.emptyList()).bindTo(this.registry);
+		}
 
-	
-	private String getDataSourceName(String beanName) {
-		if (beanName.length() > DATASOURCE_SUFFIX.length()
-				&& StringUtils.endsWithIgnoreCase(beanName, DATASOURCE_SUFFIX)) {
-			return beanName.substring(0, beanName.length() - DATASOURCE_SUFFIX.length());
+		
+		private String getDataSourceName(String beanName) {
+			if (beanName.length() > DATASOURCE_SUFFIX.length()
+					&& StringUtils.endsWithIgnoreCase(beanName, DATASOURCE_SUFFIX)) {
+				return beanName.substring(0,
+						beanName.length() - DATASOURCE_SUFFIX.length());
+			}
+			return beanName;
 		}
-		return beanName;
+
 	}
 
 	@Configuration

