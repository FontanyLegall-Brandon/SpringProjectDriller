{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/XADataSourceAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,119 @@\n+/*\n+ * Copyright 2012-2014 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.jdbc;\n+\n+import javax.sql.DataSource;\n+import javax.sql.XADataSource;\n+import javax.transaction.TransactionManager;\n+\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.MutablePropertyValues;\n+import org.springframework.beans.factory.BeanClassLoaderAware;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.jta.JtaAutoConfiguration;\n+import org.springframework.boot.bind.RelaxedDataBinder;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.jta.XADataSourceWrapper;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.util.Assert;\n+import org.springframework.util.ClassUtils;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for {@link DataSource} with XA.\n+ *\n+ * @author Phillip Webb\n+ * @author Josh Long\n+ * @since 1.2.0\n+ */\n+@AutoConfigureBefore(DataSourceAutoConfiguration.class)\n+@AutoConfigureAfter(JtaAutoConfiguration.class)\n+@EnableConfigurationProperties(DataSourceProperties.class)\n+@ConditionalOnClass({ DataSource.class, TransactionManager.class })\n+@ConditionalOnBean(XADataSourceWrapper.class)\n+@ConditionalOnMissingBean(DataSource.class)\n+public class XADataSourceAutoConfiguration implements BeanClassLoaderAware {\n+\n+\t@Autowired\n+\tprivate XADataSourceWrapper wrapper;\n+\n+\t@Autowired\n+\tprivate DataSourceProperties properties;\n+\n+\t@Autowired(required = false)\n+\tprivate XADataSource xaDataSource;\n+\n+\tprivate ClassLoader classLoader;\n+\n+\t@Bean\n+\t@ConfigurationProperties(prefix = DataSourceProperties.PREFIX)\n+\tpublic DataSource dataSource() throws Exception {\n+\t\tXADataSource xaDataSource = this.xaDataSource;\n+\t\tif (xaDataSource == null) {\n+\t\t\txaDataSource = createXaDataSource();\n+\t\t}\n+\t\treturn this.wrapper.wrapDataSource(xaDataSource);\n+\t}\n+\n+\t@Override\n+\tpublic void setBeanClassLoader(ClassLoader classLoader) {\n+\t\tthis.classLoader = classLoader;\n+\t}\n+\n+\tprivate XADataSource createXaDataSource() {\n+\t\tString className = this.properties.getXa().getDataSourceClassName();\n+\t\tif (!StringUtils.hasLength(className)) {\n+\t\t\tclassName = DatabaseDriver.fromJdbcUrl(this.properties.getUrl())\n+\t\t\t\t\t.getXaDataSourceClassName();\n+\t\t}\n+\t\tAssert.state(StringUtils.hasLength(className),\n+\t\t\t\t"No XA DataSource class name specified");\n+\t\tXADataSource dataSource = createXaDataSourceInstance(className);\n+\t\tbindXaProperties(dataSource, this.properties);\n+\t\treturn dataSource;\n+\t}\n+\n+\tprivate XADataSource createXaDataSourceInstance(String className) {\n+\t\ttry {\n+\t\t\tClass<?> dataSourceClass = ClassUtils.forName(className, this.classLoader);\n+\t\t\tObject instance = BeanUtils.instantiate(dataSourceClass);\n+\t\t\tAssert.isInstanceOf(XADataSource.class, instance);\n+\t\t\treturn (XADataSource) instance;\n+\t\t}\n+\t\tcatch (Exception ex) {\n+\t\t\tthrow new IllegalStateException(\n+\t\t\t\t\t"Unable to create XADataSource instance from \'" + className + "\'");\n+\t\t}\n+\t}\n+\n+\tprivate void bindXaProperties(XADataSource target, DataSourceProperties properties) {\n+\t\tMutablePropertyValues values = new MutablePropertyValues();\n+\t\tvalues.add("user", this.properties.getUsername());\n+\t\tvalues.add("password", this.properties.getPassword());\n+\t\tvalues.add("url", this.properties.getUrl());\n+\t\tvalues.addPropertyValues(properties.getXa().getProperties());\n+\t\tnew RelaxedDataBinder(target).withAlias("user", "username").bind(values);\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jdbc;\n\nimport javax.sql.DataSource;\nimport javax.sql.XADataSource;\nimport javax.transaction.TransactionManager;\n\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.MutablePropertyValues;\nimport org.springframework.beans.factory.BeanClassLoaderAware;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.jta.JtaAutoConfiguration;\nimport org.springframework.boot.bind.RelaxedDataBinder;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.jta.XADataSourceWrapper;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.util.Assert;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link DataSource} with XA.\n *\n * @author Phillip Webb\n * @author Josh Long\n * @since 1.2.0\n */\n@AutoConfigureBefore(DataSourceAutoConfiguration.class)\n@AutoConfigureAfter(JtaAutoConfiguration.class)\n@EnableConfigurationProperties(DataSourceProperties.class)\n@ConditionalOnClass({ DataSource.class, TransactionManager.class })\n@ConditionalOnBean(XADataSourceWrapper.class)\n@ConditionalOnMissingBean(DataSource.class)\npublic class XADataSourceAutoConfiguration implements BeanClassLoaderAware {\n\n\t@Autowired\n\tprivate XADataSourceWrapper wrapper;\n\n\t@Autowired\n\tprivate DataSourceProperties properties;\n\n\t@Autowired(required = false)\n\tprivate XADataSource xaDataSource;\n\n\tprivate ClassLoader classLoader;\n\n\t@Bean\n\t@ConfigurationProperties(prefix = DataSourceProperties.PREFIX)\n\tpublic DataSource dataSource() throws Exception {\n\t\tXADataSource xaDataSource = this.xaDataSource;\n\t\tif (xaDataSource == null) {\n\t\t\txaDataSource = createXaDataSource();\n\t\t}\n\t\treturn this.wrapper.wrapDataSource(xaDataSource);\n\t}\n\n\t@Override\n\tpublic void setBeanClassLoader(ClassLoader classLoader) {\n\t\tthis.classLoader = classLoader;\n\t}\n\n\tprivate XADataSource createXaDataSource() {\n\t\tString className = this.properties.getXa().getDataSourceClassName();\n\t\tif (!StringUtils.hasLength(className)) {\n\t\t\tclassName = DatabaseDriver.fromJdbcUrl(this.properties.getUrl())\n\t\t\t\t\t.getXaDataSourceClassName();\n\t\t}\n\t\tAssert.state(StringUtils.hasLength(className),\n\t\t\t\t"No XA DataSource class name specified");\n\t\tXADataSource dataSource = createXaDataSourceInstance(className);\n\t\tbindXaProperties(dataSource, this.properties);\n\t\treturn dataSource;\n\t}\n\n\tprivate XADataSource createXaDataSourceInstance(String className) {\n\t\ttry {\n\t\t\tClass<?> dataSourceClass = ClassUtils.forName(className, this.classLoader);\n\t\t\tObject instance = BeanUtils.instantiate(dataSourceClass);\n\t\t\tAssert.isInstanceOf(XADataSource.class, instance);\n\t\t\treturn (XADataSource) instance;\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t"Unable to create XADataSource instance from \'" + className + "\'");\n\t\t}\n\t}\n\n\tprivate void bindXaProperties(XADataSource target, DataSourceProperties properties) {\n\t\tMutablePropertyValues values = new MutablePropertyValues();\n\t\tvalues.add("user", this.properties.getUsername());\n\t\tvalues.add("password", this.properties.getPassword());\n\t\tvalues.add("url", this.properties.getUrl());\n\t\tvalues.addPropertyValues(properties.getXa().getProperties());\n\t\tnew RelaxedDataBinder(target).withAlias("user", "username").bind(values);\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
