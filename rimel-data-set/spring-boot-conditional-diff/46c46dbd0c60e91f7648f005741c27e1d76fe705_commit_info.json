{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/TwitterAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/TwitterAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -17,6 +17,7 @@\n package org.springframework.boot.autoconfigure.social;\n \n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n@@ -29,6 +30,7 @@ import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Scope;\n import org.springframework.context.annotation.ScopedProxyMode;\n import org.springframework.social.config.annotation.EnableSocial;\n+import org.springframework.social.config.annotation.SocialConfigurerAdapter;\n import org.springframework.social.connect.Connection;\n import org.springframework.social.connect.ConnectionFactory;\n import org.springframework.social.connect.ConnectionRepository;\n@@ -46,7 +48,9 @@ import org.springframework.web.servlet.View;\n  * @since 1.1.0\n  */\n @Configuration\n-@ConditionalOnClass({ TwitterConnectionFactory.class })\n+@ConditionalOnClass({ SocialConfigurerAdapter.class, TwitterConnectionFactory.class })\n+@ConditionalOnProperty(prefix = "spring.social.twitter.", value = "app-id")\n+@AutoConfigureBefore(SocialWebAutoConfiguration.class)\n @AutoConfigureAfter(WebMvcAutoConfiguration.class)\n public class TwitterAutoConfiguration {\n \n@@ -69,7 +73,7 @@ public class TwitterAutoConfiguration {\n \t\t}\n \n \t\t@Bean\n-\t\t@ConditionalOnMissingBean(TwitterConnectionFactory.class)\n+\t\t@ConditionalOnMissingBean\n \t\t@Scope(value = "request", proxyMode = ScopedProxyMode.INTERFACES)\n \t\tpublic Twitter twitter(ConnectionRepository repository) {\n \t\t\tConnection<Twitter> connection = repository\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.social;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.boot.bind.RelaxedPropertyResolver;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.context.annotation.ScopedProxyMode;\nimport org.springframework.social.config.annotation.EnableSocial;\nimport org.springframework.social.config.annotation.SocialConfigurerAdapter;\nimport org.springframework.social.connect.Connection;\nimport org.springframework.social.connect.ConnectionFactory;\nimport org.springframework.social.connect.ConnectionRepository;\nimport org.springframework.social.connect.web.GenericConnectionStatusView;\nimport org.springframework.social.twitter.api.Twitter;\nimport org.springframework.social.twitter.api.impl.TwitterTemplate;\nimport org.springframework.social.twitter.connect.TwitterConnectionFactory;\nimport org.springframework.web.servlet.View;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Social connectivity with\n * Twitter.\n * \n * @author Craig Walls\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass({ SocialConfigurerAdapter.class, TwitterConnectionFactory.class })\n@ConditionalOnProperty(prefix = "spring.social.twitter.", value = "app-id")\n@AutoConfigureBefore(SocialWebAutoConfiguration.class)\n@AutoConfigureAfter(WebMvcAutoConfiguration.class)\npublic class TwitterAutoConfiguration {\n\n\t@Configuration\n\t@EnableSocial\n\t@ConditionalOnWebApplication\n\tprotected static class TwitterAutoConfigurationAdapter extends\n\t\t\tSocialAutoConfigurerAdapter {\n\n\t\t@Override\n\t\tprotected String getPropertyPrefix() {\n\t\t\treturn "spring.social.twitter.";\n\t\t}\n\n\t\t@Override\n\t\tprotected ConnectionFactory<?> createConnectionFactory(\n\t\t\t\tRelaxedPropertyResolver properties) {\n\t\t\treturn new TwitterConnectionFactory(properties.getRequiredProperty("app-id"),\n\t\t\t\t\tproperties.getRequiredProperty("app-secret"));\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@Scope(value = "request", proxyMode = ScopedProxyMode.INTERFACES)\n\t\tpublic Twitter twitter(ConnectionRepository repository) {\n\t\t\tConnection<Twitter> connection = repository\n\t\t\t\t\t.findPrimaryConnection(Twitter.class);\n\t\t\tif (connection != null) {\n\t\t\t\treturn connection.getApi();\n\t\t\t}\n\t\t\tString id = getProperties().getRequiredProperty("app-id");\n\t\t\tString secret = getProperties().getRequiredProperty("app-secret");\n\t\t\treturn new TwitterTemplate(id, secret);\n\t\t}\n\n\t\t@Bean(name = { "connect/twitterConnect", "connect/twitterConnected" })\n\t\t@ConditionalOnProperty(prefix = "spring.social.", value = "auto-connection-views")\n\t\tpublic View twitterConnectView() {\n\t\t\treturn new GenericConnectionStatusView("twitter", "Twitter");\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.social;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.boot.bind.RelaxedPropertyResolver;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.context.annotation.ScopedProxyMode;\nimport org.springframework.social.config.annotation.EnableSocial;\nimport org.springframework.social.connect.Connection;\nimport org.springframework.social.connect.ConnectionFactory;\nimport org.springframework.social.connect.ConnectionRepository;\nimport org.springframework.social.connect.web.GenericConnectionStatusView;\nimport org.springframework.social.twitter.api.Twitter;\nimport org.springframework.social.twitter.api.impl.TwitterTemplate;\nimport org.springframework.social.twitter.connect.TwitterConnectionFactory;\nimport org.springframework.web.servlet.View;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Social connectivity with\n * Twitter.\n * \n * @author Craig Walls\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass({ TwitterConnectionFactory.class })\n@AutoConfigureAfter(WebMvcAutoConfiguration.class)\npublic class TwitterAutoConfiguration {\n\n\t@Configuration\n\t@EnableSocial\n\t@ConditionalOnWebApplication\n\tprotected static class TwitterAutoConfigurationAdapter extends\n\t\t\tSocialAutoConfigurerAdapter {\n\n\t\t@Override\n\t\tprotected String getPropertyPrefix() {\n\t\t\treturn "spring.social.twitter.";\n\t\t}\n\n\t\t@Override\n\t\tprotected ConnectionFactory<?> createConnectionFactory(\n\t\t\t\tRelaxedPropertyResolver properties) {\n\t\t\treturn new TwitterConnectionFactory(properties.getRequiredProperty("app-id"),\n\t\t\t\t\tproperties.getRequiredProperty("app-secret"));\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(TwitterConnectionFactory.class)\n\t\t@Scope(value = "request", proxyMode = ScopedProxyMode.INTERFACES)\n\t\tpublic Twitter twitter(ConnectionRepository repository) {\n\t\t\tConnection<Twitter> connection = repository\n\t\t\t\t\t.findPrimaryConnection(Twitter.class);\n\t\t\tif (connection != null) {\n\t\t\t\treturn connection.getApi();\n\t\t\t}\n\t\t\tString id = getProperties().getRequiredProperty("app-id");\n\t\t\tString secret = getProperties().getRequiredProperty("app-secret");\n\t\t\treturn new TwitterTemplate(id, secret);\n\t\t}\n\n\t\t@Bean(name = { "connect/twitterConnect", "connect/twitterConnected" })\n\t\t@ConditionalOnProperty(prefix = "spring.social.", value = "auto-connection-views")\n\t\tpublic View twitterConnectView() {\n\t\t\treturn new GenericConnectionStatusView("twitter", "Twitter");\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
