@@ -0,0 +1,94 @@
+
+
+package org.springframework.boot.autoconfigure.flyway;
+
+import javax.annotation.PostConstruct;
+import javax.sql.DataSource;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;
+import org.springframework.boot.context.properties.EnableConfigurationProperties;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.core.io.DefaultResourceLoader;
+import org.springframework.core.io.Resource;
+import org.springframework.core.io.ResourceLoader;
+import org.springframework.util.Assert;
+
+import com.googlecode.flyway.core.Flyway;
+
+
+@Configuration
+@ConditionalOnClass(Flyway.class)
+@AutoConfigureAfter(DataSourceAutoConfiguration.class)
+public class FlywayAutoConfiguration {
+
+	@Configuration
+	@ConditionalOnMissingBean(Flyway.class)
+	@EnableConfigurationProperties(FlywayProperties.class)
+	public static class LiquibaseConfiguration {
+
+		@Autowired
+		private FlywayProperties properties = new FlywayProperties();
+
+		@Autowired
+		private ResourceLoader resourceLoader = new DefaultResourceLoader();
+
+		@Autowired
+		private DataSource dataSource;
+
+		@PostConstruct
+		public void checkLocationExists() {
+			if (this.properties.isCheckLocation()) {
+
+				Assert.state(!this.properties.getLocations().isEmpty(),
+						);
+				boolean exists = false;
+				for (String location : this.properties.getLocations()) {
+					Resource resource = this.resourceLoader.getResource(location);
+					exists = !exists && resource.exists();
+				}
+				Assert.state(exists, 
+						+ this.properties.getLocations()
+						+ );
+			}
+		}
+
+		@Bean
+		public Flyway flyway(DataSource dataSource) {
+			Flyway flyway = new Flyway();
+			flyway.setLocations(this.properties.getLocations().toArray(new String[0]));
+			flyway.setSchemas(this.properties.getSchemas().toArray(new String[0]));
+			flyway.setInitVersion(this.properties.getInitVersion());
+			flyway.setSqlMigrationPrefix(this.properties.getPrefix());
+			flyway.setSqlMigrationSuffix(this.properties.getSuffix());
+			flyway.setDataSource(dataSource);
+			flyway.migrate();
+			return flyway;
+		}
+
+	}
+
+}

