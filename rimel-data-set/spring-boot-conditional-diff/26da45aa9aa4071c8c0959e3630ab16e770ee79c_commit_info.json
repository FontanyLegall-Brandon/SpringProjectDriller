{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/jersey/JerseyWebEndpointManagementContextConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/jersey/JerseyWebEndpointManagementContextConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -23,7 +23,9 @@ import java.util.HashSet;\n import java.util.List;\n \n import org.glassfish.jersey.server.ResourceConfig;\n+import org.glassfish.jersey.servlet.ServletContainer;\n \n+import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties;\n import org.springframework.boot.actuate.autoconfigure.web.ManagementContextConfiguration;\n import org.springframework.boot.actuate.endpoint.ExposableEndpoint;\n@@ -40,8 +42,14 @@ import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\n+import org.springframework.boot.autoconfigure.jersey.JerseyProperties;\n import org.springframework.boot.autoconfigure.jersey.ResourceConfigCustomizer;\n+import org.springframework.boot.autoconfigure.web.servlet.DefaultJerseyApplicationPath;\n+import org.springframework.boot.autoconfigure.web.servlet.JerseyApplicationPath;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.web.servlet.ServletRegistrationBean;\n import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n \n /**\n  * {@link ManagementContextConfiguration} for Jersey {@link Endpoint} concerns.\n@@ -49,6 +57,7 @@ import org.springframework.context.annotation.Bean;\n  * @author Andy Wilkinson\n  * @author Phillip Webb\n  * @author Michael Simons\n+ * @author Madhura Bhave\n  */\n @ManagementContextConfiguration\n @ConditionalOnWebApplication(type = Type.SERVLET)\n@@ -57,12 +66,6 @@ import org.springframework.context.annotation.Bean;\n @ConditionalOnMissingBean(type = "org.springframework.web.servlet.DispatcherServlet")\n class JerseyWebEndpointManagementContextConfiguration {\n \n-\t@ConditionalOnMissingBean(ResourceConfig.class)\n-\t@Bean\n-\tpublic ResourceConfig resourceConfig() {\n-\t\treturn new ResourceConfig();\n-\t}\n-\n \t@Bean\n \tpublic ResourceConfigCustomizer webEndpointRegistrar(\n \t\t\tWebEndpointsSupplier webEndpointsSupplier,\n@@ -85,4 +88,37 @@ class JerseyWebEndpointManagementContextConfiguration {\n \t\t};\n \t}\n \n+\t@Configuration\n+\t@ConditionalOnMissingBean(ResourceConfig.class)\n+\t@EnableConfigurationProperties(JerseyProperties.class)\n+\tstatic class ResourceConfigConfiguration {\n+\n+\t\t@Bean\n+\t\tpublic ResourceConfig resourceConfig(\n+\t\t\t\tObjectProvider<ResourceConfigCustomizer> resourceConfigCustomizers) {\n+\t\t\tResourceConfig resourceConfig = new ResourceConfig();\n+\t\t\tresourceConfigCustomizers.orderedStream()\n+\t\t\t\t\t.forEach((customizer) -> customizer.customize(resourceConfig));\n+\t\t\treturn resourceConfig;\n+\t\t}\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean\n+\t\tpublic JerseyApplicationPath jerseyApplicationPath(JerseyProperties properties,\n+\t\t\t\tResourceConfig config) {\n+\t\t\treturn new DefaultJerseyApplicationPath(properties.getApplicationPath(),\n+\t\t\t\t\tconfig);\n+\t\t}\n+\n+\t\t@Bean\n+\t\tpublic ServletRegistrationBean<ServletContainer> jerseyServletRegistration(\n+\t\t\t\tObjectProvider<ResourceConfigCustomizer> resourceConfigCustomizers,\n+\t\t\t\tJerseyApplicationPath jerseyApplicationPath) {\n+\t\t\treturn new ServletRegistrationBean<>(\n+\t\t\t\t\tnew ServletContainer(resourceConfig(resourceConfigCustomizers)),\n+\t\t\t\t\tjerseyApplicationPath.getUrlMapping());\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.endpoint.web.jersey;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\n\nimport org.glassfish.jersey.server.ResourceConfig;\nimport org.glassfish.jersey.servlet.ServletContainer;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties;\nimport org.springframework.boot.actuate.autoconfigure.web.ManagementContextConfiguration;\nimport org.springframework.boot.actuate.endpoint.ExposableEndpoint;\nimport org.springframework.boot.actuate.endpoint.annotation.Endpoint;\nimport org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver;\nimport org.springframework.boot.actuate.endpoint.web.EndpointMapping;\nimport org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes;\nimport org.springframework.boot.actuate.endpoint.web.ExposableWebEndpoint;\nimport org.springframework.boot.actuate.endpoint.web.WebEndpointsSupplier;\nimport org.springframework.boot.actuate.endpoint.web.annotation.ServletEndpointsSupplier;\nimport org.springframework.boot.actuate.endpoint.web.jersey.JerseyEndpointResourceFactory;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.autoconfigure.jersey.JerseyProperties;\nimport org.springframework.boot.autoconfigure.jersey.ResourceConfigCustomizer;\nimport org.springframework.boot.autoconfigure.web.servlet.DefaultJerseyApplicationPath;\nimport org.springframework.boot.autoconfigure.web.servlet.JerseyApplicationPath;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.web.servlet.ServletRegistrationBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link ManagementContextConfiguration} for Jersey {@link Endpoint} concerns.\n *\n * @author Andy Wilkinson\n * @author Phillip Webb\n * @author Michael Simons\n * @author Madhura Bhave\n */\n@ManagementContextConfiguration\n@ConditionalOnWebApplication(type = Type.SERVLET)\n@ConditionalOnClass(ResourceConfig.class)\n@ConditionalOnBean(WebEndpointsSupplier.class)\n@ConditionalOnMissingBean(type = "org.springframework.web.servlet.DispatcherServlet")\nclass JerseyWebEndpointManagementContextConfiguration {\n\n\t@Bean\n\tpublic ResourceConfigCustomizer webEndpointRegistrar(\n\t\t\tWebEndpointsSupplier webEndpointsSupplier,\n\t\t\tServletEndpointsSupplier servletEndpointsSupplier,\n\t\t\tEndpointMediaTypes endpointMediaTypes,\n\t\t\tWebEndpointProperties webEndpointProperties) {\n\t\tList<ExposableEndpoint<?>> allEndpoints = new ArrayList<>();\n\t\tallEndpoints.addAll(webEndpointsSupplier.getEndpoints());\n\t\tallEndpoints.addAll(servletEndpointsSupplier.getEndpoints());\n\t\treturn (resourceConfig) -> {\n\t\t\tJerseyEndpointResourceFactory resourceFactory = new JerseyEndpointResourceFactory();\n\t\t\tString basePath = webEndpointProperties.getBasePath();\n\t\t\tEndpointMapping endpointMapping = new EndpointMapping(basePath);\n\t\t\tCollection<ExposableWebEndpoint> webEndpoints = Collections\n\t\t\t\t\t.unmodifiableCollection(webEndpointsSupplier.getEndpoints());\n\t\t\tresourceConfig.registerResources(\n\t\t\t\t\tnew HashSet<>(resourceFactory.createEndpointResources(endpointMapping,\n\t\t\t\t\t\t\twebEndpoints, endpointMediaTypes,\n\t\t\t\t\t\t\tnew EndpointLinksResolver(allEndpoints, basePath))));\n\t\t};\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(ResourceConfig.class)\n\t@EnableConfigurationProperties(JerseyProperties.class)\n\tstatic class ResourceConfigConfiguration {\n\n\t\t@Bean\n\t\tpublic ResourceConfig resourceConfig(\n\t\t\t\tObjectProvider<ResourceConfigCustomizer> resourceConfigCustomizers) {\n\t\t\tResourceConfig resourceConfig = new ResourceConfig();\n\t\t\tresourceConfigCustomizers.orderedStream()\n\t\t\t\t\t.forEach((customizer) -> customizer.customize(resourceConfig));\n\t\t\treturn resourceConfig;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic JerseyApplicationPath jerseyApplicationPath(JerseyProperties properties,\n\t\t\t\tResourceConfig config) {\n\t\t\treturn new DefaultJerseyApplicationPath(properties.getApplicationPath(),\n\t\t\t\t\tconfig);\n\t\t}\n\n\t\t@Bean\n\t\tpublic ServletRegistrationBean<ServletContainer> jerseyServletRegistration(\n\t\t\t\tObjectProvider<ResourceConfigCustomizer> resourceConfigCustomizers,\n\t\t\t\tJerseyApplicationPath jerseyApplicationPath) {\n\t\t\treturn new ServletRegistrationBean<>(\n\t\t\t\t\tnew ServletContainer(resourceConfig(resourceConfigCustomizers)),\n\t\t\t\t\tjerseyApplicationPath.getUrlMapping());\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.endpoint.web.jersey;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\n\nimport org.glassfish.jersey.server.ResourceConfig;\n\nimport org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties;\nimport org.springframework.boot.actuate.autoconfigure.web.ManagementContextConfiguration;\nimport org.springframework.boot.actuate.endpoint.ExposableEndpoint;\nimport org.springframework.boot.actuate.endpoint.annotation.Endpoint;\nimport org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver;\nimport org.springframework.boot.actuate.endpoint.web.EndpointMapping;\nimport org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes;\nimport org.springframework.boot.actuate.endpoint.web.ExposableWebEndpoint;\nimport org.springframework.boot.actuate.endpoint.web.WebEndpointsSupplier;\nimport org.springframework.boot.actuate.endpoint.web.annotation.ServletEndpointsSupplier;\nimport org.springframework.boot.actuate.endpoint.web.jersey.JerseyEndpointResourceFactory;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.autoconfigure.jersey.ResourceConfigCustomizer;\nimport org.springframework.context.annotation.Bean;\n\n/**\n * {@link ManagementContextConfiguration} for Jersey {@link Endpoint} concerns.\n *\n * @author Andy Wilkinson\n * @author Phillip Webb\n * @author Michael Simons\n */\n@ManagementContextConfiguration\n@ConditionalOnWebApplication(type = Type.SERVLET)\n@ConditionalOnClass(ResourceConfig.class)\n@ConditionalOnBean(WebEndpointsSupplier.class)\n@ConditionalOnMissingBean(type = "org.springframework.web.servlet.DispatcherServlet")\nclass JerseyWebEndpointManagementContextConfiguration {\n\n\t@ConditionalOnMissingBean(ResourceConfig.class)\n\t@Bean\n\tpublic ResourceConfig resourceConfig() {\n\t\treturn new ResourceConfig();\n\t}\n\n\t@Bean\n\tpublic ResourceConfigCustomizer webEndpointRegistrar(\n\t\t\tWebEndpointsSupplier webEndpointsSupplier,\n\t\t\tServletEndpointsSupplier servletEndpointsSupplier,\n\t\t\tEndpointMediaTypes endpointMediaTypes,\n\t\t\tWebEndpointProperties webEndpointProperties) {\n\t\tList<ExposableEndpoint<?>> allEndpoints = new ArrayList<>();\n\t\tallEndpoints.addAll(webEndpointsSupplier.getEndpoints());\n\t\tallEndpoints.addAll(servletEndpointsSupplier.getEndpoints());\n\t\treturn (resourceConfig) -> {\n\t\t\tJerseyEndpointResourceFactory resourceFactory = new JerseyEndpointResourceFactory();\n\t\t\tString basePath = webEndpointProperties.getBasePath();\n\t\t\tEndpointMapping endpointMapping = new EndpointMapping(basePath);\n\t\t\tCollection<ExposableWebEndpoint> webEndpoints = Collections\n\t\t\t\t\t.unmodifiableCollection(webEndpointsSupplier.getEndpoints());\n\t\t\tresourceConfig.registerResources(\n\t\t\t\t\tnew HashSet<>(resourceFactory.createEndpointResources(endpointMapping,\n\t\t\t\t\t\t\twebEndpoints, endpointMediaTypes,\n\t\t\t\t\t\t\tnew EndpointLinksResolver(allEndpoints, basePath))));\n\t\t};\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
