{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -23,7 +23,7 @@ import java.util.HashMap;\n import java.util.Map;\n import java.util.stream.Stream;\n \n-import com.mongodb.client.MongoClient;\n+import com.mongodb.MongoClientSettings;\n import de.flapdoodle.embed.mongo.Command;\n import de.flapdoodle.embed.mongo.MongodExecutable;\n import de.flapdoodle.embed.mongo.MongodStarter;\n@@ -86,7 +86,7 @@ import org.springframework.data.mongodb.core.ReactiveMongoClientFactoryBean;\n @Configuration(proxyBeanMethods = false)\n @EnableConfigurationProperties({ MongoProperties.class, EmbeddedMongoProperties.class })\n @AutoConfigureBefore(MongoAutoConfiguration.class)\n-@ConditionalOnClass({ MongoClient.class, MongodStarter.class })\n+@ConditionalOnClass({ MongoClientSettings.class, MongodStarter.class })\n @Import({ EmbeddedMongoClientDependsOnBeanFactoryPostProcessor.class,\n \t\tEmbeddedReactiveStreamsMongoClientDependsOnBeanFactoryPostProcessor.class })\n public class EmbeddedMongoAutoConfiguration {\n@@ -217,10 +217,10 @@ public class EmbeddedMongoAutoConfiguration {\n \t}\n \n \t/**\n-\t * Post processor to ensure that {@link MongoClient} beans depend on any\n-\t * {@link MongodExecutable} beans.\n+\t * Post processor to ensure that {@link com.mongodb.client.MongoClient} beans depend\n+\t * on any {@link MongodExecutable} beans.\n \t */\n-\t@ConditionalOnClass({ MongoClient.class, MongoClientFactoryBean.class })\n+\t@ConditionalOnClass({ com.mongodb.client.MongoClient.class, MongoClientFactoryBean.class })\n \tstatic class EmbeddedMongoClientDependsOnBeanFactoryPostProcessor\n \t\t\textends MongoClientDependsOnBeanFactoryPostProcessor {\n \n', 'source_code': '/*\n * Copyright 2012-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.mongo.embedded;\n\nimport java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.stream.Stream;\n\nimport com.mongodb.MongoClientSettings;\nimport de.flapdoodle.embed.mongo.Command;\nimport de.flapdoodle.embed.mongo.MongodExecutable;\nimport de.flapdoodle.embed.mongo.MongodStarter;\nimport de.flapdoodle.embed.mongo.config.DownloadConfigBuilder;\nimport de.flapdoodle.embed.mongo.config.ExtractedArtifactStoreBuilder;\nimport de.flapdoodle.embed.mongo.config.IMongodConfig;\nimport de.flapdoodle.embed.mongo.config.MongodConfigBuilder;\nimport de.flapdoodle.embed.mongo.config.Net;\nimport de.flapdoodle.embed.mongo.config.RuntimeConfigBuilder;\nimport de.flapdoodle.embed.mongo.config.Storage;\nimport de.flapdoodle.embed.mongo.distribution.Feature;\nimport de.flapdoodle.embed.mongo.distribution.IFeatureAwareVersion;\nimport de.flapdoodle.embed.mongo.distribution.Version;\nimport de.flapdoodle.embed.mongo.distribution.Versions;\nimport de.flapdoodle.embed.process.config.IRuntimeConfig;\nimport de.flapdoodle.embed.process.config.io.ProcessOutput;\nimport de.flapdoodle.embed.process.config.store.IDownloadConfig;\nimport de.flapdoodle.embed.process.distribution.GenericVersion;\nimport de.flapdoodle.embed.process.io.Processors;\nimport de.flapdoodle.embed.process.io.Slf4jLevel;\nimport de.flapdoodle.embed.process.io.progress.Slf4jProgressListener;\nimport de.flapdoodle.embed.process.runtime.Network;\nimport de.flapdoodle.embed.process.store.ArtifactStoreBuilder;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.data.mongo.MongoClientDependsOnBeanFactoryPostProcessor;\nimport org.springframework.boot.autoconfigure.data.mongo.ReactiveStreamsMongoClientDependsOnBeanFactoryPostProcessor;\nimport org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration;\nimport org.springframework.boot.autoconfigure.mongo.MongoProperties;\nimport org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration.EmbeddedMongoClientDependsOnBeanFactoryPostProcessor;\nimport org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration.EmbeddedReactiveStreamsMongoClientDependsOnBeanFactoryPostProcessor;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.core.env.MapPropertySource;\nimport org.springframework.core.env.MutablePropertySources;\nimport org.springframework.core.env.PropertySource;\nimport org.springframework.data.mongodb.core.MongoClientFactoryBean;\nimport org.springframework.data.mongodb.core.ReactiveMongoClientFactoryBean;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Embedded Mongo.\n *\n * @author Henryk Konsek\n * @author Andy Wilkinson\n * @author Yogesh Lonkar\n * @author Mark Paluch\n * @author Issam El-atif\n * @since 1.3.0\n */\n@Configuration(proxyBeanMethods = false)\n@EnableConfigurationProperties({ MongoProperties.class, EmbeddedMongoProperties.class })\n@AutoConfigureBefore(MongoAutoConfiguration.class)\n@ConditionalOnClass({ MongoClientSettings.class, MongodStarter.class })\n@Import({ EmbeddedMongoClientDependsOnBeanFactoryPostProcessor.class,\n\t\tEmbeddedReactiveStreamsMongoClientDependsOnBeanFactoryPostProcessor.class })\npublic class EmbeddedMongoAutoConfiguration {\n\n\tprivate static final byte[] IP4_LOOPBACK_ADDRESS = { 127, 0, 0, 1 };\n\n\tprivate static final byte[] IP6_LOOPBACK_ADDRESS = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };\n\n\tprivate final MongoProperties properties;\n\n\tpublic EmbeddedMongoAutoConfiguration(MongoProperties properties, EmbeddedMongoProperties embeddedProperties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean(initMethod = "start", destroyMethod = "stop")\n\t@ConditionalOnMissingBean\n\tpublic MongodExecutable embeddedMongoServer(IMongodConfig mongodConfig, IRuntimeConfig runtimeConfig,\n\t\t\tApplicationContext context) throws IOException {\n\t\tInteger configuredPort = this.properties.getPort();\n\t\tif (configuredPort == null || configuredPort == 0) {\n\t\t\tsetEmbeddedPort(context, mongodConfig.net().getPort());\n\t\t}\n\t\tMongodStarter mongodStarter = getMongodStarter(runtimeConfig);\n\t\treturn mongodStarter.prepare(mongodConfig);\n\t}\n\n\tprivate MongodStarter getMongodStarter(IRuntimeConfig runtimeConfig) {\n\t\tif (runtimeConfig == null) {\n\t\t\treturn MongodStarter.getDefaultInstance();\n\t\t}\n\t\treturn MongodStarter.getInstance(runtimeConfig);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic IMongodConfig embeddedMongoConfiguration(EmbeddedMongoProperties embeddedProperties) throws IOException {\n\t\tMongodConfigBuilder builder = new MongodConfigBuilder().version(determineVersion(embeddedProperties));\n\t\tEmbeddedMongoProperties.Storage storage = embeddedProperties.getStorage();\n\t\tif (storage != null) {\n\t\t\tString databaseDir = storage.getDatabaseDir();\n\t\t\tString replSetName = storage.getReplSetName();\n\t\t\tint oplogSize = (storage.getOplogSize() != null) ? (int) storage.getOplogSize().toMegabytes() : 0;\n\t\t\tbuilder.replication(new Storage(databaseDir, replSetName, oplogSize));\n\t\t}\n\t\tInteger configuredPort = this.properties.getPort();\n\t\tif (configuredPort != null && configuredPort > 0) {\n\t\t\tbuilder.net(new Net(getHost().getHostAddress(), configuredPort, Network.localhostIsIPv6()));\n\t\t}\n\t\telse {\n\t\t\tbuilder.net(new Net(getHost().getHostAddress(), Network.getFreeServerPort(getHost()),\n\t\t\t\t\tNetwork.localhostIsIPv6()));\n\t\t}\n\t\treturn builder.build();\n\t}\n\n\tprivate IFeatureAwareVersion determineVersion(EmbeddedMongoProperties embeddedProperties) {\n\t\tif (embeddedProperties.getFeatures() == null) {\n\t\t\tfor (Version version : Version.values()) {\n\t\t\t\tif (version.asInDownloadPath().equals(embeddedProperties.getVersion())) {\n\t\t\t\t\treturn version;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Versions.withFeatures(new GenericVersion(embeddedProperties.getVersion()));\n\t\t}\n\t\treturn Versions.withFeatures(new GenericVersion(embeddedProperties.getVersion()),\n\t\t\t\tembeddedProperties.getFeatures().toArray(new Feature[0]));\n\t}\n\n\tprivate InetAddress getHost() throws UnknownHostException {\n\t\tif (this.properties.getHost() == null) {\n\t\t\treturn InetAddress.getByAddress(Network.localhostIsIPv6() ? IP6_LOOPBACK_ADDRESS : IP4_LOOPBACK_ADDRESS);\n\t\t}\n\t\treturn InetAddress.getByName(this.properties.getHost());\n\t}\n\n\tprivate void setEmbeddedPort(ApplicationContext context, int port) {\n\t\tsetPortProperty(context, port);\n\t}\n\n\tprivate void setPortProperty(ApplicationContext currentContext, int port) {\n\t\tif (currentContext instanceof ConfigurableApplicationContext) {\n\t\t\tMutablePropertySources sources = ((ConfigurableApplicationContext) currentContext).getEnvironment()\n\t\t\t\t\t.getPropertySources();\n\t\t\tgetMongoPorts(sources).put("local.mongo.port", port);\n\t\t}\n\t\tif (currentContext.getParent() != null) {\n\t\t\tsetPortProperty(currentContext.getParent(), port);\n\t\t}\n\t}\n\n\t@SuppressWarnings("unchecked")\n\tprivate Map<String, Object> getMongoPorts(MutablePropertySources sources) {\n\t\tPropertySource<?> propertySource = sources.get("mongo.ports");\n\t\tif (propertySource == null) {\n\t\t\tpropertySource = new MapPropertySource("mongo.ports", new HashMap<>());\n\t\t\tsources.addFirst(propertySource);\n\t\t}\n\t\treturn (Map<String, Object>) propertySource.getSource();\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnClass(Logger.class)\n\t@ConditionalOnMissingBean(IRuntimeConfig.class)\n\tstatic class RuntimeConfigConfiguration {\n\n\t\t@Bean\n\t\tIRuntimeConfig embeddedMongoRuntimeConfig(\n\t\t\t\tObjectProvider<DownloadConfigBuilderCustomizer> downloadConfigBuilderCustomizers) {\n\t\t\tLogger logger = LoggerFactory.getLogger(getClass().getPackage().getName() + ".EmbeddedMongo");\n\t\t\tProcessOutput processOutput = new ProcessOutput(Processors.logTo(logger, Slf4jLevel.INFO),\n\t\t\t\t\tProcessors.logTo(logger, Slf4jLevel.ERROR),\n\t\t\t\t\tProcessors.named("[console>]", Processors.logTo(logger, Slf4jLevel.DEBUG)));\n\t\t\treturn new RuntimeConfigBuilder().defaultsWithLogger(Command.MongoD, logger).processOutput(processOutput)\n\t\t\t\t\t.artifactStore(getArtifactStore(logger, downloadConfigBuilderCustomizers.orderedStream()))\n\t\t\t\t\t.daemonProcess(false).build();\n\t\t}\n\n\t\tprivate ArtifactStoreBuilder getArtifactStore(Logger logger,\n\t\t\t\tStream<DownloadConfigBuilderCustomizer> downloadConfigBuilderCustomizers) {\n\t\t\tDownloadConfigBuilder downloadConfigBuilder = new DownloadConfigBuilder()\n\t\t\t\t\t.defaultsForCommand(Command.MongoD);\n\t\t\tdownloadConfigBuilder.progressListener(new Slf4jProgressListener(logger));\n\t\t\tdownloadConfigBuilderCustomizers.forEach((customizer) -> customizer.customize(downloadConfigBuilder));\n\t\t\tIDownloadConfig downloadConfig = downloadConfigBuilder.build();\n\t\t\treturn new ExtractedArtifactStoreBuilder().defaults(Command.MongoD).download(downloadConfig);\n\t\t}\n\n\t}\n\n\t/**\n\t * Post processor to ensure that {@link com.mongodb.client.MongoClient} beans depend\n\t * on any {@link MongodExecutable} beans.\n\t */\n\t@ConditionalOnClass({ com.mongodb.client.MongoClient.class, MongoClientFactoryBean.class })\n\tstatic class EmbeddedMongoClientDependsOnBeanFactoryPostProcessor\n\t\t\textends MongoClientDependsOnBeanFactoryPostProcessor {\n\n\t\tEmbeddedMongoClientDependsOnBeanFactoryPostProcessor() {\n\t\t\tsuper(MongodExecutable.class);\n\t\t}\n\n\t}\n\n\t/**\n\t * Post processor to ensure that\n\t * {@link com.mongodb.reactivestreams.client.MongoClient} beans depend on any\n\t * {@link MongodExecutable} beans.\n\t */\n\t@ConditionalOnClass({ com.mongodb.reactivestreams.client.MongoClient.class, ReactiveMongoClientFactoryBean.class })\n\tstatic class EmbeddedReactiveStreamsMongoClientDependsOnBeanFactoryPostProcessor\n\t\t\textends ReactiveStreamsMongoClientDependsOnBeanFactoryPostProcessor {\n\n\t\tEmbeddedReactiveStreamsMongoClientDependsOnBeanFactoryPostProcessor() {\n\t\t\tsuper(MongodExecutable.class);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.mongo.embedded;\n\nimport java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.stream.Stream;\n\nimport com.mongodb.client.MongoClient;\nimport de.flapdoodle.embed.mongo.Command;\nimport de.flapdoodle.embed.mongo.MongodExecutable;\nimport de.flapdoodle.embed.mongo.MongodStarter;\nimport de.flapdoodle.embed.mongo.config.DownloadConfigBuilder;\nimport de.flapdoodle.embed.mongo.config.ExtractedArtifactStoreBuilder;\nimport de.flapdoodle.embed.mongo.config.IMongodConfig;\nimport de.flapdoodle.embed.mongo.config.MongodConfigBuilder;\nimport de.flapdoodle.embed.mongo.config.Net;\nimport de.flapdoodle.embed.mongo.config.RuntimeConfigBuilder;\nimport de.flapdoodle.embed.mongo.config.Storage;\nimport de.flapdoodle.embed.mongo.distribution.Feature;\nimport de.flapdoodle.embed.mongo.distribution.IFeatureAwareVersion;\nimport de.flapdoodle.embed.mongo.distribution.Version;\nimport de.flapdoodle.embed.mongo.distribution.Versions;\nimport de.flapdoodle.embed.process.config.IRuntimeConfig;\nimport de.flapdoodle.embed.process.config.io.ProcessOutput;\nimport de.flapdoodle.embed.process.config.store.IDownloadConfig;\nimport de.flapdoodle.embed.process.distribution.GenericVersion;\nimport de.flapdoodle.embed.process.io.Processors;\nimport de.flapdoodle.embed.process.io.Slf4jLevel;\nimport de.flapdoodle.embed.process.io.progress.Slf4jProgressListener;\nimport de.flapdoodle.embed.process.runtime.Network;\nimport de.flapdoodle.embed.process.store.ArtifactStoreBuilder;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.data.mongo.MongoClientDependsOnBeanFactoryPostProcessor;\nimport org.springframework.boot.autoconfigure.data.mongo.ReactiveStreamsMongoClientDependsOnBeanFactoryPostProcessor;\nimport org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration;\nimport org.springframework.boot.autoconfigure.mongo.MongoProperties;\nimport org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration.EmbeddedMongoClientDependsOnBeanFactoryPostProcessor;\nimport org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration.EmbeddedReactiveStreamsMongoClientDependsOnBeanFactoryPostProcessor;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.core.env.MapPropertySource;\nimport org.springframework.core.env.MutablePropertySources;\nimport org.springframework.core.env.PropertySource;\nimport org.springframework.data.mongodb.core.MongoClientFactoryBean;\nimport org.springframework.data.mongodb.core.ReactiveMongoClientFactoryBean;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Embedded Mongo.\n *\n * @author Henryk Konsek\n * @author Andy Wilkinson\n * @author Yogesh Lonkar\n * @author Mark Paluch\n * @author Issam El-atif\n * @since 1.3.0\n */\n@Configuration(proxyBeanMethods = false)\n@EnableConfigurationProperties({ MongoProperties.class, EmbeddedMongoProperties.class })\n@AutoConfigureBefore(MongoAutoConfiguration.class)\n@ConditionalOnClass({ MongoClient.class, MongodStarter.class })\n@Import({ EmbeddedMongoClientDependsOnBeanFactoryPostProcessor.class,\n\t\tEmbeddedReactiveStreamsMongoClientDependsOnBeanFactoryPostProcessor.class })\npublic class EmbeddedMongoAutoConfiguration {\n\n\tprivate static final byte[] IP4_LOOPBACK_ADDRESS = { 127, 0, 0, 1 };\n\n\tprivate static final byte[] IP6_LOOPBACK_ADDRESS = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };\n\n\tprivate final MongoProperties properties;\n\n\tpublic EmbeddedMongoAutoConfiguration(MongoProperties properties, EmbeddedMongoProperties embeddedProperties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean(initMethod = "start", destroyMethod = "stop")\n\t@ConditionalOnMissingBean\n\tpublic MongodExecutable embeddedMongoServer(IMongodConfig mongodConfig, IRuntimeConfig runtimeConfig,\n\t\t\tApplicationContext context) throws IOException {\n\t\tInteger configuredPort = this.properties.getPort();\n\t\tif (configuredPort == null || configuredPort == 0) {\n\t\t\tsetEmbeddedPort(context, mongodConfig.net().getPort());\n\t\t}\n\t\tMongodStarter mongodStarter = getMongodStarter(runtimeConfig);\n\t\treturn mongodStarter.prepare(mongodConfig);\n\t}\n\n\tprivate MongodStarter getMongodStarter(IRuntimeConfig runtimeConfig) {\n\t\tif (runtimeConfig == null) {\n\t\t\treturn MongodStarter.getDefaultInstance();\n\t\t}\n\t\treturn MongodStarter.getInstance(runtimeConfig);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic IMongodConfig embeddedMongoConfiguration(EmbeddedMongoProperties embeddedProperties) throws IOException {\n\t\tMongodConfigBuilder builder = new MongodConfigBuilder().version(determineVersion(embeddedProperties));\n\t\tEmbeddedMongoProperties.Storage storage = embeddedProperties.getStorage();\n\t\tif (storage != null) {\n\t\t\tString databaseDir = storage.getDatabaseDir();\n\t\t\tString replSetName = storage.getReplSetName();\n\t\t\tint oplogSize = (storage.getOplogSize() != null) ? (int) storage.getOplogSize().toMegabytes() : 0;\n\t\t\tbuilder.replication(new Storage(databaseDir, replSetName, oplogSize));\n\t\t}\n\t\tInteger configuredPort = this.properties.getPort();\n\t\tif (configuredPort != null && configuredPort > 0) {\n\t\t\tbuilder.net(new Net(getHost().getHostAddress(), configuredPort, Network.localhostIsIPv6()));\n\t\t}\n\t\telse {\n\t\t\tbuilder.net(new Net(getHost().getHostAddress(), Network.getFreeServerPort(getHost()),\n\t\t\t\t\tNetwork.localhostIsIPv6()));\n\t\t}\n\t\treturn builder.build();\n\t}\n\n\tprivate IFeatureAwareVersion determineVersion(EmbeddedMongoProperties embeddedProperties) {\n\t\tif (embeddedProperties.getFeatures() == null) {\n\t\t\tfor (Version version : Version.values()) {\n\t\t\t\tif (version.asInDownloadPath().equals(embeddedProperties.getVersion())) {\n\t\t\t\t\treturn version;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Versions.withFeatures(new GenericVersion(embeddedProperties.getVersion()));\n\t\t}\n\t\treturn Versions.withFeatures(new GenericVersion(embeddedProperties.getVersion()),\n\t\t\t\tembeddedProperties.getFeatures().toArray(new Feature[0]));\n\t}\n\n\tprivate InetAddress getHost() throws UnknownHostException {\n\t\tif (this.properties.getHost() == null) {\n\t\t\treturn InetAddress.getByAddress(Network.localhostIsIPv6() ? IP6_LOOPBACK_ADDRESS : IP4_LOOPBACK_ADDRESS);\n\t\t}\n\t\treturn InetAddress.getByName(this.properties.getHost());\n\t}\n\n\tprivate void setEmbeddedPort(ApplicationContext context, int port) {\n\t\tsetPortProperty(context, port);\n\t}\n\n\tprivate void setPortProperty(ApplicationContext currentContext, int port) {\n\t\tif (currentContext instanceof ConfigurableApplicationContext) {\n\t\t\tMutablePropertySources sources = ((ConfigurableApplicationContext) currentContext).getEnvironment()\n\t\t\t\t\t.getPropertySources();\n\t\t\tgetMongoPorts(sources).put("local.mongo.port", port);\n\t\t}\n\t\tif (currentContext.getParent() != null) {\n\t\t\tsetPortProperty(currentContext.getParent(), port);\n\t\t}\n\t}\n\n\t@SuppressWarnings("unchecked")\n\tprivate Map<String, Object> getMongoPorts(MutablePropertySources sources) {\n\t\tPropertySource<?> propertySource = sources.get("mongo.ports");\n\t\tif (propertySource == null) {\n\t\t\tpropertySource = new MapPropertySource("mongo.ports", new HashMap<>());\n\t\t\tsources.addFirst(propertySource);\n\t\t}\n\t\treturn (Map<String, Object>) propertySource.getSource();\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnClass(Logger.class)\n\t@ConditionalOnMissingBean(IRuntimeConfig.class)\n\tstatic class RuntimeConfigConfiguration {\n\n\t\t@Bean\n\t\tIRuntimeConfig embeddedMongoRuntimeConfig(\n\t\t\t\tObjectProvider<DownloadConfigBuilderCustomizer> downloadConfigBuilderCustomizers) {\n\t\t\tLogger logger = LoggerFactory.getLogger(getClass().getPackage().getName() + ".EmbeddedMongo");\n\t\t\tProcessOutput processOutput = new ProcessOutput(Processors.logTo(logger, Slf4jLevel.INFO),\n\t\t\t\t\tProcessors.logTo(logger, Slf4jLevel.ERROR),\n\t\t\t\t\tProcessors.named("[console>]", Processors.logTo(logger, Slf4jLevel.DEBUG)));\n\t\t\treturn new RuntimeConfigBuilder().defaultsWithLogger(Command.MongoD, logger).processOutput(processOutput)\n\t\t\t\t\t.artifactStore(getArtifactStore(logger, downloadConfigBuilderCustomizers.orderedStream()))\n\t\t\t\t\t.daemonProcess(false).build();\n\t\t}\n\n\t\tprivate ArtifactStoreBuilder getArtifactStore(Logger logger,\n\t\t\t\tStream<DownloadConfigBuilderCustomizer> downloadConfigBuilderCustomizers) {\n\t\t\tDownloadConfigBuilder downloadConfigBuilder = new DownloadConfigBuilder()\n\t\t\t\t\t.defaultsForCommand(Command.MongoD);\n\t\t\tdownloadConfigBuilder.progressListener(new Slf4jProgressListener(logger));\n\t\t\tdownloadConfigBuilderCustomizers.forEach((customizer) -> customizer.customize(downloadConfigBuilder));\n\t\t\tIDownloadConfig downloadConfig = downloadConfigBuilder.build();\n\t\t\treturn new ExtractedArtifactStoreBuilder().defaults(Command.MongoD).download(downloadConfig);\n\t\t}\n\n\t}\n\n\t/**\n\t * Post processor to ensure that {@link MongoClient} beans depend on any\n\t * {@link MongodExecutable} beans.\n\t */\n\t@ConditionalOnClass({ MongoClient.class, MongoClientFactoryBean.class })\n\tstatic class EmbeddedMongoClientDependsOnBeanFactoryPostProcessor\n\t\t\textends MongoClientDependsOnBeanFactoryPostProcessor {\n\n\t\tEmbeddedMongoClientDependsOnBeanFactoryPostProcessor() {\n\t\t\tsuper(MongodExecutable.class);\n\t\t}\n\n\t}\n\n\t/**\n\t * Post processor to ensure that\n\t * {@link com.mongodb.reactivestreams.client.MongoClient} beans depend on any\n\t * {@link MongodExecutable} beans.\n\t */\n\t@ConditionalOnClass({ com.mongodb.reactivestreams.client.MongoClient.class, ReactiveMongoClientFactoryBean.class })\n\tstatic class EmbeddedReactiveStreamsMongoClientDependsOnBeanFactoryPostProcessor\n\t\t\textends ReactiveStreamsMongoClientDependsOnBeanFactoryPostProcessor {\n\n\t\tEmbeddedReactiveStreamsMongoClientDependsOnBeanFactoryPostProcessor() {\n\t\t\tsuper(MongodExecutable.class);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
