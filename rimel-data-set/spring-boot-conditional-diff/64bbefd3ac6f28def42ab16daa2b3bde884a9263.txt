@@ -25,21 +25,16 @@ import javax.sql.DataSource;
 import com.couchbase.client.java.Bucket;
 import com.datastax.driver.core.Cluster;
 import org.apache.solr.client.solrj.SolrClient;
-import org.elasticsearch.client.Client;
 
 import org.springframework.amqp.rabbit.core.RabbitTemplate;
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.beans.factory.ObjectProvider;
-import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.actuate.health.ApplicationHealthIndicator;
 import org.springframework.boot.actuate.health.CassandraHealthIndicator;
-import org.springframework.boot.actuate.health.CompositeHealthIndicator;
 import org.springframework.boot.actuate.health.CouchbaseHealthIndicator;
 import org.springframework.boot.actuate.health.DataSourceHealthIndicator;
 import org.springframework.boot.actuate.health.DiskSpaceHealthIndicator;
 import org.springframework.boot.actuate.health.DiskSpaceHealthIndicatorProperties;
-import org.springframework.boot.actuate.health.ElasticsearchHealthIndicator;
-import org.springframework.boot.actuate.health.ElasticsearchHealthIndicatorProperties;
 import org.springframework.boot.actuate.health.HealthAggregator;
 import org.springframework.boot.actuate.health.HealthIndicator;
 import org.springframework.boot.actuate.health.JmsHealthIndicator;
@@ -66,6 +61,7 @@ import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;
 import org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadata;
 import org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvider;
 import org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProviders;
+import org.springframework.boot.autoconfigure.jest.JestAutoConfiguration;
 import org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration;
 import org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration;
 import org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration;
@@ -73,7 +69,7 @@ import org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
-import org.springframework.core.ResolvableType;
+import org.springframework.context.annotation.Import;
 import org.springframework.data.cassandra.core.CassandraOperations;
 import org.springframework.data.couchbase.core.CouchbaseOperations;
 import org.springframework.data.mongodb.core.MongoTemplate;
@@ -96,12 +92,14 @@ import org.springframework.mail.javamail.JavaMailSenderImpl;
 @AutoConfigureBefore({ EndpointAutoConfiguration.class })
 @AutoConfigureAfter({ CassandraAutoConfiguration.class,
 		CassandraDataAutoConfiguration.class, CouchbaseAutoConfiguration.class,
-		DataSourceAutoConfiguration.class, MongoAutoConfiguration.class,
-		MongoDataAutoConfiguration.class, RedisAutoConfiguration.class,
-		RabbitAutoConfiguration.class, SolrAutoConfiguration.class,
-		MailSenderAutoConfiguration.class, JmsAutoConfiguration.class,
-		ElasticsearchAutoConfiguration.class })
+		DataSourceAutoConfiguration.class, ElasticsearchAutoConfiguration.class,
+		JestAutoConfiguration.class, JmsAutoConfiguration.class,
+		MailSenderAutoConfiguration.class, MongoAutoConfiguration.class,
+		MongoDataAutoConfiguration.class, RabbitAutoConfiguration.class,
+		RedisAutoConfiguration.class, SolrAutoConfiguration.class })
 @EnableConfigurationProperties({ HealthIndicatorProperties.class })
+@Import({ ElasticsearchHealthIndicatorConfiguration.SpringData.class,
+		ElasticsearchHealthIndicatorConfiguration.Jest.class })
 public class HealthIndicatorAutoConfiguration {
 
 	private final HealthIndicatorProperties properties;
@@ -126,48 +124,6 @@ public class HealthIndicatorAutoConfiguration {
 		return new ApplicationHealthIndicator();
 	}
 
-	
-	protected static abstract class CompositeHealthIndicatorConfiguration<H extends HealthIndicator, S> {
-
-		@Autowired
-		private HealthAggregator healthAggregator;
-
-		protected HealthIndicator createHealthIndicator(Map<String, S> beans) {
-			if (beans.size() == 1) {
-				return createHealthIndicator(beans.values().iterator().next());
-			}
-			CompositeHealthIndicator composite = new CompositeHealthIndicator(
-					this.healthAggregator);
-			for (Map.Entry<String, S> entry : beans.entrySet()) {
-				composite.addHealthIndicator(entry.getKey(),
-						createHealthIndicator(entry.getValue()));
-			}
-			return composite;
-		}
-
-		@SuppressWarnings()
-		protected H createHealthIndicator(S source) {
-			Class<?>[] generics = ResolvableType
-					.forClass(CompositeHealthIndicatorConfiguration.class, getClass())
-					.resolveGenerics();
-			Class<H> indicatorClass = (Class<H>) generics[0];
-			Class<S> sourceClass = (Class<S>) generics[1];
-			try {
-				return indicatorClass.getConstructor(sourceClass).newInstance(source);
-			}
-			catch (Exception ex) {
-				throw new IllegalStateException(
-						+ indicatorClass +  + sourceClass, ex);
-			}
-		}
-
-	}
-
 	@Configuration
 	@ConditionalOnClass({ CassandraOperations.class, Cluster.class })
 	@ConditionalOnBean(CassandraOperations.class)
@@ -401,34 +357,4 @@ public class HealthIndicatorAutoConfiguration {
 
 	}
 
-	@Configuration
-	@ConditionalOnBean(Client.class)
-	@ConditionalOnEnabledHealthIndicator()
-	@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)
-	public static class ElasticsearchHealthIndicatorConfiguration extends
-			CompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {
-
-		private final Map<String, Client> clients;
-
-		private final ElasticsearchHealthIndicatorProperties properties;
-
-		public ElasticsearchHealthIndicatorConfiguration(Map<String, Client> clients,
-				ElasticsearchHealthIndicatorProperties properties) {
-			this.clients = clients;
-			this.properties = properties;
-		}
-
-		@Bean
-		@ConditionalOnMissingBean(name = )
-		public HealthIndicator elasticsearchHealthIndicator() {
-			return createHealthIndicator(this.clients);
-		}
-
-		@Override
-		protected ElasticsearchHealthIndicator createHealthIndicator(Client client) {
-			return new ElasticsearchHealthIndicator(client, this.properties);
-		}
-
-	}
-
 }

