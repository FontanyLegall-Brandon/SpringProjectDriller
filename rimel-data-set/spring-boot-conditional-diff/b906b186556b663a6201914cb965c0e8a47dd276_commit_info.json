{'_old_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/InfoContributorAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/InfoContributorAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,17 +16,17 @@\n \n package org.springframework.boot.actuate.autoconfigure;\n \n-import java.io.IOException;\n-\n import org.springframework.boot.actuate.info.EnvironmentInfoContributor;\n+import org.springframework.boot.actuate.info.GitInfoContributor;\n import org.springframework.boot.actuate.info.InfoContributor;\n-import org.springframework.boot.actuate.info.SimpleInfoContributor;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\n-import org.springframework.boot.autoconfigure.info.GitInfo;\n import org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.info.GitProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.core.Ordered;\n@@ -44,6 +44,7 @@ import org.springframework.core.env.ConfigurableEnvironment;\n @Configuration\n @AutoConfigureAfter(ProjectInfoAutoConfiguration.class)\n @AutoConfigureBefore(EndpointAutoConfiguration.class)\n+@EnableConfigurationProperties(InfoContributorProperties.class)\n public class InfoContributorAutoConfiguration {\n \n \t/**\n@@ -51,6 +52,12 @@ public class InfoContributorAutoConfiguration {\n \t */\n \tpublic static final int DEFAULT_ORDER = Ordered.HIGHEST_PRECEDENCE + 10;\n \n+\tprivate final InfoContributorProperties properties;\n+\n+\tpublic InfoContributorAutoConfiguration(InfoContributorProperties properties) {\n+\t\tthis.properties = properties;\n+\t}\n+\n \t@Bean\n \t@ConditionalOnEnabledInfoContributor("env")\n \t@Order(DEFAULT_ORDER)\n@@ -61,10 +68,11 @@ public class InfoContributorAutoConfiguration {\n \n \t@Bean\n \t@ConditionalOnEnabledInfoContributor("git")\n-\t@ConditionalOnSingleCandidate(GitInfo.class)\n+\t@ConditionalOnSingleCandidate(GitProperties.class)\n+\t@ConditionalOnMissingBean\n \t@Order(DEFAULT_ORDER)\n-\tpublic InfoContributor gitInfoContributor(GitInfo gitInfo) throws IOException {\n-\t\treturn new SimpleInfoContributor("git", gitInfo);\n+\tpublic GitInfoContributor gitInfoContributor(GitProperties gitProperties) {\n+\t\treturn new GitInfoContributor(gitProperties, this.properties.getGit().getMode());\n \t}\n \n }\n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport org.springframework.boot.actuate.info.EnvironmentInfoContributor;\nimport org.springframework.boot.actuate.info.GitInfoContributor;\nimport org.springframework.boot.actuate.info.InfoContributor;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\nimport org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.info.GitProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.env.ConfigurableEnvironment;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for standard\n * {@link InfoContributor}s.\n *\n * @author Meang Akira Tanaka\n * @author Stephane Nicoll\n * @since 1.4.0\n */\n@Configuration\n@AutoConfigureAfter(ProjectInfoAutoConfiguration.class)\n@AutoConfigureBefore(EndpointAutoConfiguration.class)\n@EnableConfigurationProperties(InfoContributorProperties.class)\npublic class InfoContributorAutoConfiguration {\n\n\t/**\n\t * The default order for the core {@link InfoContributor} beans.\n\t */\n\tpublic static final int DEFAULT_ORDER = Ordered.HIGHEST_PRECEDENCE + 10;\n\n\tprivate final InfoContributorProperties properties;\n\n\tpublic InfoContributorAutoConfiguration(InfoContributorProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@ConditionalOnEnabledInfoContributor("env")\n\t@Order(DEFAULT_ORDER)\n\tpublic EnvironmentInfoContributor envInfoContributor(\n\t\t\tConfigurableEnvironment environment) {\n\t\treturn new EnvironmentInfoContributor(environment);\n\t}\n\n\t@Bean\n\t@ConditionalOnEnabledInfoContributor("git")\n\t@ConditionalOnSingleCandidate(GitProperties.class)\n\t@ConditionalOnMissingBean\n\t@Order(DEFAULT_ORDER)\n\tpublic GitInfoContributor gitInfoContributor(GitProperties gitProperties) {\n\t\treturn new GitInfoContributor(gitProperties, this.properties.getGit().getMode());\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport java.io.IOException;\n\nimport org.springframework.boot.actuate.info.EnvironmentInfoContributor;\nimport org.springframework.boot.actuate.info.InfoContributor;\nimport org.springframework.boot.actuate.info.SimpleInfoContributor;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\nimport org.springframework.boot.autoconfigure.info.GitInfo;\nimport org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.env.ConfigurableEnvironment;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for standard\n * {@link InfoContributor}s.\n *\n * @author Meang Akira Tanaka\n * @author Stephane Nicoll\n * @since 1.4.0\n */\n@Configuration\n@AutoConfigureAfter(ProjectInfoAutoConfiguration.class)\n@AutoConfigureBefore(EndpointAutoConfiguration.class)\npublic class InfoContributorAutoConfiguration {\n\n\t/**\n\t * The default order for the core {@link InfoContributor} beans.\n\t */\n\tpublic static final int DEFAULT_ORDER = Ordered.HIGHEST_PRECEDENCE + 10;\n\n\t@Bean\n\t@ConditionalOnEnabledInfoContributor("env")\n\t@Order(DEFAULT_ORDER)\n\tpublic EnvironmentInfoContributor envInfoContributor(\n\t\t\tConfigurableEnvironment environment) {\n\t\treturn new EnvironmentInfoContributor(environment);\n\t}\n\n\t@Bean\n\t@ConditionalOnEnabledInfoContributor("git")\n\t@ConditionalOnSingleCandidate(GitInfo.class)\n\t@Order(DEFAULT_ORDER)\n\tpublic InfoContributor gitInfoContributor(GitInfo gitInfo) throws IOException {\n\t\treturn new SimpleInfoContributor("git", gitInfo);\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
