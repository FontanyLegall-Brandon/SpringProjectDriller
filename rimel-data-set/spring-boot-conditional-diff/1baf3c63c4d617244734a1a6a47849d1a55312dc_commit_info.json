{'_old_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundryActuatorAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundryActuatorAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -26,6 +26,7 @@ import org.springframework.boot.actuate.endpoint.mvc.NamedMvcEndpoint;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.autoconfigure.security.IgnoredRequestCustomizer;\n@@ -98,18 +99,27 @@ public class CloudFoundryActuatorAutoConfiguration {\n \t\treturn corsConfiguration;\n \t}\n \n-\t@Bean\n-\tpublic IgnoredRequestCustomizer cloudFoundryIgnoredRequestCustomizer() {\n-\t\treturn new CloudFoundryIgnoredRequestCustomizer();\n-\t}\n+\t/**\n+\t * Nested configuration for ignored requests if Spring Security is present.\n+\t *\n+\t */\n+\t@ConditionalOnClass(WebSecurity.class)\n+\tstatic class CloudFoundryIgnoredRequestConfiguration {\n+\n+\t\t@Bean\n+\t\tpublic IgnoredRequestCustomizer cloudFoundryIgnoredRequestCustomizer() {\n+\t\t\treturn new CloudFoundryIgnoredRequestCustomizer();\n+\t\t}\n+\n+\t\tprivate static class CloudFoundryIgnoredRequestCustomizer\n+\t\t\t\timplements IgnoredRequestCustomizer {\n \n-\tprivate class CloudFoundryIgnoredRequestCustomizer\n-\t\t\timplements IgnoredRequestCustomizer {\n+\t\t\t@Override\n+\t\t\tpublic void customize(WebSecurity.IgnoredRequestConfigurer configurer) {\n+\t\t\t\tconfigurer.requestMatchers(\n+\t\t\t\t\t\tnew AntPathRequestMatcher("/cloudfoundryapplication/**"));\n+\t\t\t}\n \n-\t\t@Override\n-\t\tpublic void customize(WebSecurity.IgnoredRequestConfigurer configurer) {\n-\t\t\tconfigurer.requestMatchers(\n-\t\t\t\t\tnew AntPathRequestMatcher("/cloudfoundryapplication/**"));\n \t\t}\n \n \t}\n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.cloudfoundry;\n\nimport java.util.Arrays;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\n\nimport org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration;\nimport org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints;\nimport org.springframework.boot.actuate.endpoint.mvc.NamedMvcEndpoint;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.security.IgnoredRequestCustomizer;\nimport org.springframework.boot.cloud.CloudPlatform;\nimport org.springframework.boot.web.client.RestTemplateBuilder;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.security.config.annotation.web.builders.WebSecurity;\nimport org.springframework.security.web.util.matcher.AntPathRequestMatcher;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.servlet.HandlerInterceptor;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to expose actuator endpoints for\n * cloud foundry to use.\n *\n * @author Madhura Bhave\n * @since 1.5.0\n */\n@Configuration\n@ConditionalOnProperty(prefix = "management.cloudfoundry", name = "enabled", matchIfMissing = true)\n@ConditionalOnBean(MvcEndpoints.class)\n@AutoConfigureAfter(EndpointWebMvcAutoConfiguration.class)\n@ConditionalOnCloudPlatform(CloudPlatform.CLOUD_FOUNDRY)\npublic class CloudFoundryActuatorAutoConfiguration {\n\n\t@Bean\n\tpublic CloudFoundryEndpointHandlerMapping cloudFoundryEndpointHandlerMapping(\n\t\t\tMvcEndpoints mvcEndpoints, RestTemplateBuilder restTemplateBuilder,\n\t\t\tEnvironment environment) {\n\t\tSet<NamedMvcEndpoint> endpoints = new LinkedHashSet<NamedMvcEndpoint>(\n\t\t\t\tmvcEndpoints.getEndpoints(NamedMvcEndpoint.class));\n\t\tHandlerInterceptor securityInterceptor = getSecurityInterceptor(\n\t\t\t\trestTemplateBuilder, environment);\n\t\tCorsConfiguration corsConfiguration = getCorsConfiguration();\n\t\tCloudFoundryEndpointHandlerMapping mapping = new CloudFoundryEndpointHandlerMapping(\n\t\t\t\tendpoints, corsConfiguration, securityInterceptor);\n\t\tmapping.setPrefix("/cloudfoundryapplication");\n\t\treturn mapping;\n\t}\n\n\tprivate HandlerInterceptor getSecurityInterceptor(\n\t\t\tRestTemplateBuilder restTemplateBuilder, Environment environment) {\n\t\tCloudFoundrySecurityService cloudfoundrySecurityService = getCloudFoundrySecurityService(\n\t\t\t\trestTemplateBuilder, environment);\n\t\tTokenValidator tokenValidator = new TokenValidator(cloudfoundrySecurityService);\n\t\tHandlerInterceptor securityInterceptor = new CloudFoundrySecurityInterceptor(\n\t\t\t\ttokenValidator, cloudfoundrySecurityService,\n\t\t\t\tenvironment.getProperty("vcap.application.application_id"));\n\t\treturn securityInterceptor;\n\t}\n\n\tprivate CloudFoundrySecurityService getCloudFoundrySecurityService(\n\t\t\tRestTemplateBuilder restTemplateBuilder, Environment environment) {\n\t\tString cloudControllerUrl = environment.getProperty("vcap.application.cf_api");\n\t\treturn cloudControllerUrl == null ? null\n\t\t\t\t: new CloudFoundrySecurityService(restTemplateBuilder,\n\t\t\t\t\t\tcloudControllerUrl);\n\t}\n\n\tprivate CorsConfiguration getCorsConfiguration() {\n\t\tCorsConfiguration corsConfiguration = new CorsConfiguration();\n\t\tcorsConfiguration.addAllowedOrigin(CorsConfiguration.ALL);\n\t\tcorsConfiguration.setAllowedMethods(\n\t\t\t\tArrays.asList(HttpMethod.GET.name(), HttpMethod.POST.name()));\n\t\tcorsConfiguration.setAllowedHeaders(\n\t\t\t\tArrays.asList("Authorization", "X-Cf-App-Instance", "Content-Type"));\n\t\treturn corsConfiguration;\n\t}\n\n\t/**\n\t * Nested configuration for ignored requests if Spring Security is present.\n\t *\n\t */\n\t@ConditionalOnClass(WebSecurity.class)\n\tstatic class CloudFoundryIgnoredRequestConfiguration {\n\n\t\t@Bean\n\t\tpublic IgnoredRequestCustomizer cloudFoundryIgnoredRequestCustomizer() {\n\t\t\treturn new CloudFoundryIgnoredRequestCustomizer();\n\t\t}\n\n\t\tprivate static class CloudFoundryIgnoredRequestCustomizer\n\t\t\t\timplements IgnoredRequestCustomizer {\n\n\t\t\t@Override\n\t\t\tpublic void customize(WebSecurity.IgnoredRequestConfigurer configurer) {\n\t\t\t\tconfigurer.requestMatchers(\n\t\t\t\t\t\tnew AntPathRequestMatcher("/cloudfoundryapplication/**"));\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.cloudfoundry;\n\nimport java.util.Arrays;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\n\nimport org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration;\nimport org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints;\nimport org.springframework.boot.actuate.endpoint.mvc.NamedMvcEndpoint;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.security.IgnoredRequestCustomizer;\nimport org.springframework.boot.cloud.CloudPlatform;\nimport org.springframework.boot.web.client.RestTemplateBuilder;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.security.config.annotation.web.builders.WebSecurity;\nimport org.springframework.security.web.util.matcher.AntPathRequestMatcher;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.servlet.HandlerInterceptor;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to expose actuator endpoints for\n * cloud foundry to use.\n *\n * @author Madhura Bhave\n * @since 1.5.0\n */\n@Configuration\n@ConditionalOnProperty(prefix = "management.cloudfoundry", name = "enabled", matchIfMissing = true)\n@ConditionalOnBean(MvcEndpoints.class)\n@AutoConfigureAfter(EndpointWebMvcAutoConfiguration.class)\n@ConditionalOnCloudPlatform(CloudPlatform.CLOUD_FOUNDRY)\npublic class CloudFoundryActuatorAutoConfiguration {\n\n\t@Bean\n\tpublic CloudFoundryEndpointHandlerMapping cloudFoundryEndpointHandlerMapping(\n\t\t\tMvcEndpoints mvcEndpoints, RestTemplateBuilder restTemplateBuilder,\n\t\t\tEnvironment environment) {\n\t\tSet<NamedMvcEndpoint> endpoints = new LinkedHashSet<NamedMvcEndpoint>(\n\t\t\t\tmvcEndpoints.getEndpoints(NamedMvcEndpoint.class));\n\t\tHandlerInterceptor securityInterceptor = getSecurityInterceptor(\n\t\t\t\trestTemplateBuilder, environment);\n\t\tCorsConfiguration corsConfiguration = getCorsConfiguration();\n\t\tCloudFoundryEndpointHandlerMapping mapping = new CloudFoundryEndpointHandlerMapping(\n\t\t\t\tendpoints, corsConfiguration, securityInterceptor);\n\t\tmapping.setPrefix("/cloudfoundryapplication");\n\t\treturn mapping;\n\t}\n\n\tprivate HandlerInterceptor getSecurityInterceptor(\n\t\t\tRestTemplateBuilder restTemplateBuilder, Environment environment) {\n\t\tCloudFoundrySecurityService cloudfoundrySecurityService = getCloudFoundrySecurityService(\n\t\t\t\trestTemplateBuilder, environment);\n\t\tTokenValidator tokenValidator = new TokenValidator(cloudfoundrySecurityService);\n\t\tHandlerInterceptor securityInterceptor = new CloudFoundrySecurityInterceptor(\n\t\t\t\ttokenValidator, cloudfoundrySecurityService,\n\t\t\t\tenvironment.getProperty("vcap.application.application_id"));\n\t\treturn securityInterceptor;\n\t}\n\n\tprivate CloudFoundrySecurityService getCloudFoundrySecurityService(\n\t\t\tRestTemplateBuilder restTemplateBuilder, Environment environment) {\n\t\tString cloudControllerUrl = environment.getProperty("vcap.application.cf_api");\n\t\treturn cloudControllerUrl == null ? null\n\t\t\t\t: new CloudFoundrySecurityService(restTemplateBuilder,\n\t\t\t\t\t\tcloudControllerUrl);\n\t}\n\n\tprivate CorsConfiguration getCorsConfiguration() {\n\t\tCorsConfiguration corsConfiguration = new CorsConfiguration();\n\t\tcorsConfiguration.addAllowedOrigin(CorsConfiguration.ALL);\n\t\tcorsConfiguration.setAllowedMethods(\n\t\t\t\tArrays.asList(HttpMethod.GET.name(), HttpMethod.POST.name()));\n\t\tcorsConfiguration.setAllowedHeaders(\n\t\t\t\tArrays.asList("Authorization", "X-Cf-App-Instance", "Content-Type"));\n\t\treturn corsConfiguration;\n\t}\n\n\t@Bean\n\tpublic IgnoredRequestCustomizer cloudFoundryIgnoredRequestCustomizer() {\n\t\treturn new CloudFoundryIgnoredRequestCustomizer();\n\t}\n\n\tprivate class CloudFoundryIgnoredRequestCustomizer\n\t\t\timplements IgnoredRequestCustomizer {\n\n\t\t@Override\n\t\tpublic void customize(WebSecurity.IgnoredRequestConfigurer configurer) {\n\t\t\tconfigurer.requestMatchers(\n\t\t\t\t\tnew AntPathRequestMatcher("/cloudfoundryapplication/**"));\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
