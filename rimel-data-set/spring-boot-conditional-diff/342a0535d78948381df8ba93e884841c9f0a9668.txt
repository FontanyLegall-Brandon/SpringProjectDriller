@@ -0,0 +1,97 @@
+
+
+package org.springframework.boot.autoconfigure.security.oauth2.client.reactive;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
+import org.springframework.boot.autoconfigure.security.oauth2.client.ClientsConfiguredCondition;
+import org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties;
+import org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Conditional;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.security.config.web.server.ServerHttpSecurity;
+import org.springframework.security.oauth2.client.InMemoryReactiveOAuth2AuthorizedClientService;
+import org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientService;
+import org.springframework.security.oauth2.client.registration.ClientRegistration;
+import org.springframework.security.oauth2.client.registration.InMemoryReactiveClientRegistrationRepository;
+import org.springframework.security.oauth2.client.registration.ReactiveClientRegistrationRepository;
+import org.springframework.security.oauth2.client.web.server.AuthenticatedPrincipalServerOAuth2AuthorizedClientRepository;
+import org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizedClientRepository;
+import org.springframework.security.web.server.SecurityWebFilterChain;
+
+
+class ReactiveOAuth2ClientConfigurations {
+
+	@Configuration
+	@Conditional(ClientsConfiguredCondition.class)
+	@ConditionalOnMissingBean(ReactiveClientRegistrationRepository.class)
+	static class ReactiveClientRegistrationRepositoryConfiguration {
+
+		@Bean
+		public InMemoryReactiveClientRegistrationRepository clientRegistrationRepository(
+				OAuth2ClientProperties properties) {
+			List<ClientRegistration> registrations = new ArrayList<>(
+					OAuth2ClientPropertiesRegistrationAdapter.getClientRegistrations(properties).values());
+			return new InMemoryReactiveClientRegistrationRepository(registrations);
+		}
+
+	}
+
+	@Configuration
+	@ConditionalOnBean(ReactiveClientRegistrationRepository.class)
+	static class ReactiveOAuth2ClientConfiguration {
+
+		@Bean
+		@ConditionalOnMissingBean
+		public ReactiveOAuth2AuthorizedClientService authorizedClientService(
+				ReactiveClientRegistrationRepository clientRegistrationRepository) {
+			return new InMemoryReactiveOAuth2AuthorizedClientService(clientRegistrationRepository);
+		}
+
+		@Bean
+		@ConditionalOnMissingBean
+		public ServerOAuth2AuthorizedClientRepository authorizedClientRepository(
+				ReactiveOAuth2AuthorizedClientService authorizedClientService) {
+			return new AuthenticatedPrincipalServerOAuth2AuthorizedClientRepository(authorizedClientService);
+		}
+
+		@Configuration
+		@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)
+		static class SecurityWebFilterChainConfiguration {
+
+			@Bean
+			@ConditionalOnMissingBean
+			public SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) {
+				http.authorizeExchange().anyExchange().authenticated();
+				http.oauth2Login();
+				return http.build();
+			}
+
+		}
+
+	}
+
+}

