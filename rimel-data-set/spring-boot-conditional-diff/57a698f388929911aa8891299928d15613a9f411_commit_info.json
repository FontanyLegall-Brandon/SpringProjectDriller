{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraDataAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraDataAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -70,7 +70,7 @@ public class CassandraDataAutoConfiguration {\n \t}\n \n \t@Bean\n-\t@ConditionalOnMissingBean\n+\t@ConditionalOnMissingBean(Session.class)\n \tpublic CassandraSessionFactoryBean session(CassandraConverter converter)\n \t\t\tthrows Exception {\n \t\tCassandraSessionFactoryBean session = new CassandraSessionFactoryBean();\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.cassandra;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration;\nimport org.springframework.boot.autoconfigure.cassandra.CassandraProperties;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.cassandra.config.CassandraSessionFactoryBean;\nimport org.springframework.data.cassandra.config.SchemaAction;\nimport org.springframework.data.cassandra.convert.CassandraConverter;\nimport org.springframework.data.cassandra.convert.MappingCassandraConverter;\nimport org.springframework.data.cassandra.core.CassandraAdminOperations;\nimport org.springframework.data.cassandra.core.CassandraTemplate;\nimport org.springframework.data.cassandra.mapping.BasicCassandraMappingContext;\nimport org.springframework.data.cassandra.mapping.CassandraMappingContext;\n\nimport com.datastax.driver.core.Cluster;\nimport com.datastax.driver.core.Session;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s Cassandra support.\n *\n * @author Julien Dubois\n * @author Eddú Meléndez\n * @since 1.3.0\n */\n@Configuration\n@ConditionalOnClass({ Cluster.class, CassandraAdminOperations.class })\n@EnableConfigurationProperties(CassandraProperties.class)\n@AutoConfigureAfter(CassandraAutoConfiguration.class)\npublic class CassandraDataAutoConfiguration {\n\n\t@Autowired\n\tprivate CassandraProperties properties;\n\n\t@Autowired\n\tprivate Cluster cluster;\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic CassandraMappingContext cassandraMapping() {\n\t\treturn new BasicCassandraMappingContext();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic CassandraConverter cassandraConverter(CassandraMappingContext mapping) {\n\t\treturn new MappingCassandraConverter(mapping);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(Session.class)\n\tpublic CassandraSessionFactoryBean session(CassandraConverter converter)\n\t\t\tthrows Exception {\n\t\tCassandraSessionFactoryBean session = new CassandraSessionFactoryBean();\n\t\tsession.setCluster(this.cluster);\n\t\tsession.setConverter(converter);\n\t\tsession.setKeyspaceName(this.properties.getKeyspaceName());\n\t\tsession.setSchemaAction(SchemaAction.NONE);\n\t\treturn session;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic CassandraTemplate cassandraTemplate(Session session,\n\t\t\tCassandraConverter converter) throws Exception {\n\t\treturn new CassandraTemplate(session, converter);\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.cassandra;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration;\nimport org.springframework.boot.autoconfigure.cassandra.CassandraProperties;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.cassandra.config.CassandraSessionFactoryBean;\nimport org.springframework.data.cassandra.config.SchemaAction;\nimport org.springframework.data.cassandra.convert.CassandraConverter;\nimport org.springframework.data.cassandra.convert.MappingCassandraConverter;\nimport org.springframework.data.cassandra.core.CassandraAdminOperations;\nimport org.springframework.data.cassandra.core.CassandraTemplate;\nimport org.springframework.data.cassandra.mapping.BasicCassandraMappingContext;\nimport org.springframework.data.cassandra.mapping.CassandraMappingContext;\n\nimport com.datastax.driver.core.Cluster;\nimport com.datastax.driver.core.Session;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s Cassandra support.\n *\n * @author Julien Dubois\n * @author Eddú Meléndez\n * @since 1.3.0\n */\n@Configuration\n@ConditionalOnClass({ Cluster.class, CassandraAdminOperations.class })\n@EnableConfigurationProperties(CassandraProperties.class)\n@AutoConfigureAfter(CassandraAutoConfiguration.class)\npublic class CassandraDataAutoConfiguration {\n\n\t@Autowired\n\tprivate CassandraProperties properties;\n\n\t@Autowired\n\tprivate Cluster cluster;\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic CassandraMappingContext cassandraMapping() {\n\t\treturn new BasicCassandraMappingContext();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic CassandraConverter cassandraConverter(CassandraMappingContext mapping) {\n\t\treturn new MappingCassandraConverter(mapping);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic CassandraSessionFactoryBean session(CassandraConverter converter)\n\t\t\tthrows Exception {\n\t\tCassandraSessionFactoryBean session = new CassandraSessionFactoryBean();\n\t\tsession.setCluster(this.cluster);\n\t\tsession.setConverter(converter);\n\t\tsession.setKeyspaceName(this.properties.getKeyspaceName());\n\t\tsession.setSchemaAction(SchemaAction.NONE);\n\t\treturn session;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic CassandraTemplate cassandraTemplate(Session session,\n\t\t\tCassandraConverter converter) throws Exception {\n\t\treturn new CassandraTemplate(session, converter);\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
