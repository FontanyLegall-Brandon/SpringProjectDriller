{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,7 +16,6 @@\n \n package org.springframework.boot.autoconfigure.couchbase;\n \n-import java.util.Arrays;\n import java.util.List;\n \n import javax.validation.Validator;\n@@ -24,10 +23,14 @@ import javax.validation.Validator;\n import com.couchbase.client.java.CouchbaseBucket;\n \n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.data.couchbase.config.AbstractCouchbaseConfiguration;\n import org.springframework.data.couchbase.config.CouchbaseBucketFactoryBean;\n@@ -38,10 +41,12 @@ import org.springframework.data.couchbase.core.mapping.event.ValidatingCouchbase\n  * Auto-Configuration} for Couchbase.\n  *\n  * @author Eddú Meléndez\n+ * @author Stephane Nicoll\n  * @since 1.4.0\n  */\n @Configuration\n-@ConditionalOnClass({ CouchbaseBucket.class, CouchbaseBucketFactoryBean.class })\n+@ConditionalOnClass({CouchbaseBucket.class, CouchbaseBucketFactoryBean.class})\n+@Conditional(CouchbaseAutoConfiguration.CouchbaseCondition.class)\n @EnableConfigurationProperties(CouchbaseProperties.class)\n public class CouchbaseAutoConfiguration {\n \n@@ -52,24 +57,44 @@ public class CouchbaseAutoConfiguration {\n \t}\n \n \t@Configuration\n-\tstatic class CouchbaseConfiguration extends AbstractCouchbaseConfiguration {\n+\t@ConditionalOnMissingBean(AbstractCouchbaseConfiguration.class)\n+\tpublic static class CouchbaseConfiguration extends AbstractCouchbaseConfiguration {\n \n \t\t@Autowired\n \t\tprivate CouchbaseProperties properties;\n \n \t\t@Override\n \t\tprotected List<String> getBootstrapHosts() {\n-\t\t\treturn Arrays.asList(this.properties.getHosts());\n+\t\t\treturn this.properties.getBootstrapHosts();\n \t\t}\n \n \t\t@Override\n \t\tprotected String getBucketName() {\n-\t\t\treturn this.properties.getBucketName();\n+\t\t\treturn this.properties.getBucket().getName();\n \t\t}\n \n \t\t@Override\n \t\tprotected String getBucketPassword() {\n-\t\t\treturn this.properties.getBucketPassword();\n+\t\t\treturn this.properties.getBucket().getPassword();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Determine if Couchbase should be configured. This happens if either the user-configuration\n+\t * defines a couchbase configuration or if at least the bucket name is specified.\n+\t */\n+\tstatic class CouchbaseCondition extends AnyNestedCondition {\n+\n+\t\tCouchbaseCondition() {\n+\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n+\t\t}\n+\n+\t\t@ConditionalOnProperty(prefix = "spring.data.couchbase.bucket", name = "name")\n+\t\tstatic class BucketNameProperty {\n+\t\t}\n+\n+\t\t@ConditionalOnBean(AbstractCouchbaseConfiguration.class)\n+\t\tstatic class CouchbaseConfiguration {\n \t\t}\n \n \t}\n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.couchbase;\n\nimport java.util.List;\n\nimport javax.validation.Validator;\n\nimport com.couchbase.client.java.CouchbaseBucket;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.couchbase.config.AbstractCouchbaseConfiguration;\nimport org.springframework.data.couchbase.config.CouchbaseBucketFactoryBean;\nimport org.springframework.data.couchbase.core.mapping.event.ValidatingCouchbaseEventListener;\n\n/**\n * {@link org.springframework.boot.autoconfigure.EnableAutoConfiguration\n * Auto-Configuration} for Couchbase.\n *\n * @author Eddú Meléndez\n * @author Stephane Nicoll\n * @since 1.4.0\n */\n@Configuration\n@ConditionalOnClass({CouchbaseBucket.class, CouchbaseBucketFactoryBean.class})\n@Conditional(CouchbaseAutoConfiguration.CouchbaseCondition.class)\n@EnableConfigurationProperties(CouchbaseProperties.class)\npublic class CouchbaseAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnBean(Validator.class)\n\tpublic ValidatingCouchbaseEventListener validationEventListener(Validator validator) {\n\t\treturn new ValidatingCouchbaseEventListener(validator);\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(AbstractCouchbaseConfiguration.class)\n\tpublic static class CouchbaseConfiguration extends AbstractCouchbaseConfiguration {\n\n\t\t@Autowired\n\t\tprivate CouchbaseProperties properties;\n\n\t\t@Override\n\t\tprotected List<String> getBootstrapHosts() {\n\t\t\treturn this.properties.getBootstrapHosts();\n\t\t}\n\n\t\t@Override\n\t\tprotected String getBucketName() {\n\t\t\treturn this.properties.getBucket().getName();\n\t\t}\n\n\t\t@Override\n\t\tprotected String getBucketPassword() {\n\t\t\treturn this.properties.getBucket().getPassword();\n\t\t}\n\t}\n\n\t/**\n\t * Determine if Couchbase should be configured. This happens if either the user-configuration\n\t * defines a couchbase configuration or if at least the bucket name is specified.\n\t */\n\tstatic class CouchbaseCondition extends AnyNestedCondition {\n\n\t\tCouchbaseCondition() {\n\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n\t\t}\n\n\t\t@ConditionalOnProperty(prefix = "spring.data.couchbase.bucket", name = "name")\n\t\tstatic class BucketNameProperty {\n\t\t}\n\n\t\t@ConditionalOnBean(AbstractCouchbaseConfiguration.class)\n\t\tstatic class CouchbaseConfiguration {\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.couchbase;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport javax.validation.Validator;\n\nimport com.couchbase.client.java.CouchbaseBucket;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.couchbase.config.AbstractCouchbaseConfiguration;\nimport org.springframework.data.couchbase.config.CouchbaseBucketFactoryBean;\nimport org.springframework.data.couchbase.core.mapping.event.ValidatingCouchbaseEventListener;\n\n/**\n * {@link org.springframework.boot.autoconfigure.EnableAutoConfiguration\n * Auto-Configuration} for Couchbase.\n *\n * @author Eddú Meléndez\n * @since 1.4.0\n */\n@Configuration\n@ConditionalOnClass({ CouchbaseBucket.class, CouchbaseBucketFactoryBean.class })\n@EnableConfigurationProperties(CouchbaseProperties.class)\npublic class CouchbaseAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnBean(Validator.class)\n\tpublic ValidatingCouchbaseEventListener validationEventListener(Validator validator) {\n\t\treturn new ValidatingCouchbaseEventListener(validator);\n\t}\n\n\t@Configuration\n\tstatic class CouchbaseConfiguration extends AbstractCouchbaseConfiguration {\n\n\t\t@Autowired\n\t\tprivate CouchbaseProperties properties;\n\n\t\t@Override\n\t\tprotected List<String> getBootstrapHosts() {\n\t\t\treturn Arrays.asList(this.properties.getHosts());\n\t\t}\n\n\t\t@Override\n\t\tprotected String getBucketName() {\n\t\t\treturn this.properties.getBucketName();\n\t\t}\n\n\t\t@Override\n\t\tprotected String getBucketPassword() {\n\t\t\treturn this.properties.getBucketPassword();\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
