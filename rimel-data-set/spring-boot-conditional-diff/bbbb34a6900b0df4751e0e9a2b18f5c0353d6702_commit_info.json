{'_old_path': None, '_new_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cache/CacheStatisticsProvidersConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,204 @@\n+/*\n+ * Copyright 2012-2015 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.cache;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import javax.cache.Caching;\n+\n+import net.sf.ehcache.Ehcache;\n+import net.sf.ehcache.statistics.StatisticsGateway;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.cache.Cache;\n+import org.springframework.cache.CacheManager;\n+import org.springframework.cache.concurrent.ConcurrentMapCache;\n+import org.springframework.cache.ehcache.EhCacheCache;\n+import org.springframework.cache.guava.GuavaCache;\n+import org.springframework.cache.jcache.JCacheCache;\n+import org.springframework.cache.support.NoOpCacheManager;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import com.google.common.cache.CacheStats;\n+import com.hazelcast.core.IMap;\n+import com.hazelcast.monitor.LocalMapStats;\n+import com.hazelcast.spring.cache.HazelcastCache;\n+\n+/**\n+ * Register the {@link CacheStatisticsProvider} instances for the supported cache\n+ * libraries.\n+ *\n+ * @author Stephane Nicoll\n+ * @since 1.3.0\n+ */\n+@Configuration\n+@ConditionalOnBean(CacheManager.class)\n+public class CacheStatisticsProvidersConfiguration {\n+\n+\t@Configuration\n+\t@ConditionalOnClass({ Caching.class, JCacheCache.class })\n+\tstatic class JCacheCacheStatisticsProviderConfiguration {\n+\n+\t\t@Bean\n+\t\tpublic CacheStatisticsProvider jCacheCacheStatisticsProvider() {\n+\t\t\treturn new JCacheCacheStatisticsProvider();\n+\t\t}\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnClass(Ehcache.class)\n+\tstatic class EhCacheCacheStatisticsProviderConfiguration {\n+\n+\t\t@Bean\n+\t\tpublic CacheStatisticsProvider ehCacheCacheStatisticsProvider() {\n+\t\t\treturn new CacheStatisticsProvider() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic CacheStatistics getCacheStatistics(Cache cache,\n+\t\t\t\t\t\tCacheManager cacheManager) {\n+\t\t\t\t\tif (cache instanceof EhCacheCache) {\n+\t\t\t\t\t\treturn getEhCacheStatistics((Ehcache) cache.getNativeCache());\n+\t\t\t\t\t}\n+\t\t\t\t\treturn null;\n+\t\t\t\t}\n+\t\t\t};\n+\t\t}\n+\n+\t\tprivate CacheStatistics getEhCacheStatistics(Ehcache cache) {\n+\t\t\tStatisticsGateway statistics = cache.getStatistics();\n+\t\t\tDefaultCacheStatistics stats = new DefaultCacheStatistics();\n+\t\t\tstats.setSize(statistics.getSize());\n+\t\t\tDouble hitRatio = statistics.cacheHitRatio();\n+\t\t\tif (!hitRatio.isNaN()) {\n+\t\t\t\tstats.setHitRatio(hitRatio);\n+\t\t\t\tstats.setMissRatio(1 - hitRatio);\n+\t\t\t}\n+\t\t\treturn stats;\n+\t\t}\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnClass(IMap.class)\n+\tstatic class HazelcastCacheStatisticsConfiguration {\n+\n+\t\t@Bean\n+\t\tpublic CacheStatisticsProvider hazelcastCacheStatisticsProvider() {\n+\t\t\treturn new CacheStatisticsProvider() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic CacheStatistics getCacheStatistics(Cache cache,\n+\t\t\t\t\t\tCacheManager cacheManager) {\n+\t\t\t\t\tif (cache instanceof HazelcastCache) {\n+\t\t\t\t\t\treturn getHazelcastStatistics((IMap<?, ?>) cache.getNativeCache());\n+\t\t\t\t\t}\n+\t\t\t\t\treturn null;\n+\t\t\t\t}\n+\t\t\t};\n+\t\t}\n+\n+\t\tprivate CacheStatistics getHazelcastStatistics(IMap<?, ?> cache) {\n+\t\t\tDefaultCacheStatistics stats = new DefaultCacheStatistics();\n+\t\t\tLocalMapStats mapStats = cache.getLocalMapStats();\n+\t\t\tstats.setSize(mapStats.getOwnedEntryCount());\n+\t\t\tstats.setGetCacheCounts(mapStats.getHits(), mapStats.getGetOperationCount()\n+\t\t\t\t\t- mapStats.getHits());\n+\t\t\treturn stats;\n+\t\t}\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnClass(com.google.common.cache.Cache.class)\n+\tstatic class GuavaCacheStatisticsConfiguration {\n+\n+\t\t@Bean\n+\t\tpublic CacheStatisticsProvider guavaCacheStatisticsProvider() {\n+\t\t\treturn new CacheStatisticsProvider() {\n+\t\t\t\t@SuppressWarnings("unchecked")\n+\t\t\t\t@Override\n+\t\t\t\tpublic CacheStatistics getCacheStatistics(Cache cache,\n+\t\t\t\t\t\tCacheManager cacheManager) {\n+\t\t\t\t\tif (cache instanceof GuavaCache) {\n+\t\t\t\t\t\treturn getGuavaStatistics((com.google.common.cache.Cache<Object, Object>) cache\n+\t\t\t\t\t\t\t\t.getNativeCache());\n+\t\t\t\t\t}\n+\t\t\t\t\treturn null;\n+\t\t\t\t}\n+\t\t\t};\n+\t\t}\n+\n+\t\tprivate CacheStatistics getGuavaStatistics(\n+\t\t\t\tcom.google.common.cache.Cache<Object, Object> cache) {\n+\t\t\tDefaultCacheStatistics stats = new DefaultCacheStatistics();\n+\t\t\tstats.setSize(cache.size());\n+\t\t\tCacheStats guavaStats = cache.stats();\n+\t\t\tif (guavaStats.requestCount() > 0) {\n+\t\t\t\tstats.setHitRatio(guavaStats.hitRate());\n+\t\t\t\tstats.setMissRatio(guavaStats.missRate());\n+\t\t\t}\n+\t\t\treturn stats;\n+\t\t}\n+\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnClass(ConcurrentMapCache.class)\n+\tstatic class ConcurrentMapCacheStatisticsConfiguration {\n+\n+\t\t@Bean\n+\t\tpublic CacheStatisticsProvider concurrentMapCacheStatisticsProvider() {\n+\t\t\treturn new CacheStatisticsProvider() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic CacheStatistics getCacheStatistics(Cache cache,\n+\t\t\t\t\t\tCacheManager cacheManager) {\n+\t\t\t\t\tif (cache instanceof ConcurrentMapCache) {\n+\t\t\t\t\t\treturn getConcurrentMapStatistics((ConcurrentHashMap<?, ?>) cache\n+\t\t\t\t\t\t\t\t.getNativeCache());\n+\t\t\t\t\t}\n+\t\t\t\t\treturn null;\n+\t\t\t\t}\n+\t\t\t};\n+\t\t}\n+\n+\t\tprivate CacheStatistics getConcurrentMapStatistics(ConcurrentHashMap<?, ?> map) {\n+\t\t\tDefaultCacheStatistics stats = new DefaultCacheStatistics();\n+\t\t\tstats.setSize((long) map.size());\n+\t\t\treturn stats;\n+\t\t}\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnClass(NoOpCacheManager.class)\n+\tstatic class NoOpCacheStatisticsConfiguration {\n+\n+\t\tprivate static final CacheStatistics NO_OP_STATS = new DefaultCacheStatistics();\n+\n+\t\t@Bean\n+\t\tpublic CacheStatisticsProvider noOpCacheStatisticsProvider() {\n+\t\t\treturn new CacheStatisticsProvider() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic CacheStatistics getCacheStatistics(Cache cache,\n+\t\t\t\t\t\tCacheManager cacheManager) {\n+\t\t\t\t\tif (cacheManager instanceof NoOpCacheManager) {\n+\t\t\t\t\t\treturn NO_OP_STATS;\n+\t\t\t\t\t}\n+\t\t\t\t\treturn null;\n+\t\t\t\t}\n+\t\t\t};\n+\t\t}\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.cache;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport javax.cache.Caching;\n\nimport net.sf.ehcache.Ehcache;\nimport net.sf.ehcache.statistics.StatisticsGateway;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.cache.Cache;\nimport org.springframework.cache.CacheManager;\nimport org.springframework.cache.concurrent.ConcurrentMapCache;\nimport org.springframework.cache.ehcache.EhCacheCache;\nimport org.springframework.cache.guava.GuavaCache;\nimport org.springframework.cache.jcache.JCacheCache;\nimport org.springframework.cache.support.NoOpCacheManager;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport com.google.common.cache.CacheStats;\nimport com.hazelcast.core.IMap;\nimport com.hazelcast.monitor.LocalMapStats;\nimport com.hazelcast.spring.cache.HazelcastCache;\n\n/**\n * Register the {@link CacheStatisticsProvider} instances for the supported cache\n * libraries.\n *\n * @author Stephane Nicoll\n * @since 1.3.0\n */\n@Configuration\n@ConditionalOnBean(CacheManager.class)\npublic class CacheStatisticsProvidersConfiguration {\n\n\t@Configuration\n\t@ConditionalOnClass({ Caching.class, JCacheCache.class })\n\tstatic class JCacheCacheStatisticsProviderConfiguration {\n\n\t\t@Bean\n\t\tpublic CacheStatisticsProvider jCacheCacheStatisticsProvider() {\n\t\t\treturn new JCacheCacheStatisticsProvider();\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(Ehcache.class)\n\tstatic class EhCacheCacheStatisticsProviderConfiguration {\n\n\t\t@Bean\n\t\tpublic CacheStatisticsProvider ehCacheCacheStatisticsProvider() {\n\t\t\treturn new CacheStatisticsProvider() {\n\t\t\t\t@Override\n\t\t\t\tpublic CacheStatistics getCacheStatistics(Cache cache,\n\t\t\t\t\t\tCacheManager cacheManager) {\n\t\t\t\t\tif (cache instanceof EhCacheCache) {\n\t\t\t\t\t\treturn getEhCacheStatistics((Ehcache) cache.getNativeCache());\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tprivate CacheStatistics getEhCacheStatistics(Ehcache cache) {\n\t\t\tStatisticsGateway statistics = cache.getStatistics();\n\t\t\tDefaultCacheStatistics stats = new DefaultCacheStatistics();\n\t\t\tstats.setSize(statistics.getSize());\n\t\t\tDouble hitRatio = statistics.cacheHitRatio();\n\t\t\tif (!hitRatio.isNaN()) {\n\t\t\t\tstats.setHitRatio(hitRatio);\n\t\t\t\tstats.setMissRatio(1 - hitRatio);\n\t\t\t}\n\t\t\treturn stats;\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(IMap.class)\n\tstatic class HazelcastCacheStatisticsConfiguration {\n\n\t\t@Bean\n\t\tpublic CacheStatisticsProvider hazelcastCacheStatisticsProvider() {\n\t\t\treturn new CacheStatisticsProvider() {\n\t\t\t\t@Override\n\t\t\t\tpublic CacheStatistics getCacheStatistics(Cache cache,\n\t\t\t\t\t\tCacheManager cacheManager) {\n\t\t\t\t\tif (cache instanceof HazelcastCache) {\n\t\t\t\t\t\treturn getHazelcastStatistics((IMap<?, ?>) cache.getNativeCache());\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tprivate CacheStatistics getHazelcastStatistics(IMap<?, ?> cache) {\n\t\t\tDefaultCacheStatistics stats = new DefaultCacheStatistics();\n\t\t\tLocalMapStats mapStats = cache.getLocalMapStats();\n\t\t\tstats.setSize(mapStats.getOwnedEntryCount());\n\t\t\tstats.setGetCacheCounts(mapStats.getHits(), mapStats.getGetOperationCount()\n\t\t\t\t\t- mapStats.getHits());\n\t\t\treturn stats;\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(com.google.common.cache.Cache.class)\n\tstatic class GuavaCacheStatisticsConfiguration {\n\n\t\t@Bean\n\t\tpublic CacheStatisticsProvider guavaCacheStatisticsProvider() {\n\t\t\treturn new CacheStatisticsProvider() {\n\t\t\t\t@SuppressWarnings("unchecked")\n\t\t\t\t@Override\n\t\t\t\tpublic CacheStatistics getCacheStatistics(Cache cache,\n\t\t\t\t\t\tCacheManager cacheManager) {\n\t\t\t\t\tif (cache instanceof GuavaCache) {\n\t\t\t\t\t\treturn getGuavaStatistics((com.google.common.cache.Cache<Object, Object>) cache\n\t\t\t\t\t\t\t\t.getNativeCache());\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tprivate CacheStatistics getGuavaStatistics(\n\t\t\t\tcom.google.common.cache.Cache<Object, Object> cache) {\n\t\t\tDefaultCacheStatistics stats = new DefaultCacheStatistics();\n\t\t\tstats.setSize(cache.size());\n\t\t\tCacheStats guavaStats = cache.stats();\n\t\t\tif (guavaStats.requestCount() > 0) {\n\t\t\t\tstats.setHitRatio(guavaStats.hitRate());\n\t\t\t\tstats.setMissRatio(guavaStats.missRate());\n\t\t\t}\n\t\t\treturn stats;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(ConcurrentMapCache.class)\n\tstatic class ConcurrentMapCacheStatisticsConfiguration {\n\n\t\t@Bean\n\t\tpublic CacheStatisticsProvider concurrentMapCacheStatisticsProvider() {\n\t\t\treturn new CacheStatisticsProvider() {\n\t\t\t\t@Override\n\t\t\t\tpublic CacheStatistics getCacheStatistics(Cache cache,\n\t\t\t\t\t\tCacheManager cacheManager) {\n\t\t\t\t\tif (cache instanceof ConcurrentMapCache) {\n\t\t\t\t\t\treturn getConcurrentMapStatistics((ConcurrentHashMap<?, ?>) cache\n\t\t\t\t\t\t\t\t.getNativeCache());\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tprivate CacheStatistics getConcurrentMapStatistics(ConcurrentHashMap<?, ?> map) {\n\t\t\tDefaultCacheStatistics stats = new DefaultCacheStatistics();\n\t\t\tstats.setSize((long) map.size());\n\t\t\treturn stats;\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(NoOpCacheManager.class)\n\tstatic class NoOpCacheStatisticsConfiguration {\n\n\t\tprivate static final CacheStatistics NO_OP_STATS = new DefaultCacheStatistics();\n\n\t\t@Bean\n\t\tpublic CacheStatisticsProvider noOpCacheStatisticsProvider() {\n\t\t\treturn new CacheStatisticsProvider() {\n\t\t\t\t@Override\n\t\t\t\tpublic CacheStatistics getCacheStatistics(Cache cache,\n\t\t\t\t\t\tCacheManager cacheManager) {\n\t\t\t\t\tif (cacheManager instanceof NoOpCacheManager) {\n\t\t\t\t\t\treturn NO_OP_STATS;\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
