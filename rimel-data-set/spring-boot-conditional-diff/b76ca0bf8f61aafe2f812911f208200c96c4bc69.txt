@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.boot.autoconfigure.web;
+package org.springframework.boot.autoconfigure.web.client;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -24,6 +24,8 @@ import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.http.HttpMessageConverters;
+import org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration;
 import org.springframework.boot.web.client.RestTemplateBuilder;
 import org.springframework.boot.web.client.RestTemplateCustomizer;
 import org.springframework.context.annotation.Bean;
@@ -33,7 +35,7 @@ import org.springframework.util.CollectionUtils;
 import org.springframework.web.client.RestTemplate;
 
 
 @Configuration
 @AutoConfigureAfter(HttpMessageConvertersAutoConfiguration.class)
-public class WebClientAutoConfiguration {
+@ConditionalOnClass(RestTemplate.class)
+public class RestTemplateAutoConfiguration {
 
-	@Configuration
-	@ConditionalOnClass(RestTemplate.class)
-	public static class RestTemplateConfiguration {
+	private final ObjectProvider<HttpMessageConverters> messageConverters;
 
-		private final ObjectProvider<HttpMessageConverters> messageConverters;
+	private final ObjectProvider<List<RestTemplateCustomizer>> restTemplateCustomizers;
 
-		private final ObjectProvider<List<RestTemplateCustomizer>> restTemplateCustomizers;
+	public RestTemplateAutoConfiguration(
+			ObjectProvider<HttpMessageConverters> messageConverters,
+			ObjectProvider<List<RestTemplateCustomizer>> restTemplateCustomizers) {
+		this.messageConverters = messageConverters;
+		this.restTemplateCustomizers = restTemplateCustomizers;
+	}
 
-		public RestTemplateConfiguration(
-				ObjectProvider<HttpMessageConverters> messageConverters,
-				ObjectProvider<List<RestTemplateCustomizer>> restTemplateCustomizers) {
-			this.messageConverters = messageConverters;
-			this.restTemplateCustomizers = restTemplateCustomizers;
+	@Bean
+	@ConditionalOnMissingBean
+	public RestTemplateBuilder restTemplateBuilder() {
+		RestTemplateBuilder builder = new RestTemplateBuilder();
+		HttpMessageConverters converters = this.messageConverters.getIfUnique();
+		if (converters != null) {
+			builder = builder.messageConverters(converters.getConverters());
 		}
-
-		@Bean
-		@ConditionalOnMissingBean
-		public RestTemplateBuilder restTemplateBuilder() {
-			RestTemplateBuilder builder = new RestTemplateBuilder();
-			HttpMessageConverters converters = this.messageConverters.getIfUnique();
-			if (converters != null) {
-				builder = builder.messageConverters(converters.getConverters());
-			}
-			List<RestTemplateCustomizer> customizers = this.restTemplateCustomizers
-					.getIfAvailable();
-			if (!CollectionUtils.isEmpty(customizers)) {
-				customizers = new ArrayList<>(customizers);
-				AnnotationAwareOrderComparator.sort(customizers);
-				builder = builder.customizers(customizers);
-			}
-			return builder;
+		List<RestTemplateCustomizer> customizers = this.restTemplateCustomizers
+				.getIfAvailable();
+		if (!CollectionUtils.isEmpty(customizers)) {
+			customizers = new ArrayList<>(customizers);
+			AnnotationAwareOrderComparator.sort(customizers);
+			builder = builder.customizers(customizers);
 		}
-
+		return builder;
 	}
 
 }

