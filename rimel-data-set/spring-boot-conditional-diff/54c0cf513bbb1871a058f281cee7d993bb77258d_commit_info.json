{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -75,8 +75,7 @@ public class ReactiveCloudFoundryActuatorAutoConfiguration {\n \t@Bean\n \t@ConditionalOnMissingBean\n \t@ConditionalOnEnabledEndpoint\n-\t@ConditionalOnBean({ HealthEndpoint.class,\n-\t\t\tReactiveHealthEndpointWebExtension.class })\n+\t@ConditionalOnBean({ HealthEndpoint.class, ReactiveHealthEndpointWebExtension.class })\n \tpublic CloudFoundryReactiveHealthEndpointWebExtension cloudFoundryReactiveHealthEndpointWebExtension(\n \t\t\tReactiveHealthEndpointWebExtension reactiveHealthEndpointWebExtension) {\n \t\treturn new CloudFoundryReactiveHealthEndpointWebExtension(\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive;\n\nimport java.util.Arrays;\nimport java.util.Collections;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.config.BeanPostProcessor;\nimport org.springframework.boot.actuate.autoconfigure.cloudfoundry.CloudFoundryWebAnnotationEndpointDiscoverer;\nimport org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\nimport org.springframework.boot.actuate.autoconfigure.health.HealthEndpointAutoConfiguration;\nimport org.springframework.boot.actuate.endpoint.reflect.ParameterMapper;\nimport org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes;\nimport org.springframework.boot.actuate.endpoint.web.EndpointPathResolver;\nimport org.springframework.boot.actuate.health.HealthEndpoint;\nimport org.springframework.boot.actuate.health.ReactiveHealthEndpointWebExtension;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.cloud.CloudPlatform;\nimport org.springframework.boot.endpoint.web.EndpointMapping;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.security.web.server.MatcherSecurityWebFilterChain;\nimport org.springframework.security.web.server.WebFilterChainProxy;\nimport org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher;\nimport org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.reactive.function.client.WebClient;\nimport org.springframework.web.server.WebFilter;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to expose actuator endpoints for\n * Cloud Foundry to use in a reactive environment.\n *\n * @author Madhura Bhave\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnProperty(prefix = "management.cloudfoundry", name = "enabled", matchIfMissing = true)\n@AutoConfigureAfter(HealthEndpointAutoConfiguration.class)\n@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)\n@ConditionalOnCloudPlatform(CloudPlatform.CLOUD_FOUNDRY)\npublic class ReactiveCloudFoundryActuatorAutoConfiguration {\n\n\tprivate final ApplicationContext applicationContext;\n\n\tReactiveCloudFoundryActuatorAutoConfiguration(ApplicationContext applicationContext) {\n\t\tthis.applicationContext = applicationContext;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnEnabledEndpoint\n\t@ConditionalOnBean({ HealthEndpoint.class, ReactiveHealthEndpointWebExtension.class })\n\tpublic CloudFoundryReactiveHealthEndpointWebExtension cloudFoundryReactiveHealthEndpointWebExtension(\n\t\t\tReactiveHealthEndpointWebExtension reactiveHealthEndpointWebExtension) {\n\t\treturn new CloudFoundryReactiveHealthEndpointWebExtension(\n\t\t\t\treactiveHealthEndpointWebExtension);\n\t}\n\n\t@Bean\n\tpublic CloudFoundryWebFluxEndpointHandlerMapping cloudFoundryWebFluxEndpointHandlerMapping(\n\t\t\tParameterMapper parameterMapper, EndpointMediaTypes endpointMediaTypes,\n\t\t\tWebClient.Builder webClientBuilder) {\n\t\tCloudFoundryWebAnnotationEndpointDiscoverer endpointDiscoverer = new CloudFoundryWebAnnotationEndpointDiscoverer(\n\t\t\t\tthis.applicationContext, parameterMapper, endpointMediaTypes,\n\t\t\t\tEndpointPathResolver.useEndpointId(), null, null,\n\t\t\t\tCloudFoundryReactiveHealthEndpointWebExtension.class);\n\t\tReactiveCloudFoundrySecurityInterceptor securityInterceptor = getSecurityInterceptor(\n\t\t\t\twebClientBuilder, this.applicationContext.getEnvironment());\n\t\treturn new CloudFoundryWebFluxEndpointHandlerMapping(\n\t\t\t\tnew EndpointMapping("/cloudfoundryapplication"),\n\t\t\t\tendpointDiscoverer.discoverEndpoints(), endpointMediaTypes,\n\t\t\t\tgetCorsConfiguration(), securityInterceptor);\n\t}\n\n\tprivate ReactiveCloudFoundrySecurityInterceptor getSecurityInterceptor(\n\t\t\tWebClient.Builder restTemplateBuilder, Environment environment) {\n\t\tReactiveCloudFoundrySecurityService cloudfoundrySecurityService = getCloudFoundrySecurityService(\n\t\t\t\trestTemplateBuilder, environment);\n\t\tReactiveTokenValidator tokenValidator = new ReactiveTokenValidator(\n\t\t\t\tcloudfoundrySecurityService);\n\t\treturn new ReactiveCloudFoundrySecurityInterceptor(tokenValidator,\n\t\t\t\tcloudfoundrySecurityService,\n\t\t\t\tenvironment.getProperty("vcap.application.application_id"));\n\t}\n\n\tprivate ReactiveCloudFoundrySecurityService getCloudFoundrySecurityService(\n\t\t\tWebClient.Builder webClientBuilder, Environment environment) {\n\t\tString cloudControllerUrl = environment.getProperty("vcap.application.cf_api");\n\t\treturn (cloudControllerUrl == null ? null\n\t\t\t\t: new ReactiveCloudFoundrySecurityService(webClientBuilder,\n\t\t\t\t\t\tcloudControllerUrl));\n\t}\n\n\tprivate CorsConfiguration getCorsConfiguration() {\n\t\tCorsConfiguration corsConfiguration = new CorsConfiguration();\n\t\tcorsConfiguration.addAllowedOrigin(CorsConfiguration.ALL);\n\t\tcorsConfiguration.setAllowedMethods(\n\t\t\t\tArrays.asList(HttpMethod.GET.name(), HttpMethod.POST.name()));\n\t\tcorsConfiguration.setAllowedHeaders(\n\t\t\t\tArrays.asList("Authorization", "X-Cf-App-Instance", "Content-Type"));\n\t\treturn corsConfiguration;\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(MatcherSecurityWebFilterChain.class)\n\tstatic class IgnoredPathsSecurityConfiguration {\n\n\t\t@Bean\n\t\tpublic WebFilterChainPostProcessor webFilterChainPostProcessor() {\n\t\t\treturn new WebFilterChainPostProcessor();\n\t\t}\n\n\t}\n\n\tprivate static class WebFilterChainPostProcessor implements BeanPostProcessor {\n\n\t\t@Override\n\t\tpublic Object postProcessAfterInitialization(Object bean, String beanName)\n\t\t\t\tthrows BeansException {\n\t\t\tif (bean instanceof WebFilterChainProxy) {\n\t\t\t\treturn postProcess((WebFilterChainProxy) bean);\n\t\t\t}\n\t\t\treturn bean;\n\t\t}\n\n\t\tprivate WebFilterChainProxy postProcess(WebFilterChainProxy existing) {\n\t\t\tServerWebExchangeMatcher cloudFoundryRequestMatcher = ServerWebExchangeMatchers\n\t\t\t\t\t.pathMatchers("/cloudfoundryapplication/**");\n\t\t\tWebFilter noOpFilter = (exchange, chain) -> chain.filter(exchange);\n\t\t\tMatcherSecurityWebFilterChain ignoredRequestFilterChain = new MatcherSecurityWebFilterChain(\n\t\t\t\t\tcloudFoundryRequestMatcher, Collections.singletonList(noOpFilter));\n\t\t\tMatcherSecurityWebFilterChain allRequestsFilterChain = new MatcherSecurityWebFilterChain(\n\t\t\t\t\tServerWebExchangeMatchers.anyExchange(),\n\t\t\t\t\tCollections.singletonList(existing));\n\t\t\treturn new WebFilterChainProxy(ignoredRequestFilterChain,\n\t\t\t\t\tallRequestsFilterChain);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive;\n\nimport java.util.Arrays;\nimport java.util.Collections;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.config.BeanPostProcessor;\nimport org.springframework.boot.actuate.autoconfigure.cloudfoundry.CloudFoundryWebAnnotationEndpointDiscoverer;\nimport org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\nimport org.springframework.boot.actuate.autoconfigure.health.HealthEndpointAutoConfiguration;\nimport org.springframework.boot.actuate.endpoint.reflect.ParameterMapper;\nimport org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes;\nimport org.springframework.boot.actuate.endpoint.web.EndpointPathResolver;\nimport org.springframework.boot.actuate.health.HealthEndpoint;\nimport org.springframework.boot.actuate.health.ReactiveHealthEndpointWebExtension;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.cloud.CloudPlatform;\nimport org.springframework.boot.endpoint.web.EndpointMapping;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.security.web.server.MatcherSecurityWebFilterChain;\nimport org.springframework.security.web.server.WebFilterChainProxy;\nimport org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher;\nimport org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.reactive.function.client.WebClient;\nimport org.springframework.web.server.WebFilter;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to expose actuator endpoints for\n * Cloud Foundry to use in a reactive environment.\n *\n * @author Madhura Bhave\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnProperty(prefix = "management.cloudfoundry", name = "enabled", matchIfMissing = true)\n@AutoConfigureAfter(HealthEndpointAutoConfiguration.class)\n@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)\n@ConditionalOnCloudPlatform(CloudPlatform.CLOUD_FOUNDRY)\npublic class ReactiveCloudFoundryActuatorAutoConfiguration {\n\n\tprivate final ApplicationContext applicationContext;\n\n\tReactiveCloudFoundryActuatorAutoConfiguration(ApplicationContext applicationContext) {\n\t\tthis.applicationContext = applicationContext;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnEnabledEndpoint\n\t@ConditionalOnBean({ HealthEndpoint.class,\n\t\t\tReactiveHealthEndpointWebExtension.class })\n\tpublic CloudFoundryReactiveHealthEndpointWebExtension cloudFoundryReactiveHealthEndpointWebExtension(\n\t\t\tReactiveHealthEndpointWebExtension reactiveHealthEndpointWebExtension) {\n\t\treturn new CloudFoundryReactiveHealthEndpointWebExtension(\n\t\t\t\treactiveHealthEndpointWebExtension);\n\t}\n\n\t@Bean\n\tpublic CloudFoundryWebFluxEndpointHandlerMapping cloudFoundryWebFluxEndpointHandlerMapping(\n\t\t\tParameterMapper parameterMapper, EndpointMediaTypes endpointMediaTypes,\n\t\t\tWebClient.Builder webClientBuilder) {\n\t\tCloudFoundryWebAnnotationEndpointDiscoverer endpointDiscoverer = new CloudFoundryWebAnnotationEndpointDiscoverer(\n\t\t\t\tthis.applicationContext, parameterMapper, endpointMediaTypes,\n\t\t\t\tEndpointPathResolver.useEndpointId(), null, null,\n\t\t\t\tCloudFoundryReactiveHealthEndpointWebExtension.class);\n\t\tReactiveCloudFoundrySecurityInterceptor securityInterceptor = getSecurityInterceptor(\n\t\t\t\twebClientBuilder, this.applicationContext.getEnvironment());\n\t\treturn new CloudFoundryWebFluxEndpointHandlerMapping(\n\t\t\t\tnew EndpointMapping("/cloudfoundryapplication"),\n\t\t\t\tendpointDiscoverer.discoverEndpoints(), endpointMediaTypes,\n\t\t\t\tgetCorsConfiguration(), securityInterceptor);\n\t}\n\n\tprivate ReactiveCloudFoundrySecurityInterceptor getSecurityInterceptor(\n\t\t\tWebClient.Builder restTemplateBuilder, Environment environment) {\n\t\tReactiveCloudFoundrySecurityService cloudfoundrySecurityService = getCloudFoundrySecurityService(\n\t\t\t\trestTemplateBuilder, environment);\n\t\tReactiveTokenValidator tokenValidator = new ReactiveTokenValidator(\n\t\t\t\tcloudfoundrySecurityService);\n\t\treturn new ReactiveCloudFoundrySecurityInterceptor(tokenValidator,\n\t\t\t\tcloudfoundrySecurityService,\n\t\t\t\tenvironment.getProperty("vcap.application.application_id"));\n\t}\n\n\tprivate ReactiveCloudFoundrySecurityService getCloudFoundrySecurityService(\n\t\t\tWebClient.Builder webClientBuilder, Environment environment) {\n\t\tString cloudControllerUrl = environment.getProperty("vcap.application.cf_api");\n\t\treturn (cloudControllerUrl == null ? null\n\t\t\t\t: new ReactiveCloudFoundrySecurityService(webClientBuilder,\n\t\t\t\t\t\tcloudControllerUrl));\n\t}\n\n\tprivate CorsConfiguration getCorsConfiguration() {\n\t\tCorsConfiguration corsConfiguration = new CorsConfiguration();\n\t\tcorsConfiguration.addAllowedOrigin(CorsConfiguration.ALL);\n\t\tcorsConfiguration.setAllowedMethods(\n\t\t\t\tArrays.asList(HttpMethod.GET.name(), HttpMethod.POST.name()));\n\t\tcorsConfiguration.setAllowedHeaders(\n\t\t\t\tArrays.asList("Authorization", "X-Cf-App-Instance", "Content-Type"));\n\t\treturn corsConfiguration;\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(MatcherSecurityWebFilterChain.class)\n\tstatic class IgnoredPathsSecurityConfiguration {\n\n\t\t@Bean\n\t\tpublic WebFilterChainPostProcessor webFilterChainPostProcessor() {\n\t\t\treturn new WebFilterChainPostProcessor();\n\t\t}\n\n\t}\n\n\tprivate static class WebFilterChainPostProcessor implements BeanPostProcessor {\n\n\t\t@Override\n\t\tpublic Object postProcessAfterInitialization(Object bean, String beanName)\n\t\t\t\tthrows BeansException {\n\t\t\tif (bean instanceof WebFilterChainProxy) {\n\t\t\t\treturn postProcess((WebFilterChainProxy) bean);\n\t\t\t}\n\t\t\treturn bean;\n\t\t}\n\n\t\tprivate WebFilterChainProxy postProcess(WebFilterChainProxy existing) {\n\t\t\tServerWebExchangeMatcher cloudFoundryRequestMatcher = ServerWebExchangeMatchers\n\t\t\t\t\t.pathMatchers("/cloudfoundryapplication/**");\n\t\t\tWebFilter noOpFilter = (exchange, chain) -> chain.filter(exchange);\n\t\t\tMatcherSecurityWebFilterChain ignoredRequestFilterChain = new MatcherSecurityWebFilterChain(\n\t\t\t\t\tcloudFoundryRequestMatcher, Collections.singletonList(noOpFilter));\n\t\t\tMatcherSecurityWebFilterChain allRequestsFilterChain = new MatcherSecurityWebFilterChain(\n\t\t\t\t\tServerWebExchangeMatchers.anyExchange(),\n\t\t\t\t\tCollections.singletonList(existing));\n\t\t\treturn new WebFilterChainProxy(ignoredRequestFilterChain,\n\t\t\t\t\tallRequestsFilterChain);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
