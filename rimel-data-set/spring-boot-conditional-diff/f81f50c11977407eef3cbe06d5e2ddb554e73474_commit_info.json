{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/LdapAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/LdapAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -26,12 +26,15 @@ import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.core.env.Environment;\n import org.springframework.ldap.core.ContextSource;\n+import org.springframework.ldap.core.LdapOperations;\n+import org.springframework.ldap.core.LdapTemplate;\n import org.springframework.ldap.core.support.LdapContextSource;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for LDAP.\n  *\n  * @author Eddú Meléndez\n+ * @author Vedran Pavic\n  * @since 1.5.0\n  */\n @Configuration\n@@ -62,4 +65,10 @@ public class LdapAutoConfiguration {\n \t\treturn source;\n \t}\n \n+\t@Bean\n+\t@ConditionalOnMissingBean(LdapOperations.class)\n+\tpublic LdapTemplate ldapTemplate(ContextSource contextSource) {\n+\t\treturn new LdapTemplate(contextSource);\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.ldap;\n\nimport java.util.Collections;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\nimport org.springframework.ldap.core.ContextSource;\nimport org.springframework.ldap.core.LdapOperations;\nimport org.springframework.ldap.core.LdapTemplate;\nimport org.springframework.ldap.core.support.LdapContextSource;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for LDAP.\n *\n * @author Eddú Meléndez\n * @author Vedran Pavic\n * @since 1.5.0\n */\n@Configuration\n@ConditionalOnClass(ContextSource.class)\n@EnableConfigurationProperties(LdapProperties.class)\npublic class LdapAutoConfiguration {\n\n\tprivate final LdapProperties properties;\n\n\tprivate final Environment environment;\n\n\tpublic LdapAutoConfiguration(LdapProperties properties, Environment environment) {\n\t\tthis.properties = properties;\n\t\tthis.environment = environment;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic ContextSource ldapContextSource() {\n\t\tLdapContextSource source = new LdapContextSource();\n\t\tsource.setUserDn(this.properties.getUsername());\n\t\tsource.setPassword(this.properties.getPassword());\n\t\tsource.setAnonymousReadOnly(this.properties.getAnonymousReadOnly());\n\t\tsource.setBase(this.properties.getBase());\n\t\tsource.setUrls(this.properties.determineUrls(this.environment));\n\t\tsource.setBaseEnvironmentProperties(\n\t\t\t\tCollections.unmodifiableMap(this.properties.getBaseEnvironment()));\n\t\treturn source;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(LdapOperations.class)\n\tpublic LdapTemplate ldapTemplate(ContextSource contextSource) {\n\t\treturn new LdapTemplate(contextSource);\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.ldap;\n\nimport java.util.Collections;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\nimport org.springframework.ldap.core.ContextSource;\nimport org.springframework.ldap.core.support.LdapContextSource;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for LDAP.\n *\n * @author Eddú Meléndez\n * @since 1.5.0\n */\n@Configuration\n@ConditionalOnClass(ContextSource.class)\n@EnableConfigurationProperties(LdapProperties.class)\npublic class LdapAutoConfiguration {\n\n\tprivate final LdapProperties properties;\n\n\tprivate final Environment environment;\n\n\tpublic LdapAutoConfiguration(LdapProperties properties, Environment environment) {\n\t\tthis.properties = properties;\n\t\tthis.environment = environment;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic ContextSource ldapContextSource() {\n\t\tLdapContextSource source = new LdapContextSource();\n\t\tsource.setUserDn(this.properties.getUsername());\n\t\tsource.setPassword(this.properties.getPassword());\n\t\tsource.setAnonymousReadOnly(this.properties.getAnonymousReadOnly());\n\t\tsource.setBase(this.properties.getBase());\n\t\tsource.setUrls(this.properties.determineUrls(this.environment));\n\t\tsource.setBaseEnvironmentProperties(\n\t\t\t\tCollections.unmodifiableMap(this.properties.getBaseEnvironment()));\n\t\treturn source;\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
