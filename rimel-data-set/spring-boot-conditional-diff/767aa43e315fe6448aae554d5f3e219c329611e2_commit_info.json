{'_old_path': PosixPath('spring-boot-samples/spring-boot-sample-websocket/src/main/java/org/springframework/boot/samples/websocket/config/SampleWebSocketsApplication.java'), '_new_path': PosixPath('spring-boot-samples/spring-boot-sample-websocket/src/main/java/org/springframework/boot/samples/websocket/config/SampleWebSocketsApplication.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,16 +16,8 @@\n \n package org.springframework.boot.samples.websocket.config;\n \n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import org.apache.catalina.Context;\n-import org.apache.catalina.startup.Tomcat;\n-import org.apache.tomcat.websocket.server.WsSci;\n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n-import org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;\n import org.springframework.boot.samples.websocket.client.GreetingService;\n import org.springframework.boot.samples.websocket.client.SimpleGreetingService;\n import org.springframework.boot.samples.websocket.echo.DefaultEchoService;\n@@ -35,19 +27,13 @@ import org.springframework.boot.samples.websocket.snake.SnakeWebSocketHandler;\n import org.springframework.boot.web.SpringBootServletInitializer;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;\n-import org.springframework.web.servlet.DispatcherServlet;\n-import org.springframework.web.servlet.handler.SimpleUrlHandlerMapping;\n import org.springframework.web.socket.WebSocketHandler;\n-import org.springframework.web.socket.server.support.WebSocketHttpRequestHandler;\n-import org.springframework.web.socket.sockjs.SockJsHttpRequestHandler;\n-import org.springframework.web.socket.sockjs.SockJsService;\n-import org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsService;\n import org.springframework.web.socket.support.PerConnectionWebSocketHandler;\n \n @Configuration\n+@EnableAutoConfiguration\n public class SampleWebSocketsApplication extends SpringBootServletInitializer {\n-\n+\t\n \t@Override\n \tprotected Class<?>[] getConfigClasses() {\n \t\treturn new Class<?>[] { SampleWebSocketsApplication.class };\n@@ -57,22 +43,6 @@ public class SampleWebSocketsApplication extends SpringBootServletInitializer {\n \t\tSpringApplication.run(SampleWebSocketsApplication.class, args);\n \t}\n \n-\t@ConditionalOnClass(Tomcat.class)\n-\t@Configuration\n-\t@EnableAutoConfiguration\n-\tprotected static class InitializationConfiguration {\n-\t\t@Bean\n-\t\tpublic TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() {\n-\t\t\tTomcatEmbeddedServletContainerFactory factory = new TomcatEmbeddedServletContainerFactory() {\n-\t\t\t\t@Override\n-\t\t\t\tprotected void postProcessContext(Context context) {\n-\t\t\t\t\tcontext.addServletContainerInitializer(new WsSci(), null);\n-\t\t\t\t}\n-\t\t\t};\n-\t\t\treturn factory;\n-\t\t}\n-\t}\n-\n \t@Bean\n \tpublic EchoService echoService() {\n \t\treturn new DefaultEchoService("Did you say \\"%s\\"?");\n@@ -83,47 +53,14 @@ public class SampleWebSocketsApplication extends SpringBootServletInitializer {\n \t\treturn new SimpleGreetingService();\n \t}\n \n-\t@Bean\n-\tpublic SimpleUrlHandlerMapping handlerMapping() {\n-\n-\t\tSockJsService sockJsService = new DefaultSockJsService(sockJsTaskScheduler());\n-\n-\t\tMap<String, Object> urlMap = new HashMap<String, Object>();\n-\n-\t\turlMap.put("/echo", new WebSocketHttpRequestHandler(echoWebSocketHandler()));\n-\t\turlMap.put("/snake", new WebSocketHttpRequestHandler(snakeWebSocketHandler()));\n-\n-\t\turlMap.put("/sockjs/echo/**", new SockJsHttpRequestHandler(sockJsService, echoWebSocketHandler()));\n-\t\turlMap.put("/sockjs/snake/**", new SockJsHttpRequestHandler(sockJsService, snakeWebSocketHandler()));\n-\n-\t\tSimpleUrlHandlerMapping handlerMapping = new SimpleUrlHandlerMapping();\n-\t\thandlerMapping.setOrder(-1);\n-\t\thandlerMapping.setUrlMap(urlMap);\n-\n-\t\treturn handlerMapping;\n-\t}\n-\n-\t@Bean\n-\tpublic DispatcherServlet dispatcherServlet() {\n-\t\tDispatcherServlet servlet = new DispatcherServlet();\n-\t\tservlet.setDispatchOptionsRequest(true);\n-\t\treturn servlet;\n-\t}\n-\n-\t@Bean\n+\t@Bean(name = "/echo")\n \tpublic WebSocketHandler echoWebSocketHandler() {\n \t\treturn new PerConnectionWebSocketHandler(EchoWebSocketHandler.class);\n \t}\n \n-\t@Bean\n+\t@Bean(name = "/snake")\n \tpublic WebSocketHandler snakeWebSocketHandler() {\n \t\treturn new SnakeWebSocketHandler();\n \t}\n \n-\t@Bean\n-\tpublic ThreadPoolTaskScheduler sockJsTaskScheduler() {\n-\t\tThreadPoolTaskScheduler taskScheduler = new ThreadPoolTaskScheduler();\n-\t\ttaskScheduler.setThreadNamePrefix("SockJS-");\n-\t\treturn taskScheduler;\n-\t}\n }\n', 'source_code': '/*\n * Copyright 2002-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.samples.websocket.config;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.samples.websocket.client.GreetingService;\nimport org.springframework.boot.samples.websocket.client.SimpleGreetingService;\nimport org.springframework.boot.samples.websocket.echo.DefaultEchoService;\nimport org.springframework.boot.samples.websocket.echo.EchoService;\nimport org.springframework.boot.samples.websocket.echo.EchoWebSocketHandler;\nimport org.springframework.boot.samples.websocket.snake.SnakeWebSocketHandler;\nimport org.springframework.boot.web.SpringBootServletInitializer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.socket.WebSocketHandler;\nimport org.springframework.web.socket.support.PerConnectionWebSocketHandler;\n\n@Configuration\n@EnableAutoConfiguration\npublic class SampleWebSocketsApplication extends SpringBootServletInitializer {\n\t\n\t@Override\n\tprotected Class<?>[] getConfigClasses() {\n\t\treturn new Class<?>[] { SampleWebSocketsApplication.class };\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(SampleWebSocketsApplication.class, args);\n\t}\n\n\t@Bean\n\tpublic EchoService echoService() {\n\t\treturn new DefaultEchoService("Did you say \\"%s\\"?");\n\t}\n\n\t@Bean\n\tpublic GreetingService greetingService() {\n\t\treturn new SimpleGreetingService();\n\t}\n\n\t@Bean(name = "/echo")\n\tpublic WebSocketHandler echoWebSocketHandler() {\n\t\treturn new PerConnectionWebSocketHandler(EchoWebSocketHandler.class);\n\t}\n\n\t@Bean(name = "/snake")\n\tpublic WebSocketHandler snakeWebSocketHandler() {\n\t\treturn new SnakeWebSocketHandler();\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2002-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.samples.websocket.config;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.apache.catalina.Context;\nimport org.apache.catalina.startup.Tomcat;\nimport org.apache.tomcat.websocket.server.WsSci;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;\nimport org.springframework.boot.samples.websocket.client.GreetingService;\nimport org.springframework.boot.samples.websocket.client.SimpleGreetingService;\nimport org.springframework.boot.samples.websocket.echo.DefaultEchoService;\nimport org.springframework.boot.samples.websocket.echo.EchoService;\nimport org.springframework.boot.samples.websocket.echo.EchoWebSocketHandler;\nimport org.springframework.boot.samples.websocket.snake.SnakeWebSocketHandler;\nimport org.springframework.boot.web.SpringBootServletInitializer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;\nimport org.springframework.web.servlet.DispatcherServlet;\nimport org.springframework.web.servlet.handler.SimpleUrlHandlerMapping;\nimport org.springframework.web.socket.WebSocketHandler;\nimport org.springframework.web.socket.server.support.WebSocketHttpRequestHandler;\nimport org.springframework.web.socket.sockjs.SockJsHttpRequestHandler;\nimport org.springframework.web.socket.sockjs.SockJsService;\nimport org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsService;\nimport org.springframework.web.socket.support.PerConnectionWebSocketHandler;\n\n@Configuration\npublic class SampleWebSocketsApplication extends SpringBootServletInitializer {\n\n\t@Override\n\tprotected Class<?>[] getConfigClasses() {\n\t\treturn new Class<?>[] { SampleWebSocketsApplication.class };\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(SampleWebSocketsApplication.class, args);\n\t}\n\n\t@ConditionalOnClass(Tomcat.class)\n\t@Configuration\n\t@EnableAutoConfiguration\n\tprotected static class InitializationConfiguration {\n\t\t@Bean\n\t\tpublic TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() {\n\t\t\tTomcatEmbeddedServletContainerFactory factory = new TomcatEmbeddedServletContainerFactory() {\n\t\t\t\t@Override\n\t\t\t\tprotected void postProcessContext(Context context) {\n\t\t\t\t\tcontext.addServletContainerInitializer(new WsSci(), null);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn factory;\n\t\t}\n\t}\n\n\t@Bean\n\tpublic EchoService echoService() {\n\t\treturn new DefaultEchoService("Did you say \\"%s\\"?");\n\t}\n\n\t@Bean\n\tpublic GreetingService greetingService() {\n\t\treturn new SimpleGreetingService();\n\t}\n\n\t@Bean\n\tpublic SimpleUrlHandlerMapping handlerMapping() {\n\n\t\tSockJsService sockJsService = new DefaultSockJsService(sockJsTaskScheduler());\n\n\t\tMap<String, Object> urlMap = new HashMap<String, Object>();\n\n\t\turlMap.put("/echo", new WebSocketHttpRequestHandler(echoWebSocketHandler()));\n\t\turlMap.put("/snake", new WebSocketHttpRequestHandler(snakeWebSocketHandler()));\n\n\t\turlMap.put("/sockjs/echo/**", new SockJsHttpRequestHandler(sockJsService, echoWebSocketHandler()));\n\t\turlMap.put("/sockjs/snake/**", new SockJsHttpRequestHandler(sockJsService, snakeWebSocketHandler()));\n\n\t\tSimpleUrlHandlerMapping handlerMapping = new SimpleUrlHandlerMapping();\n\t\thandlerMapping.setOrder(-1);\n\t\thandlerMapping.setUrlMap(urlMap);\n\n\t\treturn handlerMapping;\n\t}\n\n\t@Bean\n\tpublic DispatcherServlet dispatcherServlet() {\n\t\tDispatcherServlet servlet = new DispatcherServlet();\n\t\tservlet.setDispatchOptionsRequest(true);\n\t\treturn servlet;\n\t}\n\n\t@Bean\n\tpublic WebSocketHandler echoWebSocketHandler() {\n\t\treturn new PerConnectionWebSocketHandler(EchoWebSocketHandler.class);\n\t}\n\n\t@Bean\n\tpublic WebSocketHandler snakeWebSocketHandler() {\n\t\treturn new SnakeWebSocketHandler();\n\t}\n\n\t@Bean\n\tpublic ThreadPoolTaskScheduler sockJsTaskScheduler() {\n\t\tThreadPoolTaskScheduler taskScheduler = new ThreadPoolTaskScheduler();\n\t\ttaskScheduler.setThreadNamePrefix("SockJS-");\n\t\treturn taskScheduler;\n\t}\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
