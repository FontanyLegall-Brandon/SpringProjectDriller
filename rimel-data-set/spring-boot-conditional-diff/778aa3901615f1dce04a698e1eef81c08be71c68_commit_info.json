{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/websocket/WebSocketAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/websocket/WebSocketAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -75,4 +75,16 @@ public class WebSocketAutoConfiguration {\n \n \t}\n \n+\t@Configuration\n+\t@ConditionalOnClass(io.undertow.websockets.jsr.Bootstrap.class)\n+\tstatic class UndertowWebSocketConfiguration {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(name = "websocketContainerCustomizer")\n+\t\tpublic EmbeddedServletContainerCustomizer websocketContainerCustomizer() {\n+\t\t\treturn new UndertowWebSocketContainerCustomizer();\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.websocket;\n\nimport javax.servlet.Servlet;\n\nimport org.apache.catalina.startup.Tomcat;\nimport org.eclipse.jetty.websocket.jsr356.server.deploy.WebSocketServerContainerInitializer;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration;\nimport org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.socket.WebSocketHandler;\n\n/**\n * Auto configuration for websocket server in embedded Tomcat or Jetty. Requires\n * <code>spring-websocket</code> and either Tomcat or Jetty with their WebSocket modules\n * to be on the classpath.\n * <p>\n * If Tomcat\'s WebSocket support is detected on the classpath we add a listener that\n * installs the Tomcat Websocket initializer. In a non-embedded container it should\n * already be there.\n * <p>\n * If Jetty\'s WebSocket support is detected on the classpath we add a configuration that\n * configures the context with WebSocket support. In a non-embedded container it should\n * already be there.\n *\n * @author Dave Syer\n * @author Phillip Webb\n * @author Andy Wilkinson\n */\n@Configuration\n@ConditionalOnClass({ Servlet.class, WebSocketHandler.class })\n@AutoConfigureBefore(EmbeddedServletContainerAutoConfiguration.class)\npublic class WebSocketAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnClass(name = "org.apache.tomcat.websocket.server.WsSci", value = Tomcat.class)\n\tstatic class TomcatWebSocketConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "websocketContainerCustomizer")\n\t\tpublic EmbeddedServletContainerCustomizer websocketContainerCustomizer() {\n\t\t\treturn new TomcatWebSocketContainerCustomizer();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(WebSocketServerContainerInitializer.class)\n\tstatic class JettyWebSocketConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "websocketContainerCustomizer")\n\t\tpublic EmbeddedServletContainerCustomizer websocketContainerCustomizer() {\n\t\t\treturn new JettyWebSocketContainerCustomizer();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(io.undertow.websockets.jsr.Bootstrap.class)\n\tstatic class UndertowWebSocketConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "websocketContainerCustomizer")\n\t\tpublic EmbeddedServletContainerCustomizer websocketContainerCustomizer() {\n\t\t\treturn new UndertowWebSocketContainerCustomizer();\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.websocket;\n\nimport javax.servlet.Servlet;\n\nimport org.apache.catalina.startup.Tomcat;\nimport org.eclipse.jetty.websocket.jsr356.server.deploy.WebSocketServerContainerInitializer;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration;\nimport org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.socket.WebSocketHandler;\n\n/**\n * Auto configuration for websocket server in embedded Tomcat or Jetty. Requires\n * <code>spring-websocket</code> and either Tomcat or Jetty with their WebSocket modules\n * to be on the classpath.\n * <p>\n * If Tomcat\'s WebSocket support is detected on the classpath we add a listener that\n * installs the Tomcat Websocket initializer. In a non-embedded container it should\n * already be there.\n * <p>\n * If Jetty\'s WebSocket support is detected on the classpath we add a configuration that\n * configures the context with WebSocket support. In a non-embedded container it should\n * already be there.\n *\n * @author Dave Syer\n * @author Phillip Webb\n * @author Andy Wilkinson\n */\n@Configuration\n@ConditionalOnClass({ Servlet.class, WebSocketHandler.class })\n@AutoConfigureBefore(EmbeddedServletContainerAutoConfiguration.class)\npublic class WebSocketAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnClass(name = "org.apache.tomcat.websocket.server.WsSci", value = Tomcat.class)\n\tstatic class TomcatWebSocketConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "websocketContainerCustomizer")\n\t\tpublic EmbeddedServletContainerCustomizer websocketContainerCustomizer() {\n\t\t\treturn new TomcatWebSocketContainerCustomizer();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(WebSocketServerContainerInitializer.class)\n\tstatic class JettyWebSocketConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "websocketContainerCustomizer")\n\t\tpublic EmbeddedServletContainerCustomizer websocketContainerCustomizer() {\n\t\t\treturn new JettyWebSocketContainerCustomizer();\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
