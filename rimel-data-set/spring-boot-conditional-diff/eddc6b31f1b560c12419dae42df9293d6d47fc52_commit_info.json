{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/SpringBootConditionTests.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2012-2014 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.condition;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.ConditionContext;\n+import org.springframework.context.annotation.Conditional;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.type.AnnotatedTypeMetadata;\n+\n+/**\n+ * Tests for {@link SpringBootCondition}.\n+ * \n+ * @author Phillip Webb\n+ */\n+@SuppressWarnings("resource")\n+public class SpringBootConditionTests {\n+\n+\t@Rule\n+\tpublic ExpectedException thrown = ExpectedException.none();\n+\n+\t@Test\n+\tpublic void sensibleClassException() {\n+\t\tthis.thrown.expect(IllegalStateException.class);\n+\t\tthis.thrown.expectMessage("Error processing condition on "\n+\t\t\t\t+ ErrorOnClass.class.getName());\n+\t\tnew AnnotationConfigApplicationContext(ErrorOnClass.class);\n+\t}\n+\n+\t@Test\n+\tpublic void sensibleMethodException() throws Exception {\n+\t\tthis.thrown.expect(IllegalStateException.class);\n+\t\tthis.thrown.expectMessage("Error processing condition on "\n+\t\t\t\t+ ErrorOnMethod.class.getName() + ".myBean");\n+\t\tnew AnnotationConfigApplicationContext(ErrorOnMethod.class);\n+\t}\n+\n+\t@Configuration\n+\t@Conditional(AlwaysThrowsCondition.class)\n+\tpublic static class ErrorOnClass {\n+\n+\t}\n+\n+\t@Configuration\n+\tpublic static class ErrorOnMethod {\n+\n+\t\t@Bean\n+\t\t@Conditional(AlwaysThrowsCondition.class)\n+\t\tpublic String myBean() {\n+\t\t\treturn "bean";\n+\t\t}\n+\n+\t}\n+\n+\tpublic static class AlwaysThrowsCondition extends SpringBootCondition {\n+\n+\t\t@Override\n+\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n+\t\t\t\tAnnotatedTypeMetadata metadata) {\n+\t\t\tthrow new RuntimeException("Oh no!");\n+\t\t}\n+\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExpectedException;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\n\n/**\n * Tests for {@link SpringBootCondition}.\n * \n * @author Phillip Webb\n */\n@SuppressWarnings("resource")\npublic class SpringBootConditionTests {\n\n\t@Rule\n\tpublic ExpectedException thrown = ExpectedException.none();\n\n\t@Test\n\tpublic void sensibleClassException() {\n\t\tthis.thrown.expect(IllegalStateException.class);\n\t\tthis.thrown.expectMessage("Error processing condition on "\n\t\t\t\t+ ErrorOnClass.class.getName());\n\t\tnew AnnotationConfigApplicationContext(ErrorOnClass.class);\n\t}\n\n\t@Test\n\tpublic void sensibleMethodException() throws Exception {\n\t\tthis.thrown.expect(IllegalStateException.class);\n\t\tthis.thrown.expectMessage("Error processing condition on "\n\t\t\t\t+ ErrorOnMethod.class.getName() + ".myBean");\n\t\tnew AnnotationConfigApplicationContext(ErrorOnMethod.class);\n\t}\n\n\t@Configuration\n\t@Conditional(AlwaysThrowsCondition.class)\n\tpublic static class ErrorOnClass {\n\n\t}\n\n\t@Configuration\n\tpublic static class ErrorOnMethod {\n\n\t\t@Bean\n\t\t@Conditional(AlwaysThrowsCondition.class)\n\t\tpublic String myBean() {\n\t\t\treturn "bean";\n\t\t}\n\n\t}\n\n\tpublic static class AlwaysThrowsCondition extends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tthrow new RuntimeException("Oh no!");\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
