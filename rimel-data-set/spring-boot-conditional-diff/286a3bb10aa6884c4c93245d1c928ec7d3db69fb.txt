@@ -1,5 +1,5 @@
 
 @Configuration
 @ConditionalOnClass(Gson.class)
+@EnableConfigurationProperties(GsonProperties.class)
 public class GsonAutoConfiguration {
 
-	@Configuration
-	static class GsonConfiguration {
-
-		@Bean
-		@Primary
-		@ConditionalOnMissingBean(Gson.class)
-		public Gson gson(GsonBuilder gsonBuilder) {
-			return gsonBuilder.create();
-		}
+	@Bean
+	public GsonBuilder gsonBuilder(List<GsonBuilderCustomizer> customizers) {
+		GsonBuilder builder = new GsonBuilder();
+		customizers.forEach(c -> c.customize(builder));
+		return builder;
 	}
 
-	@Configuration
-	static class GsonBuilderConfiguration {
-
-		@Bean
-		public GsonBuilder gsonBuilder(List<GsonBuilderCustomizer> customizers) {
-			final GsonBuilder gsonBuilder = new GsonBuilder();
-			customizers.forEach(c -> c.customize(gsonBuilder));
-			return gsonBuilder;
-		}
-
+	@Bean
+	@ConditionalOnMissingBean(Gson.class)
+	public Gson gson(GsonBuilder gsonBuilder) {
+		return gsonBuilder.create();
 	}
 
-	@Configuration
-	@EnableConfigurationProperties(GsonProperties.class)
-	static class GsonBuilderCustomizerConfiguration {
-
-		@Bean
-		public StandardGsonBuilderCustomizer standardGsonBuilderCustomizer(
-				GsonProperties gsonProperties) {
-			return new StandardGsonBuilderCustomizer(gsonProperties);
-		}
-
-		private static final class StandardGsonBuilderCustomizer
-				implements GsonBuilderCustomizer, Ordered {
-
-			private final GsonProperties properties;
-
-			StandardGsonBuilderCustomizer(GsonProperties properties) {
-				this.properties = properties;
-			}
-
-			@Override
-			public int getOrder() {
-				return 0;
-			}
-
-			@Override
-			public void customize(GsonBuilder gsonBuilder) {
-
-				boolean generateNonExecutableJson = this.properties
-						.isGenerateNonExecutableJson();
-				if (generateNonExecutableJson) {
-					gsonBuilder.generateNonExecutableJson();
-				}
-
-				boolean excludeFieldsWithoutExposeAnnotation = this.properties
-						.isExcludeFieldsWithoutExposeAnnotation();
-				if (excludeFieldsWithoutExposeAnnotation) {
-					gsonBuilder.excludeFieldsWithoutExposeAnnotation();
-				}
-
-				boolean serializeNulls = this.properties.isSerializeNulls();
-				if (serializeNulls) {
-					gsonBuilder.serializeNulls();
-				}
-
-				boolean enableComplexMapKeySerialization = this.properties
-						.isEnableComplexMapKeySerialization();
-				if (enableComplexMapKeySerialization) {
-					gsonBuilder.enableComplexMapKeySerialization();
-				}
-
-				boolean disableInnerClassSerialization = this.properties
-						.isDisableInnerClassSerialization();
-				if (disableInnerClassSerialization) {
-					gsonBuilder.disableInnerClassSerialization();
-				}
-
-				LongSerializationPolicy longSerializationPolicy = this.properties
-						.getLongSerializationPolicy();
-				if (longSerializationPolicy != null) {
-					gsonBuilder.setLongSerializationPolicy(longSerializationPolicy);
-				}
+	@Bean
+	public StandardGsonBuilderCustomizer standardGsonBuilderCustomizer(
+			GsonProperties gsonProperties) {
+		return new StandardGsonBuilderCustomizer(gsonProperties);
+	}
 
-				FieldNamingPolicy fieldNamingPolicy = this.properties
-						.getFieldNamingPolicy();
-				if (fieldNamingPolicy != null) {
-					gsonBuilder.setFieldNamingPolicy(fieldNamingPolicy);
-				}
+	private static final class StandardGsonBuilderCustomizer
+			implements GsonBuilderCustomizer, Ordered {
 
-				boolean prettyPrinting = this.properties.isPrettyPrinting();
-				if (prettyPrinting) {
-					gsonBuilder.setPrettyPrinting();
-				}
+		private final GsonProperties properties;
 
-				boolean isLenient = this.properties.isLenient();
-				if (isLenient) {
-					gsonBuilder.setLenient();
-				}
+		StandardGsonBuilderCustomizer(GsonProperties properties) {
+			this.properties = properties;
+		}
 
-				boolean disableHtmlEscaping = this.properties.isDisableHtmlEscaping();
-				if (disableHtmlEscaping) {
-					gsonBuilder.disableHtmlEscaping();
-				}
+		@Override
+		public int getOrder() {
+			return 0;
+		}
 
-				String dateFormat = this.properties.getDateFormat();
-				if (dateFormat != null) {
-					gsonBuilder.setDateFormat(dateFormat);
-				}
-			}
+		@Override
+		public void customize(GsonBuilder builder) {
+			GsonProperties properties = this.properties;
+			PropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();
+			map.from(properties::getGenerateNonExecutableJson)
+					.toCall(builder::generateNonExecutableJson);
+			map.from(properties::getExcludeFieldsWithoutExposeAnnotation)
+					.toCall(builder::excludeFieldsWithoutExposeAnnotation);
+			map.from(properties::getSerializeNulls).toCall(builder::serializeNulls);
+			map.from(properties::getEnableComplexMapKeySerialization)
+					.toCall(builder::enableComplexMapKeySerialization);
+			map.from(properties::getDisableInnerClassSerialization)
+					.toCall(builder::disableInnerClassSerialization);
+			map.from(properties::getLongSerializationPolicy)
+					.to(builder::setLongSerializationPolicy);
+			map.from(properties::getFieldNamingPolicy).to(builder::setFieldNamingPolicy);
+			map.from(properties::getPrettyPrinting).toCall(builder::setPrettyPrinting);
+			map.from(properties::getLenient).toCall(builder::setLenient);
+			map.from(properties::getDisableHtmlEscaping)
+					.toCall(builder::disableHtmlEscaping);
+			map.from(properties::getDateFormat).to(builder::setDateFormat);
 		}
+
 	}
 
 }

