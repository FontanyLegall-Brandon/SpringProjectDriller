{'_old_path': None, '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/stackdriver/StackdriverMetricsExportAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.autoconfigure.metrics.export.stackdriver;\n+\n+import io.micrometer.core.instrument.Clock;\n+import io.micrometer.stackdriver.StackdriverConfig;\n+import io.micrometer.stackdriver.StackdriverMeterRegistry;\n+import org.springframework.boot.actuate.autoconfigure.metrics.CompositeMeterRegistryAutoConfiguration;\n+import org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration;\n+import org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for exporting metrics to Stackdriver.\n+ *\n+ * @author Johannes Graf\n+ */\n+@Configuration(proxyBeanMethods = false)\n+@AutoConfigureBefore({ CompositeMeterRegistryAutoConfiguration.class, SimpleMetricsExportAutoConfiguration.class })\n+@AutoConfigureAfter(MetricsAutoConfiguration.class)\n+@ConditionalOnBean(Clock.class)\n+@ConditionalOnClass(StackdriverMeterRegistry.class)\n+@ConditionalOnProperty(prefix = "management.metrics.export.stackdriver", name = "enabled", havingValue = "true",\n+\tmatchIfMissing = true\n+)\n+@EnableConfigurationProperties(StackdriverProperties.class)\n+public class StackdriverMetricsExportAutoConfiguration {\n+\tprivate final StackdriverProperties properties;\n+\n+\tpublic StackdriverMetricsExportAutoConfiguration(StackdriverProperties stackdriverProperties) {\n+\t\tthis.properties = stackdriverProperties;\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic StackdriverConfig stackdriverConfig() {\n+\t\treturn new StackdriverPropertiesConfigAdapter(this.properties);\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic StackdriverMeterRegistry StackdriverMeterRegistry(StackdriverConfig stackdriverConfig, Clock clock) {\n+\t\treturn StackdriverMeterRegistry.builder(stackdriverConfig)\n+\t\t\t\t.clock(clock)\n+\t\t\t\t.build();\n+\t}\n+}\n', 'source_code': '/*\n * Copyright 2012-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics.export.stackdriver;\n\nimport io.micrometer.core.instrument.Clock;\nimport io.micrometer.stackdriver.StackdriverConfig;\nimport io.micrometer.stackdriver.StackdriverMeterRegistry;\nimport org.springframework.boot.actuate.autoconfigure.metrics.CompositeMeterRegistryAutoConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for exporting metrics to Stackdriver.\n *\n * @author Johannes Graf\n */\n@Configuration(proxyBeanMethods = false)\n@AutoConfigureBefore({ CompositeMeterRegistryAutoConfiguration.class, SimpleMetricsExportAutoConfiguration.class })\n@AutoConfigureAfter(MetricsAutoConfiguration.class)\n@ConditionalOnBean(Clock.class)\n@ConditionalOnClass(StackdriverMeterRegistry.class)\n@ConditionalOnProperty(prefix = "management.metrics.export.stackdriver", name = "enabled", havingValue = "true",\n\tmatchIfMissing = true\n)\n@EnableConfigurationProperties(StackdriverProperties.class)\npublic class StackdriverMetricsExportAutoConfiguration {\n\tprivate final StackdriverProperties properties;\n\n\tpublic StackdriverMetricsExportAutoConfiguration(StackdriverProperties stackdriverProperties) {\n\t\tthis.properties = stackdriverProperties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic StackdriverConfig stackdriverConfig() {\n\t\treturn new StackdriverPropertiesConfigAdapter(this.properties);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic StackdriverMeterRegistry StackdriverMeterRegistry(StackdriverConfig stackdriverConfig, Clock clock) {\n\t\treturn StackdriverMeterRegistry.builder(stackdriverConfig)\n\t\t\t\t.clock(clock)\n\t\t\t\t.build();\n\t}\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
