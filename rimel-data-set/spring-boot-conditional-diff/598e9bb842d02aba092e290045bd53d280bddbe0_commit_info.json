{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionEvaluationReportTests.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionEvaluationReportTests.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -131,16 +131,13 @@ public class ConditionEvaluationReportTests {\n \t\t\t\t.getConditionAndOutcomesBySource();\n \t\tassertThat(map.size()).isEqualTo(2);\n \t\tIterator<ConditionAndOutcome> iterator = map.get("a").iterator();\n-\n \t\tConditionAndOutcome conditionAndOutcome = iterator.next();\n \t\tassertThat(conditionAndOutcome.getCondition()).isEqualTo(this.condition1);\n \t\tassertThat(conditionAndOutcome.getOutcome()).isEqualTo(this.outcome1);\n-\n \t\tconditionAndOutcome = iterator.next();\n \t\tassertThat(conditionAndOutcome.getCondition()).isEqualTo(this.condition2);\n \t\tassertThat(conditionAndOutcome.getOutcome()).isEqualTo(this.outcome2);\n \t\tassertThat(iterator.hasNext()).isFalse();\n-\n \t\titerator = map.get("b").iterator();\n \t\tconditionAndOutcome = iterator.next();\n \t\tassertThat(conditionAndOutcome.getCondition()).isEqualTo(this.condition3);\n@@ -187,16 +184,13 @@ public class ConditionEvaluationReportTests {\n \t\t\t\tnew ConditionOutcome(true, "Message 2"));\n \t\tConditionAndOutcome outcome3 = new ConditionAndOutcome(this.condition3,\n \t\t\t\tnew ConditionOutcome(true, "Message 2"));\n-\n \t\tassertThat(outcome1).isEqualTo(outcome1);\n \t\tassertThat(outcome1).isNotEqualTo(outcome2);\n \t\tassertThat(outcome2).isEqualTo(outcome3);\n-\n \t\tConditionAndOutcomes outcomes = new ConditionAndOutcomes();\n \t\toutcomes.add(this.condition1, new ConditionOutcome(true, "Message 1"));\n \t\toutcomes.add(this.condition2, new ConditionOutcome(true, "Message 2"));\n \t\toutcomes.add(this.condition3, new ConditionOutcome(true, "Message 2"));\n-\n \t\tassertThat(getNumberOfOutcomes(outcomes)).isEqualTo(2);\n \t}\n \n@@ -207,12 +201,10 @@ public class ConditionEvaluationReportTests {\n \t\tConditionEvaluationReport report = ConditionEvaluationReport\n \t\t\t\t.get(context.getBeanFactory());\n \t\tString autoconfigKey = MultipartAutoConfiguration.class.getName();\n-\n \t\tConditionAndOutcomes outcomes = report.getConditionAndOutcomesBySource()\n \t\t\t\t.get(autoconfigKey);\n \t\tassertThat(outcomes).isNotEqualTo(nullValue());\n \t\tassertThat(getNumberOfOutcomes(outcomes)).isEqualTo(2);\n-\n \t\tList<String> messages = new ArrayList<>();\n \t\tfor (ConditionAndOutcome outcome : outcomes) {\n \t\t\tmessages.add(outcome.getOutcome().getMessage());\n@@ -251,10 +243,11 @@ public class ConditionEvaluationReportTests {\n \t\tcontext.refresh();\n \t\tConditionEvaluationReport report = ConditionEvaluationReport\n \t\t\t\t.get(context.getBeanFactory());\n-\t\tassertThat(report.getConditionAndOutcomesBySource())\n-\t\t\t\t.containsKeys("org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration",\n-\t\t\t\t\t\t"org.springframework.boot.autoconfigure.condition.config.first.SampleAutoConfiguration",\n-\t\t\t\t\t\t"org.springframework.boot.autoconfigure.condition.config.second.SampleAutoConfiguration");\n+\t\tassertThat(report.getConditionAndOutcomesBySource()).containsKeys(\n+\t\t\t\t"org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration",\n+\t\t\t\t"org.springframework.boot.autoconfigure.condition.config.first.SampleAutoConfiguration",\n+\t\t\t\t"org.springframework.boot.autoconfigure.condition.config.second.SampleAutoConfiguration");\n+\t\tcontext.close();\n \t}\n \n \t@Test\n@@ -267,10 +260,12 @@ public class ConditionEvaluationReportTests {\n \t\tConditionEvaluationReport report = ConditionEvaluationReport\n \t\t\t\t.get(context.getBeanFactory());\n \t\tString reportMessage = new ConditionEvaluationReportMessage(report).toString();\n-\t\tassertThat(reportMessage)\n-\t\t\t\t.contains("WebMvcAutoConfiguration", "org.springframework.boot.autoconfigure.condition.config.first.SampleAutoConfiguration",\n-\t\t\t\t\t\t"org.springframework.boot.autoconfigure.condition.config.second.SampleAutoConfiguration");\n-\t\tassertThat(reportMessage).doesNotContain("org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration");\n+\t\tassertThat(reportMessage).contains("WebMvcAutoConfiguration",\n+\t\t\t\t"org.springframework.boot.autoconfigure.condition.config.first.SampleAutoConfiguration",\n+\t\t\t\t"org.springframework.boot.autoconfigure.condition.config.second.SampleAutoConfiguration");\n+\t\tassertThat(reportMessage).doesNotContain(\n+\t\t\t\t"org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration");\n+\t\tcontext.close();\n \t}\n \n \tprivate int getNumberOfOutcomes(ConditionAndOutcomes outcomes) {\n@@ -296,12 +291,12 @@ public class ConditionEvaluationReportTests {\n \t}\n \n \t@Configuration\n-\t@Conditional({ConditionEvaluationReportTests.MatchParseCondition.class,\n-\t\t\tConditionEvaluationReportTests.NoMatchBeanCondition.class})\n+\t@Conditional({ ConditionEvaluationReportTests.MatchParseCondition.class,\n+\t\t\tConditionEvaluationReportTests.NoMatchBeanCondition.class })\n \tpublic static class NegativeOuterConfig {\n \n \t\t@Configuration\n-\t\t@Conditional({ConditionEvaluationReportTests.MatchParseCondition.class})\n+\t\t@Conditional({ ConditionEvaluationReportTests.MatchParseCondition.class })\n \t\tpublic static class PositiveInnerConfig {\n \n \t\t\t@Bean\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.beans.factory.support.DefaultListableBeanFactory;\nimport org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport.ConditionAndOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport.ConditionAndOutcomes;\nimport org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportMessage;\nimport org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration;\nimport org.springframework.boot.test.util.TestPropertyValues;\nimport org.springframework.boot.testsupport.assertj.Matched;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Condition;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.ConfigurationCondition;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.util.ClassUtils;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.hamcrest.Matchers.containsString;\nimport static org.hamcrest.Matchers.nullValue;\n\n/**\n * Tests for {@link ConditionEvaluationReport}.\n *\n * @author Greg Turnquist\n * @author Phillip Webb\n */\npublic class ConditionEvaluationReportTests {\n\n\tprivate DefaultListableBeanFactory beanFactory;\n\n\tprivate ConditionEvaluationReport report;\n\n\t@Mock\n\tprivate Condition condition1;\n\n\t@Mock\n\tprivate Condition condition2;\n\n\t@Mock\n\tprivate Condition condition3;\n\n\tprivate ConditionOutcome outcome1;\n\n\tprivate ConditionOutcome outcome2;\n\n\tprivate ConditionOutcome outcome3;\n\n\t@Before\n\tpublic void setup() {\n\t\tMockitoAnnotations.initMocks(this);\n\t\tthis.beanFactory = new DefaultListableBeanFactory();\n\t\tthis.report = ConditionEvaluationReport.get(this.beanFactory);\n\t}\n\n\t@Test\n\tpublic void get() {\n\t\tassertThat(this.report).isNotEqualTo(nullValue());\n\t\tassertThat(this.report).isSameAs(ConditionEvaluationReport.get(this.beanFactory));\n\t}\n\n\t@Test\n\tpublic void parent() {\n\t\tthis.beanFactory.setParentBeanFactory(new DefaultListableBeanFactory());\n\t\tConditionEvaluationReport.get((ConfigurableListableBeanFactory) this.beanFactory\n\t\t\t\t.getParentBeanFactory());\n\t\tassertThat(this.report).isSameAs(ConditionEvaluationReport.get(this.beanFactory));\n\t\tassertThat(this.report).isNotEqualTo(nullValue());\n\t\tassertThat(this.report.getParent()).isNotEqualTo(nullValue());\n\t\tConditionEvaluationReport.get((ConfigurableListableBeanFactory) this.beanFactory\n\t\t\t\t.getParentBeanFactory());\n\t\tassertThat(this.report).isSameAs(ConditionEvaluationReport.get(this.beanFactory));\n\t\tassertThat(this.report.getParent()).isSameAs(ConditionEvaluationReport\n\t\t\t\t.get((ConfigurableListableBeanFactory) this.beanFactory\n\t\t\t\t\t\t.getParentBeanFactory()));\n\t}\n\n\t@Test\n\tpublic void parentBottomUp() {\n\t\tthis.beanFactory = new DefaultListableBeanFactory(); // NB: overrides setup\n\t\tthis.beanFactory.setParentBeanFactory(new DefaultListableBeanFactory());\n\t\tConditionEvaluationReport.get((ConfigurableListableBeanFactory) this.beanFactory\n\t\t\t\t.getParentBeanFactory());\n\t\tthis.report = ConditionEvaluationReport.get(this.beanFactory);\n\t\tassertThat(this.report).isNotNull();\n\t\tassertThat(this.report).isNotSameAs(this.report.getParent());\n\t\tassertThat(this.report.getParent()).isNotNull();\n\t\tassertThat(this.report.getParent().getParent()).isNull();\n\t}\n\n\t@Test\n\tpublic void recordConditionEvaluations() {\n\t\tthis.outcome1 = new ConditionOutcome(false, "m1");\n\t\tthis.outcome2 = new ConditionOutcome(false, "m2");\n\t\tthis.outcome3 = new ConditionOutcome(false, "m3");\n\t\tthis.report.recordConditionEvaluation("a", this.condition1, this.outcome1);\n\t\tthis.report.recordConditionEvaluation("a", this.condition2, this.outcome2);\n\t\tthis.report.recordConditionEvaluation("b", this.condition3, this.outcome3);\n\t\tMap<String, ConditionAndOutcomes> map = this.report\n\t\t\t\t.getConditionAndOutcomesBySource();\n\t\tassertThat(map.size()).isEqualTo(2);\n\t\tIterator<ConditionAndOutcome> iterator = map.get("a").iterator();\n\t\tConditionAndOutcome conditionAndOutcome = iterator.next();\n\t\tassertThat(conditionAndOutcome.getCondition()).isEqualTo(this.condition1);\n\t\tassertThat(conditionAndOutcome.getOutcome()).isEqualTo(this.outcome1);\n\t\tconditionAndOutcome = iterator.next();\n\t\tassertThat(conditionAndOutcome.getCondition()).isEqualTo(this.condition2);\n\t\tassertThat(conditionAndOutcome.getOutcome()).isEqualTo(this.outcome2);\n\t\tassertThat(iterator.hasNext()).isFalse();\n\t\titerator = map.get("b").iterator();\n\t\tconditionAndOutcome = iterator.next();\n\t\tassertThat(conditionAndOutcome.getCondition()).isEqualTo(this.condition3);\n\t\tassertThat(conditionAndOutcome.getOutcome()).isEqualTo(this.outcome3);\n\t\tassertThat(iterator.hasNext()).isFalse();\n\t}\n\n\t@Test\n\tpublic void fullMatch() {\n\t\tprepareMatches(true, true, true);\n\t\tassertThat(this.report.getConditionAndOutcomesBySource().get("a").isFullMatch())\n\t\t\t\t.isTrue();\n\t}\n\n\t@Test\n\tpublic void notFullMatch() {\n\t\tprepareMatches(true, false, true);\n\t\tassertThat(this.report.getConditionAndOutcomesBySource().get("a").isFullMatch())\n\t\t\t\t.isFalse();\n\t}\n\n\tprivate void prepareMatches(boolean m1, boolean m2, boolean m3) {\n\t\tthis.outcome1 = new ConditionOutcome(m1, "m1");\n\t\tthis.outcome2 = new ConditionOutcome(m2, "m2");\n\t\tthis.outcome3 = new ConditionOutcome(m3, "m3");\n\t\tthis.report.recordConditionEvaluation("a", this.condition1, this.outcome1);\n\t\tthis.report.recordConditionEvaluation("a", this.condition2, this.outcome2);\n\t\tthis.report.recordConditionEvaluation("a", this.condition3, this.outcome3);\n\t}\n\n\t@Test\n\t@SuppressWarnings("resource")\n\tpublic void springBootConditionPopulatesReport() {\n\t\tConditionEvaluationReport report = ConditionEvaluationReport.get(\n\t\t\t\tnew AnnotationConfigApplicationContext(Config.class).getBeanFactory());\n\t\tassertThat(report.getConditionAndOutcomesBySource().size()).isNotEqualTo(0);\n\t}\n\n\t@Test\n\tpublic void testDuplicateConditionAndOutcomes() {\n\t\tConditionAndOutcome outcome1 = new ConditionAndOutcome(this.condition1,\n\t\t\t\tnew ConditionOutcome(true, "Message 1"));\n\t\tConditionAndOutcome outcome2 = new ConditionAndOutcome(this.condition2,\n\t\t\t\tnew ConditionOutcome(true, "Message 2"));\n\t\tConditionAndOutcome outcome3 = new ConditionAndOutcome(this.condition3,\n\t\t\t\tnew ConditionOutcome(true, "Message 2"));\n\t\tassertThat(outcome1).isEqualTo(outcome1);\n\t\tassertThat(outcome1).isNotEqualTo(outcome2);\n\t\tassertThat(outcome2).isEqualTo(outcome3);\n\t\tConditionAndOutcomes outcomes = new ConditionAndOutcomes();\n\t\toutcomes.add(this.condition1, new ConditionOutcome(true, "Message 1"));\n\t\toutcomes.add(this.condition2, new ConditionOutcome(true, "Message 2"));\n\t\toutcomes.add(this.condition3, new ConditionOutcome(true, "Message 2"));\n\t\tassertThat(getNumberOfOutcomes(outcomes)).isEqualTo(2);\n\t}\n\n\t@Test\n\tpublic void duplicateOutcomes() {\n\t\tAnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(\n\t\t\t\tDuplicateConfig.class);\n\t\tConditionEvaluationReport report = ConditionEvaluationReport\n\t\t\t\t.get(context.getBeanFactory());\n\t\tString autoconfigKey = MultipartAutoConfiguration.class.getName();\n\t\tConditionAndOutcomes outcomes = report.getConditionAndOutcomesBySource()\n\t\t\t\t.get(autoconfigKey);\n\t\tassertThat(outcomes).isNotEqualTo(nullValue());\n\t\tassertThat(getNumberOfOutcomes(outcomes)).isEqualTo(2);\n\t\tList<String> messages = new ArrayList<>();\n\t\tfor (ConditionAndOutcome outcome : outcomes) {\n\t\t\tmessages.add(outcome.getOutcome().getMessage());\n\t\t}\n\t\tassertThat(messages).areAtLeastOne(\n\t\t\t\tMatched.by(containsString("@ConditionalOnClass found required classes "\n\t\t\t\t\t\t+ "\'javax.servlet.Servlet\', \'org.springframework.web.multipart."\n\t\t\t\t\t\t+ "support.StandardServletMultipartResolver\', "\n\t\t\t\t\t\t+ "\'javax.servlet.MultipartConfigElement\'")));\n\t\tcontext.close();\n\t}\n\n\t@Test\n\tpublic void negativeOuterPositiveInnerBean() {\n\t\tAnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n\t\tTestPropertyValues.of("test.present=true").applyTo(context);\n\t\tcontext.register(NegativeOuterConfig.class);\n\t\tcontext.refresh();\n\t\tConditionEvaluationReport report = ConditionEvaluationReport\n\t\t\t\t.get(context.getBeanFactory());\n\t\tMap<String, ConditionAndOutcomes> sourceOutcomes = report\n\t\t\t\t.getConditionAndOutcomesBySource();\n\t\tassertThat(context.containsBean("negativeOuterPositiveInnerBean")).isFalse();\n\t\tString negativeConfig = NegativeOuterConfig.class.getName();\n\t\tassertThat(sourceOutcomes.get(negativeConfig).isFullMatch()).isFalse();\n\t\tString positiveConfig = NegativeOuterConfig.PositiveInnerConfig.class.getName();\n\t\tassertThat(sourceOutcomes.get(positiveConfig).isFullMatch()).isFalse();\n\t}\n\n\t@Test\n\tpublic void reportWhenSameShortNamePresentMoreThanOnceShouldUseFullyQualifiedName() {\n\t\tAnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n\t\tcontext.register(WebMvcAutoConfiguration.class,\n\t\t\t\torg.springframework.boot.autoconfigure.condition.config.first.SampleAutoConfiguration.class,\n\t\t\t\torg.springframework.boot.autoconfigure.condition.config.second.SampleAutoConfiguration.class);\n\t\tcontext.refresh();\n\t\tConditionEvaluationReport report = ConditionEvaluationReport\n\t\t\t\t.get(context.getBeanFactory());\n\t\tassertThat(report.getConditionAndOutcomesBySource()).containsKeys(\n\t\t\t\t"org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration",\n\t\t\t\t"org.springframework.boot.autoconfigure.condition.config.first.SampleAutoConfiguration",\n\t\t\t\t"org.springframework.boot.autoconfigure.condition.config.second.SampleAutoConfiguration");\n\t\tcontext.close();\n\t}\n\n\t@Test\n\tpublic void reportMessageWhenSameShortNamePresentMoreThanOnceShouldUseFullyQualifiedName() {\n\t\tAnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n\t\tcontext.register(WebMvcAutoConfiguration.class,\n\t\t\t\torg.springframework.boot.autoconfigure.condition.config.first.SampleAutoConfiguration.class,\n\t\t\t\torg.springframework.boot.autoconfigure.condition.config.second.SampleAutoConfiguration.class);\n\t\tcontext.refresh();\n\t\tConditionEvaluationReport report = ConditionEvaluationReport\n\t\t\t\t.get(context.getBeanFactory());\n\t\tString reportMessage = new ConditionEvaluationReportMessage(report).toString();\n\t\tassertThat(reportMessage).contains("WebMvcAutoConfiguration",\n\t\t\t\t"org.springframework.boot.autoconfigure.condition.config.first.SampleAutoConfiguration",\n\t\t\t\t"org.springframework.boot.autoconfigure.condition.config.second.SampleAutoConfiguration");\n\t\tassertThat(reportMessage).doesNotContain(\n\t\t\t\t"org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration");\n\t\tcontext.close();\n\t}\n\n\tprivate int getNumberOfOutcomes(ConditionAndOutcomes outcomes) {\n\t\tIterator<ConditionAndOutcome> iterator = outcomes.iterator();\n\t\tint numberOfOutcomesAdded = 0;\n\t\twhile (iterator.hasNext()) {\n\t\t\tnumberOfOutcomesAdded++;\n\t\t\titerator.next();\n\t\t}\n\t\treturn numberOfOutcomesAdded;\n\t}\n\n\t@Configuration\n\t@Import(WebMvcAutoConfiguration.class)\n\tstatic class Config {\n\n\t}\n\n\t@Configuration\n\t@Import(MultipartAutoConfiguration.class)\n\tstatic class DuplicateConfig {\n\n\t}\n\n\t@Configuration\n\t@Conditional({ ConditionEvaluationReportTests.MatchParseCondition.class,\n\t\t\tConditionEvaluationReportTests.NoMatchBeanCondition.class })\n\tpublic static class NegativeOuterConfig {\n\n\t\t@Configuration\n\t\t@Conditional({ ConditionEvaluationReportTests.MatchParseCondition.class })\n\t\tpublic static class PositiveInnerConfig {\n\n\t\t\t@Bean\n\t\t\tpublic String negativeOuterPositiveInnerBean() {\n\t\t\t\treturn "negativeOuterPositiveInnerBean";\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tstatic class TestMatchCondition extends SpringBootCondition\n\t\t\timplements ConfigurationCondition {\n\n\t\tprivate final ConfigurationPhase phase;\n\n\t\tprivate final boolean match;\n\n\t\tTestMatchCondition(ConfigurationPhase phase, boolean match) {\n\t\t\tthis.phase = phase;\n\t\t\tthis.match = match;\n\t\t}\n\n\t\t@Override\n\t\tpublic ConfigurationPhase getConfigurationPhase() {\n\t\t\treturn this.phase;\n\t\t}\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\treturn new ConditionOutcome(this.match, ClassUtils.getShortName(getClass()));\n\t\t}\n\n\t}\n\n\tstatic class MatchParseCondition extends TestMatchCondition {\n\n\t\tMatchParseCondition() {\n\t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION, true);\n\t\t}\n\n\t}\n\n\tstatic class MatchBeanCondition extends TestMatchCondition {\n\n\t\tMatchBeanCondition() {\n\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN, true);\n\t\t}\n\n\t}\n\n\tstatic class NoMatchParseCondition extends TestMatchCondition {\n\n\t\tNoMatchParseCondition() {\n\t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION, false);\n\t\t}\n\n\t}\n\n\tstatic class NoMatchBeanCondition extends TestMatchCondition {\n\n\t\tNoMatchBeanCondition() {\n\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN, false);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.beans.factory.support.DefaultListableBeanFactory;\nimport org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport.ConditionAndOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport.ConditionAndOutcomes;\nimport org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportMessage;\nimport org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration;\nimport org.springframework.boot.test.util.TestPropertyValues;\nimport org.springframework.boot.testsupport.assertj.Matched;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Condition;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.ConfigurationCondition;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.util.ClassUtils;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.hamcrest.Matchers.containsString;\nimport static org.hamcrest.Matchers.nullValue;\n\n/**\n * Tests for {@link ConditionEvaluationReport}.\n *\n * @author Greg Turnquist\n * @author Phillip Webb\n */\npublic class ConditionEvaluationReportTests {\n\n\tprivate DefaultListableBeanFactory beanFactory;\n\n\tprivate ConditionEvaluationReport report;\n\n\t@Mock\n\tprivate Condition condition1;\n\n\t@Mock\n\tprivate Condition condition2;\n\n\t@Mock\n\tprivate Condition condition3;\n\n\tprivate ConditionOutcome outcome1;\n\n\tprivate ConditionOutcome outcome2;\n\n\tprivate ConditionOutcome outcome3;\n\n\t@Before\n\tpublic void setup() {\n\t\tMockitoAnnotations.initMocks(this);\n\t\tthis.beanFactory = new DefaultListableBeanFactory();\n\t\tthis.report = ConditionEvaluationReport.get(this.beanFactory);\n\t}\n\n\t@Test\n\tpublic void get() {\n\t\tassertThat(this.report).isNotEqualTo(nullValue());\n\t\tassertThat(this.report).isSameAs(ConditionEvaluationReport.get(this.beanFactory));\n\t}\n\n\t@Test\n\tpublic void parent() {\n\t\tthis.beanFactory.setParentBeanFactory(new DefaultListableBeanFactory());\n\t\tConditionEvaluationReport.get((ConfigurableListableBeanFactory) this.beanFactory\n\t\t\t\t.getParentBeanFactory());\n\t\tassertThat(this.report).isSameAs(ConditionEvaluationReport.get(this.beanFactory));\n\t\tassertThat(this.report).isNotEqualTo(nullValue());\n\t\tassertThat(this.report.getParent()).isNotEqualTo(nullValue());\n\t\tConditionEvaluationReport.get((ConfigurableListableBeanFactory) this.beanFactory\n\t\t\t\t.getParentBeanFactory());\n\t\tassertThat(this.report).isSameAs(ConditionEvaluationReport.get(this.beanFactory));\n\t\tassertThat(this.report.getParent()).isSameAs(ConditionEvaluationReport\n\t\t\t\t.get((ConfigurableListableBeanFactory) this.beanFactory\n\t\t\t\t\t\t.getParentBeanFactory()));\n\t}\n\n\t@Test\n\tpublic void parentBottomUp() {\n\t\tthis.beanFactory = new DefaultListableBeanFactory(); // NB: overrides setup\n\t\tthis.beanFactory.setParentBeanFactory(new DefaultListableBeanFactory());\n\t\tConditionEvaluationReport.get((ConfigurableListableBeanFactory) this.beanFactory\n\t\t\t\t.getParentBeanFactory());\n\t\tthis.report = ConditionEvaluationReport.get(this.beanFactory);\n\t\tassertThat(this.report).isNotNull();\n\t\tassertThat(this.report).isNotSameAs(this.report.getParent());\n\t\tassertThat(this.report.getParent()).isNotNull();\n\t\tassertThat(this.report.getParent().getParent()).isNull();\n\t}\n\n\t@Test\n\tpublic void recordConditionEvaluations() {\n\t\tthis.outcome1 = new ConditionOutcome(false, "m1");\n\t\tthis.outcome2 = new ConditionOutcome(false, "m2");\n\t\tthis.outcome3 = new ConditionOutcome(false, "m3");\n\t\tthis.report.recordConditionEvaluation("a", this.condition1, this.outcome1);\n\t\tthis.report.recordConditionEvaluation("a", this.condition2, this.outcome2);\n\t\tthis.report.recordConditionEvaluation("b", this.condition3, this.outcome3);\n\t\tMap<String, ConditionAndOutcomes> map = this.report\n\t\t\t\t.getConditionAndOutcomesBySource();\n\t\tassertThat(map.size()).isEqualTo(2);\n\t\tIterator<ConditionAndOutcome> iterator = map.get("a").iterator();\n\n\t\tConditionAndOutcome conditionAndOutcome = iterator.next();\n\t\tassertThat(conditionAndOutcome.getCondition()).isEqualTo(this.condition1);\n\t\tassertThat(conditionAndOutcome.getOutcome()).isEqualTo(this.outcome1);\n\n\t\tconditionAndOutcome = iterator.next();\n\t\tassertThat(conditionAndOutcome.getCondition()).isEqualTo(this.condition2);\n\t\tassertThat(conditionAndOutcome.getOutcome()).isEqualTo(this.outcome2);\n\t\tassertThat(iterator.hasNext()).isFalse();\n\n\t\titerator = map.get("b").iterator();\n\t\tconditionAndOutcome = iterator.next();\n\t\tassertThat(conditionAndOutcome.getCondition()).isEqualTo(this.condition3);\n\t\tassertThat(conditionAndOutcome.getOutcome()).isEqualTo(this.outcome3);\n\t\tassertThat(iterator.hasNext()).isFalse();\n\t}\n\n\t@Test\n\tpublic void fullMatch() {\n\t\tprepareMatches(true, true, true);\n\t\tassertThat(this.report.getConditionAndOutcomesBySource().get("a").isFullMatch())\n\t\t\t\t.isTrue();\n\t}\n\n\t@Test\n\tpublic void notFullMatch() {\n\t\tprepareMatches(true, false, true);\n\t\tassertThat(this.report.getConditionAndOutcomesBySource().get("a").isFullMatch())\n\t\t\t\t.isFalse();\n\t}\n\n\tprivate void prepareMatches(boolean m1, boolean m2, boolean m3) {\n\t\tthis.outcome1 = new ConditionOutcome(m1, "m1");\n\t\tthis.outcome2 = new ConditionOutcome(m2, "m2");\n\t\tthis.outcome3 = new ConditionOutcome(m3, "m3");\n\t\tthis.report.recordConditionEvaluation("a", this.condition1, this.outcome1);\n\t\tthis.report.recordConditionEvaluation("a", this.condition2, this.outcome2);\n\t\tthis.report.recordConditionEvaluation("a", this.condition3, this.outcome3);\n\t}\n\n\t@Test\n\t@SuppressWarnings("resource")\n\tpublic void springBootConditionPopulatesReport() {\n\t\tConditionEvaluationReport report = ConditionEvaluationReport.get(\n\t\t\t\tnew AnnotationConfigApplicationContext(Config.class).getBeanFactory());\n\t\tassertThat(report.getConditionAndOutcomesBySource().size()).isNotEqualTo(0);\n\t}\n\n\t@Test\n\tpublic void testDuplicateConditionAndOutcomes() {\n\t\tConditionAndOutcome outcome1 = new ConditionAndOutcome(this.condition1,\n\t\t\t\tnew ConditionOutcome(true, "Message 1"));\n\t\tConditionAndOutcome outcome2 = new ConditionAndOutcome(this.condition2,\n\t\t\t\tnew ConditionOutcome(true, "Message 2"));\n\t\tConditionAndOutcome outcome3 = new ConditionAndOutcome(this.condition3,\n\t\t\t\tnew ConditionOutcome(true, "Message 2"));\n\n\t\tassertThat(outcome1).isEqualTo(outcome1);\n\t\tassertThat(outcome1).isNotEqualTo(outcome2);\n\t\tassertThat(outcome2).isEqualTo(outcome3);\n\n\t\tConditionAndOutcomes outcomes = new ConditionAndOutcomes();\n\t\toutcomes.add(this.condition1, new ConditionOutcome(true, "Message 1"));\n\t\toutcomes.add(this.condition2, new ConditionOutcome(true, "Message 2"));\n\t\toutcomes.add(this.condition3, new ConditionOutcome(true, "Message 2"));\n\n\t\tassertThat(getNumberOfOutcomes(outcomes)).isEqualTo(2);\n\t}\n\n\t@Test\n\tpublic void duplicateOutcomes() {\n\t\tAnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(\n\t\t\t\tDuplicateConfig.class);\n\t\tConditionEvaluationReport report = ConditionEvaluationReport\n\t\t\t\t.get(context.getBeanFactory());\n\t\tString autoconfigKey = MultipartAutoConfiguration.class.getName();\n\n\t\tConditionAndOutcomes outcomes = report.getConditionAndOutcomesBySource()\n\t\t\t\t.get(autoconfigKey);\n\t\tassertThat(outcomes).isNotEqualTo(nullValue());\n\t\tassertThat(getNumberOfOutcomes(outcomes)).isEqualTo(2);\n\n\t\tList<String> messages = new ArrayList<>();\n\t\tfor (ConditionAndOutcome outcome : outcomes) {\n\t\t\tmessages.add(outcome.getOutcome().getMessage());\n\t\t}\n\t\tassertThat(messages).areAtLeastOne(\n\t\t\t\tMatched.by(containsString("@ConditionalOnClass found required classes "\n\t\t\t\t\t\t+ "\'javax.servlet.Servlet\', \'org.springframework.web.multipart."\n\t\t\t\t\t\t+ "support.StandardServletMultipartResolver\', "\n\t\t\t\t\t\t+ "\'javax.servlet.MultipartConfigElement\'")));\n\t\tcontext.close();\n\t}\n\n\t@Test\n\tpublic void negativeOuterPositiveInnerBean() {\n\t\tAnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n\t\tTestPropertyValues.of("test.present=true").applyTo(context);\n\t\tcontext.register(NegativeOuterConfig.class);\n\t\tcontext.refresh();\n\t\tConditionEvaluationReport report = ConditionEvaluationReport\n\t\t\t\t.get(context.getBeanFactory());\n\t\tMap<String, ConditionAndOutcomes> sourceOutcomes = report\n\t\t\t\t.getConditionAndOutcomesBySource();\n\t\tassertThat(context.containsBean("negativeOuterPositiveInnerBean")).isFalse();\n\t\tString negativeConfig = NegativeOuterConfig.class.getName();\n\t\tassertThat(sourceOutcomes.get(negativeConfig).isFullMatch()).isFalse();\n\t\tString positiveConfig = NegativeOuterConfig.PositiveInnerConfig.class.getName();\n\t\tassertThat(sourceOutcomes.get(positiveConfig).isFullMatch()).isFalse();\n\t}\n\n\t@Test\n\tpublic void reportWhenSameShortNamePresentMoreThanOnceShouldUseFullyQualifiedName() {\n\t\tAnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n\t\tcontext.register(WebMvcAutoConfiguration.class,\n\t\t\t\torg.springframework.boot.autoconfigure.condition.config.first.SampleAutoConfiguration.class,\n\t\t\t\torg.springframework.boot.autoconfigure.condition.config.second.SampleAutoConfiguration.class);\n\t\tcontext.refresh();\n\t\tConditionEvaluationReport report = ConditionEvaluationReport\n\t\t\t\t.get(context.getBeanFactory());\n\t\tassertThat(report.getConditionAndOutcomesBySource())\n\t\t\t\t.containsKeys("org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration",\n\t\t\t\t\t\t"org.springframework.boot.autoconfigure.condition.config.first.SampleAutoConfiguration",\n\t\t\t\t\t\t"org.springframework.boot.autoconfigure.condition.config.second.SampleAutoConfiguration");\n\t}\n\n\t@Test\n\tpublic void reportMessageWhenSameShortNamePresentMoreThanOnceShouldUseFullyQualifiedName() {\n\t\tAnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n\t\tcontext.register(WebMvcAutoConfiguration.class,\n\t\t\t\torg.springframework.boot.autoconfigure.condition.config.first.SampleAutoConfiguration.class,\n\t\t\t\torg.springframework.boot.autoconfigure.condition.config.second.SampleAutoConfiguration.class);\n\t\tcontext.refresh();\n\t\tConditionEvaluationReport report = ConditionEvaluationReport\n\t\t\t\t.get(context.getBeanFactory());\n\t\tString reportMessage = new ConditionEvaluationReportMessage(report).toString();\n\t\tassertThat(reportMessage)\n\t\t\t\t.contains("WebMvcAutoConfiguration", "org.springframework.boot.autoconfigure.condition.config.first.SampleAutoConfiguration",\n\t\t\t\t\t\t"org.springframework.boot.autoconfigure.condition.config.second.SampleAutoConfiguration");\n\t\tassertThat(reportMessage).doesNotContain("org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration");\n\t}\n\n\tprivate int getNumberOfOutcomes(ConditionAndOutcomes outcomes) {\n\t\tIterator<ConditionAndOutcome> iterator = outcomes.iterator();\n\t\tint numberOfOutcomesAdded = 0;\n\t\twhile (iterator.hasNext()) {\n\t\t\tnumberOfOutcomesAdded++;\n\t\t\titerator.next();\n\t\t}\n\t\treturn numberOfOutcomesAdded;\n\t}\n\n\t@Configuration\n\t@Import(WebMvcAutoConfiguration.class)\n\tstatic class Config {\n\n\t}\n\n\t@Configuration\n\t@Import(MultipartAutoConfiguration.class)\n\tstatic class DuplicateConfig {\n\n\t}\n\n\t@Configuration\n\t@Conditional({ConditionEvaluationReportTests.MatchParseCondition.class,\n\t\t\tConditionEvaluationReportTests.NoMatchBeanCondition.class})\n\tpublic static class NegativeOuterConfig {\n\n\t\t@Configuration\n\t\t@Conditional({ConditionEvaluationReportTests.MatchParseCondition.class})\n\t\tpublic static class PositiveInnerConfig {\n\n\t\t\t@Bean\n\t\t\tpublic String negativeOuterPositiveInnerBean() {\n\t\t\t\treturn "negativeOuterPositiveInnerBean";\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tstatic class TestMatchCondition extends SpringBootCondition\n\t\t\timplements ConfigurationCondition {\n\n\t\tprivate final ConfigurationPhase phase;\n\n\t\tprivate final boolean match;\n\n\t\tTestMatchCondition(ConfigurationPhase phase, boolean match) {\n\t\t\tthis.phase = phase;\n\t\t\tthis.match = match;\n\t\t}\n\n\t\t@Override\n\t\tpublic ConfigurationPhase getConfigurationPhase() {\n\t\t\treturn this.phase;\n\t\t}\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\treturn new ConditionOutcome(this.match, ClassUtils.getShortName(getClass()));\n\t\t}\n\n\t}\n\n\tstatic class MatchParseCondition extends TestMatchCondition {\n\n\t\tMatchParseCondition() {\n\t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION, true);\n\t\t}\n\n\t}\n\n\tstatic class MatchBeanCondition extends TestMatchCondition {\n\n\t\tMatchBeanCondition() {\n\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN, true);\n\t\t}\n\n\t}\n\n\tstatic class NoMatchParseCondition extends TestMatchCondition {\n\n\t\tNoMatchParseCondition() {\n\t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION, false);\n\t\t}\n\n\t}\n\n\tstatic class NoMatchBeanCondition extends TestMatchCondition {\n\n\t\tNoMatchBeanCondition() {\n\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN, false);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
