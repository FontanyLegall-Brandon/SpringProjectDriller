{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2012-2014 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.jackson;\n+\n+import java.util.Collection;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.springframework.beans.factory.BeanFactoryUtils;\n+import org.springframework.beans.factory.ListableBeanFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnJava;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnJava.JavaVersion;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.web.HttpMapperProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Primary;\n+\n+import com.fasterxml.jackson.databind.Module;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.datatype.joda.JodaModule;\n+import com.fasterxml.jackson.datatype.jsr310.JSR310Module;\n+\n+/**\n+ * Auto configuration for Jackson. The following auto-configuration will get applied:\n+ * <ul>\n+ * <li>an {@link ObjectMapper} in case none is already configured.</li>\n+ * <li>the {@link JodaModule} registered if it\'s on the classpath.</li>\n+ * <li>the {@link JSR310Module} registered if it\'s on the classpath and the application is\n+ * running on Java 8 or better.</li>\n+ * <li>auto-registration for all {@link Module} beans with all {@link ObjectMapper} beans\n+ * (including the defaulted ones).</li>\n+ * </ul>\n+ *\n+ * @author Oliver Gierke\n+ * @since 1.1.0\n+ */\n+@Configuration\n+@ConditionalOnClass(ObjectMapper.class)\n+@EnableConfigurationProperties(HttpMapperProperties.class)\n+public class JacksonAutoConfiguration {\n+\n+\t@Autowired\n+\tprivate HttpMapperProperties properties = new HttpMapperProperties();\n+\n+\t@Autowired\n+\tprivate ListableBeanFactory beanFactory;\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\t@Primary\n+\tpublic ObjectMapper jacksonObjectMapper() {\n+\n+\t\tObjectMapper objectMapper = new ObjectMapper();\n+\n+\t\tif (this.properties.isJsonSortKeys()) {\n+\t\t\tobjectMapper.configure(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, true);\n+\t\t}\n+\n+\t\treturn objectMapper;\n+\t}\n+\n+\t@PostConstruct\n+\tpublic void init() {\n+\n+\t\tCollection<ObjectMapper> mappers = BeanFactoryUtils\n+\t\t\t\t.beansOfTypeIncludingAncestors(this.beanFactory, ObjectMapper.class)\n+\t\t\t\t.values();\n+\t\tCollection<Module> modules = BeanFactoryUtils.beansOfTypeIncludingAncestors(\n+\t\t\t\tthis.beanFactory, Module.class).values();\n+\n+\t\tfor (ObjectMapper mapper : mappers) {\n+\t\t\tmapper.registerModules(modules);\n+\t\t}\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnClass(JodaModule.class)\n+\tstatic class JodaModuleAutoConfiguration {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean\n+\t\tJodaModule jacksonJodaModule() {\n+\t\t\treturn new JodaModule();\n+\t\t}\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnJava(JavaVersion.EIGHT)\n+\t@ConditionalOnClass(JSR310Module.class)\n+\tstatic class Jsr310ModuleAutoConfiguration {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean\n+\t\tJSR310Module jacksonJsr310Module() {\n+\t\t\treturn new JSR310Module();\n+\t\t}\n+\t}\n+}\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jackson;\n\nimport java.util.Collection;\n\nimport javax.annotation.PostConstruct;\n\nimport org.springframework.beans.factory.BeanFactoryUtils;\nimport org.springframework.beans.factory.ListableBeanFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnJava;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnJava.JavaVersion;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.web.HttpMapperProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\n\nimport com.fasterxml.jackson.databind.Module;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport com.fasterxml.jackson.datatype.joda.JodaModule;\nimport com.fasterxml.jackson.datatype.jsr310.JSR310Module;\n\n/**\n * Auto configuration for Jackson. The following auto-configuration will get applied:\n * <ul>\n * <li>an {@link ObjectMapper} in case none is already configured.</li>\n * <li>the {@link JodaModule} registered if it\'s on the classpath.</li>\n * <li>the {@link JSR310Module} registered if it\'s on the classpath and the application is\n * running on Java 8 or better.</li>\n * <li>auto-registration for all {@link Module} beans with all {@link ObjectMapper} beans\n * (including the defaulted ones).</li>\n * </ul>\n *\n * @author Oliver Gierke\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass(ObjectMapper.class)\n@EnableConfigurationProperties(HttpMapperProperties.class)\npublic class JacksonAutoConfiguration {\n\n\t@Autowired\n\tprivate HttpMapperProperties properties = new HttpMapperProperties();\n\n\t@Autowired\n\tprivate ListableBeanFactory beanFactory;\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@Primary\n\tpublic ObjectMapper jacksonObjectMapper() {\n\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\n\t\tif (this.properties.isJsonSortKeys()) {\n\t\t\tobjectMapper.configure(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, true);\n\t\t}\n\n\t\treturn objectMapper;\n\t}\n\n\t@PostConstruct\n\tpublic void init() {\n\n\t\tCollection<ObjectMapper> mappers = BeanFactoryUtils\n\t\t\t\t.beansOfTypeIncludingAncestors(this.beanFactory, ObjectMapper.class)\n\t\t\t\t.values();\n\t\tCollection<Module> modules = BeanFactoryUtils.beansOfTypeIncludingAncestors(\n\t\t\t\tthis.beanFactory, Module.class).values();\n\n\t\tfor (ObjectMapper mapper : mappers) {\n\t\t\tmapper.registerModules(modules);\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(JodaModule.class)\n\tstatic class JodaModuleAutoConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tJodaModule jacksonJodaModule() {\n\t\t\treturn new JodaModule();\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnJava(JavaVersion.EIGHT)\n\t@ConditionalOnClass(JSR310Module.class)\n\tstatic class Jsr310ModuleAutoConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tJSR310Module jacksonJsr310Module() {\n\t\t\treturn new JSR310Module();\n\t\t}\n\t}\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
