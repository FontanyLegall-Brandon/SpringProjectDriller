{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBeanWithFilteredClasspathTests.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2012-2016 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.condition;\n+\n+import org.junit.After;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import org.springframework.boot.testutil.ClassPathExclusions;\n+import org.springframework.boot.testutil.FilteredClassPathRunner;\n+import org.springframework.cache.caffeine.CaffeineCacheManager;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+/**\n+ * Tests {@link ConditionalOnMissingBean} with filtered classpath.\n+ *\n+ * @author Stephane Nicoll\n+ * @author Andy Wilkinson\n+ */\n+@RunWith(FilteredClassPathRunner.class)\n+@ClassPathExclusions("spring-context-support-*.jar")\n+public class ConditionalOnMissingBeanWithFilteredClasspathTests {\n+\n+\tprivate final AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n+\n+\t@After\n+\tpublic void closeContext() {\n+\t\tthis.context.close();\n+\t}\n+\n+\t@Test\n+\tpublic void testNameOnMissingBeanTypeWithMissingImport() {\n+\t\tthis.context.register(OnBeanTypeConfiguration.class);\n+\t\tthis.context.refresh();\n+\t\tassertThat(this.context.containsBean("foo")).isTrue();\n+\t}\n+\n+\n+\t@Configuration\n+\tstatic class OnBeanTypeConfiguration {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(type = "org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanWithFilteredClasspathTests.TestCacheManager")\n+\t\tpublic String foo() {\n+\t\t\treturn "foo";\n+\t\t}\n+\n+\t}\n+\n+\tstatic class TestCacheManager extends CaffeineCacheManager {\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport org.junit.After;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n\nimport org.springframework.boot.testutil.ClassPathExclusions;\nimport org.springframework.boot.testutil.FilteredClassPathRunner;\nimport org.springframework.cache.caffeine.CaffeineCacheManager;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests {@link ConditionalOnMissingBean} with filtered classpath.\n *\n * @author Stephane Nicoll\n * @author Andy Wilkinson\n */\n@RunWith(FilteredClassPathRunner.class)\n@ClassPathExclusions("spring-context-support-*.jar")\npublic class ConditionalOnMissingBeanWithFilteredClasspathTests {\n\n\tprivate final AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n\n\t@After\n\tpublic void closeContext() {\n\t\tthis.context.close();\n\t}\n\n\t@Test\n\tpublic void testNameOnMissingBeanTypeWithMissingImport() {\n\t\tthis.context.register(OnBeanTypeConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t}\n\n\n\t@Configuration\n\tstatic class OnBeanTypeConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(type = "org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanWithFilteredClasspathTests.TestCacheManager")\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\tstatic class TestCacheManager extends CaffeineCacheManager {\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
