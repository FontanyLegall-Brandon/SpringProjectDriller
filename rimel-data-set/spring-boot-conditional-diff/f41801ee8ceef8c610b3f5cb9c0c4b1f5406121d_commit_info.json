{'_old_path': PosixPath('spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/servlet/MockMvcAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/servlet/MockMvcAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -21,6 +21,7 @@ import java.util.List;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\n import org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\n import org.springframework.boot.autoconfigure.web.WebMvcProperties;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n@@ -45,7 +46,7 @@ import org.springframework.web.servlet.DispatcherServlet;\n  * @since 1.4.0\n  */\n @Configuration\n-@ConditionalOnWebApplication\n+@ConditionalOnWebApplication(type = Type.SERVLET)\n @AutoConfigureAfter(WebMvcAutoConfiguration.class)\n @EnableConfigurationProperties(WebMvcProperties.class)\n public class MockMvcAutoConfiguration {\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.test.autoconfigure.web.servlet;\n\nimport java.util.List;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.WebMvcProperties;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.test.web.servlet.DispatcherServletCustomizer;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.MockMvcBuilder;\nimport org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\nimport org.springframework.web.context.WebApplicationContext;\nimport org.springframework.web.servlet.DispatcherServlet;\n\n/**\n * Auto-configuration for {@link MockMvc}.\n *\n * @author Phillip Webb\n * @author Andy Wilkinson\n * @author Stephane Nicoll\n * @see AutoConfigureWebMvc\n * @since 1.4.0\n */\n@Configuration\n@ConditionalOnWebApplication(type = Type.SERVLET)\n@AutoConfigureAfter(WebMvcAutoConfiguration.class)\n@EnableConfigurationProperties(WebMvcProperties.class)\npublic class MockMvcAutoConfiguration {\n\n\tprivate final WebApplicationContext context;\n\n\tprivate final WebMvcProperties webMvcProperties;\n\n\tMockMvcAutoConfiguration(WebApplicationContext context,\n\t\t\tWebMvcProperties webMvcProperties) {\n\t\tthis.context = context;\n\t\tthis.webMvcProperties = webMvcProperties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(MockMvcBuilder.class)\n\tpublic DefaultMockMvcBuilder mockMvcBuilder(\n\t\t\tList<MockMvcBuilderCustomizer> customizers) {\n\t\tDefaultMockMvcBuilder builder = MockMvcBuilders.webAppContextSetup(this.context);\n\t\tbuilder.addDispatcherServletCustomizer(\n\t\t\t\tnew MockMvcDispatcherServletCustomizer(this.webMvcProperties));\n\t\tfor (MockMvcBuilderCustomizer customizer : customizers) {\n\t\t\tcustomizer.customize(builder);\n\t\t}\n\t\treturn builder;\n\t}\n\n\t@Bean\n\t@ConfigurationProperties(prefix = "spring.test.mockmvc")\n\tpublic SpringBootMockMvcBuilderCustomizer springBootMockMvcBuilderCustomizer() {\n\t\treturn new SpringBootMockMvcBuilderCustomizer(this.context);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic MockMvc mockMvc(MockMvcBuilder builder) {\n\t\treturn builder.build();\n\t}\n\n\tprivate static class MockMvcDispatcherServletCustomizer\n\t\t\timplements DispatcherServletCustomizer {\n\n\t\tprivate final WebMvcProperties webMvcProperties;\n\n\t\tMockMvcDispatcherServletCustomizer(WebMvcProperties webMvcProperties) {\n\t\t\tthis.webMvcProperties = webMvcProperties;\n\t\t}\n\n\t\t@Override\n\t\tpublic void customize(DispatcherServlet dispatcherServlet) {\n\t\t\tdispatcherServlet.setDispatchOptionsRequest(\n\t\t\t\t\tthis.webMvcProperties.isDispatchOptionsRequest());\n\t\t\tdispatcherServlet.setDispatchTraceRequest(\n\t\t\t\t\tthis.webMvcProperties.isDispatchTraceRequest());\n\t\t\tdispatcherServlet.setThrowExceptionIfNoHandlerFound(\n\t\t\t\t\tthis.webMvcProperties.isThrowExceptionIfNoHandlerFound());\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.test.autoconfigure.web.servlet;\n\nimport java.util.List;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.WebMvcProperties;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.test.web.servlet.DispatcherServletCustomizer;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.MockMvcBuilder;\nimport org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\nimport org.springframework.web.context.WebApplicationContext;\nimport org.springframework.web.servlet.DispatcherServlet;\n\n/**\n * Auto-configuration for {@link MockMvc}.\n *\n * @author Phillip Webb\n * @author Andy Wilkinson\n * @author Stephane Nicoll\n * @see AutoConfigureWebMvc\n * @since 1.4.0\n */\n@Configuration\n@ConditionalOnWebApplication\n@AutoConfigureAfter(WebMvcAutoConfiguration.class)\n@EnableConfigurationProperties(WebMvcProperties.class)\npublic class MockMvcAutoConfiguration {\n\n\tprivate final WebApplicationContext context;\n\n\tprivate final WebMvcProperties webMvcProperties;\n\n\tMockMvcAutoConfiguration(WebApplicationContext context,\n\t\t\tWebMvcProperties webMvcProperties) {\n\t\tthis.context = context;\n\t\tthis.webMvcProperties = webMvcProperties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(MockMvcBuilder.class)\n\tpublic DefaultMockMvcBuilder mockMvcBuilder(\n\t\t\tList<MockMvcBuilderCustomizer> customizers) {\n\t\tDefaultMockMvcBuilder builder = MockMvcBuilders.webAppContextSetup(this.context);\n\t\tbuilder.addDispatcherServletCustomizer(\n\t\t\t\tnew MockMvcDispatcherServletCustomizer(this.webMvcProperties));\n\t\tfor (MockMvcBuilderCustomizer customizer : customizers) {\n\t\t\tcustomizer.customize(builder);\n\t\t}\n\t\treturn builder;\n\t}\n\n\t@Bean\n\t@ConfigurationProperties(prefix = "spring.test.mockmvc")\n\tpublic SpringBootMockMvcBuilderCustomizer springBootMockMvcBuilderCustomizer() {\n\t\treturn new SpringBootMockMvcBuilderCustomizer(this.context);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic MockMvc mockMvc(MockMvcBuilder builder) {\n\t\treturn builder.build();\n\t}\n\n\tprivate static class MockMvcDispatcherServletCustomizer\n\t\t\timplements DispatcherServletCustomizer {\n\n\t\tprivate final WebMvcProperties webMvcProperties;\n\n\t\tMockMvcDispatcherServletCustomizer(WebMvcProperties webMvcProperties) {\n\t\t\tthis.webMvcProperties = webMvcProperties;\n\t\t}\n\n\t\t@Override\n\t\tpublic void customize(DispatcherServlet dispatcherServlet) {\n\t\t\tdispatcherServlet.setDispatchOptionsRequest(\n\t\t\t\t\tthis.webMvcProperties.isDispatchOptionsRequest());\n\t\t\tdispatcherServlet.setDispatchTraceRequest(\n\t\t\t\t\tthis.webMvcProperties.isDispatchTraceRequest());\n\t\t\tdispatcherServlet.setThrowExceptionIfNoHandlerFound(\n\t\t\t\t\tthis.webMvcProperties.isThrowExceptionIfNoHandlerFound());\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
