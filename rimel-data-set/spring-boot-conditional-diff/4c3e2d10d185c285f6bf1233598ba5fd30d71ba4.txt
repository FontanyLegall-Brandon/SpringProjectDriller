@@ -0,0 +1,66 @@
+
+
+package org.springframework.boot.actuate.autoconfigure.metrics.export.elastic;
+
+import io.micrometer.core.instrument.Clock;
+import io.micrometer.elastic.ElasticConfig;
+import io.micrometer.elastic.ElasticMeterRegistry;
+
+import org.springframework.boot.actuate.autoconfigure.metrics.CompositeMeterRegistryAutoConfiguration;
+import org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration;
+import org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration;
+import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.AutoConfigureBefore;
+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
+import org.springframework.boot.context.properties.EnableConfigurationProperties;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+
+@Configuration
+@AutoConfigureBefore({ CompositeMeterRegistryAutoConfiguration.class,
+		SimpleMetricsExportAutoConfiguration.class })
+@AutoConfigureAfter(MetricsAutoConfiguration.class)
+@ConditionalOnBean(Clock.class)
+@ConditionalOnClass(ElasticMeterRegistry.class)
+@ConditionalOnProperty(prefix = , name = , havingValue = , matchIfMissing = true)
+@EnableConfigurationProperties(ElasticProperties.class)
+public class ElasticMetricsExportAutoConfiguration {
+
+	@Bean
+	@ConditionalOnMissingBean
+	public ElasticConfig elasticConfig(ElasticProperties elasticProperties) {
+		return new ElasticPropertiesConfigAdapter(elasticProperties);
+	}
+
+	@Bean
+	@ConditionalOnMissingBean
+	public ElasticMeterRegistry elasticMeterRegistry(ElasticConfig elasticConfig,
+			Clock clock) {
+		return new ElasticMeterRegistry(elasticConfig, clock);
+	}
+
+}

