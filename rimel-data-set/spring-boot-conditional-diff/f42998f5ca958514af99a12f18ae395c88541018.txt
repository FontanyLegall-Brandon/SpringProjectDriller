@@ -30,18 +30,11 @@ import javax.servlet.http.HttpServletRequest;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
-import org.springframework.beans.BeansException;
 import org.springframework.beans.factory.BeanFactory;
-import org.springframework.beans.factory.BeanFactoryAware;
-import org.springframework.beans.factory.BeanFactoryUtils;
-import org.springframework.beans.factory.DisposableBean;
-import org.springframework.beans.factory.InitializingBean;
 import org.springframework.beans.factory.ListableBeanFactory;
 import org.springframework.beans.factory.NoSuchBeanDefinitionException;
 import org.springframework.beans.factory.ObjectProvider;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.beans.factory.support.BeanDefinitionRegistry;
-import org.springframework.beans.factory.support.RootBeanDefinition;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.AutoConfigureOrder;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
@@ -50,38 +43,27 @@ import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
-import org.springframework.boot.autoconfigure.validation.DelegatingValidator;
 import org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration;
 import org.springframework.boot.autoconfigure.web.ResourceProperties.Strategy;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.boot.web.filter.OrderedHiddenHttpMethodFilter;
 import org.springframework.boot.web.filter.OrderedHttpPutFormContentFilter;
 import org.springframework.boot.web.filter.OrderedRequestContextFilter;
-import org.springframework.context.ApplicationContext;
-import org.springframework.context.ApplicationContextAware;
 import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.ConditionContext;
-import org.springframework.context.annotation.Conditional;
 import org.springframework.context.annotation.Configuration;
-import org.springframework.context.annotation.ConfigurationCondition;
 import org.springframework.context.annotation.Import;
-import org.springframework.context.annotation.ImportBeanDefinitionRegistrar;
 import org.springframework.context.annotation.Primary;
 import org.springframework.core.Ordered;
 import org.springframework.core.convert.converter.Converter;
 import org.springframework.core.convert.converter.GenericConverter;
 import org.springframework.core.io.Resource;
-import org.springframework.core.type.AnnotatedTypeMetadata;
-import org.springframework.core.type.AnnotationMetadata;
 import org.springframework.format.Formatter;
 import org.springframework.format.FormatterRegistry;
 import org.springframework.format.datetime.DateFormatter;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.MediaType;
 import org.springframework.http.converter.HttpMessageConverter;
-import org.springframework.util.Assert;
 import org.springframework.util.ClassUtils;
-import org.springframework.util.ObjectUtils;
 import org.springframework.util.StringUtils;
 import org.springframework.validation.DefaultMessageCodesResolver;
 import org.springframework.validation.MessageCodesResolver;
@@ -169,7 +151,7 @@ public class WebMvcAutoConfiguration {
 	
 	
 	@Configuration
-	@Import({ EnableWebMvcConfiguration.class, MvcValidatorRegistrar.class })
+	@Import(EnableWebMvcConfiguration.class)
 	@EnableConfigurationProperties({ WebMvcProperties.class, ResourceProperties.class })
 	public static class WebMvcAutoConfigurationAdapter extends WebMvcConfigurerAdapter {
 
@@ -378,22 +360,21 @@ public class WebMvcAutoConfiguration {
 	 * Configuration equivalent to {@code @EnableWebMvc}.
 	 */
 	@Configuration
-	public static class EnableWebMvcConfiguration extends DelegatingWebMvcConfiguration
-			implements InitializingBean {
+	public static class EnableWebMvcConfiguration extends DelegatingWebMvcConfiguration {
 
 		private final WebMvcProperties mvcProperties;
 
-		private final ApplicationContext context;
+		private final ListableBeanFactory beanFactory;
 
 		private final WebMvcRegistrations mvcRegistrations;
 
 		public EnableWebMvcConfiguration(
 				ObjectProvider<WebMvcProperties> mvcPropertiesProvider,
 				ObjectProvider<WebMvcRegistrations> mvcRegistrationsProvider,
-				ApplicationContext context) {
+				ListableBeanFactory beanFactory) {
 			this.mvcProperties = mvcPropertiesProvider.getIfAvailable();
 			this.mvcRegistrations = mvcRegistrationsProvider.getIfUnique();
-			this.context = context;
+			this.beanFactory = beanFactory;
 		}
 
 		@Bean
@@ -424,9 +405,12 @@ public class WebMvcAutoConfiguration {
 
 		@Bean
 		@Override
-		@Conditional(DisableMvcValidatorCondition.class)
 		public Validator mvcValidator() {
-			return this.context.getBean(, Validator.class);
+			if (!ClassUtils.isPresent(,
+					getClass().getClassLoader())) {
+				return super.mvcValidator();
+			}
+			return WebMvcValidator.get(getApplicationContext(), getValidator());
 		}
 
 		@Override
@@ -441,7 +425,7 @@ public class WebMvcAutoConfiguration {
 		@Override
 		protected ConfigurableWebBindingInitializer getConfigurableWebBindingInitializer() {
 			try {
-				return this.context.getBean(ConfigurableWebBindingInitializer.class);
+				return this.beanFactory.getBean(ConfigurableWebBindingInitializer.class);
 			}
 			catch (NoSuchBeanDefinitionException ex) {
 				return super.getConfigurableWebBindingInitializer();
@@ -490,15 +474,6 @@ public class WebMvcAutoConfiguration {
 			return manager;
 		}
 
-		@Override
-		public void afterPropertiesSet() throws Exception {
-			Assert.state(getValidator() == null,
-					
-							+ 
-							+ 
-							+ );
-		}
-
 	}
 
 	@Configuration
@@ -626,130 +601,4 @@ public class WebMvcAutoConfiguration {
 
 	}
 
-	
-	static class DisableMvcValidatorCondition implements ConfigurationCondition {
-
-		@Override
-		public ConfigurationPhase getConfigurationPhase() {
-			return ConfigurationPhase.REGISTER_BEAN;
-		}
-
-		@Override
-		public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {
-			return false;
-		}
-
-	}
-
-	
-	static class MvcValidatorRegistrar
-			implements ImportBeanDefinitionRegistrar, BeanFactoryAware {
-
-		private static final String JSR303_VALIDATOR_CLASS = ;
-
-		private BeanFactory beanFactory;
-
-		@Override
-		public void setBeanFactory(BeanFactory beanFactory) throws BeansException {
-			this.beanFactory = beanFactory;
-		}
-
-		@Override
-		public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata,
-				BeanDefinitionRegistry registry) {
-			if (this.beanFactory instanceof ListableBeanFactory) {
-				registerOrAliasMvcValidator(registry,
-						(ListableBeanFactory) this.beanFactory);
-			}
-		}
-
-		private void registerOrAliasMvcValidator(BeanDefinitionRegistry registry,
-				ListableBeanFactory beanFactory) {
-			String[] validatorBeans = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(
-					beanFactory, Validator.class, false, false);
-			if (validatorBeans.length == 0) {
-				registerNewMvcValidator(registry, beanFactory);
-			}
-			else if (validatorBeans.length == 1) {
-				registry.registerAlias(validatorBeans[0], );
-			}
-			else {
-				if (!ObjectUtils.containsElement(validatorBeans, )) {
-					registerNewMvcValidator(registry, beanFactory);
-				}
-			}
-		}
-
-		private void registerNewMvcValidator(BeanDefinitionRegistry registry,
-				ListableBeanFactory beanFactory) {
-			RootBeanDefinition definition = new RootBeanDefinition();
-			definition.setBeanClass(getClass());
-			definition.setFactoryMethodName();
-			registry.registerBeanDefinition(, definition);
-		}
-
-		static Validator mvcValidator() {
-			Validator validator = new WebMvcConfigurationSupport().mvcValidator();
-			try {
-				if (ClassUtils.forName(JSR303_VALIDATOR_CLASS, null)
-						.isInstance(validator)) {
-					return new DelegatingWebMvcValidator(validator);
-				}
-			}
-			catch (Exception ex) {
-			}
-			return validator;
-		}
-
-	}
-
-	
-	static class DelegatingWebMvcValidator extends DelegatingValidator
-			implements ApplicationContextAware, InitializingBean, DisposableBean {
-
-		DelegatingWebMvcValidator(Validator targetValidator) {
-			super(targetValidator);
-		}
-
-		@Override
-		public void setApplicationContext(ApplicationContext applicationContext)
-				throws BeansException {
-			if (getDelegate() instanceof ApplicationContextAware) {
-				((ApplicationContextAware) getDelegate())
-						.setApplicationContext(applicationContext);
-			}
-		}
-
-		@Override
-		public void afterPropertiesSet() throws Exception {
-			if (getDelegate() instanceof InitializingBean) {
-				((InitializingBean) getDelegate()).afterPropertiesSet();
-			}
-		}
-
-		@Override
-		public void destroy() throws Exception {
-			if (getDelegate() instanceof DisposableBean) {
-				((DisposableBean) getDelegate()).destroy();
-			}
-		}
-
-	}
-
 }

