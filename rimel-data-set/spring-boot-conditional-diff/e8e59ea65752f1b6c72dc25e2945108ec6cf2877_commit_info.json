{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': "@@ -16,33 +16,70 @@\n \n package org.springframework.boot.autoconfigure.web;\n \n-import javax.servlet.MultipartConfigElement;\n-import javax.servlet.Servlet;\n-\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.embedded.EmbeddedWebApplicationContext;\n+import org.springframework.boot.context.embedded.MultipartConfigFactory;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.util.StringUtils;\n import org.springframework.web.multipart.support.StandardServletMultipartResolver;\n \n+import javax.servlet.MultipartConfigElement;\n+import javax.servlet.Servlet;\n+\n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for multi-part uploads. Adds a\n- * {@link StandardServletMultipartResolver} when a {@link MultipartConfigElement} bean is\n- * defined. The {@link EmbeddedWebApplicationContext} will associated the\n+ * {@link StandardServletMultipartResolver} if none is present, and adds a\n+ * {@link javax.servlet.MultipartConfigElement multipartConfigElement} if none is otherwise defined.\n+ * The {@link EmbeddedWebApplicationContext} will associate the\n  * {@link MultipartConfigElement} bean to any {@link Servlet} beans.\n- * \n+ * <p/>\n+ * The {@link javax.servlet.MultipartConfigElement} is a Servlet API that's used to configure how the container handles\n+ * file uploads. By default\n+ *\n  * @author Greg Turnquist\n+ * @author Josh Long\n  */\n @Configuration\n-@ConditionalOnClass({ Servlet.class, StandardServletMultipartResolver.class })\n-@ConditionalOnBean(MultipartConfigElement.class)\n+@ConditionalOnClass({Servlet.class, StandardServletMultipartResolver.class})\n+@EnableConfigurationProperties(MultipartProperties.class)\n public class MultipartAutoConfiguration {\n \n-\t@Bean\n-\tpublic StandardServletMultipartResolver multipartResolver() {\n-\t\treturn new StandardServletMultipartResolver();\n-\t}\n+    @Autowired\n+    private MultipartProperties multipartProperties = new MultipartProperties();\n+\n+    @Bean\n+    @ConditionalOnMissingBean\n+    public MultipartConfigElement multipartConfigElement() {\n+        MultipartConfigFactory factory = new MultipartConfigFactory();\n+\n+        if (StringUtils.hasText(this.multipartProperties.getFileSizeThreshold())) {\n+            factory.setFileSizeThreshold(this.multipartProperties.getFileSizeThreshold());\n+        }\n+\n+        if (StringUtils.hasText(this.multipartProperties.getLocation())) {\n+            factory.setLocation(this.multipartProperties.getLocation());\n+        }\n+\n+        if (StringUtils.hasText(this.multipartProperties.getMaxRequestSize())) {\n+            factory.setMaxRequestSize(this.multipartProperties.getMaxRequestSize());\n+        }\n+\n+        if (StringUtils.hasText(this.multipartProperties.getMaxFileSize())) {\n+            factory.setMaxFileSize(this.multipartProperties.getMaxFileSize());\n+        }\n+\n+        return factory.createMultipartConfig();\n+    }\n+\n \n+    @Bean\n+    @ConditionalOnMissingBean\n+    public StandardServletMultipartResolver multipartResolver() {\n+        return new StandardServletMultipartResolver();\n+    }\n }\n", 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.embedded.EmbeddedWebApplicationContext;\nimport org.springframework.boot.context.embedded.MultipartConfigFactory;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.multipart.support.StandardServletMultipartResolver;\n\nimport javax.servlet.MultipartConfigElement;\nimport javax.servlet.Servlet;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for multi-part uploads. Adds a\n * {@link StandardServletMultipartResolver} if none is present, and adds a\n * {@link javax.servlet.MultipartConfigElement multipartConfigElement} if none is otherwise defined.\n * The {@link EmbeddedWebApplicationContext} will associate the\n * {@link MultipartConfigElement} bean to any {@link Servlet} beans.\n * <p/>\n * The {@link javax.servlet.MultipartConfigElement} is a Servlet API that\'s used to configure how the container handles\n * file uploads. By default\n *\n * @author Greg Turnquist\n * @author Josh Long\n */\n@Configuration\n@ConditionalOnClass({Servlet.class, StandardServletMultipartResolver.class})\n@EnableConfigurationProperties(MultipartProperties.class)\npublic class MultipartAutoConfiguration {\n\n    @Autowired\n    private MultipartProperties multipartProperties = new MultipartProperties();\n\n    @Bean\n    @ConditionalOnMissingBean\n    public MultipartConfigElement multipartConfigElement() {\n        MultipartConfigFactory factory = new MultipartConfigFactory();\n\n        if (StringUtils.hasText(this.multipartProperties.getFileSizeThreshold())) {\n            factory.setFileSizeThreshold(this.multipartProperties.getFileSizeThreshold());\n        }\n\n        if (StringUtils.hasText(this.multipartProperties.getLocation())) {\n            factory.setLocation(this.multipartProperties.getLocation());\n        }\n\n        if (StringUtils.hasText(this.multipartProperties.getMaxRequestSize())) {\n            factory.setMaxRequestSize(this.multipartProperties.getMaxRequestSize());\n        }\n\n        if (StringUtils.hasText(this.multipartProperties.getMaxFileSize())) {\n            factory.setMaxFileSize(this.multipartProperties.getMaxFileSize());\n        }\n\n        return factory.createMultipartConfig();\n    }\n\n\n    @Bean\n    @ConditionalOnMissingBean\n    public StandardServletMultipartResolver multipartResolver() {\n        return new StandardServletMultipartResolver();\n    }\n}\n', 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web;\n\nimport javax.servlet.MultipartConfigElement;\nimport javax.servlet.Servlet;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.context.embedded.EmbeddedWebApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.multipart.support.StandardServletMultipartResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for multi-part uploads. Adds a\n * {@link StandardServletMultipartResolver} when a {@link MultipartConfigElement} bean is\n * defined. The {@link EmbeddedWebApplicationContext} will associated the\n * {@link MultipartConfigElement} bean to any {@link Servlet} beans.\n * \n * @author Greg Turnquist\n */\n@Configuration\n@ConditionalOnClass({ Servlet.class, StandardServletMultipartResolver.class })\n@ConditionalOnBean(MultipartConfigElement.class)\npublic class MultipartAutoConfiguration {\n\n\t@Bean\n\tpublic StandardServletMultipartResolver multipartResolver() {\n\t\treturn new StandardServletMultipartResolver();\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
