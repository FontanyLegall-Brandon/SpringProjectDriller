@@ -16,12 +16,10 @@
 
 package org.springframework.boot.actuate.autoconfigure.metrics;
 
-import java.util.Collections;
-
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.binder.logging.Log4j2Metrics;
 import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.core.LoggerContext;
+import org.apache.logging.log4j.spi.LoggerContext;
 
 import org.springframework.boot.actuate.autoconfigure.metrics.Log4J2MetricsAutoConfiguration.Log4JCoreLoggerContextCondition;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
@@ -44,7 +42,8 @@ import org.springframework.core.type.AnnotatedTypeMetadata;
  */
 @Configuration
 @AutoConfigureAfter(MetricsAutoConfiguration.class)
-@ConditionalOnClass({ Log4j2Metrics.class, LoggerContext.class, LogManager.class })
+@ConditionalOnClass(value = { Log4j2Metrics.class,
+		LogManager.class }, name = )
 @ConditionalOnBean(MeterRegistry.class)
 @Conditional(Log4JCoreLoggerContextCondition.class)
 public class Log4J2MetricsAutoConfiguration {
@@ -52,8 +51,7 @@ public class Log4J2MetricsAutoConfiguration {
 	@Bean
 	@ConditionalOnMissingBean
 	public Log4j2Metrics log4j2Metrics() {
-		return new Log4j2Metrics(Collections.emptyList(),
-				(LoggerContext) LogManager.getContext(false));
+		return new Log4j2Metrics();
 	}
 
 	static class Log4JCoreLoggerContextCondition extends SpringBootCondition {
@@ -61,14 +59,19 @@ public class Log4J2MetricsAutoConfiguration {
 		@Override
 		public ConditionOutcome getMatchOutcome(ConditionContext context,
 				AnnotatedTypeMetadata metadata) {
-			org.apache.logging.log4j.spi.LoggerContext loggerContext = LogManager
-					.getContext(false);
-			if (loggerContext instanceof LoggerContext) {
-				return ConditionOutcome.match(
-						);
+			LoggerContext loggerContext = LogManager.getContext(false);
+			try {
+				if (Class.forName()
+						.isInstance(loggerContext)) {
+					return ConditionOutcome.match(
+							);
+				}
+			}
+			catch (Throwable ex) {
+				
 			}
 			return ConditionOutcome.noMatch(
-					);
+					);
 		}
 
 	}

