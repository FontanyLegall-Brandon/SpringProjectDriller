{'_old_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/TraceWebFilterAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/TraceWebFilterAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -41,11 +41,11 @@ import org.springframework.web.servlet.DispatcherServlet;\n  *\n  * @author Dave Syer\n  */\n+@Configuration\n @ConditionalOnClass({ Servlet.class, DispatcherServlet.class, ServletRegistration.class })\n @AutoConfigureAfter(TraceRepositoryAutoConfiguration.class)\n-@ConditionalOnProperty(name = "endpoints.trace.filter.enabled", matchIfMissing = true)\n+@ConditionalOnProperty(prefix = "endpoints.trace.filter", name = "enabled", matchIfMissing = true)\n @EnableConfigurationProperties(TraceProperties.class)\n-@Configuration\n public class TraceWebFilterAutoConfiguration {\n \n \tprivate final TraceRepository traceRepository;\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport javax.servlet.Servlet;\nimport javax.servlet.ServletRegistration;\n\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.actuate.trace.TraceProperties;\nimport org.springframework.boot.actuate.trace.TraceRepository;\nimport org.springframework.boot.actuate.trace.WebRequestTraceFilter;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.web.ErrorAttributes;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.DispatcherServlet;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link WebRequestTraceFilter\n * tracing}.\n *\n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class, ServletRegistration.class })\n@AutoConfigureAfter(TraceRepositoryAutoConfiguration.class)\n@ConditionalOnProperty(prefix = "endpoints.trace.filter", name = "enabled", matchIfMissing = true)\n@EnableConfigurationProperties(TraceProperties.class)\npublic class TraceWebFilterAutoConfiguration {\n\n\tprivate final TraceRepository traceRepository;\n\n\tprivate final TraceProperties traceProperties;\n\n\tprivate final ErrorAttributes errorAttributes;\n\n\tpublic TraceWebFilterAutoConfiguration(TraceRepository traceRepository,\n\t\t\tTraceProperties traceProperties,\n\t\t\tObjectProvider<ErrorAttributes> errorAttributes) {\n\t\tthis.traceRepository = traceRepository;\n\t\tthis.traceProperties = traceProperties;\n\t\tthis.errorAttributes = errorAttributes.getIfAvailable();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic WebRequestTraceFilter webRequestLoggingFilter(BeanFactory beanFactory) {\n\t\tWebRequestTraceFilter filter = new WebRequestTraceFilter(this.traceRepository,\n\t\t\t\tthis.traceProperties);\n\t\tif (this.errorAttributes != null) {\n\t\t\tfilter.setErrorAttributes(this.errorAttributes);\n\t\t}\n\t\treturn filter;\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport javax.servlet.Servlet;\nimport javax.servlet.ServletRegistration;\n\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.actuate.trace.TraceProperties;\nimport org.springframework.boot.actuate.trace.TraceRepository;\nimport org.springframework.boot.actuate.trace.WebRequestTraceFilter;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.web.ErrorAttributes;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.DispatcherServlet;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link WebRequestTraceFilter\n * tracing}.\n *\n * @author Dave Syer\n */\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class, ServletRegistration.class })\n@AutoConfigureAfter(TraceRepositoryAutoConfiguration.class)\n@ConditionalOnProperty(name = "endpoints.trace.filter.enabled", matchIfMissing = true)\n@EnableConfigurationProperties(TraceProperties.class)\n@Configuration\npublic class TraceWebFilterAutoConfiguration {\n\n\tprivate final TraceRepository traceRepository;\n\n\tprivate final TraceProperties traceProperties;\n\n\tprivate final ErrorAttributes errorAttributes;\n\n\tpublic TraceWebFilterAutoConfiguration(TraceRepository traceRepository,\n\t\t\tTraceProperties traceProperties,\n\t\t\tObjectProvider<ErrorAttributes> errorAttributes) {\n\t\tthis.traceRepository = traceRepository;\n\t\tthis.traceProperties = traceProperties;\n\t\tthis.errorAttributes = errorAttributes.getIfAvailable();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic WebRequestTraceFilter webRequestLoggingFilter(BeanFactory beanFactory) {\n\t\tWebRequestTraceFilter filter = new WebRequestTraceFilter(this.traceRepository,\n\t\t\t\tthis.traceProperties);\n\t\tif (this.errorAttributes != null) {\n\t\t\tfilter.setErrorAttributes(this.errorAttributes);\n\t\t}\n\t\treturn filter;\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
