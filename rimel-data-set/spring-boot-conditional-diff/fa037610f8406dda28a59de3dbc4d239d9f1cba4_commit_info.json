{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jDataAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jDataAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -53,7 +53,8 @@ import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter\n  * @since 1.4.0\n  */\n @Configuration\n-@ConditionalOnClass({ SessionFactory.class, PlatformTransactionManager.class })\n+@ConditionalOnClass({ SessionFactory.class, Neo4jTransactionManager.class,\n+\t\tPlatformTransactionManager.class })\n @ConditionalOnMissingBean(SessionFactory.class)\n @EnableConfigurationProperties(Neo4jProperties.class)\n @SuppressWarnings("deprecation")\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.neo4j;\n\nimport java.util.List;\n\nimport org.neo4j.ogm.session.SessionFactory;\nimport org.neo4j.ogm.session.event.EventListener;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigurationPackages;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.domain.EntityScanPackages;\nimport org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.neo4j.template.Neo4jOperations;\nimport org.springframework.data.neo4j.template.Neo4jTemplate;\nimport org.springframework.data.neo4j.transaction.Neo4jTransactionManager;\nimport org.springframework.data.neo4j.web.support.OpenSessionInViewInterceptor;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data Neo4j.\n *\n * @author Michael Hunger\n * @author Josh Long\n * @author Vince Bickers\n * @author Stephane Nicoll\n * @author Kazuki Shimizu\n * @since 1.4.0\n */\n@Configuration\n@ConditionalOnClass({ SessionFactory.class, Neo4jTransactionManager.class,\n\t\tPlatformTransactionManager.class })\n@ConditionalOnMissingBean(SessionFactory.class)\n@EnableConfigurationProperties(Neo4jProperties.class)\n@SuppressWarnings("deprecation")\npublic class Neo4jDataAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic org.neo4j.ogm.config.Configuration configuration(Neo4jProperties properties) {\n\t\treturn properties.createConfiguration();\n\t}\n\n\t@Bean\n\tpublic SessionFactory sessionFactory(org.neo4j.ogm.config.Configuration configuration,\n\t\t\tApplicationContext applicationContext,\n\t\t\tObjectProvider<List<EventListener>> eventListeners) {\n\t\tSessionFactory sessionFactory = new SessionFactory(configuration,\n\t\t\t\tgetPackagesToScan(applicationContext));\n\t\tList<EventListener> providedEventListeners = eventListeners.getIfAvailable();\n\t\tif (providedEventListeners != null) {\n\t\t\tfor (EventListener eventListener : providedEventListeners) {\n\t\t\t\tsessionFactory.register(eventListener);\n\t\t\t}\n\t\t}\n\t\treturn sessionFactory;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(Neo4jOperations.class)\n\tpublic Neo4jTemplate neo4jTemplate(SessionFactory sessionFactory) {\n\t\treturn new Neo4jTemplate(sessionFactory);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(PlatformTransactionManager.class)\n\tpublic Neo4jTransactionManager transactionManager(SessionFactory sessionFactory,\n\t\t\tNeo4jProperties properties,\n\t\t\tObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers) {\n\t\treturn customize(new Neo4jTransactionManager(sessionFactory),\n\t\t\t\ttransactionManagerCustomizers.getIfAvailable());\n\t}\n\n\tprivate Neo4jTransactionManager customize(Neo4jTransactionManager transactionManager,\n\t\t\tTransactionManagerCustomizers customizers) {\n\t\tif (customizers != null) {\n\t\t\tcustomizers.customize(transactionManager);\n\t\t}\n\t\treturn transactionManager;\n\t}\n\n\tprivate String[] getPackagesToScan(ApplicationContext applicationContext) {\n\t\tList<String> packages = EntityScanPackages.get(applicationContext)\n\t\t\t\t.getPackageNames();\n\t\tif (packages.isEmpty() && AutoConfigurationPackages.has(applicationContext)) {\n\t\t\tpackages = AutoConfigurationPackages.get(applicationContext);\n\t\t}\n\t\treturn packages.toArray(new String[packages.size()]);\n\t}\n\n\t@Configuration\n\t@ConditionalOnWebApplication\n\t@ConditionalOnClass({ WebMvcConfigurerAdapter.class,\n\t\t\tOpenSessionInViewInterceptor.class })\n\t@ConditionalOnMissingBean(OpenSessionInViewInterceptor.class)\n\t@ConditionalOnProperty(prefix = "spring.data.neo4j", name = "open-in-view", havingValue = "true", matchIfMissing = true)\n\tprotected static class Neo4jWebConfiguration {\n\n\t\t@Configuration\n\t\tprotected static class Neo4jWebMvcConfiguration extends WebMvcConfigurerAdapter {\n\n\t\t\t@Bean\n\t\t\tpublic OpenSessionInViewInterceptor neo4jOpenSessionInViewInterceptor() {\n\t\t\t\treturn new OpenSessionInViewInterceptor();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void addInterceptors(InterceptorRegistry registry) {\n\t\t\t\tregistry.addWebRequestInterceptor(neo4jOpenSessionInViewInterceptor());\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.neo4j;\n\nimport java.util.List;\n\nimport org.neo4j.ogm.session.SessionFactory;\nimport org.neo4j.ogm.session.event.EventListener;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigurationPackages;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.domain.EntityScanPackages;\nimport org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.neo4j.template.Neo4jOperations;\nimport org.springframework.data.neo4j.template.Neo4jTemplate;\nimport org.springframework.data.neo4j.transaction.Neo4jTransactionManager;\nimport org.springframework.data.neo4j.web.support.OpenSessionInViewInterceptor;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data Neo4j.\n *\n * @author Michael Hunger\n * @author Josh Long\n * @author Vince Bickers\n * @author Stephane Nicoll\n * @author Kazuki Shimizu\n * @since 1.4.0\n */\n@Configuration\n@ConditionalOnClass({ SessionFactory.class, PlatformTransactionManager.class })\n@ConditionalOnMissingBean(SessionFactory.class)\n@EnableConfigurationProperties(Neo4jProperties.class)\n@SuppressWarnings("deprecation")\npublic class Neo4jDataAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic org.neo4j.ogm.config.Configuration configuration(Neo4jProperties properties) {\n\t\treturn properties.createConfiguration();\n\t}\n\n\t@Bean\n\tpublic SessionFactory sessionFactory(org.neo4j.ogm.config.Configuration configuration,\n\t\t\tApplicationContext applicationContext,\n\t\t\tObjectProvider<List<EventListener>> eventListeners) {\n\t\tSessionFactory sessionFactory = new SessionFactory(configuration,\n\t\t\t\tgetPackagesToScan(applicationContext));\n\t\tList<EventListener> providedEventListeners = eventListeners.getIfAvailable();\n\t\tif (providedEventListeners != null) {\n\t\t\tfor (EventListener eventListener : providedEventListeners) {\n\t\t\t\tsessionFactory.register(eventListener);\n\t\t\t}\n\t\t}\n\t\treturn sessionFactory;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(Neo4jOperations.class)\n\tpublic Neo4jTemplate neo4jTemplate(SessionFactory sessionFactory) {\n\t\treturn new Neo4jTemplate(sessionFactory);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(PlatformTransactionManager.class)\n\tpublic Neo4jTransactionManager transactionManager(SessionFactory sessionFactory,\n\t\t\tNeo4jProperties properties,\n\t\t\tObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers) {\n\t\treturn customize(new Neo4jTransactionManager(sessionFactory),\n\t\t\t\ttransactionManagerCustomizers.getIfAvailable());\n\t}\n\n\tprivate Neo4jTransactionManager customize(Neo4jTransactionManager transactionManager,\n\t\t\tTransactionManagerCustomizers customizers) {\n\t\tif (customizers != null) {\n\t\t\tcustomizers.customize(transactionManager);\n\t\t}\n\t\treturn transactionManager;\n\t}\n\n\tprivate String[] getPackagesToScan(ApplicationContext applicationContext) {\n\t\tList<String> packages = EntityScanPackages.get(applicationContext)\n\t\t\t\t.getPackageNames();\n\t\tif (packages.isEmpty() && AutoConfigurationPackages.has(applicationContext)) {\n\t\t\tpackages = AutoConfigurationPackages.get(applicationContext);\n\t\t}\n\t\treturn packages.toArray(new String[packages.size()]);\n\t}\n\n\t@Configuration\n\t@ConditionalOnWebApplication\n\t@ConditionalOnClass({ WebMvcConfigurerAdapter.class,\n\t\t\tOpenSessionInViewInterceptor.class })\n\t@ConditionalOnMissingBean(OpenSessionInViewInterceptor.class)\n\t@ConditionalOnProperty(prefix = "spring.data.neo4j", name = "open-in-view", havingValue = "true", matchIfMissing = true)\n\tprotected static class Neo4jWebConfiguration {\n\n\t\t@Configuration\n\t\tprotected static class Neo4jWebMvcConfiguration extends WebMvcConfigurerAdapter {\n\n\t\t\t@Bean\n\t\t\tpublic OpenSessionInViewInterceptor neo4jOpenSessionInViewInterceptor() {\n\t\t\t\treturn new OpenSessionInViewInterceptor();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void addInterceptors(InterceptorRegistry registry) {\n\t\t\t\tregistry.addWebRequestInterceptor(neo4jOpenSessionInViewInterceptor());\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
