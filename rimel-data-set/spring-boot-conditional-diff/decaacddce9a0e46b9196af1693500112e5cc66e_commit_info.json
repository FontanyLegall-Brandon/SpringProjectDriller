{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/servlet/SecurityRequestMatcherProviderAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/servlet/SecurityRequestMatcherProviderAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -15,9 +15,13 @@\n  */\n package org.springframework.boot.autoconfigure.security.servlet;\n \n+import org.glassfish.jersey.server.ResourceConfig;\n+\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.autoconfigure.web.servlet.JerseyApplicationPath;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.security.web.util.matcher.RequestMatcher;\n@@ -31,15 +35,36 @@ import org.springframework.web.servlet.handler.HandlerMappingIntrospector;\n  * @since 2.0.5\n  */\n @Configuration\n-@ConditionalOnClass({ RequestMatcher.class, DispatcherServlet.class })\n+@ConditionalOnClass({ RequestMatcher.class })\n @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n-@ConditionalOnBean(HandlerMappingIntrospector.class)\n public class SecurityRequestMatcherProviderAutoConfiguration {\n \n-\t@Bean\n-\tpublic RequestMatcherProvider requestMatcherProvider(\n-\t\t\tHandlerMappingIntrospector introspector) {\n-\t\treturn new MvcRequestMatcherProvider(introspector);\n+\t@Configuration\n+\t@ConditionalOnClass(DispatcherServlet.class)\n+\t@ConditionalOnBean(HandlerMappingIntrospector.class)\n+\tpublic static class MvcRequestMatcherConfiguration {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnClass(DispatcherServlet.class)\n+\t\tpublic RequestMatcherProvider requestMatcherProvider(\n+\t\t\t\tHandlerMappingIntrospector introspector) {\n+\t\t\treturn new MvcRequestMatcherProvider(introspector);\n+\t\t}\n+\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnClass(ResourceConfig.class)\n+\t@ConditionalOnMissingClass("org.springframework.web.servlet.DispatcherServlet")\n+\t@ConditionalOnBean(JerseyApplicationPath.class)\n+\tpublic static class JerseyRequestMatcherConfiguration {\n+\n+\t\t@Bean\n+\t\tpublic RequestMatcherProvider requestMatcherProvider(\n+\t\t\t\tJerseyApplicationPath applicationPath) {\n+\t\t\treturn new JerseyRequestMatcherProvider(applicationPath);\n+\t\t}\n+\n \t}\n \n }\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.boot.autoconfigure.security.servlet;\n\nimport org.glassfish.jersey.server.ResourceConfig;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.web.servlet.JerseyApplicationPath;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.web.util.matcher.RequestMatcher;\nimport org.springframework.web.servlet.DispatcherServlet;\nimport org.springframework.web.servlet.handler.HandlerMappingIntrospector;\n\n/**\n * Auto-configuration for {@link RequestMatcherProvider}.\n *\n * @author Madhura Bhave\n * @since 2.0.5\n */\n@Configuration\n@ConditionalOnClass({ RequestMatcher.class })\n@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\npublic class SecurityRequestMatcherProviderAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnClass(DispatcherServlet.class)\n\t@ConditionalOnBean(HandlerMappingIntrospector.class)\n\tpublic static class MvcRequestMatcherConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnClass(DispatcherServlet.class)\n\t\tpublic RequestMatcherProvider requestMatcherProvider(\n\t\t\t\tHandlerMappingIntrospector introspector) {\n\t\t\treturn new MvcRequestMatcherProvider(introspector);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(ResourceConfig.class)\n\t@ConditionalOnMissingClass("org.springframework.web.servlet.DispatcherServlet")\n\t@ConditionalOnBean(JerseyApplicationPath.class)\n\tpublic static class JerseyRequestMatcherConfiguration {\n\n\t\t@Bean\n\t\tpublic RequestMatcherProvider requestMatcherProvider(\n\t\t\t\tJerseyApplicationPath applicationPath) {\n\t\t\treturn new JerseyRequestMatcherProvider(applicationPath);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.boot.autoconfigure.security.servlet;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.web.util.matcher.RequestMatcher;\nimport org.springframework.web.servlet.DispatcherServlet;\nimport org.springframework.web.servlet.handler.HandlerMappingIntrospector;\n\n/**\n * Auto-configuration for {@link RequestMatcherProvider}.\n *\n * @author Madhura Bhave\n * @since 2.0.5\n */\n@Configuration\n@ConditionalOnClass({ RequestMatcher.class, DispatcherServlet.class })\n@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n@ConditionalOnBean(HandlerMappingIntrospector.class)\npublic class SecurityRequestMatcherProviderAutoConfiguration {\n\n\t@Bean\n\tpublic RequestMatcherProvider requestMatcherProvider(\n\t\t\tHandlerMappingIntrospector introspector) {\n\t\treturn new MvcRequestMatcherProvider(introspector);\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
