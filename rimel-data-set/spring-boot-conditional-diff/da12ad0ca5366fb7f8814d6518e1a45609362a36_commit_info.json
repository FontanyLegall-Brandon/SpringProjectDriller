{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/reactive/ReactiveSecurityAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/reactive/ReactiveSecurityAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2018 the original author or authors.\n+ * Copyright 2012-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -27,6 +27,7 @@ import org.springframework.boot.context.properties.EnableConfigurationProperties\n import org.springframework.context.annotation.Configuration;\n import org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;\n import org.springframework.security.web.server.WebFilterChainProxy;\n+import org.springframework.web.reactive.config.WebFluxConfigurer;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for Spring Security in a reactive\n@@ -40,8 +41,8 @@ import org.springframework.security.web.server.WebFilterChainProxy;\n  */\n @Configuration\n @EnableConfigurationProperties(SecurityProperties.class)\n-@ConditionalOnClass({ Flux.class, EnableWebFluxSecurity.class,\n-\t\tWebFilterChainProxy.class })\n+@ConditionalOnClass({ Flux.class, EnableWebFluxSecurity.class, WebFilterChainProxy.class,\n+\t\tWebFluxConfigurer.class })\n public class ReactiveSecurityAutoConfiguration {\n \n \t@Configuration\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security.reactive;\n\nimport reactor.core.publisher.Flux;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.security.SecurityProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;\nimport org.springframework.security.web.server.WebFilterChainProxy;\nimport org.springframework.web.reactive.config.WebFluxConfigurer;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Security in a reactive\n * application. Switches on {@link EnableWebFluxSecurity} for a reactive web application\n * if this annotation has not been added by the user. It delegates to Spring Security\'s\n * content-negotiation mechanism for authentication. This configuration also backs off if\n * a bean of type {@link WebFilterChainProxy} has been configured in any other way.\n *\n * @author Madhura Bhave\n * @since 2.0.0\n */\n@Configuration\n@EnableConfigurationProperties(SecurityProperties.class)\n@ConditionalOnClass({ Flux.class, EnableWebFluxSecurity.class, WebFilterChainProxy.class,\n\t\tWebFluxConfigurer.class })\npublic class ReactiveSecurityAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnMissingBean(WebFilterChainProxy.class)\n\t@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)\n\t@EnableWebFluxSecurity\n\tstatic class EnableWebFluxSecurityConfiguration {\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security.reactive;\n\nimport reactor.core.publisher.Flux;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.security.SecurityProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;\nimport org.springframework.security.web.server.WebFilterChainProxy;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Security in a reactive\n * application. Switches on {@link EnableWebFluxSecurity} for a reactive web application\n * if this annotation has not been added by the user. It delegates to Spring Security\'s\n * content-negotiation mechanism for authentication. This configuration also backs off if\n * a bean of type {@link WebFilterChainProxy} has been configured in any other way.\n *\n * @author Madhura Bhave\n * @since 2.0.0\n */\n@Configuration\n@EnableConfigurationProperties(SecurityProperties.class)\n@ConditionalOnClass({ Flux.class, EnableWebFluxSecurity.class,\n\t\tWebFilterChainProxy.class })\npublic class ReactiveSecurityAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnMissingBean(WebFilterChainProxy.class)\n\t@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)\n\t@EnableWebFluxSecurity\n\tstatic class EnableWebFluxSecurityConfiguration {\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
