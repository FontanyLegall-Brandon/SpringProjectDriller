@@ -15,13 +15,18 @@
  */
 package org.springframework.bootstrap.context.annotation;
 
+import java.util.Arrays;
+
 import javax.annotation.PostConstruct;
 
 import org.junit.Test;
+import org.springframework.beans.factory.BeanCreationException;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.bootstrap.TestUtils;
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;
+import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.ImportResource;
 import org.springframework.stereotype.Component;
 
 import static org.junit.Assert.assertEquals;
@@ -53,6 +58,45 @@ public class EnableConfigurationPropertiesTests {
 		assertEquals(, this.context.getBean(MoreProperties.class).getName());
 	}
 
+	@Test
+	public void testPropertiesBindingWithDefaultsInXml() {
+		this.context.register(TestConfiguration.class, DefaultXmlConfiguration.class);
+		this.context.refresh();
+		String[] beanNames = this.context.getBeanNamesForType(TestProperties.class);
+		assertEquals( + Arrays.asList(beanNames), 1, beanNames.length);
+		assertEquals(, this.context.getBean(TestProperties.class).getName());
+	}
+
+	@Test(expected = BeanCreationException.class)
+	public void testPropertiesBindingWithDefaultsInBeanMethodReverseOrder() {
+		this.context.register(TestBeanConfiguration.class, DefaultConfiguration.class);
+		this.context.refresh();
+		String[] beanNames = this.context.getBeanNamesForType(TestProperties.class);
+		assertEquals( + Arrays.asList(beanNames), 1, beanNames.length);
+		assertEquals(, this.context.getBean(TestProperties.class).getName());
+	}
+
+	@Test
+	public void testPropertiesBindingWithDefaultsInBeanMethod() {
+		this.context.register(DefaultConfiguration.class, TestBeanConfiguration.class);
+		this.context.refresh();
+		String[] beanNames = this.context.getBeanNamesForType(TestProperties.class);
+		assertEquals( + Arrays.asList(beanNames), 1, beanNames.length);
+		assertEquals(, this.context.getBean(TestProperties.class).getName());
+	}
+
+	
+	
+	
+	@Test(expected = BeanCreationException.class)
+	public void testPropertiesBindingWithDefaults() {
+		this.context.register(DefaultConfiguration.class, TestConfiguration.class);
+		this.context.refresh();
+		String[] beanNames = this.context.getBeanNamesForType(TestProperties.class);
+		assertEquals( + Arrays.asList(beanNames), 1, beanNames.length);
+		assertEquals(, this.context.getBean(TestProperties.class).getName());
+	}
+
 	@Test
 	public void testBindingWithTwoBeans() {
 		this.context.register(MoreConfiguration.class, TestConfiguration.class);
@@ -94,6 +138,32 @@ public class EnableConfigurationPropertiesTests {
 	protected static class TestConfiguration {
 	}
 
+	@Configuration
+	@EnableConfigurationProperties
+	protected static class TestBeanConfiguration {
+		@ConditionalOnMissingBean(TestProperties.class)
+		@Bean(name = )
+		public TestProperties testProperties() {
+			return new TestProperties();
+		}
+	}
+
+	@Configuration
+	protected static class DefaultConfiguration {
+		@Bean
+		@AssertMissingBean(TestProperties.class)
+		public TestProperties testProperties() {
+			TestProperties test = new TestProperties();
+			test.setName();
+			return test;
+		}
+	}
+
+	@Configuration
+	@ImportResource()
+	protected static class DefaultXmlConfiguration {
+	}
+
 	@Component
 	protected static class TestConsumer {
 		@Autowired

