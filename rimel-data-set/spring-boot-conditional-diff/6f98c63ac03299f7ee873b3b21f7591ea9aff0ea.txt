@@ -0,0 +1,117 @@
+
+
+package org.springframework.boot.autoconfigure.jackson;
+
+import java.util.Collection;
+
+import javax.annotation.PostConstruct;
+
+import org.springframework.beans.factory.BeanFactoryUtils;
+import org.springframework.beans.factory.ListableBeanFactory;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnJava;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnJava.JavaVersion;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.web.HttpMapperProperties;
+import org.springframework.boot.context.properties.EnableConfigurationProperties;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Primary;
+
+import com.fasterxml.jackson.databind.Module;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.SerializationFeature;
+import com.fasterxml.jackson.datatype.joda.JodaModule;
+import com.fasterxml.jackson.datatype.jsr310.JSR310Module;
+
+
+@Configuration
+@ConditionalOnClass(ObjectMapper.class)
+@EnableConfigurationProperties(HttpMapperProperties.class)
+public class JacksonAutoConfiguration {
+
+	@Autowired
+	private HttpMapperProperties properties = new HttpMapperProperties();
+
+	@Autowired
+	private ListableBeanFactory beanFactory;
+
+	@Bean
+	@ConditionalOnMissingBean
+	@Primary
+	public ObjectMapper jacksonObjectMapper() {
+
+		ObjectMapper objectMapper = new ObjectMapper();
+
+		if (this.properties.isJsonSortKeys()) {
+			objectMapper.configure(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, true);
+		}
+
+		return objectMapper;
+	}
+
+	@PostConstruct
+	public void init() {
+
+		Collection<ObjectMapper> mappers = BeanFactoryUtils
+				.beansOfTypeIncludingAncestors(this.beanFactory, ObjectMapper.class)
+				.values();
+		Collection<Module> modules = BeanFactoryUtils.beansOfTypeIncludingAncestors(
+				this.beanFactory, Module.class).values();
+
+		for (ObjectMapper mapper : mappers) {
+			mapper.registerModules(modules);
+		}
+	}
+
+	@Configuration
+	@ConditionalOnClass(JodaModule.class)
+	static class JodaModuleAutoConfiguration {
+
+		@Bean
+		@ConditionalOnMissingBean
+		JodaModule jacksonJodaModule() {
+			return new JodaModule();
+		}
+	}
+
+	@Configuration
+	@ConditionalOnJava(JavaVersion.EIGHT)
+	@ConditionalOnClass(JSR310Module.class)
+	static class Jsr310ModuleAutoConfiguration {
+
+		@Bean
+		@ConditionalOnMissingBean
+		JSR310Module jacksonJsr310Module() {
+			return new JSR310Module();
+		}
+	}
+}

