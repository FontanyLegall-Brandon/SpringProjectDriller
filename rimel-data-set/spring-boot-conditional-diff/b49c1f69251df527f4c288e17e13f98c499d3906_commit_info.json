{'_old_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryActuatorAutoConfiguration.java'), '_new_path': None, 'change_type': <ModificationType.DELETE: 4>, 'diff': '@@ -1,69 +0,0 @@\n-/*\n- * Copyright 2012-2017 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the "License");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an "AS IS" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.boot.actuate.autoconfigure.cloudfoundry;\n-\n-import org.springframework.boot.actuate.autoconfigure.endpoint.infrastructure.ServletEndpointAutoConfiguration;\n-import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n-import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n-import org.springframework.boot.autoconfigure.security.IgnoredRequestCustomizer;\n-import org.springframework.boot.cloud.CloudPlatform;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.security.config.annotation.web.builders.WebSecurity;\n-import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n-\n-/**\n- * {@link EnableAutoConfiguration Auto-configuration} to expose actuator endpoints for\n- * cloud foundry to use.\n- *\n- * @author Madhura Bhave\n- * @since 2.0.0\n- */\n-@Configuration\n-@ConditionalOnProperty(prefix = "management.cloudfoundry", name = "enabled", matchIfMissing = true)\n-@AutoConfigureAfter(ServletEndpointAutoConfiguration.class)\n-@ConditionalOnCloudPlatform(CloudPlatform.CLOUD_FOUNDRY)\n-public class CloudFoundryActuatorAutoConfiguration {\n-\n-\t/**\n-\t * Nested configuration for ignored requests if Spring Security is present.\n-\t */\n-\t@ConditionalOnClass(WebSecurity.class)\n-\tstatic class CloudFoundryIgnoredRequestConfiguration {\n-\n-\t\t@Bean\n-\t\tpublic IgnoredRequestCustomizer cloudFoundryIgnoredRequestCustomizer() {\n-\t\t\treturn new CloudFoundryIgnoredRequestCustomizer();\n-\t\t}\n-\n-\t\tprivate static class CloudFoundryIgnoredRequestCustomizer\n-\t\t\t\timplements IgnoredRequestCustomizer {\n-\n-\t\t\t@Override\n-\t\t\tpublic void customize(WebSecurity.IgnoredRequestConfigurer configurer) {\n-\t\t\t\tconfigurer.requestMatchers(\n-\t\t\t\t\t\tnew AntPathRequestMatcher("/cloudfoundryapplication/**"));\n-\t\t\t}\n-\n-\t\t}\n-\n-\t}\n-\n-}\n', 'source_code': None, 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.cloudfoundry;\n\nimport org.springframework.boot.actuate.autoconfigure.endpoint.infrastructure.ServletEndpointAutoConfiguration;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.security.IgnoredRequestCustomizer;\nimport org.springframework.boot.cloud.CloudPlatform;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.WebSecurity;\nimport org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to expose actuator endpoints for\n * cloud foundry to use.\n *\n * @author Madhura Bhave\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnProperty(prefix = "management.cloudfoundry", name = "enabled", matchIfMissing = true)\n@AutoConfigureAfter(ServletEndpointAutoConfiguration.class)\n@ConditionalOnCloudPlatform(CloudPlatform.CLOUD_FOUNDRY)\npublic class CloudFoundryActuatorAutoConfiguration {\n\n\t/**\n\t * Nested configuration for ignored requests if Spring Security is present.\n\t */\n\t@ConditionalOnClass(WebSecurity.class)\n\tstatic class CloudFoundryIgnoredRequestConfiguration {\n\n\t\t@Bean\n\t\tpublic IgnoredRequestCustomizer cloudFoundryIgnoredRequestCustomizer() {\n\t\t\treturn new CloudFoundryIgnoredRequestCustomizer();\n\t\t}\n\n\t\tprivate static class CloudFoundryIgnoredRequestCustomizer\n\t\t\t\timplements IgnoredRequestCustomizer {\n\n\t\t\t@Override\n\t\t\tpublic void customize(WebSecurity.IgnoredRequestConfigurer configurer) {\n\t\t\t\tconfigurer.requestMatchers(\n\t\t\t\t\t\tnew AntPathRequestMatcher("/cloudfoundryapplication/**"));\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
