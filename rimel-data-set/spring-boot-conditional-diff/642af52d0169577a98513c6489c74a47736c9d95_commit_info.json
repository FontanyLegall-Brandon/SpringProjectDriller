{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,6 +16,7 @@\n \n package org.springframework.boot.autoconfigure.kafka;\n \n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n@@ -31,11 +32,10 @@ import org.springframework.kafka.support.LoggingProducerListener;\n import org.springframework.kafka.support.ProducerListener;\n \n /**\n- * Auto-configuration for Spring for Apache Kafka.\n+ * {@link EnableAutoConfiguration Auto-configuration} for Apache Kafka.\n  *\n  * @author Gary Russell\n- * @since 1.5\n- *\n+ * @since 1.5.0\n  */\n @Configuration\n @ConditionalOnClass(KafkaTemplate.class)\n@@ -51,9 +51,11 @@ public class KafkaAutoConfiguration {\n \n \t@Bean\n \t@ConditionalOnMissingBean(KafkaTemplate.class)\n-\tpublic KafkaTemplate<?, ?> kafkaTemplate(ProducerFactory<Object, Object> kafkaProducerFactory,\n+\tpublic KafkaTemplate<?, ?> kafkaTemplate(\n+\t\t\tProducerFactory<Object, Object> kafkaProducerFactory,\n \t\t\tProducerListener<Object, Object> kafkaProducerListener) {\n-\t\tKafkaTemplate<Object, Object> kafkaTemplate = new KafkaTemplate<Object, Object>(kafkaProducerFactory);\n+\t\tKafkaTemplate<Object, Object> kafkaTemplate =\n+\t\t\t\tnew KafkaTemplate<Object, Object>(kafkaProducerFactory);\n \t\tkafkaTemplate.setProducerListener(kafkaProducerListener);\n \t\tkafkaTemplate.setDefaultTopic(this.properties.getTemplate().getDefaultTopic());\n \t\treturn kafkaTemplate;\n@@ -65,21 +67,18 @@ public class KafkaAutoConfiguration {\n \t\treturn new LoggingProducerListener<Object, Object>();\n \t}\n \n-\t@Configuration\n-\tprotected static class ConnectionConfig {\n-\n-\t\t@Bean\n-\t\t@ConditionalOnMissingBean(ConsumerFactory.class)\n-\t\tpublic ConsumerFactory<?, ?> kafkaConsumerFactory(KafkaProperties properties) {\n-\t\t\treturn new DefaultKafkaConsumerFactory<Object, Object>(properties.buildConsumerProperties());\n-\t\t}\n-\n-\t\t@Bean\n-\t\t@ConditionalOnMissingBean(ProducerFactory.class)\n-\t\tpublic ProducerFactory<?, ?> kafkaProducerFactory(KafkaProperties properties) {\n-\t\t\treturn new DefaultKafkaProducerFactory<Object, Object>(properties.buildProducerProperties());\n-\t\t}\n+\t@Bean\n+\t@ConditionalOnMissingBean(ConsumerFactory.class)\n+\tpublic ConsumerFactory<?, ?> kafkaConsumerFactory() {\n+\t\treturn new DefaultKafkaConsumerFactory<Object, Object>(\n+\t\t\t\tthis.properties.buildConsumerProperties());\n+\t}\n \n+\t@Bean\n+\t@ConditionalOnMissingBean(ProducerFactory.class)\n+\tpublic ProducerFactory<?, ?> kafkaProducerFactory() {\n+\t\treturn new DefaultKafkaProducerFactory<Object, Object>(\n+\t\t\t\tthis.properties.buildProducerProperties());\n \t}\n \n }\n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.kafka;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.kafka.core.ConsumerFactory;\nimport org.springframework.kafka.core.DefaultKafkaConsumerFactory;\nimport org.springframework.kafka.core.DefaultKafkaProducerFactory;\nimport org.springframework.kafka.core.KafkaTemplate;\nimport org.springframework.kafka.core.ProducerFactory;\nimport org.springframework.kafka.support.LoggingProducerListener;\nimport org.springframework.kafka.support.ProducerListener;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Apache Kafka.\n *\n * @author Gary Russell\n * @since 1.5.0\n */\n@Configuration\n@ConditionalOnClass(KafkaTemplate.class)\n@EnableConfigurationProperties(KafkaProperties.class)\n@Import(KafkaAnnotationDrivenConfiguration.class)\npublic class KafkaAutoConfiguration {\n\n\tprivate final KafkaProperties properties;\n\n\tpublic KafkaAutoConfiguration(KafkaProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(KafkaTemplate.class)\n\tpublic KafkaTemplate<?, ?> kafkaTemplate(\n\t\t\tProducerFactory<Object, Object> kafkaProducerFactory,\n\t\t\tProducerListener<Object, Object> kafkaProducerListener) {\n\t\tKafkaTemplate<Object, Object> kafkaTemplate =\n\t\t\t\tnew KafkaTemplate<Object, Object>(kafkaProducerFactory);\n\t\tkafkaTemplate.setProducerListener(kafkaProducerListener);\n\t\tkafkaTemplate.setDefaultTopic(this.properties.getTemplate().getDefaultTopic());\n\t\treturn kafkaTemplate;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(ProducerListener.class)\n\tpublic ProducerListener<Object, Object> kafkaProducerListener() {\n\t\treturn new LoggingProducerListener<Object, Object>();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(ConsumerFactory.class)\n\tpublic ConsumerFactory<?, ?> kafkaConsumerFactory() {\n\t\treturn new DefaultKafkaConsumerFactory<Object, Object>(\n\t\t\t\tthis.properties.buildConsumerProperties());\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(ProducerFactory.class)\n\tpublic ProducerFactory<?, ?> kafkaProducerFactory() {\n\t\treturn new DefaultKafkaProducerFactory<Object, Object>(\n\t\t\t\tthis.properties.buildProducerProperties());\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.kafka;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.kafka.core.ConsumerFactory;\nimport org.springframework.kafka.core.DefaultKafkaConsumerFactory;\nimport org.springframework.kafka.core.DefaultKafkaProducerFactory;\nimport org.springframework.kafka.core.KafkaTemplate;\nimport org.springframework.kafka.core.ProducerFactory;\nimport org.springframework.kafka.support.LoggingProducerListener;\nimport org.springframework.kafka.support.ProducerListener;\n\n/**\n * Auto-configuration for Spring for Apache Kafka.\n *\n * @author Gary Russell\n * @since 1.5\n *\n */\n@Configuration\n@ConditionalOnClass(KafkaTemplate.class)\n@EnableConfigurationProperties(KafkaProperties.class)\n@Import(KafkaAnnotationDrivenConfiguration.class)\npublic class KafkaAutoConfiguration {\n\n\tprivate final KafkaProperties properties;\n\n\tpublic KafkaAutoConfiguration(KafkaProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(KafkaTemplate.class)\n\tpublic KafkaTemplate<?, ?> kafkaTemplate(ProducerFactory<Object, Object> kafkaProducerFactory,\n\t\t\tProducerListener<Object, Object> kafkaProducerListener) {\n\t\tKafkaTemplate<Object, Object> kafkaTemplate = new KafkaTemplate<Object, Object>(kafkaProducerFactory);\n\t\tkafkaTemplate.setProducerListener(kafkaProducerListener);\n\t\tkafkaTemplate.setDefaultTopic(this.properties.getTemplate().getDefaultTopic());\n\t\treturn kafkaTemplate;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(ProducerListener.class)\n\tpublic ProducerListener<Object, Object> kafkaProducerListener() {\n\t\treturn new LoggingProducerListener<Object, Object>();\n\t}\n\n\t@Configuration\n\tprotected static class ConnectionConfig {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(ConsumerFactory.class)\n\t\tpublic ConsumerFactory<?, ?> kafkaConsumerFactory(KafkaProperties properties) {\n\t\t\treturn new DefaultKafkaConsumerFactory<Object, Object>(properties.buildConsumerProperties());\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(ProducerFactory.class)\n\t\tpublic ProducerFactory<?, ?> kafkaProducerFactory(KafkaProperties properties) {\n\t\t\treturn new DefaultKafkaProducerFactory<Object, Object>(properties.buildProducerProperties());\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
