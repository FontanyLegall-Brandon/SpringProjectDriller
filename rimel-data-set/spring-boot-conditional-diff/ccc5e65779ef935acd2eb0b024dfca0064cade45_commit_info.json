{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailSenderAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2012-2014 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.mail;\n+\n+import java.util.Map;\n+import java.util.Properties;\n+import javax.activation.MimeType;\n+import javax.mail.internet.MimeMessage;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.mail.MailSender;\n+import org.springframework.mail.javamail.JavaMailSender;\n+import org.springframework.mail.javamail.JavaMailSenderImpl;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto configuration} for email support.\n+ *\n+ * @author Oliver Gierke\n+ * @author Stephane Nicoll\n+ */\n+@Configuration\n+@ConditionalOnClass({MimeMessage.class, MimeType.class})\n+@ConditionalOnProperty(prefix = "spring.mail", value = "host")\n+@ConditionalOnMissingBean(MailSender.class)\n+@EnableConfigurationProperties(MailProperties.class)\n+public class MailSenderAutoConfiguration {\n+\n+\t@Autowired MailProperties properties;\n+\n+\t@Bean\n+\tpublic JavaMailSender mailSender() {\n+\t\tJavaMailSenderImpl sender = new JavaMailSenderImpl();\n+\t\tsender.setHost(this.properties.getHost());\n+\t\tif (this.properties.getPort() != null) {\n+\t\t\tsender.setPort(this.properties.getPort());\n+\t\t}\n+\t\tsender.setUsername(this.properties.getUsername());\n+\t\tsender.setPassword(this.properties.getPassword());\n+\t\tsender.setDefaultEncoding(this.properties.getDefaultEncoding());\n+\t\tMap<String,String> properties = this.properties.getProperties();\n+\t\tif (!properties.isEmpty()) {\n+\t\t\tProperties javaMailProperties= new Properties();\n+\t\t\tfor (Map.Entry<String, String> entry : properties.entrySet()) {\n+\t\t\t\tjavaMailProperties.setProperty(entry.getKey(), entry.getValue());\n+\t\t\t}\n+\t\t\tsender.setJavaMailProperties(javaMailProperties);\n+\t\t}\n+\t\treturn sender;\n+\t}\n+\n+}\n\\ No newline at end of file\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.mail;\n\nimport java.util.Map;\nimport java.util.Properties;\nimport javax.activation.MimeType;\nimport javax.mail.internet.MimeMessage;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.mail.MailSender;\nimport org.springframework.mail.javamail.JavaMailSender;\nimport org.springframework.mail.javamail.JavaMailSenderImpl;\n\n/**\n * {@link EnableAutoConfiguration Auto configuration} for email support.\n *\n * @author Oliver Gierke\n * @author Stephane Nicoll\n */\n@Configuration\n@ConditionalOnClass({MimeMessage.class, MimeType.class})\n@ConditionalOnProperty(prefix = "spring.mail", value = "host")\n@ConditionalOnMissingBean(MailSender.class)\n@EnableConfigurationProperties(MailProperties.class)\npublic class MailSenderAutoConfiguration {\n\n\t@Autowired MailProperties properties;\n\n\t@Bean\n\tpublic JavaMailSender mailSender() {\n\t\tJavaMailSenderImpl sender = new JavaMailSenderImpl();\n\t\tsender.setHost(this.properties.getHost());\n\t\tif (this.properties.getPort() != null) {\n\t\t\tsender.setPort(this.properties.getPort());\n\t\t}\n\t\tsender.setUsername(this.properties.getUsername());\n\t\tsender.setPassword(this.properties.getPassword());\n\t\tsender.setDefaultEncoding(this.properties.getDefaultEncoding());\n\t\tMap<String,String> properties = this.properties.getProperties();\n\t\tif (!properties.isEmpty()) {\n\t\t\tProperties javaMailProperties= new Properties();\n\t\t\tfor (Map.Entry<String, String> entry : properties.entrySet()) {\n\t\t\t\tjavaMailProperties.setProperty(entry.getKey(), entry.getValue());\n\t\t\t}\n\t\t\tsender.setJavaMailProperties(javaMailProperties);\n\t\t}\n\t\treturn sender;\n\t}\n\n}', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
