{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2018 the original author or authors.\n+ * Copyright 2012-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -401,6 +401,7 @@ public class WebMvcAutoConfiguration {\n \t\t@Bean\n \t\t@ConditionalOnMissingBean({ RequestContextListener.class,\n \t\t\t\tRequestContextFilter.class })\n+\t\t@ConditionalOnMissingFilterBean(RequestContextFilter.class)\n \t\tpublic static RequestContextFilter requestContextFilter() {\n \t\t\treturn new OrderedRequestContextFilter();\n \t\t}\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web.servlet;\n\nimport java.time.Duration;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.Map;\nimport java.util.Optional;\n\nimport javax.servlet.Servlet;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.ListableBeanFactory;\nimport org.springframework.beans.factory.NoSuchBeanDefinitionException;\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureOrder;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.autoconfigure.http.HttpMessageConverters;\nimport org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration;\nimport org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders;\nimport org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration;\nimport org.springframework.boot.autoconfigure.validation.ValidatorAdapter;\nimport org.springframework.boot.autoconfigure.web.ConditionalOnEnabledResourceChain;\nimport org.springframework.boot.autoconfigure.web.ResourceProperties;\nimport org.springframework.boot.autoconfigure.web.ResourceProperties.Strategy;\nimport org.springframework.boot.autoconfigure.web.format.WebConversionService;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.web.servlet.filter.OrderedFormContentFilter;\nimport org.springframework.boot.web.servlet.filter.OrderedHiddenHttpMethodFilter;\nimport org.springframework.boot.web.servlet.filter.OrderedRequestContextFilter;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ResourceLoaderAware;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.core.convert.converter.GenericConverter;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.core.task.AsyncTaskExecutor;\nimport org.springframework.format.Formatter;\nimport org.springframework.format.FormatterRegistry;\nimport org.springframework.format.support.FormattingConversionService;\nimport org.springframework.http.CacheControl;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.validation.DefaultMessageCodesResolver;\nimport org.springframework.validation.MessageCodesResolver;\nimport org.springframework.validation.Validator;\nimport org.springframework.web.HttpMediaTypeNotAcceptableException;\nimport org.springframework.web.accept.ContentNegotiationManager;\nimport org.springframework.web.accept.ContentNegotiationStrategy;\nimport org.springframework.web.accept.PathExtensionContentNegotiationStrategy;\nimport org.springframework.web.bind.support.ConfigurableWebBindingInitializer;\nimport org.springframework.web.context.request.NativeWebRequest;\nimport org.springframework.web.context.request.RequestAttributes;\nimport org.springframework.web.context.request.RequestContextListener;\nimport org.springframework.web.filter.FormContentFilter;\nimport org.springframework.web.filter.HiddenHttpMethodFilter;\nimport org.springframework.web.filter.RequestContextFilter;\nimport org.springframework.web.servlet.DispatcherServlet;\nimport org.springframework.web.servlet.HandlerExceptionResolver;\nimport org.springframework.web.servlet.LocaleResolver;\nimport org.springframework.web.servlet.View;\nimport org.springframework.web.servlet.ViewResolver;\nimport org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer;\nimport org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer;\nimport org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\nimport org.springframework.web.servlet.config.annotation.PathMatchConfigurer;\nimport org.springframework.web.servlet.config.annotation.ResourceChainRegistration;\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration;\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\nimport org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver;\nimport org.springframework.web.servlet.handler.SimpleUrlHandlerMapping;\nimport org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver;\nimport org.springframework.web.servlet.i18n.FixedLocaleResolver;\nimport org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver;\nimport org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;\nimport org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;\nimport org.springframework.web.servlet.resource.AppCacheManifestTransformer;\nimport org.springframework.web.servlet.resource.EncodedResourceResolver;\nimport org.springframework.web.servlet.resource.ResourceHttpRequestHandler;\nimport org.springframework.web.servlet.resource.ResourceResolver;\nimport org.springframework.web.servlet.resource.VersionResourceResolver;\nimport org.springframework.web.servlet.view.BeanNameViewResolver;\nimport org.springframework.web.servlet.view.ContentNegotiatingViewResolver;\nimport org.springframework.web.servlet.view.InternalResourceViewResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link EnableWebMvc Web MVC}.\n *\n * @author Phillip Webb\n * @author Dave Syer\n * @author Andy Wilkinson\n * @author Sébastien Deleuze\n * @author Eddú Meléndez\n * @author Stephane Nicoll\n * @author Kristine Jetzke\n * @author Bruce Brouwer\n * @author Artsiom Yudovin\n */\n@Configuration\n@ConditionalOnWebApplication(type = Type.SERVLET)\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class })\n@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)\n@AutoConfigureAfter({ DispatcherServletAutoConfiguration.class,\n\t\tTaskExecutionAutoConfiguration.class, ValidationAutoConfiguration.class })\npublic class WebMvcAutoConfiguration {\n\n\tpublic static final String DEFAULT_PREFIX = "";\n\n\tpublic static final String DEFAULT_SUFFIX = "";\n\n\tprivate static final String[] SERVLET_LOCATIONS = { "/" };\n\n\t@Bean\n\t@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)\n\t@ConditionalOnProperty(prefix = "spring.mvc.hiddenmethod.filter", name = "enabled", matchIfMissing = true)\n\tpublic OrderedHiddenHttpMethodFilter hiddenHttpMethodFilter() {\n\t\treturn new OrderedHiddenHttpMethodFilter();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(FormContentFilter.class)\n\t@ConditionalOnProperty(prefix = "spring.mvc.formcontent.filter", name = "enabled", matchIfMissing = true)\n\tpublic OrderedFormContentFilter formContentFilter() {\n\t\treturn new OrderedFormContentFilter();\n\t}\n\n\t// Defined as a nested config to ensure WebMvcConfigurer is not read when not\n\t// on the classpath\n\t@Configuration\n\t@Import(EnableWebMvcConfiguration.class)\n\t@EnableConfigurationProperties({ WebMvcProperties.class, ResourceProperties.class })\n\t@Order(0)\n\tpublic static class WebMvcAutoConfigurationAdapter\n\t\t\timplements WebMvcConfigurer, ResourceLoaderAware {\n\n\t\tprivate static final Log logger = LogFactory.getLog(WebMvcConfigurer.class);\n\n\t\tprivate final ResourceProperties resourceProperties;\n\n\t\tprivate final WebMvcProperties mvcProperties;\n\n\t\tprivate final ListableBeanFactory beanFactory;\n\n\t\tprivate final ObjectProvider<HttpMessageConverters> messageConvertersProvider;\n\n\t\tfinal ResourceHandlerRegistrationCustomizer resourceHandlerRegistrationCustomizer;\n\n\t\tprivate ResourceLoader resourceLoader;\n\n\t\tpublic WebMvcAutoConfigurationAdapter(ResourceProperties resourceProperties,\n\t\t\t\tWebMvcProperties mvcProperties, ListableBeanFactory beanFactory,\n\t\t\t\tObjectProvider<HttpMessageConverters> messageConvertersProvider,\n\t\t\t\tObjectProvider<ResourceHandlerRegistrationCustomizer> resourceHandlerRegistrationCustomizerProvider) {\n\t\t\tthis.resourceProperties = resourceProperties;\n\t\t\tthis.mvcProperties = mvcProperties;\n\t\t\tthis.beanFactory = beanFactory;\n\t\t\tthis.messageConvertersProvider = messageConvertersProvider;\n\t\t\tthis.resourceHandlerRegistrationCustomizer = resourceHandlerRegistrationCustomizerProvider\n\t\t\t\t\t.getIfAvailable();\n\t\t}\n\n\t\t@Override\n\t\tpublic void setResourceLoader(ResourceLoader resourceLoader) {\n\t\t\tthis.resourceLoader = resourceLoader;\n\t\t}\n\n\t\t@Override\n\t\tpublic void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n\t\t\tthis.messageConvertersProvider.ifAvailable((customConverters) -> converters\n\t\t\t\t\t.addAll(customConverters.getConverters()));\n\t\t}\n\n\t\t@Override\n\t\tpublic void configureAsyncSupport(AsyncSupportConfigurer configurer) {\n\t\t\tif (this.beanFactory.containsBean(\n\t\t\t\t\tTaskExecutionAutoConfiguration.APPLICATION_TASK_EXECUTOR_BEAN_NAME)) {\n\t\t\t\tObject taskExecutor = this.beanFactory.getBean(\n\t\t\t\t\t\tTaskExecutionAutoConfiguration.APPLICATION_TASK_EXECUTOR_BEAN_NAME);\n\t\t\t\tif (taskExecutor instanceof AsyncTaskExecutor) {\n\t\t\t\t\tconfigurer.setTaskExecutor(((AsyncTaskExecutor) taskExecutor));\n\t\t\t\t}\n\t\t\t}\n\t\t\tDuration timeout = this.mvcProperties.getAsync().getRequestTimeout();\n\t\t\tif (timeout != null) {\n\t\t\t\tconfigurer.setDefaultTimeout(timeout.toMillis());\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void configurePathMatch(PathMatchConfigurer configurer) {\n\t\t\tconfigurer.setUseSuffixPatternMatch(\n\t\t\t\t\tthis.mvcProperties.getPathmatch().isUseSuffixPattern());\n\t\t\tconfigurer.setUseRegisteredSuffixPatternMatch(\n\t\t\t\t\tthis.mvcProperties.getPathmatch().isUseRegisteredSuffixPattern());\n\t\t}\n\n\t\t@Override\n\t\tpublic void configureContentNegotiation(ContentNegotiationConfigurer configurer) {\n\t\t\tWebMvcProperties.Contentnegotiation contentnegotiation = this.mvcProperties\n\t\t\t\t\t.getContentnegotiation();\n\t\t\tconfigurer.favorPathExtension(contentnegotiation.isFavorPathExtension());\n\t\t\tconfigurer.favorParameter(contentnegotiation.isFavorParameter());\n\t\t\tif (contentnegotiation.getParameterName() != null) {\n\t\t\t\tconfigurer.parameterName(contentnegotiation.getParameterName());\n\t\t\t}\n\t\t\tMap<String, MediaType> mediaTypes = this.mvcProperties.getContentnegotiation()\n\t\t\t\t\t.getMediaTypes();\n\t\t\tmediaTypes.forEach(configurer::mediaType);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic InternalResourceViewResolver defaultViewResolver() {\n\t\t\tInternalResourceViewResolver resolver = new InternalResourceViewResolver();\n\t\t\tresolver.setPrefix(this.mvcProperties.getView().getPrefix());\n\t\t\tresolver.setSuffix(this.mvcProperties.getView().getSuffix());\n\t\t\treturn resolver;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnBean(View.class)\n\t\t@ConditionalOnMissingBean\n\t\tpublic BeanNameViewResolver beanNameViewResolver() {\n\t\t\tBeanNameViewResolver resolver = new BeanNameViewResolver();\n\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 10);\n\t\t\treturn resolver;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnBean(ViewResolver.class)\n\t\t@ConditionalOnMissingBean(name = "viewResolver", value = ContentNegotiatingViewResolver.class)\n\t\tpublic ContentNegotiatingViewResolver viewResolver(BeanFactory beanFactory) {\n\t\t\tContentNegotiatingViewResolver resolver = new ContentNegotiatingViewResolver();\n\t\t\tresolver.setContentNegotiationManager(\n\t\t\t\t\tbeanFactory.getBean(ContentNegotiationManager.class));\n\t\t\t// ContentNegotiatingViewResolver uses all the other view resolvers to locate\n\t\t\t// a view so it should have a high precedence\n\t\t\tresolver.setOrder(Ordered.HIGHEST_PRECEDENCE);\n\t\t\treturn resolver;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnProperty(prefix = "spring.mvc", name = "locale")\n\t\tpublic LocaleResolver localeResolver() {\n\t\t\tif (this.mvcProperties\n\t\t\t\t\t.getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) {\n\t\t\t\treturn new FixedLocaleResolver(this.mvcProperties.getLocale());\n\t\t\t}\n\t\t\tAcceptHeaderLocaleResolver localeResolver = new AcceptHeaderLocaleResolver();\n\t\t\tlocaleResolver.setDefaultLocale(this.mvcProperties.getLocale());\n\t\t\treturn localeResolver;\n\t\t}\n\n\t\t@Override\n\t\tpublic MessageCodesResolver getMessageCodesResolver() {\n\t\t\tif (this.mvcProperties.getMessageCodesResolverFormat() != null) {\n\t\t\t\tDefaultMessageCodesResolver resolver = new DefaultMessageCodesResolver();\n\t\t\t\tresolver.setMessageCodeFormatter(\n\t\t\t\t\t\tthis.mvcProperties.getMessageCodesResolverFormat());\n\t\t\t\treturn resolver;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t@Override\n\t\tpublic void addFormatters(FormatterRegistry registry) {\n\t\t\tfor (Converter<?, ?> converter : getBeansOfType(Converter.class)) {\n\t\t\t\tregistry.addConverter(converter);\n\t\t\t}\n\t\t\tfor (GenericConverter converter : getBeansOfType(GenericConverter.class)) {\n\t\t\t\tregistry.addConverter(converter);\n\t\t\t}\n\t\t\tfor (Formatter<?> formatter : getBeansOfType(Formatter.class)) {\n\t\t\t\tregistry.addFormatter(formatter);\n\t\t\t}\n\t\t}\n\n\t\tprivate <T> Collection<T> getBeansOfType(Class<T> type) {\n\t\t\treturn this.beanFactory.getBeansOfType(type).values();\n\t\t}\n\n\t\t@Override\n\t\tpublic void addResourceHandlers(ResourceHandlerRegistry registry) {\n\t\t\tif (!this.resourceProperties.isAddMappings()) {\n\t\t\t\tlogger.debug("Default resource handling disabled");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tDuration cachePeriod = this.resourceProperties.getCache().getPeriod();\n\t\t\tCacheControl cacheControl = this.resourceProperties.getCache()\n\t\t\t\t\t.getCachecontrol().toHttpCacheControl();\n\t\t\tif (!registry.hasMappingForPattern("/webjars/**")) {\n\t\t\t\tcustomizeResourceHandlerRegistration(registry\n\t\t\t\t\t\t.addResourceHandler("/webjars/**")\n\t\t\t\t\t\t.addResourceLocations("classpath:/META-INF/resources/webjars/")\n\t\t\t\t\t\t.setCachePeriod(getSeconds(cachePeriod))\n\t\t\t\t\t\t.setCacheControl(cacheControl));\n\t\t\t}\n\t\t\tString staticPathPattern = this.mvcProperties.getStaticPathPattern();\n\t\t\tif (!registry.hasMappingForPattern(staticPathPattern)) {\n\t\t\t\tcustomizeResourceHandlerRegistration(\n\t\t\t\t\t\tregistry.addResourceHandler(staticPathPattern)\n\t\t\t\t\t\t\t\t.addResourceLocations(getResourceLocations(\n\t\t\t\t\t\t\t\t\t\tthis.resourceProperties.getStaticLocations()))\n\t\t\t\t\t\t\t\t.setCachePeriod(getSeconds(cachePeriod))\n\t\t\t\t\t\t\t\t.setCacheControl(cacheControl));\n\t\t\t}\n\t\t}\n\n\t\tprivate Integer getSeconds(Duration cachePeriod) {\n\t\t\treturn (cachePeriod != null) ? (int) cachePeriod.getSeconds() : null;\n\t\t}\n\n\t\t@Bean\n\t\tpublic WelcomePageHandlerMapping welcomePageHandlerMapping(\n\t\t\t\tApplicationContext applicationContext) {\n\t\t\treturn new WelcomePageHandlerMapping(\n\t\t\t\t\tnew TemplateAvailabilityProviders(applicationContext),\n\t\t\t\t\tapplicationContext, getWelcomePage(),\n\t\t\t\t\tthis.mvcProperties.getStaticPathPattern());\n\t\t}\n\n\t\tstatic String[] getResourceLocations(String[] staticLocations) {\n\t\t\tString[] locations = new String[staticLocations.length\n\t\t\t\t\t+ SERVLET_LOCATIONS.length];\n\t\t\tSystem.arraycopy(staticLocations, 0, locations, 0, staticLocations.length);\n\t\t\tSystem.arraycopy(SERVLET_LOCATIONS, 0, locations, staticLocations.length,\n\t\t\t\t\tSERVLET_LOCATIONS.length);\n\t\t\treturn locations;\n\t\t}\n\n\t\tprivate Optional<Resource> getWelcomePage() {\n\t\t\tString[] locations = getResourceLocations(\n\t\t\t\t\tthis.resourceProperties.getStaticLocations());\n\t\t\treturn Arrays.stream(locations).map(this::getIndexHtml)\n\t\t\t\t\t.filter(this::isReadable).findFirst();\n\t\t}\n\n\t\tprivate Resource getIndexHtml(String location) {\n\t\t\treturn this.resourceLoader.getResource(location + "index.html");\n\t\t}\n\n\t\tprivate boolean isReadable(Resource resource) {\n\t\t\ttry {\n\t\t\t\treturn resource.exists() && (resource.getURL() != null);\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tprivate void customizeResourceHandlerRegistration(\n\t\t\t\tResourceHandlerRegistration registration) {\n\t\t\tif (this.resourceHandlerRegistrationCustomizer != null) {\n\t\t\t\tthis.resourceHandlerRegistrationCustomizer.customize(registration);\n\t\t\t}\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean({ RequestContextListener.class,\n\t\t\t\tRequestContextFilter.class })\n\t\t@ConditionalOnMissingFilterBean(RequestContextFilter.class)\n\t\tpublic static RequestContextFilter requestContextFilter() {\n\t\t\treturn new OrderedRequestContextFilter();\n\t\t}\n\n\t\t@Configuration\n\t\t@ConditionalOnProperty(value = "spring.mvc.favicon.enabled", matchIfMissing = true)\n\t\tpublic static class FaviconConfiguration implements ResourceLoaderAware {\n\n\t\t\tprivate final ResourceProperties resourceProperties;\n\n\t\t\tprivate ResourceLoader resourceLoader;\n\n\t\t\tpublic FaviconConfiguration(ResourceProperties resourceProperties) {\n\t\t\t\tthis.resourceProperties = resourceProperties;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void setResourceLoader(ResourceLoader resourceLoader) {\n\t\t\t\tthis.resourceLoader = resourceLoader;\n\t\t\t}\n\n\t\t\t@Bean\n\t\t\tpublic SimpleUrlHandlerMapping faviconHandlerMapping() {\n\t\t\t\tSimpleUrlHandlerMapping mapping = new SimpleUrlHandlerMapping();\n\t\t\t\tmapping.setOrder(Ordered.HIGHEST_PRECEDENCE + 1);\n\t\t\t\tmapping.setUrlMap(Collections.singletonMap("**/favicon.ico",\n\t\t\t\t\t\tfaviconRequestHandler()));\n\t\t\t\treturn mapping;\n\t\t\t}\n\n\t\t\t@Bean\n\t\t\tpublic ResourceHttpRequestHandler faviconRequestHandler() {\n\t\t\t\tResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler();\n\t\t\t\trequestHandler.setLocations(resolveFaviconLocations());\n\t\t\t\treturn requestHandler;\n\t\t\t}\n\n\t\t\tprivate List<Resource> resolveFaviconLocations() {\n\t\t\t\tString[] staticLocations = getResourceLocations(\n\t\t\t\t\t\tthis.resourceProperties.getStaticLocations());\n\t\t\t\tList<Resource> locations = new ArrayList<>(staticLocations.length + 1);\n\t\t\t\tArrays.stream(staticLocations).map(this.resourceLoader::getResource)\n\t\t\t\t\t\t.forEach(locations::add);\n\t\t\t\tlocations.add(new ClassPathResource("/"));\n\t\t\t\treturn Collections.unmodifiableList(locations);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Configuration equivalent to {@code @EnableWebMvc}.\n\t */\n\t@Configuration\n\tpublic static class EnableWebMvcConfiguration extends DelegatingWebMvcConfiguration {\n\n\t\tprivate final WebMvcProperties mvcProperties;\n\n\t\tprivate final ListableBeanFactory beanFactory;\n\n\t\tprivate final WebMvcRegistrations mvcRegistrations;\n\n\t\tpublic EnableWebMvcConfiguration(\n\t\t\t\tObjectProvider<WebMvcProperties> mvcPropertiesProvider,\n\t\t\t\tObjectProvider<WebMvcRegistrations> mvcRegistrationsProvider,\n\t\t\t\tListableBeanFactory beanFactory) {\n\t\t\tthis.mvcProperties = mvcPropertiesProvider.getIfAvailable();\n\t\t\tthis.mvcRegistrations = mvcRegistrationsProvider.getIfUnique();\n\t\t\tthis.beanFactory = beanFactory;\n\t\t}\n\n\t\t@Bean\n\t\t@Override\n\t\tpublic RequestMappingHandlerAdapter requestMappingHandlerAdapter() {\n\t\t\tRequestMappingHandlerAdapter adapter = super.requestMappingHandlerAdapter();\n\t\t\tadapter.setIgnoreDefaultModelOnRedirect(this.mvcProperties == null\n\t\t\t\t\t|| this.mvcProperties.isIgnoreDefaultModelOnRedirect());\n\t\t\treturn adapter;\n\t\t}\n\n\t\t@Override\n\t\tprotected RequestMappingHandlerAdapter createRequestMappingHandlerAdapter() {\n\t\t\tif (this.mvcRegistrations != null\n\t\t\t\t\t&& this.mvcRegistrations.getRequestMappingHandlerAdapter() != null) {\n\t\t\t\treturn this.mvcRegistrations.getRequestMappingHandlerAdapter();\n\t\t\t}\n\t\t\treturn super.createRequestMappingHandlerAdapter();\n\t\t}\n\n\t\t@Bean\n\t\t@Primary\n\t\t@Override\n\t\tpublic RequestMappingHandlerMapping requestMappingHandlerMapping() {\n\t\t\t// Must be @Primary for MvcUriComponentsBuilder to work\n\t\t\treturn super.requestMappingHandlerMapping();\n\t\t}\n\n\t\t@Bean\n\t\t@Override\n\t\tpublic FormattingConversionService mvcConversionService() {\n\t\t\tWebConversionService conversionService = new WebConversionService(\n\t\t\t\t\tthis.mvcProperties.getDateFormat());\n\t\t\taddFormatters(conversionService);\n\t\t\treturn conversionService;\n\t\t}\n\n\t\t@Bean\n\t\t@Override\n\t\tpublic Validator mvcValidator() {\n\t\t\tif (!ClassUtils.isPresent("javax.validation.Validator",\n\t\t\t\t\tgetClass().getClassLoader())) {\n\t\t\t\treturn super.mvcValidator();\n\t\t\t}\n\t\t\treturn ValidatorAdapter.get(getApplicationContext(), getValidator());\n\t\t}\n\n\t\t@Override\n\t\tprotected RequestMappingHandlerMapping createRequestMappingHandlerMapping() {\n\t\t\tif (this.mvcRegistrations != null\n\t\t\t\t\t&& this.mvcRegistrations.getRequestMappingHandlerMapping() != null) {\n\t\t\t\treturn this.mvcRegistrations.getRequestMappingHandlerMapping();\n\t\t\t}\n\t\t\treturn super.createRequestMappingHandlerMapping();\n\t\t}\n\n\t\t@Override\n\t\tprotected ConfigurableWebBindingInitializer getConfigurableWebBindingInitializer() {\n\t\t\ttry {\n\t\t\t\treturn this.beanFactory.getBean(ConfigurableWebBindingInitializer.class);\n\t\t\t}\n\t\t\tcatch (NoSuchBeanDefinitionException ex) {\n\t\t\t\treturn super.getConfigurableWebBindingInitializer();\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tprotected ExceptionHandlerExceptionResolver createExceptionHandlerExceptionResolver() {\n\t\t\tif (this.mvcRegistrations != null && this.mvcRegistrations\n\t\t\t\t\t.getExceptionHandlerExceptionResolver() != null) {\n\t\t\t\treturn this.mvcRegistrations.getExceptionHandlerExceptionResolver();\n\t\t\t}\n\t\t\treturn super.createExceptionHandlerExceptionResolver();\n\t\t}\n\n\t\t@Override\n\t\tprotected void configureHandlerExceptionResolvers(\n\t\t\t\tList<HandlerExceptionResolver> exceptionResolvers) {\n\t\t\tsuper.configureHandlerExceptionResolvers(exceptionResolvers);\n\t\t\tif (exceptionResolvers.isEmpty()) {\n\t\t\t\taddDefaultHandlerExceptionResolvers(exceptionResolvers);\n\t\t\t}\n\t\t\tif (this.mvcProperties.isLogResolvedException()) {\n\t\t\t\tfor (HandlerExceptionResolver resolver : exceptionResolvers) {\n\t\t\t\t\tif (resolver instanceof AbstractHandlerExceptionResolver) {\n\t\t\t\t\t\t((AbstractHandlerExceptionResolver) resolver)\n\t\t\t\t\t\t\t\t.setWarnLogCategory(resolver.getClass().getName());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t@Bean\n\t\t@Override\n\t\tpublic ContentNegotiationManager mvcContentNegotiationManager() {\n\t\t\tContentNegotiationManager manager = super.mvcContentNegotiationManager();\n\t\t\tList<ContentNegotiationStrategy> strategies = manager.getStrategies();\n\t\t\tListIterator<ContentNegotiationStrategy> iterator = strategies.listIterator();\n\t\t\twhile (iterator.hasNext()) {\n\t\t\t\tContentNegotiationStrategy strategy = iterator.next();\n\t\t\t\tif (strategy instanceof PathExtensionContentNegotiationStrategy) {\n\t\t\t\t\titerator.set(new OptionalPathExtensionContentNegotiationStrategy(\n\t\t\t\t\t\t\tstrategy));\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn manager;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnEnabledResourceChain\n\tstatic class ResourceChainCustomizerConfiguration {\n\n\t\t@Bean\n\t\tpublic ResourceChainResourceHandlerRegistrationCustomizer resourceHandlerRegistrationCustomizer() {\n\t\t\treturn new ResourceChainResourceHandlerRegistrationCustomizer();\n\t\t}\n\n\t}\n\n\tinterface ResourceHandlerRegistrationCustomizer {\n\n\t\tvoid customize(ResourceHandlerRegistration registration);\n\n\t}\n\n\tstatic class ResourceChainResourceHandlerRegistrationCustomizer\n\t\t\timplements ResourceHandlerRegistrationCustomizer {\n\n\t\t@Autowired\n\t\tprivate ResourceProperties resourceProperties = new ResourceProperties();\n\n\t\t@Override\n\t\tpublic void customize(ResourceHandlerRegistration registration) {\n\t\t\tResourceProperties.Chain properties = this.resourceProperties.getChain();\n\t\t\tconfigureResourceChain(properties,\n\t\t\t\t\tregistration.resourceChain(properties.isCache()));\n\t\t}\n\n\t\tprivate void configureResourceChain(ResourceProperties.Chain properties,\n\t\t\t\tResourceChainRegistration chain) {\n\t\t\tStrategy strategy = properties.getStrategy();\n\t\t\tif (properties.isCompressed()) {\n\t\t\t\tchain.addResolver(new EncodedResourceResolver());\n\t\t\t}\n\t\t\tif (strategy.getFixed().isEnabled() || strategy.getContent().isEnabled()) {\n\t\t\t\tchain.addResolver(getVersionResourceResolver(strategy));\n\t\t\t}\n\t\t\tif (properties.isHtmlApplicationCache()) {\n\t\t\t\tchain.addTransformer(new AppCacheManifestTransformer());\n\t\t\t}\n\t\t}\n\n\t\tprivate ResourceResolver getVersionResourceResolver(\n\t\t\t\tResourceProperties.Strategy properties) {\n\t\t\tVersionResourceResolver resolver = new VersionResourceResolver();\n\t\t\tif (properties.getFixed().isEnabled()) {\n\t\t\t\tString version = properties.getFixed().getVersion();\n\t\t\t\tString[] paths = properties.getFixed().getPaths();\n\t\t\t\tresolver.addFixedVersionStrategy(version, paths);\n\t\t\t}\n\t\t\tif (properties.getContent().isEnabled()) {\n\t\t\t\tString[] paths = properties.getContent().getPaths();\n\t\t\t\tresolver.addContentVersionStrategy(paths);\n\t\t\t}\n\t\t\treturn resolver;\n\t\t}\n\n\t}\n\n\t/**\n\t * Decorator to make {@link PathExtensionContentNegotiationStrategy} optional\n\t * depending on a request attribute.\n\t */\n\tstatic class OptionalPathExtensionContentNegotiationStrategy\n\t\t\timplements ContentNegotiationStrategy {\n\n\t\tprivate static final String SKIP_ATTRIBUTE = PathExtensionContentNegotiationStrategy.class\n\t\t\t\t.getName() + ".SKIP";\n\n\t\tprivate final ContentNegotiationStrategy delegate;\n\n\t\tOptionalPathExtensionContentNegotiationStrategy(\n\t\t\t\tContentNegotiationStrategy delegate) {\n\t\t\tthis.delegate = delegate;\n\t\t}\n\n\t\t@Override\n\t\tpublic List<MediaType> resolveMediaTypes(NativeWebRequest webRequest)\n\t\t\t\tthrows HttpMediaTypeNotAcceptableException {\n\t\t\tObject skip = webRequest.getAttribute(SKIP_ATTRIBUTE,\n\t\t\t\t\tRequestAttributes.SCOPE_REQUEST);\n\t\t\tif (skip != null && Boolean.parseBoolean(skip.toString())) {\n\t\t\t\treturn MEDIA_TYPE_ALL_LIST;\n\t\t\t}\n\t\t\treturn this.delegate.resolveMediaTypes(webRequest);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web.servlet;\n\nimport java.time.Duration;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.Map;\nimport java.util.Optional;\n\nimport javax.servlet.Servlet;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.ListableBeanFactory;\nimport org.springframework.beans.factory.NoSuchBeanDefinitionException;\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureOrder;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.autoconfigure.http.HttpMessageConverters;\nimport org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration;\nimport org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders;\nimport org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration;\nimport org.springframework.boot.autoconfigure.validation.ValidatorAdapter;\nimport org.springframework.boot.autoconfigure.web.ConditionalOnEnabledResourceChain;\nimport org.springframework.boot.autoconfigure.web.ResourceProperties;\nimport org.springframework.boot.autoconfigure.web.ResourceProperties.Strategy;\nimport org.springframework.boot.autoconfigure.web.format.WebConversionService;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.web.servlet.filter.OrderedFormContentFilter;\nimport org.springframework.boot.web.servlet.filter.OrderedHiddenHttpMethodFilter;\nimport org.springframework.boot.web.servlet.filter.OrderedRequestContextFilter;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ResourceLoaderAware;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.core.convert.converter.GenericConverter;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.core.task.AsyncTaskExecutor;\nimport org.springframework.format.Formatter;\nimport org.springframework.format.FormatterRegistry;\nimport org.springframework.format.support.FormattingConversionService;\nimport org.springframework.http.CacheControl;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.validation.DefaultMessageCodesResolver;\nimport org.springframework.validation.MessageCodesResolver;\nimport org.springframework.validation.Validator;\nimport org.springframework.web.HttpMediaTypeNotAcceptableException;\nimport org.springframework.web.accept.ContentNegotiationManager;\nimport org.springframework.web.accept.ContentNegotiationStrategy;\nimport org.springframework.web.accept.PathExtensionContentNegotiationStrategy;\nimport org.springframework.web.bind.support.ConfigurableWebBindingInitializer;\nimport org.springframework.web.context.request.NativeWebRequest;\nimport org.springframework.web.context.request.RequestAttributes;\nimport org.springframework.web.context.request.RequestContextListener;\nimport org.springframework.web.filter.FormContentFilter;\nimport org.springframework.web.filter.HiddenHttpMethodFilter;\nimport org.springframework.web.filter.RequestContextFilter;\nimport org.springframework.web.servlet.DispatcherServlet;\nimport org.springframework.web.servlet.HandlerExceptionResolver;\nimport org.springframework.web.servlet.LocaleResolver;\nimport org.springframework.web.servlet.View;\nimport org.springframework.web.servlet.ViewResolver;\nimport org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer;\nimport org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer;\nimport org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\nimport org.springframework.web.servlet.config.annotation.PathMatchConfigurer;\nimport org.springframework.web.servlet.config.annotation.ResourceChainRegistration;\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration;\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\nimport org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver;\nimport org.springframework.web.servlet.handler.SimpleUrlHandlerMapping;\nimport org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver;\nimport org.springframework.web.servlet.i18n.FixedLocaleResolver;\nimport org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver;\nimport org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;\nimport org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;\nimport org.springframework.web.servlet.resource.AppCacheManifestTransformer;\nimport org.springframework.web.servlet.resource.EncodedResourceResolver;\nimport org.springframework.web.servlet.resource.ResourceHttpRequestHandler;\nimport org.springframework.web.servlet.resource.ResourceResolver;\nimport org.springframework.web.servlet.resource.VersionResourceResolver;\nimport org.springframework.web.servlet.view.BeanNameViewResolver;\nimport org.springframework.web.servlet.view.ContentNegotiatingViewResolver;\nimport org.springframework.web.servlet.view.InternalResourceViewResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link EnableWebMvc Web MVC}.\n *\n * @author Phillip Webb\n * @author Dave Syer\n * @author Andy Wilkinson\n * @author Sébastien Deleuze\n * @author Eddú Meléndez\n * @author Stephane Nicoll\n * @author Kristine Jetzke\n * @author Bruce Brouwer\n * @author Artsiom Yudovin\n */\n@Configuration\n@ConditionalOnWebApplication(type = Type.SERVLET)\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class })\n@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)\n@AutoConfigureAfter({ DispatcherServletAutoConfiguration.class,\n\t\tTaskExecutionAutoConfiguration.class, ValidationAutoConfiguration.class })\npublic class WebMvcAutoConfiguration {\n\n\tpublic static final String DEFAULT_PREFIX = "";\n\n\tpublic static final String DEFAULT_SUFFIX = "";\n\n\tprivate static final String[] SERVLET_LOCATIONS = { "/" };\n\n\t@Bean\n\t@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)\n\t@ConditionalOnProperty(prefix = "spring.mvc.hiddenmethod.filter", name = "enabled", matchIfMissing = true)\n\tpublic OrderedHiddenHttpMethodFilter hiddenHttpMethodFilter() {\n\t\treturn new OrderedHiddenHttpMethodFilter();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(FormContentFilter.class)\n\t@ConditionalOnProperty(prefix = "spring.mvc.formcontent.filter", name = "enabled", matchIfMissing = true)\n\tpublic OrderedFormContentFilter formContentFilter() {\n\t\treturn new OrderedFormContentFilter();\n\t}\n\n\t// Defined as a nested config to ensure WebMvcConfigurer is not read when not\n\t// on the classpath\n\t@Configuration\n\t@Import(EnableWebMvcConfiguration.class)\n\t@EnableConfigurationProperties({ WebMvcProperties.class, ResourceProperties.class })\n\t@Order(0)\n\tpublic static class WebMvcAutoConfigurationAdapter\n\t\t\timplements WebMvcConfigurer, ResourceLoaderAware {\n\n\t\tprivate static final Log logger = LogFactory.getLog(WebMvcConfigurer.class);\n\n\t\tprivate final ResourceProperties resourceProperties;\n\n\t\tprivate final WebMvcProperties mvcProperties;\n\n\t\tprivate final ListableBeanFactory beanFactory;\n\n\t\tprivate final ObjectProvider<HttpMessageConverters> messageConvertersProvider;\n\n\t\tfinal ResourceHandlerRegistrationCustomizer resourceHandlerRegistrationCustomizer;\n\n\t\tprivate ResourceLoader resourceLoader;\n\n\t\tpublic WebMvcAutoConfigurationAdapter(ResourceProperties resourceProperties,\n\t\t\t\tWebMvcProperties mvcProperties, ListableBeanFactory beanFactory,\n\t\t\t\tObjectProvider<HttpMessageConverters> messageConvertersProvider,\n\t\t\t\tObjectProvider<ResourceHandlerRegistrationCustomizer> resourceHandlerRegistrationCustomizerProvider) {\n\t\t\tthis.resourceProperties = resourceProperties;\n\t\t\tthis.mvcProperties = mvcProperties;\n\t\t\tthis.beanFactory = beanFactory;\n\t\t\tthis.messageConvertersProvider = messageConvertersProvider;\n\t\t\tthis.resourceHandlerRegistrationCustomizer = resourceHandlerRegistrationCustomizerProvider\n\t\t\t\t\t.getIfAvailable();\n\t\t}\n\n\t\t@Override\n\t\tpublic void setResourceLoader(ResourceLoader resourceLoader) {\n\t\t\tthis.resourceLoader = resourceLoader;\n\t\t}\n\n\t\t@Override\n\t\tpublic void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n\t\t\tthis.messageConvertersProvider.ifAvailable((customConverters) -> converters\n\t\t\t\t\t.addAll(customConverters.getConverters()));\n\t\t}\n\n\t\t@Override\n\t\tpublic void configureAsyncSupport(AsyncSupportConfigurer configurer) {\n\t\t\tif (this.beanFactory.containsBean(\n\t\t\t\t\tTaskExecutionAutoConfiguration.APPLICATION_TASK_EXECUTOR_BEAN_NAME)) {\n\t\t\t\tObject taskExecutor = this.beanFactory.getBean(\n\t\t\t\t\t\tTaskExecutionAutoConfiguration.APPLICATION_TASK_EXECUTOR_BEAN_NAME);\n\t\t\t\tif (taskExecutor instanceof AsyncTaskExecutor) {\n\t\t\t\t\tconfigurer.setTaskExecutor(((AsyncTaskExecutor) taskExecutor));\n\t\t\t\t}\n\t\t\t}\n\t\t\tDuration timeout = this.mvcProperties.getAsync().getRequestTimeout();\n\t\t\tif (timeout != null) {\n\t\t\t\tconfigurer.setDefaultTimeout(timeout.toMillis());\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void configurePathMatch(PathMatchConfigurer configurer) {\n\t\t\tconfigurer.setUseSuffixPatternMatch(\n\t\t\t\t\tthis.mvcProperties.getPathmatch().isUseSuffixPattern());\n\t\t\tconfigurer.setUseRegisteredSuffixPatternMatch(\n\t\t\t\t\tthis.mvcProperties.getPathmatch().isUseRegisteredSuffixPattern());\n\t\t}\n\n\t\t@Override\n\t\tpublic void configureContentNegotiation(ContentNegotiationConfigurer configurer) {\n\t\t\tWebMvcProperties.Contentnegotiation contentnegotiation = this.mvcProperties\n\t\t\t\t\t.getContentnegotiation();\n\t\t\tconfigurer.favorPathExtension(contentnegotiation.isFavorPathExtension());\n\t\t\tconfigurer.favorParameter(contentnegotiation.isFavorParameter());\n\t\t\tif (contentnegotiation.getParameterName() != null) {\n\t\t\t\tconfigurer.parameterName(contentnegotiation.getParameterName());\n\t\t\t}\n\t\t\tMap<String, MediaType> mediaTypes = this.mvcProperties.getContentnegotiation()\n\t\t\t\t\t.getMediaTypes();\n\t\t\tmediaTypes.forEach(configurer::mediaType);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic InternalResourceViewResolver defaultViewResolver() {\n\t\t\tInternalResourceViewResolver resolver = new InternalResourceViewResolver();\n\t\t\tresolver.setPrefix(this.mvcProperties.getView().getPrefix());\n\t\t\tresolver.setSuffix(this.mvcProperties.getView().getSuffix());\n\t\t\treturn resolver;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnBean(View.class)\n\t\t@ConditionalOnMissingBean\n\t\tpublic BeanNameViewResolver beanNameViewResolver() {\n\t\t\tBeanNameViewResolver resolver = new BeanNameViewResolver();\n\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 10);\n\t\t\treturn resolver;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnBean(ViewResolver.class)\n\t\t@ConditionalOnMissingBean(name = "viewResolver", value = ContentNegotiatingViewResolver.class)\n\t\tpublic ContentNegotiatingViewResolver viewResolver(BeanFactory beanFactory) {\n\t\t\tContentNegotiatingViewResolver resolver = new ContentNegotiatingViewResolver();\n\t\t\tresolver.setContentNegotiationManager(\n\t\t\t\t\tbeanFactory.getBean(ContentNegotiationManager.class));\n\t\t\t// ContentNegotiatingViewResolver uses all the other view resolvers to locate\n\t\t\t// a view so it should have a high precedence\n\t\t\tresolver.setOrder(Ordered.HIGHEST_PRECEDENCE);\n\t\t\treturn resolver;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnProperty(prefix = "spring.mvc", name = "locale")\n\t\tpublic LocaleResolver localeResolver() {\n\t\t\tif (this.mvcProperties\n\t\t\t\t\t.getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) {\n\t\t\t\treturn new FixedLocaleResolver(this.mvcProperties.getLocale());\n\t\t\t}\n\t\t\tAcceptHeaderLocaleResolver localeResolver = new AcceptHeaderLocaleResolver();\n\t\t\tlocaleResolver.setDefaultLocale(this.mvcProperties.getLocale());\n\t\t\treturn localeResolver;\n\t\t}\n\n\t\t@Override\n\t\tpublic MessageCodesResolver getMessageCodesResolver() {\n\t\t\tif (this.mvcProperties.getMessageCodesResolverFormat() != null) {\n\t\t\t\tDefaultMessageCodesResolver resolver = new DefaultMessageCodesResolver();\n\t\t\t\tresolver.setMessageCodeFormatter(\n\t\t\t\t\t\tthis.mvcProperties.getMessageCodesResolverFormat());\n\t\t\t\treturn resolver;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t@Override\n\t\tpublic void addFormatters(FormatterRegistry registry) {\n\t\t\tfor (Converter<?, ?> converter : getBeansOfType(Converter.class)) {\n\t\t\t\tregistry.addConverter(converter);\n\t\t\t}\n\t\t\tfor (GenericConverter converter : getBeansOfType(GenericConverter.class)) {\n\t\t\t\tregistry.addConverter(converter);\n\t\t\t}\n\t\t\tfor (Formatter<?> formatter : getBeansOfType(Formatter.class)) {\n\t\t\t\tregistry.addFormatter(formatter);\n\t\t\t}\n\t\t}\n\n\t\tprivate <T> Collection<T> getBeansOfType(Class<T> type) {\n\t\t\treturn this.beanFactory.getBeansOfType(type).values();\n\t\t}\n\n\t\t@Override\n\t\tpublic void addResourceHandlers(ResourceHandlerRegistry registry) {\n\t\t\tif (!this.resourceProperties.isAddMappings()) {\n\t\t\t\tlogger.debug("Default resource handling disabled");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tDuration cachePeriod = this.resourceProperties.getCache().getPeriod();\n\t\t\tCacheControl cacheControl = this.resourceProperties.getCache()\n\t\t\t\t\t.getCachecontrol().toHttpCacheControl();\n\t\t\tif (!registry.hasMappingForPattern("/webjars/**")) {\n\t\t\t\tcustomizeResourceHandlerRegistration(registry\n\t\t\t\t\t\t.addResourceHandler("/webjars/**")\n\t\t\t\t\t\t.addResourceLocations("classpath:/META-INF/resources/webjars/")\n\t\t\t\t\t\t.setCachePeriod(getSeconds(cachePeriod))\n\t\t\t\t\t\t.setCacheControl(cacheControl));\n\t\t\t}\n\t\t\tString staticPathPattern = this.mvcProperties.getStaticPathPattern();\n\t\t\tif (!registry.hasMappingForPattern(staticPathPattern)) {\n\t\t\t\tcustomizeResourceHandlerRegistration(\n\t\t\t\t\t\tregistry.addResourceHandler(staticPathPattern)\n\t\t\t\t\t\t\t\t.addResourceLocations(getResourceLocations(\n\t\t\t\t\t\t\t\t\t\tthis.resourceProperties.getStaticLocations()))\n\t\t\t\t\t\t\t\t.setCachePeriod(getSeconds(cachePeriod))\n\t\t\t\t\t\t\t\t.setCacheControl(cacheControl));\n\t\t\t}\n\t\t}\n\n\t\tprivate Integer getSeconds(Duration cachePeriod) {\n\t\t\treturn (cachePeriod != null) ? (int) cachePeriod.getSeconds() : null;\n\t\t}\n\n\t\t@Bean\n\t\tpublic WelcomePageHandlerMapping welcomePageHandlerMapping(\n\t\t\t\tApplicationContext applicationContext) {\n\t\t\treturn new WelcomePageHandlerMapping(\n\t\t\t\t\tnew TemplateAvailabilityProviders(applicationContext),\n\t\t\t\t\tapplicationContext, getWelcomePage(),\n\t\t\t\t\tthis.mvcProperties.getStaticPathPattern());\n\t\t}\n\n\t\tstatic String[] getResourceLocations(String[] staticLocations) {\n\t\t\tString[] locations = new String[staticLocations.length\n\t\t\t\t\t+ SERVLET_LOCATIONS.length];\n\t\t\tSystem.arraycopy(staticLocations, 0, locations, 0, staticLocations.length);\n\t\t\tSystem.arraycopy(SERVLET_LOCATIONS, 0, locations, staticLocations.length,\n\t\t\t\t\tSERVLET_LOCATIONS.length);\n\t\t\treturn locations;\n\t\t}\n\n\t\tprivate Optional<Resource> getWelcomePage() {\n\t\t\tString[] locations = getResourceLocations(\n\t\t\t\t\tthis.resourceProperties.getStaticLocations());\n\t\t\treturn Arrays.stream(locations).map(this::getIndexHtml)\n\t\t\t\t\t.filter(this::isReadable).findFirst();\n\t\t}\n\n\t\tprivate Resource getIndexHtml(String location) {\n\t\t\treturn this.resourceLoader.getResource(location + "index.html");\n\t\t}\n\n\t\tprivate boolean isReadable(Resource resource) {\n\t\t\ttry {\n\t\t\t\treturn resource.exists() && (resource.getURL() != null);\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tprivate void customizeResourceHandlerRegistration(\n\t\t\t\tResourceHandlerRegistration registration) {\n\t\t\tif (this.resourceHandlerRegistrationCustomizer != null) {\n\t\t\t\tthis.resourceHandlerRegistrationCustomizer.customize(registration);\n\t\t\t}\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean({ RequestContextListener.class,\n\t\t\t\tRequestContextFilter.class })\n\t\tpublic static RequestContextFilter requestContextFilter() {\n\t\t\treturn new OrderedRequestContextFilter();\n\t\t}\n\n\t\t@Configuration\n\t\t@ConditionalOnProperty(value = "spring.mvc.favicon.enabled", matchIfMissing = true)\n\t\tpublic static class FaviconConfiguration implements ResourceLoaderAware {\n\n\t\t\tprivate final ResourceProperties resourceProperties;\n\n\t\t\tprivate ResourceLoader resourceLoader;\n\n\t\t\tpublic FaviconConfiguration(ResourceProperties resourceProperties) {\n\t\t\t\tthis.resourceProperties = resourceProperties;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void setResourceLoader(ResourceLoader resourceLoader) {\n\t\t\t\tthis.resourceLoader = resourceLoader;\n\t\t\t}\n\n\t\t\t@Bean\n\t\t\tpublic SimpleUrlHandlerMapping faviconHandlerMapping() {\n\t\t\t\tSimpleUrlHandlerMapping mapping = new SimpleUrlHandlerMapping();\n\t\t\t\tmapping.setOrder(Ordered.HIGHEST_PRECEDENCE + 1);\n\t\t\t\tmapping.setUrlMap(Collections.singletonMap("**/favicon.ico",\n\t\t\t\t\t\tfaviconRequestHandler()));\n\t\t\t\treturn mapping;\n\t\t\t}\n\n\t\t\t@Bean\n\t\t\tpublic ResourceHttpRequestHandler faviconRequestHandler() {\n\t\t\t\tResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler();\n\t\t\t\trequestHandler.setLocations(resolveFaviconLocations());\n\t\t\t\treturn requestHandler;\n\t\t\t}\n\n\t\t\tprivate List<Resource> resolveFaviconLocations() {\n\t\t\t\tString[] staticLocations = getResourceLocations(\n\t\t\t\t\t\tthis.resourceProperties.getStaticLocations());\n\t\t\t\tList<Resource> locations = new ArrayList<>(staticLocations.length + 1);\n\t\t\t\tArrays.stream(staticLocations).map(this.resourceLoader::getResource)\n\t\t\t\t\t\t.forEach(locations::add);\n\t\t\t\tlocations.add(new ClassPathResource("/"));\n\t\t\t\treturn Collections.unmodifiableList(locations);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Configuration equivalent to {@code @EnableWebMvc}.\n\t */\n\t@Configuration\n\tpublic static class EnableWebMvcConfiguration extends DelegatingWebMvcConfiguration {\n\n\t\tprivate final WebMvcProperties mvcProperties;\n\n\t\tprivate final ListableBeanFactory beanFactory;\n\n\t\tprivate final WebMvcRegistrations mvcRegistrations;\n\n\t\tpublic EnableWebMvcConfiguration(\n\t\t\t\tObjectProvider<WebMvcProperties> mvcPropertiesProvider,\n\t\t\t\tObjectProvider<WebMvcRegistrations> mvcRegistrationsProvider,\n\t\t\t\tListableBeanFactory beanFactory) {\n\t\t\tthis.mvcProperties = mvcPropertiesProvider.getIfAvailable();\n\t\t\tthis.mvcRegistrations = mvcRegistrationsProvider.getIfUnique();\n\t\t\tthis.beanFactory = beanFactory;\n\t\t}\n\n\t\t@Bean\n\t\t@Override\n\t\tpublic RequestMappingHandlerAdapter requestMappingHandlerAdapter() {\n\t\t\tRequestMappingHandlerAdapter adapter = super.requestMappingHandlerAdapter();\n\t\t\tadapter.setIgnoreDefaultModelOnRedirect(this.mvcProperties == null\n\t\t\t\t\t|| this.mvcProperties.isIgnoreDefaultModelOnRedirect());\n\t\t\treturn adapter;\n\t\t}\n\n\t\t@Override\n\t\tprotected RequestMappingHandlerAdapter createRequestMappingHandlerAdapter() {\n\t\t\tif (this.mvcRegistrations != null\n\t\t\t\t\t&& this.mvcRegistrations.getRequestMappingHandlerAdapter() != null) {\n\t\t\t\treturn this.mvcRegistrations.getRequestMappingHandlerAdapter();\n\t\t\t}\n\t\t\treturn super.createRequestMappingHandlerAdapter();\n\t\t}\n\n\t\t@Bean\n\t\t@Primary\n\t\t@Override\n\t\tpublic RequestMappingHandlerMapping requestMappingHandlerMapping() {\n\t\t\t// Must be @Primary for MvcUriComponentsBuilder to work\n\t\t\treturn super.requestMappingHandlerMapping();\n\t\t}\n\n\t\t@Bean\n\t\t@Override\n\t\tpublic FormattingConversionService mvcConversionService() {\n\t\t\tWebConversionService conversionService = new WebConversionService(\n\t\t\t\t\tthis.mvcProperties.getDateFormat());\n\t\t\taddFormatters(conversionService);\n\t\t\treturn conversionService;\n\t\t}\n\n\t\t@Bean\n\t\t@Override\n\t\tpublic Validator mvcValidator() {\n\t\t\tif (!ClassUtils.isPresent("javax.validation.Validator",\n\t\t\t\t\tgetClass().getClassLoader())) {\n\t\t\t\treturn super.mvcValidator();\n\t\t\t}\n\t\t\treturn ValidatorAdapter.get(getApplicationContext(), getValidator());\n\t\t}\n\n\t\t@Override\n\t\tprotected RequestMappingHandlerMapping createRequestMappingHandlerMapping() {\n\t\t\tif (this.mvcRegistrations != null\n\t\t\t\t\t&& this.mvcRegistrations.getRequestMappingHandlerMapping() != null) {\n\t\t\t\treturn this.mvcRegistrations.getRequestMappingHandlerMapping();\n\t\t\t}\n\t\t\treturn super.createRequestMappingHandlerMapping();\n\t\t}\n\n\t\t@Override\n\t\tprotected ConfigurableWebBindingInitializer getConfigurableWebBindingInitializer() {\n\t\t\ttry {\n\t\t\t\treturn this.beanFactory.getBean(ConfigurableWebBindingInitializer.class);\n\t\t\t}\n\t\t\tcatch (NoSuchBeanDefinitionException ex) {\n\t\t\t\treturn super.getConfigurableWebBindingInitializer();\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tprotected ExceptionHandlerExceptionResolver createExceptionHandlerExceptionResolver() {\n\t\t\tif (this.mvcRegistrations != null && this.mvcRegistrations\n\t\t\t\t\t.getExceptionHandlerExceptionResolver() != null) {\n\t\t\t\treturn this.mvcRegistrations.getExceptionHandlerExceptionResolver();\n\t\t\t}\n\t\t\treturn super.createExceptionHandlerExceptionResolver();\n\t\t}\n\n\t\t@Override\n\t\tprotected void configureHandlerExceptionResolvers(\n\t\t\t\tList<HandlerExceptionResolver> exceptionResolvers) {\n\t\t\tsuper.configureHandlerExceptionResolvers(exceptionResolvers);\n\t\t\tif (exceptionResolvers.isEmpty()) {\n\t\t\t\taddDefaultHandlerExceptionResolvers(exceptionResolvers);\n\t\t\t}\n\t\t\tif (this.mvcProperties.isLogResolvedException()) {\n\t\t\t\tfor (HandlerExceptionResolver resolver : exceptionResolvers) {\n\t\t\t\t\tif (resolver instanceof AbstractHandlerExceptionResolver) {\n\t\t\t\t\t\t((AbstractHandlerExceptionResolver) resolver)\n\t\t\t\t\t\t\t\t.setWarnLogCategory(resolver.getClass().getName());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t@Bean\n\t\t@Override\n\t\tpublic ContentNegotiationManager mvcContentNegotiationManager() {\n\t\t\tContentNegotiationManager manager = super.mvcContentNegotiationManager();\n\t\t\tList<ContentNegotiationStrategy> strategies = manager.getStrategies();\n\t\t\tListIterator<ContentNegotiationStrategy> iterator = strategies.listIterator();\n\t\t\twhile (iterator.hasNext()) {\n\t\t\t\tContentNegotiationStrategy strategy = iterator.next();\n\t\t\t\tif (strategy instanceof PathExtensionContentNegotiationStrategy) {\n\t\t\t\t\titerator.set(new OptionalPathExtensionContentNegotiationStrategy(\n\t\t\t\t\t\t\tstrategy));\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn manager;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnEnabledResourceChain\n\tstatic class ResourceChainCustomizerConfiguration {\n\n\t\t@Bean\n\t\tpublic ResourceChainResourceHandlerRegistrationCustomizer resourceHandlerRegistrationCustomizer() {\n\t\t\treturn new ResourceChainResourceHandlerRegistrationCustomizer();\n\t\t}\n\n\t}\n\n\tinterface ResourceHandlerRegistrationCustomizer {\n\n\t\tvoid customize(ResourceHandlerRegistration registration);\n\n\t}\n\n\tstatic class ResourceChainResourceHandlerRegistrationCustomizer\n\t\t\timplements ResourceHandlerRegistrationCustomizer {\n\n\t\t@Autowired\n\t\tprivate ResourceProperties resourceProperties = new ResourceProperties();\n\n\t\t@Override\n\t\tpublic void customize(ResourceHandlerRegistration registration) {\n\t\t\tResourceProperties.Chain properties = this.resourceProperties.getChain();\n\t\t\tconfigureResourceChain(properties,\n\t\t\t\t\tregistration.resourceChain(properties.isCache()));\n\t\t}\n\n\t\tprivate void configureResourceChain(ResourceProperties.Chain properties,\n\t\t\t\tResourceChainRegistration chain) {\n\t\t\tStrategy strategy = properties.getStrategy();\n\t\t\tif (properties.isCompressed()) {\n\t\t\t\tchain.addResolver(new EncodedResourceResolver());\n\t\t\t}\n\t\t\tif (strategy.getFixed().isEnabled() || strategy.getContent().isEnabled()) {\n\t\t\t\tchain.addResolver(getVersionResourceResolver(strategy));\n\t\t\t}\n\t\t\tif (properties.isHtmlApplicationCache()) {\n\t\t\t\tchain.addTransformer(new AppCacheManifestTransformer());\n\t\t\t}\n\t\t}\n\n\t\tprivate ResourceResolver getVersionResourceResolver(\n\t\t\t\tResourceProperties.Strategy properties) {\n\t\t\tVersionResourceResolver resolver = new VersionResourceResolver();\n\t\t\tif (properties.getFixed().isEnabled()) {\n\t\t\t\tString version = properties.getFixed().getVersion();\n\t\t\t\tString[] paths = properties.getFixed().getPaths();\n\t\t\t\tresolver.addFixedVersionStrategy(version, paths);\n\t\t\t}\n\t\t\tif (properties.getContent().isEnabled()) {\n\t\t\t\tString[] paths = properties.getContent().getPaths();\n\t\t\t\tresolver.addContentVersionStrategy(paths);\n\t\t\t}\n\t\t\treturn resolver;\n\t\t}\n\n\t}\n\n\t/**\n\t * Decorator to make {@link PathExtensionContentNegotiationStrategy} optional\n\t * depending on a request attribute.\n\t */\n\tstatic class OptionalPathExtensionContentNegotiationStrategy\n\t\t\timplements ContentNegotiationStrategy {\n\n\t\tprivate static final String SKIP_ATTRIBUTE = PathExtensionContentNegotiationStrategy.class\n\t\t\t\t.getName() + ".SKIP";\n\n\t\tprivate final ContentNegotiationStrategy delegate;\n\n\t\tOptionalPathExtensionContentNegotiationStrategy(\n\t\t\t\tContentNegotiationStrategy delegate) {\n\t\t\tthis.delegate = delegate;\n\t\t}\n\n\t\t@Override\n\t\tpublic List<MediaType> resolveMediaTypes(NativeWebRequest webRequest)\n\t\t\t\tthrows HttpMediaTypeNotAcceptableException {\n\t\t\tObject skip = webRequest.getAttribute(SKIP_ATTRIBUTE,\n\t\t\t\t\tRequestAttributes.SCOPE_REQUEST);\n\t\t\tif (skip != null && Boolean.parseBoolean(skip.toString())) {\n\t\t\t\treturn MEDIA_TYPE_ALL_LIST;\n\t\t\t}\n\t\t\treturn this.delegate.resolveMediaTypes(webRequest);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
