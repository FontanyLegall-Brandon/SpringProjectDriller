@@ -33,6 +33,7 @@ import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;
 import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;
 import org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;
@@ -87,14 +88,6 @@ public class QuartzAutoConfiguration {
 		this.applicationContext = applicationContext;
 	}
 
-	@Bean
-	@ConditionalOnSingleCandidate(DataSource.class)
-	@ConditionalOnMissingBean
-	public QuartzDatabaseInitializer quartzDatabaseInitializer(DataSource dataSource,
-			ResourceLoader resourceLoader) {
-		return new QuartzDatabaseInitializer(dataSource, resourceLoader, this.properties);
-	}
-
 	@Bean
 	@ConditionalOnMissingBean
 	public SchedulerFactoryBean quartzScheduler() {
@@ -137,24 +130,42 @@ public class QuartzAutoConfiguration {
 
 	@Configuration
 	@ConditionalOnSingleCandidate(DataSource.class)
+	@ConditionalOnProperty(prefix = , name = , havingValue = )
 	protected static class JdbcStoreTypeConfiguration {
 
 		@Bean
-		public SchedulerFactoryBeanCustomizer dataSourceCustomizer(
-				QuartzProperties properties, DataSource dataSource,
+		public static InitializerSchedulerDependencyPostProcessor initializerSchedulerDependencyPostProcessor() {
+			return new InitializerSchedulerDependencyPostProcessor();
+		}
+
+		@Bean
+		@ConditionalOnMissingBean
+		public QuartzDatabaseInitializer quartzDatabaseInitializer(DataSource dataSource,
+				ResourceLoader resourceLoader, QuartzProperties properties) {
+			return new QuartzDatabaseInitializer(dataSource, resourceLoader, properties);
+		}
+
+		@Bean
+		public SchedulerFactoryBeanCustomizer dataSourceCustomizer(DataSource dataSource,
 				ObjectProvider<PlatformTransactionManager> transactionManager) {
 			return schedulerFactoryBean -> {
-				if (properties.getJobStoreType() == JobStoreType.JDBC) {
-					schedulerFactoryBean.setDataSource(dataSource);
-					PlatformTransactionManager txManager = transactionManager
-							.getIfUnique();
-					if (txManager != null) {
-						schedulerFactoryBean.setTransactionManager(txManager);
-					}
+				schedulerFactoryBean.setDataSource(dataSource);
+				PlatformTransactionManager txManager = transactionManager.getIfUnique();
+				if (txManager != null) {
+					schedulerFactoryBean.setTransactionManager(txManager);
 				}
 			};
 		}
 
+		private static class InitializerSchedulerDependencyPostProcessor
+				extends SchedulerDependsOnPostProcessor {
+
+			InitializerSchedulerDependencyPostProcessor() {
+				super();
+			}
+
+		}
+
 	}
 
 }

