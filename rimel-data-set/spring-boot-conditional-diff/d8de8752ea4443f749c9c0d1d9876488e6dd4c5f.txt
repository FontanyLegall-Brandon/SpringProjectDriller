@@ -21,23 +21,32 @@ import io.micrometer.core.instrument.util.HierarchicalNameMapper;
 import io.micrometer.statsd.StatsdConfig;
 import io.micrometer.statsd.StatsdMeterRegistry;
 
+import org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration;
+import org.springframework.boot.autoconfigure.AutoConfigureBefore;
+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
 
 @Configuration
+@AutoConfigureBefore(MetricsAutoConfiguration.class)
 @ConditionalOnClass(StatsdMeterRegistry.class)
 @EnableConfigurationProperties(StatsdProperties.class)
-public class StatsdExportConfiguration {
+public class StatsdMetricsExportAutoConfiguration {
+
+	@Bean
+	@ConditionalOnMissingBean
+	public Clock micrometerClock() {
+		return Clock.SYSTEM;
+	}
 
 	@Bean
 	@ConditionalOnMissingBean(StatsdConfig.class)
@@ -46,7 +55,6 @@ public class StatsdExportConfiguration {
 	}
 
 	@Bean
-	@ConditionalOnProperty(value = , matchIfMissing = true)
 	public StatsdMeterRegistry statsdMeterRegistry(StatsdConfig statsdConfig,
 			HierarchicalNameMapper hierarchicalNameMapper, Clock clock) {
 		return new StatsdMeterRegistry(statsdConfig, hierarchicalNameMapper, clock);

