{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/prometheus/PrometheusMetricsExportAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/prometheus/PrometheusMetricsExportAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,10 +16,20 @@\n \n package org.springframework.boot.actuate.autoconfigure.metrics.export.prometheus;\n \n+import java.net.UnknownHostException;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.PreDestroy;\n+\n import io.micrometer.core.instrument.Clock;\n import io.micrometer.prometheus.PrometheusConfig;\n import io.micrometer.prometheus.PrometheusMeterRegistry;\n import io.prometheus.client.CollectorRegistry;\n+import io.prometheus.client.exporter.PushGateway;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\n import org.springframework.boot.actuate.autoconfigure.metrics.CompositeMeterRegistryAutoConfiguration;\n@@ -36,6 +46,7 @@ import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for exporting metrics to Prometheus.\n@@ -86,4 +97,113 @@ public class PrometheusMetricsExportAutoConfiguration {\n \n \t}\n \n+\t/**\n+\t * Configuration for <a href="https://github.com/prometheus/pushgateway">Prometheus\n+\t * Pushgateway</a>.\n+\t *\n+\t * @author David J. M. Karlsen\n+\t */\n+\t@Configuration\n+\t@ConditionalOnClass(PushGateway.class)\n+\t@ConditionalOnProperty(prefix = "management.metrics.export.prometheus.pushgateway", name = "enabled")\n+\tpublic static class PrometheusPushGatewayConfiguration {\n+\n+\t\t@Bean\n+\t\tpublic PushGatewayHandler pushGatewayHandler(CollectorRegistry collectorRegistry,\n+\t\t\t\tPrometheusProperties prometheusProperties, Environment environment) {\n+\t\t\treturn new PushGatewayHandler(collectorRegistry, prometheusProperties,\n+\t\t\t\t\tenvironment);\n+\t\t}\n+\n+\t\tstatic class PushGatewayHandler {\n+\n+\t\t\tprivate final Logger logger = LoggerFactory\n+\t\t\t\t\t.getLogger(PrometheusPushGatewayConfiguration.class);\n+\n+\t\t\tprivate final CollectorRegistry collectorRegistry;\n+\n+\t\t\tprivate final PrometheusProperties.PushgatewayProperties pushgatewayProperties;\n+\n+\t\t\tprivate final PushGateway pushGateway;\n+\n+\t\t\tprivate final Environment environment;\n+\n+\t\t\tprivate final ScheduledExecutorService executorService;\n+\n+\t\t\tPushGatewayHandler(CollectorRegistry collectorRegistry,\n+\t\t\t\t\tPrometheusProperties prometheusProperties, Environment environment) {\n+\t\t\t\tthis.collectorRegistry = collectorRegistry;\n+\t\t\t\tthis.pushgatewayProperties = prometheusProperties.getPushgateway();\n+\t\t\t\tthis.pushGateway = new PushGateway(\n+\t\t\t\t\t\tthis.pushgatewayProperties.getBaseUrl());\n+\t\t\t\tthis.environment = environment;\n+\t\t\t\tthis.executorService = Executors.newSingleThreadScheduledExecutor((r) -> {\n+\t\t\t\t\tThread thread = new Thread(r);\n+\t\t\t\t\tthread.setDaemon(true);\n+\t\t\t\t\tthread.setName("micrometer-pushgateway");\n+\t\t\t\t\treturn thread;\n+\t\t\t\t});\n+\t\t\t\tthis.executorService.scheduleAtFixedRate(this::push, 0,\n+\t\t\t\t\t\tthis.pushgatewayProperties.getPushRate().toMillis(),\n+\t\t\t\t\t\tTimeUnit.MILLISECONDS);\n+\t\t\t}\n+\n+\t\t\tvoid push() {\n+\t\t\t\ttry {\n+\t\t\t\t\tthis.pushGateway.pushAdd(this.collectorRegistry, getJobName(),\n+\t\t\t\t\t\t\tthis.pushgatewayProperties.getGroupingKeys());\n+\t\t\t\t}\n+\t\t\t\tcatch (UnknownHostException ex) {\n+\t\t\t\t\tthis.logger.error("Unable to locate host \'"\n+\t\t\t\t\t\t\t+ this.pushgatewayProperties.getBaseUrl()\n+\t\t\t\t\t\t\t+ "\'. No longer attempting metrics publication to this host");\n+\t\t\t\t\tthis.executorService.shutdown();\n+\t\t\t\t}\n+\t\t\t\tcatch (Throwable throwable) {\n+\t\t\t\t\tthis.logger.error("Unable to push metrics to Prometheus Pushgateway",\n+\t\t\t\t\t\t\tthrowable);\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\t@PreDestroy\n+\t\t\tvoid shutdown() {\n+\t\t\t\tthis.executorService.shutdown();\n+\t\t\t\tif (this.pushgatewayProperties.isPushOnShutdown()) {\n+\t\t\t\t\tpush();\n+\t\t\t\t}\n+\t\t\t\tif (this.pushgatewayProperties.isDeleteOnShutdown()) {\n+\t\t\t\t\tdelete();\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tprivate void delete() {\n+\t\t\t\ttry {\n+\t\t\t\t\tthis.pushGateway.delete(getJobName(),\n+\t\t\t\t\t\t\tthis.pushgatewayProperties.getGroupingKeys());\n+\t\t\t\t}\n+\t\t\t\tcatch (Throwable throwable) {\n+\t\t\t\t\tthis.logger.error(\n+\t\t\t\t\t\t\t"Unable to delete metrics from Prometheus Pushgateway",\n+\t\t\t\t\t\t\tthrowable);\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tprivate String getJobName() {\n+\t\t\t\tString job = this.pushgatewayProperties.getJob();\n+\t\t\t\tif (job == null) {\n+\t\t\t\t\tjob = this.environment.getProperty("spring.application.name");\n+\t\t\t\t}\n+\t\t\t\tif (job == null) {\n+\t\t\t\t\t// There\'s a history of Prometheus spring integration defaulting the\n+\t\t\t\t\t// getJobName name to "spring" from when\n+\t\t\t\t\t// Prometheus integration didn\'t exist in Spring itself.\n+\t\t\t\t\tjob = "spring";\n+\t\t\t\t}\n+\t\t\t\treturn job;\n+\t\t\t}\n+\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics.export.prometheus;\n\nimport java.net.UnknownHostException;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\nimport javax.annotation.PreDestroy;\n\nimport io.micrometer.core.instrument.Clock;\nimport io.micrometer.prometheus.PrometheusConfig;\nimport io.micrometer.prometheus.PrometheusMeterRegistry;\nimport io.prometheus.client.CollectorRegistry;\nimport io.prometheus.client.exporter.PushGateway;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\nimport org.springframework.boot.actuate.autoconfigure.metrics.CompositeMeterRegistryAutoConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration;\nimport org.springframework.boot.actuate.metrics.export.prometheus.PrometheusScrapeEndpoint;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for exporting metrics to Prometheus.\n *\n * @since 2.0.0\n * @author Jon Schneider\n */\n@Configuration\n@AutoConfigureBefore({ CompositeMeterRegistryAutoConfiguration.class,\n\t\tSimpleMetricsExportAutoConfiguration.class })\n@AutoConfigureAfter(MetricsAutoConfiguration.class)\n@ConditionalOnBean(Clock.class)\n@ConditionalOnClass(PrometheusMeterRegistry.class)\n@ConditionalOnProperty(prefix = "management.metrics.export.prometheus", name = "enabled", havingValue = "true", matchIfMissing = true)\n@EnableConfigurationProperties(PrometheusProperties.class)\npublic class PrometheusMetricsExportAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic PrometheusConfig prometheusConfig(PrometheusProperties prometheusProperties) {\n\t\treturn new PrometheusPropertiesConfigAdapter(prometheusProperties);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic PrometheusMeterRegistry prometheusMeterRegistry(\n\t\t\tPrometheusConfig prometheusConfig, CollectorRegistry collectorRegistry,\n\t\t\tClock clock) {\n\t\treturn new PrometheusMeterRegistry(prometheusConfig, collectorRegistry, clock);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic CollectorRegistry collectorRegistry() {\n\t\treturn new CollectorRegistry(true);\n\t}\n\n\t@Configuration\n\tpublic static class PrometheusScrapeEndpointConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnEnabledEndpoint\n\t\t@ConditionalOnMissingBean\n\t\tpublic PrometheusScrapeEndpoint prometheusEndpoint(\n\t\t\t\tCollectorRegistry collectorRegistry) {\n\t\t\treturn new PrometheusScrapeEndpoint(collectorRegistry);\n\t\t}\n\n\t}\n\n\t/**\n\t * Configuration for <a href="https://github.com/prometheus/pushgateway">Prometheus\n\t * Pushgateway</a>.\n\t *\n\t * @author David J. M. Karlsen\n\t */\n\t@Configuration\n\t@ConditionalOnClass(PushGateway.class)\n\t@ConditionalOnProperty(prefix = "management.metrics.export.prometheus.pushgateway", name = "enabled")\n\tpublic static class PrometheusPushGatewayConfiguration {\n\n\t\t@Bean\n\t\tpublic PushGatewayHandler pushGatewayHandler(CollectorRegistry collectorRegistry,\n\t\t\t\tPrometheusProperties prometheusProperties, Environment environment) {\n\t\t\treturn new PushGatewayHandler(collectorRegistry, prometheusProperties,\n\t\t\t\t\tenvironment);\n\t\t}\n\n\t\tstatic class PushGatewayHandler {\n\n\t\t\tprivate final Logger logger = LoggerFactory\n\t\t\t\t\t.getLogger(PrometheusPushGatewayConfiguration.class);\n\n\t\t\tprivate final CollectorRegistry collectorRegistry;\n\n\t\t\tprivate final PrometheusProperties.PushgatewayProperties pushgatewayProperties;\n\n\t\t\tprivate final PushGateway pushGateway;\n\n\t\t\tprivate final Environment environment;\n\n\t\t\tprivate final ScheduledExecutorService executorService;\n\n\t\t\tPushGatewayHandler(CollectorRegistry collectorRegistry,\n\t\t\t\t\tPrometheusProperties prometheusProperties, Environment environment) {\n\t\t\t\tthis.collectorRegistry = collectorRegistry;\n\t\t\t\tthis.pushgatewayProperties = prometheusProperties.getPushgateway();\n\t\t\t\tthis.pushGateway = new PushGateway(\n\t\t\t\t\t\tthis.pushgatewayProperties.getBaseUrl());\n\t\t\t\tthis.environment = environment;\n\t\t\t\tthis.executorService = Executors.newSingleThreadScheduledExecutor((r) -> {\n\t\t\t\t\tThread thread = new Thread(r);\n\t\t\t\t\tthread.setDaemon(true);\n\t\t\t\t\tthread.setName("micrometer-pushgateway");\n\t\t\t\t\treturn thread;\n\t\t\t\t});\n\t\t\t\tthis.executorService.scheduleAtFixedRate(this::push, 0,\n\t\t\t\t\t\tthis.pushgatewayProperties.getPushRate().toMillis(),\n\t\t\t\t\t\tTimeUnit.MILLISECONDS);\n\t\t\t}\n\n\t\t\tvoid push() {\n\t\t\t\ttry {\n\t\t\t\t\tthis.pushGateway.pushAdd(this.collectorRegistry, getJobName(),\n\t\t\t\t\t\t\tthis.pushgatewayProperties.getGroupingKeys());\n\t\t\t\t}\n\t\t\t\tcatch (UnknownHostException ex) {\n\t\t\t\t\tthis.logger.error("Unable to locate host \'"\n\t\t\t\t\t\t\t+ this.pushgatewayProperties.getBaseUrl()\n\t\t\t\t\t\t\t+ "\'. No longer attempting metrics publication to this host");\n\t\t\t\t\tthis.executorService.shutdown();\n\t\t\t\t}\n\t\t\t\tcatch (Throwable throwable) {\n\t\t\t\t\tthis.logger.error("Unable to push metrics to Prometheus Pushgateway",\n\t\t\t\t\t\t\tthrowable);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t@PreDestroy\n\t\t\tvoid shutdown() {\n\t\t\t\tthis.executorService.shutdown();\n\t\t\t\tif (this.pushgatewayProperties.isPushOnShutdown()) {\n\t\t\t\t\tpush();\n\t\t\t\t}\n\t\t\t\tif (this.pushgatewayProperties.isDeleteOnShutdown()) {\n\t\t\t\t\tdelete();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprivate void delete() {\n\t\t\t\ttry {\n\t\t\t\t\tthis.pushGateway.delete(getJobName(),\n\t\t\t\t\t\t\tthis.pushgatewayProperties.getGroupingKeys());\n\t\t\t\t}\n\t\t\t\tcatch (Throwable throwable) {\n\t\t\t\t\tthis.logger.error(\n\t\t\t\t\t\t\t"Unable to delete metrics from Prometheus Pushgateway",\n\t\t\t\t\t\t\tthrowable);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprivate String getJobName() {\n\t\t\t\tString job = this.pushgatewayProperties.getJob();\n\t\t\t\tif (job == null) {\n\t\t\t\t\tjob = this.environment.getProperty("spring.application.name");\n\t\t\t\t}\n\t\t\t\tif (job == null) {\n\t\t\t\t\t// There\'s a history of Prometheus spring integration defaulting the\n\t\t\t\t\t// getJobName name to "spring" from when\n\t\t\t\t\t// Prometheus integration didn\'t exist in Spring itself.\n\t\t\t\t\tjob = "spring";\n\t\t\t\t}\n\t\t\t\treturn job;\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics.export.prometheus;\n\nimport io.micrometer.core.instrument.Clock;\nimport io.micrometer.prometheus.PrometheusConfig;\nimport io.micrometer.prometheus.PrometheusMeterRegistry;\nimport io.prometheus.client.CollectorRegistry;\n\nimport org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\nimport org.springframework.boot.actuate.autoconfigure.metrics.CompositeMeterRegistryAutoConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration;\nimport org.springframework.boot.actuate.metrics.export.prometheus.PrometheusScrapeEndpoint;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for exporting metrics to Prometheus.\n *\n * @since 2.0.0\n * @author Jon Schneider\n */\n@Configuration\n@AutoConfigureBefore({ CompositeMeterRegistryAutoConfiguration.class,\n\t\tSimpleMetricsExportAutoConfiguration.class })\n@AutoConfigureAfter(MetricsAutoConfiguration.class)\n@ConditionalOnBean(Clock.class)\n@ConditionalOnClass(PrometheusMeterRegistry.class)\n@ConditionalOnProperty(prefix = "management.metrics.export.prometheus", name = "enabled", havingValue = "true", matchIfMissing = true)\n@EnableConfigurationProperties(PrometheusProperties.class)\npublic class PrometheusMetricsExportAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic PrometheusConfig prometheusConfig(PrometheusProperties prometheusProperties) {\n\t\treturn new PrometheusPropertiesConfigAdapter(prometheusProperties);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic PrometheusMeterRegistry prometheusMeterRegistry(\n\t\t\tPrometheusConfig prometheusConfig, CollectorRegistry collectorRegistry,\n\t\t\tClock clock) {\n\t\treturn new PrometheusMeterRegistry(prometheusConfig, collectorRegistry, clock);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic CollectorRegistry collectorRegistry() {\n\t\treturn new CollectorRegistry(true);\n\t}\n\n\t@Configuration\n\tpublic static class PrometheusScrapeEndpointConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnEnabledEndpoint\n\t\t@ConditionalOnMissingBean\n\t\tpublic PrometheusScrapeEndpoint prometheusEndpoint(\n\t\t\t\tCollectorRegistry collectorRegistry) {\n\t\t\treturn new PrometheusScrapeEndpoint(collectorRegistry);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
