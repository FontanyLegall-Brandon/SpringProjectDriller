{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/embedded/EmbeddedLdapAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/embedded/EmbeddedLdapAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -20,6 +20,7 @@ import java.io.InputStream;\n import java.util.HashMap;\n import java.util.Map;\n \n+import javax.annotation.PostConstruct;\n import javax.annotation.PreDestroy;\n \n import com.unboundid.ldap.listener.InMemoryDirectoryServer;\n@@ -33,7 +34,6 @@ import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration;\n import org.springframework.boot.autoconfigure.ldap.LdapProperties;\n import org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties.Credential;\n@@ -50,6 +50,7 @@ import org.springframework.core.env.PropertySource;\n import org.springframework.core.io.Resource;\n import org.springframework.ldap.core.ContextSource;\n import org.springframework.ldap.core.support.LdapContextSource;\n+import org.springframework.util.Assert;\n import org.springframework.util.StringUtils;\n \n /**\n@@ -64,7 +65,6 @@ import org.springframework.util.StringUtils;\n @EnableConfigurationProperties({ LdapProperties.class, EmbeddedLdapProperties.class })\n @AutoConfigureBefore(LdapAutoConfiguration.class)\n @ConditionalOnClass(InMemoryDirectoryServer.class)\n-@ConditionalOnProperty(prefix = "spring.ldap.embedded", name = "base-dn")\n public class EmbeddedLdapAutoConfiguration {\n \n \tprivate static final String PROPERTY_SOURCE_NAME = "ldap.ports";\n@@ -88,6 +88,11 @@ public class EmbeddedLdapAutoConfiguration {\n \t\tthis.environment = environment;\n \t}\n \n+\t@PostConstruct\n+\tpublic void validateBaseDns() {\n+\t\tAssert.notEmpty(this.embeddedProperties.getBaseDn(), "No baseDn found.");\n+\t}\n+\n \t@Bean\n \t@DependsOn("directoryServer")\n \t@ConditionalOnMissingBean\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.ldap.embedded;\n\nimport java.io.InputStream;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport javax.annotation.PostConstruct;\nimport javax.annotation.PreDestroy;\n\nimport com.unboundid.ldap.listener.InMemoryDirectoryServer;\nimport com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;\nimport com.unboundid.ldap.listener.InMemoryListenerConfig;\nimport com.unboundid.ldap.sdk.LDAPException;\nimport com.unboundid.ldap.sdk.schema.Schema;\nimport com.unboundid.ldif.LDIFReader;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration;\nimport org.springframework.boot.autoconfigure.ldap.LdapProperties;\nimport org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties.Credential;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.DependsOn;\nimport org.springframework.core.env.Environment;\nimport org.springframework.core.env.MapPropertySource;\nimport org.springframework.core.env.MutablePropertySources;\nimport org.springframework.core.env.PropertySource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.ldap.core.ContextSource;\nimport org.springframework.ldap.core.support.LdapContextSource;\nimport org.springframework.util.Assert;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Embedded LDAP.\n *\n * @author Eddú Meléndez\n * @author Mathieu Ouellet\n * @author Raja Kolli\n * @since 1.5.0\n */\n@Configuration\n@EnableConfigurationProperties({ LdapProperties.class, EmbeddedLdapProperties.class })\n@AutoConfigureBefore(LdapAutoConfiguration.class)\n@ConditionalOnClass(InMemoryDirectoryServer.class)\npublic class EmbeddedLdapAutoConfiguration {\n\n\tprivate static final String PROPERTY_SOURCE_NAME = "ldap.ports";\n\n\tprivate final EmbeddedLdapProperties embeddedProperties;\n\n\tprivate final LdapProperties properties;\n\n\tprivate final ConfigurableApplicationContext applicationContext;\n\n\tprivate final Environment environment;\n\n\tprivate InMemoryDirectoryServer server;\n\n\tpublic EmbeddedLdapAutoConfiguration(EmbeddedLdapProperties embeddedProperties,\n\t\t\tLdapProperties properties, ConfigurableApplicationContext applicationContext,\n\t\t\tEnvironment environment) {\n\t\tthis.embeddedProperties = embeddedProperties;\n\t\tthis.properties = properties;\n\t\tthis.applicationContext = applicationContext;\n\t\tthis.environment = environment;\n\t}\n\n\t@PostConstruct\n\tpublic void validateBaseDns() {\n\t\tAssert.notEmpty(this.embeddedProperties.getBaseDn(), "No baseDn found.");\n\t}\n\n\t@Bean\n\t@DependsOn("directoryServer")\n\t@ConditionalOnMissingBean\n\tpublic ContextSource ldapContextSource() {\n\t\tLdapContextSource source = new LdapContextSource();\n\t\tif (hasCredentials(this.embeddedProperties.getCredential())) {\n\t\t\tsource.setUserDn(this.embeddedProperties.getCredential().getUsername());\n\t\t\tsource.setPassword(this.embeddedProperties.getCredential().getPassword());\n\t\t}\n\t\tsource.setUrls(this.properties.determineUrls(this.environment));\n\t\treturn source;\n\t}\n\n\t@Bean\n\tpublic InMemoryDirectoryServer directoryServer() throws LDAPException {\n\t\tInMemoryDirectoryServerConfig config = new InMemoryDirectoryServerConfig(\n\t\t\t\tthis.embeddedProperties.getBaseDn());\n\t\tif (hasCredentials(this.embeddedProperties.getCredential())) {\n\t\t\tconfig.addAdditionalBindCredentials(\n\t\t\t\t\tthis.embeddedProperties.getCredential().getUsername(),\n\t\t\t\t\tthis.embeddedProperties.getCredential().getPassword());\n\t\t}\n\t\tsetSchema(config);\n\t\tInMemoryListenerConfig listenerConfig = InMemoryListenerConfig\n\t\t\t\t.createLDAPConfig("LDAP", this.embeddedProperties.getPort());\n\t\tconfig.setListenerConfigs(listenerConfig);\n\t\tthis.server = new InMemoryDirectoryServer(config);\n\t\timportLdif();\n\t\tthis.server.startListening();\n\t\tsetPortProperty(this.applicationContext, this.server.getListenPort());\n\t\treturn this.server;\n\t}\n\n\tprivate void setSchema(InMemoryDirectoryServerConfig config) {\n\t\tif (!this.embeddedProperties.getValidation().isEnabled()) {\n\t\t\tconfig.setSchema(null);\n\t\t\treturn;\n\t\t}\n\t\tResource schema = this.embeddedProperties.getValidation().getSchema();\n\t\tif (schema != null) {\n\t\t\tsetSchema(config, schema);\n\t\t}\n\t}\n\n\tprivate void setSchema(InMemoryDirectoryServerConfig config, Resource resource) {\n\t\ttry {\n\t\t\tSchema defaultSchema = Schema.getDefaultStandardSchema();\n\t\t\tSchema schema = Schema.getSchema(resource.getInputStream());\n\t\t\tconfig.setSchema(Schema.mergeSchemas(defaultSchema, schema));\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t"Unable to load schema " + resource.getDescription(), ex);\n\t\t}\n\t}\n\n\tprivate boolean hasCredentials(Credential credential) {\n\t\treturn StringUtils.hasText(credential.getUsername())\n\t\t\t\t&& StringUtils.hasText(credential.getPassword());\n\t}\n\n\tprivate void importLdif() throws LDAPException {\n\t\tString location = this.embeddedProperties.getLdif();\n\t\tif (StringUtils.hasText(location)) {\n\t\t\ttry {\n\t\t\t\tResource resource = this.applicationContext.getResource(location);\n\t\t\t\tif (resource.exists()) {\n\t\t\t\t\ttry (InputStream inputStream = resource.getInputStream()) {\n\t\t\t\t\t\tthis.server.importFromLDIF(true, new LDIFReader(inputStream));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tthrow new IllegalStateException("Unable to load LDIF " + location, ex);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void setPortProperty(ApplicationContext context, int port) {\n\t\tif (context instanceof ConfigurableApplicationContext) {\n\t\t\tMutablePropertySources sources = ((ConfigurableApplicationContext) context)\n\t\t\t\t\t.getEnvironment().getPropertySources();\n\t\t\tgetLdapPorts(sources).put("local.ldap.port", port);\n\t\t}\n\t\tif (context.getParent() != null) {\n\t\t\tsetPortProperty(context.getParent(), port);\n\t\t}\n\t}\n\n\t@SuppressWarnings("unchecked")\n\tprivate Map<String, Object> getLdapPorts(MutablePropertySources sources) {\n\t\tPropertySource<?> propertySource = sources.get(PROPERTY_SOURCE_NAME);\n\t\tif (propertySource == null) {\n\t\t\tpropertySource = new MapPropertySource(PROPERTY_SOURCE_NAME, new HashMap<>());\n\t\t\tsources.addFirst(propertySource);\n\t\t}\n\t\treturn (Map<String, Object>) propertySource.getSource();\n\t}\n\n\t@PreDestroy\n\tpublic void close() {\n\t\tif (this.server != null) {\n\t\t\tthis.server.shutDown(true);\n\t\t}\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.ldap.embedded;\n\nimport java.io.InputStream;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport javax.annotation.PreDestroy;\n\nimport com.unboundid.ldap.listener.InMemoryDirectoryServer;\nimport com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;\nimport com.unboundid.ldap.listener.InMemoryListenerConfig;\nimport com.unboundid.ldap.sdk.LDAPException;\nimport com.unboundid.ldap.sdk.schema.Schema;\nimport com.unboundid.ldif.LDIFReader;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration;\nimport org.springframework.boot.autoconfigure.ldap.LdapProperties;\nimport org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties.Credential;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.DependsOn;\nimport org.springframework.core.env.Environment;\nimport org.springframework.core.env.MapPropertySource;\nimport org.springframework.core.env.MutablePropertySources;\nimport org.springframework.core.env.PropertySource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.ldap.core.ContextSource;\nimport org.springframework.ldap.core.support.LdapContextSource;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Embedded LDAP.\n *\n * @author Eddú Meléndez\n * @author Mathieu Ouellet\n * @author Raja Kolli\n * @since 1.5.0\n */\n@Configuration\n@EnableConfigurationProperties({ LdapProperties.class, EmbeddedLdapProperties.class })\n@AutoConfigureBefore(LdapAutoConfiguration.class)\n@ConditionalOnClass(InMemoryDirectoryServer.class)\n@ConditionalOnProperty(prefix = "spring.ldap.embedded", name = "base-dn")\npublic class EmbeddedLdapAutoConfiguration {\n\n\tprivate static final String PROPERTY_SOURCE_NAME = "ldap.ports";\n\n\tprivate final EmbeddedLdapProperties embeddedProperties;\n\n\tprivate final LdapProperties properties;\n\n\tprivate final ConfigurableApplicationContext applicationContext;\n\n\tprivate final Environment environment;\n\n\tprivate InMemoryDirectoryServer server;\n\n\tpublic EmbeddedLdapAutoConfiguration(EmbeddedLdapProperties embeddedProperties,\n\t\t\tLdapProperties properties, ConfigurableApplicationContext applicationContext,\n\t\t\tEnvironment environment) {\n\t\tthis.embeddedProperties = embeddedProperties;\n\t\tthis.properties = properties;\n\t\tthis.applicationContext = applicationContext;\n\t\tthis.environment = environment;\n\t}\n\n\t@Bean\n\t@DependsOn("directoryServer")\n\t@ConditionalOnMissingBean\n\tpublic ContextSource ldapContextSource() {\n\t\tLdapContextSource source = new LdapContextSource();\n\t\tif (hasCredentials(this.embeddedProperties.getCredential())) {\n\t\t\tsource.setUserDn(this.embeddedProperties.getCredential().getUsername());\n\t\t\tsource.setPassword(this.embeddedProperties.getCredential().getPassword());\n\t\t}\n\t\tsource.setUrls(this.properties.determineUrls(this.environment));\n\t\treturn source;\n\t}\n\n\t@Bean\n\tpublic InMemoryDirectoryServer directoryServer() throws LDAPException {\n\t\tInMemoryDirectoryServerConfig config = new InMemoryDirectoryServerConfig(\n\t\t\t\tthis.embeddedProperties.getBaseDn());\n\t\tif (hasCredentials(this.embeddedProperties.getCredential())) {\n\t\t\tconfig.addAdditionalBindCredentials(\n\t\t\t\t\tthis.embeddedProperties.getCredential().getUsername(),\n\t\t\t\t\tthis.embeddedProperties.getCredential().getPassword());\n\t\t}\n\t\tsetSchema(config);\n\t\tInMemoryListenerConfig listenerConfig = InMemoryListenerConfig\n\t\t\t\t.createLDAPConfig("LDAP", this.embeddedProperties.getPort());\n\t\tconfig.setListenerConfigs(listenerConfig);\n\t\tthis.server = new InMemoryDirectoryServer(config);\n\t\timportLdif();\n\t\tthis.server.startListening();\n\t\tsetPortProperty(this.applicationContext, this.server.getListenPort());\n\t\treturn this.server;\n\t}\n\n\tprivate void setSchema(InMemoryDirectoryServerConfig config) {\n\t\tif (!this.embeddedProperties.getValidation().isEnabled()) {\n\t\t\tconfig.setSchema(null);\n\t\t\treturn;\n\t\t}\n\t\tResource schema = this.embeddedProperties.getValidation().getSchema();\n\t\tif (schema != null) {\n\t\t\tsetSchema(config, schema);\n\t\t}\n\t}\n\n\tprivate void setSchema(InMemoryDirectoryServerConfig config, Resource resource) {\n\t\ttry {\n\t\t\tSchema defaultSchema = Schema.getDefaultStandardSchema();\n\t\t\tSchema schema = Schema.getSchema(resource.getInputStream());\n\t\t\tconfig.setSchema(Schema.mergeSchemas(defaultSchema, schema));\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t"Unable to load schema " + resource.getDescription(), ex);\n\t\t}\n\t}\n\n\tprivate boolean hasCredentials(Credential credential) {\n\t\treturn StringUtils.hasText(credential.getUsername())\n\t\t\t\t&& StringUtils.hasText(credential.getPassword());\n\t}\n\n\tprivate void importLdif() throws LDAPException {\n\t\tString location = this.embeddedProperties.getLdif();\n\t\tif (StringUtils.hasText(location)) {\n\t\t\ttry {\n\t\t\t\tResource resource = this.applicationContext.getResource(location);\n\t\t\t\tif (resource.exists()) {\n\t\t\t\t\ttry (InputStream inputStream = resource.getInputStream()) {\n\t\t\t\t\t\tthis.server.importFromLDIF(true, new LDIFReader(inputStream));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tthrow new IllegalStateException("Unable to load LDIF " + location, ex);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void setPortProperty(ApplicationContext context, int port) {\n\t\tif (context instanceof ConfigurableApplicationContext) {\n\t\t\tMutablePropertySources sources = ((ConfigurableApplicationContext) context)\n\t\t\t\t\t.getEnvironment().getPropertySources();\n\t\t\tgetLdapPorts(sources).put("local.ldap.port", port);\n\t\t}\n\t\tif (context.getParent() != null) {\n\t\t\tsetPortProperty(context.getParent(), port);\n\t\t}\n\t}\n\n\t@SuppressWarnings("unchecked")\n\tprivate Map<String, Object> getLdapPorts(MutablePropertySources sources) {\n\t\tPropertySource<?> propertySource = sources.get(PROPERTY_SOURCE_NAME);\n\t\tif (propertySource == null) {\n\t\t\tpropertySource = new MapPropertySource(PROPERTY_SOURCE_NAME, new HashMap<>());\n\t\t\tsources.addFirst(propertySource);\n\t\t}\n\t\treturn (Map<String, Object>) propertySource.getSource();\n\t}\n\n\t@PreDestroy\n\tpublic void close() {\n\t\tif (this.server != null) {\n\t\t\tthis.server.shutDown(true);\n\t\t}\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
