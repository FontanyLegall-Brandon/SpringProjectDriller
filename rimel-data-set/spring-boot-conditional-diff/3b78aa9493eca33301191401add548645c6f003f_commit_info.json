{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -27,6 +27,7 @@ import org.springframework.context.annotation.Import;\n import org.springframework.security.authentication.AuthenticationEventPublisher;\n import org.springframework.security.authentication.AuthenticationManager;\n import org.springframework.security.authentication.DefaultAuthenticationEventPublisher;\n+import org.springframework.security.config.annotation.authentication.configurers.GlobalAuthenticationConfigurerAdapter;\n import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n \n /**\n@@ -41,9 +42,11 @@ import org.springframework.security.config.annotation.web.configuration.WebSecur\n  * <code>@Configuration</code> of type {@link WebSecurityConfigurerAdapter}.\n  *\n  * @author Dave Syer\n+ * @author Andy Wilkinson\n  */\n @Configuration\n-@ConditionalOnClass(AuthenticationManager.class)\n+@ConditionalOnClass({ AuthenticationManager.class,\n+\t\tGlobalAuthenticationConfigurerAdapter.class })\n @EnableConfigurationProperties\n @Import({ SpringBootWebSecurityConfiguration.class,\n \t\tAuthenticationManagerConfiguration.class })\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationEventPublisher;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.security.authentication.AuthenticationEventPublisher;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.DefaultAuthenticationEventPublisher;\nimport org.springframework.security.config.annotation.authentication.configurers.GlobalAuthenticationConfigurerAdapter;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Security. Provides an\n * {@link AuthenticationManager} based on configuration bound to a\n * {@link SecurityProperties} bean. There is one user (named "user") whose password is\n * random and printed on the console at INFO level during startup. In a webapp this\n * configuration also secures all web endpoints (except some well-known static resource)\n * locations with HTTP basic security. To replace all the default behaviour in a webapp\n * provide a <code>@Configuration</code> with <code>@EnableWebSecurity</code>. To just add\n * your own layer of application security in front of the defaults, add a\n * <code>@Configuration</code> of type {@link WebSecurityConfigurerAdapter}.\n *\n * @author Dave Syer\n * @author Andy Wilkinson\n */\n@Configuration\n@ConditionalOnClass({ AuthenticationManager.class,\n\t\tGlobalAuthenticationConfigurerAdapter.class })\n@EnableConfigurationProperties\n@Import({ SpringBootWebSecurityConfiguration.class,\n\t\tAuthenticationManagerConfiguration.class })\npublic class SecurityAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic AuthenticationEventPublisher authenticationEventPublisher(\n\t\t\tApplicationEventPublisher publisher) {\n\t\treturn new DefaultAuthenticationEventPublisher(publisher);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic SecurityProperties securityProperties() {\n\t\treturn new SecurityProperties();\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationEventPublisher;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.security.authentication.AuthenticationEventPublisher;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.DefaultAuthenticationEventPublisher;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Security. Provides an\n * {@link AuthenticationManager} based on configuration bound to a\n * {@link SecurityProperties} bean. There is one user (named "user") whose password is\n * random and printed on the console at INFO level during startup. In a webapp this\n * configuration also secures all web endpoints (except some well-known static resource)\n * locations with HTTP basic security. To replace all the default behaviour in a webapp\n * provide a <code>@Configuration</code> with <code>@EnableWebSecurity</code>. To just add\n * your own layer of application security in front of the defaults, add a\n * <code>@Configuration</code> of type {@link WebSecurityConfigurerAdapter}.\n *\n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnClass(AuthenticationManager.class)\n@EnableConfigurationProperties\n@Import({ SpringBootWebSecurityConfiguration.class,\n\t\tAuthenticationManagerConfiguration.class })\npublic class SecurityAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic AuthenticationEventPublisher authenticationEventPublisher(\n\t\t\tApplicationEventPublisher publisher) {\n\t\treturn new DefaultAuthenticationEventPublisher(publisher);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic SecurityProperties securityProperties() {\n\t\treturn new SecurityProperties();\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
