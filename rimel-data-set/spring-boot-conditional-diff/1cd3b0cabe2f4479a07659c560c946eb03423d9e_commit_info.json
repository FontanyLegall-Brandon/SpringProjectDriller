{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/HashMapSessionConfiguration.java'), '_new_path': None, 'change_type': <ModificationType.DELETE: 4>, 'diff': '@@ -1,50 +0,0 @@\n-/*\n- * Copyright 2012-2017 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the "License");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an "AS IS" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.boot.autoconfigure.session;\n-\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Conditional;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.session.MapSessionRepository;\n-import org.springframework.session.SessionRepository;\n-import org.springframework.session.config.annotation.web.http.EnableSpringHttpSession;\n-\n-/**\n- * HashMap based session configuration, intended as a fallback.\n- *\n- * @author Tommy Ludwig\n- * @author Stephane Nicoll\n- * @author Vedran Pavic\n- */\n-@Configuration\n-@EnableSpringHttpSession\n-@Conditional(SessionCondition.class)\n-@ConditionalOnMissingBean(SessionRepository.class)\n-class HashMapSessionConfiguration {\n-\n-\t@Bean\n-\tpublic MapSessionRepository sessionRepository(SessionProperties properties) {\n-\t\tMapSessionRepository repository = new MapSessionRepository();\n-\t\tInteger timeout = properties.getTimeout();\n-\t\tif (timeout != null) {\n-\t\t\trepository.setDefaultMaxInactiveInterval(timeout);\n-\t\t}\n-\t\treturn repository;\n-\t}\n-\n-}\n', 'source_code': None, 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.session;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.session.MapSessionRepository;\nimport org.springframework.session.SessionRepository;\nimport org.springframework.session.config.annotation.web.http.EnableSpringHttpSession;\n\n/**\n * HashMap based session configuration, intended as a fallback.\n *\n * @author Tommy Ludwig\n * @author Stephane Nicoll\n * @author Vedran Pavic\n */\n@Configuration\n@EnableSpringHttpSession\n@Conditional(SessionCondition.class)\n@ConditionalOnMissingBean(SessionRepository.class)\nclass HashMapSessionConfiguration {\n\n\t@Bean\n\tpublic MapSessionRepository sessionRepository(SessionProperties properties) {\n\t\tMapSessionRepository repository = new MapSessionRepository();\n\t\tInteger timeout = properties.getTimeout();\n\t\tif (timeout != null) {\n\t\t\trepository.setDefaultMaxInactiveInterval(timeout);\n\t\t}\n\t\treturn repository;\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
