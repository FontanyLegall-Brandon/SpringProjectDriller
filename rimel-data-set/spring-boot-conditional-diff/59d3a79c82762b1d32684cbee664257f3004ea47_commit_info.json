{'_old_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBeanTests.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBeanTests.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,6 +16,11 @@\n \n package org.springframework.boot.autoconfigure.condition;\n \n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n import java.util.Date;\n \n import org.junit.Test;\n@@ -285,6 +290,15 @@ public class ConditionalOnMissingBeanTests {\n \t\tassertThat(child.getBeansOfType(ExampleBean.class)).hasSize(2);\n \t}\n \n+\t@Test\n+\tpublic void beanProducedByFactoryBeanIsConsideredWhenMatchingOnAnnotation() {\n+\t\tthis.context.register(ConcreteFactoryBeanConfiguration.class,\n+\t\t\t\tOnAnnotationWithFactoryBeanConfiguration.class);\n+\t\tthis.context.refresh();\n+\t\tassertThat(this.context.containsBean("bar")).isFalse();\n+\t\tassertThat(this.context.getBeansOfType(ExampleBean.class)).hasSize(1);\n+\t}\n+\n \t@Configuration\n \tprotected static class OnBeanInParentsConfiguration {\n \n@@ -500,6 +514,17 @@ public class ConditionalOnMissingBeanTests {\n \n \t}\n \n+\t@Configuration\n+\t@ConditionalOnMissingBean(annotation = TestAnnotation.class)\n+\tprotected static class OnAnnotationWithFactoryBeanConfiguration {\n+\n+\t\t@Bean\n+\t\tpublic String bar() {\n+\t\t\treturn "bar";\n+\t\t}\n+\n+\t}\n+\n \t@Configuration\n \t@EnableScheduling\n \tprotected static class FooConfiguration {\n@@ -554,6 +579,7 @@ public class ConditionalOnMissingBeanTests {\n \n \t}\n \n+\t@TestAnnotation\n \tpublic static class ExampleBean {\n \n \t\tprivate String value;\n@@ -623,4 +649,11 @@ public class ConditionalOnMissingBeanTests {\n \n \t}\n \n+\t@Target(ElementType.TYPE)\n+\t@Retention(RetentionPolicy.RUNTIME)\n+\t@Documented\n+\tpublic @interface TestAnnotation {\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\nimport java.util.Date;\n\nimport org.junit.Test;\n\nimport org.springframework.beans.factory.FactoryBean;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.beans.factory.support.BeanDefinitionBuilder;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistry;\nimport org.springframework.boot.autoconfigure.PropertyPlaceholderAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.scan.ScannedFactoryBeanConfiguration;\nimport org.springframework.boot.autoconfigure.condition.scan.ScannedFactoryBeanWithBeanMethodArgumentsConfiguration;\nimport org.springframework.boot.test.util.EnvironmentTestUtils;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.ComponentScan.Filter;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.FilterType;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.ImportBeanDefinitionRegistrar;\nimport org.springframework.context.annotation.ImportResource;\nimport org.springframework.core.type.AnnotationMetadata;\nimport org.springframework.scheduling.annotation.EnableScheduling;\nimport org.springframework.util.Assert;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link ConditionalOnMissingBean}.\n *\n * @author Dave Syer\n * @author Phillip Webb\n * @author Jakub Kubrynski\n * @author Andy Wilkinson\n */\n@SuppressWarnings("resource")\npublic class ConditionalOnMissingBeanTests {\n\n\tprivate final AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n\n\t@Test\n\tpublic void testNameOnMissingBeanCondition() {\n\t\tthis.context.register(FooConfiguration.class, OnBeanNameConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.containsBean("bar")).isFalse();\n\t\tassertThat(this.context.getBean("foo")).isEqualTo("foo");\n\t}\n\n\t@Test\n\tpublic void testNameOnMissingBeanConditionReverseOrder() {\n\t\tthis.context.register(OnBeanNameConfiguration.class, FooConfiguration.class);\n\t\tthis.context.refresh();\n\t\t// FIXME: ideally this would be false, but the ordering is a problem\n\t\tassertThat(this.context.containsBean("bar")).isTrue();\n\t\tassertThat(this.context.getBean("foo")).isEqualTo("foo");\n\t}\n\n\t@Test\n\tpublic void testNameAndTypeOnMissingBeanCondition() {\n\t\tthis.context.register(FooConfiguration.class,\n\t\t\t\tOnBeanNameAndTypeConfiguration.class);\n\t\tthis.context.refresh();\n\t\t/*\n\t\t * Arguably this should be true, but as things are implemented the conditions\n\t\t * specified in the different attributes of @ConditionalOnBean are combined with\n\t\t * logical OR (not AND) so if any of them match the condition is true.\n\t\t */\n\t\tassertThat(this.context.containsBean("bar")).isFalse();\n\t}\n\n\t@Test\n\tpublic void hierarchyConsidered() throws Exception {\n\t\tthis.context.register(FooConfiguration.class);\n\t\tthis.context.refresh();\n\t\tAnnotationConfigApplicationContext childContext = new AnnotationConfigApplicationContext();\n\t\tchildContext.setParent(this.context);\n\t\tchildContext.register(HierarchyConsidered.class);\n\t\tchildContext.refresh();\n\t\tassertThat(childContext.containsLocalBean("bar")).isFalse();\n\t}\n\n\t@Test\n\tpublic void hierarchyNotConsidered() throws Exception {\n\t\tthis.context.register(FooConfiguration.class);\n\t\tthis.context.refresh();\n\t\tAnnotationConfigApplicationContext childContext = new AnnotationConfigApplicationContext();\n\t\tchildContext.setParent(this.context);\n\t\tchildContext.register(HierarchyNotConsidered.class);\n\t\tchildContext.refresh();\n\t\tassertThat(childContext.containsLocalBean("bar")).isTrue();\n\t}\n\n\t@Test\n\tpublic void impliedOnBeanMethod() throws Exception {\n\t\tthis.context.register(ExampleBeanConfiguration.class, ImpliedOnBeanMethod.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.getBeansOfType(ExampleBean.class).size()).isEqualTo(1);\n\t}\n\n\t@Test\n\tpublic void testAnnotationOnMissingBeanCondition() {\n\t\tthis.context.register(FooConfiguration.class, OnAnnotationConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.containsBean("bar")).isFalse();\n\t\tassertThat(this.context.getBean("foo")).isEqualTo("foo");\n\t}\n\n\t// Rigorous test for SPR-11069\n\t@Test\n\tpublic void testAnnotationOnMissingBeanConditionWithEagerFactoryBean() {\n\t\tthis.context.register(FooConfiguration.class, OnAnnotationConfiguration.class,\n\t\t\t\tFactoryBeanXmlConfiguration.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.containsBean("bar")).isFalse();\n\t\tassertThat(this.context.containsBean("example")).isTrue();\n\t\tassertThat(this.context.getBean("foo")).isEqualTo("foo");\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithFactoryBean() {\n\t\tthis.context.register(FactoryBeanConfiguration.class,\n\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.getBean(ExampleBean.class).toString())\n\t\t\t\t.isEqualTo("fromFactory");\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithComponentScannedFactoryBean() {\n\t\tthis.context.register(ComponentScannedFactoryBeanBeanMethodConfiguration.class,\n\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.getBean(ExampleBean.class).toString())\n\t\t\t\t.isEqualTo("fromFactory");\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithComponentScannedFactoryBeanWithBeanMethodArguments() {\n\t\tthis.context.register(\n\t\t\t\tComponentScannedFactoryBeanBeanMethodWithArgumentsConfiguration.class,\n\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.getBean(ExampleBean.class).toString())\n\t\t\t\t.isEqualTo("fromFactory");\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithFactoryBeanWithBeanMethodArguments() {\n\t\tthis.context.register(FactoryBeanWithBeanMethodArgumentsConfiguration.class,\n\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n\t\tEnvironmentTestUtils.addEnvironment(this.context, "theValue:foo");\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.getBean(ExampleBean.class).toString())\n\t\t\t\t.isEqualTo("fromFactory");\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithConcreteFactoryBean() {\n\t\tthis.context.register(ConcreteFactoryBeanConfiguration.class,\n\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.getBean(ExampleBean.class).toString())\n\t\t\t\t.isEqualTo("fromFactory");\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithUnhelpfulFactoryBean() {\n\t\tthis.context.register(UnhelpfulFactoryBeanConfiguration.class,\n\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n\t\tthis.context.refresh();\n\t\t// We could not tell that the FactoryBean would ultimately create an ExampleBean\n\t\tassertThat(this.context.getBeansOfType(ExampleBean.class).values()).hasSize(2);\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithRegisteredFactoryBean() {\n\t\tthis.context.register(RegisteredFactoryBeanConfiguration.class,\n\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.getBean(ExampleBean.class).toString())\n\t\t\t\t.isEqualTo("fromFactory");\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithNonspecificFactoryBeanWithClassAttribute() {\n\t\tthis.context.register(NonspecificFactoryBeanClassAttributeConfiguration.class,\n\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.getBean(ExampleBean.class).toString())\n\t\t\t\t.isEqualTo("fromFactory");\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithNonspecificFactoryBeanWithStringAttribute() {\n\t\tthis.context.register(NonspecificFactoryBeanStringAttributeConfiguration.class,\n\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.getBean(ExampleBean.class).toString())\n\t\t\t\t.isEqualTo("fromFactory");\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithFactoryBeanInXml() {\n\t\tthis.context.register(FactoryBeanXmlConfiguration.class,\n\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.getBean(ExampleBean.class).toString())\n\t\t\t\t.isEqualTo("fromFactory");\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithIgnoredSubclass() {\n\t\tthis.context.register(CustomExampleBeanConfiguration.class,\n\t\t\t\tConditionalOnIgnoredSubclass.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.getBeansOfType(ExampleBean.class)).hasSize(2);\n\t\tassertThat(this.context.getBeansOfType(CustomExampleBean.class)).hasSize(1);\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithIgnoredSubclassByName() {\n\t\tthis.context.register(CustomExampleBeanConfiguration.class,\n\t\t\t\tConditionalOnIgnoredSubclassByName.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.getBeansOfType(ExampleBean.class)).hasSize(2);\n\t\tassertThat(this.context.getBeansOfType(CustomExampleBean.class)).hasSize(1);\n\t}\n\n\t@Test\n\tpublic void grandparentIsConsideredWhenUsingParentsStrategy() {\n\t\tthis.context.register(ExampleBeanConfiguration.class);\n\t\tthis.context.refresh();\n\t\tAnnotationConfigApplicationContext parent = new AnnotationConfigApplicationContext();\n\t\tparent.setParent(this.context);\n\t\tparent.refresh();\n\t\tAnnotationConfigApplicationContext child = new AnnotationConfigApplicationContext();\n\t\tchild.setParent(parent);\n\t\tchild.register(ExampleBeanConfiguration.class,\n\t\t\t\tOnBeanInParentsConfiguration.class);\n\t\tchild.refresh();\n\t\tassertThat(child.getBeansOfType(ExampleBean.class)).hasSize(1);\n\t\tchild.close();\n\t\tparent.close();\n\t}\n\n\t@Test\n\tpublic void currentContextIsIgnoredWhenUsingParentsStrategy() {\n\t\tthis.context.refresh();\n\t\tAnnotationConfigApplicationContext child = new AnnotationConfigApplicationContext();\n\t\tchild.register(ExampleBeanConfiguration.class,\n\t\t\t\tOnBeanInParentsConfiguration.class);\n\t\tchild.setParent(this.context);\n\t\tchild.refresh();\n\t\tassertThat(child.getBeansOfType(ExampleBean.class)).hasSize(2);\n\t}\n\n\t@Test\n\tpublic void beanProducedByFactoryBeanIsConsideredWhenMatchingOnAnnotation() {\n\t\tthis.context.register(ConcreteFactoryBeanConfiguration.class,\n\t\t\t\tOnAnnotationWithFactoryBeanConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.containsBean("bar")).isFalse();\n\t\tassertThat(this.context.getBeansOfType(ExampleBean.class)).hasSize(1);\n\t}\n\n\t@Configuration\n\tprotected static class OnBeanInParentsConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(search = SearchStrategy.PARENTS)\n\t\tpublic ExampleBean exampleBean2() {\n\t\t\treturn new ExampleBean("test");\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(name = "foo")\n\tprotected static class OnBeanNameConfiguration {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(name = "foo", value = Date.class)\n\t@ConditionalOnBean(name = "foo", value = Date.class)\n\tprotected static class OnBeanNameAndTypeConfiguration {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class FactoryBeanConfiguration {\n\n\t\t@Bean\n\t\tpublic FactoryBean<ExampleBean> exampleBeanFactoryBean() {\n\t\t\treturn new ExampleFactoryBean("foo");\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ComponentScan(basePackages = "org.springframework.boot.autoconfigure.condition.scan", includeFilters = @Filter(type = FilterType.ASSIGNABLE_TYPE, classes = ScannedFactoryBeanConfiguration.class))\n\tprotected static class ComponentScannedFactoryBeanBeanMethodConfiguration {\n\n\t}\n\n\t@Configuration\n\t@ComponentScan(basePackages = "org.springframework.boot.autoconfigure.condition.scan", includeFilters = @Filter(type = FilterType.ASSIGNABLE_TYPE, classes = ScannedFactoryBeanWithBeanMethodArgumentsConfiguration.class))\n\tprotected static class ComponentScannedFactoryBeanBeanMethodWithArgumentsConfiguration {\n\n\t}\n\n\t@Configuration\n\tprotected static class FactoryBeanWithBeanMethodArgumentsConfiguration {\n\n\t\t@Bean\n\t\tpublic FactoryBean<ExampleBean> exampleBeanFactoryBean(\n\t\t\t\t@Value("${theValue}") String value) {\n\t\t\treturn new ExampleFactoryBean(value);\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class ConcreteFactoryBeanConfiguration {\n\n\t\t@Bean\n\t\tpublic ExampleFactoryBean exampleBeanFactoryBean() {\n\t\t\treturn new ExampleFactoryBean("foo");\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class UnhelpfulFactoryBeanConfiguration {\n\n\t\t@Bean\n\t\t@SuppressWarnings("rawtypes")\n\t\tpublic FactoryBean exampleBeanFactoryBean() {\n\t\t\treturn new ExampleFactoryBean("foo");\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@Import(NonspecificFactoryBeanClassAttributeRegistrar.class)\n\tprotected static class NonspecificFactoryBeanClassAttributeConfiguration {\n\n\t}\n\n\tprotected static class NonspecificFactoryBeanClassAttributeRegistrar\n\t\t\timplements ImportBeanDefinitionRegistrar {\n\n\t\t@Override\n\t\tpublic void registerBeanDefinitions(AnnotationMetadata meta,\n\t\t\t\tBeanDefinitionRegistry registry) {\n\t\t\tBeanDefinitionBuilder builder = BeanDefinitionBuilder\n\t\t\t\t\t.genericBeanDefinition(NonspecificFactoryBean.class);\n\t\t\tbuilder.addConstructorArgValue("foo");\n\t\t\tbuilder.getBeanDefinition().setAttribute(\n\t\t\t\t\tOnBeanCondition.FACTORY_BEAN_OBJECT_TYPE, ExampleBean.class);\n\t\t\tregistry.registerBeanDefinition("exampleBeanFactoryBean",\n\t\t\t\t\tbuilder.getBeanDefinition());\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@Import(NonspecificFactoryBeanClassAttributeRegistrar.class)\n\tprotected static class NonspecificFactoryBeanStringAttributeConfiguration {\n\n\t}\n\n\tprotected static class NonspecificFactoryBeanStringAttributeRegistrar\n\t\t\timplements ImportBeanDefinitionRegistrar {\n\n\t\t@Override\n\t\tpublic void registerBeanDefinitions(AnnotationMetadata meta,\n\t\t\t\tBeanDefinitionRegistry registry) {\n\t\t\tBeanDefinitionBuilder builder = BeanDefinitionBuilder\n\t\t\t\t\t.genericBeanDefinition(NonspecificFactoryBean.class);\n\t\t\tbuilder.addConstructorArgValue("foo");\n\t\t\tbuilder.getBeanDefinition().setAttribute(\n\t\t\t\t\tOnBeanCondition.FACTORY_BEAN_OBJECT_TYPE,\n\t\t\t\t\tExampleBean.class.getName());\n\t\t\tregistry.registerBeanDefinition("exampleBeanFactoryBean",\n\t\t\t\t\tbuilder.getBeanDefinition());\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@Import(FactoryBeanRegistrar.class)\n\tprotected static class RegisteredFactoryBeanConfiguration {\n\n\t}\n\n\tprotected static class FactoryBeanRegistrar implements ImportBeanDefinitionRegistrar {\n\n\t\t@Override\n\t\tpublic void registerBeanDefinitions(AnnotationMetadata meta,\n\t\t\t\tBeanDefinitionRegistry registry) {\n\t\t\tBeanDefinitionBuilder builder = BeanDefinitionBuilder\n\t\t\t\t\t.genericBeanDefinition(ExampleFactoryBean.class);\n\t\t\tbuilder.addConstructorArgValue("foo");\n\t\t\tregistry.registerBeanDefinition("exampleBeanFactoryBean",\n\t\t\t\t\tbuilder.getBeanDefinition());\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ImportResource("org/springframework/boot/autoconfigure/condition/factorybean.xml")\n\tprotected static class FactoryBeanXmlConfiguration {\n\n\t}\n\n\t@Configuration\n\tprotected static class ConditionalOnFactoryBean {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(ExampleBean.class)\n\t\tpublic ExampleBean createExampleBean() {\n\t\t\treturn new ExampleBean("direct");\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class ConditionalOnIgnoredSubclass {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(value = ExampleBean.class, ignored = CustomExampleBean.class)\n\t\tpublic ExampleBean exampleBean() {\n\t\t\treturn new ExampleBean("test");\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class ConditionalOnIgnoredSubclassByName {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(value = ExampleBean.class, ignoredType = "org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.CustomExampleBean")\n\t\tpublic ExampleBean exampleBean() {\n\t\t\treturn new ExampleBean("test");\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class CustomExampleBeanConfiguration {\n\n\t\t@Bean\n\t\tpublic CustomExampleBean customExampleBean() {\n\t\t\treturn new CustomExampleBean();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(annotation = EnableScheduling.class)\n\tprotected static class OnAnnotationConfiguration {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(annotation = TestAnnotation.class)\n\tprotected static class OnAnnotationWithFactoryBeanConfiguration {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@EnableScheduling\n\tprotected static class FooConfiguration {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(name = "foo")\n\tprotected static class HierarchyConsidered {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(name = "foo", search = SearchStrategy.CURRENT)\n\tprotected static class HierarchyNotConsidered {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class ExampleBeanConfiguration {\n\n\t\t@Bean\n\t\tpublic ExampleBean exampleBean() {\n\t\t\treturn new ExampleBean("test");\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class ImpliedOnBeanMethod {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic ExampleBean exampleBean2() {\n\t\t\treturn new ExampleBean("test");\n\t\t}\n\n\t}\n\n\t@TestAnnotation\n\tpublic static class ExampleBean {\n\n\t\tprivate String value;\n\n\t\tpublic ExampleBean(String value) {\n\t\t\tthis.value = value;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn this.value;\n\t\t}\n\n\t}\n\n\tpublic static class CustomExampleBean extends ExampleBean {\n\n\t\tpublic CustomExampleBean() {\n\t\t\tsuper("custom subclass");\n\t\t}\n\n\t}\n\n\tpublic static class ExampleFactoryBean implements FactoryBean<ExampleBean> {\n\n\t\tpublic ExampleFactoryBean(String value) {\n\t\t\tAssert.state(!value.contains("$"));\n\t\t}\n\n\t\t@Override\n\t\tpublic ExampleBean getObject() throws Exception {\n\t\t\treturn new ExampleBean("fromFactory");\n\t\t}\n\n\t\t@Override\n\t\tpublic Class<?> getObjectType() {\n\t\t\treturn ExampleBean.class;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean isSingleton() {\n\t\t\treturn false;\n\t\t}\n\n\t}\n\n\tpublic static class NonspecificFactoryBean implements FactoryBean<Object> {\n\n\t\tpublic NonspecificFactoryBean(String value) {\n\t\t\tAssert.state(!value.contains("$"));\n\t\t}\n\n\t\t@Override\n\t\tpublic ExampleBean getObject() throws Exception {\n\t\t\treturn new ExampleBean("fromFactory");\n\t\t}\n\n\t\t@Override\n\t\tpublic Class<?> getObjectType() {\n\t\t\treturn ExampleBean.class;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean isSingleton() {\n\t\t\treturn false;\n\t\t}\n\n\t}\n\n\t@Target(ElementType.TYPE)\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Documented\n\tpublic @interface TestAnnotation {\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport java.util.Date;\n\nimport org.junit.Test;\n\nimport org.springframework.beans.factory.FactoryBean;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.beans.factory.support.BeanDefinitionBuilder;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistry;\nimport org.springframework.boot.autoconfigure.PropertyPlaceholderAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.scan.ScannedFactoryBeanConfiguration;\nimport org.springframework.boot.autoconfigure.condition.scan.ScannedFactoryBeanWithBeanMethodArgumentsConfiguration;\nimport org.springframework.boot.test.util.EnvironmentTestUtils;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.ComponentScan.Filter;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.FilterType;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.ImportBeanDefinitionRegistrar;\nimport org.springframework.context.annotation.ImportResource;\nimport org.springframework.core.type.AnnotationMetadata;\nimport org.springframework.scheduling.annotation.EnableScheduling;\nimport org.springframework.util.Assert;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link ConditionalOnMissingBean}.\n *\n * @author Dave Syer\n * @author Phillip Webb\n * @author Jakub Kubrynski\n * @author Andy Wilkinson\n */\n@SuppressWarnings("resource")\npublic class ConditionalOnMissingBeanTests {\n\n\tprivate final AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n\n\t@Test\n\tpublic void testNameOnMissingBeanCondition() {\n\t\tthis.context.register(FooConfiguration.class, OnBeanNameConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.containsBean("bar")).isFalse();\n\t\tassertThat(this.context.getBean("foo")).isEqualTo("foo");\n\t}\n\n\t@Test\n\tpublic void testNameOnMissingBeanConditionReverseOrder() {\n\t\tthis.context.register(OnBeanNameConfiguration.class, FooConfiguration.class);\n\t\tthis.context.refresh();\n\t\t// FIXME: ideally this would be false, but the ordering is a problem\n\t\tassertThat(this.context.containsBean("bar")).isTrue();\n\t\tassertThat(this.context.getBean("foo")).isEqualTo("foo");\n\t}\n\n\t@Test\n\tpublic void testNameAndTypeOnMissingBeanCondition() {\n\t\tthis.context.register(FooConfiguration.class,\n\t\t\t\tOnBeanNameAndTypeConfiguration.class);\n\t\tthis.context.refresh();\n\t\t/*\n\t\t * Arguably this should be true, but as things are implemented the conditions\n\t\t * specified in the different attributes of @ConditionalOnBean are combined with\n\t\t * logical OR (not AND) so if any of them match the condition is true.\n\t\t */\n\t\tassertThat(this.context.containsBean("bar")).isFalse();\n\t}\n\n\t@Test\n\tpublic void hierarchyConsidered() throws Exception {\n\t\tthis.context.register(FooConfiguration.class);\n\t\tthis.context.refresh();\n\t\tAnnotationConfigApplicationContext childContext = new AnnotationConfigApplicationContext();\n\t\tchildContext.setParent(this.context);\n\t\tchildContext.register(HierarchyConsidered.class);\n\t\tchildContext.refresh();\n\t\tassertThat(childContext.containsLocalBean("bar")).isFalse();\n\t}\n\n\t@Test\n\tpublic void hierarchyNotConsidered() throws Exception {\n\t\tthis.context.register(FooConfiguration.class);\n\t\tthis.context.refresh();\n\t\tAnnotationConfigApplicationContext childContext = new AnnotationConfigApplicationContext();\n\t\tchildContext.setParent(this.context);\n\t\tchildContext.register(HierarchyNotConsidered.class);\n\t\tchildContext.refresh();\n\t\tassertThat(childContext.containsLocalBean("bar")).isTrue();\n\t}\n\n\t@Test\n\tpublic void impliedOnBeanMethod() throws Exception {\n\t\tthis.context.register(ExampleBeanConfiguration.class, ImpliedOnBeanMethod.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.getBeansOfType(ExampleBean.class).size()).isEqualTo(1);\n\t}\n\n\t@Test\n\tpublic void testAnnotationOnMissingBeanCondition() {\n\t\tthis.context.register(FooConfiguration.class, OnAnnotationConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.containsBean("bar")).isFalse();\n\t\tassertThat(this.context.getBean("foo")).isEqualTo("foo");\n\t}\n\n\t// Rigorous test for SPR-11069\n\t@Test\n\tpublic void testAnnotationOnMissingBeanConditionWithEagerFactoryBean() {\n\t\tthis.context.register(FooConfiguration.class, OnAnnotationConfiguration.class,\n\t\t\t\tFactoryBeanXmlConfiguration.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.containsBean("bar")).isFalse();\n\t\tassertThat(this.context.containsBean("example")).isTrue();\n\t\tassertThat(this.context.getBean("foo")).isEqualTo("foo");\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithFactoryBean() {\n\t\tthis.context.register(FactoryBeanConfiguration.class,\n\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.getBean(ExampleBean.class).toString())\n\t\t\t\t.isEqualTo("fromFactory");\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithComponentScannedFactoryBean() {\n\t\tthis.context.register(ComponentScannedFactoryBeanBeanMethodConfiguration.class,\n\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.getBean(ExampleBean.class).toString())\n\t\t\t\t.isEqualTo("fromFactory");\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithComponentScannedFactoryBeanWithBeanMethodArguments() {\n\t\tthis.context.register(\n\t\t\t\tComponentScannedFactoryBeanBeanMethodWithArgumentsConfiguration.class,\n\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.getBean(ExampleBean.class).toString())\n\t\t\t\t.isEqualTo("fromFactory");\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithFactoryBeanWithBeanMethodArguments() {\n\t\tthis.context.register(FactoryBeanWithBeanMethodArgumentsConfiguration.class,\n\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n\t\tEnvironmentTestUtils.addEnvironment(this.context, "theValue:foo");\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.getBean(ExampleBean.class).toString())\n\t\t\t\t.isEqualTo("fromFactory");\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithConcreteFactoryBean() {\n\t\tthis.context.register(ConcreteFactoryBeanConfiguration.class,\n\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.getBean(ExampleBean.class).toString())\n\t\t\t\t.isEqualTo("fromFactory");\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithUnhelpfulFactoryBean() {\n\t\tthis.context.register(UnhelpfulFactoryBeanConfiguration.class,\n\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n\t\tthis.context.refresh();\n\t\t// We could not tell that the FactoryBean would ultimately create an ExampleBean\n\t\tassertThat(this.context.getBeansOfType(ExampleBean.class).values()).hasSize(2);\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithRegisteredFactoryBean() {\n\t\tthis.context.register(RegisteredFactoryBeanConfiguration.class,\n\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.getBean(ExampleBean.class).toString())\n\t\t\t\t.isEqualTo("fromFactory");\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithNonspecificFactoryBeanWithClassAttribute() {\n\t\tthis.context.register(NonspecificFactoryBeanClassAttributeConfiguration.class,\n\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.getBean(ExampleBean.class).toString())\n\t\t\t\t.isEqualTo("fromFactory");\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithNonspecificFactoryBeanWithStringAttribute() {\n\t\tthis.context.register(NonspecificFactoryBeanStringAttributeConfiguration.class,\n\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.getBean(ExampleBean.class).toString())\n\t\t\t\t.isEqualTo("fromFactory");\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithFactoryBeanInXml() {\n\t\tthis.context.register(FactoryBeanXmlConfiguration.class,\n\t\t\t\tConditionalOnFactoryBean.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.getBean(ExampleBean.class).toString())\n\t\t\t\t.isEqualTo("fromFactory");\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithIgnoredSubclass() {\n\t\tthis.context.register(CustomExampleBeanConfiguration.class,\n\t\t\t\tConditionalOnIgnoredSubclass.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.getBeansOfType(ExampleBean.class)).hasSize(2);\n\t\tassertThat(this.context.getBeansOfType(CustomExampleBean.class)).hasSize(1);\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanConditionWithIgnoredSubclassByName() {\n\t\tthis.context.register(CustomExampleBeanConfiguration.class,\n\t\t\t\tConditionalOnIgnoredSubclassByName.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.getBeansOfType(ExampleBean.class)).hasSize(2);\n\t\tassertThat(this.context.getBeansOfType(CustomExampleBean.class)).hasSize(1);\n\t}\n\n\t@Test\n\tpublic void grandparentIsConsideredWhenUsingParentsStrategy() {\n\t\tthis.context.register(ExampleBeanConfiguration.class);\n\t\tthis.context.refresh();\n\t\tAnnotationConfigApplicationContext parent = new AnnotationConfigApplicationContext();\n\t\tparent.setParent(this.context);\n\t\tparent.refresh();\n\t\tAnnotationConfigApplicationContext child = new AnnotationConfigApplicationContext();\n\t\tchild.setParent(parent);\n\t\tchild.register(ExampleBeanConfiguration.class,\n\t\t\t\tOnBeanInParentsConfiguration.class);\n\t\tchild.refresh();\n\t\tassertThat(child.getBeansOfType(ExampleBean.class)).hasSize(1);\n\t\tchild.close();\n\t\tparent.close();\n\t}\n\n\t@Test\n\tpublic void currentContextIsIgnoredWhenUsingParentsStrategy() {\n\t\tthis.context.refresh();\n\t\tAnnotationConfigApplicationContext child = new AnnotationConfigApplicationContext();\n\t\tchild.register(ExampleBeanConfiguration.class,\n\t\t\t\tOnBeanInParentsConfiguration.class);\n\t\tchild.setParent(this.context);\n\t\tchild.refresh();\n\t\tassertThat(child.getBeansOfType(ExampleBean.class)).hasSize(2);\n\t}\n\n\t@Configuration\n\tprotected static class OnBeanInParentsConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(search = SearchStrategy.PARENTS)\n\t\tpublic ExampleBean exampleBean2() {\n\t\t\treturn new ExampleBean("test");\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(name = "foo")\n\tprotected static class OnBeanNameConfiguration {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(name = "foo", value = Date.class)\n\t@ConditionalOnBean(name = "foo", value = Date.class)\n\tprotected static class OnBeanNameAndTypeConfiguration {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class FactoryBeanConfiguration {\n\n\t\t@Bean\n\t\tpublic FactoryBean<ExampleBean> exampleBeanFactoryBean() {\n\t\t\treturn new ExampleFactoryBean("foo");\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ComponentScan(basePackages = "org.springframework.boot.autoconfigure.condition.scan", includeFilters = @Filter(type = FilterType.ASSIGNABLE_TYPE, classes = ScannedFactoryBeanConfiguration.class))\n\tprotected static class ComponentScannedFactoryBeanBeanMethodConfiguration {\n\n\t}\n\n\t@Configuration\n\t@ComponentScan(basePackages = "org.springframework.boot.autoconfigure.condition.scan", includeFilters = @Filter(type = FilterType.ASSIGNABLE_TYPE, classes = ScannedFactoryBeanWithBeanMethodArgumentsConfiguration.class))\n\tprotected static class ComponentScannedFactoryBeanBeanMethodWithArgumentsConfiguration {\n\n\t}\n\n\t@Configuration\n\tprotected static class FactoryBeanWithBeanMethodArgumentsConfiguration {\n\n\t\t@Bean\n\t\tpublic FactoryBean<ExampleBean> exampleBeanFactoryBean(\n\t\t\t\t@Value("${theValue}") String value) {\n\t\t\treturn new ExampleFactoryBean(value);\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class ConcreteFactoryBeanConfiguration {\n\n\t\t@Bean\n\t\tpublic ExampleFactoryBean exampleBeanFactoryBean() {\n\t\t\treturn new ExampleFactoryBean("foo");\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class UnhelpfulFactoryBeanConfiguration {\n\n\t\t@Bean\n\t\t@SuppressWarnings("rawtypes")\n\t\tpublic FactoryBean exampleBeanFactoryBean() {\n\t\t\treturn new ExampleFactoryBean("foo");\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@Import(NonspecificFactoryBeanClassAttributeRegistrar.class)\n\tprotected static class NonspecificFactoryBeanClassAttributeConfiguration {\n\n\t}\n\n\tprotected static class NonspecificFactoryBeanClassAttributeRegistrar\n\t\t\timplements ImportBeanDefinitionRegistrar {\n\n\t\t@Override\n\t\tpublic void registerBeanDefinitions(AnnotationMetadata meta,\n\t\t\t\tBeanDefinitionRegistry registry) {\n\t\t\tBeanDefinitionBuilder builder = BeanDefinitionBuilder\n\t\t\t\t\t.genericBeanDefinition(NonspecificFactoryBean.class);\n\t\t\tbuilder.addConstructorArgValue("foo");\n\t\t\tbuilder.getBeanDefinition().setAttribute(\n\t\t\t\t\tOnBeanCondition.FACTORY_BEAN_OBJECT_TYPE, ExampleBean.class);\n\t\t\tregistry.registerBeanDefinition("exampleBeanFactoryBean",\n\t\t\t\t\tbuilder.getBeanDefinition());\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@Import(NonspecificFactoryBeanClassAttributeRegistrar.class)\n\tprotected static class NonspecificFactoryBeanStringAttributeConfiguration {\n\n\t}\n\n\tprotected static class NonspecificFactoryBeanStringAttributeRegistrar\n\t\t\timplements ImportBeanDefinitionRegistrar {\n\n\t\t@Override\n\t\tpublic void registerBeanDefinitions(AnnotationMetadata meta,\n\t\t\t\tBeanDefinitionRegistry registry) {\n\t\t\tBeanDefinitionBuilder builder = BeanDefinitionBuilder\n\t\t\t\t\t.genericBeanDefinition(NonspecificFactoryBean.class);\n\t\t\tbuilder.addConstructorArgValue("foo");\n\t\t\tbuilder.getBeanDefinition().setAttribute(\n\t\t\t\t\tOnBeanCondition.FACTORY_BEAN_OBJECT_TYPE,\n\t\t\t\t\tExampleBean.class.getName());\n\t\t\tregistry.registerBeanDefinition("exampleBeanFactoryBean",\n\t\t\t\t\tbuilder.getBeanDefinition());\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@Import(FactoryBeanRegistrar.class)\n\tprotected static class RegisteredFactoryBeanConfiguration {\n\n\t}\n\n\tprotected static class FactoryBeanRegistrar implements ImportBeanDefinitionRegistrar {\n\n\t\t@Override\n\t\tpublic void registerBeanDefinitions(AnnotationMetadata meta,\n\t\t\t\tBeanDefinitionRegistry registry) {\n\t\t\tBeanDefinitionBuilder builder = BeanDefinitionBuilder\n\t\t\t\t\t.genericBeanDefinition(ExampleFactoryBean.class);\n\t\t\tbuilder.addConstructorArgValue("foo");\n\t\t\tregistry.registerBeanDefinition("exampleBeanFactoryBean",\n\t\t\t\t\tbuilder.getBeanDefinition());\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ImportResource("org/springframework/boot/autoconfigure/condition/factorybean.xml")\n\tprotected static class FactoryBeanXmlConfiguration {\n\n\t}\n\n\t@Configuration\n\tprotected static class ConditionalOnFactoryBean {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(ExampleBean.class)\n\t\tpublic ExampleBean createExampleBean() {\n\t\t\treturn new ExampleBean("direct");\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class ConditionalOnIgnoredSubclass {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(value = ExampleBean.class, ignored = CustomExampleBean.class)\n\t\tpublic ExampleBean exampleBean() {\n\t\t\treturn new ExampleBean("test");\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class ConditionalOnIgnoredSubclassByName {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(value = ExampleBean.class, ignoredType = "org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.CustomExampleBean")\n\t\tpublic ExampleBean exampleBean() {\n\t\t\treturn new ExampleBean("test");\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class CustomExampleBeanConfiguration {\n\n\t\t@Bean\n\t\tpublic CustomExampleBean customExampleBean() {\n\t\t\treturn new CustomExampleBean();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(annotation = EnableScheduling.class)\n\tprotected static class OnAnnotationConfiguration {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@EnableScheduling\n\tprotected static class FooConfiguration {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(name = "foo")\n\tprotected static class HierarchyConsidered {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(name = "foo", search = SearchStrategy.CURRENT)\n\tprotected static class HierarchyNotConsidered {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class ExampleBeanConfiguration {\n\n\t\t@Bean\n\t\tpublic ExampleBean exampleBean() {\n\t\t\treturn new ExampleBean("test");\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class ImpliedOnBeanMethod {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic ExampleBean exampleBean2() {\n\t\t\treturn new ExampleBean("test");\n\t\t}\n\n\t}\n\n\tpublic static class ExampleBean {\n\n\t\tprivate String value;\n\n\t\tpublic ExampleBean(String value) {\n\t\t\tthis.value = value;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn this.value;\n\t\t}\n\n\t}\n\n\tpublic static class CustomExampleBean extends ExampleBean {\n\n\t\tpublic CustomExampleBean() {\n\t\t\tsuper("custom subclass");\n\t\t}\n\n\t}\n\n\tpublic static class ExampleFactoryBean implements FactoryBean<ExampleBean> {\n\n\t\tpublic ExampleFactoryBean(String value) {\n\t\t\tAssert.state(!value.contains("$"));\n\t\t}\n\n\t\t@Override\n\t\tpublic ExampleBean getObject() throws Exception {\n\t\t\treturn new ExampleBean("fromFactory");\n\t\t}\n\n\t\t@Override\n\t\tpublic Class<?> getObjectType() {\n\t\t\treturn ExampleBean.class;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean isSingleton() {\n\t\t\treturn false;\n\t\t}\n\n\t}\n\n\tpublic static class NonspecificFactoryBean implements FactoryBean<Object> {\n\n\t\tpublic NonspecificFactoryBean(String value) {\n\t\t\tAssert.state(!value.contains("$"));\n\t\t}\n\n\t\t@Override\n\t\tpublic ExampleBean getObject() throws Exception {\n\t\t\treturn new ExampleBean("fromFactory");\n\t\t}\n\n\t\t@Override\n\t\tpublic Class<?> getObjectType() {\n\t\t\treturn ExampleBean.class;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean isSingleton() {\n\t\t\treturn false;\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
