{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailSenderPropertiesConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2012-2018 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.mail;\n+\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.mail.MailSender;\n+import org.springframework.mail.javamail.JavaMailSenderImpl;\n+\n+/**\n+ * Auto-configure a {@link MailSender} based on properties configuration.\n+ *\n+ * @author Oliver Gierke\n+ * @author Eddú Meléndez\n+ * @author Stephane Nicoll\n+ */\n+@Configuration\n+@ConditionalOnProperty(prefix = "spring.mail", name = "host")\n+class MailSenderPropertiesConfiguration {\n+\n+\tprivate final MailProperties properties;\n+\n+\tMailSenderPropertiesConfiguration(MailProperties properties) {\n+\t\tthis.properties = properties;\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic JavaMailSenderImpl mailSender() {\n+\t\tJavaMailSenderImpl sender = new JavaMailSenderImpl();\n+\t\tapplyProperties(sender);\n+\t\treturn sender;\n+\t}\n+\n+\tprivate void applyProperties(JavaMailSenderImpl sender) {\n+\t\tsender.setHost(this.properties.getHost());\n+\t\tif (this.properties.getPort() != null) {\n+\t\t\tsender.setPort(this.properties.getPort());\n+\t\t}\n+\t\tsender.setUsername(this.properties.getUsername());\n+\t\tsender.setPassword(this.properties.getPassword());\n+\t\tsender.setProtocol(this.properties.getProtocol());\n+\t\tif (this.properties.getDefaultEncoding() != null) {\n+\t\t\tsender.setDefaultEncoding(this.properties.getDefaultEncoding().name());\n+\t\t}\n+\t\tif (!this.properties.getProperties().isEmpty()) {\n+\t\t\tsender.setJavaMailProperties(asProperties(this.properties.getProperties()));\n+\t\t}\n+\t}\n+\n+\tprivate Properties asProperties(Map<String, String> source) {\n+\t\tProperties properties = new Properties();\n+\t\tproperties.putAll(source);\n+\t\treturn properties;\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.mail;\n\nimport java.util.Map;\nimport java.util.Properties;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.mail.MailSender;\nimport org.springframework.mail.javamail.JavaMailSenderImpl;\n\n/**\n * Auto-configure a {@link MailSender} based on properties configuration.\n *\n * @author Oliver Gierke\n * @author Eddú Meléndez\n * @author Stephane Nicoll\n */\n@Configuration\n@ConditionalOnProperty(prefix = "spring.mail", name = "host")\nclass MailSenderPropertiesConfiguration {\n\n\tprivate final MailProperties properties;\n\n\tMailSenderPropertiesConfiguration(MailProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic JavaMailSenderImpl mailSender() {\n\t\tJavaMailSenderImpl sender = new JavaMailSenderImpl();\n\t\tapplyProperties(sender);\n\t\treturn sender;\n\t}\n\n\tprivate void applyProperties(JavaMailSenderImpl sender) {\n\t\tsender.setHost(this.properties.getHost());\n\t\tif (this.properties.getPort() != null) {\n\t\t\tsender.setPort(this.properties.getPort());\n\t\t}\n\t\tsender.setUsername(this.properties.getUsername());\n\t\tsender.setPassword(this.properties.getPassword());\n\t\tsender.setProtocol(this.properties.getProtocol());\n\t\tif (this.properties.getDefaultEncoding() != null) {\n\t\t\tsender.setDefaultEncoding(this.properties.getDefaultEncoding().name());\n\t\t}\n\t\tif (!this.properties.getProperties().isEmpty()) {\n\t\t\tsender.setJavaMailProperties(asProperties(this.properties.getProperties()));\n\t\t}\n\t}\n\n\tprivate Properties asProperties(Map<String, String> source) {\n\t\tProperties properties = new Properties();\n\t\tproperties.putAll(source);\n\t\treturn properties;\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
