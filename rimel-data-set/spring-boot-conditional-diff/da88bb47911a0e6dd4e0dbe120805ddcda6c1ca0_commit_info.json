{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQXAConnectionFactoryConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2012-2014 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.jms.hornetq;\n+\n+import javax.jms.ConnectionFactory;\n+import javax.transaction.TransactionManager;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.hornetq.jms.client.HornetQXAConnectionFactory;\n+import org.hornetq.jms.server.embedded.EmbeddedJMS;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.jta.XAConnectionFactoryWrapper;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Configuration for HornetQ XA {@link ConnectionFactory}.\n+ *\n+ * @author Phillip Webb\n+ * @since 1.2.0\n+ */\n+@Configuration\n+@ConditionalOnMissingBean(ConnectionFactory.class)\n+@ConditionalOnClass(TransactionManager.class)\n+@ConditionalOnBean(XAConnectionFactoryWrapper.class)\n+class HornetQXAConnectionFactoryConfiguration {\n+\n+\tprivate static Log logger = LogFactory\n+\t\t\t.getLog(HornetQEmbeddedServerConfiguration.class);\n+\n+\t// Ensure JMS is setup before XA\n+\t@Autowired(required = false)\n+\tprivate EmbeddedJMS embeddedJMS;\n+\n+\t@Bean\n+\tpublic ConnectionFactory jmsConnectionFactory(HornetQProperties properties,\n+\t\t\tXAConnectionFactoryWrapper wrapper) throws Exception {\n+\t\tif (this.embeddedJMS != null && logger.isDebugEnabled()) {\n+\t\t\tlogger.debug("Using embdedded HornetQ broker with XA");\n+\t\t}\n+\t\treturn wrapper.wrapConnectionFactory(new HornetQConnectionFactoryFactory(\n+\t\t\t\tproperties).createConnectionFactory(HornetQXAConnectionFactory.class));\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jms.hornetq;\n\nimport javax.jms.ConnectionFactory;\nimport javax.transaction.TransactionManager;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.hornetq.jms.client.HornetQXAConnectionFactory;\nimport org.hornetq.jms.server.embedded.EmbeddedJMS;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.jta.XAConnectionFactoryWrapper;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Configuration for HornetQ XA {@link ConnectionFactory}.\n *\n * @author Phillip Webb\n * @since 1.2.0\n */\n@Configuration\n@ConditionalOnMissingBean(ConnectionFactory.class)\n@ConditionalOnClass(TransactionManager.class)\n@ConditionalOnBean(XAConnectionFactoryWrapper.class)\nclass HornetQXAConnectionFactoryConfiguration {\n\n\tprivate static Log logger = LogFactory\n\t\t\t.getLog(HornetQEmbeddedServerConfiguration.class);\n\n\t// Ensure JMS is setup before XA\n\t@Autowired(required = false)\n\tprivate EmbeddedJMS embeddedJMS;\n\n\t@Bean\n\tpublic ConnectionFactory jmsConnectionFactory(HornetQProperties properties,\n\t\t\tXAConnectionFactoryWrapper wrapper) throws Exception {\n\t\tif (this.embeddedJMS != null && logger.isDebugEnabled()) {\n\t\t\tlogger.debug("Using embdedded HornetQ broker with XA");\n\t\t}\n\t\treturn wrapper.wrapConnectionFactory(new HornetQConnectionFactoryFactory(\n\t\t\t\tproperties).createConnectionFactory(HornetQXAConnectionFactory.class));\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
