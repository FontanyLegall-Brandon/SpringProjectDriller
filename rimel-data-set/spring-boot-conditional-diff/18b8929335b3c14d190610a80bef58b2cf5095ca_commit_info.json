{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/groovy/template/GroovyTemplateAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/groovy/template/GroovyTemplateAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -19,13 +19,13 @@ package org.springframework.boot.autoconfigure.groovy.template;\n import groovy.text.SimpleTemplateEngine;\n import groovy.text.TemplateEngine;\n import groovy.text.markup.MarkupTemplateEngine;\n-import groovy.text.markup.TemplateConfiguration;\n \n import java.net.URL;\n import java.net.URLClassLoader;\n import java.util.ArrayList;\n import java.util.List;\n \n+import javax.annotation.PostConstruct;\n import javax.servlet.Servlet;\n \n import org.springframework.beans.factory.BeanClassLoaderAware;\n@@ -47,15 +47,21 @@ import org.springframework.core.Ordered;\n import org.springframework.core.io.DefaultResourceLoader;\n import org.springframework.core.io.Resource;\n import org.springframework.core.io.ResourceLoader;\n+import org.springframework.util.Assert;\n import org.springframework.web.servlet.view.UrlBasedViewResolver;\n+import org.springframework.web.servlet.view.groovy.GroovyMarkupConfig;\n+import org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer;\n+import org.springframework.web.servlet.view.groovy.GroovyMarkupViewResolver;\n \n /**\n  * Autoconfiguration support for Groovy templates in MVC. By default creates a\n  * {@link MarkupTemplateEngine} configured from {@link GroovyTemplateProperties}, but you\n- * can override that by providing a {@link TemplateEngine} of a different type.\n+ * can override that by providing your own {@link GroovyMarkupConfig} or even a\n+ * {@link MarkupTemplateEngine} of a different type.\n  *\n  * @author Dave Syer\n  * @author Andy Wilkinson\n+ * @author Brian Clozel\n  * @since 1.1.0\n  */\n @Configuration\n@@ -64,13 +70,49 @@ import org.springframework.web.servlet.view.UrlBasedViewResolver;\n @EnableConfigurationProperties(GroovyTemplateProperties.class)\n public class GroovyTemplateAutoConfiguration {\n \n-\t@Autowired\n-\tprivate final ResourceLoader resourceLoader = new DefaultResourceLoader();\n+\t@Configuration\n+\t@ConditionalOnClass({ MarkupTemplateEngine.class, GroovyMarkupConfigurer.class })\n+\tpublic static class GroovyMarkupConfiguration {\n+\n+\t\t@Autowired\n+\t\tprivate final ResourceLoader resourceLoader = new DefaultResourceLoader();\n+\n+\t\t@Autowired\n+\t\tprivate GroovyTemplateProperties properties;\n+\n+\t\t@Autowired(required = false)\n+\t\tprivate MarkupTemplateEngine templateEngine;\n+\n+\t\t@PostConstruct\n+\t\tpublic void checkTemplateLocationExists() {\n+\t\t\tif (this.properties.isCheckTemplateLocation()) {\n+\t\t\t\tResource resource = this.resourceLoader.getResource(this.properties\n+\t\t\t\t\t\t.getPrefix());\n+\t\t\t\tAssert.state(resource.exists(), "Cannot find template location: "\n+\t\t\t\t\t\t+ resource + " (please add some templates, "\n+\t\t\t\t\t\t+ "check your Groovy configuration, or set "\n+\t\t\t\t\t\t+ "spring.groovy.template.check-template-location=false)");\n+\t\t\t}\n+\t\t}\n \n-\t@Autowired\n-\tprivate GroovyTemplateProperties properties;\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(GroovyMarkupConfig.class)\n+\t\t@ConfigurationProperties(prefix = "spring.groovy.template.configuration")\n+\t\tpublic GroovyMarkupConfigurer groovyMarkupConfigurer() {\n+\t\t\tGroovyMarkupConfigurer configurer = new GroovyMarkupConfigurer();\n+\t\t\tconfigurer.setResourceLoaderPath(this.properties.getPrefix());\n+\t\t\tconfigurer.setCacheTemplates(this.properties.isCache());\n+\t\t\tif (this.templateEngine != null) {\n+\t\t\t\tconfigurer.setTemplateEngine(this.templateEngine);\n+\t\t\t}\n+\t\t\treturn configurer;\n+\t\t}\n \n-\tpublic abstract static class BaseGroovyTemplateConfiguration implements\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnMissingClass(name = "groovy.text.markup.MarkupTemplateEngine")\n+\tpublic static class GroovySimpleTemplateEngineConfiguration implements\n \t\t\tBeanClassLoaderAware {\n \n \t\t@Autowired\n@@ -99,47 +141,12 @@ public class GroovyTemplateAutoConfiguration {\n \t\t\t\treturn new URLClassLoader(urls.toArray(new URL[urls.size()]),\n \t\t\t\t\t\tthis.classLoader);\n \t\t\t}\n-\t\t\telse {\n-\t\t\t\treturn this.classLoader;\n-\t\t\t}\n+\t\t\treturn this.classLoader;\n \t\t}\n \n-\t}\n-\n-\t@Configuration\n-\t@ConditionalOnClass(MarkupTemplateEngine.class)\n-\tpublic static class GroovyMarkupConfiguration extends BaseGroovyTemplateConfiguration {\n-\n-\t\t@Autowired\n-\t\tprivate GroovyTemplateProperties properties;\n-\n-\t\t@Bean\n-\t\t@ConfigurationProperties(prefix = "spring.groovy.template.configuration")\n-\t\tpublic TemplateConfiguration groovyTemplateConfiguration() {\n-\t\t\treturn new TemplateConfiguration();\n-\t\t}\n-\n-\t\t@Bean\n-\t\t@ConditionalOnMissingBean(TemplateEngine.class)\n-\t\tpublic TemplateEngine groovyTemplateEngine() throws Exception {\n-\t\t\tTemplateConfiguration configuration = groovyTemplateConfiguration();\n-\t\t\tconfiguration.setCacheTemplates(this.properties.isCache());\n-\t\t\treturn new MarkupTemplateEngine(createParentLoaderForTemplates(),\n-\t\t\t\t\tconfiguration, new GroovyTemplateResolver());\n-\t\t}\n-\n-\t}\n-\n-\t@Configuration\n-\t@ConditionalOnMissingClass(name = "groovy.text.markup.MarkupTemplateEngine")\n-\tpublic static class GroovySimpleConfiguration extends BaseGroovyTemplateConfiguration {\n-\n-\t\t@Autowired\n-\t\tprivate GroovyTemplateProperties properties;\n-\n \t\t@Bean\n \t\t@ConditionalOnMissingBean(TemplateEngine.class)\n-\t\tpublic TemplateEngine groovyTemplateEngine() throws Exception {\n+\t\tpublic SimpleTemplateEngine groovyTemplateEngine() throws Exception {\n \t\t\treturn new SimpleTemplateEngine(createParentLoaderForTemplates());\n \t\t}\n \n@@ -154,22 +161,35 @@ public class GroovyTemplateAutoConfiguration {\n \t\t@Autowired\n \t\tprivate GroovyTemplateProperties properties;\n \n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(name = "groovyMarkupViewResolver")\n+\t\t@ConditionalOnClass(MarkupTemplateEngine.class)\n+\t\tpublic GroovyMarkupViewResolver groovyMarkupViewResolver() {\n+\t\t\tGroovyMarkupViewResolver resolver = new GroovyMarkupViewResolver();\n+\t\t\tconfigureViewResolver(resolver);\n+\t\t\treturn resolver;\n+\t\t}\n+\n \t\t@Bean\n \t\t@ConditionalOnMissingBean(name = "groovyTemplateViewResolver")\n+\t\t@ConditionalOnMissingClass(MarkupTemplateEngine.class)\n \t\tpublic GroovyTemplateViewResolver groovyTemplateViewResolver(TemplateEngine engine) {\n \t\t\tGroovyTemplateViewResolver resolver = new GroovyTemplateViewResolver();\n+\t\t\tconfigureViewResolver(resolver);\n \t\t\tresolver.setPrefix(this.properties.getPrefix());\n+\t\t\tresolver.setTemplateEngine(engine);\n+\t\t\treturn resolver;\n+\t\t}\n+\n+\t\tprivate void configureViewResolver(UrlBasedViewResolver resolver) {\n \t\t\tresolver.setSuffix(this.properties.getSuffix());\n \t\t\tresolver.setCache(this.properties.isCache());\n \t\t\tresolver.setContentType(this.properties.getContentType());\n \t\t\tresolver.setViewNames(this.properties.getViewNames());\n-\t\t\tresolver.setTemplateEngine(engine);\n-\n+\t\t\tresolver.setRequestContextAttribute("spring");\n \t\t\t// This resolver acts as a fallback resolver (e.g. like a\n \t\t\t// InternalResourceViewResolver) so it needs to have low precedence\n \t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 6);\n-\n-\t\t\treturn resolver;\n \t\t}\n \n \t}\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.groovy.template;\n\nimport groovy.text.SimpleTemplateEngine;\nimport groovy.text.TemplateEngine;\nimport groovy.text.markup.MarkupTemplateEngine;\n\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.annotation.PostConstruct;\nimport javax.servlet.Servlet;\n\nimport org.springframework.beans.factory.BeanClassLoaderAware;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.groovy.template.web.GroovyTemplateViewResolver;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.i18n.LocaleContextHolder;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.util.Assert;\nimport org.springframework.web.servlet.view.UrlBasedViewResolver;\nimport org.springframework.web.servlet.view.groovy.GroovyMarkupConfig;\nimport org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer;\nimport org.springframework.web.servlet.view.groovy.GroovyMarkupViewResolver;\n\n/**\n * Autoconfiguration support for Groovy templates in MVC. By default creates a\n * {@link MarkupTemplateEngine} configured from {@link GroovyTemplateProperties}, but you\n * can override that by providing your own {@link GroovyMarkupConfig} or even a\n * {@link MarkupTemplateEngine} of a different type.\n *\n * @author Dave Syer\n * @author Andy Wilkinson\n * @author Brian Clozel\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass(TemplateEngine.class)\n@AutoConfigureAfter(WebMvcAutoConfiguration.class)\n@EnableConfigurationProperties(GroovyTemplateProperties.class)\npublic class GroovyTemplateAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnClass({ MarkupTemplateEngine.class, GroovyMarkupConfigurer.class })\n\tpublic static class GroovyMarkupConfiguration {\n\n\t\t@Autowired\n\t\tprivate final ResourceLoader resourceLoader = new DefaultResourceLoader();\n\n\t\t@Autowired\n\t\tprivate GroovyTemplateProperties properties;\n\n\t\t@Autowired(required = false)\n\t\tprivate MarkupTemplateEngine templateEngine;\n\n\t\t@PostConstruct\n\t\tpublic void checkTemplateLocationExists() {\n\t\t\tif (this.properties.isCheckTemplateLocation()) {\n\t\t\t\tResource resource = this.resourceLoader.getResource(this.properties\n\t\t\t\t\t\t.getPrefix());\n\t\t\t\tAssert.state(resource.exists(), "Cannot find template location: "\n\t\t\t\t\t\t+ resource + " (please add some templates, "\n\t\t\t\t\t\t+ "check your Groovy configuration, or set "\n\t\t\t\t\t\t+ "spring.groovy.template.check-template-location=false)");\n\t\t\t}\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(GroovyMarkupConfig.class)\n\t\t@ConfigurationProperties(prefix = "spring.groovy.template.configuration")\n\t\tpublic GroovyMarkupConfigurer groovyMarkupConfigurer() {\n\t\t\tGroovyMarkupConfigurer configurer = new GroovyMarkupConfigurer();\n\t\t\tconfigurer.setResourceLoaderPath(this.properties.getPrefix());\n\t\t\tconfigurer.setCacheTemplates(this.properties.isCache());\n\t\t\tif (this.templateEngine != null) {\n\t\t\t\tconfigurer.setTemplateEngine(this.templateEngine);\n\t\t\t}\n\t\t\treturn configurer;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingClass(name = "groovy.text.markup.MarkupTemplateEngine")\n\tpublic static class GroovySimpleTemplateEngineConfiguration implements\n\t\t\tBeanClassLoaderAware {\n\n\t\t@Autowired\n\t\tprivate GroovyTemplateProperties properties;\n\n\t\t@Autowired\n\t\tprivate ApplicationContext resourceLoader;\n\n\t\tprivate ClassLoader classLoader = GroovyWebConfiguration.class.getClassLoader();\n\n\t\t@Override\n\t\tpublic void setBeanClassLoader(ClassLoader classLoader) {\n\t\t\tthis.classLoader = classLoader;\n\t\t}\n\n\t\tprotected ClassLoader createParentLoaderForTemplates() throws Exception {\n\t\t\tResource[] resources = this.resourceLoader.getResources(this.properties\n\t\t\t\t\t.getPrefix());\n\t\t\tif (resources.length > 0) {\n\t\t\t\tList<URL> urls = new ArrayList<URL>();\n\t\t\t\tfor (Resource resource : resources) {\n\t\t\t\t\tif (resource.exists()) {\n\t\t\t\t\t\turls.add(resource.getURL());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn new URLClassLoader(urls.toArray(new URL[urls.size()]),\n\t\t\t\t\t\tthis.classLoader);\n\t\t\t}\n\t\t\treturn this.classLoader;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(TemplateEngine.class)\n\t\tpublic SimpleTemplateEngine groovyTemplateEngine() throws Exception {\n\t\t\treturn new SimpleTemplateEngine(createParentLoaderForTemplates());\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ Servlet.class, LocaleContextHolder.class,\n\t\t\tUrlBasedViewResolver.class })\n\t@ConditionalOnWebApplication\n\tpublic static class GroovyWebConfiguration {\n\n\t\t@Autowired\n\t\tprivate GroovyTemplateProperties properties;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "groovyMarkupViewResolver")\n\t\t@ConditionalOnClass(MarkupTemplateEngine.class)\n\t\tpublic GroovyMarkupViewResolver groovyMarkupViewResolver() {\n\t\t\tGroovyMarkupViewResolver resolver = new GroovyMarkupViewResolver();\n\t\t\tconfigureViewResolver(resolver);\n\t\t\treturn resolver;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "groovyTemplateViewResolver")\n\t\t@ConditionalOnMissingClass(MarkupTemplateEngine.class)\n\t\tpublic GroovyTemplateViewResolver groovyTemplateViewResolver(TemplateEngine engine) {\n\t\t\tGroovyTemplateViewResolver resolver = new GroovyTemplateViewResolver();\n\t\t\tconfigureViewResolver(resolver);\n\t\t\tresolver.setPrefix(this.properties.getPrefix());\n\t\t\tresolver.setTemplateEngine(engine);\n\t\t\treturn resolver;\n\t\t}\n\n\t\tprivate void configureViewResolver(UrlBasedViewResolver resolver) {\n\t\t\tresolver.setSuffix(this.properties.getSuffix());\n\t\t\tresolver.setCache(this.properties.isCache());\n\t\t\tresolver.setContentType(this.properties.getContentType());\n\t\t\tresolver.setViewNames(this.properties.getViewNames());\n\t\t\tresolver.setRequestContextAttribute("spring");\n\t\t\t// This resolver acts as a fallback resolver (e.g. like a\n\t\t\t// InternalResourceViewResolver) so it needs to have low precedence\n\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 6);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.groovy.template;\n\nimport groovy.text.SimpleTemplateEngine;\nimport groovy.text.TemplateEngine;\nimport groovy.text.markup.MarkupTemplateEngine;\nimport groovy.text.markup.TemplateConfiguration;\n\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.servlet.Servlet;\n\nimport org.springframework.beans.factory.BeanClassLoaderAware;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.groovy.template.web.GroovyTemplateViewResolver;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.i18n.LocaleContextHolder;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.web.servlet.view.UrlBasedViewResolver;\n\n/**\n * Autoconfiguration support for Groovy templates in MVC. By default creates a\n * {@link MarkupTemplateEngine} configured from {@link GroovyTemplateProperties}, but you\n * can override that by providing a {@link TemplateEngine} of a different type.\n *\n * @author Dave Syer\n * @author Andy Wilkinson\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass(TemplateEngine.class)\n@AutoConfigureAfter(WebMvcAutoConfiguration.class)\n@EnableConfigurationProperties(GroovyTemplateProperties.class)\npublic class GroovyTemplateAutoConfiguration {\n\n\t@Autowired\n\tprivate final ResourceLoader resourceLoader = new DefaultResourceLoader();\n\n\t@Autowired\n\tprivate GroovyTemplateProperties properties;\n\n\tpublic abstract static class BaseGroovyTemplateConfiguration implements\n\t\t\tBeanClassLoaderAware {\n\n\t\t@Autowired\n\t\tprivate GroovyTemplateProperties properties;\n\n\t\t@Autowired\n\t\tprivate ApplicationContext resourceLoader;\n\n\t\tprivate ClassLoader classLoader = GroovyWebConfiguration.class.getClassLoader();\n\n\t\t@Override\n\t\tpublic void setBeanClassLoader(ClassLoader classLoader) {\n\t\t\tthis.classLoader = classLoader;\n\t\t}\n\n\t\tprotected ClassLoader createParentLoaderForTemplates() throws Exception {\n\t\t\tResource[] resources = this.resourceLoader.getResources(this.properties\n\t\t\t\t\t.getPrefix());\n\t\t\tif (resources.length > 0) {\n\t\t\t\tList<URL> urls = new ArrayList<URL>();\n\t\t\t\tfor (Resource resource : resources) {\n\t\t\t\t\tif (resource.exists()) {\n\t\t\t\t\t\turls.add(resource.getURL());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn new URLClassLoader(urls.toArray(new URL[urls.size()]),\n\t\t\t\t\t\tthis.classLoader);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn this.classLoader;\n\t\t\t}\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(MarkupTemplateEngine.class)\n\tpublic static class GroovyMarkupConfiguration extends BaseGroovyTemplateConfiguration {\n\n\t\t@Autowired\n\t\tprivate GroovyTemplateProperties properties;\n\n\t\t@Bean\n\t\t@ConfigurationProperties(prefix = "spring.groovy.template.configuration")\n\t\tpublic TemplateConfiguration groovyTemplateConfiguration() {\n\t\t\treturn new TemplateConfiguration();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(TemplateEngine.class)\n\t\tpublic TemplateEngine groovyTemplateEngine() throws Exception {\n\t\t\tTemplateConfiguration configuration = groovyTemplateConfiguration();\n\t\t\tconfiguration.setCacheTemplates(this.properties.isCache());\n\t\t\treturn new MarkupTemplateEngine(createParentLoaderForTemplates(),\n\t\t\t\t\tconfiguration, new GroovyTemplateResolver());\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingClass(name = "groovy.text.markup.MarkupTemplateEngine")\n\tpublic static class GroovySimpleConfiguration extends BaseGroovyTemplateConfiguration {\n\n\t\t@Autowired\n\t\tprivate GroovyTemplateProperties properties;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(TemplateEngine.class)\n\t\tpublic TemplateEngine groovyTemplateEngine() throws Exception {\n\t\t\treturn new SimpleTemplateEngine(createParentLoaderForTemplates());\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ Servlet.class, LocaleContextHolder.class,\n\t\t\tUrlBasedViewResolver.class })\n\t@ConditionalOnWebApplication\n\tpublic static class GroovyWebConfiguration {\n\n\t\t@Autowired\n\t\tprivate GroovyTemplateProperties properties;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "groovyTemplateViewResolver")\n\t\tpublic GroovyTemplateViewResolver groovyTemplateViewResolver(TemplateEngine engine) {\n\t\t\tGroovyTemplateViewResolver resolver = new GroovyTemplateViewResolver();\n\t\t\tresolver.setPrefix(this.properties.getPrefix());\n\t\t\tresolver.setSuffix(this.properties.getSuffix());\n\t\t\tresolver.setCache(this.properties.isCache());\n\t\t\tresolver.setContentType(this.properties.getContentType());\n\t\t\tresolver.setViewNames(this.properties.getViewNames());\n\t\t\tresolver.setTemplateEngine(engine);\n\n\t\t\t// This resolver acts as a fallback resolver (e.g. like a\n\t\t\t// InternalResourceViewResolver) so it needs to have low precedence\n\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 6);\n\n\t\t\treturn resolver;\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
