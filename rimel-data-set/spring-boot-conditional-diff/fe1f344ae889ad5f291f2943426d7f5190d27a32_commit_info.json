{'_old_path': PosixPath('spring-boot-developer-tools/src/main/java/org/springframework/boot/developertools/autoconfigure/LocalDeveloperToolsAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-developer-tools/src/main/java/org/springframework/boot/developertools/autoconfigure/LocalDeveloperToolsAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -27,10 +27,13 @@ import org.springframework.boot.developertools.classpath.ClassPathChangedEvent;\n import org.springframework.boot.developertools.classpath.ClassPathFileSystemWatcher;\n import org.springframework.boot.developertools.classpath.ClassPathRestartStrategy;\n import org.springframework.boot.developertools.classpath.PatternClassPathRestartStrategy;\n+import org.springframework.boot.developertools.livereload.LiveReloadServer;\n import org.springframework.boot.developertools.restart.ConditionalOnInitializedRestarter;\n+import org.springframework.boot.developertools.restart.RestartScope;\n import org.springframework.boot.developertools.restart.Restarter;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.event.ContextRefreshedEvent;\n import org.springframework.context.event.EventListener;\n \n /**\n@@ -52,6 +55,45 @@ public class LocalDeveloperToolsAutoConfiguration {\n \t\treturn new LocalDeveloperPropertyDefaultsPostProcessor();\n \t}\n \n+\t/**\n+\t * Local LiveReload configuration.\n+\t */\n+\t@ConditionalOnProperty(prefix = "spring.developertools.livereload", name = "enabled", matchIfMissing = true)\n+\tstatic class LiveReloadConfiguration {\n+\n+\t\t@Autowired\n+\t\tprivate DeveloperToolsProperties properties;\n+\n+\t\t@Autowired(required = false)\n+\t\tprivate LiveReloadServer liveReloadServer;\n+\n+\t\t@Bean\n+\t\t@RestartScope\n+\t\t@ConditionalOnMissingBean\n+\t\tpublic LiveReloadServer liveReloadServer() {\n+\t\t\treturn new LiveReloadServer(this.properties.getLivereload().getPort(),\n+\t\t\t\t\tRestarter.getInstance().getThreadFactory());\n+\t\t}\n+\n+\t\t@EventListener\n+\t\tpublic void onContextRefreshed(ContextRefreshedEvent event) {\n+\t\t\toptionalLiveReloadServer().triggerReload();\n+\t\t}\n+\n+\t\t@EventListener\n+\t\tpublic void onClassPathChanged(ClassPathChangedEvent event) {\n+\t\t\tif (!event.isRestartRequired()) {\n+\t\t\t\toptionalLiveReloadServer().triggerReload();\n+\t\t\t}\n+\t\t}\n+\n+\t\t@Bean\n+\t\tpublic OptionalLiveReloadServer optionalLiveReloadServer() {\n+\t\t\treturn new OptionalLiveReloadServer(this.liveReloadServer);\n+\t\t}\n+\n+\t}\n+\n \t/**\n \t * Local Restart Configuration.\n \t */\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.developertools.autoconfigure;\n\nimport java.net.URL;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.developertools.classpath.ClassPathChangedEvent;\nimport org.springframework.boot.developertools.classpath.ClassPathFileSystemWatcher;\nimport org.springframework.boot.developertools.classpath.ClassPathRestartStrategy;\nimport org.springframework.boot.developertools.classpath.PatternClassPathRestartStrategy;\nimport org.springframework.boot.developertools.livereload.LiveReloadServer;\nimport org.springframework.boot.developertools.restart.ConditionalOnInitializedRestarter;\nimport org.springframework.boot.developertools.restart.RestartScope;\nimport org.springframework.boot.developertools.restart.Restarter;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.event.ContextRefreshedEvent;\nimport org.springframework.context.event.EventListener;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for local development support.\n *\n * @author Phillip Webb\n * @since 1.3.0\n */\n@Configuration\n@ConditionalOnInitializedRestarter\n@EnableConfigurationProperties(DeveloperToolsProperties.class)\npublic class LocalDeveloperToolsAutoConfiguration {\n\n\t@Autowired\n\tprivate DeveloperToolsProperties properties;\n\n\t@Bean\n\tpublic static LocalDeveloperPropertyDefaultsPostProcessor localDeveloperPropertyDefaultsPostProcessor() {\n\t\treturn new LocalDeveloperPropertyDefaultsPostProcessor();\n\t}\n\n\t/**\n\t * Local LiveReload configuration.\n\t */\n\t@ConditionalOnProperty(prefix = "spring.developertools.livereload", name = "enabled", matchIfMissing = true)\n\tstatic class LiveReloadConfiguration {\n\n\t\t@Autowired\n\t\tprivate DeveloperToolsProperties properties;\n\n\t\t@Autowired(required = false)\n\t\tprivate LiveReloadServer liveReloadServer;\n\n\t\t@Bean\n\t\t@RestartScope\n\t\t@ConditionalOnMissingBean\n\t\tpublic LiveReloadServer liveReloadServer() {\n\t\t\treturn new LiveReloadServer(this.properties.getLivereload().getPort(),\n\t\t\t\t\tRestarter.getInstance().getThreadFactory());\n\t\t}\n\n\t\t@EventListener\n\t\tpublic void onContextRefreshed(ContextRefreshedEvent event) {\n\t\t\toptionalLiveReloadServer().triggerReload();\n\t\t}\n\n\t\t@EventListener\n\t\tpublic void onClassPathChanged(ClassPathChangedEvent event) {\n\t\t\tif (!event.isRestartRequired()) {\n\t\t\t\toptionalLiveReloadServer().triggerReload();\n\t\t\t}\n\t\t}\n\n\t\t@Bean\n\t\tpublic OptionalLiveReloadServer optionalLiveReloadServer() {\n\t\t\treturn new OptionalLiveReloadServer(this.liveReloadServer);\n\t\t}\n\n\t}\n\n\t/**\n\t * Local Restart Configuration.\n\t */\n\t@ConditionalOnProperty(prefix = "spring.developertools.restart", name = "enabled", matchIfMissing = true)\n\tstatic class RestartConfiguration {\n\n\t\t@Autowired\n\t\tprivate DeveloperToolsProperties properties;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic ClassPathFileSystemWatcher classPathFileSystemWatcher() {\n\t\t\tURL[] urls = Restarter.getInstance().getInitialUrls();\n\t\t\treturn new ClassPathFileSystemWatcher(classPathRestartStrategy(), urls);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic ClassPathRestartStrategy classPathRestartStrategy() {\n\t\t\treturn new PatternClassPathRestartStrategy(this.properties.getRestart()\n\t\t\t\t\t.getExclude());\n\t\t}\n\n\t\t@EventListener\n\t\tpublic void onClassPathChanged(ClassPathChangedEvent event) {\n\t\t\tif (event.isRestartRequired()) {\n\t\t\t\tRestarter.getInstance().restart();\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.developertools.autoconfigure;\n\nimport java.net.URL;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.developertools.classpath.ClassPathChangedEvent;\nimport org.springframework.boot.developertools.classpath.ClassPathFileSystemWatcher;\nimport org.springframework.boot.developertools.classpath.ClassPathRestartStrategy;\nimport org.springframework.boot.developertools.classpath.PatternClassPathRestartStrategy;\nimport org.springframework.boot.developertools.restart.ConditionalOnInitializedRestarter;\nimport org.springframework.boot.developertools.restart.Restarter;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.event.EventListener;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for local development support.\n *\n * @author Phillip Webb\n * @since 1.3.0\n */\n@Configuration\n@ConditionalOnInitializedRestarter\n@EnableConfigurationProperties(DeveloperToolsProperties.class)\npublic class LocalDeveloperToolsAutoConfiguration {\n\n\t@Autowired\n\tprivate DeveloperToolsProperties properties;\n\n\t@Bean\n\tpublic static LocalDeveloperPropertyDefaultsPostProcessor localDeveloperPropertyDefaultsPostProcessor() {\n\t\treturn new LocalDeveloperPropertyDefaultsPostProcessor();\n\t}\n\n\t/**\n\t * Local Restart Configuration.\n\t */\n\t@ConditionalOnProperty(prefix = "spring.developertools.restart", name = "enabled", matchIfMissing = true)\n\tstatic class RestartConfiguration {\n\n\t\t@Autowired\n\t\tprivate DeveloperToolsProperties properties;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic ClassPathFileSystemWatcher classPathFileSystemWatcher() {\n\t\t\tURL[] urls = Restarter.getInstance().getInitialUrls();\n\t\t\treturn new ClassPathFileSystemWatcher(classPathRestartStrategy(), urls);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic ClassPathRestartStrategy classPathRestartStrategy() {\n\t\t\treturn new PatternClassPathRestartStrategy(this.properties.getRestart()\n\t\t\t\t\t.getExclude());\n\t\t}\n\n\t\t@EventListener\n\t\tpublic void onClassPathChanged(ClassPathChangedEvent event) {\n\t\t\tif (event.isRestartRequired()) {\n\t\t\t\tRestarter.getInstance().restart();\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
