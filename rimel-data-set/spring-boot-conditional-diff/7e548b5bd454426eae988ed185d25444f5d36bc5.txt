@@ -0,0 +1,143 @@
+
+
+package org.springframework.bootstrap.autoconfigure.service;
+
+import java.io.IOException;
+import java.util.LinkedHashMap;
+import java.util.Map;
+import java.util.Properties;
+
+import javax.annotation.Resource;
+import javax.servlet.Servlet;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Qualifier;
+import org.springframework.bootstrap.bind.PropertiesConfigurationFactory;
+import org.springframework.bootstrap.context.annotation.ConditionalOnClass;
+import org.springframework.bootstrap.context.annotation.ConditionalOnMissingBean;
+import org.springframework.bootstrap.context.annotation.EnableAutoConfiguration;
+import org.springframework.bootstrap.service.info.InfoEndpoint;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.core.env.ConfigurableEnvironment;
+import org.springframework.core.env.StandardEnvironment;
+import org.springframework.core.io.ClassPathResource;
+import org.springframework.core.io.support.PropertiesLoaderUtils;
+import org.springframework.web.servlet.DispatcherServlet;
+
+
+@Configuration
+@ConditionalOnClass({ Servlet.class, DispatcherServlet.class })
+@ConditionalOnMissingBean({ InfoEndpoint.class })
+public class InfoConfiguration {
+
+	@Resource(name = )
+	private Map<String, Object> infoMap;
+
+	@Autowired
+	@Qualifier()
+	private GitInfo gitInfo;
+
+	@Bean
+	public Map<String, Object> applicationInfo() {
+		LinkedHashMap<String, Object> info = new LinkedHashMap<String, Object>();
+		info.putAll(this.infoMap);
+		if (this.gitInfo.getBranch() != null) {
+			info.put(, this.gitInfo);
+		}
+		return info;
+	}
+
+	@Bean
+	public InfoEndpoint infoEndpoint() {
+		return new InfoEndpoint(applicationInfo());
+	}
+
+	@Configuration
+	public static class InfoPropertiesConfiguration {
+
+		@Autowired
+		private ConfigurableEnvironment environment = new StandardEnvironment();
+
+		@Bean
+		public PropertiesConfigurationFactory<GitInfo> gitInfo() throws IOException {
+			PropertiesConfigurationFactory<GitInfo> factory = new PropertiesConfigurationFactory<GitInfo>(
+					new GitInfo());
+			factory.setTargetName();
+			Properties properties = new Properties();
+			if (new ClassPathResource().exists()) {
+				properties = PropertiesLoaderUtils.loadProperties(new ClassPathResource(
+						));
+			}
+			factory.setProperties(properties);
+			return factory;
+		}
+
+		@Bean
+		public PropertiesConfigurationFactory<Map<String, Object>> infoMap() {
+			PropertiesConfigurationFactory<Map<String, Object>> factory = new PropertiesConfigurationFactory<Map<String, Object>>(
+					new LinkedHashMap<String, Object>());
+			factory.setTargetName();
+			factory.setPropertySources(this.environment.getPropertySources());
+			return factory;
+		}
+
+	}
+
+	public static class GitInfo {
+		private String branch;
+		private Commit commit = new Commit();
+
+		public String getBranch() {
+			return this.branch;
+		}
+
+		public void setBranch(String branch) {
+			this.branch = branch;
+		}
+
+		public Commit getCommit() {
+			return this.commit;
+		}
+
+		public static class Commit {
+			private String id;
+			private String time;
+
+			public String getId() {
+				return this.id == null ?  : (this.id.length() > 7 ? this.id.substring(
+						0, 7) : this.id);
+			}
+
+			public void setId(String id) {
+				this.id = id;
+			}
+
+			public String getTime() {
+				return this.time;
+			}
+
+			public void setTime(String time) {
+				this.time = time;
+			}
+		}
+	}
+}

