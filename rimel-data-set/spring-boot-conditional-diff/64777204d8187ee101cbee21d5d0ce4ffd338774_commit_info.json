{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/function/client/WebClientAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/function/client/WebClientAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -20,14 +20,19 @@ import java.util.ArrayList;\n import java.util.List;\n \n import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration;\n+import org.springframework.boot.web.codec.CodecCustomizer;\n import org.springframework.boot.web.reactive.function.client.WebClientCustomizer;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Scope;\n import org.springframework.core.annotation.AnnotationAwareOrderComparator;\n+import org.springframework.core.annotation.Order;\n import org.springframework.util.CollectionUtils;\n import org.springframework.web.reactive.function.client.WebClient;\n \n@@ -41,6 +46,7 @@ import org.springframework.web.reactive.function.client.WebClient;\n  */\n @Configuration\n @ConditionalOnClass(WebClient.class)\n+@AutoConfigureAfter(CodecsAutoConfiguration.class)\n public class WebClientAutoConfiguration {\n \n \tprivate final WebClient.Builder webClientBuilder;\n@@ -62,4 +68,19 @@ public class WebClientAutoConfiguration {\n \tpublic WebClient.Builder webClientBuilder(List<WebClientCustomizer> customizers) {\n \t\treturn this.webClientBuilder.clone();\n \t}\n+\n+\t@Configuration\n+\t@ConditionalOnBean(CodecCustomizer.class)\n+\tprotected static class WebClientCodecsConfiguration {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean\n+\t\t@Order(0)\n+\t\tpublic WebClientCodecCustomizer exchangeStrategiesCustomizer(\n+\t\t\t\tList<CodecCustomizer> codecCustomizers) {\n+\t\t\treturn new WebClientCodecCustomizer(codecCustomizers);\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web.reactive.function.client;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration;\nimport org.springframework.boot.web.codec.CodecCustomizer;\nimport org.springframework.boot.web.reactive.function.client.WebClientCustomizer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.core.annotation.AnnotationAwareOrderComparator;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.web.reactive.function.client.WebClient;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link WebClient}.\n * <p>This will produce a {@link WebClient.Builder} bean with the {@code prototype} scope,\n * meaning each injection point will receive a newly cloned instance of the builder.\n *\n * @author Brian Clozel\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass(WebClient.class)\n@AutoConfigureAfter(CodecsAutoConfiguration.class)\npublic class WebClientAutoConfiguration {\n\n\tprivate final WebClient.Builder webClientBuilder;\n\n\n\tpublic WebClientAutoConfiguration(ObjectProvider<List<WebClientCustomizer>> customizerProvider) {\n\t\tthis.webClientBuilder = WebClient.builder();\n\t\tList<WebClientCustomizer> customizers = customizerProvider.getIfAvailable();\n\t\tif (!CollectionUtils.isEmpty(customizers)) {\n\t\t\tcustomizers = new ArrayList<>(customizers);\n\t\t\tAnnotationAwareOrderComparator.sort(customizers);\n\t\t\tcustomizers.forEach(customizer -> customizer.customize(this.webClientBuilder));\n\t\t}\n\t}\n\n\t@Bean\n\t@Scope("prototype")\n\t@ConditionalOnMissingBean\n\tpublic WebClient.Builder webClientBuilder(List<WebClientCustomizer> customizers) {\n\t\treturn this.webClientBuilder.clone();\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(CodecCustomizer.class)\n\tprotected static class WebClientCodecsConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@Order(0)\n\t\tpublic WebClientCodecCustomizer exchangeStrategiesCustomizer(\n\t\t\t\tList<CodecCustomizer> codecCustomizers) {\n\t\t\treturn new WebClientCodecCustomizer(codecCustomizers);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web.reactive.function.client;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.web.reactive.function.client.WebClientCustomizer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.core.annotation.AnnotationAwareOrderComparator;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.web.reactive.function.client.WebClient;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link WebClient}.\n * <p>This will produce a {@link WebClient.Builder} bean with the {@code prototype} scope,\n * meaning each injection point will receive a newly cloned instance of the builder.\n *\n * @author Brian Clozel\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass(WebClient.class)\npublic class WebClientAutoConfiguration {\n\n\tprivate final WebClient.Builder webClientBuilder;\n\n\n\tpublic WebClientAutoConfiguration(ObjectProvider<List<WebClientCustomizer>> customizerProvider) {\n\t\tthis.webClientBuilder = WebClient.builder();\n\t\tList<WebClientCustomizer> customizers = customizerProvider.getIfAvailable();\n\t\tif (!CollectionUtils.isEmpty(customizers)) {\n\t\t\tcustomizers = new ArrayList<>(customizers);\n\t\t\tAnnotationAwareOrderComparator.sort(customizers);\n\t\t\tcustomizers.forEach(customizer -> customizer.customize(this.webClientBuilder));\n\t\t}\n\t}\n\n\t@Bean\n\t@Scope("prototype")\n\t@ConditionalOnMissingBean\n\tpublic WebClient.Builder webClientBuilder(List<WebClientCustomizer> customizers) {\n\t\treturn this.webClientBuilder.clone();\n\t}\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
