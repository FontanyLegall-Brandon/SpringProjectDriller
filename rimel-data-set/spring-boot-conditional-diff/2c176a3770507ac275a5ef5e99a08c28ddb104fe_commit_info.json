{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/HealthIndicatorAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/HealthIndicatorAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,13 +16,22 @@\n \n package org.springframework.boot.actuate.autoconfigure.health;\n \n+import java.util.Collections;\n+import java.util.Map;\n+\n+import reactor.core.publisher.Flux;\n+\n+import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.boot.actuate.health.ApplicationHealthIndicator;\n import org.springframework.boot.actuate.health.HealthAggregator;\n import org.springframework.boot.actuate.health.HealthIndicator;\n import org.springframework.boot.actuate.health.HealthIndicatorRegistry;\n import org.springframework.boot.actuate.health.OrderedHealthAggregator;\n import org.springframework.boot.actuate.health.ReactiveHealthIndicator;\n+import org.springframework.boot.actuate.health.ReactiveHealthIndicatorRegistry;\n+import org.springframework.boot.actuate.health.ReactiveHealthIndicatorRegistryFactory;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.ApplicationContext;\n@@ -71,4 +80,20 @@ public class HealthIndicatorAutoConfiguration {\n \t\treturn HealthIndicatorRegistryBeans.get(applicationContext);\n \t}\n \n+\t@Configuration\n+\t@ConditionalOnClass(Flux.class)\n+\tstatic class ReactiveHealthIndicatorConfiguration {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean\n+\t\tpublic ReactiveHealthIndicatorRegistry reactiveHealthIndicatorRegistry(\n+\t\t\t\tObjectProvider<Map<String, ReactiveHealthIndicator>> reactiveHealthIndicators,\n+\t\t\t\tObjectProvider<Map<String, HealthIndicator>> healthIndicators) {\n+\t\t\treturn new ReactiveHealthIndicatorRegistryFactory().createReactiveHealthIndicatorRegistry(\n+\t\t\t\t\treactiveHealthIndicators.getIfAvailable(Collections::emptyMap),\n+\t\t\t\t\thealthIndicators.getIfAvailable(Collections::emptyMap));\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.health;\n\nimport java.util.Collections;\nimport java.util.Map;\n\nimport reactor.core.publisher.Flux;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.actuate.health.ApplicationHealthIndicator;\nimport org.springframework.boot.actuate.health.HealthAggregator;\nimport org.springframework.boot.actuate.health.HealthIndicator;\nimport org.springframework.boot.actuate.health.HealthIndicatorRegistry;\nimport org.springframework.boot.actuate.health.OrderedHealthAggregator;\nimport org.springframework.boot.actuate.health.ReactiveHealthIndicator;\nimport org.springframework.boot.actuate.health.ReactiveHealthIndicatorRegistry;\nimport org.springframework.boot.actuate.health.ReactiveHealthIndicatorRegistryFactory;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link HealthIndicator}s.\n *\n * @author Andy Wilkinson\n * @author Stephane Nicoll\n * @author Phillip Webb\n * @author Vedran Pavic\n * @since 2.0.0\n */\n@Configuration\n@EnableConfigurationProperties({ HealthIndicatorProperties.class })\npublic class HealthIndicatorAutoConfiguration {\n\n\tprivate final HealthIndicatorProperties properties;\n\n\tpublic HealthIndicatorAutoConfiguration(HealthIndicatorProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean({ HealthIndicator.class, ReactiveHealthIndicator.class })\n\tpublic ApplicationHealthIndicator applicationHealthIndicator() {\n\t\treturn new ApplicationHealthIndicator();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(HealthAggregator.class)\n\tpublic OrderedHealthAggregator healthAggregator() {\n\t\tOrderedHealthAggregator healthAggregator = new OrderedHealthAggregator();\n\t\tif (this.properties.getOrder() != null) {\n\t\t\thealthAggregator.setStatusOrder(this.properties.getOrder());\n\t\t}\n\t\treturn healthAggregator;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(HealthIndicatorRegistry.class)\n\tpublic HealthIndicatorRegistry healthIndicatorRegistry(\n\t\t\tApplicationContext applicationContext) {\n\t\treturn HealthIndicatorRegistryBeans.get(applicationContext);\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(Flux.class)\n\tstatic class ReactiveHealthIndicatorConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic ReactiveHealthIndicatorRegistry reactiveHealthIndicatorRegistry(\n\t\t\t\tObjectProvider<Map<String, ReactiveHealthIndicator>> reactiveHealthIndicators,\n\t\t\t\tObjectProvider<Map<String, HealthIndicator>> healthIndicators) {\n\t\t\treturn new ReactiveHealthIndicatorRegistryFactory().createReactiveHealthIndicatorRegistry(\n\t\t\t\t\treactiveHealthIndicators.getIfAvailable(Collections::emptyMap),\n\t\t\t\t\thealthIndicators.getIfAvailable(Collections::emptyMap));\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.health;\n\nimport org.springframework.boot.actuate.health.ApplicationHealthIndicator;\nimport org.springframework.boot.actuate.health.HealthAggregator;\nimport org.springframework.boot.actuate.health.HealthIndicator;\nimport org.springframework.boot.actuate.health.HealthIndicatorRegistry;\nimport org.springframework.boot.actuate.health.OrderedHealthAggregator;\nimport org.springframework.boot.actuate.health.ReactiveHealthIndicator;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link HealthIndicator}s.\n *\n * @author Andy Wilkinson\n * @author Stephane Nicoll\n * @author Phillip Webb\n * @author Vedran Pavic\n * @since 2.0.0\n */\n@Configuration\n@EnableConfigurationProperties({ HealthIndicatorProperties.class })\npublic class HealthIndicatorAutoConfiguration {\n\n\tprivate final HealthIndicatorProperties properties;\n\n\tpublic HealthIndicatorAutoConfiguration(HealthIndicatorProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean({ HealthIndicator.class, ReactiveHealthIndicator.class })\n\tpublic ApplicationHealthIndicator applicationHealthIndicator() {\n\t\treturn new ApplicationHealthIndicator();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(HealthAggregator.class)\n\tpublic OrderedHealthAggregator healthAggregator() {\n\t\tOrderedHealthAggregator healthAggregator = new OrderedHealthAggregator();\n\t\tif (this.properties.getOrder() != null) {\n\t\t\thealthAggregator.setStatusOrder(this.properties.getOrder());\n\t\t}\n\t\treturn healthAggregator;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(HealthIndicatorRegistry.class)\n\tpublic HealthIndicatorRegistry healthIndicatorRegistry(\n\t\t\tApplicationContext applicationContext) {\n\t\treturn HealthIndicatorRegistryBeans.get(applicationContext);\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
