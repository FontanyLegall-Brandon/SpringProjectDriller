{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -25,6 +25,7 @@ import javax.servlet.ServletContext;\n import javax.servlet.ServletException;\n import javax.servlet.ServletRegistration;\n import javax.ws.rs.ext.ContextResolver;\n+import javax.xml.bind.annotation.XmlElement;\n \n import com.fasterxml.jackson.databind.AnnotationIntrospector;\n import com.fasterxml.jackson.databind.ObjectMapper;\n@@ -39,6 +40,7 @@ import org.glassfish.jersey.servlet.ServletContainer;\n import org.glassfish.jersey.servlet.ServletProperties;\n \n import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n import org.springframework.boot.autoconfigure.AutoConfigureOrder;\n@@ -201,17 +203,14 @@ public class JerseyAutoConfiguration implements ServletContextAware {\n \n \t}\n \n+\t@Configuration\n \t@ConditionalOnClass(JacksonFeature.class)\n \t@ConditionalOnSingleCandidate(ObjectMapper.class)\n-\t@Configuration\n \tstatic class JacksonResourceConfigCustomizer {\n \n-\t\tprivate static final String JAXB_ANNOTATION_INTROSPECTOR_CLASS_NAME = "com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector";\n-\n \t\t@Bean\n \t\tpublic ResourceConfigCustomizer resourceConfigCustomizer(\n \t\t\t\tfinal ObjectMapper objectMapper) {\n-\t\t\taddJaxbAnnotationIntrospectorIfPresent(objectMapper);\n \t\t\treturn (ResourceConfig config) -> {\n \t\t\t\tconfig.register(JacksonFeature.class);\n \t\t\t\tconfig.register(new ObjectMapperContextResolver(objectMapper),\n@@ -219,16 +218,12 @@ public class JerseyAutoConfiguration implements ServletContextAware {\n \t\t\t};\n \t\t}\n \n-\t\tprivate void addJaxbAnnotationIntrospectorIfPresent(ObjectMapper objectMapper) {\n-\t\t\tif (ClassUtils.isPresent(JAXB_ANNOTATION_INTROSPECTOR_CLASS_NAME,\n-\t\t\t\t\tgetClass().getClassLoader())) {\n-\t\t\t\tnew ObjectMapperCustomizer().addJaxbAnnotationIntrospector(objectMapper);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprivate static final class ObjectMapperCustomizer {\n+\t\t@Configuration\n+\t\t@ConditionalOnClass({ JaxbAnnotationIntrospector.class, XmlElement.class })\n+\t\tstatic class JaxbObjectMapperCustomizer {\n \n-\t\t\tprivate void addJaxbAnnotationIntrospector(ObjectMapper objectMapper) {\n+\t\t\t@Autowired\n+\t\t\tpublic void addJaxbAnnotationIntrospector(ObjectMapper objectMapper) {\n \t\t\t\tJaxbAnnotationIntrospector jaxbAnnotationIntrospector = new JaxbAnnotationIntrospector(\n \t\t\t\t\t\tobjectMapper.getTypeFactory());\n \t\t\t\tobjectMapper.setAnnotationIntrospectors(\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jersey;\n\nimport java.util.Collections;\nimport java.util.EnumSet;\n\nimport javax.annotation.PostConstruct;\nimport javax.servlet.DispatcherType;\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRegistration;\nimport javax.ws.rs.ext.ContextResolver;\nimport javax.xml.bind.annotation.XmlElement;\n\nimport com.fasterxml.jackson.databind.AnnotationIntrospector;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.cfg.MapperConfig;\nimport com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.glassfish.jersey.jackson.JacksonFeature;\nimport org.glassfish.jersey.server.ResourceConfig;\nimport org.glassfish.jersey.server.spring.SpringComponentProvider;\nimport org.glassfish.jersey.servlet.ServletContainer;\nimport org.glassfish.jersey.servlet.ServletProperties;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.AutoConfigureOrder;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.servlet.ConditionalOnMissingFilterBean;\nimport org.springframework.boot.autoconfigure.web.servlet.DefaultJerseyApplicationPath;\nimport org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.servlet.JerseyApplicationPath;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.web.servlet.DynamicRegistrationBean;\nimport org.springframework.boot.web.servlet.FilterRegistrationBean;\nimport org.springframework.boot.web.servlet.ServletRegistrationBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.web.WebApplicationInitializer;\nimport org.springframework.web.context.ServletContextAware;\nimport org.springframework.web.filter.RequestContextFilter;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Jersey.\n *\n * @author Dave Syer\n * @author Andy Wilkinson\n * @author Eddú Meléndez\n * @author Stephane Nicoll\n */\n@Configuration\n@ConditionalOnClass({ SpringComponentProvider.class, ServletRegistration.class })\n@ConditionalOnBean(type = "org.glassfish.jersey.server.ResourceConfig")\n@ConditionalOnWebApplication(type = Type.SERVLET)\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)\n@AutoConfigureBefore(DispatcherServletAutoConfiguration.class)\n@AutoConfigureAfter(JacksonAutoConfiguration.class)\n@EnableConfigurationProperties(JerseyProperties.class)\npublic class JerseyAutoConfiguration implements ServletContextAware {\n\n\tprivate static final Log logger = LogFactory.getLog(JerseyAutoConfiguration.class);\n\n\tprivate final JerseyProperties jersey;\n\n\tprivate final ResourceConfig config;\n\n\tprivate final ObjectProvider<ResourceConfigCustomizer> customizers;\n\n\tpublic JerseyAutoConfiguration(JerseyProperties jersey, ResourceConfig config,\n\t\t\tObjectProvider<ResourceConfigCustomizer> customizers) {\n\t\tthis.jersey = jersey;\n\t\tthis.config = config;\n\t\tthis.customizers = customizers;\n\t}\n\n\t@PostConstruct\n\tpublic void path() {\n\t\tcustomize();\n\t}\n\n\tprivate void customize() {\n\t\tthis.customizers.orderedStream()\n\t\t\t\t.forEach((customizer) -> customizer.customize(this.config));\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingFilterBean(RequestContextFilter.class)\n\tpublic FilterRegistrationBean<RequestContextFilter> requestContextFilter() {\n\t\tFilterRegistrationBean<RequestContextFilter> registration = new FilterRegistrationBean<>();\n\t\tregistration.setFilter(new RequestContextFilter());\n\t\tregistration.setOrder(this.jersey.getFilter().getOrder() - 1);\n\t\tregistration.setName("requestContextFilter");\n\t\treturn registration;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic JerseyApplicationPath jerseyApplicationPath() {\n\t\treturn new DefaultJerseyApplicationPath(this.jersey.getApplicationPath(),\n\t\t\t\tthis.config);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "jerseyFilterRegistration")\n\t@ConditionalOnProperty(prefix = "spring.jersey", name = "type", havingValue = "filter")\n\tpublic FilterRegistrationBean<ServletContainer> jerseyFilterRegistration(\n\t\t\tJerseyApplicationPath applicationPath) {\n\t\tFilterRegistrationBean<ServletContainer> registration = new FilterRegistrationBean<>();\n\t\tregistration.setFilter(new ServletContainer(this.config));\n\t\tregistration.setUrlPatterns(\n\t\t\t\tCollections.singletonList(applicationPath.getUrlMapping()));\n\t\tregistration.setOrder(this.jersey.getFilter().getOrder());\n\t\tregistration.addInitParameter(ServletProperties.FILTER_CONTEXT_PATH,\n\t\t\t\tstripPattern(applicationPath.getPath()));\n\t\taddInitParameters(registration);\n\t\tregistration.setName("jerseyFilter");\n\t\tregistration.setDispatcherTypes(EnumSet.allOf(DispatcherType.class));\n\t\treturn registration;\n\t}\n\n\tprivate String stripPattern(String path) {\n\t\tif (path.endsWith("/*")) {\n\t\t\tpath = path.substring(0, path.lastIndexOf("/*"));\n\t\t}\n\t\treturn path;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "jerseyServletRegistration")\n\t@ConditionalOnProperty(prefix = "spring.jersey", name = "type", havingValue = "servlet", matchIfMissing = true)\n\tpublic ServletRegistrationBean<ServletContainer> jerseyServletRegistration(\n\t\t\tJerseyApplicationPath applicationPath) {\n\t\tServletRegistrationBean<ServletContainer> registration = new ServletRegistrationBean<>(\n\t\t\t\tnew ServletContainer(this.config), applicationPath.getUrlMapping());\n\t\taddInitParameters(registration);\n\t\tregistration.setName(getServletRegistrationName());\n\t\tregistration.setLoadOnStartup(this.jersey.getServlet().getLoadOnStartup());\n\t\treturn registration;\n\t}\n\n\tprivate String getServletRegistrationName() {\n\t\treturn ClassUtils.getUserClass(this.config.getClass()).getName();\n\t}\n\n\tprivate void addInitParameters(DynamicRegistrationBean<?> registration) {\n\t\tthis.jersey.getInit().forEach(registration::addInitParameter);\n\t}\n\n\t@Override\n\tpublic void setServletContext(ServletContext servletContext) {\n\t\tString servletRegistrationName = getServletRegistrationName();\n\t\tServletRegistration registration = servletContext\n\t\t\t\t.getServletRegistration(servletRegistrationName);\n\t\tif (registration != null) {\n\t\t\tif (logger.isInfoEnabled()) {\n\t\t\t\tlogger.info("Configuring existing registration for Jersey servlet \'"\n\t\t\t\t\t\t+ servletRegistrationName + "\'");\n\t\t\t}\n\t\t\tregistration.setInitParameters(this.jersey.getInit());\n\t\t}\n\t}\n\n\t@Order(Ordered.HIGHEST_PRECEDENCE)\n\tpublic static final class JerseyWebApplicationInitializer\n\t\t\timplements WebApplicationInitializer {\n\n\t\t@Override\n\t\tpublic void onStartup(ServletContext servletContext) throws ServletException {\n\t\t\t// We need to switch *off* the Jersey WebApplicationInitializer because it\n\t\t\t// will try and register a ContextLoaderListener which we don\'t need\n\t\t\tservletContext.setInitParameter("contextConfigLocation", "<NONE>");\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(JacksonFeature.class)\n\t@ConditionalOnSingleCandidate(ObjectMapper.class)\n\tstatic class JacksonResourceConfigCustomizer {\n\n\t\t@Bean\n\t\tpublic ResourceConfigCustomizer resourceConfigCustomizer(\n\t\t\t\tfinal ObjectMapper objectMapper) {\n\t\t\treturn (ResourceConfig config) -> {\n\t\t\t\tconfig.register(JacksonFeature.class);\n\t\t\t\tconfig.register(new ObjectMapperContextResolver(objectMapper),\n\t\t\t\t\t\tContextResolver.class);\n\t\t\t};\n\t\t}\n\n\t\t@Configuration\n\t\t@ConditionalOnClass({ JaxbAnnotationIntrospector.class, XmlElement.class })\n\t\tstatic class JaxbObjectMapperCustomizer {\n\n\t\t\t@Autowired\n\t\t\tpublic void addJaxbAnnotationIntrospector(ObjectMapper objectMapper) {\n\t\t\t\tJaxbAnnotationIntrospector jaxbAnnotationIntrospector = new JaxbAnnotationIntrospector(\n\t\t\t\t\t\tobjectMapper.getTypeFactory());\n\t\t\t\tobjectMapper.setAnnotationIntrospectors(\n\t\t\t\t\t\tcreatePair(objectMapper.getSerializationConfig(),\n\t\t\t\t\t\t\t\tjaxbAnnotationIntrospector),\n\t\t\t\t\t\tcreatePair(objectMapper.getDeserializationConfig(),\n\t\t\t\t\t\t\t\tjaxbAnnotationIntrospector));\n\t\t\t}\n\n\t\t\tprivate AnnotationIntrospector createPair(MapperConfig<?> config,\n\t\t\t\t\tJaxbAnnotationIntrospector jaxbAnnotationIntrospector) {\n\t\t\t\treturn AnnotationIntrospector.pair(config.getAnnotationIntrospector(),\n\t\t\t\t\t\tjaxbAnnotationIntrospector);\n\t\t\t}\n\n\t\t}\n\n\t\tprivate static final class ObjectMapperContextResolver\n\t\t\t\timplements ContextResolver<ObjectMapper> {\n\n\t\t\tprivate final ObjectMapper objectMapper;\n\n\t\t\tprivate ObjectMapperContextResolver(ObjectMapper objectMapper) {\n\t\t\t\tthis.objectMapper = objectMapper;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic ObjectMapper getContext(Class<?> type) {\n\t\t\t\treturn this.objectMapper;\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jersey;\n\nimport java.util.Collections;\nimport java.util.EnumSet;\n\nimport javax.annotation.PostConstruct;\nimport javax.servlet.DispatcherType;\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRegistration;\nimport javax.ws.rs.ext.ContextResolver;\n\nimport com.fasterxml.jackson.databind.AnnotationIntrospector;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.cfg.MapperConfig;\nimport com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.glassfish.jersey.jackson.JacksonFeature;\nimport org.glassfish.jersey.server.ResourceConfig;\nimport org.glassfish.jersey.server.spring.SpringComponentProvider;\nimport org.glassfish.jersey.servlet.ServletContainer;\nimport org.glassfish.jersey.servlet.ServletProperties;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.AutoConfigureOrder;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.servlet.ConditionalOnMissingFilterBean;\nimport org.springframework.boot.autoconfigure.web.servlet.DefaultJerseyApplicationPath;\nimport org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.servlet.JerseyApplicationPath;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.web.servlet.DynamicRegistrationBean;\nimport org.springframework.boot.web.servlet.FilterRegistrationBean;\nimport org.springframework.boot.web.servlet.ServletRegistrationBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.web.WebApplicationInitializer;\nimport org.springframework.web.context.ServletContextAware;\nimport org.springframework.web.filter.RequestContextFilter;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Jersey.\n *\n * @author Dave Syer\n * @author Andy Wilkinson\n * @author Eddú Meléndez\n * @author Stephane Nicoll\n */\n@Configuration\n@ConditionalOnClass({ SpringComponentProvider.class, ServletRegistration.class })\n@ConditionalOnBean(type = "org.glassfish.jersey.server.ResourceConfig")\n@ConditionalOnWebApplication(type = Type.SERVLET)\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)\n@AutoConfigureBefore(DispatcherServletAutoConfiguration.class)\n@AutoConfigureAfter(JacksonAutoConfiguration.class)\n@EnableConfigurationProperties(JerseyProperties.class)\npublic class JerseyAutoConfiguration implements ServletContextAware {\n\n\tprivate static final Log logger = LogFactory.getLog(JerseyAutoConfiguration.class);\n\n\tprivate final JerseyProperties jersey;\n\n\tprivate final ResourceConfig config;\n\n\tprivate final ObjectProvider<ResourceConfigCustomizer> customizers;\n\n\tpublic JerseyAutoConfiguration(JerseyProperties jersey, ResourceConfig config,\n\t\t\tObjectProvider<ResourceConfigCustomizer> customizers) {\n\t\tthis.jersey = jersey;\n\t\tthis.config = config;\n\t\tthis.customizers = customizers;\n\t}\n\n\t@PostConstruct\n\tpublic void path() {\n\t\tcustomize();\n\t}\n\n\tprivate void customize() {\n\t\tthis.customizers.orderedStream()\n\t\t\t\t.forEach((customizer) -> customizer.customize(this.config));\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingFilterBean(RequestContextFilter.class)\n\tpublic FilterRegistrationBean<RequestContextFilter> requestContextFilter() {\n\t\tFilterRegistrationBean<RequestContextFilter> registration = new FilterRegistrationBean<>();\n\t\tregistration.setFilter(new RequestContextFilter());\n\t\tregistration.setOrder(this.jersey.getFilter().getOrder() - 1);\n\t\tregistration.setName("requestContextFilter");\n\t\treturn registration;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic JerseyApplicationPath jerseyApplicationPath() {\n\t\treturn new DefaultJerseyApplicationPath(this.jersey.getApplicationPath(),\n\t\t\t\tthis.config);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "jerseyFilterRegistration")\n\t@ConditionalOnProperty(prefix = "spring.jersey", name = "type", havingValue = "filter")\n\tpublic FilterRegistrationBean<ServletContainer> jerseyFilterRegistration(\n\t\t\tJerseyApplicationPath applicationPath) {\n\t\tFilterRegistrationBean<ServletContainer> registration = new FilterRegistrationBean<>();\n\t\tregistration.setFilter(new ServletContainer(this.config));\n\t\tregistration.setUrlPatterns(\n\t\t\t\tCollections.singletonList(applicationPath.getUrlMapping()));\n\t\tregistration.setOrder(this.jersey.getFilter().getOrder());\n\t\tregistration.addInitParameter(ServletProperties.FILTER_CONTEXT_PATH,\n\t\t\t\tstripPattern(applicationPath.getPath()));\n\t\taddInitParameters(registration);\n\t\tregistration.setName("jerseyFilter");\n\t\tregistration.setDispatcherTypes(EnumSet.allOf(DispatcherType.class));\n\t\treturn registration;\n\t}\n\n\tprivate String stripPattern(String path) {\n\t\tif (path.endsWith("/*")) {\n\t\t\tpath = path.substring(0, path.lastIndexOf("/*"));\n\t\t}\n\t\treturn path;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "jerseyServletRegistration")\n\t@ConditionalOnProperty(prefix = "spring.jersey", name = "type", havingValue = "servlet", matchIfMissing = true)\n\tpublic ServletRegistrationBean<ServletContainer> jerseyServletRegistration(\n\t\t\tJerseyApplicationPath applicationPath) {\n\t\tServletRegistrationBean<ServletContainer> registration = new ServletRegistrationBean<>(\n\t\t\t\tnew ServletContainer(this.config), applicationPath.getUrlMapping());\n\t\taddInitParameters(registration);\n\t\tregistration.setName(getServletRegistrationName());\n\t\tregistration.setLoadOnStartup(this.jersey.getServlet().getLoadOnStartup());\n\t\treturn registration;\n\t}\n\n\tprivate String getServletRegistrationName() {\n\t\treturn ClassUtils.getUserClass(this.config.getClass()).getName();\n\t}\n\n\tprivate void addInitParameters(DynamicRegistrationBean<?> registration) {\n\t\tthis.jersey.getInit().forEach(registration::addInitParameter);\n\t}\n\n\t@Override\n\tpublic void setServletContext(ServletContext servletContext) {\n\t\tString servletRegistrationName = getServletRegistrationName();\n\t\tServletRegistration registration = servletContext\n\t\t\t\t.getServletRegistration(servletRegistrationName);\n\t\tif (registration != null) {\n\t\t\tif (logger.isInfoEnabled()) {\n\t\t\t\tlogger.info("Configuring existing registration for Jersey servlet \'"\n\t\t\t\t\t\t+ servletRegistrationName + "\'");\n\t\t\t}\n\t\t\tregistration.setInitParameters(this.jersey.getInit());\n\t\t}\n\t}\n\n\t@Order(Ordered.HIGHEST_PRECEDENCE)\n\tpublic static final class JerseyWebApplicationInitializer\n\t\t\timplements WebApplicationInitializer {\n\n\t\t@Override\n\t\tpublic void onStartup(ServletContext servletContext) throws ServletException {\n\t\t\t// We need to switch *off* the Jersey WebApplicationInitializer because it\n\t\t\t// will try and register a ContextLoaderListener which we don\'t need\n\t\t\tservletContext.setInitParameter("contextConfigLocation", "<NONE>");\n\t\t}\n\n\t}\n\n\t@ConditionalOnClass(JacksonFeature.class)\n\t@ConditionalOnSingleCandidate(ObjectMapper.class)\n\t@Configuration\n\tstatic class JacksonResourceConfigCustomizer {\n\n\t\tprivate static final String JAXB_ANNOTATION_INTROSPECTOR_CLASS_NAME = "com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector";\n\n\t\t@Bean\n\t\tpublic ResourceConfigCustomizer resourceConfigCustomizer(\n\t\t\t\tfinal ObjectMapper objectMapper) {\n\t\t\taddJaxbAnnotationIntrospectorIfPresent(objectMapper);\n\t\t\treturn (ResourceConfig config) -> {\n\t\t\t\tconfig.register(JacksonFeature.class);\n\t\t\t\tconfig.register(new ObjectMapperContextResolver(objectMapper),\n\t\t\t\t\t\tContextResolver.class);\n\t\t\t};\n\t\t}\n\n\t\tprivate void addJaxbAnnotationIntrospectorIfPresent(ObjectMapper objectMapper) {\n\t\t\tif (ClassUtils.isPresent(JAXB_ANNOTATION_INTROSPECTOR_CLASS_NAME,\n\t\t\t\t\tgetClass().getClassLoader())) {\n\t\t\t\tnew ObjectMapperCustomizer().addJaxbAnnotationIntrospector(objectMapper);\n\t\t\t}\n\t\t}\n\n\t\tprivate static final class ObjectMapperCustomizer {\n\n\t\t\tprivate void addJaxbAnnotationIntrospector(ObjectMapper objectMapper) {\n\t\t\t\tJaxbAnnotationIntrospector jaxbAnnotationIntrospector = new JaxbAnnotationIntrospector(\n\t\t\t\t\t\tobjectMapper.getTypeFactory());\n\t\t\t\tobjectMapper.setAnnotationIntrospectors(\n\t\t\t\t\t\tcreatePair(objectMapper.getSerializationConfig(),\n\t\t\t\t\t\t\t\tjaxbAnnotationIntrospector),\n\t\t\t\t\t\tcreatePair(objectMapper.getDeserializationConfig(),\n\t\t\t\t\t\t\t\tjaxbAnnotationIntrospector));\n\t\t\t}\n\n\t\t\tprivate AnnotationIntrospector createPair(MapperConfig<?> config,\n\t\t\t\t\tJaxbAnnotationIntrospector jaxbAnnotationIntrospector) {\n\t\t\t\treturn AnnotationIntrospector.pair(config.getAnnotationIntrospector(),\n\t\t\t\t\t\tjaxbAnnotationIntrospector);\n\t\t\t}\n\n\t\t}\n\n\t\tprivate static final class ObjectMapperContextResolver\n\t\t\t\timplements ContextResolver<ObjectMapper> {\n\n\t\t\tprivate final ObjectMapper objectMapper;\n\n\t\t\tprivate ObjectMapperContextResolver(ObjectMapper objectMapper) {\n\t\t\t\tthis.objectMapper = objectMapper;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic ObjectMapper getContext(Class<?> type) {\n\t\t\t\treturn this.objectMapper;\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
