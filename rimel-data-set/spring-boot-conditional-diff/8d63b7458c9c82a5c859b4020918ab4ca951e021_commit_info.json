{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/JsonbHttpMessageConvertersConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/JsonbHttpMessageConvertersConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -23,10 +23,10 @@ import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n-import org.springframework.boot.autoconfigure.condition.NoneNestedConditions;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.http.converter.json.GsonHttpMessageConverter;\n import org.springframework.http.converter.json.JsonbHttpMessageConverter;\n import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\n \n@@ -55,40 +55,24 @@ class JsonbHttpMessageConvertersConfiguration {\n \n \t}\n \n-\tprivate static class PreferJsonbOrMissingJacksonAndGsonCondition extends AnyNestedCondition {\n+\tprivate static class PreferJsonbOrMissingJacksonAndGsonCondition\n+\t\t\textends AnyNestedCondition {\n \n \t\tPreferJsonbOrMissingJacksonAndGsonCondition() {\n \t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n \t\t}\n \n-\t\t@ConditionalOnProperty(name = HttpMessageConvertersAutoConfiguration.PREFERRED_MAPPER_PROPERTY, havingValue = "jsonb", matchIfMissing = false)\n+\t\t@ConditionalOnProperty(name = HttpMessageConvertersAutoConfiguration.PREFERRED_MAPPER_PROPERTY, havingValue = "jsonb")\n \t\tstatic class JsonbPreferred {\n \n \t\t}\n \n-\t\t@Conditional(JacksonAndGsonMissing.class)\n-\t\tstatic class JacksonGsonMissing {\n+\t\t@ConditionalOnMissingBean({ MappingJackson2HttpMessageConverter.class, GsonHttpMessageConverter.class })\n+\t\tstatic class JacksonAndGsonMissing {\n \n \t\t}\n \n \t}\n \n-\tprivate static class JacksonAndGsonMissing extends NoneNestedConditions {\n-\n-\t\tJacksonAndGsonMissing() {\n-\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n-\t\t}\n-\n-\t\t@ConditionalOnBean(MappingJackson2HttpMessageConverter.class)\n-\t\tstatic class JacksonMissing {\n-\n-\t\t}\n-\n-\t\t@ConditionalOnProperty(name = HttpMessageConvertersAutoConfiguration.PREFERRED_MAPPER_PROPERTY, havingValue = "gson")\n-\t\tstatic class GsonMissing {\n-\n-\t\t}\n-\n-\t}\n \n }\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.http;\n\nimport javax.json.bind.Jsonb;\n\nimport org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.converter.json.GsonHttpMessageConverter;\nimport org.springframework.http.converter.json.JsonbHttpMessageConverter;\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\n\n/**\n * Configuration for HTTP Message converters that use JSON-B.\n *\n * @author Eddú Meléndez\n * @author 2.0.0\n */\n@Configuration\n@ConditionalOnClass(Jsonb.class)\nclass JsonbHttpMessageConvertersConfiguration {\n\n\t@Configuration\n\t@ConditionalOnBean(Jsonb.class)\n\t@Conditional(PreferJsonbOrMissingJacksonAndGsonCondition.class)\n\tprotected static class JsonbHttpMessageConverterConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic JsonbHttpMessageConverter jsonbHttpMessageConverter(Jsonb jsonb) {\n\t\t\tJsonbHttpMessageConverter converter = new JsonbHttpMessageConverter();\n\t\t\tconverter.setJsonb(jsonb);\n\t\t\treturn converter;\n\t\t}\n\n\t}\n\n\tprivate static class PreferJsonbOrMissingJacksonAndGsonCondition\n\t\t\textends AnyNestedCondition {\n\n\t\tPreferJsonbOrMissingJacksonAndGsonCondition() {\n\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n\t\t}\n\n\t\t@ConditionalOnProperty(name = HttpMessageConvertersAutoConfiguration.PREFERRED_MAPPER_PROPERTY, havingValue = "jsonb")\n\t\tstatic class JsonbPreferred {\n\n\t\t}\n\n\t\t@ConditionalOnMissingBean({ MappingJackson2HttpMessageConverter.class, GsonHttpMessageConverter.class })\n\t\tstatic class JacksonAndGsonMissing {\n\n\t\t}\n\n\t}\n\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.http;\n\nimport javax.json.bind.Jsonb;\n\nimport org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.NoneNestedConditions;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.converter.json.JsonbHttpMessageConverter;\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\n\n/**\n * Configuration for HTTP Message converters that use JSON-B.\n *\n * @author Eddú Meléndez\n * @author 2.0.0\n */\n@Configuration\n@ConditionalOnClass(Jsonb.class)\nclass JsonbHttpMessageConvertersConfiguration {\n\n\t@Configuration\n\t@ConditionalOnBean(Jsonb.class)\n\t@Conditional(PreferJsonbOrMissingJacksonAndGsonCondition.class)\n\tprotected static class JsonbHttpMessageConverterConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic JsonbHttpMessageConverter jsonbHttpMessageConverter(Jsonb jsonb) {\n\t\t\tJsonbHttpMessageConverter converter = new JsonbHttpMessageConverter();\n\t\t\tconverter.setJsonb(jsonb);\n\t\t\treturn converter;\n\t\t}\n\n\t}\n\n\tprivate static class PreferJsonbOrMissingJacksonAndGsonCondition extends AnyNestedCondition {\n\n\t\tPreferJsonbOrMissingJacksonAndGsonCondition() {\n\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n\t\t}\n\n\t\t@ConditionalOnProperty(name = HttpMessageConvertersAutoConfiguration.PREFERRED_MAPPER_PROPERTY, havingValue = "jsonb", matchIfMissing = false)\n\t\tstatic class JsonbPreferred {\n\n\t\t}\n\n\t\t@Conditional(JacksonAndGsonMissing.class)\n\t\tstatic class JacksonGsonMissing {\n\n\t\t}\n\n\t}\n\n\tprivate static class JacksonAndGsonMissing extends NoneNestedConditions {\n\n\t\tJacksonAndGsonMissing() {\n\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n\t\t}\n\n\t\t@ConditionalOnBean(MappingJackson2HttpMessageConverter.class)\n\t\tstatic class JacksonMissing {\n\n\t\t}\n\n\t\t@ConditionalOnProperty(name = HttpMessageConvertersAutoConfiguration.PREFERRED_MAPPER_PROPERTY, havingValue = "gson")\n\t\tstatic class GsonMissing {\n\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
