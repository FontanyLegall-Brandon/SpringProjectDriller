{'_old_path': None, '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaStreamsAnnotationDrivenConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2012-2018 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.kafka;\n+\n+import java.util.Map;\n+\n+import org.apache.kafka.streams.StreamsBuilder;\n+import org.apache.kafka.streams.StreamsConfig;\n+\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.source.InvalidConfigurationPropertyValueException;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.kafka.annotation.KafkaStreamsDefaultConfiguration;\n+import org.springframework.kafka.config.KafkaStreamsConfiguration;\n+import org.springframework.kafka.core.StreamsBuilderFactoryBean;\n+\n+/**\n+ * Configuration for Kafka Streams annotation-driven support.\n+ *\n+ * @author Gary Russell\n+ * @author Stephane Nicoll\n+ */\n+@Configuration\n+@ConditionalOnClass(StreamsBuilder.class)\n+@ConditionalOnBean(name = KafkaStreamsDefaultConfiguration.DEFAULT_STREAMS_BUILDER_BEAN_NAME)\n+class KafkaStreamsAnnotationDrivenConfiguration {\n+\n+\tprivate final KafkaProperties properties;\n+\n+\tKafkaStreamsAnnotationDrivenConfiguration(KafkaProperties properties) {\n+\t\tthis.properties = properties;\n+\t}\n+\n+\t@ConditionalOnMissingBean\n+\t@Bean(KafkaStreamsDefaultConfiguration.DEFAULT_STREAMS_CONFIG_BEAN_NAME)\n+\tpublic KafkaStreamsConfiguration defaultKafkaStreamsConfig(Environment environment) {\n+\t\tMap<String, Object> streamsProperties = this.properties.buildStreamsProperties();\n+\t\tif (this.properties.getStreams().getApplicationId() == null) {\n+\t\t\tString applicationName = environment.getProperty("spring.application.name");\n+\t\t\tif (applicationName != null) {\n+\t\t\t\tstreamsProperties.put(StreamsConfig.APPLICATION_ID_CONFIG,\n+\t\t\t\t\t\tapplicationName);\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tthrow new InvalidConfigurationPropertyValueException(\n+\t\t\t\t\t\t"spring.kafka.streams.application-id", null,\n+\t\t\t\t\t\t"This property is mandatory and fallback \'spring.application.name\' is not set either.");\n+\t\t\t}\n+\t\t}\n+\t\treturn new KafkaStreamsConfiguration(streamsProperties);\n+\t}\n+\n+\t@Bean\n+\tpublic KafkaStreamsFactoryBeanConfigurer kafkaStreamsFactoryBeanConfigurer(\n+\t\t\tStreamsBuilderFactoryBean factoryBean) {\n+\t\treturn new KafkaStreamsFactoryBeanConfigurer(this.properties, factoryBean);\n+\t}\n+\n+\t// Separate class required to avoid BeanCurrentlyInCreationException\n+\tstatic class KafkaStreamsFactoryBeanConfigurer implements InitializingBean {\n+\n+\t\tprivate final KafkaProperties properties;\n+\n+\t\tprivate final StreamsBuilderFactoryBean factoryBean;\n+\n+\t\tKafkaStreamsFactoryBeanConfigurer(KafkaProperties properties,\n+\t\t\t\tStreamsBuilderFactoryBean factoryBean) {\n+\t\t\tthis.properties = properties;\n+\t\t\tthis.factoryBean = factoryBean;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void afterPropertiesSet() {\n+\t\t\tthis.factoryBean.setAutoStartup(this.properties.getStreams().isAutoStartup());\n+\t\t}\n+\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.kafka;\n\nimport java.util.Map;\n\nimport org.apache.kafka.streams.StreamsBuilder;\nimport org.apache.kafka.streams.StreamsConfig;\n\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.source.InvalidConfigurationPropertyValueException;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\nimport org.springframework.kafka.annotation.KafkaStreamsDefaultConfiguration;\nimport org.springframework.kafka.config.KafkaStreamsConfiguration;\nimport org.springframework.kafka.core.StreamsBuilderFactoryBean;\n\n/**\n * Configuration for Kafka Streams annotation-driven support.\n *\n * @author Gary Russell\n * @author Stephane Nicoll\n */\n@Configuration\n@ConditionalOnClass(StreamsBuilder.class)\n@ConditionalOnBean(name = KafkaStreamsDefaultConfiguration.DEFAULT_STREAMS_BUILDER_BEAN_NAME)\nclass KafkaStreamsAnnotationDrivenConfiguration {\n\n\tprivate final KafkaProperties properties;\n\n\tKafkaStreamsAnnotationDrivenConfiguration(KafkaProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@ConditionalOnMissingBean\n\t@Bean(KafkaStreamsDefaultConfiguration.DEFAULT_STREAMS_CONFIG_BEAN_NAME)\n\tpublic KafkaStreamsConfiguration defaultKafkaStreamsConfig(Environment environment) {\n\t\tMap<String, Object> streamsProperties = this.properties.buildStreamsProperties();\n\t\tif (this.properties.getStreams().getApplicationId() == null) {\n\t\t\tString applicationName = environment.getProperty("spring.application.name");\n\t\t\tif (applicationName != null) {\n\t\t\t\tstreamsProperties.put(StreamsConfig.APPLICATION_ID_CONFIG,\n\t\t\t\t\t\tapplicationName);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new InvalidConfigurationPropertyValueException(\n\t\t\t\t\t\t"spring.kafka.streams.application-id", null,\n\t\t\t\t\t\t"This property is mandatory and fallback \'spring.application.name\' is not set either.");\n\t\t\t}\n\t\t}\n\t\treturn new KafkaStreamsConfiguration(streamsProperties);\n\t}\n\n\t@Bean\n\tpublic KafkaStreamsFactoryBeanConfigurer kafkaStreamsFactoryBeanConfigurer(\n\t\t\tStreamsBuilderFactoryBean factoryBean) {\n\t\treturn new KafkaStreamsFactoryBeanConfigurer(this.properties, factoryBean);\n\t}\n\n\t// Separate class required to avoid BeanCurrentlyInCreationException\n\tstatic class KafkaStreamsFactoryBeanConfigurer implements InitializingBean {\n\n\t\tprivate final KafkaProperties properties;\n\n\t\tprivate final StreamsBuilderFactoryBean factoryBean;\n\n\t\tKafkaStreamsFactoryBeanConfigurer(KafkaProperties properties,\n\t\t\t\tStreamsBuilderFactoryBean factoryBean) {\n\t\t\tthis.properties = properties;\n\t\t\tthis.factoryBean = factoryBean;\n\t\t}\n\n\t\t@Override\n\t\tpublic void afterPropertiesSet() {\n\t\t\tthis.factoryBean.setAutoStartup(this.properties.getStreams().isAutoStartup());\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
