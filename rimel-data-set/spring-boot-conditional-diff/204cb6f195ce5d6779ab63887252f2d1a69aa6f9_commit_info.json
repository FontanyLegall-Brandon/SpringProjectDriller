{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/websocket/WebSocketMessagingAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2012-2015 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.websocket;\n+\n+import java.util.List;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.messaging.converter.DefaultContentTypeResolver;\n+import org.springframework.messaging.converter.MappingJackson2MessageConverter;\n+import org.springframework.messaging.converter.MessageConverter;\n+import org.springframework.util.MimeTypeUtils;\n+import org.springframework.web.socket.config.annotation.AbstractWebSocketMessageBrokerConfigurer;\n+import org.springframework.web.socket.config.annotation.DelegatingWebSocketMessageBrokerConfiguration;\n+import org.springframework.web.socket.config.annotation.StompEndpointRegistry;\n+import org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for WebSocket-based messaging.\n+ *\n+ * @author Andy Wilkinson\n+ * @since 1.3.0\n+ */\n+@ConditionalOnWebApplication\n+@ConditionalOnClass(WebSocketMessageBrokerConfigurer.class)\n+@AutoConfigureAfter(JacksonAutoConfiguration.class)\n+public class WebSocketMessagingAutoConfiguration {\n+\n+\t@Configuration\n+\t@ConditionalOnBean({ DelegatingWebSocketMessageBrokerConfiguration.class,\n+\t\t\tObjectMapper.class })\n+\t@ConditionalOnClass(ObjectMapper.class)\n+\tstatic class WebSocketMessageConverterConfiguration extends\n+\t\t\tAbstractWebSocketMessageBrokerConfigurer {\n+\n+\t\t@Autowired\n+\t\tprivate ObjectMapper objectMapper;\n+\n+\t\t@Override\n+\t\tpublic void registerStompEndpoints(StompEndpointRegistry registry) {\n+\t\t\t// The user must register their own endpoints\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean configureMessageConverters(List<MessageConverter> messageConverters) {\n+\t\t\tMappingJackson2MessageConverter converter = new MappingJackson2MessageConverter();\n+\t\t\tconverter.setObjectMapper(this.objectMapper);\n+\t\t\tDefaultContentTypeResolver resolver = new DefaultContentTypeResolver();\n+\t\t\tresolver.setDefaultMimeType(MimeTypeUtils.APPLICATION_JSON);\n+\t\t\tconverter.setContentTypeResolver(resolver);\n+\t\t\tmessageConverters.add(converter);\n+\t\t\treturn true;\n+\t\t}\n+\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.websocket;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.messaging.converter.DefaultContentTypeResolver;\nimport org.springframework.messaging.converter.MappingJackson2MessageConverter;\nimport org.springframework.messaging.converter.MessageConverter;\nimport org.springframework.util.MimeTypeUtils;\nimport org.springframework.web.socket.config.annotation.AbstractWebSocketMessageBrokerConfigurer;\nimport org.springframework.web.socket.config.annotation.DelegatingWebSocketMessageBrokerConfiguration;\nimport org.springframework.web.socket.config.annotation.StompEndpointRegistry;\nimport org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for WebSocket-based messaging.\n *\n * @author Andy Wilkinson\n * @since 1.3.0\n */\n@ConditionalOnWebApplication\n@ConditionalOnClass(WebSocketMessageBrokerConfigurer.class)\n@AutoConfigureAfter(JacksonAutoConfiguration.class)\npublic class WebSocketMessagingAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnBean({ DelegatingWebSocketMessageBrokerConfiguration.class,\n\t\t\tObjectMapper.class })\n\t@ConditionalOnClass(ObjectMapper.class)\n\tstatic class WebSocketMessageConverterConfiguration extends\n\t\t\tAbstractWebSocketMessageBrokerConfigurer {\n\n\t\t@Autowired\n\t\tprivate ObjectMapper objectMapper;\n\n\t\t@Override\n\t\tpublic void registerStompEndpoints(StompEndpointRegistry registry) {\n\t\t\t// The user must register their own endpoints\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean configureMessageConverters(List<MessageConverter> messageConverters) {\n\t\t\tMappingJackson2MessageConverter converter = new MappingJackson2MessageConverter();\n\t\t\tconverter.setObjectMapper(this.objectMapper);\n\t\t\tDefaultContentTypeResolver resolver = new DefaultContentTypeResolver();\n\t\t\tresolver.setDefaultMimeType(MimeTypeUtils.APPLICATION_JSON);\n\t\t\tconverter.setContentTypeResolver(resolver);\n\t\t\tmessageConverters.add(converter);\n\t\t\treturn true;\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
