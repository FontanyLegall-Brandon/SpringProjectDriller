@@ -0,0 +1,196 @@
+
+
+package org.springframework.boot.autoconfigure.condition;
+
+import static org.junit.Assert.*;
+
+import org.junit.After;
+import org.junit.Test;
+
+import org.springframework.boot.test.EnvironmentTestUtils;
+import org.springframework.context.annotation.AnnotationConfigApplicationContext;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+
+public class ConditionalOnPropertyValueTests {
+
+	private AnnotationConfigApplicationContext context;
+
+	@After
+	public void tearDown() {
+		if (this.context != null) {
+			this.context.close();
+		}
+	}
+
+	@Test 
+	public void enabledIfNotConfiguredOtherwise() {
+		load(EnabledIfNotConfiguredOtherwiseConfig.class);
+		assertTrue(this.context.containsBean());
+	}
+
+	@Test
+	public void enabledIfNotConfiguredOtherwiseWithConfig() {
+		load(EnabledIfNotConfiguredOtherwiseConfig.class, );
+		assertFalse(this.context.containsBean());
+	}
+
+	@Test
+	public void enabledIfNotConfiguredOtherwiseWithConfigDifferentCase() {
+		load(EnabledIfNotConfiguredOtherwiseConfig.class, );
+		assertFalse(this.context.containsBean());
+	}
+
+	@Test 
+	public void disableIfNotConfiguredOtherwise() {
+		load(DisabledIfNotConfiguredOtherwiseConfig.class);
+		assertFalse(this.context.containsBean());
+	}
+
+	@Test
+	public void disableIfNotConfiguredOtherwiseWithConfig() {
+		load(DisabledIfNotConfiguredOtherwiseConfig.class, );
+		assertTrue(this.context.containsBean());
+	}
+
+	@Test
+	public void disableIfNotConfiguredOtherwiseWithConfigDifferentCase() {
+		load(DisabledIfNotConfiguredOtherwiseConfig.class, );
+		assertTrue(this.context.containsBean());
+	}
+
+	@Test
+	public void simpleValueIsSet() {
+		load(SimpleValueConfig.class, );
+		assertTrue(this.context.containsBean());
+	}
+
+	@Test
+	public void caseInsensitive() {
+		load(SimpleValueConfig.class, );
+		assertTrue(this.context.containsBean());
+	}
+
+	@Test
+	public void defaultValueIsSet() {
+		load(DefaultValueConfig.class, );
+		assertTrue(this.context.containsBean());
+	}
+
+	@Test
+	public void defaultValueIsNotSet() {
+		load(DefaultValueConfig.class);
+		assertTrue(this.context.containsBean());
+	}
+
+	@Test
+	public void defaultValueIsSetDifferentValue() {
+		load(DefaultValueConfig.class, );
+		assertFalse(this.context.containsBean());
+	}
+
+	@Test
+	public void prefix() {
+		load(PrefixValueConfig.class, );
+		assertTrue(this.context.containsBean());
+	}
+
+	@Test
+	public void relaxedEnabledByDefault() {
+		load(PrefixValueConfig.class, );
+		assertTrue(this.context.containsBean());
+	}
+
+	@Test
+	public void strictNameMatch() {
+		load(StrictNameConfig.class, );
+		assertTrue(this.context.containsBean());
+	}
+
+	@Test
+	public void strictNameNoMatch() {
+		load(StrictNameConfig.class, );
+		assertFalse(this.context.containsBean());
+	}
+
+	private void load(Class<?> config, String... environment) {
+		this.context = new AnnotationConfigApplicationContext();
+		EnvironmentTestUtils.addEnvironment(this.context, environment);
+		this.context.register(config);
+		this.context.refresh();
+	}
+
+	@Configuration 
+	@ConditionalOnPropertyValue(prefix = , property = , value = , defaultMatch = true)
+	static class EnabledIfNotConfiguredOtherwiseConfig {
+		@Bean
+		public String foo() {
+			return ;
+		}
+	}
+
+	@Configuration 
+	@ConditionalOnPropertyValue(prefix = , property = , value = , defaultMatch = false)
+	static class DisabledIfNotConfiguredOtherwiseConfig {
+		@Bean
+		public String foo() {
+			return ;
+		}
+	}
+
+	@Configuration
+	@ConditionalOnPropertyValue(prefix = , property = , value = )
+	static class SimpleValueConfig {
+		@Bean
+		public String foo() {
+			return ;
+		}
+	}
+
+	@Configuration
+	@ConditionalOnPropertyValue(property = , value = , defaultMatch = true)
+	static class DefaultValueConfig {
+		@Bean
+		public String foo() {
+			return ;
+		}
+	}
+
+	@Configuration
+	@ConditionalOnPropertyValue(prefix = , property = , value = )
+	static class PrefixValueConfig {
+		@Bean
+		public String foo() {
+			return ;
+		}
+	}
+
+	@Configuration
+	@ConditionalOnPropertyValue(prefix = , property = , value = , relaxedName = false)
+	static class StrictNameConfig {
+		@Bean
+		public String foo() {
+			return ;
+		}
+	}
+
+}

