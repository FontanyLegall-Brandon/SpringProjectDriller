{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/webservices/WebServicesAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/webservices/WebServicesAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,23 +16,40 @@\n \n package org.springframework.boot.autoconfigure.webservices;\n \n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n import java.util.Map;\n \n+import org.springframework.beans.BeansException;\n+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n+import org.springframework.beans.factory.config.ConstructorArgumentValues;\n+import org.springframework.beans.factory.support.BeanDefinitionRegistry;\n+import org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;\n+import org.springframework.beans.factory.support.RootBeanDefinition;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\n import org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.context.properties.bind.Bindable;\n+import org.springframework.boot.context.properties.bind.Binder;\n import org.springframework.boot.web.servlet.ServletRegistrationBean;\n import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ApplicationContextAware;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.io.Resource;\n+import org.springframework.util.StringUtils;\n import org.springframework.ws.config.annotation.EnableWs;\n import org.springframework.ws.config.annotation.WsConfigurationSupport;\n import org.springframework.ws.transport.http.MessageDispatcherServlet;\n+import org.springframework.ws.wsdl.wsdl11.SimpleWsdl11Definition;\n+import org.springframework.xml.xsd.SimpleXsdSchema;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for Spring Web Services.\n@@ -72,10 +89,76 @@ public class WebServicesAutoConfiguration {\n \t\treturn registration;\n \t}\n \n+\t@Bean\n+\t@ConditionalOnProperty(prefix = "spring.webservices", name = "wsdl-locations")\n+\tpublic static WsdlDefinitionBeanFactoryPostProcessor wsdlDefinitionBeanFactoryPostProcessor() {\n+\t\treturn new WsdlDefinitionBeanFactoryPostProcessor();\n+\t}\n+\n \t@Configuration\n \t@EnableWs\n \tprotected static class WsConfiguration {\n \n \t}\n \n+\tprivate static class WsdlDefinitionBeanFactoryPostProcessor\n+\t\t\timplements BeanDefinitionRegistryPostProcessor, ApplicationContextAware {\n+\n+\t\tprivate ApplicationContext applicationContext;\n+\n+\t\t@Override\n+\t\tpublic void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry)\n+\t\t\t\tthrows BeansException {\n+\t\t\tBinder binder = Binder.get(this.applicationContext.getEnvironment());\n+\t\t\tList<String> wsdlLocations = binder\n+\t\t\t\t\t.bind("spring.webservices.wsdl-locations",\n+\t\t\t\t\t\t\tBindable.listOf(String.class))\n+\t\t\t\t\t.orElse(Collections.emptyList());\n+\t\t\tfor (String wsdlLocation : wsdlLocations) {\n+\t\t\t\tregisterBeans(wsdlLocation, "*.wsdl", SimpleWsdl11Definition.class, registry);\n+\t\t\t\tregisterBeans(wsdlLocation, "*.xsd", SimpleXsdSchema.class, registry);\n+\t\t\t}\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)\n+\t\t\t\tthrows BeansException {\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void setApplicationContext(ApplicationContext applicationContext)\n+\t\t\t\tthrows BeansException {\n+\t\t\tthis.applicationContext = applicationContext;\n+\t\t}\n+\n+\t\tprivate void registerBeans(String location, String pattern, Class<?> type,\n+\t\t\t\tBeanDefinitionRegistry registry) {\n+\t\t\tResource[] resources = new Resource[] {};\n+\t\t\ttry {\n+\t\t\t\tresources = this.applicationContext\n+\t\t\t\t\t\t.getResources(ensureTrailingSlash(location) + pattern);\n+\t\t\t}\n+\t\t\tcatch (IOException ignored) {\n+\t\t\t}\n+\t\t\tfor (Resource resource : resources) {\n+\t\t\t\tRootBeanDefinition beanDefinition = new RootBeanDefinition(type);\n+\t\t\t\tConstructorArgumentValues constructorArguments = new ConstructorArgumentValues();\n+\t\t\t\tconstructorArguments.addIndexedArgumentValue(0, resource);\n+\t\t\t\tbeanDefinition.setConstructorArgumentValues(constructorArguments);\n+\n+\t\t\t\tregistry.registerBeanDefinition(\n+\t\t\t\t\t\tStringUtils.stripFilenameExtension(resource.getFilename()),\n+\t\t\t\t\t\tbeanDefinition);\n+\t\t\t}\n+\t\t}\n+\n+\t\tprivate static String ensureTrailingSlash(String path) {\n+\t\t\tif (!path.endsWith("/")) {\n+\t\t\t\treturn path + "/";\n+\t\t\t}\n+\t\t\treturn path;\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.webservices;\n\nimport java.io.IOException;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.beans.factory.config.ConstructorArgumentValues;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistry;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;\nimport org.springframework.beans.factory.support.RootBeanDefinition;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.context.properties.bind.Bindable;\nimport org.springframework.boot.context.properties.bind.Binder;\nimport org.springframework.boot.web.servlet.ServletRegistrationBean;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.Resource;\nimport org.springframework.util.StringUtils;\nimport org.springframework.ws.config.annotation.EnableWs;\nimport org.springframework.ws.config.annotation.WsConfigurationSupport;\nimport org.springframework.ws.transport.http.MessageDispatcherServlet;\nimport org.springframework.ws.wsdl.wsdl11.SimpleWsdl11Definition;\nimport org.springframework.xml.xsd.SimpleXsdSchema;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Web Services.\n *\n * @author Vedran Pavic\n * @author Stephane Nicoll\n * @since 1.4.0\n */\n@Configuration\n@ConditionalOnWebApplication(type = Type.SERVLET)\n@ConditionalOnClass(MessageDispatcherServlet.class)\n@ConditionalOnMissingBean(WsConfigurationSupport.class)\n@EnableConfigurationProperties(WebServicesProperties.class)\n@AutoConfigureAfter(ServletWebServerFactoryAutoConfiguration.class)\npublic class WebServicesAutoConfiguration {\n\n\tprivate final WebServicesProperties properties;\n\n\tpublic WebServicesAutoConfiguration(WebServicesProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\tpublic ServletRegistrationBean<MessageDispatcherServlet> messageDispatcherServlet(\n\t\t\tApplicationContext applicationContext) {\n\t\tMessageDispatcherServlet servlet = new MessageDispatcherServlet();\n\t\tservlet.setApplicationContext(applicationContext);\n\t\tString path = this.properties.getPath();\n\t\tString urlMapping = (path.endsWith("/") ? path + "*" : path + "/*");\n\t\tServletRegistrationBean<MessageDispatcherServlet> registration = new ServletRegistrationBean<>(\n\t\t\t\tservlet, urlMapping);\n\t\tWebServicesProperties.Servlet servletProperties = this.properties.getServlet();\n\t\tregistration.setLoadOnStartup(servletProperties.getLoadOnStartup());\n\t\tfor (Map.Entry<String, String> entry : servletProperties.getInit().entrySet()) {\n\t\t\tregistration.addInitParameter(entry.getKey(), entry.getValue());\n\t\t}\n\t\treturn registration;\n\t}\n\n\t@Bean\n\t@ConditionalOnProperty(prefix = "spring.webservices", name = "wsdl-locations")\n\tpublic static WsdlDefinitionBeanFactoryPostProcessor wsdlDefinitionBeanFactoryPostProcessor() {\n\t\treturn new WsdlDefinitionBeanFactoryPostProcessor();\n\t}\n\n\t@Configuration\n\t@EnableWs\n\tprotected static class WsConfiguration {\n\n\t}\n\n\tprivate static class WsdlDefinitionBeanFactoryPostProcessor\n\t\t\timplements BeanDefinitionRegistryPostProcessor, ApplicationContextAware {\n\n\t\tprivate ApplicationContext applicationContext;\n\n\t\t@Override\n\t\tpublic void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry)\n\t\t\t\tthrows BeansException {\n\t\t\tBinder binder = Binder.get(this.applicationContext.getEnvironment());\n\t\t\tList<String> wsdlLocations = binder\n\t\t\t\t\t.bind("spring.webservices.wsdl-locations",\n\t\t\t\t\t\t\tBindable.listOf(String.class))\n\t\t\t\t\t.orElse(Collections.emptyList());\n\t\t\tfor (String wsdlLocation : wsdlLocations) {\n\t\t\t\tregisterBeans(wsdlLocation, "*.wsdl", SimpleWsdl11Definition.class, registry);\n\t\t\t\tregisterBeans(wsdlLocation, "*.xsd", SimpleXsdSchema.class, registry);\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)\n\t\t\t\tthrows BeansException {\n\t\t}\n\n\t\t@Override\n\t\tpublic void setApplicationContext(ApplicationContext applicationContext)\n\t\t\t\tthrows BeansException {\n\t\t\tthis.applicationContext = applicationContext;\n\t\t}\n\n\t\tprivate void registerBeans(String location, String pattern, Class<?> type,\n\t\t\t\tBeanDefinitionRegistry registry) {\n\t\t\tResource[] resources = new Resource[] {};\n\t\t\ttry {\n\t\t\t\tresources = this.applicationContext\n\t\t\t\t\t\t.getResources(ensureTrailingSlash(location) + pattern);\n\t\t\t}\n\t\t\tcatch (IOException ignored) {\n\t\t\t}\n\t\t\tfor (Resource resource : resources) {\n\t\t\t\tRootBeanDefinition beanDefinition = new RootBeanDefinition(type);\n\t\t\t\tConstructorArgumentValues constructorArguments = new ConstructorArgumentValues();\n\t\t\t\tconstructorArguments.addIndexedArgumentValue(0, resource);\n\t\t\t\tbeanDefinition.setConstructorArgumentValues(constructorArguments);\n\n\t\t\t\tregistry.registerBeanDefinition(\n\t\t\t\t\t\tStringUtils.stripFilenameExtension(resource.getFilename()),\n\t\t\t\t\t\tbeanDefinition);\n\t\t\t}\n\t\t}\n\n\t\tprivate static String ensureTrailingSlash(String path) {\n\t\t\tif (!path.endsWith("/")) {\n\t\t\t\treturn path + "/";\n\t\t\t}\n\t\t\treturn path;\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.webservices;\n\nimport java.util.Map;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.web.servlet.ServletRegistrationBean;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.ws.config.annotation.EnableWs;\nimport org.springframework.ws.config.annotation.WsConfigurationSupport;\nimport org.springframework.ws.transport.http.MessageDispatcherServlet;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Web Services.\n *\n * @author Vedran Pavic\n * @author Stephane Nicoll\n * @since 1.4.0\n */\n@Configuration\n@ConditionalOnWebApplication(type = Type.SERVLET)\n@ConditionalOnClass(MessageDispatcherServlet.class)\n@ConditionalOnMissingBean(WsConfigurationSupport.class)\n@EnableConfigurationProperties(WebServicesProperties.class)\n@AutoConfigureAfter(ServletWebServerFactoryAutoConfiguration.class)\npublic class WebServicesAutoConfiguration {\n\n\tprivate final WebServicesProperties properties;\n\n\tpublic WebServicesAutoConfiguration(WebServicesProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\tpublic ServletRegistrationBean<MessageDispatcherServlet> messageDispatcherServlet(\n\t\t\tApplicationContext applicationContext) {\n\t\tMessageDispatcherServlet servlet = new MessageDispatcherServlet();\n\t\tservlet.setApplicationContext(applicationContext);\n\t\tString path = this.properties.getPath();\n\t\tString urlMapping = (path.endsWith("/") ? path + "*" : path + "/*");\n\t\tServletRegistrationBean<MessageDispatcherServlet> registration = new ServletRegistrationBean<>(\n\t\t\t\tservlet, urlMapping);\n\t\tWebServicesProperties.Servlet servletProperties = this.properties.getServlet();\n\t\tregistration.setLoadOnStartup(servletProperties.getLoadOnStartup());\n\t\tfor (Map.Entry<String, String> entry : servletProperties.getInit().entrySet()) {\n\t\t\tregistration.addInitParameter(entry.getKey(), entry.getValue());\n\t\t}\n\t\treturn registration;\n\t}\n\n\t@Configuration\n\t@EnableWs\n\tprotected static class WsConfiguration {\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
