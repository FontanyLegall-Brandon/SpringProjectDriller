{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -23,6 +23,7 @@ import io.micrometer.core.instrument.binder.jvm.JvmGcMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics;\n import io.micrometer.core.instrument.binder.jvm.JvmThreadMetrics;\n import io.micrometer.core.instrument.binder.logging.LogbackMetrics;\n+import io.micrometer.core.instrument.binder.system.FileDescriptorMetrics;\n import io.micrometer.core.instrument.binder.system.ProcessorMetrics;\n import io.micrometer.core.instrument.binder.system.UptimeMetrics;\n \n@@ -126,6 +127,13 @@ public class MetricsAutoConfiguration {\n \t\t\treturn new ProcessorMetrics();\n \t\t}\n \n+\t\t@Bean\n+\t\t@ConditionalOnProperty(name = "management.metrics.binders.fds.enabled", matchIfMissing = true)\n+\t\t@ConditionalOnMissingBean\n+\t\tpublic FileDescriptorMetrics fileDescriptorMetrics() {\n+\t\t\treturn new FileDescriptorMetrics();\n+\t\t}\n+\n \t}\n \n }\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics;\n\nimport io.micrometer.core.annotation.Timed;\nimport io.micrometer.core.instrument.Clock;\nimport io.micrometer.core.instrument.binder.jvm.ClassLoaderMetrics;\nimport io.micrometer.core.instrument.binder.jvm.JvmGcMetrics;\nimport io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics;\nimport io.micrometer.core.instrument.binder.jvm.JvmThreadMetrics;\nimport io.micrometer.core.instrument.binder.logging.LogbackMetrics;\nimport io.micrometer.core.instrument.binder.system.FileDescriptorMetrics;\nimport io.micrometer.core.instrument.binder.system.ProcessorMetrics;\nimport io.micrometer.core.instrument.binder.system.UptimeMetrics;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.Order;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Micrometer-based metrics.\n *\n * @author Jon Schneider\n * @author Stephane Nicoll\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass(Timed.class)\n@EnableConfigurationProperties(MetricsProperties.class)\npublic class MetricsAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic Clock micrometerClock() {\n\t\treturn Clock.SYSTEM;\n\t}\n\n\t@Bean\n\tpublic static CompositeMeterRegistryPostProcessor compositeMeterRegistryPostProcessor() {\n\t\treturn new CompositeMeterRegistryPostProcessor();\n\t}\n\n\t@Bean\n\tpublic static MeterRegistryPostProcessor meterRegistryPostProcessor(\n\t\t\tApplicationContext context) {\n\t\treturn new MeterRegistryPostProcessor(context);\n\t}\n\n\t@Bean\n\t@Order(0)\n\tpublic PropertiesMeterFilter propertiesMeterFilter(MetricsProperties properties) {\n\t\treturn new PropertiesMeterFilter(properties);\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(value = "management.metrics.binders.jvm.enabled", matchIfMissing = true)\n\tstatic class JvmMeterBindersConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic JvmGcMetrics jvmGcMetrics() {\n\t\t\treturn new JvmGcMetrics();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic JvmMemoryMetrics jvmMemoryMetrics() {\n\t\t\treturn new JvmMemoryMetrics();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic JvmThreadMetrics jvmThreadMetrics() {\n\t\t\treturn new JvmThreadMetrics();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic ClassLoaderMetrics classLoaderMetrics() {\n\t\t\treturn new ClassLoaderMetrics();\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class MeterBindersConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnClass(name = "ch.qos.logback.classic.Logger")\n\t\t@ConditionalOnMissingBean(LogbackMetrics.class)\n\t\t@ConditionalOnProperty(value = "management.metrics.binders.logback.enabled", matchIfMissing = true)\n\t\tpublic LogbackMetrics logbackMetrics() {\n\t\t\treturn new LogbackMetrics();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnProperty(value = "management.metrics.binders.uptime.enabled", matchIfMissing = true)\n\t\t@ConditionalOnMissingBean\n\t\tpublic UptimeMetrics uptimeMetrics() {\n\t\t\treturn new UptimeMetrics();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnProperty(value = "management.metrics.binders.processor.enabled", matchIfMissing = true)\n\t\t@ConditionalOnMissingBean\n\t\tpublic ProcessorMetrics processorMetrics() {\n\t\t\treturn new ProcessorMetrics();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnProperty(name = "management.metrics.binders.fds.enabled", matchIfMissing = true)\n\t\t@ConditionalOnMissingBean\n\t\tpublic FileDescriptorMetrics fileDescriptorMetrics() {\n\t\t\treturn new FileDescriptorMetrics();\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics;\n\nimport io.micrometer.core.annotation.Timed;\nimport io.micrometer.core.instrument.Clock;\nimport io.micrometer.core.instrument.binder.jvm.ClassLoaderMetrics;\nimport io.micrometer.core.instrument.binder.jvm.JvmGcMetrics;\nimport io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics;\nimport io.micrometer.core.instrument.binder.jvm.JvmThreadMetrics;\nimport io.micrometer.core.instrument.binder.logging.LogbackMetrics;\nimport io.micrometer.core.instrument.binder.system.ProcessorMetrics;\nimport io.micrometer.core.instrument.binder.system.UptimeMetrics;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.Order;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Micrometer-based metrics.\n *\n * @author Jon Schneider\n * @author Stephane Nicoll\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass(Timed.class)\n@EnableConfigurationProperties(MetricsProperties.class)\npublic class MetricsAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic Clock micrometerClock() {\n\t\treturn Clock.SYSTEM;\n\t}\n\n\t@Bean\n\tpublic static CompositeMeterRegistryPostProcessor compositeMeterRegistryPostProcessor() {\n\t\treturn new CompositeMeterRegistryPostProcessor();\n\t}\n\n\t@Bean\n\tpublic static MeterRegistryPostProcessor meterRegistryPostProcessor(\n\t\t\tApplicationContext context) {\n\t\treturn new MeterRegistryPostProcessor(context);\n\t}\n\n\t@Bean\n\t@Order(0)\n\tpublic PropertiesMeterFilter propertiesMeterFilter(MetricsProperties properties) {\n\t\treturn new PropertiesMeterFilter(properties);\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(value = "management.metrics.binders.jvm.enabled", matchIfMissing = true)\n\tstatic class JvmMeterBindersConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic JvmGcMetrics jvmGcMetrics() {\n\t\t\treturn new JvmGcMetrics();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic JvmMemoryMetrics jvmMemoryMetrics() {\n\t\t\treturn new JvmMemoryMetrics();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic JvmThreadMetrics jvmThreadMetrics() {\n\t\t\treturn new JvmThreadMetrics();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic ClassLoaderMetrics classLoaderMetrics() {\n\t\t\treturn new ClassLoaderMetrics();\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class MeterBindersConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnClass(name = "ch.qos.logback.classic.Logger")\n\t\t@ConditionalOnMissingBean(LogbackMetrics.class)\n\t\t@ConditionalOnProperty(value = "management.metrics.binders.logback.enabled", matchIfMissing = true)\n\t\tpublic LogbackMetrics logbackMetrics() {\n\t\t\treturn new LogbackMetrics();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnProperty(value = "management.metrics.binders.uptime.enabled", matchIfMissing = true)\n\t\t@ConditionalOnMissingBean\n\t\tpublic UptimeMetrics uptimeMetrics() {\n\t\t\treturn new UptimeMetrics();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnProperty(value = "management.metrics.binders.processor.enabled", matchIfMissing = true)\n\t\t@ConditionalOnMissingBean\n\t\tpublic ProcessorMetrics processorMetrics() {\n\t\t\treturn new ProcessorMetrics();\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
