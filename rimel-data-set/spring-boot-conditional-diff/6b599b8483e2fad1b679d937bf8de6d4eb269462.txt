@@ -0,0 +1,462 @@
+
+
+package org.springframework.boot.actuate.autoconfigure;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.URISyntaxException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Properties;
+import java.util.Set;
+
+import javax.annotation.PostConstruct;
+import javax.annotation.PreDestroy;
+
+import org.crsh.auth.AuthenticationPlugin;
+import org.crsh.plugin.CRaSHPlugin;
+import org.crsh.plugin.PluginContext;
+import org.crsh.plugin.PluginDiscovery;
+import org.crsh.plugin.PluginLifeCycle;
+import org.crsh.plugin.PropertyDescriptor;
+import org.crsh.plugin.ServiceLoaderDiscovery;
+import org.crsh.vfs.FS;
+import org.crsh.vfs.spi.AbstractFSDriver;
+import org.springframework.beans.factory.ListableBeanFactory;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.actuate.properties.CrshProperties;
+import org.springframework.boot.actuate.properties.CrshProperties.AuthenticationProperties;
+import org.springframework.boot.actuate.properties.CrshProperties.JaasAuthenticationProperties;
+import org.springframework.boot.actuate.properties.CrshProperties.KeyAuthenticationProperties;
+import org.springframework.boot.actuate.properties.CrshProperties.SimpleAuthenticationProperties;
+import org.springframework.boot.actuate.properties.CrshProperties.SpringAuthenticationProperties;
+import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.context.properties.EnableConfigurationProperties;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.core.SpringVersion;
+import org.springframework.core.io.Resource;
+import org.springframework.core.io.support.ResourcePatternResolver;
+import org.springframework.security.access.AccessDecisionManager;
+import org.springframework.security.access.AccessDeniedException;
+import org.springframework.security.access.SecurityConfig;
+import org.springframework.security.authentication.AuthenticationManager;
+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
+import org.springframework.security.core.Authentication;
+import org.springframework.security.core.AuthenticationException;
+import org.springframework.util.Assert;
+import org.springframework.util.ClassUtils;
+import org.springframework.util.StringUtils;
+
+
+@Configuration
+@ConditionalOnClass({ PluginLifeCycle.class })
+@EnableConfigurationProperties({ CrshProperties.class })
+@AutoConfigureAfter(SecurityAutoConfiguration.class)
+public class CrshAutoConfiguration {
+
+	@Autowired
+	private CrshProperties properties;
+	
+	
+	@Bean
+	@ConditionalOnExpression()
+	@ConditionalOnMissingBean({ AuthenticationProperties.class })
+	public AuthenticationProperties jaasAuthenticationProperties() {
+		return new JaasAuthenticationProperties();
+	}
+
+	@Bean
+	@ConditionalOnExpression()
+	@ConditionalOnMissingBean({ AuthenticationProperties.class })
+	public AuthenticationProperties keyAuthenticationProperties() {
+		return new KeyAuthenticationProperties();
+	}
+
+	@Bean
+	@ConditionalOnExpression()
+	@ConditionalOnMissingBean({ AuthenticationProperties.class })
+	public AuthenticationProperties simpleAuthenticationProperties() {
+		return new SimpleAuthenticationProperties();
+	}
+	
+	@Bean
+	@ConditionalOnExpression()
+	@ConditionalOnMissingBean({ AuthenticationProperties.class })
+	public AuthenticationProperties SpringAuthenticationProperties() {
+		return new SpringAuthenticationProperties();
+	}
+
+	@Bean
+	@ConditionalOnBean({ AuthenticationManager.class })
+	public CRaSHPlugin<?> shellAuthenticationManager() {
+		return new AuthenticationManagerAdapter();
+	}
+
+	@Bean
+	@ConditionalOnMissingBean({ PluginLifeCycle.class })
+	public PluginLifeCycle shellBootstrap() {
+		CrshBootstrap bs = new CrshBootstrap();
+		bs.setConfig(properties.mergeProperties(new Properties()));
+		return bs;
+	}
+
+
+	public static class CrshBootstrap extends PluginLifeCycle {
+		
+		@Autowired
+		private ListableBeanFactory beanFactory;
+		
+		@Autowired
+		private CrshProperties properties;
+
+		@Autowired
+		private ResourcePatternResolver resourceLoader;
+
+		
+		@PreDestroy
+		public void destroy() {
+			stop();
+		}
+
+		@PostConstruct
+		public void init() throws Exception {
+			FS commandFileSystem = createFileSystem(properties.getCommandPathPatterns());
+			FS confFileSystem = createFileSystem(properties.getConfigPathPatterns());
+
+			PluginDiscovery discovery = new BeanFactoryFilteringPluginDiscovery(resourceLoader.getClassLoader(),
+					beanFactory, properties.getDisabledPlugins());
+
+			PluginContext context = new PluginContext(discovery, createPluginContextAttributes(), 
+					commandFileSystem, confFileSystem,	resourceLoader.getClassLoader());
+
+			context.refresh();
+			start(context);
+		}
+
+		
+		protected FS createFileSystem(String[] pathPatterns) throws IOException, URISyntaxException {
+			Assert.notNull(pathPatterns);
+			FS cmdFS = new FS();
+			for (String pathPattern : pathPatterns) {
+				cmdFS.mount(new SimpleFileSystemDriver(new DirectoryHandle(pathPattern, resourceLoader)));
+			}
+			return cmdFS;
+		}
+		
+		protected Map<String, Object> createPluginContextAttributes() {
+			Map<String, Object> attributes = new HashMap<String, Object>();
+			String bootVersion = CrshAutoConfiguration.class.getPackage().getImplementationVersion();
+			if (bootVersion != null) {
+				attributes.put(, bootVersion);
+			}
+			attributes.put(, SpringVersion.getVersion());
+			if (beanFactory != null) {
+				attributes.put(, beanFactory);
+			}
+			return attributes;
+		}
+		
+	}
+	
+
+	@SuppressWarnings()
+	private static class AuthenticationManagerAdapter extends CRaSHPlugin<AuthenticationPlugin> implements
+			AuthenticationPlugin<String> {
+		
+		private static final PropertyDescriptor<String> ROLES = PropertyDescriptor.create(
+				, , );
+		
+	
+		@Autowired(required=false)
+		private AccessDecisionManager accessDecisionManager;
+		
+		@Autowired
+		private AuthenticationManager authenticationManager;
+		
+		private String[] roles = new String[] {  };
+		
+		
+		@Override
+		public boolean authenticate(String username, String password) throws Exception {
+			
+			Authentication token = new UsernamePasswordAuthenticationToken(username, password);
+			try {
+				token = authenticationManager.authenticate(token);
+			}
+			catch (AuthenticationException ae) {
+				return false;
+			}
+			
+			
+			if (accessDecisionManager != null && token.isAuthenticated() && roles != null) {
+				try {
+					accessDecisionManager.decide(token, this, SecurityConfig.createList(roles));
+				}
+				catch (AccessDeniedException e) {
+					return false;
+				}
+			}
+			return token.isAuthenticated();
+		}
+
+		@Override
+		public Class<String> getCredentialType() {
+			return String.class;
+		}
+
+		@Override
+		public AuthenticationPlugin<String> getImplementation() {
+			return this;
+		}
+		
+		@Override
+		public String getName() {
+			return ;
+		}
+
+		@Override
+		public void init() {
+			String rolesPropertyValue = getContext().getProperty(ROLES);
+			if (rolesPropertyValue != null) {
+				this.roles = StringUtils.commaDelimitedListToStringArray(rolesPropertyValue);
+			}
+		}
+
+		
+		@Override
+		protected Iterable<PropertyDescriptor<?>> createConfigurationCapabilities() {
+			return Arrays.<PropertyDescriptor<?>>asList(ROLES);
+		}
+		
+	}
+	
+	
+	private static class BeanFactoryFilteringPluginDiscovery extends ServiceLoaderDiscovery {
+
+		private ListableBeanFactory beanFactory;
+		
+		private String[] disabledPlugins;
+
+		
+		public BeanFactoryFilteringPluginDiscovery(ClassLoader classLoader, ListableBeanFactory beanFactory, 
+				String[] disabledPlugins)
+				throws NullPointerException {
+			super(classLoader);
+			this.beanFactory = beanFactory;
+			this.disabledPlugins = disabledPlugins;
+		}
+
+		
+		@Override
+		@SuppressWarnings()
+		public Iterable<CRaSHPlugin<?>> getPlugins() {
+			List<CRaSHPlugin<?>> plugins = new ArrayList<CRaSHPlugin<?>>();
+
+			for (CRaSHPlugin<?> p : super.getPlugins()) {
+				if (!shouldFilter(p)) {
+					plugins.add(p);
+				}
+			}
+
+			Collection<CRaSHPlugin> springPlugins = beanFactory.getBeansOfType(CRaSHPlugin.class).values();
+			for (CRaSHPlugin<?> p : springPlugins) {
+				if (!shouldFilter(p)) {
+					plugins.add(p);
+				}
+			}
+			
+			return plugins;
+		}
+		
+		
+		@SuppressWarnings()
+		protected boolean shouldFilter(CRaSHPlugin<?> plugin) {
+			Assert.notNull(plugin);
+			
+			Set<Class> classes = ClassUtils.getAllInterfacesAsSet(plugin);
+			classes.add(plugin.getClass());
+			
+			for (Class<?> clazz : classes) {
+				if (disabledPlugins != null && disabledPlugins.length > 0) {
+					for (String disabledPlugin : disabledPlugins) {
+						if (ClassUtils.getShortName(clazz).equalsIgnoreCase(disabledPlugin) 
+								|| ClassUtils.getQualifiedName(clazz).equalsIgnoreCase(disabledPlugin)) {
+							return true;
+						}
+					}
+				}
+			}
+			return false;
+		}
+		
+	}
+	
+
+	private static class SimpleFileSystemDriver extends AbstractFSDriver<ResourceHandle> {
+
+		private ResourceHandle root;
+
+
+		public SimpleFileSystemDriver(ResourceHandle handle) {
+			this.root = handle;
+		}
+
+		
+		@Override
+		public Iterable<ResourceHandle> children(ResourceHandle handle) throws IOException {
+			if (handle instanceof DirectoryHandle) {
+				return ((DirectoryHandle) handle).members();
+			}
+			return Collections.emptySet();
+		}
+
+		@Override
+		public long getLastModified(ResourceHandle handle) throws IOException {
+			if (handle instanceof FileHandle) {
+				return ((FileHandle) handle).getLastModified();
+			}
+			return -1;
+		}
+
+		@Override
+		public boolean isDir(ResourceHandle handle) throws IOException {
+			return handle instanceof DirectoryHandle;
+		}
+
+		@Override
+		public String name(ResourceHandle handle) throws IOException {
+			return handle.getName();
+		}
+
+		@Override
+		public Iterator<InputStream> open(ResourceHandle handle) throws IOException {
+			if (handle instanceof FileHandle) {
+				return Collections.singletonList(((FileHandle) handle).openStream()).iterator();
+			}
+			return Collections.<InputStream>emptyList().iterator();
+		}
+
+		@Override
+		public ResourceHandle root() throws IOException {
+			return root;
+		}
+
+	}
+	
+	
+	private static class DirectoryHandle extends ResourceHandle {
+
+		private ResourcePatternResolver resourceLoader;
+
+
+		public DirectoryHandle(String name, ResourcePatternResolver resourceLoader) {
+			super(name);
+			this.resourceLoader = resourceLoader;
+		}
+
+		
+		public List<ResourceHandle> members() throws IOException {
+			Resource[] resources = resourceLoader.getResources(getName());
+			List<ResourceHandle> files = new ArrayList<ResourceHandle>();
+			for (Resource resource : resources) {
+				if (!resource.getURL().getPath().endsWith()) {
+					files.add(new FileHandle(resource.getFilename(), resource));
+				}
+			}
+			return files;
+		}
+
+	}
+	
+
+	private static class FileHandle extends ResourceHandle {
+
+		private Resource resource;
+
+
+		public FileHandle(String name, Resource resource) {
+			super(name);
+			this.resource = resource;
+		}
+
+		
+		public InputStream openStream() throws IOException {
+			return this.resource.getInputStream();
+		}
+		
+		public long getLastModified() {
+			try {
+				return this.resource.lastModified();
+			}
+			catch (IOException e) {}
+			return -1;
+		}
+		
+	}
+	
+
+	private abstract static class ResourceHandle {
+
+		private String name;
+
+		
+		public ResourceHandle(String name) {
+			this.name = name;
+		}
+
+		
+		public String getName() {
+			return name;
+		}
+		
+	}
+	
+}

