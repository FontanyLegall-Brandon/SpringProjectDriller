@@ -23,18 +23,24 @@ import java.util.Set;
 import javax.sql.DataSource;
 
 import org.springframework.beans.factory.DisposableBean;
+import org.springframework.beans.factory.annotation.AnnotatedBeanDefinition;
+import org.springframework.beans.factory.config.BeanDefinition;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
-import org.springframework.boot.autoconfigure.condition.AllNestedConditions;
+import org.springframework.boot.autoconfigure.condition.ConditionOutcome;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.SpringBootCondition;
 import org.springframework.boot.autoconfigure.data.jpa.EntityManagerFactoryDependsOnPostProcessor;
 import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;
 import org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;
 import org.springframework.boot.devtools.autoconfigure.DevToolsDataSourceAutoConfiguration.DevToolsDataSourceCondition;
 import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.ConditionContext;
 import org.springframework.context.annotation.Conditional;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.ConfigurationCondition;
+import org.springframework.core.type.AnnotatedTypeMetadata;
 import org.springframework.jdbc.datasource.embedded.EmbeddedDatabase;
 import org.springframework.orm.jpa.AbstractEntityManagerFactoryBean;
 import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
@@ -109,20 +115,37 @@ public class DevToolsDataSourceAutoConfiguration {
 
 	}
 
-	static class DevToolsDataSourceCondition extends AllNestedConditions {
-
-		DevToolsDataSourceCondition() {
-			super(ConfigurationPhase.REGISTER_BEAN);
-		}
-
-		@ConditionalOnBean(DataSource.class)
-		static final class DataSourceBean {
+	static class DevToolsDataSourceCondition extends SpringBootCondition
+			implements ConfigurationCondition {
 
+		@Override
+		public ConfigurationPhase getConfigurationPhase() {
+			return ConfigurationPhase.REGISTER_BEAN;
 		}
 
-		@ConditionalOnBean(DataSourceProperties.class)
-		static final class DataSourcePropertiesBean {
-
+		@Override
+		public ConditionOutcome getMatchOutcome(ConditionContext context,
+				AnnotatedTypeMetadata metadata) {
+			String[] dataSourceBeanNames = context.getBeanFactory()
+					.getBeanNamesForType(DataSource.class);
+			if (dataSourceBeanNames.length != 1) {
+				return ConditionOutcome
+						.noMatch();
+			}
+			if (context.getBeanFactory()
+					.getBeanNamesForType(DataSourceProperties.class).length != 1) {
+				return ConditionOutcome.noMatch(
+						);
+			}
+			BeanDefinition dataSourceDefinition = context.getRegistry()
+					.getBeanDefinition(dataSourceBeanNames[0]);
+			if (dataSourceDefinition instanceof AnnotatedBeanDefinition
+					&& ((AnnotatedBeanDefinition) dataSourceDefinition)
+							.getFactoryMethodMetadata().getDeclaringClassName()
+							.startsWith(DataSourceAutoConfiguration.class.getName())) {
+				return ConditionOutcome.match();
+			}
+			return ConditionOutcome.noMatch();
 		}
 
 	}

