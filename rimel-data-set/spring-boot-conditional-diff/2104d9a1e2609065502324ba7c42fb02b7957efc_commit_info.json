{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerPropertiesAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerPropertiesAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -19,6 +19,8 @@ package org.springframework.boot.autoconfigure.web;\n import org.springframework.beans.BeansException;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.autoconfigure.condition.SearchStrategy;\n import org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainerFactory;\n import org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n@@ -38,13 +40,14 @@ import org.springframework.util.StringUtils;\n  */\n @Configuration\n @EnableConfigurationProperties\n+@ConditionalOnWebApplication\n public class ServerPropertiesAutoConfiguration implements ApplicationContextAware,\n \t\tEmbeddedServletContainerCustomizer {\n \n \tprivate ApplicationContext applicationContext;\n \n \t@Bean(name = "org.springframework.boot.autoconfigure.web.ServerProperties")\n-\t@ConditionalOnMissingBean\n+\t@ConditionalOnMissingBean(search = SearchStrategy.CURRENT)\n \tpublic ServerProperties serverProperties() {\n \t\treturn new ServerProperties();\n \t}\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainerFactory;\nimport org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.util.Assert;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} that configures the\n * {@link ConfigurableEmbeddedServletContainerFactory} from a {@link ServerProperties}\n * bean.\n * \n * @author Dave Syer\n */\n@Configuration\n@EnableConfigurationProperties\n@ConditionalOnWebApplication\npublic class ServerPropertiesAutoConfiguration implements ApplicationContextAware,\n\t\tEmbeddedServletContainerCustomizer {\n\n\tprivate ApplicationContext applicationContext;\n\n\t@Bean(name = "org.springframework.boot.autoconfigure.web.ServerProperties")\n\t@ConditionalOnMissingBean(search = SearchStrategy.CURRENT)\n\tpublic ServerProperties serverProperties() {\n\t\treturn new ServerProperties();\n\t}\n\n\t@Override\n\tpublic void setApplicationContext(ApplicationContext applicationContext)\n\t\t\tthrows BeansException {\n\t\tthis.applicationContext = applicationContext;\n\t}\n\n\t@Override\n\tpublic void customize(ConfigurableEmbeddedServletContainerFactory factory) {\n\t\tString[] serverPropertiesBeans = this.applicationContext\n\t\t\t\t.getBeanNamesForType(ServerProperties.class);\n\t\tAssert.state(\n\t\t\t\tserverPropertiesBeans.length == 1,\n\t\t\t\t"Multiple ServerProperties beans registered "\n\t\t\t\t\t\t+ StringUtils.arrayToCommaDelimitedString(serverPropertiesBeans));\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainerFactory;\nimport org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.util.Assert;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} that configures the\n * {@link ConfigurableEmbeddedServletContainerFactory} from a {@link ServerProperties}\n * bean.\n * \n * @author Dave Syer\n */\n@Configuration\n@EnableConfigurationProperties\npublic class ServerPropertiesAutoConfiguration implements ApplicationContextAware,\n\t\tEmbeddedServletContainerCustomizer {\n\n\tprivate ApplicationContext applicationContext;\n\n\t@Bean(name = "org.springframework.boot.autoconfigure.web.ServerProperties")\n\t@ConditionalOnMissingBean\n\tpublic ServerProperties serverProperties() {\n\t\treturn new ServerProperties();\n\t}\n\n\t@Override\n\tpublic void setApplicationContext(ApplicationContext applicationContext)\n\t\t\tthrows BeansException {\n\t\tthis.applicationContext = applicationContext;\n\t}\n\n\t@Override\n\tpublic void customize(ConfigurableEmbeddedServletContainerFactory factory) {\n\t\tString[] serverPropertiesBeans = this.applicationContext\n\t\t\t\t.getBeanNamesForType(ServerProperties.class);\n\t\tAssert.state(\n\t\t\t\tserverPropertiesBeans.length == 1,\n\t\t\t\t"Multiple ServerProperties beans registered "\n\t\t\t\t\t\t+ StringUtils.arrayToCommaDelimitedString(serverPropertiesBeans));\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
