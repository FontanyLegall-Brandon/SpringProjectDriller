{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/metadata/DataSourcePoolMetadataProvidersConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/metadata/DataSourcePoolMetadataProvidersConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -98,4 +98,25 @@ public class DataSourcePoolMetadataProvidersConfiguration {\n \n \t}\n \n+\t@Configuration\n+\t@ConditionalOnClass(org.apache.commons.dbcp2.BasicDataSource.class)\n+\tstatic class CommonsDbcp2PoolDataSourceMetadataProviderConfiguration {\n+\n+\t\t@Bean\n+\t\tpublic DataSourcePoolMetadataProvider commonsDbcp2PoolDataSourceMetadataProvider() {\n+\t\t\treturn new DataSourcePoolMetadataProvider() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic DataSourcePoolMetadata getDataSourcePoolMetadata(\n+\t\t\t\t\t\tDataSource dataSource) {\n+\t\t\t\t\tif (dataSource instanceof org.apache.commons.dbcp2.BasicDataSource) {\n+\t\t\t\t\t\treturn new CommonsDbcp2DataSourcePoolMetadata(\n+\t\t\t\t\t\t\t\t(org.apache.commons.dbcp2.BasicDataSource) dataSource);\n+\t\t\t\t\t}\n+\t\t\t\t\treturn null;\n+\t\t\t\t}\n+\t\t\t};\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jdbc.metadata;\n\nimport javax.sql.DataSource;\n\nimport com.zaxxer.hikari.HikariDataSource;\nimport org.apache.commons.dbcp.BasicDataSource;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Register the {@link DataSourcePoolMetadataProvider} instances for the supported data\n * sources.\n *\n * @author Stephane Nicoll\n * @since 1.2.0\n */\n@Configuration\npublic class DataSourcePoolMetadataProvidersConfiguration {\n\n\t@Configuration\n\t@ConditionalOnClass(org.apache.tomcat.jdbc.pool.DataSource.class)\n\tstatic class TomcatDataSourcePoolMetadataProviderConfiguration {\n\n\t\t@Bean\n\t\tpublic DataSourcePoolMetadataProvider tomcatPoolDataSourceMetadataProvider() {\n\t\t\treturn new DataSourcePoolMetadataProvider() {\n\t\t\t\t@Override\n\t\t\t\tpublic DataSourcePoolMetadata getDataSourcePoolMetadata(\n\t\t\t\t\t\tDataSource dataSource) {\n\t\t\t\t\tif (dataSource instanceof org.apache.tomcat.jdbc.pool.DataSource) {\n\t\t\t\t\t\treturn new TomcatDataSourcePoolMetadata(\n\t\t\t\t\t\t\t\t(org.apache.tomcat.jdbc.pool.DataSource) dataSource);\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(HikariDataSource.class)\n\tstatic class HikariPoolDataSourceMetadataProviderConfiguration {\n\n\t\t@Bean\n\t\tpublic DataSourcePoolMetadataProvider hikariPoolDataSourceMetadataProvider() {\n\t\t\treturn new DataSourcePoolMetadataProvider() {\n\t\t\t\t@Override\n\t\t\t\tpublic DataSourcePoolMetadata getDataSourcePoolMetadata(\n\t\t\t\t\t\tDataSource dataSource) {\n\t\t\t\t\tif (dataSource instanceof HikariDataSource) {\n\t\t\t\t\t\treturn new HikariDataSourcePoolMetadata(\n\t\t\t\t\t\t\t\t(HikariDataSource) dataSource);\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(BasicDataSource.class)\n\tstatic class CommonsDbcpPoolDataSourceMetadataProviderConfiguration {\n\n\t\t@Bean\n\t\tpublic DataSourcePoolMetadataProvider commonsDbcpPoolDataSourceMetadataProvider() {\n\t\t\treturn new DataSourcePoolMetadataProvider() {\n\t\t\t\t@Override\n\t\t\t\tpublic DataSourcePoolMetadata getDataSourcePoolMetadata(\n\t\t\t\t\t\tDataSource dataSource) {\n\t\t\t\t\tif (dataSource instanceof BasicDataSource) {\n\t\t\t\t\t\treturn new CommonsDbcpDataSourcePoolMetadata(\n\t\t\t\t\t\t\t\t(BasicDataSource) dataSource);\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(org.apache.commons.dbcp2.BasicDataSource.class)\n\tstatic class CommonsDbcp2PoolDataSourceMetadataProviderConfiguration {\n\n\t\t@Bean\n\t\tpublic DataSourcePoolMetadataProvider commonsDbcp2PoolDataSourceMetadataProvider() {\n\t\t\treturn new DataSourcePoolMetadataProvider() {\n\t\t\t\t@Override\n\t\t\t\tpublic DataSourcePoolMetadata getDataSourcePoolMetadata(\n\t\t\t\t\t\tDataSource dataSource) {\n\t\t\t\t\tif (dataSource instanceof org.apache.commons.dbcp2.BasicDataSource) {\n\t\t\t\t\t\treturn new CommonsDbcp2DataSourcePoolMetadata(\n\t\t\t\t\t\t\t\t(org.apache.commons.dbcp2.BasicDataSource) dataSource);\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jdbc.metadata;\n\nimport javax.sql.DataSource;\n\nimport com.zaxxer.hikari.HikariDataSource;\nimport org.apache.commons.dbcp.BasicDataSource;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Register the {@link DataSourcePoolMetadataProvider} instances for the supported data\n * sources.\n *\n * @author Stephane Nicoll\n * @since 1.2.0\n */\n@Configuration\npublic class DataSourcePoolMetadataProvidersConfiguration {\n\n\t@Configuration\n\t@ConditionalOnClass(org.apache.tomcat.jdbc.pool.DataSource.class)\n\tstatic class TomcatDataSourcePoolMetadataProviderConfiguration {\n\n\t\t@Bean\n\t\tpublic DataSourcePoolMetadataProvider tomcatPoolDataSourceMetadataProvider() {\n\t\t\treturn new DataSourcePoolMetadataProvider() {\n\t\t\t\t@Override\n\t\t\t\tpublic DataSourcePoolMetadata getDataSourcePoolMetadata(\n\t\t\t\t\t\tDataSource dataSource) {\n\t\t\t\t\tif (dataSource instanceof org.apache.tomcat.jdbc.pool.DataSource) {\n\t\t\t\t\t\treturn new TomcatDataSourcePoolMetadata(\n\t\t\t\t\t\t\t\t(org.apache.tomcat.jdbc.pool.DataSource) dataSource);\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(HikariDataSource.class)\n\tstatic class HikariPoolDataSourceMetadataProviderConfiguration {\n\n\t\t@Bean\n\t\tpublic DataSourcePoolMetadataProvider hikariPoolDataSourceMetadataProvider() {\n\t\t\treturn new DataSourcePoolMetadataProvider() {\n\t\t\t\t@Override\n\t\t\t\tpublic DataSourcePoolMetadata getDataSourcePoolMetadata(\n\t\t\t\t\t\tDataSource dataSource) {\n\t\t\t\t\tif (dataSource instanceof HikariDataSource) {\n\t\t\t\t\t\treturn new HikariDataSourcePoolMetadata(\n\t\t\t\t\t\t\t\t(HikariDataSource) dataSource);\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(BasicDataSource.class)\n\tstatic class CommonsDbcpPoolDataSourceMetadataProviderConfiguration {\n\n\t\t@Bean\n\t\tpublic DataSourcePoolMetadataProvider commonsDbcpPoolDataSourceMetadataProvider() {\n\t\t\treturn new DataSourcePoolMetadataProvider() {\n\t\t\t\t@Override\n\t\t\t\tpublic DataSourcePoolMetadata getDataSourcePoolMetadata(\n\t\t\t\t\t\tDataSource dataSource) {\n\t\t\t\t\tif (dataSource instanceof BasicDataSource) {\n\t\t\t\t\t\treturn new CommonsDbcpDataSourcePoolMetadata(\n\t\t\t\t\t\t\t\t(BasicDataSource) dataSource);\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
