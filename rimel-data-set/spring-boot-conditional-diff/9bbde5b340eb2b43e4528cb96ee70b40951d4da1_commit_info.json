{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -51,10 +51,15 @@ import org.springframework.data.couchbase.repository.support.IndexManager;\n @EnableConfigurationProperties(CouchbaseProperties.class)\n public class CouchbaseAutoConfiguration {\n \n-\t@Bean\n-\t@ConditionalOnBean(Validator.class)\n-\tpublic ValidatingCouchbaseEventListener validationEventListener(Validator validator) {\n-\t\treturn new ValidatingCouchbaseEventListener(validator);\n+\t@Configuration\n+\t@ConditionalOnClass(Validator.class)\n+\tpublic static class ValidationConfiguration {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnBean(Validator.class)\n+\t\tpublic ValidatingCouchbaseEventListener validationEventListener(Validator validator) {\n+\t\t\treturn new ValidatingCouchbaseEventListener(validator);\n+\t\t}\n \t}\n \n \t@Configuration\n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.couchbase;\n\nimport java.util.List;\n\nimport javax.validation.Validator;\n\nimport com.couchbase.client.java.CouchbaseBucket;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.couchbase.config.AbstractCouchbaseConfiguration;\nimport org.springframework.data.couchbase.core.CouchbaseTemplate;\nimport org.springframework.data.couchbase.core.mapping.event.ValidatingCouchbaseEventListener;\nimport org.springframework.data.couchbase.core.query.Consistency;\nimport org.springframework.data.couchbase.repository.support.IndexManager;\n\n/**\n * {@link EnableAutoConfiguration Auto-Configuration} for Couchbase.\n *\n * @author Eddú Meléndez\n * @author Stephane Nicoll\n * @since 1.4.0\n */\n@Configuration\n@ConditionalOnClass({ CouchbaseBucket.class, AbstractCouchbaseConfiguration.class })\n@Conditional(CouchbaseAutoConfiguration.CouchbaseCondition.class)\n@EnableConfigurationProperties(CouchbaseProperties.class)\npublic class CouchbaseAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnClass(Validator.class)\n\tpublic static class ValidationConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnBean(Validator.class)\n\t\tpublic ValidatingCouchbaseEventListener validationEventListener(Validator validator) {\n\t\t\treturn new ValidatingCouchbaseEventListener(validator);\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(AbstractCouchbaseConfiguration.class)\n\tpublic static class CouchbaseConfiguration extends AbstractCouchbaseConfiguration {\n\n\t\tprivate final CouchbaseProperties properties;\n\n\t\tpublic CouchbaseConfiguration(CouchbaseProperties properties) {\n\t\t\tthis.properties = properties;\n\t\t}\n\n\t\t@Override\n\t\tprotected List<String> getBootstrapHosts() {\n\t\t\treturn this.properties.getBootstrapHosts();\n\t\t}\n\n\t\t@Override\n\t\tprotected String getBucketName() {\n\t\t\treturn this.properties.getBucket().getName();\n\t\t}\n\n\t\t@Override\n\t\tprotected String getBucketPassword() {\n\t\t\treturn this.properties.getBucket().getPassword();\n\t\t}\n\n\t\t@Override\n\t\tprotected Consistency getDefaultConsistency() {\n\t\t\treturn this.properties.getConsistency();\n\t\t}\n\n\t\t@Override\n\t\t@ConditionalOnMissingBean(name = "couchbaseTemplate")\n\t\t@Bean(name = "couchbaseTemplate")\n\t\tpublic CouchbaseTemplate couchbaseTemplate() throws Exception {\n\t\t\treturn super.couchbaseTemplate();\n\t\t}\n\n\t\t@Override\n\t\t@ConditionalOnMissingBean(name = "couchbaseIndexManager")\n\t\t@Bean(name = "couchbaseIndexManager")\n\t\tpublic IndexManager indexManager() {\n\t\t\tif (this.properties.isAutoIndex()) {\n\t\t\t\treturn new IndexManager(true, true, true);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn new IndexManager(false, false, false);\n\t\t\t}\n\t\t}\n\n\t}\n\n\t/**\n\t * Determine if Couchbase should be configured. This happens if either the\n\t * user-configuration defines a couchbase configuration or if at least the bucket name\n\t * is specified.\n\t */\n\tstatic class CouchbaseCondition extends AnyNestedCondition {\n\n\t\tCouchbaseCondition() {\n\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n\t\t}\n\n\t\t@ConditionalOnProperty(prefix = "spring.data.couchbase.bucket", name = "name")\n\t\tstatic class BucketNameProperty {\n\t\t}\n\n\t\t@ConditionalOnBean(AbstractCouchbaseConfiguration.class)\n\t\tstatic class CouchbaseConfiguration {\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.couchbase;\n\nimport java.util.List;\n\nimport javax.validation.Validator;\n\nimport com.couchbase.client.java.CouchbaseBucket;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.couchbase.config.AbstractCouchbaseConfiguration;\nimport org.springframework.data.couchbase.core.CouchbaseTemplate;\nimport org.springframework.data.couchbase.core.mapping.event.ValidatingCouchbaseEventListener;\nimport org.springframework.data.couchbase.core.query.Consistency;\nimport org.springframework.data.couchbase.repository.support.IndexManager;\n\n/**\n * {@link EnableAutoConfiguration Auto-Configuration} for Couchbase.\n *\n * @author Eddú Meléndez\n * @author Stephane Nicoll\n * @since 1.4.0\n */\n@Configuration\n@ConditionalOnClass({ CouchbaseBucket.class, AbstractCouchbaseConfiguration.class })\n@Conditional(CouchbaseAutoConfiguration.CouchbaseCondition.class)\n@EnableConfigurationProperties(CouchbaseProperties.class)\npublic class CouchbaseAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnBean(Validator.class)\n\tpublic ValidatingCouchbaseEventListener validationEventListener(Validator validator) {\n\t\treturn new ValidatingCouchbaseEventListener(validator);\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(AbstractCouchbaseConfiguration.class)\n\tpublic static class CouchbaseConfiguration extends AbstractCouchbaseConfiguration {\n\n\t\tprivate final CouchbaseProperties properties;\n\n\t\tpublic CouchbaseConfiguration(CouchbaseProperties properties) {\n\t\t\tthis.properties = properties;\n\t\t}\n\n\t\t@Override\n\t\tprotected List<String> getBootstrapHosts() {\n\t\t\treturn this.properties.getBootstrapHosts();\n\t\t}\n\n\t\t@Override\n\t\tprotected String getBucketName() {\n\t\t\treturn this.properties.getBucket().getName();\n\t\t}\n\n\t\t@Override\n\t\tprotected String getBucketPassword() {\n\t\t\treturn this.properties.getBucket().getPassword();\n\t\t}\n\n\t\t@Override\n\t\tprotected Consistency getDefaultConsistency() {\n\t\t\treturn this.properties.getConsistency();\n\t\t}\n\n\t\t@Override\n\t\t@ConditionalOnMissingBean(name = "couchbaseTemplate")\n\t\t@Bean(name = "couchbaseTemplate")\n\t\tpublic CouchbaseTemplate couchbaseTemplate() throws Exception {\n\t\t\treturn super.couchbaseTemplate();\n\t\t}\n\n\t\t@Override\n\t\t@ConditionalOnMissingBean(name = "couchbaseIndexManager")\n\t\t@Bean(name = "couchbaseIndexManager")\n\t\tpublic IndexManager indexManager() {\n\t\t\tif (this.properties.isAutoIndex()) {\n\t\t\t\treturn new IndexManager(true, true, true);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn new IndexManager(false, false, false);\n\t\t\t}\n\t\t}\n\n\t}\n\n\t/**\n\t * Determine if Couchbase should be configured. This happens if either the\n\t * user-configuration defines a couchbase configuration or if at least the bucket name\n\t * is specified.\n\t */\n\tstatic class CouchbaseCondition extends AnyNestedCondition {\n\n\t\tCouchbaseCondition() {\n\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n\t\t}\n\n\t\t@ConditionalOnProperty(prefix = "spring.data.couchbase.bucket", name = "name")\n\t\tstatic class BucketNameProperty {\n\t\t}\n\n\t\t@ConditionalOnBean(AbstractCouchbaseConfiguration.class)\n\t\tstatic class CouchbaseConfiguration {\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
