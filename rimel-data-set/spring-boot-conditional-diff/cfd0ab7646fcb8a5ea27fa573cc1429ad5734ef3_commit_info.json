{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cloud/CloudAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cloud/CloudServiceConnectorsAutoConfiguration.java'), 'change_type': <ModificationType.RENAME: 3>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -20,7 +20,6 @@ import org.springframework.boot.autoconfigure.AutoConfigureOrder;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.cloud.Cloud;\n import org.springframework.cloud.app.ApplicationInstanceInfo;\n import org.springframework.cloud.config.java.CloudScan;\n@@ -31,28 +30,26 @@ import org.springframework.context.annotation.Profile;\n import org.springframework.core.Ordered;\n \n /**\n- * {@link EnableAutoConfiguration Auto-configuration} for Spring Cloud.\n+ * {@link EnableAutoConfiguration Auto-configuration} for Spring Cloud Service Connectors.\n  * <p>\n- * Activates when there is no bean of type {@link Cloud} is configured in the context, the\n- * {@link Cloud} type (this spring-cloud) is on the classpath, and the "cloud" profile is\n+ * Activates when there is no bean of type {@link Cloud} and the "cloud" profile is\n  * active.\n  * <p>\n  * Once in effect, the auto-configuration is the equivalent of adding the\n  * {@link CloudScan} annotation in one of the configuration file. Specifically, it adds a\n  * bean for each service bound to the application and one for\n- * {@link ApplicationInstanceInfo}\n+ * {@link ApplicationInstanceInfo}.\n  *\n  * @author Ramnivas Laddad\n  * @since 1.2.0\n  */\n @Configuration\n @Profile("cloud")\n-@AutoConfigureOrder(CloudAutoConfiguration.ORDER)\n+@AutoConfigureOrder(CloudServiceConnectorsAutoConfiguration.ORDER)\n @ConditionalOnClass(CloudScanConfiguration.class)\n @ConditionalOnMissingBean(Cloud.class)\n-@ConditionalOnProperty(prefix = "spring.cloud", name = "enabled", havingValue = "true", matchIfMissing = true)\n @Import(CloudScanConfiguration.class)\n-public class CloudAutoConfiguration {\n+public class CloudServiceConnectorsAutoConfiguration {\n \n \t// Cloud configuration needs to happen early (before data, mongo etc.)\n \tpublic static final int ORDER = Ordered.HIGHEST_PRECEDENCE + 20;\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.cloud;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureOrder;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.cloud.Cloud;\nimport org.springframework.cloud.app.ApplicationInstanceInfo;\nimport org.springframework.cloud.config.java.CloudScan;\nimport org.springframework.cloud.config.java.CloudScanConfiguration;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.Profile;\nimport org.springframework.core.Ordered;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Cloud Service Connectors.\n * <p>\n * Activates when there is no bean of type {@link Cloud} and the "cloud" profile is\n * active.\n * <p>\n * Once in effect, the auto-configuration is the equivalent of adding the\n * {@link CloudScan} annotation in one of the configuration file. Specifically, it adds a\n * bean for each service bound to the application and one for\n * {@link ApplicationInstanceInfo}.\n *\n * @author Ramnivas Laddad\n * @since 1.2.0\n */\n@Configuration\n@Profile("cloud")\n@AutoConfigureOrder(CloudServiceConnectorsAutoConfiguration.ORDER)\n@ConditionalOnClass(CloudScanConfiguration.class)\n@ConditionalOnMissingBean(Cloud.class)\n@Import(CloudScanConfiguration.class)\npublic class CloudServiceConnectorsAutoConfiguration {\n\n\t// Cloud configuration needs to happen early (before data, mongo etc.)\n\tpublic static final int ORDER = Ordered.HIGHEST_PRECEDENCE + 20;\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.cloud;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureOrder;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.cloud.Cloud;\nimport org.springframework.cloud.app.ApplicationInstanceInfo;\nimport org.springframework.cloud.config.java.CloudScan;\nimport org.springframework.cloud.config.java.CloudScanConfiguration;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.Profile;\nimport org.springframework.core.Ordered;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Cloud.\n * <p>\n * Activates when there is no bean of type {@link Cloud} is configured in the context, the\n * {@link Cloud} type (this spring-cloud) is on the classpath, and the "cloud" profile is\n * active.\n * <p>\n * Once in effect, the auto-configuration is the equivalent of adding the\n * {@link CloudScan} annotation in one of the configuration file. Specifically, it adds a\n * bean for each service bound to the application and one for\n * {@link ApplicationInstanceInfo}\n *\n * @author Ramnivas Laddad\n * @since 1.2.0\n */\n@Configuration\n@Profile("cloud")\n@AutoConfigureOrder(CloudAutoConfiguration.ORDER)\n@ConditionalOnClass(CloudScanConfiguration.class)\n@ConditionalOnMissingBean(Cloud.class)\n@ConditionalOnProperty(prefix = "spring.cloud", name = "enabled", havingValue = "true", matchIfMissing = true)\n@Import(CloudScanConfiguration.class)\npublic class CloudAutoConfiguration {\n\n\t// Cloud configuration needs to happen early (before data, mongo etc.)\n\tpublic static final int ORDER = Ordered.HIGHEST_PRECEDENCE + 20;\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
