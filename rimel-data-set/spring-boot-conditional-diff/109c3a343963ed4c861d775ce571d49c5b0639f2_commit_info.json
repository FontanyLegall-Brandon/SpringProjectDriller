{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/HttpEncodingAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2012-2014 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.web;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.Ordered;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.web.filter.CharacterEncodingFilter;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for configuring the\n+ * encoding to use in web applications.\n+ *\n+ * @author Stephane Nicoll\n+ * @since 1.2.0\n+ */\n+@Configuration\n+@EnableConfigurationProperties(HttpEncodingProperties.class)\n+@ConditionalOnClass(CharacterEncodingFilter.class)\n+@ConditionalOnProperty(prefix = "spring.http.encoding", value = "enabled", matchIfMissing = true)\n+public class HttpEncodingAutoConfiguration {\n+\n+\t@Autowired\n+\tprivate HttpEncodingProperties httpEncodingProperties;\n+\n+\t@ConditionalOnMissingBean\n+\t@Bean\n+\t@Order(Ordered.HIGHEST_PRECEDENCE)\n+\tpublic CharacterEncodingFilter characterEncodingFilter() {\n+\t\tCharacterEncodingFilter filter = new CharacterEncodingFilter();\n+\t\tfilter.setEncoding(httpEncodingProperties.getCharset().name());\n+\t\tfilter.setForceEncoding(httpEncodingProperties.isForce());\n+\t\treturn filter;\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.web.filter.CharacterEncodingFilter;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for configuring the\n * encoding to use in web applications.\n *\n * @author Stephane Nicoll\n * @since 1.2.0\n */\n@Configuration\n@EnableConfigurationProperties(HttpEncodingProperties.class)\n@ConditionalOnClass(CharacterEncodingFilter.class)\n@ConditionalOnProperty(prefix = "spring.http.encoding", value = "enabled", matchIfMissing = true)\npublic class HttpEncodingAutoConfiguration {\n\n\t@Autowired\n\tprivate HttpEncodingProperties httpEncodingProperties;\n\n\t@ConditionalOnMissingBean\n\t@Bean\n\t@Order(Ordered.HIGHEST_PRECEDENCE)\n\tpublic CharacterEncodingFilter characterEncodingFilter() {\n\t\tCharacterEncodingFilter filter = new CharacterEncodingFilter();\n\t\tfilter.setEncoding(httpEncodingProperties.getCharset().name());\n\t\tfilter.setForceEncoding(httpEncodingProperties.isForce());\n\t\treturn filter;\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
