{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -33,6 +33,7 @@ import org.springframework.http.codec.CodecConfigurer;\n import org.springframework.http.codec.json.Jackson2JsonDecoder;\n import org.springframework.http.codec.json.Jackson2JsonEncoder;\n import org.springframework.util.MimeType;\n+import org.springframework.web.reactive.function.client.WebClient;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for\n@@ -43,7 +44,7 @@ import org.springframework.util.MimeType;\n  * @since 2.0.0\n  */\n @Configuration(proxyBeanMethods = false)\n-@ConditionalOnClass(CodecConfigurer.class)\n+@ConditionalOnClass({ CodecConfigurer.class, WebClient.class })\n @AutoConfigureAfter(JacksonAutoConfiguration.class)\n public class CodecsAutoConfiguration {\n \n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.http.codec;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.http.HttpProperties;\nimport org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.web.codec.CodecCustomizer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.http.codec.CodecConfigurer;\nimport org.springframework.http.codec.json.Jackson2JsonDecoder;\nimport org.springframework.http.codec.json.Jackson2JsonEncoder;\nimport org.springframework.util.MimeType;\nimport org.springframework.web.reactive.function.client.WebClient;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for\n * {@link org.springframework.core.codec.Encoder Encoders} and\n * {@link org.springframework.core.codec.Decoder Decoders}.\n *\n * @author Brian Clozel\n * @since 2.0.0\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass({ CodecConfigurer.class, WebClient.class })\n@AutoConfigureAfter(JacksonAutoConfiguration.class)\npublic class CodecsAutoConfiguration {\n\n\tprivate static final MimeType[] EMPTY_MIME_TYPES = {};\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnClass(ObjectMapper.class)\n\tstatic class JacksonCodecConfiguration {\n\n\t\t@Bean\n\t\t@Order(0)\n\t\t@ConditionalOnBean(ObjectMapper.class)\n\t\tpublic CodecCustomizer jacksonCodecCustomizer(ObjectMapper objectMapper) {\n\t\t\treturn (configurer) -> {\n\t\t\t\tCodecConfigurer.DefaultCodecs defaults = configurer.defaultCodecs();\n\t\t\t\tdefaults.jackson2JsonDecoder(\n\t\t\t\t\t\tnew Jackson2JsonDecoder(objectMapper, EMPTY_MIME_TYPES));\n\t\t\t\tdefaults.jackson2JsonEncoder(\n\t\t\t\t\t\tnew Jackson2JsonEncoder(objectMapper, EMPTY_MIME_TYPES));\n\t\t\t};\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@EnableConfigurationProperties(HttpProperties.class)\n\tstatic class LoggingCodecConfiguration {\n\n\t\t@Bean\n\t\t@Order(0)\n\t\tpublic CodecCustomizer loggingCodecCustomizer(HttpProperties properties) {\n\t\t\treturn (configurer) -> configurer.defaultCodecs()\n\t\t\t\t\t.enableLoggingRequestDetails(properties.isLogRequestDetails());\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.http.codec;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.http.HttpProperties;\nimport org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.web.codec.CodecCustomizer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.http.codec.CodecConfigurer;\nimport org.springframework.http.codec.json.Jackson2JsonDecoder;\nimport org.springframework.http.codec.json.Jackson2JsonEncoder;\nimport org.springframework.util.MimeType;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for\n * {@link org.springframework.core.codec.Encoder Encoders} and\n * {@link org.springframework.core.codec.Decoder Decoders}.\n *\n * @author Brian Clozel\n * @since 2.0.0\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass(CodecConfigurer.class)\n@AutoConfigureAfter(JacksonAutoConfiguration.class)\npublic class CodecsAutoConfiguration {\n\n\tprivate static final MimeType[] EMPTY_MIME_TYPES = {};\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnClass(ObjectMapper.class)\n\tstatic class JacksonCodecConfiguration {\n\n\t\t@Bean\n\t\t@Order(0)\n\t\t@ConditionalOnBean(ObjectMapper.class)\n\t\tpublic CodecCustomizer jacksonCodecCustomizer(ObjectMapper objectMapper) {\n\t\t\treturn (configurer) -> {\n\t\t\t\tCodecConfigurer.DefaultCodecs defaults = configurer.defaultCodecs();\n\t\t\t\tdefaults.jackson2JsonDecoder(\n\t\t\t\t\t\tnew Jackson2JsonDecoder(objectMapper, EMPTY_MIME_TYPES));\n\t\t\t\tdefaults.jackson2JsonEncoder(\n\t\t\t\t\t\tnew Jackson2JsonEncoder(objectMapper, EMPTY_MIME_TYPES));\n\t\t\t};\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@EnableConfigurationProperties(HttpProperties.class)\n\tstatic class LoggingCodecConfiguration {\n\n\t\t@Bean\n\t\t@Order(0)\n\t\tpublic CodecCustomizer loggingCodecCustomizer(HttpProperties properties) {\n\t\t\treturn (configurer) -> configurer.defaultCodecs()\n\t\t\t\t\t.enableLoggingRequestDetails(properties.isLogRequestDetails());\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
