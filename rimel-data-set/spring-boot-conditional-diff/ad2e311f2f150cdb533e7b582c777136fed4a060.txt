@@ -0,0 +1,105 @@
+
+package org.springframework.bootstrap.context.annotation;
+
+import org.junit.Test;
+import org.springframework.context.annotation.AnnotationConfigApplicationContext;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Import;
+import org.springframework.context.annotation.ImportResource;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+
+public class OnClassConditionTests {
+
+	private AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();
+
+	@Test
+	public void testVanillaOnClassCondition() {
+		this.context.register(BasicConfiguration.class, FooConfiguration.class);
+		this.context.refresh();
+		assertTrue(this.context.containsBean());
+		assertEquals(, this.context.getBean());
+	}
+
+	@Test
+	public void testMissingOnClassCondition() {
+		this.context.register(MissingConfiguration.class, FooConfiguration.class);
+		this.context.refresh();
+		assertFalse(this.context.containsBean());
+		assertEquals(, this.context.getBean());
+	}
+
+	@Test
+	public void testOnClassConditionWithXml() {
+		this.context.register(BasicConfiguration.class, XmlConfiguration.class);
+		this.context.refresh();
+		assertTrue(this.context.containsBean());
+		assertEquals(, this.context.getBean());
+	}
+
+	@Test
+	public void testOnClassConditionWithCombinedXml() {
+		this.context.register(CombinedXmlConfiguration.class);
+		this.context.refresh();
+		assertTrue(this.context.containsBean());
+		assertEquals(, this.context.getBean());
+	}
+
+	@Configuration
+	@ConditionalOnClass(OnClassConditionTests.class)
+	protected static class BasicConfiguration {
+		@Bean
+		public String bar() {
+			return ;
+		}
+	}
+
+	@Configuration
+	@ConditionalOnClass(name = )
+	protected static class MissingConfiguration {
+		@Bean
+		public String bar() {
+			return ;
+		}
+	}
+
+	@Configuration
+	protected static class FooConfiguration {
+		@Bean
+		public String foo() {
+			return ;
+		}
+	}
+
+	@Configuration
+	@ImportResource()
+	protected static class XmlConfiguration {
+	}
+
+	@Configuration
+	@Import(BasicConfiguration.class)
+	@ImportResource()
+	protected static class CombinedXmlConfiguration {
+	}
+}

