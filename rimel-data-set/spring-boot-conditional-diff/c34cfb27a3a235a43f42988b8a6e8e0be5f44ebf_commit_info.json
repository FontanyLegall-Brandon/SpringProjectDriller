{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -36,8 +36,8 @@ import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n import org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration;\n import org.springframework.boot.context.embedded.FilterRegistrationBean;\n@@ -98,7 +98,7 @@ public class JerseyAutoConfiguration implements WebApplicationInitializer {\n \n \t@Bean\n \t@ConditionalOnMissingBean(name = "jerseyFilterRegistration")\n-\t@ConditionalOnExpression("\'${spring.jersey.type:servlet}\' == \'filter\'")\n+\t@ConditionalOnProperty(prefix = "spring.jersey", name = "type", havingValue = "filter")\n \tpublic FilterRegistrationBean jerseyFilterRegistration() {\n \t\tFilterRegistrationBean registration = new FilterRegistrationBean();\n \t\tregistration.setFilter(new ServletContainer());\n@@ -121,7 +121,7 @@ public class JerseyAutoConfiguration implements WebApplicationInitializer {\n \n \t@Bean\n \t@ConditionalOnMissingBean(name = "jerseyServletRegistration")\n-\t@ConditionalOnExpression("\'${spring.jersey.type:servlet}\' == \'servlet\'")\n+\t@ConditionalOnProperty(prefix = "spring.jersey", name = "type", havingValue = "servlet", matchIfMissing = true)\n \tpublic ServletRegistrationBean jerseyServletRegistration() {\n \t\tServletRegistrationBean registration = new ServletRegistrationBean(\n \t\t\t\tnew ServletContainer(), this.path);\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jersey;\n\nimport java.util.Arrays;\nimport java.util.EnumSet;\nimport java.util.Map.Entry;\n\nimport javax.annotation.PostConstruct;\nimport javax.servlet.DispatcherType;\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletException;\nimport javax.ws.rs.ApplicationPath;\n\nimport org.glassfish.jersey.CommonProperties;\nimport org.glassfish.jersey.server.ResourceConfig;\nimport org.glassfish.jersey.servlet.ServletContainer;\nimport org.glassfish.jersey.servlet.ServletProperties;\nimport org.springframework.beans.factory.ListableBeanFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration;\nimport org.springframework.boot.context.embedded.FilterRegistrationBean;\nimport org.springframework.boot.context.embedded.RegistrationBean;\nimport org.springframework.boot.context.embedded.ServletRegistrationBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.AnnotationUtils;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.web.WebApplicationInitializer;\nimport org.springframework.web.filter.RequestContextFilter;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Jersey.\n *\n * @author Dave Syer\n * @author Andy Wilkinson\n */\n@Configuration\n@ConditionalOnClass(name = {\n\t\t"org.glassfish.jersey.server.spring.SpringComponentProvider",\n\t\t"javax.servlet.ServletRegistration" })\n@ConditionalOnBean(type = "org.glassfish.jersey.server.ResourceConfig")\n@ConditionalOnWebApplication\n@Order(Ordered.HIGHEST_PRECEDENCE)\n@AutoConfigureBefore(DispatcherServletAutoConfiguration.class)\n@EnableConfigurationProperties(JerseyProperties.class)\npublic class JerseyAutoConfiguration implements WebApplicationInitializer {\n\n\t@Autowired\n\tprivate JerseyProperties jersey;\n\n\t@Autowired\n\tprivate ListableBeanFactory context;\n\n\t@Autowired\n\tprivate ResourceConfig config;\n\n\tprivate String path;\n\n\t@PostConstruct\n\tpublic void path() {\n\t\tthis.path = findPath(AnnotationUtils.findAnnotation(this.config.getClass(),\n\t\t\t\tApplicationPath.class));\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic FilterRegistrationBean requestContextFilter() {\n\t\tFilterRegistrationBean registration = new FilterRegistrationBean();\n\t\tregistration.setFilter(new RequestContextFilter());\n\t\tregistration.setOrder(this.jersey.getFilter().getOrder() - 1);\n\t\tregistration.setName("requestContextFilter");\n\t\treturn registration;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "jerseyFilterRegistration")\n\t@ConditionalOnProperty(prefix = "spring.jersey", name = "type", havingValue = "filter")\n\tpublic FilterRegistrationBean jerseyFilterRegistration() {\n\t\tFilterRegistrationBean registration = new FilterRegistrationBean();\n\t\tregistration.setFilter(new ServletContainer());\n\t\tregistration.setUrlPatterns(Arrays.asList(this.path));\n\t\tregistration.setOrder(this.jersey.getFilter().getOrder());\n\t\tregistration.addInitParameter(ServletProperties.FILTER_CONTEXT_PATH,\n\t\t\t\tstripPattern(this.path));\n\t\taddInitParameters(registration);\n\t\tregistration.setName("jerseyFilter");\n\t\tregistration.setDispatcherTypes(EnumSet.allOf(DispatcherType.class));\n\t\treturn registration;\n\t}\n\n\tprivate String stripPattern(String path) {\n\t\tif (path.endsWith("/*")) {\n\t\t\tpath = path.substring(0, path.lastIndexOf("/*"));\n\t\t}\n\t\treturn path;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "jerseyServletRegistration")\n\t@ConditionalOnProperty(prefix = "spring.jersey", name = "type", havingValue = "servlet", matchIfMissing = true)\n\tpublic ServletRegistrationBean jerseyServletRegistration() {\n\t\tServletRegistrationBean registration = new ServletRegistrationBean(\n\t\t\t\tnew ServletContainer(), this.path);\n\t\taddInitParameters(registration);\n\t\tregistration.setName("jerseyServlet");\n\t\treturn registration;\n\t}\n\n\tprivate void addInitParameters(RegistrationBean registration) {\n\t\tClass<? extends ResourceConfig> configType = this.config.getClass();\n\t\tregistration.addInitParameter(ServletProperties.JAXRS_APPLICATION_CLASS,\n\t\t\t\tconfigType.getName());\n\t\tregistration.addInitParameter(CommonProperties.METAINF_SERVICES_LOOKUP_DISABLE,\n\t\t\t\t"true");\n\t\tfor (Entry<String, String> entry : this.jersey.getInit().entrySet()) {\n\t\t\tregistration.addInitParameter(entry.getKey(), entry.getValue());\n\t\t}\n\t}\n\n\t@Override\n\tpublic void onStartup(ServletContext servletContext) throws ServletException {\n\t\t// We need to switch *off* the Jersey WebApplicationInitializer because it\n\t\t// will try and register a ContextLoaderListener which we don\'t need\n\t\tservletContext.setInitParameter("contextConfigLocation", "<NONE>");\n\t}\n\n\tprivate static String findPath(ApplicationPath annotation) {\n\t\t// Jersey doesn\'t like to be the default servlet, so map to /* as a fallback\n\t\tif (annotation == null) {\n\t\t\treturn "/*";\n\t\t}\n\t\tString path = annotation.value();\n\t\tif (!path.startsWith("/")) {\n\t\t\tpath = "/" + path;\n\t\t}\n\t\treturn path.equals("/") ? "/*" : path + "/*";\n\t}\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jersey;\n\nimport java.util.Arrays;\nimport java.util.EnumSet;\nimport java.util.Map.Entry;\n\nimport javax.annotation.PostConstruct;\nimport javax.servlet.DispatcherType;\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletException;\nimport javax.ws.rs.ApplicationPath;\n\nimport org.glassfish.jersey.CommonProperties;\nimport org.glassfish.jersey.server.ResourceConfig;\nimport org.glassfish.jersey.servlet.ServletContainer;\nimport org.glassfish.jersey.servlet.ServletProperties;\nimport org.springframework.beans.factory.ListableBeanFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration;\nimport org.springframework.boot.context.embedded.FilterRegistrationBean;\nimport org.springframework.boot.context.embedded.RegistrationBean;\nimport org.springframework.boot.context.embedded.ServletRegistrationBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.AnnotationUtils;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.web.WebApplicationInitializer;\nimport org.springframework.web.filter.RequestContextFilter;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Jersey.\n *\n * @author Dave Syer\n * @author Andy Wilkinson\n */\n@Configuration\n@ConditionalOnClass(name = {\n\t\t"org.glassfish.jersey.server.spring.SpringComponentProvider",\n\t\t"javax.servlet.ServletRegistration" })\n@ConditionalOnBean(type = "org.glassfish.jersey.server.ResourceConfig")\n@ConditionalOnWebApplication\n@Order(Ordered.HIGHEST_PRECEDENCE)\n@AutoConfigureBefore(DispatcherServletAutoConfiguration.class)\n@EnableConfigurationProperties(JerseyProperties.class)\npublic class JerseyAutoConfiguration implements WebApplicationInitializer {\n\n\t@Autowired\n\tprivate JerseyProperties jersey;\n\n\t@Autowired\n\tprivate ListableBeanFactory context;\n\n\t@Autowired\n\tprivate ResourceConfig config;\n\n\tprivate String path;\n\n\t@PostConstruct\n\tpublic void path() {\n\t\tthis.path = findPath(AnnotationUtils.findAnnotation(this.config.getClass(),\n\t\t\t\tApplicationPath.class));\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic FilterRegistrationBean requestContextFilter() {\n\t\tFilterRegistrationBean registration = new FilterRegistrationBean();\n\t\tregistration.setFilter(new RequestContextFilter());\n\t\tregistration.setOrder(this.jersey.getFilter().getOrder() - 1);\n\t\tregistration.setName("requestContextFilter");\n\t\treturn registration;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "jerseyFilterRegistration")\n\t@ConditionalOnExpression("\'${spring.jersey.type:servlet}\' == \'filter\'")\n\tpublic FilterRegistrationBean jerseyFilterRegistration() {\n\t\tFilterRegistrationBean registration = new FilterRegistrationBean();\n\t\tregistration.setFilter(new ServletContainer());\n\t\tregistration.setUrlPatterns(Arrays.asList(this.path));\n\t\tregistration.setOrder(this.jersey.getFilter().getOrder());\n\t\tregistration.addInitParameter(ServletProperties.FILTER_CONTEXT_PATH,\n\t\t\t\tstripPattern(this.path));\n\t\taddInitParameters(registration);\n\t\tregistration.setName("jerseyFilter");\n\t\tregistration.setDispatcherTypes(EnumSet.allOf(DispatcherType.class));\n\t\treturn registration;\n\t}\n\n\tprivate String stripPattern(String path) {\n\t\tif (path.endsWith("/*")) {\n\t\t\tpath = path.substring(0, path.lastIndexOf("/*"));\n\t\t}\n\t\treturn path;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "jerseyServletRegistration")\n\t@ConditionalOnExpression("\'${spring.jersey.type:servlet}\' == \'servlet\'")\n\tpublic ServletRegistrationBean jerseyServletRegistration() {\n\t\tServletRegistrationBean registration = new ServletRegistrationBean(\n\t\t\t\tnew ServletContainer(), this.path);\n\t\taddInitParameters(registration);\n\t\tregistration.setName("jerseyServlet");\n\t\treturn registration;\n\t}\n\n\tprivate void addInitParameters(RegistrationBean registration) {\n\t\tClass<? extends ResourceConfig> configType = this.config.getClass();\n\t\tregistration.addInitParameter(ServletProperties.JAXRS_APPLICATION_CLASS,\n\t\t\t\tconfigType.getName());\n\t\tregistration.addInitParameter(CommonProperties.METAINF_SERVICES_LOOKUP_DISABLE,\n\t\t\t\t"true");\n\t\tfor (Entry<String, String> entry : this.jersey.getInit().entrySet()) {\n\t\t\tregistration.addInitParameter(entry.getKey(), entry.getValue());\n\t\t}\n\t}\n\n\t@Override\n\tpublic void onStartup(ServletContext servletContext) throws ServletException {\n\t\t// We need to switch *off* the Jersey WebApplicationInitializer because it\n\t\t// will try and register a ContextLoaderListener which we don\'t need\n\t\tservletContext.setInitParameter("contextConfigLocation", "<NONE>");\n\t}\n\n\tprivate static String findPath(ApplicationPath annotation) {\n\t\t// Jersey doesn\'t like to be the default servlet, so map to /* as a fallback\n\t\tif (annotation == null) {\n\t\t\treturn "/*";\n\t\t}\n\t\tString path = annotation.value();\n\t\tif (!path.startsWith("/")) {\n\t\t\tpath = "/" + path;\n\t\t}\n\t\treturn path.equals("/") ? "/*" : path + "/*";\n\t}\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
