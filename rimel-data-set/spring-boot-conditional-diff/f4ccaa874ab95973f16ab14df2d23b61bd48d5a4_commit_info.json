{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/HttpMessageConvertersAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/HttpMessageConvertersAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -23,15 +23,18 @@ import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration;\n import org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Import;\n import org.springframework.http.converter.HttpMessageConverter;\n+import org.springframework.http.converter.json.GsonHttpMessageConverter;\n import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.gson.Gson;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for {@link HttpMessageConverter}s.\n@@ -40,10 +43,11 @@ import com.fasterxml.jackson.databind.ObjectMapper;\n  * @author Christian Dupuis\n  * @author Piotr Maj\n  * @author Oliver Gierke\n+ * @author David Liu\n  */\n @Configuration\n @ConditionalOnClass(HttpMessageConverter.class)\n-@Import(JacksonAutoConfiguration.class)\n+@Import({ JacksonAutoConfiguration.class, GsonAutoConfiguration.class })\n public class HttpMessageConvertersAutoConfiguration {\n \n \t@Autowired(required = false)\n@@ -75,4 +79,18 @@ public class HttpMessageConvertersAutoConfiguration {\n \n \t}\n \n+\t@Configuration\n+\t@ConditionalOnClass(Gson.class)\n+\tprotected static class GsonConfiguration {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean\n+\t\tpublic GsonHttpMessageConverter gsonHttpMessageConverter(Gson gson) {\n+\t\t\tGsonHttpMessageConverter converter = new GsonHttpMessageConverter();\n+\t\t\tconverter.setGson(gson);\n+\t\t\treturn converter;\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web;\n\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.http.converter.json.GsonHttpMessageConverter;\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.google.gson.Gson;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link HttpMessageConverter}s.\n *\n * @author Dave Syer\n * @author Christian Dupuis\n * @author Piotr Maj\n * @author Oliver Gierke\n * @author David Liu\n */\n@Configuration\n@ConditionalOnClass(HttpMessageConverter.class)\n@Import({ JacksonAutoConfiguration.class, GsonAutoConfiguration.class })\npublic class HttpMessageConvertersAutoConfiguration {\n\n\t@Autowired(required = false)\n\tprivate final List<HttpMessageConverter<?>> converters = Collections.emptyList();\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic HttpMessageConverters messageConverters() {\n\t\treturn new HttpMessageConverters(this.converters);\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(ObjectMapper.class)\n\t@EnableConfigurationProperties(HttpMapperProperties.class)\n\tprotected static class ObjectMappers {\n\n\t\t@Autowired\n\t\tprivate HttpMapperProperties properties = new HttpMapperProperties();\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter(\n\t\t\t\tObjectMapper objectMapper) {\n\t\t\tMappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();\n\t\t\tconverter.setObjectMapper(objectMapper);\n\t\t\tconverter.setPrettyPrint(this.properties.isJsonPrettyPrint());\n\t\t\treturn converter;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(Gson.class)\n\tprotected static class GsonConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic GsonHttpMessageConverter gsonHttpMessageConverter(Gson gson) {\n\t\t\tGsonHttpMessageConverter converter = new GsonHttpMessageConverter();\n\t\t\tconverter.setGson(gson);\n\t\t\treturn converter;\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web;\n\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link HttpMessageConverter}s.\n *\n * @author Dave Syer\n * @author Christian Dupuis\n * @author Piotr Maj\n * @author Oliver Gierke\n */\n@Configuration\n@ConditionalOnClass(HttpMessageConverter.class)\n@Import(JacksonAutoConfiguration.class)\npublic class HttpMessageConvertersAutoConfiguration {\n\n\t@Autowired(required = false)\n\tprivate final List<HttpMessageConverter<?>> converters = Collections.emptyList();\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic HttpMessageConverters messageConverters() {\n\t\treturn new HttpMessageConverters(this.converters);\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(ObjectMapper.class)\n\t@EnableConfigurationProperties(HttpMapperProperties.class)\n\tprotected static class ObjectMappers {\n\n\t\t@Autowired\n\t\tprivate HttpMapperProperties properties = new HttpMapperProperties();\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter(\n\t\t\t\tObjectMapper objectMapper) {\n\t\t\tMappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();\n\t\t\tconverter.setObjectMapper(objectMapper);\n\t\t\tconverter.setPrettyPrint(this.properties.isJsonPrettyPrint());\n\t\t\treturn converter;\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
