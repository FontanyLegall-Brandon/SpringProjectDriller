{'_old_path': None, '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientConfigurations.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2012-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.elasticsearch.rest;\n+\n+import org.apache.http.HttpHost;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.Credentials;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.impl.client.BasicCredentialsProvider;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestClientBuilder;\n+import org.elasticsearch.client.RestHighLevelClient;\n+\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.PropertyMapper;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Elasticsearch rest client infrastructure configurations.\n+ *\n+ * @author Brian Clozel\n+ * @author Stephane Nicoll\n+ */\n+class RestClientConfigurations {\n+\n+\t@Configuration\n+\tstatic class RestClientBuilderConfiguration {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean\n+\t\tRestClientBuilder restClientBuilder(RestClientProperties properties,\n+\t\t\t\tObjectProvider<RestClientBuilderCustomizer> builderCustomizers) {\n+\t\t\tHttpHost[] hosts = properties.getUris().stream().map(HttpHost::create).toArray(HttpHost[]::new);\n+\t\t\tRestClientBuilder builder = RestClient.builder(hosts);\n+\t\t\tPropertyMapper map = PropertyMapper.get();\n+\t\t\tmap.from(properties::getUsername).whenHasText().to((username) -> {\n+\t\t\t\tCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n+\t\t\t\tCredentials credentials = new UsernamePasswordCredentials(properties.getUsername(),\n+\t\t\t\t\t\tproperties.getPassword());\n+\t\t\t\tcredentialsProvider.setCredentials(AuthScope.ANY, credentials);\n+\t\t\t\tbuilder.setHttpClientConfigCallback(\n+\t\t\t\t\t\t(httpClientBuilder) -> httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider));\n+\t\t\t});\n+\t\t\tbuilderCustomizers.orderedStream().forEach((customizer) -> customizer.customize(builder));\n+\t\t\treturn builder;\n+\t\t}\n+\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnClass(RestHighLevelClient.class)\n+\tstatic class RestHighLevelClientConfiguration {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean\n+\t\tRestHighLevelClient restHighLevelClient(RestClientBuilder restClientBuilder) {\n+\t\t\treturn new RestHighLevelClient(restClientBuilder);\n+\t\t}\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean\n+\t\tRestClient restClient(RestClientBuilder builder, ObjectProvider<RestHighLevelClient> restHighLevelClient) {\n+\t\t\tRestHighLevelClient client = restHighLevelClient.getIfUnique();\n+\t\t\tif (client != null) {\n+\t\t\t\treturn client.getLowLevelClient();\n+\t\t\t}\n+\t\t\treturn builder.build();\n+\t\t}\n+\n+\t}\n+\n+\t@Configuration\n+\tstatic class RestClientFallbackConfiguration {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean\n+\t\tRestClient restClient(RestClientBuilder builder) {\n+\t\t\treturn builder.build();\n+\t\t}\n+\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.elasticsearch.rest;\n\nimport org.apache.http.HttpHost;\nimport org.apache.http.auth.AuthScope;\nimport org.apache.http.auth.Credentials;\nimport org.apache.http.auth.UsernamePasswordCredentials;\nimport org.apache.http.client.CredentialsProvider;\nimport org.apache.http.impl.client.BasicCredentialsProvider;\nimport org.elasticsearch.client.RestClient;\nimport org.elasticsearch.client.RestClientBuilder;\nimport org.elasticsearch.client.RestHighLevelClient;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.PropertyMapper;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Elasticsearch rest client infrastructure configurations.\n *\n * @author Brian Clozel\n * @author Stephane Nicoll\n */\nclass RestClientConfigurations {\n\n\t@Configuration\n\tstatic class RestClientBuilderConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tRestClientBuilder restClientBuilder(RestClientProperties properties,\n\t\t\t\tObjectProvider<RestClientBuilderCustomizer> builderCustomizers) {\n\t\t\tHttpHost[] hosts = properties.getUris().stream().map(HttpHost::create).toArray(HttpHost[]::new);\n\t\t\tRestClientBuilder builder = RestClient.builder(hosts);\n\t\t\tPropertyMapper map = PropertyMapper.get();\n\t\t\tmap.from(properties::getUsername).whenHasText().to((username) -> {\n\t\t\t\tCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n\t\t\t\tCredentials credentials = new UsernamePasswordCredentials(properties.getUsername(),\n\t\t\t\t\t\tproperties.getPassword());\n\t\t\t\tcredentialsProvider.setCredentials(AuthScope.ANY, credentials);\n\t\t\t\tbuilder.setHttpClientConfigCallback(\n\t\t\t\t\t\t(httpClientBuilder) -> httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider));\n\t\t\t});\n\t\t\tbuilderCustomizers.orderedStream().forEach((customizer) -> customizer.customize(builder));\n\t\t\treturn builder;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(RestHighLevelClient.class)\n\tstatic class RestHighLevelClientConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tRestHighLevelClient restHighLevelClient(RestClientBuilder restClientBuilder) {\n\t\t\treturn new RestHighLevelClient(restClientBuilder);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tRestClient restClient(RestClientBuilder builder, ObjectProvider<RestHighLevelClient> restHighLevelClient) {\n\t\t\tRestHighLevelClient client = restHighLevelClient.getIfUnique();\n\t\t\tif (client != null) {\n\t\t\t\treturn client.getLowLevelClient();\n\t\t\t}\n\t\t\treturn builder.build();\n\t\t}\n\n\t}\n\n\t@Configuration\n\tstatic class RestClientFallbackConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tRestClient restClient(RestClientBuilder builder) {\n\t\t\treturn builder.build();\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
