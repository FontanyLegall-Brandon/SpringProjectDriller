{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/AuthenticationManagerConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/AuthenticationManagerConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -21,20 +21,13 @@ import java.util.UUID;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n \n-import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n-import org.springframework.beans.factory.SmartInitializingSingleton;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.context.ApplicationContext;\n-import org.springframework.context.ApplicationListener;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.core.annotation.Order;\n-import org.springframework.security.authentication.AuthenticationEventPublisher;\n import org.springframework.security.authentication.AuthenticationManager;\n import org.springframework.security.authentication.AuthenticationProvider;\n-import org.springframework.security.authentication.ProviderManager;\n import org.springframework.security.config.annotation.ObjectPostProcessor;\n import org.springframework.security.core.userdetails.User;\n import org.springframework.security.core.userdetails.UserDetailsService;\n@@ -52,6 +45,8 @@ import org.springframework.security.provisioning.InMemoryUserDetailsManager;\n  */\n @Configuration\n @ConditionalOnBean(ObjectPostProcessor.class)\n+@ConditionalOnMissingBean({ AuthenticationManager.class, AuthenticationProvider.class,\n+\t\tUserDetailsService.class })\n @Order(0)\n public class AuthenticationManagerConfiguration {\n \n@@ -59,8 +54,6 @@ public class AuthenticationManagerConfiguration {\n \t\t\t.getLog(AuthenticationManagerConfiguration.class);\n \n \t@Bean\n-\t@ConditionalOnMissingBean({ AuthenticationManager.class, AuthenticationProvider.class,\n-\t\t\tUserDetailsService.class })\n \tpublic InMemoryUserDetailsManager inMemoryUserDetailsManager() throws Exception {\n \t\tString password = UUID.randomUUID().toString();\n \t\tlogger.info(String.format("%n%nUsing default security password: %s%n", password));\n@@ -68,42 +61,4 @@ public class AuthenticationManagerConfiguration {\n \t\t\t\tUser.withUsername("user").password(password).roles().build());\n \t}\n \n-\t@Bean\n-\tpublic AuthenticationManagerConfigurationListener authenticationManagerConfigurationListener() {\n-\t\treturn new AuthenticationManagerConfigurationListener();\n-\t}\n-\n-\t/**\n-\t * {@link ApplicationListener} to autowire the {@link AuthenticationEventPublisher}\n-\t * into the {@link AuthenticationManager}.\n-\t */\n-\tprotected static class AuthenticationManagerConfigurationListener\n-\t\t\timplements SmartInitializingSingleton {\n-\n-\t\t@Autowired\n-\t\tprivate AuthenticationEventPublisher eventPublisher;\n-\n-\t\t@Autowired\n-\t\tprivate ApplicationContext context;\n-\n-\t\t@Override\n-\t\tpublic void afterSingletonsInstantiated() {\n-\t\t\ttry {\n-\t\t\t\tconfigureAuthenticationManager(\n-\t\t\t\t\t\tthis.context.getBean(AuthenticationManager.class));\n-\t\t\t}\n-\t\t\tcatch (NoSuchBeanDefinitionException ex) {\n-\t\t\t\t// Ignore\n-\t\t\t}\n-\t\t}\n-\n-\t\tprivate void configureAuthenticationManager(AuthenticationManager manager) {\n-\t\t\tif (manager instanceof ProviderManager) {\n-\t\t\t\t((ProviderManager) manager)\n-\t\t\t\t\t\t.setAuthenticationEventPublisher(this.eventPublisher);\n-\t\t\t}\n-\t\t}\n-\n-\t}\n-\n }\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security;\n\nimport java.util.UUID;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.AuthenticationProvider;\nimport org.springframework.security.config.annotation.ObjectPostProcessor;\nimport org.springframework.security.core.userdetails.User;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.provisioning.InMemoryUserDetailsManager;\n\n/**\n * Configuration for a Spring Security in-memory {@link AuthenticationManager}. Adds an\n * {@link InMemoryUserDetailsManager} with a default user and generated password. This can\n * be disabled by providing a bean of type {@link AuthenticationManager},\n * {@link AuthenticationProvider} or {@link UserDetailsService}.\n *\n * @author Dave Syer\n * @author Rob Winch\n * @author Madhura Bhave\n */\n@Configuration\n@ConditionalOnBean(ObjectPostProcessor.class)\n@ConditionalOnMissingBean({ AuthenticationManager.class, AuthenticationProvider.class,\n\t\tUserDetailsService.class })\n@Order(0)\npublic class AuthenticationManagerConfiguration {\n\n\tprivate static final Log logger = LogFactory\n\t\t\t.getLog(AuthenticationManagerConfiguration.class);\n\n\t@Bean\n\tpublic InMemoryUserDetailsManager inMemoryUserDetailsManager() throws Exception {\n\t\tString password = UUID.randomUUID().toString();\n\t\tlogger.info(String.format("%n%nUsing default security password: %s%n", password));\n\t\treturn new InMemoryUserDetailsManager(\n\t\t\t\tUser.withUsername("user").password(password).roles().build());\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security;\n\nimport java.util.UUID;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport org.springframework.beans.factory.NoSuchBeanDefinitionException;\nimport org.springframework.beans.factory.SmartInitializingSingleton;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationListener;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.security.authentication.AuthenticationEventPublisher;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.AuthenticationProvider;\nimport org.springframework.security.authentication.ProviderManager;\nimport org.springframework.security.config.annotation.ObjectPostProcessor;\nimport org.springframework.security.core.userdetails.User;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.provisioning.InMemoryUserDetailsManager;\n\n/**\n * Configuration for a Spring Security in-memory {@link AuthenticationManager}. Adds an\n * {@link InMemoryUserDetailsManager} with a default user and generated password. This can\n * be disabled by providing a bean of type {@link AuthenticationManager},\n * {@link AuthenticationProvider} or {@link UserDetailsService}.\n *\n * @author Dave Syer\n * @author Rob Winch\n * @author Madhura Bhave\n */\n@Configuration\n@ConditionalOnBean(ObjectPostProcessor.class)\n@Order(0)\npublic class AuthenticationManagerConfiguration {\n\n\tprivate static final Log logger = LogFactory\n\t\t\t.getLog(AuthenticationManagerConfiguration.class);\n\n\t@Bean\n\t@ConditionalOnMissingBean({ AuthenticationManager.class, AuthenticationProvider.class,\n\t\t\tUserDetailsService.class })\n\tpublic InMemoryUserDetailsManager inMemoryUserDetailsManager() throws Exception {\n\t\tString password = UUID.randomUUID().toString();\n\t\tlogger.info(String.format("%n%nUsing default security password: %s%n", password));\n\t\treturn new InMemoryUserDetailsManager(\n\t\t\t\tUser.withUsername("user").password(password).roles().build());\n\t}\n\n\t@Bean\n\tpublic AuthenticationManagerConfigurationListener authenticationManagerConfigurationListener() {\n\t\treturn new AuthenticationManagerConfigurationListener();\n\t}\n\n\t/**\n\t * {@link ApplicationListener} to autowire the {@link AuthenticationEventPublisher}\n\t * into the {@link AuthenticationManager}.\n\t */\n\tprotected static class AuthenticationManagerConfigurationListener\n\t\t\timplements SmartInitializingSingleton {\n\n\t\t@Autowired\n\t\tprivate AuthenticationEventPublisher eventPublisher;\n\n\t\t@Autowired\n\t\tprivate ApplicationContext context;\n\n\t\t@Override\n\t\tpublic void afterSingletonsInstantiated() {\n\t\t\ttry {\n\t\t\t\tconfigureAuthenticationManager(\n\t\t\t\t\t\tthis.context.getBean(AuthenticationManager.class));\n\t\t\t}\n\t\t\tcatch (NoSuchBeanDefinitionException ex) {\n\t\t\t\t// Ignore\n\t\t\t}\n\t\t}\n\n\t\tprivate void configureAuthenticationManager(AuthenticationManager manager) {\n\t\t\tif (manager instanceof ProviderManager) {\n\t\t\t\t((ProviderManager) manager)\n\t\t\t\t\t\t.setAuthenticationEventPublisher(this.eventPublisher);\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
