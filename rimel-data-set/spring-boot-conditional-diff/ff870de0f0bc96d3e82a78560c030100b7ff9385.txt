@@ -16,6 +16,8 @@
 
 package org.springframework.boot.autoconfigure.jms;
 
+import java.util.Arrays;
+
 import javax.jms.ConnectionFactory;
 import javax.naming.NamingException;
 
@@ -25,6 +27,7 @@ import org.springframework.boot.autoconfigure.condition.ConditionalOnJndi;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.core.annotation.AnnotationUtils;
 import org.springframework.jndi.JndiLocatorDelegate;
 
 /**
@@ -36,12 +39,26 @@ import org.springframework.jndi.JndiLocatorDelegate;
 @Configuration
 @AutoConfigureBefore(JmsAutoConfiguration.class)
 @ConditionalOnMissingBean(ConnectionFactory.class)
-@ConditionalOnJndi()
+@ConditionalOnJndi({ ,  })
 public class JndiConnectionFactoryAutoConfiguration {
 
 	@Bean
 	public ConnectionFactory connectionFactory() throws NamingException {
-		return new JndiLocatorDelegate().lookup(, ConnectionFactory.class);
+		for (String name : getJndiLocations()) {
+			try {
+				return new JndiLocatorDelegate().lookup(name, ConnectionFactory.class);
+			}
+			catch (NamingException ex) {
+				
+			}
+		}
+		throw new IllegalStateException(
+				
+						+ Arrays.asList(getJndiLocations()));
+	}
+
+	private String[] getJndiLocations() {
+		return AnnotationUtils.getAnnotation(getClass(), ConditionalOnJndi.class).value();
 	}
 
 }

