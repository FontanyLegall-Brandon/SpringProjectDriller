@@ -0,0 +1,81 @@
+
+
+package org.springframework.boot.devtools.env;
+
+import org.junit.After;
+import org.junit.Test;
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
+import org.springframework.context.ConfigurableApplicationContext;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+
+public class DevToolPropertiesIntegrationTests {
+
+	private ConfigurableApplicationContext context;
+
+	@After
+	public void cleanup() {
+		if (this.context != null) {
+			this.context.close();
+		}
+	}
+
+	@Test
+	public void classPropertyConditionIsAffectedByDevToolProperties() {
+		SpringApplication application = new SpringApplication(
+				ClassConditionConfiguration.class);
+		application.setWebEnvironment(false);
+		this.context = application.run();
+		this.context.getBean(ClassConditionConfiguration.class);
+	}
+
+	@Test
+	public void beanMethodPropertyConditionIsAffectedByDevToolProperties() {
+		SpringApplication application = new SpringApplication(
+				BeanConditionConfiguration.class);
+		application.setWebEnvironment(false);
+		this.context = application.run();
+		this.context.getBean(MyBean.class);
+	}
+
+	@Configuration
+	@ConditionalOnProperty()
+	static class ClassConditionConfiguration {
+
+	}
+
+	@Configuration
+	static class BeanConditionConfiguration {
+
+		@Bean
+		@ConditionalOnProperty()
+		public MyBean myBean() {
+			return new MyBean();
+		}
+	}
+
+	static class MyBean {
+
+	}
+
+}

