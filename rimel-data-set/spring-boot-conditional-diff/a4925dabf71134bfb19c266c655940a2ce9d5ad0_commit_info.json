{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/JndiDataSourceAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2012-2014 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.jdbc;\n+\n+import javax.sql.DataSource;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for a JNDI located\n+ * {@link DataSource}.\n+ *\n+ * @author Phillip Webb\n+ * @since 1.2.0\n+ */\n+@Configuration\n+@AutoConfigureBefore(DataSourceAutoConfiguration.class)\n+@ConditionalOnClass(DataSource.class)\n+@ConditionalOnProperty(prefix = DataSourceProperties.PREFIX, name = "jndi-name")\n+@EnableConfigurationProperties(DataSourceProperties.class)\n+public class JndiDataSourceAutoConfiguration {\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic DataSource dataSource(DataSourceProperties properties) {\n+\t\tJndiDataSourceLookup dataSourceLookup = new JndiDataSourceLookup();\n+\t\treturn dataSourceLookup.getDataSource(properties.getJndiName());\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jdbc;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for a JNDI located\n * {@link DataSource}.\n *\n * @author Phillip Webb\n * @since 1.2.0\n */\n@Configuration\n@AutoConfigureBefore(DataSourceAutoConfiguration.class)\n@ConditionalOnClass(DataSource.class)\n@ConditionalOnProperty(prefix = DataSourceProperties.PREFIX, name = "jndi-name")\n@EnableConfigurationProperties(DataSourceProperties.class)\npublic class JndiDataSourceAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic DataSource dataSource(DataSourceProperties properties) {\n\t\tJndiDataSourceLookup dataSourceLookup = new JndiDataSourceLookup();\n\t\treturn dataSourceLookup.getDataSource(properties.getJndiName());\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
