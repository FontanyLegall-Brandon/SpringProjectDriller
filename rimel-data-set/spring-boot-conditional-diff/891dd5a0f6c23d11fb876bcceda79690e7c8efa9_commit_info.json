{'_old_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ConditionalOnEnablednHealthIndicator.java'), '_new_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ConditionalOnEnablednHealthIndicator.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,6 +16,7 @@\n \n package org.springframework.boot.actuate.autoconfigure;\n \n+import java.lang.annotation.Documented;\n import java.lang.annotation.ElementType;\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n@@ -33,9 +34,10 @@ import org.springframework.context.annotation.Conditional;\n  * @author Stephane Nicoll\n  * @since 1.3.0\n  */\n-@Conditional(OnEnabledHealthIndicatorCondition.class)\n @Retention(RetentionPolicy.RUNTIME)\n-@Target({ElementType.TYPE, ElementType.METHOD})\n+@Target({ ElementType.TYPE, ElementType.METHOD })\n+@Documented\n+@Conditional(OnEnabledHealthIndicatorCondition.class)\n public @interface ConditionalOnEnablednHealthIndicator {\n \n \t/**\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\nimport org.springframework.context.annotation.Conditional;\n\n/**\n * {@link Conditional} that checks whether or not a default health indicator is enabled.\n * Matches if the value of the {@code management.health.<name>.enabled} property is\n * {@code true}. Otherwise , matches if the value of the\n * {@code management.health.defaults.enabled} property is {@code true} or if it is not\n * configured.\n *\n * @author Stephane Nicoll\n * @since 1.3.0\n */\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ ElementType.TYPE, ElementType.METHOD })\n@Documented\n@Conditional(OnEnabledHealthIndicatorCondition.class)\npublic @interface ConditionalOnEnablednHealthIndicator {\n\n\t/**\n\t * The name of the health indicator.\n\t * @return the name of the health indicator\n\t */\n\tString value();\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\nimport org.springframework.context.annotation.Conditional;\n\n/**\n * {@link Conditional} that checks whether or not a default health indicator is enabled.\n * Matches if the value of the {@code management.health.<name>.enabled} property is\n * {@code true}. Otherwise , matches if the value of the\n * {@code management.health.defaults.enabled} property is {@code true} or if it is not\n * configured.\n *\n * @author Stephane Nicoll\n * @since 1.3.0\n */\n@Conditional(OnEnabledHealthIndicatorCondition.class)\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.TYPE, ElementType.METHOD})\npublic @interface ConditionalOnEnablednHealthIndicator {\n\n\t/**\n\t * The name of the health indicator.\n\t * @return the name of the health indicator\n\t */\n\tString value();\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
