{'_old_path': None, '_new_path': PosixPath('spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/batch/BatchAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2012-2013 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.bootstrap.autoconfigure.batch;\n+\n+import org.springframework.batch.core.launch.JobLauncher;\n+import org.springframework.bootstrap.CommandLineRunner;\n+import org.springframework.bootstrap.context.annotation.ConditionalOnClass;\n+import org.springframework.bootstrap.context.annotation.ConditionalOnMissingBean;\n+import org.springframework.bootstrap.context.annotation.EnableAutoConfiguration;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for Spring Batch.\n+ * \n+ * @author Dave Syer\n+ */\n+@Configuration\n+@ConditionalOnClass({ JobLauncher.class })\n+public class BatchAutoConfiguration {\n+\n+\t@Bean\n+\t// Harmless to always include this, but maybe could make it conditional as well\n+\tpublic BatchDatabaseInitializer batchDatabaseInitializer() {\n+\t\treturn new BatchDatabaseInitializer();\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean({ CommandLineRunner.class })\n+\tpublic JobLauncherCommandLineRunner jobLauncherCommandLineRunner() {\n+\t\treturn new JobLauncherCommandLineRunner();\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.bootstrap.autoconfigure.batch;\n\nimport org.springframework.batch.core.launch.JobLauncher;\nimport org.springframework.bootstrap.CommandLineRunner;\nimport org.springframework.bootstrap.context.annotation.ConditionalOnClass;\nimport org.springframework.bootstrap.context.annotation.ConditionalOnMissingBean;\nimport org.springframework.bootstrap.context.annotation.EnableAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Batch.\n * \n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnClass({ JobLauncher.class })\npublic class BatchAutoConfiguration {\n\n\t@Bean\n\t// Harmless to always include this, but maybe could make it conditional as well\n\tpublic BatchDatabaseInitializer batchDatabaseInitializer() {\n\t\treturn new BatchDatabaseInitializer();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean({ CommandLineRunner.class })\n\tpublic JobLauncherCommandLineRunner jobLauncherCommandLineRunner() {\n\t\treturn new JobLauncherCommandLineRunner();\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
