{'_old_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnPropertyTests.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnPropertyTests.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -17,23 +17,31 @@\n package org.springframework.boot.autoconfigure.condition;\n \n import org.junit.After;\n+import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n import org.springframework.boot.test.EnvironmentTestUtils;\n import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n+import static org.hamcrest.Matchers.containsString;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n+import static org.junit.internal.matchers.ThrowableMessageMatcher.hasMessage;\n \n /**\n  * Tests for {@link ConditionalOnProperty}.\n  *\n  * @author Maciej Walkowiak\n  * @author Stephane Nicoll\n+ * @author Phillip Webb\n  */\n public class ConditionalOnPropertyTests {\n \n+\t@Rule\n+\tpublic ExpectedException thrown = ExpectedException.none();\n+\n \tprivate AnnotationConfigApplicationContext context;\n \n \t@After\n@@ -45,29 +53,28 @@ public class ConditionalOnPropertyTests {\n \n \t@Test\n \tpublic void allPropertiesAreDefined() {\n-\t\tload(MultiplePropertiesRequiredConfiguration.class,\n-\t\t\t\t"property1=value1", "property2=value2");\n+\t\tload(MultiplePropertiesRequiredConfiguration.class, "property1=value1",\n+\t\t\t\t"property2=value2");\n \t\tassertTrue(this.context.containsBean("foo"));\n \t}\n \n \t@Test\n \tpublic void notAllPropertiesAreDefined() {\n-\t\tload(MultiplePropertiesRequiredConfiguration.class,\n-\t\t\t\t"property1=value1");\n+\t\tload(MultiplePropertiesRequiredConfiguration.class, "property1=value1");\n \t\tassertFalse(this.context.containsBean("foo"));\n \t}\n \n \t@Test\n \tpublic void propertyValueEqualsFalse() {\n-\t\tload(MultiplePropertiesRequiredConfiguration.class,\n-\t\t\t\t"property1=false", "property2=value2");\n+\t\tload(MultiplePropertiesRequiredConfiguration.class, "property1=false",\n+\t\t\t\t"property2=value2");\n \t\tassertFalse(this.context.containsBean("foo"));\n \t}\n \n \t@Test\n \tpublic void propertyValueEqualsFALSE() {\n-\t\tload(MultiplePropertiesRequiredConfiguration.class,\n-\t\t\t\t"property1=FALSE", "property2=value2");\n+\t\tload(MultiplePropertiesRequiredConfiguration.class, "property1=FALSE",\n+\t\t\t\t"property2=value2");\n \t\tassertFalse(this.context.containsBean("foo"));\n \t}\n \n@@ -87,12 +94,12 @@ public class ConditionalOnPropertyTests {\n \n \t@Test\n \tpublic void nonRelaxedName() throws Exception {\n-\t\tload(NonRelaxedPropertiesRequiredConfiguration.class,\n-\t\t\t\t"theRelaxedProperty=value1");\n+\t\tload(NonRelaxedPropertiesRequiredConfiguration.class, "theRelaxedProperty=value1");\n \t\tassertFalse(this.context.containsBean("foo"));\n \t}\n \n-\t@Test // Enabled by default\n+\t@Test\n+\t// Enabled by default\n \tpublic void enabledIfNotConfiguredOtherwise() {\n \t\tload(EnabledIfNotConfiguredOtherwiseConfig.class);\n \t\tassertTrue(this.context.containsBean("foo"));\n@@ -110,7 +117,8 @@ public class ConditionalOnPropertyTests {\n \t\tassertFalse(this.context.containsBean("foo"));\n \t}\n \n-\t@Test // Disabled by default\n+\t@Test\n+\t// Disabled by default\n \tpublic void disableIfNotConfiguredOtherwise() {\n \t\tload(DisabledIfNotConfiguredOtherwiseConfig.class);\n \t\tassertFalse(this.context.containsBean("foo"));\n@@ -184,7 +192,8 @@ public class ConditionalOnPropertyTests {\n \n \t@Test\n \tpublic void multiValuesAllSet() {\n-\t\tload(MultiValuesConfig.class, "simple.my-property:bar", "simple.my-another-property:bar");\n+\t\tload(MultiValuesConfig.class, "simple.my-property:bar",\n+\t\t\t\t"simple.my-another-property:bar");\n \t\tassertTrue(this.context.containsBean("foo"));\n \t}\n \n@@ -194,6 +203,28 @@ public class ConditionalOnPropertyTests {\n \t\tassertFalse(this.context.containsBean("foo"));\n \t}\n \n+\t@Test\n+\tpublic void usingValueAttribute() throws Exception {\n+\t\tload(ValueAttribute.class, "some.property");\n+\t\tassertTrue(this.context.containsBean("foo"));\n+\t}\n+\n+\t@Test\n+\tpublic void nameOrValueMustBeSpecified() throws Exception {\n+\t\tthis.thrown.expect(IllegalStateException.class);\n+\t\tthis.thrown.expectCause(hasMessage(containsString("The name or "\n+\t\t\t\t+ "value attribute of @ConditionalOnProperty must be specified")));\n+\t\tload(NoNameOrValueAttribute.class, "some.property");\n+\t}\n+\n+\t@Test\n+\tpublic void nameAndValueMustNotBeSpecified() throws Exception {\n+\t\tthis.thrown.expect(IllegalStateException.class);\n+\t\tthis.thrown.expectCause(hasMessage(containsString("The name and "\n+\t\t\t\t+ "value attributes of @ConditionalOnProperty are exclusive")));\n+\t\tload(NameAndValueAttribute.class, "some.property");\n+\t}\n+\n \tprivate void load(Class<?> config, String... environment) {\n \t\tthis.context = new AnnotationConfigApplicationContext();\n \t\tEnvironmentTestUtils.addEnvironment(this.context, environment);\n@@ -201,9 +232,8 @@ public class ConditionalOnPropertyTests {\n \t\tthis.context.refresh();\n \t}\n \n-\n \t@Configuration\n-\t@ConditionalOnProperty({ "property1", "property2" })\n+\t@ConditionalOnProperty(name = { "property1", "property2" })\n \tprotected static class MultiplePropertiesRequiredConfiguration {\n \n \t\t@Bean\n@@ -214,7 +244,7 @@ public class ConditionalOnPropertyTests {\n \t}\n \n \t@Configuration\n-\t@ConditionalOnProperty(prefix = "spring.", value = "the-relaxed-property")\n+\t@ConditionalOnProperty(prefix = "spring.", name = "the-relaxed-property")\n \tprotected static class RelaxedPropertiesRequiredConfiguration {\n \n \t\t@Bean\n@@ -225,7 +255,7 @@ public class ConditionalOnPropertyTests {\n \t}\n \n \t@Configuration\n-\t@ConditionalOnProperty(prefix = "spring", value = "property")\n+\t@ConditionalOnProperty(prefix = "spring", name = "property")\n \tprotected static class RelaxedPropertiesRequiredConfigurationWithShortPrefix {\n \n \t\t@Bean\n@@ -236,7 +266,7 @@ public class ConditionalOnPropertyTests {\n \t}\n \n \t@Configuration\n-\t@ConditionalOnProperty(value = "the-relaxed-property", relaxedNames = false)\n+\t@ConditionalOnProperty(name = "the-relaxed-property", relaxedNames = false)\n \tprotected static class NonRelaxedPropertiesRequiredConfiguration {\n \n \t\t@Bean\n@@ -246,8 +276,9 @@ public class ConditionalOnPropertyTests {\n \n \t}\n \n-\t@Configuration // ${simple.myProperty:true}\n-\t@ConditionalOnProperty(prefix = "simple", value = "my-property", match = "true", defaultMatch = true)\n+\t@Configuration\n+\t// i.e ${simple.myProperty:true}\n+\t@ConditionalOnProperty(prefix = "simple", name = "my-property", havingValue = "true", matchIfMissing = true)\n \tstatic class EnabledIfNotConfiguredOtherwiseConfig {\n \n \t\t@Bean\n@@ -257,8 +288,9 @@ public class ConditionalOnPropertyTests {\n \n \t}\n \n-\t@Configuration // ${simple.myProperty:false}\n-\t@ConditionalOnProperty(prefix = "simple", value = "my-property", match = "true", defaultMatch = false)\n+\t@Configuration\n+\t// i.e ${simple.myProperty:false}\n+\t@ConditionalOnProperty(prefix = "simple", name = "my-property", havingValue = "true", matchIfMissing = false)\n \tstatic class DisabledIfNotConfiguredOtherwiseConfig {\n \n \t\t@Bean\n@@ -269,7 +301,7 @@ public class ConditionalOnPropertyTests {\n \t}\n \n \t@Configuration\n-\t@ConditionalOnProperty(prefix = "simple", value = "my-property", match = "bar")\n+\t@ConditionalOnProperty(prefix = "simple", name = "my-property", havingValue = "bar")\n \tstatic class SimpleValueConfig {\n \n \t\t@Bean\n@@ -280,7 +312,7 @@ public class ConditionalOnPropertyTests {\n \t}\n \n \t@Configuration\n-\t@ConditionalOnProperty(value = "simple.myProperty", match = "bar", defaultMatch = true)\n+\t@ConditionalOnProperty(name = "simple.myProperty", havingValue = "bar", matchIfMissing = true)\n \tstatic class DefaultValueConfig {\n \n \t\t@Bean\n@@ -291,7 +323,7 @@ public class ConditionalOnPropertyTests {\n \t}\n \n \t@Configuration\n-\t@ConditionalOnProperty(prefix = "simple", value = "my-property", match = "bar")\n+\t@ConditionalOnProperty(prefix = "simple", name = "my-property", havingValue = "bar")\n \tstatic class PrefixValueConfig {\n \n \t\t@Bean\n@@ -302,7 +334,7 @@ public class ConditionalOnPropertyTests {\n \t}\n \n \t@Configuration\n-\t@ConditionalOnProperty(prefix = "simple", value = "my-property", match = "bar", relaxedNames = false)\n+\t@ConditionalOnProperty(prefix = "simple", name = "my-property", havingValue = "bar", relaxedNames = false)\n \tstatic class StrictNameConfig {\n \n \t\t@Bean\n@@ -313,7 +345,8 @@ public class ConditionalOnPropertyTests {\n \t}\n \n \t@Configuration\n-\t@ConditionalOnProperty(prefix = "simple", value = {"my-property", "my-another-property"}, match = "bar")\n+\t@ConditionalOnProperty(prefix = "simple", name = { "my-property",\n+\t\t\t"my-another-property" }, havingValue = "bar")\n \tstatic class MultiValuesConfig {\n \n \t\t@Bean\n@@ -323,4 +356,36 @@ public class ConditionalOnPropertyTests {\n \n \t}\n \n+\t@Configuration\n+\t@ConditionalOnProperty("some.property")\n+\tprotected static class ValueAttribute {\n+\n+\t\t@Bean\n+\t\tpublic String foo() {\n+\t\t\treturn "foo";\n+\t\t}\n+\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnProperty\n+\tprotected static class NoNameOrValueAttribute {\n+\n+\t\t@Bean\n+\t\tpublic String foo() {\n+\t\t\treturn "foo";\n+\t\t}\n+\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnProperty(value = "x", name = "y")\n+\tprotected static class NameAndValueAttribute {\n+\n+\t\t@Bean\n+\t\tpublic String foo() {\n+\t\t\treturn "foo";\n+\t\t}\n+\n+\t}\n }\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport org.junit.After;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExpectedException;\nimport org.springframework.boot.test.EnvironmentTestUtils;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport static org.hamcrest.Matchers.containsString;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.internal.matchers.ThrowableMessageMatcher.hasMessage;\n\n/**\n * Tests for {@link ConditionalOnProperty}.\n *\n * @author Maciej Walkowiak\n * @author Stephane Nicoll\n * @author Phillip Webb\n */\npublic class ConditionalOnPropertyTests {\n\n\t@Rule\n\tpublic ExpectedException thrown = ExpectedException.none();\n\n\tprivate AnnotationConfigApplicationContext context;\n\n\t@After\n\tpublic void tearDown() {\n\t\tif (this.context != null) {\n\t\t\tthis.context.close();\n\t\t}\n\t}\n\n\t@Test\n\tpublic void allPropertiesAreDefined() {\n\t\tload(MultiplePropertiesRequiredConfiguration.class, "property1=value1",\n\t\t\t\t"property2=value2");\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void notAllPropertiesAreDefined() {\n\t\tload(MultiplePropertiesRequiredConfiguration.class, "property1=value1");\n\t\tassertFalse(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void propertyValueEqualsFalse() {\n\t\tload(MultiplePropertiesRequiredConfiguration.class, "property1=false",\n\t\t\t\t"property2=value2");\n\t\tassertFalse(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void propertyValueEqualsFALSE() {\n\t\tload(MultiplePropertiesRequiredConfiguration.class, "property1=FALSE",\n\t\t\t\t"property2=value2");\n\t\tassertFalse(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void relaxedName() {\n\t\tload(RelaxedPropertiesRequiredConfiguration.class,\n\t\t\t\t"spring.theRelaxedProperty=value1");\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void prefixWithoutPeriod() throws Exception {\n\t\tload(RelaxedPropertiesRequiredConfigurationWithShortPrefix.class,\n\t\t\t\t"spring.property=value1");\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void nonRelaxedName() throws Exception {\n\t\tload(NonRelaxedPropertiesRequiredConfiguration.class, "theRelaxedProperty=value1");\n\t\tassertFalse(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\t// Enabled by default\n\tpublic void enabledIfNotConfiguredOtherwise() {\n\t\tload(EnabledIfNotConfiguredOtherwiseConfig.class);\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void enabledIfNotConfiguredOtherwiseWithConfig() {\n\t\tload(EnabledIfNotConfiguredOtherwiseConfig.class, "simple.myProperty:false");\n\t\tassertFalse(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void enabledIfNotConfiguredOtherwiseWithConfigDifferentCase() {\n\t\tload(EnabledIfNotConfiguredOtherwiseConfig.class, "simple.my-property:FALSE");\n\t\tassertFalse(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\t// Disabled by default\n\tpublic void disableIfNotConfiguredOtherwise() {\n\t\tload(DisabledIfNotConfiguredOtherwiseConfig.class);\n\t\tassertFalse(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void disableIfNotConfiguredOtherwiseWithConfig() {\n\t\tload(DisabledIfNotConfiguredOtherwiseConfig.class, "simple.myProperty:true");\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void disableIfNotConfiguredOtherwiseWithConfigDifferentCase() {\n\t\tload(DisabledIfNotConfiguredOtherwiseConfig.class, "simple.myproperty:TrUe");\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void simpleValueIsSet() {\n\t\tload(SimpleValueConfig.class, "simple.myProperty:bar");\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void caseInsensitive() {\n\t\tload(SimpleValueConfig.class, "simple.myProperty:BaR");\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void defaultValueIsSet() {\n\t\tload(DefaultValueConfig.class, "simple.myProperty:bar");\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void defaultValueIsNotSet() {\n\t\tload(DefaultValueConfig.class);\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void defaultValueIsSetDifferentValue() {\n\t\tload(DefaultValueConfig.class, "simple.myProperty:another");\n\t\tassertFalse(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void prefix() {\n\t\tload(PrefixValueConfig.class, "simple.myProperty:bar");\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void relaxedEnabledByDefault() {\n\t\tload(PrefixValueConfig.class, "simple.myProperty:bar");\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void strictNameMatch() {\n\t\tload(StrictNameConfig.class, "simple.my-property:bar");\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void strictNameNoMatch() {\n\t\tload(StrictNameConfig.class, "simple.myProperty:bar");\n\t\tassertFalse(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void multiValuesAllSet() {\n\t\tload(MultiValuesConfig.class, "simple.my-property:bar",\n\t\t\t\t"simple.my-another-property:bar");\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void multiValuesOnlyOneSet() {\n\t\tload(MultiValuesConfig.class, "simple.my-property:bar");\n\t\tassertFalse(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void usingValueAttribute() throws Exception {\n\t\tload(ValueAttribute.class, "some.property");\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void nameOrValueMustBeSpecified() throws Exception {\n\t\tthis.thrown.expect(IllegalStateException.class);\n\t\tthis.thrown.expectCause(hasMessage(containsString("The name or "\n\t\t\t\t+ "value attribute of @ConditionalOnProperty must be specified")));\n\t\tload(NoNameOrValueAttribute.class, "some.property");\n\t}\n\n\t@Test\n\tpublic void nameAndValueMustNotBeSpecified() throws Exception {\n\t\tthis.thrown.expect(IllegalStateException.class);\n\t\tthis.thrown.expectCause(hasMessage(containsString("The name and "\n\t\t\t\t+ "value attributes of @ConditionalOnProperty are exclusive")));\n\t\tload(NameAndValueAttribute.class, "some.property");\n\t}\n\n\tprivate void load(Class<?> config, String... environment) {\n\t\tthis.context = new AnnotationConfigApplicationContext();\n\t\tEnvironmentTestUtils.addEnvironment(this.context, environment);\n\t\tthis.context.register(config);\n\t\tthis.context.refresh();\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(name = { "property1", "property2" })\n\tprotected static class MultiplePropertiesRequiredConfiguration {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "spring.", name = "the-relaxed-property")\n\tprotected static class RelaxedPropertiesRequiredConfiguration {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "spring", name = "property")\n\tprotected static class RelaxedPropertiesRequiredConfigurationWithShortPrefix {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(name = "the-relaxed-property", relaxedNames = false)\n\tprotected static class NonRelaxedPropertiesRequiredConfiguration {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t// i.e ${simple.myProperty:true}\n\t@ConditionalOnProperty(prefix = "simple", name = "my-property", havingValue = "true", matchIfMissing = true)\n\tstatic class EnabledIfNotConfiguredOtherwiseConfig {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t// i.e ${simple.myProperty:false}\n\t@ConditionalOnProperty(prefix = "simple", name = "my-property", havingValue = "true", matchIfMissing = false)\n\tstatic class DisabledIfNotConfiguredOtherwiseConfig {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "simple", name = "my-property", havingValue = "bar")\n\tstatic class SimpleValueConfig {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(name = "simple.myProperty", havingValue = "bar", matchIfMissing = true)\n\tstatic class DefaultValueConfig {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "simple", name = "my-property", havingValue = "bar")\n\tstatic class PrefixValueConfig {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "simple", name = "my-property", havingValue = "bar", relaxedNames = false)\n\tstatic class StrictNameConfig {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "simple", name = { "my-property",\n\t\t\t"my-another-property" }, havingValue = "bar")\n\tstatic class MultiValuesConfig {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty("some.property")\n\tprotected static class ValueAttribute {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty\n\tprotected static class NoNameOrValueAttribute {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(value = "x", name = "y")\n\tprotected static class NameAndValueAttribute {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport org.junit.After;\nimport org.junit.Test;\nimport org.springframework.boot.test.EnvironmentTestUtils;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\n/**\n * Tests for {@link ConditionalOnProperty}.\n *\n * @author Maciej Walkowiak\n * @author Stephane Nicoll\n */\npublic class ConditionalOnPropertyTests {\n\n\tprivate AnnotationConfigApplicationContext context;\n\n\t@After\n\tpublic void tearDown() {\n\t\tif (this.context != null) {\n\t\t\tthis.context.close();\n\t\t}\n\t}\n\n\t@Test\n\tpublic void allPropertiesAreDefined() {\n\t\tload(MultiplePropertiesRequiredConfiguration.class,\n\t\t\t\t"property1=value1", "property2=value2");\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void notAllPropertiesAreDefined() {\n\t\tload(MultiplePropertiesRequiredConfiguration.class,\n\t\t\t\t"property1=value1");\n\t\tassertFalse(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void propertyValueEqualsFalse() {\n\t\tload(MultiplePropertiesRequiredConfiguration.class,\n\t\t\t\t"property1=false", "property2=value2");\n\t\tassertFalse(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void propertyValueEqualsFALSE() {\n\t\tload(MultiplePropertiesRequiredConfiguration.class,\n\t\t\t\t"property1=FALSE", "property2=value2");\n\t\tassertFalse(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void relaxedName() {\n\t\tload(RelaxedPropertiesRequiredConfiguration.class,\n\t\t\t\t"spring.theRelaxedProperty=value1");\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void prefixWithoutPeriod() throws Exception {\n\t\tload(RelaxedPropertiesRequiredConfigurationWithShortPrefix.class,\n\t\t\t\t"spring.property=value1");\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void nonRelaxedName() throws Exception {\n\t\tload(NonRelaxedPropertiesRequiredConfiguration.class,\n\t\t\t\t"theRelaxedProperty=value1");\n\t\tassertFalse(this.context.containsBean("foo"));\n\t}\n\n\t@Test // Enabled by default\n\tpublic void enabledIfNotConfiguredOtherwise() {\n\t\tload(EnabledIfNotConfiguredOtherwiseConfig.class);\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void enabledIfNotConfiguredOtherwiseWithConfig() {\n\t\tload(EnabledIfNotConfiguredOtherwiseConfig.class, "simple.myProperty:false");\n\t\tassertFalse(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void enabledIfNotConfiguredOtherwiseWithConfigDifferentCase() {\n\t\tload(EnabledIfNotConfiguredOtherwiseConfig.class, "simple.my-property:FALSE");\n\t\tassertFalse(this.context.containsBean("foo"));\n\t}\n\n\t@Test // Disabled by default\n\tpublic void disableIfNotConfiguredOtherwise() {\n\t\tload(DisabledIfNotConfiguredOtherwiseConfig.class);\n\t\tassertFalse(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void disableIfNotConfiguredOtherwiseWithConfig() {\n\t\tload(DisabledIfNotConfiguredOtherwiseConfig.class, "simple.myProperty:true");\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void disableIfNotConfiguredOtherwiseWithConfigDifferentCase() {\n\t\tload(DisabledIfNotConfiguredOtherwiseConfig.class, "simple.myproperty:TrUe");\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void simpleValueIsSet() {\n\t\tload(SimpleValueConfig.class, "simple.myProperty:bar");\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void caseInsensitive() {\n\t\tload(SimpleValueConfig.class, "simple.myProperty:BaR");\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void defaultValueIsSet() {\n\t\tload(DefaultValueConfig.class, "simple.myProperty:bar");\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void defaultValueIsNotSet() {\n\t\tload(DefaultValueConfig.class);\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void defaultValueIsSetDifferentValue() {\n\t\tload(DefaultValueConfig.class, "simple.myProperty:another");\n\t\tassertFalse(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void prefix() {\n\t\tload(PrefixValueConfig.class, "simple.myProperty:bar");\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void relaxedEnabledByDefault() {\n\t\tload(PrefixValueConfig.class, "simple.myProperty:bar");\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void strictNameMatch() {\n\t\tload(StrictNameConfig.class, "simple.my-property:bar");\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void strictNameNoMatch() {\n\t\tload(StrictNameConfig.class, "simple.myProperty:bar");\n\t\tassertFalse(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void multiValuesAllSet() {\n\t\tload(MultiValuesConfig.class, "simple.my-property:bar", "simple.my-another-property:bar");\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void multiValuesOnlyOneSet() {\n\t\tload(MultiValuesConfig.class, "simple.my-property:bar");\n\t\tassertFalse(this.context.containsBean("foo"));\n\t}\n\n\tprivate void load(Class<?> config, String... environment) {\n\t\tthis.context = new AnnotationConfigApplicationContext();\n\t\tEnvironmentTestUtils.addEnvironment(this.context, environment);\n\t\tthis.context.register(config);\n\t\tthis.context.refresh();\n\t}\n\n\n\t@Configuration\n\t@ConditionalOnProperty({ "property1", "property2" })\n\tprotected static class MultiplePropertiesRequiredConfiguration {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "spring.", value = "the-relaxed-property")\n\tprotected static class RelaxedPropertiesRequiredConfiguration {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "spring", value = "property")\n\tprotected static class RelaxedPropertiesRequiredConfigurationWithShortPrefix {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(value = "the-relaxed-property", relaxedNames = false)\n\tprotected static class NonRelaxedPropertiesRequiredConfiguration {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration // ${simple.myProperty:true}\n\t@ConditionalOnProperty(prefix = "simple", value = "my-property", match = "true", defaultMatch = true)\n\tstatic class EnabledIfNotConfiguredOtherwiseConfig {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration // ${simple.myProperty:false}\n\t@ConditionalOnProperty(prefix = "simple", value = "my-property", match = "true", defaultMatch = false)\n\tstatic class DisabledIfNotConfiguredOtherwiseConfig {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "simple", value = "my-property", match = "bar")\n\tstatic class SimpleValueConfig {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(value = "simple.myProperty", match = "bar", defaultMatch = true)\n\tstatic class DefaultValueConfig {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "simple", value = "my-property", match = "bar")\n\tstatic class PrefixValueConfig {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "simple", value = "my-property", match = "bar", relaxedNames = false)\n\tstatic class StrictNameConfig {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "simple", value = {"my-property", "my-another-property"}, match = "bar")\n\tstatic class MultiValuesConfig {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
