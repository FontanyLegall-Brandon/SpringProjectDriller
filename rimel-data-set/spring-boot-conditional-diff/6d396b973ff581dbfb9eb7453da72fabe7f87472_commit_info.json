{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -38,6 +38,7 @@ import org.springframework.kafka.security.jaas.KafkaJaasLoginModuleInitializer;\n import org.springframework.kafka.support.LoggingProducerListener;\n import org.springframework.kafka.support.ProducerListener;\n import org.springframework.kafka.support.converter.RecordMessageConverter;\n+import org.springframework.kafka.transaction.KafkaTransactionManager;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for Apache Kafka.\n@@ -45,6 +46,7 @@ import org.springframework.kafka.support.converter.RecordMessageConverter;\n  * @author Gary Russell\n  * @author Stephane Nicoll\n  * @author Eddú Meléndez\n+ * @author Nakul Mishra\n  * @since 1.5.0\n  */\n @Configuration\n@@ -94,8 +96,20 @@ public class KafkaAutoConfiguration {\n \t@Bean\n \t@ConditionalOnMissingBean(ProducerFactory.class)\n \tpublic ProducerFactory<?, ?> kafkaProducerFactory() {\n-\t\treturn new DefaultKafkaProducerFactory<>(\n+\t\tDefaultKafkaProducerFactory<Object, Object> factory = new DefaultKafkaProducerFactory<>(\n \t\t\t\tthis.properties.buildProducerProperties());\n+\t\tKafkaProperties.Producer producer = this.properties.getProducer();\n+\t\tif (producer.getTransactionIdPrefix() != null) {\n+\t\t\tfactory.setTransactionIdPrefix(producer.getTransactionIdPrefix());\n+\t\t}\n+\t\treturn factory;\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnProperty(name = "spring.kafka.producer.transaction-id-prefix")\n+\t@ConditionalOnMissingBean\n+\tpublic KafkaTransactionManager<?, ?> kafkaTransactionManager(ProducerFactory<?, ?> producerFactory) {\n+\t\treturn new KafkaTransactionManager<>(producerFactory);\n \t}\n \n \t@Bean\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.kafka;\n\nimport java.io.IOException;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.kafka.KafkaProperties.Jaas;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.kafka.core.ConsumerFactory;\nimport org.springframework.kafka.core.DefaultKafkaConsumerFactory;\nimport org.springframework.kafka.core.DefaultKafkaProducerFactory;\nimport org.springframework.kafka.core.KafkaAdmin;\nimport org.springframework.kafka.core.KafkaTemplate;\nimport org.springframework.kafka.core.ProducerFactory;\nimport org.springframework.kafka.security.jaas.KafkaJaasLoginModuleInitializer;\nimport org.springframework.kafka.support.LoggingProducerListener;\nimport org.springframework.kafka.support.ProducerListener;\nimport org.springframework.kafka.support.converter.RecordMessageConverter;\nimport org.springframework.kafka.transaction.KafkaTransactionManager;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Apache Kafka.\n *\n * @author Gary Russell\n * @author Stephane Nicoll\n * @author Eddú Meléndez\n * @author Nakul Mishra\n * @since 1.5.0\n */\n@Configuration\n@ConditionalOnClass(KafkaTemplate.class)\n@EnableConfigurationProperties(KafkaProperties.class)\n@Import(KafkaAnnotationDrivenConfiguration.class)\npublic class KafkaAutoConfiguration {\n\n\tprivate final KafkaProperties properties;\n\n\tprivate final RecordMessageConverter messageConverter;\n\n\tpublic KafkaAutoConfiguration(KafkaProperties properties,\n\t\t\tObjectProvider<RecordMessageConverter> messageConverter) {\n\t\tthis.properties = properties;\n\t\tthis.messageConverter = messageConverter.getIfUnique();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(KafkaTemplate.class)\n\tpublic KafkaTemplate<?, ?> kafkaTemplate(\n\t\t\tProducerFactory<Object, Object> kafkaProducerFactory,\n\t\t\tProducerListener<Object, Object> kafkaProducerListener) {\n\t\tKafkaTemplate<Object, Object> kafkaTemplate = new KafkaTemplate<>(\n\t\t\t\tkafkaProducerFactory);\n\t\tif (this.messageConverter != null) {\n\t\t\tkafkaTemplate.setMessageConverter(this.messageConverter);\n\t\t}\n\t\tkafkaTemplate.setProducerListener(kafkaProducerListener);\n\t\tkafkaTemplate.setDefaultTopic(this.properties.getTemplate().getDefaultTopic());\n\t\treturn kafkaTemplate;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(ProducerListener.class)\n\tpublic ProducerListener<Object, Object> kafkaProducerListener() {\n\t\treturn new LoggingProducerListener<>();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(ConsumerFactory.class)\n\tpublic ConsumerFactory<?, ?> kafkaConsumerFactory() {\n\t\treturn new DefaultKafkaConsumerFactory<>(\n\t\t\t\tthis.properties.buildConsumerProperties());\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(ProducerFactory.class)\n\tpublic ProducerFactory<?, ?> kafkaProducerFactory() {\n\t\tDefaultKafkaProducerFactory<Object, Object> factory = new DefaultKafkaProducerFactory<>(\n\t\t\t\tthis.properties.buildProducerProperties());\n\t\tKafkaProperties.Producer producer = this.properties.getProducer();\n\t\tif (producer.getTransactionIdPrefix() != null) {\n\t\t\tfactory.setTransactionIdPrefix(producer.getTransactionIdPrefix());\n\t\t}\n\t\treturn factory;\n\t}\n\n\t@Bean\n\t@ConditionalOnProperty(name = "spring.kafka.producer.transaction-id-prefix")\n\t@ConditionalOnMissingBean\n\tpublic KafkaTransactionManager<?, ?> kafkaTransactionManager(ProducerFactory<?, ?> producerFactory) {\n\t\treturn new KafkaTransactionManager<>(producerFactory);\n\t}\n\n\t@Bean\n\t@ConditionalOnProperty(name = "spring.kafka.jaas.enabled")\n\t@ConditionalOnMissingBean\n\tpublic KafkaJaasLoginModuleInitializer kafkaJaasInitializer() throws IOException {\n\t\tKafkaJaasLoginModuleInitializer jaas = new KafkaJaasLoginModuleInitializer();\n\t\tJaas jaasProperties = this.properties.getJaas();\n\t\tif (jaasProperties.getControlFlag() != null) {\n\t\t\tjaas.setControlFlag(jaasProperties.getControlFlag());\n\t\t}\n\t\tif (jaasProperties.getLoginModule() != null) {\n\t\t\tjaas.setLoginModule(jaasProperties.getLoginModule());\n\t\t}\n\t\tjaas.setOptions(jaasProperties.getOptions());\n\t\treturn jaas;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(KafkaAdmin.class)\n\tpublic KafkaAdmin kafkaAdmin() {\n\t\tKafkaAdmin kafkaAdmin = new KafkaAdmin(this.properties.buildAdminProperties());\n\t\tkafkaAdmin.setFatalIfBrokerNotAvailable(this.properties.getAdmin().isFailFast());\n\t\treturn kafkaAdmin;\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.kafka;\n\nimport java.io.IOException;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.kafka.KafkaProperties.Jaas;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.kafka.core.ConsumerFactory;\nimport org.springframework.kafka.core.DefaultKafkaConsumerFactory;\nimport org.springframework.kafka.core.DefaultKafkaProducerFactory;\nimport org.springframework.kafka.core.KafkaAdmin;\nimport org.springframework.kafka.core.KafkaTemplate;\nimport org.springframework.kafka.core.ProducerFactory;\nimport org.springframework.kafka.security.jaas.KafkaJaasLoginModuleInitializer;\nimport org.springframework.kafka.support.LoggingProducerListener;\nimport org.springframework.kafka.support.ProducerListener;\nimport org.springframework.kafka.support.converter.RecordMessageConverter;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Apache Kafka.\n *\n * @author Gary Russell\n * @author Stephane Nicoll\n * @author Eddú Meléndez\n * @since 1.5.0\n */\n@Configuration\n@ConditionalOnClass(KafkaTemplate.class)\n@EnableConfigurationProperties(KafkaProperties.class)\n@Import(KafkaAnnotationDrivenConfiguration.class)\npublic class KafkaAutoConfiguration {\n\n\tprivate final KafkaProperties properties;\n\n\tprivate final RecordMessageConverter messageConverter;\n\n\tpublic KafkaAutoConfiguration(KafkaProperties properties,\n\t\t\tObjectProvider<RecordMessageConverter> messageConverter) {\n\t\tthis.properties = properties;\n\t\tthis.messageConverter = messageConverter.getIfUnique();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(KafkaTemplate.class)\n\tpublic KafkaTemplate<?, ?> kafkaTemplate(\n\t\t\tProducerFactory<Object, Object> kafkaProducerFactory,\n\t\t\tProducerListener<Object, Object> kafkaProducerListener) {\n\t\tKafkaTemplate<Object, Object> kafkaTemplate = new KafkaTemplate<>(\n\t\t\t\tkafkaProducerFactory);\n\t\tif (this.messageConverter != null) {\n\t\t\tkafkaTemplate.setMessageConverter(this.messageConverter);\n\t\t}\n\t\tkafkaTemplate.setProducerListener(kafkaProducerListener);\n\t\tkafkaTemplate.setDefaultTopic(this.properties.getTemplate().getDefaultTopic());\n\t\treturn kafkaTemplate;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(ProducerListener.class)\n\tpublic ProducerListener<Object, Object> kafkaProducerListener() {\n\t\treturn new LoggingProducerListener<>();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(ConsumerFactory.class)\n\tpublic ConsumerFactory<?, ?> kafkaConsumerFactory() {\n\t\treturn new DefaultKafkaConsumerFactory<>(\n\t\t\t\tthis.properties.buildConsumerProperties());\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(ProducerFactory.class)\n\tpublic ProducerFactory<?, ?> kafkaProducerFactory() {\n\t\treturn new DefaultKafkaProducerFactory<>(\n\t\t\t\tthis.properties.buildProducerProperties());\n\t}\n\n\t@Bean\n\t@ConditionalOnProperty(name = "spring.kafka.jaas.enabled")\n\t@ConditionalOnMissingBean\n\tpublic KafkaJaasLoginModuleInitializer kafkaJaasInitializer() throws IOException {\n\t\tKafkaJaasLoginModuleInitializer jaas = new KafkaJaasLoginModuleInitializer();\n\t\tJaas jaasProperties = this.properties.getJaas();\n\t\tif (jaasProperties.getControlFlag() != null) {\n\t\t\tjaas.setControlFlag(jaasProperties.getControlFlag());\n\t\t}\n\t\tif (jaasProperties.getLoginModule() != null) {\n\t\t\tjaas.setLoginModule(jaasProperties.getLoginModule());\n\t\t}\n\t\tjaas.setOptions(jaasProperties.getOptions());\n\t\treturn jaas;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(KafkaAdmin.class)\n\tpublic KafkaAdmin kafkaAdmin() {\n\t\tKafkaAdmin kafkaAdmin = new KafkaAdmin(this.properties.buildAdminProperties());\n\t\tkafkaAdmin.setFatalIfBrokerNotAvailable(this.properties.getAdmin().isFailFast());\n\t\treturn kafkaAdmin;\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
