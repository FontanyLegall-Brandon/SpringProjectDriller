{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/CouchbaseRepositoriesAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2012-2013 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.data;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Arrays;\n+\n+import javax.annotation.PreDestroy;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.data.couchbase.core.CouchbaseTemplate;\n+import org.springframework.data.couchbase.repository.CouchbaseRepository;\n+import org.springframework.data.couchbase.repository.config.EnableCouchbaseRepositories;\n+\n+import com.couchbase.client.CouchbaseClient;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s Couchbase\n+ * Repositories.\n+ *\n+ * @author Michael Nitschinger\n+ * @see EnableCouchbaseRepositories\n+ */\n+@Configuration\n+@ConditionalOnClass({ CouchbaseClient.class, CouchbaseRepository.class })\n+public class CouchbaseRepositoriesAutoConfiguration {\n+\n+\t@Import(CouchbaseRepositoriesAutoConfigureRegistrar.class)\n+\t@Configuration\n+\t@EnableConfigurationProperties(CouchbaseProperties.class)\n+\tprotected static class CouchbaseRepositoriesConfiguration {\n+\n+\t\t@Autowired\n+\t\tprivate CouchbaseProperties config;\n+\n+\t\t@PreDestroy\n+\t\tpublic void close() throws URISyntaxException, IOException {\n+\t\t\tcouchbaseClient().shutdown();\n+\t\t}\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(CouchbaseClient.class)\n+\t\tCouchbaseClient couchbaseClient() throws URISyntaxException, IOException {\n+\t\t\treturn this.config.couchbaseClient();\n+\t\t}\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(CouchbaseTemplate.class)\n+\t\tCouchbaseTemplate couchbaseTemplate(CouchbaseClient couchbaseClient) {\n+\t\t\treturn new CouchbaseTemplate(couchbaseClient);\n+\t\t}\n+\t}\n+\n+\t@ConfigurationProperties(prefix = "spring.data.couchbase")\n+\tpublic static class CouchbaseProperties {\n+\n+\t\tprivate String host = "127.0.0.1";\n+\t\tprivate String bucket = "default";\n+\t\tprivate String password = "";\n+\n+\t\tpublic CouchbaseClient couchbaseClient() throws URISyntaxException, IOException {\n+\t\t\treturn new CouchbaseClient(Arrays.asList(new URI("http://" + getHost()\n+\t\t\t\t\t+ ":8091/pools")), getBucket(), getPassword());\n+\t\t}\n+\n+\t\tpublic String getHost() {\n+\t\t\treturn this.host;\n+\t\t}\n+\n+\t\tpublic void setHost(String host) {\n+\t\t\tthis.host = host;\n+\t\t}\n+\n+\t\tpublic String getBucket() {\n+\t\t\treturn this.bucket;\n+\t\t}\n+\n+\t\tpublic void setBucket(String bucket) {\n+\t\t\tthis.bucket = bucket;\n+\t\t}\n+\n+\t\tpublic String getPassword() {\n+\t\t\treturn this.password;\n+\t\t}\n+\n+\t\tpublic void setPassword(String password) {\n+\t\t\tthis.password = password;\n+\t\t}\n+\t}\n+}\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data;\n\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.Arrays;\n\nimport javax.annotation.PreDestroy;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.data.couchbase.core.CouchbaseTemplate;\nimport org.springframework.data.couchbase.repository.CouchbaseRepository;\nimport org.springframework.data.couchbase.repository.config.EnableCouchbaseRepositories;\n\nimport com.couchbase.client.CouchbaseClient;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s Couchbase\n * Repositories.\n *\n * @author Michael Nitschinger\n * @see EnableCouchbaseRepositories\n */\n@Configuration\n@ConditionalOnClass({ CouchbaseClient.class, CouchbaseRepository.class })\npublic class CouchbaseRepositoriesAutoConfiguration {\n\n\t@Import(CouchbaseRepositoriesAutoConfigureRegistrar.class)\n\t@Configuration\n\t@EnableConfigurationProperties(CouchbaseProperties.class)\n\tprotected static class CouchbaseRepositoriesConfiguration {\n\n\t\t@Autowired\n\t\tprivate CouchbaseProperties config;\n\n\t\t@PreDestroy\n\t\tpublic void close() throws URISyntaxException, IOException {\n\t\t\tcouchbaseClient().shutdown();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(CouchbaseClient.class)\n\t\tCouchbaseClient couchbaseClient() throws URISyntaxException, IOException {\n\t\t\treturn this.config.couchbaseClient();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(CouchbaseTemplate.class)\n\t\tCouchbaseTemplate couchbaseTemplate(CouchbaseClient couchbaseClient) {\n\t\t\treturn new CouchbaseTemplate(couchbaseClient);\n\t\t}\n\t}\n\n\t@ConfigurationProperties(prefix = "spring.data.couchbase")\n\tpublic static class CouchbaseProperties {\n\n\t\tprivate String host = "127.0.0.1";\n\t\tprivate String bucket = "default";\n\t\tprivate String password = "";\n\n\t\tpublic CouchbaseClient couchbaseClient() throws URISyntaxException, IOException {\n\t\t\treturn new CouchbaseClient(Arrays.asList(new URI("http://" + getHost()\n\t\t\t\t\t+ ":8091/pools")), getBucket(), getPassword());\n\t\t}\n\n\t\tpublic String getHost() {\n\t\t\treturn this.host;\n\t\t}\n\n\t\tpublic void setHost(String host) {\n\t\t\tthis.host = host;\n\t\t}\n\n\t\tpublic String getBucket() {\n\t\t\treturn this.bucket;\n\t\t}\n\n\t\tpublic void setBucket(String bucket) {\n\t\t\tthis.bucket = bucket;\n\t\t}\n\n\t\tpublic String getPassword() {\n\t\t\treturn this.password;\n\t\t}\n\n\t\tpublic void setPassword(String password) {\n\t\t\tthis.password = password;\n\t\t}\n\t}\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
