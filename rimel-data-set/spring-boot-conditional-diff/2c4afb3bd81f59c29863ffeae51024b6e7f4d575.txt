@@ -16,13 +16,27 @@
 
 package org.springframework.boot.autoconfigure.jdbc;
 
+import java.util.HashMap;
+import java.util.Map;
+
 import javax.sql.DataSource;
 
 import org.junit.Test;
 
+import org.springframework.beans.BeansException;
+import org.springframework.beans.factory.NoSuchBeanDefinitionException;
+import org.springframework.beans.factory.config.BeanDefinition;
+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
+import org.springframework.beans.factory.support.BeanDefinitionRegistry;
+import org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;
 import org.springframework.boot.autoconfigure.AutoConfigurations;
+import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.AutoConfigureBefore;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;
 import org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration;
 import org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration;
+import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.boot.test.context.runner.ApplicationContextRunner;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -33,6 +47,7 @@ import org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations;
 import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.Assert.fail;
 import static org.mockito.Mockito.mock;
 
 
 public class JdbcTemplateAutoConfigurationTests {
 
@@ -185,6 +201,52 @@ public class JdbcTemplateAutoConfigurationTests {
 				});
 	}
 
+	@Test
+	public void testDependencyToFlywayWithJdbcTemplateMixed() {
+		this.contextRunner
+				.withUserConfiguration(NamedParameterDataSourceMigrationValidator.class)
+				.withPropertyValues()
+				.withConfiguration(AutoConfigurations.of(FlywayAutoConfiguration.class))
+				.run((context) -> {
+					assertThat(context).hasNotFailed();
+					assertThat(context.getBean(JdbcTemplate.class)).isNotNull();
+					assertThat(context.getBean(
+							NamedParameterDataSourceMigrationValidator.class).count)
+									.isEqualTo(1);
+				});
+	}
+
+	@Test
+	public void testDependencyToFlywayWithOnlyNamedParameterJdbcTemplate() {
+		ApplicationContextRunner contextRunner1 = new ApplicationContextRunner()
+				.withPropertyValues(,
+						)
+				.withConfiguration(
+						AutoConfigurations.of(DataSourceAutoConfiguration.class,
+								JdbcTemplateAutoConfiguration.class,
+								OnlyNamedParameterJdbcTemplateAutoConfiguration.class));
+		contextRunner1
+				.withUserConfiguration(NamedParameterDataSourceMigrationValidator.class)
+				.withPropertyValues()
+				.withConfiguration(AutoConfigurations.of(FlywayAutoConfiguration.class))
+				.run((context) -> {
+					assertThat(context).hasNotFailed();
+					assertThat(context.containsBean()).isFalse();
+					try {
+						JdbcTemplate jdbcTemplate = context.getBean(JdbcTemplate.class);
+						fail();
+					}
+					catch (NoSuchBeanDefinitionException ex) {
+
+					}
+					assertThat(context.getBean(NamedParameterJdbcTemplate.class))
+							.isNotNull();
+					assertThat(context.getBean(
+							NamedParameterDataSourceMigrationValidator.class).count)
+									.isEqualTo(1);
+				});
+	}
+
 	@Test
 	public void testDependencyToLiquibase() {
 		this.contextRunner.withUserConfiguration(DataSourceMigrationValidator.class)
@@ -199,6 +261,50 @@ public class JdbcTemplateAutoConfigurationTests {
 				});
 	}
 
+	@Test
+	public void testDependencyToLiquibaseWithJdbcTemplateMixed() {
+		this.contextRunner
+				.withUserConfiguration(NamedParameterDataSourceMigrationValidator.class)
+				.withPropertyValues(
+						)
+				.withConfiguration(
+						AutoConfigurations.of(LiquibaseAutoConfiguration.class))
+				.run((context) -> {
+					assertThat(context).hasNotFailed();
+					assertThat(context.getBean(JdbcTemplate.class)).isNotNull();
+					assertThat(context.getBean(
+							NamedParameterDataSourceMigrationValidator.class).count)
+									.isEqualTo(1);
+				});
+	}
+
+	@Test
+	public void testDependencyToLiquibaseWithOnlyNamedParameterJdbcTemplate() {
+		this.contextRunner
+				.withUserConfiguration(NamedParameterDataSourceMigrationValidator.class)
+				.withPropertyValues(
+						)
+				.withConfiguration(AutoConfigurations.of(
+						OnlyNamedParameterJdbcTemplateAutoConfiguration.class,
+						LiquibaseAutoConfiguration.class))
+				.run((context) -> {
+					assertThat(context).hasNotFailed();
+					assertThat(context.containsBean()).isFalse();
+					try {
+						JdbcTemplate jdbcTemplate = context.getBean(JdbcTemplate.class);
+						fail();
+					}
+					catch (NoSuchBeanDefinitionException ex) {
+
+					}
+					assertThat(context.getBean(NamedParameterJdbcTemplate.class))
+							.isNotNull();
+					assertThat(context.getBean(
+							NamedParameterDataSourceMigrationValidator.class).count)
+									.isEqualTo(1);
+				});
+	}
+
 	@Configuration
 	static class CustomConfiguration {
 
@@ -278,4 +384,66 @@ public class JdbcTemplateAutoConfigurationTests {
 
 	}
 
+	static class NamedParameterDataSourceMigrationValidator {
+
+		private final Integer count;
+
+		NamedParameterDataSourceMigrationValidator(
+				NamedParameterJdbcTemplate namedParameterJdbcTemplate) {
+			String sql = ;
+			Map<String, Long> param = new HashMap<>();
+			param.put(, 1L);
+			this.count = namedParameterJdbcTemplate.queryForObject(sql, param,
+					Integer.class);
+		}
+
+	}
+
+	@Configuration
+	@ConditionalOnClass({ DataSource.class })
+	@ConditionalOnSingleCandidate(DataSource.class)
+	@AutoConfigureAfter({ DataSourceAutoConfiguration.class,
+			JdbcTemplateAutoConfiguration.class })
+	@AutoConfigureBefore({ FlywayAutoConfiguration.class,
+			LiquibaseAutoConfiguration.class })
+	@EnableConfigurationProperties(JdbcProperties.class)
+	static class OnlyNamedParameterJdbcTemplateAutoConfiguration
+			implements BeanDefinitionRegistryPostProcessor {
+
+		@Bean
+		public NamedParameterJdbcTemplate myNamedParameterJdbcTemplate(
+				DataSource dataSource) {
+			return new NamedParameterJdbcTemplate(dataSource);
+		}
+
+		@Override
+		public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)
+				throws BeansException {
+			
+		}
+
+		
+		@Override
+		public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry)
+				throws BeansException {
+			String[] excludeBeanNames = new String[] { ,
+					 };
+			for (String beanName : excludeBeanNames) {
+				BeanDefinition beanDefinition = registry.getBeanDefinition(beanName);
+				if (beanDefinition != null) {
+					registry.removeBeanDefinition(beanName);
+				}
+			}
+
+		}
+
+	}
+
 }

