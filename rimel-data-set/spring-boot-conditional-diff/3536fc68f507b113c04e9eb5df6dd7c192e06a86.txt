@@ -21,13 +21,19 @@ import org.springframework.context.annotation.AnnotationConfigApplicationContext
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
+import static org.hamcrest.Matchers.equalTo;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 
 
+@SuppressWarnings()
 public class OnMissingBeanConditionTests {
 
 	private AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();
@@ -49,6 +55,35 @@ public class OnMissingBeanConditionTests {
 		assertEquals(, this.context.getBean());
 	}
 
+	@Test
+	public void hierarchyConsidered() throws Exception {
+		this.context.register(FooConfiguration.class);
+		this.context.refresh();
+		AnnotationConfigApplicationContext childContext = new AnnotationConfigApplicationContext();
+		childContext.setParent(this.context);
+		childContext.register(HierarchyConsidered.class);
+		childContext.refresh();
+		assertFalse(childContext.containsLocalBean());
+	}
+
+	@Test
+	public void hierarchyNotConsidered() throws Exception {
+		this.context.register(FooConfiguration.class);
+		this.context.refresh();
+		AnnotationConfigApplicationContext childContext = new AnnotationConfigApplicationContext();
+		childContext.setParent(this.context);
+		childContext.register(HierarchyNotConsidered.class);
+		childContext.refresh();
+		assertTrue(childContext.containsLocalBean());
+	}
+
+	@Test
+	public void impliedOnBeanMethod() throws Exception {
+		this.context.register(ExampleBeanConfiguration.class, ImpliedOnBeanMethod.class);
+		this.context.refresh();
+		assertThat(this.context.getBeansOfType(ExampleBean.class).size(), equalTo(1));
+	}
+
 	@Configuration
 	@ConditionalOnMissingBean(name = )
 	protected static class OnBeanNameConfiguration {
@@ -66,4 +101,43 @@ public class OnMissingBeanConditionTests {
 		}
 	}
 
+	@Configuration
+	@ConditionalOnMissingBean(name = )
+	protected static class HierarchyConsidered {
+		@Bean
+		public String bar() {
+			return ;
+		}
+	}
+
+	@Configuration
+	@ConditionalOnMissingBean(name = , considerHierarchy = false)
+	protected static class HierarchyNotConsidered {
+		@Bean
+		public String bar() {
+			return ;
+		}
+	}
+
+	@Configuration
+	protected static class ExampleBeanConfiguration {
+		@Bean
+		public ExampleBean exampleBean() {
+			return new ExampleBean();
+		}
+	}
+
+	@Configuration
+	protected static class ImpliedOnBeanMethod {
+
+		@Bean
+		@ConditionalOnMissingBean
+		public ExampleBean exampleBean2() {
+			return new ExampleBean();
+		}
+
+	}
+
+	public static class ExampleBean {
+	}
 }

