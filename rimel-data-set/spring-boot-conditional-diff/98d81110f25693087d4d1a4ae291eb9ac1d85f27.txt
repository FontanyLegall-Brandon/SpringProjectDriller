@@ -24,6 +24,9 @@ import javax.servlet.Filter;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
+import org.apache.catalina.Valve;
+import org.apache.catalina.valves.AccessLogValve;
+
 import org.springframework.beans.factory.BeanFactory;
 import org.springframework.beans.factory.BeanFactoryUtils;
 import org.springframework.beans.factory.HierarchicalBeanFactory;
@@ -43,6 +46,9 @@ import org.springframework.boot.autoconfigure.web.ServerProperties;
 import org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainer;
 import org.springframework.boot.context.embedded.EmbeddedServletContainer;
 import org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;
+import org.springframework.boot.context.embedded.EmbeddedServletContainerFactory;
+import org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;
+import org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory;
 import org.springframework.boot.web.servlet.ErrorPage;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -106,6 +112,17 @@ public class EndpointWebMvcChildContextConfiguration {
 		return new ServerCustomization();
 	}
 
+	@Bean
+	public UndertowAccessLogCustomizer undertowAccessLogCustomizer() {
+		return new UndertowAccessLogCustomizer();
+	}
+
+	@Bean
+	@ConditionalOnClass(name = )
+	public TomcatAccessLogCustomizer tomcatAccessLogCustomizer() {
+		return new TomcatAccessLogCustomizer();
+	}
+
 	/*
 	 * The error controller is present but not mapped as an endpoint in this context
 	 * because of the DispatcherServlet having had its HandlerMapping explicitly disabled.
@@ -321,4 +338,79 @@ public class EndpointWebMvcChildContextConfiguration {
 
 	}
 
+	static abstract class AccessLogCustomizer<T extends EmbeddedServletContainerFactory>
+			implements EmbeddedServletContainerCustomizer, Ordered {
+
+		private final Class<T> factoryClass;
+
+		AccessLogCustomizer(Class<T> factoryClass) {
+			this.factoryClass = factoryClass;
+		}
+
+		protected String customizePrefix(String prefix) {
+			return  + prefix;
+		}
+
+		@Override
+		public int getOrder() {
+			return 1;
+		}
+
+		@Override
+		public void customize(ConfigurableEmbeddedServletContainer container) {
+			if (this.factoryClass.isInstance(container)) {
+				customize(this.factoryClass.cast(container));
+			}
+		}
+
+		abstract void customize(T container);
+	}
+
+	static class TomcatAccessLogCustomizer
+			extends AccessLogCustomizer<TomcatEmbeddedServletContainerFactory> {
+
+		TomcatAccessLogCustomizer() {
+			super(TomcatEmbeddedServletContainerFactory.class);
+		}
+
+		@Override
+		public int getOrder() {
+			return 1;
+		}
+
+		@Override
+		public void customize(TomcatEmbeddedServletContainerFactory container) {
+			AccessLogValve accessLogValve = findAccessLogValve(container);
+			if (accessLogValve == null) {
+				return;
+			}
+			accessLogValve.setPrefix(customizePrefix(accessLogValve.getPrefix()));
+		}
+
+		private AccessLogValve findAccessLogValve(
+				TomcatEmbeddedServletContainerFactory container) {
+			for (Valve engineValve : container.getEngineValves()) {
+				if (engineValve instanceof AccessLogValve) {
+					return (AccessLogValve) engineValve;
+				}
+			}
+			return null;
+		}
+
+	}
+
+	static class UndertowAccessLogCustomizer
+			extends AccessLogCustomizer<UndertowEmbeddedServletContainerFactory> {
+
+		UndertowAccessLogCustomizer() {
+			super(UndertowEmbeddedServletContainerFactory.class);
+		}
+
+		@Override
+		public void customize(UndertowEmbeddedServletContainerFactory container) {
+			container.setAccessLogPrefix(customizePrefix(container.getAccessLogPrefix()));
+		}
+
+	}
+
 }

