{'_old_path': None, '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/cache/CacheMetricsRegistrarConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2012-2018 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.autoconfigure.metrics.cache;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+\n+import javax.annotation.PostConstruct;\n+\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Tag;\n+\n+import org.springframework.boot.actuate.metrics.cache.CacheMeterBinderProvider;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.cache.Cache;\n+import org.springframework.cache.CacheManager;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Configure a {@link CacheMetricsRegistrar} and register all available\n+ * {@link Cache caches}.\n+ *\n+ * @author Stephane Nicoll\n+ * @since 2.0.0\n+ */\n+@Configuration\n+@ConditionalOnBean(CacheMeterBinderProvider.class)\n+class CacheMetricsRegistrarConfiguration {\n+\n+\tprivate static final String CACHE_MANAGER_SUFFIX = "cacheManager";\n+\n+\tprivate final MeterRegistry registry;\n+\n+\tprivate final CacheMetricsProperties properties;\n+\n+\tprivate final Collection<CacheMeterBinderProvider> cacheMeterBinderProviders;\n+\n+\tprivate final Map<String, CacheManager> cacheManagers;\n+\n+\tCacheMetricsRegistrarConfiguration(MeterRegistry registry,\n+\t\t\tCacheMetricsProperties properties,\n+\t\t\tCollection<CacheMeterBinderProvider> cacheMeterBinderProviders,\n+\t\t\tMap<String, CacheManager> cacheManagers) {\n+\t\tthis.registry = registry;\n+\t\tthis.cacheMeterBinderProviders = cacheMeterBinderProviders;\n+\t\tthis.properties = properties;\n+\t\tthis.cacheManagers = cacheManagers;\n+\t}\n+\n+\t@Bean\n+\tpublic CacheMetricsRegistrar cacheMetricsRegistrar() {\n+\t\treturn new CacheMetricsRegistrar(this.registry,\n+\t\t\t\tthis.properties.getCacheMetricName(), this.cacheMeterBinderProviders);\n+\t}\n+\n+\t@PostConstruct\n+\tpublic void bindCachesToRegistry() {\n+\t\tthis.cacheManagers.forEach((beanName, cacheManager) -> cacheManager.getCacheNames()\n+\t\t\t\t.forEach((cacheName) ->\n+\t\t\t\t\t\tbindCacheToRegistry(beanName, cacheManager.getCache(cacheName))));\n+\t}\n+\n+\tprivate void bindCacheToRegistry(String beanName, Cache cache) {\n+\t\tTag cacheManagerTag = Tag.of("cacheManager", getCacheManagerName(beanName));\n+\t\tcacheMetricsRegistrar().bindCacheToRegistry(cache, cacheManagerTag);\n+\t}\n+\n+\t/**\n+\t * Get the name of a {@link CacheManager} based on its {@code beanName}.\n+\t * @param beanName the name of the {@link CacheManager} bean\n+\t * @return a name for the given cache manager\n+\t */\n+\tprivate String getCacheManagerName(String beanName) {\n+\t\tif (beanName.length() > CACHE_MANAGER_SUFFIX.length()\n+\t\t\t\t&& StringUtils.endsWithIgnoreCase(beanName, CACHE_MANAGER_SUFFIX)) {\n+\t\t\treturn beanName.substring(0,\n+\t\t\t\t\tbeanName.length() - CACHE_MANAGER_SUFFIX.length());\n+\t\t}\n+\t\treturn beanName;\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics.cache;\n\nimport java.util.Collection;\nimport java.util.Map;\n\nimport javax.annotation.PostConstruct;\n\nimport io.micrometer.core.instrument.MeterRegistry;\nimport io.micrometer.core.instrument.Tag;\n\nimport org.springframework.boot.actuate.metrics.cache.CacheMeterBinderProvider;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.cache.Cache;\nimport org.springframework.cache.CacheManager;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.util.StringUtils;\n\n/**\n * Configure a {@link CacheMetricsRegistrar} and register all available\n * {@link Cache caches}.\n *\n * @author Stephane Nicoll\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnBean(CacheMeterBinderProvider.class)\nclass CacheMetricsRegistrarConfiguration {\n\n\tprivate static final String CACHE_MANAGER_SUFFIX = "cacheManager";\n\n\tprivate final MeterRegistry registry;\n\n\tprivate final CacheMetricsProperties properties;\n\n\tprivate final Collection<CacheMeterBinderProvider> cacheMeterBinderProviders;\n\n\tprivate final Map<String, CacheManager> cacheManagers;\n\n\tCacheMetricsRegistrarConfiguration(MeterRegistry registry,\n\t\t\tCacheMetricsProperties properties,\n\t\t\tCollection<CacheMeterBinderProvider> cacheMeterBinderProviders,\n\t\t\tMap<String, CacheManager> cacheManagers) {\n\t\tthis.registry = registry;\n\t\tthis.cacheMeterBinderProviders = cacheMeterBinderProviders;\n\t\tthis.properties = properties;\n\t\tthis.cacheManagers = cacheManagers;\n\t}\n\n\t@Bean\n\tpublic CacheMetricsRegistrar cacheMetricsRegistrar() {\n\t\treturn new CacheMetricsRegistrar(this.registry,\n\t\t\t\tthis.properties.getCacheMetricName(), this.cacheMeterBinderProviders);\n\t}\n\n\t@PostConstruct\n\tpublic void bindCachesToRegistry() {\n\t\tthis.cacheManagers.forEach((beanName, cacheManager) -> cacheManager.getCacheNames()\n\t\t\t\t.forEach((cacheName) ->\n\t\t\t\t\t\tbindCacheToRegistry(beanName, cacheManager.getCache(cacheName))));\n\t}\n\n\tprivate void bindCacheToRegistry(String beanName, Cache cache) {\n\t\tTag cacheManagerTag = Tag.of("cacheManager", getCacheManagerName(beanName));\n\t\tcacheMetricsRegistrar().bindCacheToRegistry(cache, cacheManagerTag);\n\t}\n\n\t/**\n\t * Get the name of a {@link CacheManager} based on its {@code beanName}.\n\t * @param beanName the name of the {@link CacheManager} bean\n\t * @return a name for the given cache manager\n\t */\n\tprivate String getCacheManagerName(String beanName) {\n\t\tif (beanName.length() > CACHE_MANAGER_SUFFIX.length()\n\t\t\t\t&& StringUtils.endsWithIgnoreCase(beanName, CACHE_MANAGER_SUFFIX)) {\n\t\t\treturn beanName.substring(0,\n\t\t\t\t\tbeanName.length() - CACHE_MANAGER_SUFFIX.length());\n\t\t}\n\t\treturn beanName;\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
