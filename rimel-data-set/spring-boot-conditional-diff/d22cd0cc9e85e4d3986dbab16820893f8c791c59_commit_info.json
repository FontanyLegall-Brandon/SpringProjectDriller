{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2016 the original author or authors.\n+ * Copyright 2012-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -16,6 +16,7 @@\n \n package org.springframework.boot.autoconfigure.cache;\n \n+import java.util.LinkedHashSet;\n import java.util.List;\n \n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n@@ -27,17 +28,19 @@ import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.data.redis.cache.RedisCacheManager;\n-import org.springframework.data.redis.core.RedisTemplate;\n+import org.springframework.data.redis.cache.RedisCacheManager.RedisCacheManagerBuilder;\n+import org.springframework.data.redis.connection.RedisConnectionFactory;\n \n /**\n  * Redis cache configuration.\n  *\n  * @author Stephane Nicoll\n+ * @author Mark Paluch\n  * @since 1.3.0\n  */\n @Configuration\n @AutoConfigureAfter(RedisAutoConfiguration.class)\n-@ConditionalOnBean(RedisTemplate.class)\n+@ConditionalOnBean(RedisConnectionFactory.class)\n @ConditionalOnMissingBean(CacheManager.class)\n @Conditional(CacheCondition.class)\n class RedisCacheConfiguration {\n@@ -53,14 +56,14 @@ class RedisCacheConfiguration {\n \t}\n \n \t@Bean\n-\tpublic RedisCacheManager cacheManager(RedisTemplate<Object, Object> redisTemplate) {\n-\t\tRedisCacheManager cacheManager = new RedisCacheManager(redisTemplate);\n-\t\tcacheManager.setUsePrefix(true);\n+\tpublic RedisCacheManager cacheManager(RedisConnectionFactory redisConnectionFactory) {\n+\n+\t\tRedisCacheManagerBuilder builder = RedisCacheManager.builder(redisConnectionFactory);\n \t\tList<String> cacheNames = this.cacheProperties.getCacheNames();\n \t\tif (!cacheNames.isEmpty()) {\n-\t\t\tcacheManager.setCacheNames(cacheNames);\n+\t\t\tbuilder.initialCacheNames(new LinkedHashSet<>(cacheNames));\n \t\t}\n-\t\treturn this.customizerInvoker.customize(cacheManager);\n+\t\treturn this.customizerInvoker.customize(builder.build());\n \t}\n \n }\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.cache;\n\nimport java.util.LinkedHashSet;\nimport java.util.List;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration;\nimport org.springframework.cache.CacheManager;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.cache.RedisCacheManager;\nimport org.springframework.data.redis.cache.RedisCacheManager.RedisCacheManagerBuilder;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\n\n/**\n * Redis cache configuration.\n *\n * @author Stephane Nicoll\n * @author Mark Paluch\n * @since 1.3.0\n */\n@Configuration\n@AutoConfigureAfter(RedisAutoConfiguration.class)\n@ConditionalOnBean(RedisConnectionFactory.class)\n@ConditionalOnMissingBean(CacheManager.class)\n@Conditional(CacheCondition.class)\nclass RedisCacheConfiguration {\n\n\tprivate final CacheProperties cacheProperties;\n\n\tprivate final CacheManagerCustomizers customizerInvoker;\n\n\tRedisCacheConfiguration(CacheProperties cacheProperties,\n\t\t\tCacheManagerCustomizers customizerInvoker) {\n\t\tthis.cacheProperties = cacheProperties;\n\t\tthis.customizerInvoker = customizerInvoker;\n\t}\n\n\t@Bean\n\tpublic RedisCacheManager cacheManager(RedisConnectionFactory redisConnectionFactory) {\n\n\t\tRedisCacheManagerBuilder builder = RedisCacheManager.builder(redisConnectionFactory);\n\t\tList<String> cacheNames = this.cacheProperties.getCacheNames();\n\t\tif (!cacheNames.isEmpty()) {\n\t\t\tbuilder.initialCacheNames(new LinkedHashSet<>(cacheNames));\n\t\t}\n\t\treturn this.customizerInvoker.customize(builder.build());\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.cache;\n\nimport java.util.List;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration;\nimport org.springframework.cache.CacheManager;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.cache.RedisCacheManager;\nimport org.springframework.data.redis.core.RedisTemplate;\n\n/**\n * Redis cache configuration.\n *\n * @author Stephane Nicoll\n * @since 1.3.0\n */\n@Configuration\n@AutoConfigureAfter(RedisAutoConfiguration.class)\n@ConditionalOnBean(RedisTemplate.class)\n@ConditionalOnMissingBean(CacheManager.class)\n@Conditional(CacheCondition.class)\nclass RedisCacheConfiguration {\n\n\tprivate final CacheProperties cacheProperties;\n\n\tprivate final CacheManagerCustomizers customizerInvoker;\n\n\tRedisCacheConfiguration(CacheProperties cacheProperties,\n\t\t\tCacheManagerCustomizers customizerInvoker) {\n\t\tthis.cacheProperties = cacheProperties;\n\t\tthis.customizerInvoker = customizerInvoker;\n\t}\n\n\t@Bean\n\tpublic RedisCacheManager cacheManager(RedisTemplate<Object, Object> redisTemplate) {\n\t\tRedisCacheManager cacheManager = new RedisCacheManager(redisTemplate);\n\t\tcacheManager.setUsePrefix(true);\n\t\tList<String> cacheNames = this.cacheProperties.getCacheNames();\n\t\tif (!cacheNames.isEmpty()) {\n\t\t\tcacheManager.setCacheNames(cacheNames);\n\t\t}\n\t\treturn this.customizerInvoker.customize(cacheManager);\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
