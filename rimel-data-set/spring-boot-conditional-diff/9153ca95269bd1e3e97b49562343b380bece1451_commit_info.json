{'_old_path': None, '_new_path': PosixPath('spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/servlet/MockMvcSecurityConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2012-2016 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.test.autoconfigure.web.servlet;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.test.context.TestSecurityContextHolder;\n+import org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors;\n+import org.springframework.security.web.context.AbstractSecurityWebApplicationInitializer;\n+import org.springframework.test.web.servlet.request.RequestPostProcessor;\n+import org.springframework.test.web.servlet.setup.ConfigurableMockMvcBuilder;\n+import org.springframework.test.web.servlet.setup.MockMvcConfigurerAdapter;\n+import org.springframework.web.context.WebApplicationContext;\n+\n+/**\n+ * Configuration for Spring Security\'s MockMvc integration.\n+ *\n+ * @author Andy Wilkinson\n+ */\n+@Configuration\n+@ConditionalOnClass(SecurityMockMvcRequestPostProcessors.class)\n+class MockMvcSecurityConfiguration {\n+\n+\tprivate static final String DEFAULT_SECURITY_FILTER_NAME = AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME;\n+\n+\t@Bean\n+\t@ConditionalOnBean(name = DEFAULT_SECURITY_FILTER_NAME)\n+\tpublic SecurityMockMvcBuilderCustomizer securityMockMvcBuilderCustomizer() {\n+\t\treturn new SecurityMockMvcBuilderCustomizer();\n+\t}\n+\n+\t/**\n+\t * {@link MockMvcBuilderCustomizer} that ensures that requests run with the user in\n+\t * the {@link TestSecurityContextHolder}.\n+\t *\n+\t * @see SecurityMockMvcRequestPostProcessors#testSecurityContext\n+\t */\n+\tclass SecurityMockMvcBuilderCustomizer implements MockMvcBuilderCustomizer {\n+\n+\t\t@Override\n+\t\tpublic void customize(ConfigurableMockMvcBuilder<?> builder) {\n+\t\t\tbuilder.apply(new MockMvcConfigurerAdapter() {\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic RequestPostProcessor beforeMockMvcCreated(\n+\t\t\t\t\t\tConfigurableMockMvcBuilder<?> builder,\n+\t\t\t\t\t\tWebApplicationContext context) {\n+\t\t\t\t\treturn SecurityMockMvcRequestPostProcessors.testSecurityContext();\n+\t\t\t\t}\n+\n+\t\t\t});\n+\t\t}\n+\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.test.autoconfigure.web.servlet;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.test.context.TestSecurityContextHolder;\nimport org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors;\nimport org.springframework.security.web.context.AbstractSecurityWebApplicationInitializer;\nimport org.springframework.test.web.servlet.request.RequestPostProcessor;\nimport org.springframework.test.web.servlet.setup.ConfigurableMockMvcBuilder;\nimport org.springframework.test.web.servlet.setup.MockMvcConfigurerAdapter;\nimport org.springframework.web.context.WebApplicationContext;\n\n/**\n * Configuration for Spring Security\'s MockMvc integration.\n *\n * @author Andy Wilkinson\n */\n@Configuration\n@ConditionalOnClass(SecurityMockMvcRequestPostProcessors.class)\nclass MockMvcSecurityConfiguration {\n\n\tprivate static final String DEFAULT_SECURITY_FILTER_NAME = AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME;\n\n\t@Bean\n\t@ConditionalOnBean(name = DEFAULT_SECURITY_FILTER_NAME)\n\tpublic SecurityMockMvcBuilderCustomizer securityMockMvcBuilderCustomizer() {\n\t\treturn new SecurityMockMvcBuilderCustomizer();\n\t}\n\n\t/**\n\t * {@link MockMvcBuilderCustomizer} that ensures that requests run with the user in\n\t * the {@link TestSecurityContextHolder}.\n\t *\n\t * @see SecurityMockMvcRequestPostProcessors#testSecurityContext\n\t */\n\tclass SecurityMockMvcBuilderCustomizer implements MockMvcBuilderCustomizer {\n\n\t\t@Override\n\t\tpublic void customize(ConfigurableMockMvcBuilder<?> builder) {\n\t\t\tbuilder.apply(new MockMvcConfigurerAdapter() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic RequestPostProcessor beforeMockMvcCreated(\n\t\t\t\t\t\tConfigurableMockMvcBuilder<?> builder,\n\t\t\t\t\t\tWebApplicationContext context) {\n\t\t\t\t\treturn SecurityMockMvcRequestPostProcessors.testSecurityContext();\n\t\t\t\t}\n\n\t\t\t});\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
