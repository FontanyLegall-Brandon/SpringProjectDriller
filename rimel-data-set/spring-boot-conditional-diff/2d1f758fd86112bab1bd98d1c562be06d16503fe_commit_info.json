{'_old_path': PosixPath('spring-autoconfigure/src/main/java/org/springframework/autoconfigure/web/WebMvcAutoConfiguration.java'), '_new_path': PosixPath('spring-autoconfigure/src/main/java/org/springframework/autoconfigure/web/WebMvcAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -44,7 +44,6 @@ import org.springframework.web.accept.ContentNegotiationManager;\n import org.springframework.web.filter.HiddenHttpMethodFilter;\n import org.springframework.web.servlet.DispatcherServlet;\n import org.springframework.web.servlet.HandlerAdapter;\n-import org.springframework.web.servlet.HandlerMapping;\n import org.springframework.web.servlet.View;\n import org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;\n import org.springframework.web.servlet.config.annotation.EnableWebMvc;\n@@ -64,7 +63,7 @@ import org.springframework.web.servlet.view.ContentNegotiatingViewResolver;\n @Configuration\n @ConditionalOnClass({ Servlet.class, DispatcherServlet.class,\n \t\tWebMvcConfigurerAdapter.class })\n-@ConditionalOnMissingBean({ HandlerAdapter.class, HandlerMapping.class })\n+@ConditionalOnMissingBean({ HandlerAdapter.class })\n @Order(Ordered.HIGHEST_PRECEDENCE + 10)\n @AutoConfigureAfter(EmbeddedServletContainerAutoConfiguration.class)\n public class WebMvcAutoConfiguration {\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.autoconfigure.web;\n\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\n\nimport javax.servlet.Servlet;\n\nimport org.springframework.autoconfigure.AutoConfigureAfter;\nimport org.springframework.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.ListableBeanFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.bootstrap.context.condition.ConditionalOnBean;\nimport org.springframework.bootstrap.context.condition.ConditionalOnClass;\nimport org.springframework.bootstrap.context.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.core.convert.converter.GenericConverter;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.format.Formatter;\nimport org.springframework.format.FormatterRegistry;\nimport org.springframework.web.accept.ContentNegotiationManager;\nimport org.springframework.web.filter.HiddenHttpMethodFilter;\nimport org.springframework.web.servlet.DispatcherServlet;\nimport org.springframework.web.servlet.HandlerAdapter;\nimport org.springframework.web.servlet.View;\nimport org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\nimport org.springframework.web.servlet.handler.SimpleUrlHandlerMapping;\nimport org.springframework.web.servlet.resource.ResourceHttpRequestHandler;\nimport org.springframework.web.servlet.view.BeanNameViewResolver;\nimport org.springframework.web.servlet.view.ContentNegotiatingViewResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link EnableWebMvc Web MVC}.\n * \n * @author Phillip Webb\n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class,\n\t\tWebMvcConfigurerAdapter.class })\n@ConditionalOnMissingBean({ HandlerAdapter.class })\n@Order(Ordered.HIGHEST_PRECEDENCE + 10)\n@AutoConfigureAfter(EmbeddedServletContainerAutoConfiguration.class)\npublic class WebMvcAutoConfiguration {\n\n\t// Defined as a nested config to ensure WebMvcConfigurerAdapter it not read when not\n\t// on the classpath\n\t@EnableWebMvc\n\tpublic static class WebMvcAutoConfigurationAdapter extends WebMvcConfigurerAdapter {\n\n\t\t@Autowired\n\t\tprivate ListableBeanFactory beanFactory;\n\n\t\t@ConditionalOnBean(View.class)\n\t\t@Bean\n\t\tpublic BeanNameViewResolver beanNameViewResolver() {\n\t\t\tBeanNameViewResolver resolver = new BeanNameViewResolver();\n\t\t\tresolver.setOrder(0);\n\t\t\treturn resolver;\n\t\t}\n\n\t\t@ConditionalOnBean(View.class)\n\t\t@Bean\n\t\tpublic ContentNegotiatingViewResolver viewResolver(BeanFactory beanFactory) {\n\t\t\tContentNegotiatingViewResolver resolver = new ContentNegotiatingViewResolver();\n\t\t\tresolver.setContentNegotiationManager(beanFactory\n\t\t\t\t\t.getBean(ContentNegotiationManager.class));\n\t\t\treturn resolver;\n\t\t}\n\n\t\t@Override\n\t\tpublic void configureDefaultServletHandling(\n\t\t\t\tDefaultServletHandlerConfigurer configurer) {\n\t\t\tconfigurer.enable();\n\t\t}\n\n\t\t@Override\n\t\tpublic void addFormatters(FormatterRegistry registry) {\n\t\t\tfor (Converter<?, ?> converter : getBeansOfType(Converter.class)) {\n\t\t\t\tregistry.addConverter(converter);\n\t\t\t}\n\n\t\t\tfor (GenericConverter converter : getBeansOfType(GenericConverter.class)) {\n\t\t\t\tregistry.addConverter(converter);\n\t\t\t}\n\n\t\t\tfor (Formatter<?> formatter : getBeansOfType(Formatter.class)) {\n\t\t\t\tregistry.addFormatter(formatter);\n\t\t\t}\n\t\t}\n\n\t\tprivate <T> Collection<T> getBeansOfType(Class<T> type) {\n\t\t\treturn this.beanFactory.getBeansOfType(type).values();\n\t\t}\n\n\t\t@Override\n\t\tpublic void addResourceHandlers(ResourceHandlerRegistry registry) {\n\t\t\tregistry.addResourceHandler("/resources/**").addResourceLocations("/",\n\t\t\t\t\t"classpath:/META-INF/resources/", "classpath:/resources/",\n\t\t\t\t\t"classpath:/public/", "classpath:/static/");\n\t\t\tregistry.addResourceHandler("/**").addResourceLocations("/",\n\t\t\t\t\t"classpath:/META-INF/resources/", "classpath:/resources/",\n\t\t\t\t\t"classpath:/static/", "classpath:/public/");\n\t\t}\n\n\t\t@Configuration\n\t\tpublic static class FaviconConfiguration {\n\n\t\t\t@Bean\n\t\t\tpublic SimpleUrlHandlerMapping faviconHandlerMapping() {\n\t\t\t\tSimpleUrlHandlerMapping mapping = new SimpleUrlHandlerMapping();\n\t\t\t\tmapping.setOrder(Integer.MIN_VALUE + 1);\n\t\t\t\tmapping.setUrlMap(Collections.singletonMap("**/favicon.ico",\n\t\t\t\t\t\tfaviconRequestHandler()));\n\t\t\t\treturn mapping;\n\t\t\t}\n\n\t\t\t@Bean\n\t\t\tprotected ResourceHttpRequestHandler faviconRequestHandler() {\n\t\t\t\tResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler();\n\t\t\t\trequestHandler.setLocations(Arrays\n\t\t\t\t\t\t.<Resource> asList(new ClassPathResource("/")));\n\t\t\t\treturn requestHandler;\n\t\t\t}\n\t\t}\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)\n\tpublic HiddenHttpMethodFilter hiddenHttpMethodFilter() {\n\t\treturn new HiddenHttpMethodFilter();\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.autoconfigure.web;\n\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\n\nimport javax.servlet.Servlet;\n\nimport org.springframework.autoconfigure.AutoConfigureAfter;\nimport org.springframework.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.ListableBeanFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.bootstrap.context.condition.ConditionalOnBean;\nimport org.springframework.bootstrap.context.condition.ConditionalOnClass;\nimport org.springframework.bootstrap.context.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.core.convert.converter.GenericConverter;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.format.Formatter;\nimport org.springframework.format.FormatterRegistry;\nimport org.springframework.web.accept.ContentNegotiationManager;\nimport org.springframework.web.filter.HiddenHttpMethodFilter;\nimport org.springframework.web.servlet.DispatcherServlet;\nimport org.springframework.web.servlet.HandlerAdapter;\nimport org.springframework.web.servlet.HandlerMapping;\nimport org.springframework.web.servlet.View;\nimport org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\nimport org.springframework.web.servlet.handler.SimpleUrlHandlerMapping;\nimport org.springframework.web.servlet.resource.ResourceHttpRequestHandler;\nimport org.springframework.web.servlet.view.BeanNameViewResolver;\nimport org.springframework.web.servlet.view.ContentNegotiatingViewResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link EnableWebMvc Web MVC}.\n * \n * @author Phillip Webb\n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class,\n\t\tWebMvcConfigurerAdapter.class })\n@ConditionalOnMissingBean({ HandlerAdapter.class, HandlerMapping.class })\n@Order(Ordered.HIGHEST_PRECEDENCE + 10)\n@AutoConfigureAfter(EmbeddedServletContainerAutoConfiguration.class)\npublic class WebMvcAutoConfiguration {\n\n\t// Defined as a nested config to ensure WebMvcConfigurerAdapter it not read when not\n\t// on the classpath\n\t@EnableWebMvc\n\tpublic static class WebMvcAutoConfigurationAdapter extends WebMvcConfigurerAdapter {\n\n\t\t@Autowired\n\t\tprivate ListableBeanFactory beanFactory;\n\n\t\t@ConditionalOnBean(View.class)\n\t\t@Bean\n\t\tpublic BeanNameViewResolver beanNameViewResolver() {\n\t\t\tBeanNameViewResolver resolver = new BeanNameViewResolver();\n\t\t\tresolver.setOrder(0);\n\t\t\treturn resolver;\n\t\t}\n\n\t\t@ConditionalOnBean(View.class)\n\t\t@Bean\n\t\tpublic ContentNegotiatingViewResolver viewResolver(BeanFactory beanFactory) {\n\t\t\tContentNegotiatingViewResolver resolver = new ContentNegotiatingViewResolver();\n\t\t\tresolver.setContentNegotiationManager(beanFactory\n\t\t\t\t\t.getBean(ContentNegotiationManager.class));\n\t\t\treturn resolver;\n\t\t}\n\n\t\t@Override\n\t\tpublic void configureDefaultServletHandling(\n\t\t\t\tDefaultServletHandlerConfigurer configurer) {\n\t\t\tconfigurer.enable();\n\t\t}\n\n\t\t@Override\n\t\tpublic void addFormatters(FormatterRegistry registry) {\n\t\t\tfor (Converter<?, ?> converter : getBeansOfType(Converter.class)) {\n\t\t\t\tregistry.addConverter(converter);\n\t\t\t}\n\n\t\t\tfor (GenericConverter converter : getBeansOfType(GenericConverter.class)) {\n\t\t\t\tregistry.addConverter(converter);\n\t\t\t}\n\n\t\t\tfor (Formatter<?> formatter : getBeansOfType(Formatter.class)) {\n\t\t\t\tregistry.addFormatter(formatter);\n\t\t\t}\n\t\t}\n\n\t\tprivate <T> Collection<T> getBeansOfType(Class<T> type) {\n\t\t\treturn this.beanFactory.getBeansOfType(type).values();\n\t\t}\n\n\t\t@Override\n\t\tpublic void addResourceHandlers(ResourceHandlerRegistry registry) {\n\t\t\tregistry.addResourceHandler("/resources/**").addResourceLocations("/",\n\t\t\t\t\t"classpath:/META-INF/resources/", "classpath:/resources/",\n\t\t\t\t\t"classpath:/public/", "classpath:/static/");\n\t\t\tregistry.addResourceHandler("/**").addResourceLocations("/",\n\t\t\t\t\t"classpath:/META-INF/resources/", "classpath:/resources/",\n\t\t\t\t\t"classpath:/static/", "classpath:/public/");\n\t\t}\n\n\t\t@Configuration\n\t\tpublic static class FaviconConfiguration {\n\n\t\t\t@Bean\n\t\t\tpublic SimpleUrlHandlerMapping faviconHandlerMapping() {\n\t\t\t\tSimpleUrlHandlerMapping mapping = new SimpleUrlHandlerMapping();\n\t\t\t\tmapping.setOrder(Integer.MIN_VALUE + 1);\n\t\t\t\tmapping.setUrlMap(Collections.singletonMap("**/favicon.ico",\n\t\t\t\t\t\tfaviconRequestHandler()));\n\t\t\t\treturn mapping;\n\t\t\t}\n\n\t\t\t@Bean\n\t\t\tprotected ResourceHttpRequestHandler faviconRequestHandler() {\n\t\t\t\tResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler();\n\t\t\t\trequestHandler.setLocations(Arrays\n\t\t\t\t\t\t.<Resource> asList(new ClassPathResource("/")));\n\t\t\t\treturn requestHandler;\n\t\t\t}\n\t\t}\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)\n\tpublic HiddenHttpMethodFilter hiddenHttpMethodFilter() {\n\t\treturn new HiddenHttpMethodFilter();\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
