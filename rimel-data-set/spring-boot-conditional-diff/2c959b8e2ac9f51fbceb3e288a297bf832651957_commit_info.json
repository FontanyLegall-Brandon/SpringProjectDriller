{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryHealthWebEndpointManagementContextConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryHealthWebEndpointManagementContextConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -23,13 +23,15 @@ import org.springframework.boot.actuate.autoconfigure.cloudfoundry.servlet.Cloud\n import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\n import org.springframework.boot.actuate.autoconfigure.health.HealthEndpointAutoConfiguration;\n import org.springframework.boot.actuate.health.HealthEndpoint;\n-import org.springframework.boot.actuate.health.HealthStatusHttpMapper;\n-import org.springframework.boot.actuate.health.ReactiveHealthIndicator;\n+import org.springframework.boot.actuate.health.HealthEndpointWebExtension;\n+import org.springframework.boot.actuate.health.ReactiveHealthEndpointWebExtension;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.cloud.CloudPlatform;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n@@ -39,7 +41,9 @@ import org.springframework.context.annotation.Configuration;\n  * @author Madhura Bhave\n  */\n @Configuration\n-@AutoConfigureBefore({ ReactiveCloudFoundryActuatorAutoConfiguration.class, CloudFoundryActuatorAutoConfiguration.class })\n+@ConditionalOnCloudPlatform(CloudPlatform.CLOUD_FOUNDRY)\n+@AutoConfigureBefore({ ReactiveCloudFoundryActuatorAutoConfiguration.class,\n+\t\tCloudFoundryActuatorAutoConfiguration.class })\n @AutoConfigureAfter(HealthEndpointAutoConfiguration.class)\n public class CloudFoundryHealthWebEndpointManagementContextConfiguration {\n \n@@ -50,11 +54,10 @@ public class CloudFoundryHealthWebEndpointManagementContextConfiguration {\n \t\t@Bean\n \t\t@ConditionalOnMissingBean\n \t\t@ConditionalOnEnabledEndpoint\n-\t\t@ConditionalOnBean(HealthEndpoint.class)\n+\t\t@ConditionalOnBean({ HealthEndpoint.class, HealthEndpointWebExtension.class })\n \t\tpublic CloudFoundryHealthEndpointWebExtension cloudFoundryHealthEndpointWebExtension(\n-\t\t\t\tHealthEndpoint healthEndpoint, HealthStatusHttpMapper healthStatusHttpMapper) {\n-\t\t\tHealthEndpoint delegate = new HealthEndpoint(healthEndpoint.getHealthIndicator(), true);\n-\t\t\treturn new CloudFoundryHealthEndpointWebExtension(delegate, healthStatusHttpMapper);\n+\t\t\t\tHealthEndpointWebExtension healthEndpointWebExtension) {\n+\t\t\treturn new CloudFoundryHealthEndpointWebExtension(healthEndpointWebExtension);\n \t\t}\n \n \t}\n@@ -66,12 +69,12 @@ public class CloudFoundryHealthWebEndpointManagementContextConfiguration {\n \t\t@Bean\n \t\t@ConditionalOnMissingBean\n \t\t@ConditionalOnEnabledEndpoint\n-\t\t@ConditionalOnBean(HealthEndpoint.class)\n+\t\t@ConditionalOnBean({ HealthEndpoint.class,\n+\t\t\t\tReactiveHealthEndpointWebExtension.class })\n \t\tpublic CloudFoundryReactiveHealthEndpointWebExtension cloudFoundryReactiveHealthEndpointWebExtension(\n-\t\t\t\tReactiveHealthIndicator reactiveHealthIndicator,\n-\t\t\t\tHealthStatusHttpMapper healthStatusHttpMapper) {\n-\t\t\treturn new CloudFoundryReactiveHealthEndpointWebExtension(reactiveHealthIndicator,\n-\t\t\t\t\thealthStatusHttpMapper);\n+\t\t\t\tReactiveHealthEndpointWebExtension reactiveHealthEndpointWebExtension) {\n+\t\t\treturn new CloudFoundryReactiveHealthEndpointWebExtension(\n+\t\t\t\t\treactiveHealthEndpointWebExtension);\n \t\t}\n \n \t}\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.cloudfoundry;\n\nimport org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive.CloudFoundryReactiveHealthEndpointWebExtension;\nimport org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive.ReactiveCloudFoundryActuatorAutoConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.cloudfoundry.servlet.CloudFoundryActuatorAutoConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.cloudfoundry.servlet.CloudFoundryHealthEndpointWebExtension;\nimport org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\nimport org.springframework.boot.actuate.autoconfigure.health.HealthEndpointAutoConfiguration;\nimport org.springframework.boot.actuate.health.HealthEndpoint;\nimport org.springframework.boot.actuate.health.HealthEndpointWebExtension;\nimport org.springframework.boot.actuate.health.ReactiveHealthEndpointWebExtension;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.cloud.CloudPlatform;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Configuration for Cloud Foundry Health endpoint extensions.\n *\n * @author Madhura Bhave\n */\n@Configuration\n@ConditionalOnCloudPlatform(CloudPlatform.CLOUD_FOUNDRY)\n@AutoConfigureBefore({ ReactiveCloudFoundryActuatorAutoConfiguration.class,\n\t\tCloudFoundryActuatorAutoConfiguration.class })\n@AutoConfigureAfter(HealthEndpointAutoConfiguration.class)\npublic class CloudFoundryHealthWebEndpointManagementContextConfiguration {\n\n\t@Configuration\n\t@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n\tstatic class ServletWebHealthConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnEnabledEndpoint\n\t\t@ConditionalOnBean({ HealthEndpoint.class, HealthEndpointWebExtension.class })\n\t\tpublic CloudFoundryHealthEndpointWebExtension cloudFoundryHealthEndpointWebExtension(\n\t\t\t\tHealthEndpointWebExtension healthEndpointWebExtension) {\n\t\t\treturn new CloudFoundryHealthEndpointWebExtension(healthEndpointWebExtension);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)\n\tstatic class ReactiveWebHealthConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnEnabledEndpoint\n\t\t@ConditionalOnBean({ HealthEndpoint.class,\n\t\t\t\tReactiveHealthEndpointWebExtension.class })\n\t\tpublic CloudFoundryReactiveHealthEndpointWebExtension cloudFoundryReactiveHealthEndpointWebExtension(\n\t\t\t\tReactiveHealthEndpointWebExtension reactiveHealthEndpointWebExtension) {\n\t\t\treturn new CloudFoundryReactiveHealthEndpointWebExtension(\n\t\t\t\t\treactiveHealthEndpointWebExtension);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.cloudfoundry;\n\nimport org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive.CloudFoundryReactiveHealthEndpointWebExtension;\nimport org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive.ReactiveCloudFoundryActuatorAutoConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.cloudfoundry.servlet.CloudFoundryActuatorAutoConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.cloudfoundry.servlet.CloudFoundryHealthEndpointWebExtension;\nimport org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\nimport org.springframework.boot.actuate.autoconfigure.health.HealthEndpointAutoConfiguration;\nimport org.springframework.boot.actuate.health.HealthEndpoint;\nimport org.springframework.boot.actuate.health.HealthStatusHttpMapper;\nimport org.springframework.boot.actuate.health.ReactiveHealthIndicator;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Configuration for Cloud Foundry Health endpoint extensions.\n *\n * @author Madhura Bhave\n */\n@Configuration\n@AutoConfigureBefore({ ReactiveCloudFoundryActuatorAutoConfiguration.class, CloudFoundryActuatorAutoConfiguration.class })\n@AutoConfigureAfter(HealthEndpointAutoConfiguration.class)\npublic class CloudFoundryHealthWebEndpointManagementContextConfiguration {\n\n\t@Configuration\n\t@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n\tstatic class ServletWebHealthConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnEnabledEndpoint\n\t\t@ConditionalOnBean(HealthEndpoint.class)\n\t\tpublic CloudFoundryHealthEndpointWebExtension cloudFoundryHealthEndpointWebExtension(\n\t\t\t\tHealthEndpoint healthEndpoint, HealthStatusHttpMapper healthStatusHttpMapper) {\n\t\t\tHealthEndpoint delegate = new HealthEndpoint(healthEndpoint.getHealthIndicator(), true);\n\t\t\treturn new CloudFoundryHealthEndpointWebExtension(delegate, healthStatusHttpMapper);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)\n\tstatic class ReactiveWebHealthConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnEnabledEndpoint\n\t\t@ConditionalOnBean(HealthEndpoint.class)\n\t\tpublic CloudFoundryReactiveHealthEndpointWebExtension cloudFoundryReactiveHealthEndpointWebExtension(\n\t\t\t\tReactiveHealthIndicator reactiveHealthIndicator,\n\t\t\t\tHealthStatusHttpMapper healthStatusHttpMapper) {\n\t\t\treturn new CloudFoundryReactiveHealthEndpointWebExtension(reactiveHealthIndicator,\n\t\t\t\t\thealthStatusHttpMapper);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
