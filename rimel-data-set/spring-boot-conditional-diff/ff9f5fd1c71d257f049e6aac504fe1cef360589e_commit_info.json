{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnSingleCandidateTests.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnSingleCandidateTests.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -171,7 +171,7 @@ class ConditionalOnSingleCandidateTests {\n \t}\n \n \t@Configuration(proxyBeanMethods = false)\n-\t@ConditionalOnSingleCandidate(value = String.class, type = "java.lang.String")\n+\t@ConditionalOnSingleCandidate(value = String.class, type = "java.lang.Integer")\n \tstatic class OnBeanSingleCandidateTwoTypesConfiguration {\n \n \t}\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalStateException;\n\n/**\n * Tests for {@link ConditionalOnSingleCandidate @ConditionalOnSingleCandidate}.\n *\n * @author Stephane Nicoll\n * @author Andy Wilkinson\n */\nclass ConditionalOnSingleCandidateTests {\n\n\tprivate final AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n\n\t@AfterEach\n\tvoid close() {\n\t\tif (this.context != null) {\n\t\t\tthis.context.close();\n\t\t}\n\t}\n\n\t@Test\n\tvoid singleCandidateNoCandidate() {\n\t\tload(OnBeanSingleCandidateConfiguration.class);\n\t\tassertThat(this.context.containsBean("baz")).isFalse();\n\t}\n\n\t@Test\n\tvoid singleCandidateOneCandidate() {\n\t\tload(FooConfiguration.class, OnBeanSingleCandidateConfiguration.class);\n\t\tassertThat(this.context.containsBean("baz")).isTrue();\n\t\tassertThat(this.context.getBean("baz")).isEqualTo("foo");\n\t}\n\n\t@Test\n\tvoid singleCandidateInAncestorsOneCandidateInCurrent() {\n\t\tload();\n\t\tAnnotationConfigApplicationContext child = new AnnotationConfigApplicationContext();\n\t\tchild.register(FooConfiguration.class, OnBeanSingleCandidateInAncestorsConfiguration.class);\n\t\tchild.setParent(this.context);\n\t\tchild.refresh();\n\t\tassertThat(child.containsBean("baz")).isFalse();\n\t\tchild.close();\n\t}\n\n\t@Test\n\tvoid singleCandidateInAncestorsOneCandidateInParent() {\n\t\tload(FooConfiguration.class);\n\t\tAnnotationConfigApplicationContext child = new AnnotationConfigApplicationContext();\n\t\tchild.register(OnBeanSingleCandidateInAncestorsConfiguration.class);\n\t\tchild.setParent(this.context);\n\t\tchild.refresh();\n\t\tassertThat(child.containsBean("baz")).isTrue();\n\t\tassertThat(child.getBean("baz")).isEqualTo("foo");\n\t\tchild.close();\n\t}\n\n\t@Test\n\tvoid singleCandidateInAncestorsOneCandidateInGrandparent() {\n\t\tload(FooConfiguration.class);\n\t\tAnnotationConfigApplicationContext parent = new AnnotationConfigApplicationContext();\n\t\tparent.setParent(this.context);\n\t\tparent.refresh();\n\t\tAnnotationConfigApplicationContext child = new AnnotationConfigApplicationContext();\n\t\tchild.register(OnBeanSingleCandidateInAncestorsConfiguration.class);\n\t\tchild.setParent(parent);\n\t\tchild.refresh();\n\t\tassertThat(child.containsBean("baz")).isTrue();\n\t\tassertThat(child.getBean("baz")).isEqualTo("foo");\n\t\tchild.close();\n\t\tparent.close();\n\t}\n\n\t@Test\n\tvoid singleCandidateMultipleCandidates() {\n\t\tload(FooConfiguration.class, BarConfiguration.class, OnBeanSingleCandidateConfiguration.class);\n\t\tassertThat(this.context.containsBean("baz")).isFalse();\n\t}\n\n\t@Test\n\tvoid singleCandidateMultipleCandidatesOnePrimary() {\n\t\tload(FooPrimaryConfiguration.class, BarConfiguration.class, OnBeanSingleCandidateConfiguration.class);\n\t\tassertThat(this.context.containsBean("baz")).isTrue();\n\t\tassertThat(this.context.getBean("baz")).isEqualTo("foo");\n\t}\n\n\t@Test\n\tvoid singleCandidateMultipleCandidatesMultiplePrimary() {\n\t\tload(FooPrimaryConfiguration.class, BarPrimaryConfiguration.class, OnBeanSingleCandidateConfiguration.class);\n\t\tassertThat(this.context.containsBean("baz")).isFalse();\n\t}\n\n\t@Test\n\tvoid invalidAnnotationTwoTypes() {\n\t\tassertThatIllegalStateException().isThrownBy(() -> load(OnBeanSingleCandidateTwoTypesConfiguration.class))\n\t\t\t\t.withCauseInstanceOf(IllegalArgumentException.class)\n\t\t\t\t.withMessageContaining(OnBeanSingleCandidateTwoTypesConfiguration.class.getName());\n\t}\n\n\t@Test\n\tvoid invalidAnnotationNoType() {\n\t\tassertThatIllegalStateException().isThrownBy(() -> load(OnBeanSingleCandidateNoTypeConfiguration.class))\n\t\t\t\t.withCauseInstanceOf(IllegalArgumentException.class)\n\t\t\t\t.withMessageContaining(OnBeanSingleCandidateNoTypeConfiguration.class.getName());\n\t}\n\n\t@Test\n\tvoid singleCandidateMultipleCandidatesInContextHierarchy() {\n\t\tload(FooPrimaryConfiguration.class, BarConfiguration.class);\n\t\ttry (AnnotationConfigApplicationContext child = new AnnotationConfigApplicationContext()) {\n\t\t\tchild.setParent(this.context);\n\t\t\tchild.register(OnBeanSingleCandidateConfiguration.class);\n\t\t\tchild.refresh();\n\t\t\tassertThat(child.containsBean("baz")).isTrue();\n\t\t\tassertThat(child.getBean("baz")).isEqualTo("foo");\n\t\t}\n\t}\n\n\tprivate void load(Class<?>... classes) {\n\t\tif (classes.length > 0) {\n\t\t\tthis.context.register(classes);\n\t\t}\n\t\tthis.context.refresh();\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnSingleCandidate(String.class)\n\tstatic class OnBeanSingleCandidateConfiguration {\n\n\t\t@Bean\n\t\tString baz(String s) {\n\t\t\treturn s;\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnSingleCandidate(value = String.class, search = SearchStrategy.ANCESTORS)\n\tstatic class OnBeanSingleCandidateInAncestorsConfiguration {\n\n\t\t@Bean\n\t\tString baz(String s) {\n\t\t\treturn s;\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnSingleCandidate(value = String.class, type = "java.lang.Integer")\n\tstatic class OnBeanSingleCandidateTwoTypesConfiguration {\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnSingleCandidate\n\tstatic class OnBeanSingleCandidateNoTypeConfiguration {\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\tstatic class FooConfiguration {\n\n\t\t@Bean\n\t\tString foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\tstatic class FooPrimaryConfiguration {\n\n\t\t@Bean\n\t\t@Primary\n\t\tString foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\tstatic class BarConfiguration {\n\n\t\t@Bean\n\t\tString bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\tstatic class BarPrimaryConfiguration {\n\n\t\t@Bean\n\t\t@Primary\n\t\tString bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalStateException;\n\n/**\n * Tests for {@link ConditionalOnSingleCandidate @ConditionalOnSingleCandidate}.\n *\n * @author Stephane Nicoll\n * @author Andy Wilkinson\n */\nclass ConditionalOnSingleCandidateTests {\n\n\tprivate final AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n\n\t@AfterEach\n\tvoid close() {\n\t\tif (this.context != null) {\n\t\t\tthis.context.close();\n\t\t}\n\t}\n\n\t@Test\n\tvoid singleCandidateNoCandidate() {\n\t\tload(OnBeanSingleCandidateConfiguration.class);\n\t\tassertThat(this.context.containsBean("baz")).isFalse();\n\t}\n\n\t@Test\n\tvoid singleCandidateOneCandidate() {\n\t\tload(FooConfiguration.class, OnBeanSingleCandidateConfiguration.class);\n\t\tassertThat(this.context.containsBean("baz")).isTrue();\n\t\tassertThat(this.context.getBean("baz")).isEqualTo("foo");\n\t}\n\n\t@Test\n\tvoid singleCandidateInAncestorsOneCandidateInCurrent() {\n\t\tload();\n\t\tAnnotationConfigApplicationContext child = new AnnotationConfigApplicationContext();\n\t\tchild.register(FooConfiguration.class, OnBeanSingleCandidateInAncestorsConfiguration.class);\n\t\tchild.setParent(this.context);\n\t\tchild.refresh();\n\t\tassertThat(child.containsBean("baz")).isFalse();\n\t\tchild.close();\n\t}\n\n\t@Test\n\tvoid singleCandidateInAncestorsOneCandidateInParent() {\n\t\tload(FooConfiguration.class);\n\t\tAnnotationConfigApplicationContext child = new AnnotationConfigApplicationContext();\n\t\tchild.register(OnBeanSingleCandidateInAncestorsConfiguration.class);\n\t\tchild.setParent(this.context);\n\t\tchild.refresh();\n\t\tassertThat(child.containsBean("baz")).isTrue();\n\t\tassertThat(child.getBean("baz")).isEqualTo("foo");\n\t\tchild.close();\n\t}\n\n\t@Test\n\tvoid singleCandidateInAncestorsOneCandidateInGrandparent() {\n\t\tload(FooConfiguration.class);\n\t\tAnnotationConfigApplicationContext parent = new AnnotationConfigApplicationContext();\n\t\tparent.setParent(this.context);\n\t\tparent.refresh();\n\t\tAnnotationConfigApplicationContext child = new AnnotationConfigApplicationContext();\n\t\tchild.register(OnBeanSingleCandidateInAncestorsConfiguration.class);\n\t\tchild.setParent(parent);\n\t\tchild.refresh();\n\t\tassertThat(child.containsBean("baz")).isTrue();\n\t\tassertThat(child.getBean("baz")).isEqualTo("foo");\n\t\tchild.close();\n\t\tparent.close();\n\t}\n\n\t@Test\n\tvoid singleCandidateMultipleCandidates() {\n\t\tload(FooConfiguration.class, BarConfiguration.class, OnBeanSingleCandidateConfiguration.class);\n\t\tassertThat(this.context.containsBean("baz")).isFalse();\n\t}\n\n\t@Test\n\tvoid singleCandidateMultipleCandidatesOnePrimary() {\n\t\tload(FooPrimaryConfiguration.class, BarConfiguration.class, OnBeanSingleCandidateConfiguration.class);\n\t\tassertThat(this.context.containsBean("baz")).isTrue();\n\t\tassertThat(this.context.getBean("baz")).isEqualTo("foo");\n\t}\n\n\t@Test\n\tvoid singleCandidateMultipleCandidatesMultiplePrimary() {\n\t\tload(FooPrimaryConfiguration.class, BarPrimaryConfiguration.class, OnBeanSingleCandidateConfiguration.class);\n\t\tassertThat(this.context.containsBean("baz")).isFalse();\n\t}\n\n\t@Test\n\tvoid invalidAnnotationTwoTypes() {\n\t\tassertThatIllegalStateException().isThrownBy(() -> load(OnBeanSingleCandidateTwoTypesConfiguration.class))\n\t\t\t\t.withCauseInstanceOf(IllegalArgumentException.class)\n\t\t\t\t.withMessageContaining(OnBeanSingleCandidateTwoTypesConfiguration.class.getName());\n\t}\n\n\t@Test\n\tvoid invalidAnnotationNoType() {\n\t\tassertThatIllegalStateException().isThrownBy(() -> load(OnBeanSingleCandidateNoTypeConfiguration.class))\n\t\t\t\t.withCauseInstanceOf(IllegalArgumentException.class)\n\t\t\t\t.withMessageContaining(OnBeanSingleCandidateNoTypeConfiguration.class.getName());\n\t}\n\n\t@Test\n\tvoid singleCandidateMultipleCandidatesInContextHierarchy() {\n\t\tload(FooPrimaryConfiguration.class, BarConfiguration.class);\n\t\ttry (AnnotationConfigApplicationContext child = new AnnotationConfigApplicationContext()) {\n\t\t\tchild.setParent(this.context);\n\t\t\tchild.register(OnBeanSingleCandidateConfiguration.class);\n\t\t\tchild.refresh();\n\t\t\tassertThat(child.containsBean("baz")).isTrue();\n\t\t\tassertThat(child.getBean("baz")).isEqualTo("foo");\n\t\t}\n\t}\n\n\tprivate void load(Class<?>... classes) {\n\t\tif (classes.length > 0) {\n\t\t\tthis.context.register(classes);\n\t\t}\n\t\tthis.context.refresh();\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnSingleCandidate(String.class)\n\tstatic class OnBeanSingleCandidateConfiguration {\n\n\t\t@Bean\n\t\tString baz(String s) {\n\t\t\treturn s;\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnSingleCandidate(value = String.class, search = SearchStrategy.ANCESTORS)\n\tstatic class OnBeanSingleCandidateInAncestorsConfiguration {\n\n\t\t@Bean\n\t\tString baz(String s) {\n\t\t\treturn s;\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnSingleCandidate(value = String.class, type = "java.lang.String")\n\tstatic class OnBeanSingleCandidateTwoTypesConfiguration {\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnSingleCandidate\n\tstatic class OnBeanSingleCandidateNoTypeConfiguration {\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\tstatic class FooConfiguration {\n\n\t\t@Bean\n\t\tString foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\tstatic class FooPrimaryConfiguration {\n\n\t\t@Bean\n\t\t@Primary\n\t\tString foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\tstatic class BarConfiguration {\n\n\t\t@Bean\n\t\tString bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\tstatic class BarPrimaryConfiguration {\n\n\t\t@Bean\n\t\t@Primary\n\t\tString bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
