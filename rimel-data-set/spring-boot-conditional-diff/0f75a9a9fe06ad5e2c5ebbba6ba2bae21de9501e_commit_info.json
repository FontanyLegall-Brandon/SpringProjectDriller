{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/jdbc/HikariDataSourceMetricsConfiguration.java'), '_new_path': None, 'change_type': <ModificationType.DELETE: 4>, 'diff': '@@ -1,60 +0,0 @@\n-/*\n- * Copyright 2012-2018 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the "License");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an "AS IS" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.boot.actuate.autoconfigure.metrics.jdbc;\n-\n-import java.util.Collection;\n-\n-import javax.sql.DataSource;\n-\n-import com.zaxxer.hikari.HikariDataSource;\n-import com.zaxxer.hikari.metrics.micrometer.MicrometerMetricsTrackerFactory;\n-import io.micrometer.core.instrument.MeterRegistry;\n-\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n-import org.springframework.context.annotation.Configuration;\n-\n-/**\n- * Specific configuration for {@link HikariDataSource} metrics.\n- *\n- * @author Tommy Ludwig\n- * @author Stephane Nicoll\n- */\n-@Configuration\n-@ConditionalOnClass(HikariDataSource.class)\n-class HikariDataSourceMetricsConfiguration {\n-\n-\tprivate final MeterRegistry registry;\n-\n-\tHikariDataSourceMetricsConfiguration(MeterRegistry registry) {\n-\t\tthis.registry = registry;\n-\t}\n-\n-\t@Autowired\n-\tpublic void bindMetricsRegistryToHikariDataSources(\n-\t\t\tCollection<DataSource> dataSources) {\n-\t\tdataSources.stream().filter(HikariDataSource.class::isInstance)\n-\t\t\t\t.map(HikariDataSource.class::cast)\n-\t\t\t\t.forEach(this::bindMetricsRegistryToHikariDataSource);\n-\t}\n-\n-\tprivate void bindMetricsRegistryToHikariDataSource(HikariDataSource hikari) {\n-\t\thikari.setMetricsTrackerFactory(\n-\t\t\t\tnew MicrometerMetricsTrackerFactory(this.registry));\n-\t}\n-\n-}\n', 'source_code': None, 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics.jdbc;\n\nimport java.util.Collection;\n\nimport javax.sql.DataSource;\n\nimport com.zaxxer.hikari.HikariDataSource;\nimport com.zaxxer.hikari.metrics.micrometer.MicrometerMetricsTrackerFactory;\nimport io.micrometer.core.instrument.MeterRegistry;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Specific configuration for {@link HikariDataSource} metrics.\n *\n * @author Tommy Ludwig\n * @author Stephane Nicoll\n */\n@Configuration\n@ConditionalOnClass(HikariDataSource.class)\nclass HikariDataSourceMetricsConfiguration {\n\n\tprivate final MeterRegistry registry;\n\n\tHikariDataSourceMetricsConfiguration(MeterRegistry registry) {\n\t\tthis.registry = registry;\n\t}\n\n\t@Autowired\n\tpublic void bindMetricsRegistryToHikariDataSources(\n\t\t\tCollection<DataSource> dataSources) {\n\t\tdataSources.stream().filter(HikariDataSource.class::isInstance)\n\t\t\t\t.map(HikariDataSource.class::cast)\n\t\t\t\t.forEach(this::bindMetricsRegistryToHikariDataSource);\n\t}\n\n\tprivate void bindMetricsRegistryToHikariDataSource(HikariDataSource hikari) {\n\t\thikari.setMetricsTrackerFactory(\n\t\t\t\tnew MicrometerMetricsTrackerFactory(this.registry));\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
