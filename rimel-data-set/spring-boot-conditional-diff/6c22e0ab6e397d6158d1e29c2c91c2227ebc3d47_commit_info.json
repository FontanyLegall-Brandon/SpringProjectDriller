{'_old_path': PosixPath('spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/web/ServerPropertiesConfiguration.java'), '_new_path': PosixPath('spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/web/ServerPropertiesConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -19,12 +19,14 @@ import org.apache.catalina.valves.AccessLogValve;\n import org.apache.catalina.valves.RemoteIpValve;\n import org.springframework.beans.factory.BeanFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.bootstrap.context.annotation.ConditionalOnMissingBean;\n import org.springframework.bootstrap.context.annotation.EnableConfigurationProperties;\n import org.springframework.bootstrap.context.embedded.ConfigurableEmbeddedServletContainerFactory;\n import org.springframework.bootstrap.context.embedded.EmbeddedServletContainerCustomizer;\n import org.springframework.bootstrap.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;\n import org.springframework.bootstrap.properties.ServerProperties;\n import org.springframework.bootstrap.properties.ServerProperties.Tomcat;\n+import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.util.StringUtils;\n \n@@ -33,12 +35,18 @@ import org.springframework.util.StringUtils;\n  * \n  */\n @Configuration\n-@EnableConfigurationProperties(ServerProperties.class)\n+@EnableConfigurationProperties\n public class ServerPropertiesConfiguration implements EmbeddedServletContainerCustomizer {\n \n \t@Autowired\n \tprivate BeanFactory beanFactory;\n \n+\t@ConditionalOnMissingBean(ServerProperties.class)\n+\t@Bean(name = "org.springframework.bootstrap.properties.ServerProperties")\n+\tpublic ServerProperties serverProperties() {\n+\t\treturn new ServerProperties();\n+\t}\n+\n \t@Override\n \tpublic void customize(ConfigurableEmbeddedServletContainerFactory factory) {\n \n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.bootstrap.autoconfigure.web;\n\nimport org.apache.catalina.valves.AccessLogValve;\nimport org.apache.catalina.valves.RemoteIpValve;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.bootstrap.context.annotation.ConditionalOnMissingBean;\nimport org.springframework.bootstrap.context.annotation.EnableConfigurationProperties;\nimport org.springframework.bootstrap.context.embedded.ConfigurableEmbeddedServletContainerFactory;\nimport org.springframework.bootstrap.context.embedded.EmbeddedServletContainerCustomizer;\nimport org.springframework.bootstrap.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;\nimport org.springframework.bootstrap.properties.ServerProperties;\nimport org.springframework.bootstrap.properties.ServerProperties.Tomcat;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.util.StringUtils;\n\n/**\n * @author Dave Syer\n * \n */\n@Configuration\n@EnableConfigurationProperties\npublic class ServerPropertiesConfiguration implements EmbeddedServletContainerCustomizer {\n\n\t@Autowired\n\tprivate BeanFactory beanFactory;\n\n\t@ConditionalOnMissingBean(ServerProperties.class)\n\t@Bean(name = "org.springframework.bootstrap.properties.ServerProperties")\n\tpublic ServerProperties serverProperties() {\n\t\treturn new ServerProperties();\n\t}\n\n\t@Override\n\tpublic void customize(ConfigurableEmbeddedServletContainerFactory factory) {\n\n\t\t// Need to do a look up here to make it lazy\n\t\tServerProperties server = this.beanFactory.getBean(ServerProperties.class);\n\n\t\tfactory.setPort(server.getPort());\n\t\tfactory.setAddress(server.getAddress());\n\t\tfactory.setContextPath(server.getContextPath());\n\n\t\tif (factory instanceof TomcatEmbeddedServletContainerFactory) {\n\t\t\tconfigureTomcat((TomcatEmbeddedServletContainerFactory) factory, server);\n\t\t}\n\n\t}\n\n\tprivate void configureTomcat(TomcatEmbeddedServletContainerFactory tomcatFactory,\n\t\t\tServerProperties configuration) {\n\n\t\tTomcat tomcat = configuration.getTomcat();\n\t\tif (tomcat.getBasedir() != null) {\n\t\t\ttomcatFactory.setBaseDirectory(tomcat.getBasedir());\n\t\t}\n\n\t\tString remoteIpHeader = tomcat.getRemoteIpHeader();\n\t\tString protocolHeader = tomcat.getProtocolHeader();\n\n\t\tif (StringUtils.hasText(remoteIpHeader) || StringUtils.hasText(protocolHeader)) {\n\t\t\tRemoteIpValve valve = new RemoteIpValve();\n\t\t\tvalve.setRemoteIpHeader(remoteIpHeader);\n\t\t\tvalve.setProtocolHeader(protocolHeader);\n\t\t\ttomcatFactory.addContextValves(valve);\n\t\t}\n\n\t\tString pattern = tomcat.getAccessLogPattern();\n\t\tif (pattern != null) {\n\t\t\tAccessLogValve valve = new AccessLogValve();\n\t\t\tvalve.setPattern(pattern);\n\t\t\tvalve.setSuffix(".log");\n\t\t\ttomcatFactory.addContextValves(valve);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.bootstrap.autoconfigure.web;\n\nimport org.apache.catalina.valves.AccessLogValve;\nimport org.apache.catalina.valves.RemoteIpValve;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.bootstrap.context.annotation.EnableConfigurationProperties;\nimport org.springframework.bootstrap.context.embedded.ConfigurableEmbeddedServletContainerFactory;\nimport org.springframework.bootstrap.context.embedded.EmbeddedServletContainerCustomizer;\nimport org.springframework.bootstrap.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;\nimport org.springframework.bootstrap.properties.ServerProperties;\nimport org.springframework.bootstrap.properties.ServerProperties.Tomcat;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.util.StringUtils;\n\n/**\n * @author Dave Syer\n * \n */\n@Configuration\n@EnableConfigurationProperties(ServerProperties.class)\npublic class ServerPropertiesConfiguration implements EmbeddedServletContainerCustomizer {\n\n\t@Autowired\n\tprivate BeanFactory beanFactory;\n\n\t@Override\n\tpublic void customize(ConfigurableEmbeddedServletContainerFactory factory) {\n\n\t\t// Need to do a look up here to make it lazy\n\t\tServerProperties server = this.beanFactory.getBean(ServerProperties.class);\n\n\t\tfactory.setPort(server.getPort());\n\t\tfactory.setAddress(server.getAddress());\n\t\tfactory.setContextPath(server.getContextPath());\n\n\t\tif (factory instanceof TomcatEmbeddedServletContainerFactory) {\n\t\t\tconfigureTomcat((TomcatEmbeddedServletContainerFactory) factory, server);\n\t\t}\n\n\t}\n\n\tprivate void configureTomcat(TomcatEmbeddedServletContainerFactory tomcatFactory,\n\t\t\tServerProperties configuration) {\n\n\t\tTomcat tomcat = configuration.getTomcat();\n\t\tif (tomcat.getBasedir() != null) {\n\t\t\ttomcatFactory.setBaseDirectory(tomcat.getBasedir());\n\t\t}\n\n\t\tString remoteIpHeader = tomcat.getRemoteIpHeader();\n\t\tString protocolHeader = tomcat.getProtocolHeader();\n\n\t\tif (StringUtils.hasText(remoteIpHeader) || StringUtils.hasText(protocolHeader)) {\n\t\t\tRemoteIpValve valve = new RemoteIpValve();\n\t\t\tvalve.setRemoteIpHeader(remoteIpHeader);\n\t\t\tvalve.setProtocolHeader(protocolHeader);\n\t\t\ttomcatFactory.addContextValves(valve);\n\t\t}\n\n\t\tString pattern = tomcat.getAccessLogPattern();\n\t\tif (pattern != null) {\n\t\t\tAccessLogValve valve = new AccessLogValve();\n\t\t\tvalve.setPattern(pattern);\n\t\t\tvalve.setSuffix(".log");\n\t\t\ttomcatFactory.addContextValves(valve);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
