{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/JdbcSessionConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/JdbcSessionConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -20,11 +20,13 @@ import javax.sql.DataSource;\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.core.io.ResourceLoader;\n+import org.springframework.jdbc.core.JdbcTemplate;\n import org.springframework.session.SessionRepository;\n import org.springframework.session.jdbc.config.annotation.web.http.JdbcHttpSessionConfiguration;\n \n@@ -36,6 +38,7 @@ import org.springframework.session.jdbc.config.annotation.web.http.JdbcHttpSessi\n  * @author Vedran Pavic\n  */\n @Configuration\n+@ConditionalOnClass(JdbcTemplate.class)\n @ConditionalOnMissingBean(SessionRepository.class)\n @ConditionalOnBean(DataSource.class)\n @Conditional(SessionCondition.class)\n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.session;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.session.SessionRepository;\nimport org.springframework.session.jdbc.config.annotation.web.http.JdbcHttpSessionConfiguration;\n\n/**\n * JDBC backed session configuration.\n *\n * @author Eddú Meléndez\n * @author Stephane Nicoll\n * @author Vedran Pavic\n */\n@Configuration\n@ConditionalOnClass(JdbcTemplate.class)\n@ConditionalOnMissingBean(SessionRepository.class)\n@ConditionalOnBean(DataSource.class)\n@Conditional(SessionCondition.class)\nclass JdbcSessionConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic JdbcSessionDatabaseInitializer jdbcSessionDatabaseInitializer(\n\t\t\tSessionProperties properties, DataSource dataSource,\n\t\t\tResourceLoader resourceLoader) {\n\t\treturn new JdbcSessionDatabaseInitializer(properties, dataSource, resourceLoader);\n\t}\n\n\t@Configuration\n\tpublic static class SpringBootJdbcHttpSessionConfiguration\n\t\t\textends JdbcHttpSessionConfiguration {\n\n\t\t@Autowired\n\t\tpublic void customize(SessionProperties sessionProperties) {\n\t\t\tInteger timeout = sessionProperties.getTimeout();\n\t\t\tif (timeout != null) {\n\t\t\t\tsetMaxInactiveIntervalInSeconds(timeout);\n\t\t\t}\n\t\t\tsetTableName(sessionProperties.getJdbc().getTableName());\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.session;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.session.SessionRepository;\nimport org.springframework.session.jdbc.config.annotation.web.http.JdbcHttpSessionConfiguration;\n\n/**\n * JDBC backed session configuration.\n *\n * @author Eddú Meléndez\n * @author Stephane Nicoll\n * @author Vedran Pavic\n */\n@Configuration\n@ConditionalOnMissingBean(SessionRepository.class)\n@ConditionalOnBean(DataSource.class)\n@Conditional(SessionCondition.class)\nclass JdbcSessionConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic JdbcSessionDatabaseInitializer jdbcSessionDatabaseInitializer(\n\t\t\tSessionProperties properties, DataSource dataSource,\n\t\t\tResourceLoader resourceLoader) {\n\t\treturn new JdbcSessionDatabaseInitializer(properties, dataSource, resourceLoader);\n\t}\n\n\t@Configuration\n\tpublic static class SpringBootJdbcHttpSessionConfiguration\n\t\t\textends JdbcHttpSessionConfiguration {\n\n\t\t@Autowired\n\t\tpublic void customize(SessionProperties sessionProperties) {\n\t\t\tInteger timeout = sessionProperties.getTimeout();\n\t\t\tif (timeout != null) {\n\t\t\t\tsetMaxInactiveIntervalInSeconds(timeout);\n\t\t\t}\n\t\t\tsetTableName(sessionProperties.getJdbc().getTableName());\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
