{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -44,9 +44,9 @@ import org.springframework.session.SessionRepository;\n  * @since 1.4.0\n  */\n @Configuration\n+@ConditionalOnMissingBean(SessionRepository.class)\n @ConditionalOnClass(Session.class)\n @ConditionalOnWebApplication\n-@ConditionalOnMissingBean(SessionRepository.class)\n @EnableConfigurationProperties(SessionProperties.class)\n @AutoConfigureAfter({ DataSourceAutoConfiguration.class, HazelcastAutoConfiguration.class,\n \t\tMongoAutoConfiguration.class, RedisAutoConfiguration.class })\n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.session;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration;\nimport org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration;\nimport org.springframework.boot.autoconfigure.session.SessionAutoConfiguration.SessionConfigurationImportSelector;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.ImportSelector;\nimport org.springframework.core.type.AnnotationMetadata;\nimport org.springframework.session.Session;\nimport org.springframework.session.SessionRepository;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Session.\n *\n * @author Andy Wilkinson\n * @author Tommy Ludwig\n * @author Eddú Meléndez\n * @author Stephane Nicoll\n * @since 1.4.0\n */\n@Configuration\n@ConditionalOnMissingBean(SessionRepository.class)\n@ConditionalOnClass(Session.class)\n@ConditionalOnWebApplication\n@EnableConfigurationProperties(SessionProperties.class)\n@AutoConfigureAfter({ DataSourceAutoConfiguration.class, HazelcastAutoConfiguration.class,\n\t\tMongoAutoConfiguration.class, RedisAutoConfiguration.class })\n@Import(SessionConfigurationImportSelector.class)\npublic class SessionAutoConfiguration {\n\n\t/**\n\t * {@link ImportSelector} to add {@link StoreType} configuration classes.\n\t */\n\tstatic class SessionConfigurationImportSelector implements ImportSelector {\n\n\t\t@Override\n\t\tpublic String[] selectImports(AnnotationMetadata importingClassMetadata) {\n\t\t\tStoreType[] types = StoreType.values();\n\t\t\tString[] imports = new String[types.length];\n\t\t\tfor (int i = 0; i < types.length; i++) {\n\t\t\t\timports[i] = SessionStoreMappings.getConfigurationClass(types[i]);\n\t\t\t}\n\t\t\treturn imports;\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.session;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration;\nimport org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration;\nimport org.springframework.boot.autoconfigure.session.SessionAutoConfiguration.SessionConfigurationImportSelector;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.ImportSelector;\nimport org.springframework.core.type.AnnotationMetadata;\nimport org.springframework.session.Session;\nimport org.springframework.session.SessionRepository;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Session.\n *\n * @author Andy Wilkinson\n * @author Tommy Ludwig\n * @author Eddú Meléndez\n * @author Stephane Nicoll\n * @since 1.4.0\n */\n@Configuration\n@ConditionalOnClass(Session.class)\n@ConditionalOnWebApplication\n@ConditionalOnMissingBean(SessionRepository.class)\n@EnableConfigurationProperties(SessionProperties.class)\n@AutoConfigureAfter({ DataSourceAutoConfiguration.class, HazelcastAutoConfiguration.class,\n\t\tMongoAutoConfiguration.class, RedisAutoConfiguration.class })\n@Import(SessionConfigurationImportSelector.class)\npublic class SessionAutoConfiguration {\n\n\t/**\n\t * {@link ImportSelector} to add {@link StoreType} configuration classes.\n\t */\n\tstatic class SessionConfigurationImportSelector implements ImportSelector {\n\n\t\t@Override\n\t\tpublic String[] selectImports(AnnotationMetadata importingClassMetadata) {\n\t\t\tStoreType[] types = StoreType.values();\n\t\t\tString[] imports = new String[types.length];\n\t\t\tfor (int i = 0; i < types.length; i++) {\n\t\t\t\timports[i] = SessionStoreMappings.getConfigurationClass(types[i]);\n\t\t\t}\n\t\t\treturn imports;\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
