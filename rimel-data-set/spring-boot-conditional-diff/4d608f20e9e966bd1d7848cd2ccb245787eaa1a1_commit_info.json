{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,17 +16,39 @@\n \n package org.springframework.boot.autoconfigure.security;\n \n+import java.lang.reflect.Method;\n+import java.util.Collection;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.security.SecurityProperties.User;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Import;\n import org.springframework.security.authentication.AuthenticationManager;\n+import org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder;\n+import org.springframework.security.config.annotation.ObjectPostProcessor;\n+import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.util.ReflectionUtils;\n \n /**\n- * {@link EnableAutoConfiguration Auto-configuration} for Spring Security.\n+ * {@link EnableAutoConfiguration Auto-configuration} for Spring Security. Provides an\n+ * {@link AuthenticationManager} based on configuration bound to a\n+ * {@link SecurityProperties} bean. There is one user (named "user") whose password is\n+ * random and printed on the console at INFO level during startup. In a webapp this\n+ * configuration also secures all web endpoints (except some well-known static resource)\n+ * locations with HTTP basic security. To replace all the default behaviour in a webapp\n+ * provide a <code>@Configuration</code> with <code>@EnableWebSecurity</code>. To just add\n+ * your own layer of application security in front of the defaults, add a\n+ * <code>@Configuration</code> of type {@link WebSecurityConfigurerAdapter}.\n  * \n  * @author Dave Syer\n  */\n@@ -37,10 +59,67 @@ import org.springframework.security.authentication.AuthenticationManager;\n \t\tAuthenticationManagerConfiguration.class })\n public class SecurityAutoConfiguration {\n \n+\tprivate static Log logger = LogFactory.getLog(SecurityAutoConfiguration.class);\n+\n \t@Bean\n \t@ConditionalOnMissingBean\n \tpublic SecurityProperties securityProperties() {\n \t\treturn new SecurityProperties();\n \t}\n \n+\t@Bean\n+\t@ConditionalOnBean(AuthenticationManagerBuilder.class)\n+\t@ConditionalOnMissingBean\n+\tpublic AuthenticationManager authenticationManager(\n+\t\t\tAuthenticationManagerBuilder builder, ObjectPostProcessor<Object> processor)\n+\t\t\tthrows Exception {\n+\t\tif (!isBuilt(builder)) {\n+\t\t\tauthentication(builder, securityProperties());\n+\t\t}\n+\t\telse if (builder.getOrBuild() == null) {\n+\t\t\tbuilder = new AuthenticationManagerBuilder(processor);\n+\t\t\tauthentication(builder, securityProperties());\n+\t\t}\n+\t\treturn builder.getOrBuild();\n+\t}\n+\n+\t/**\n+\t * Convenience method for building the default AuthenticationManager from\n+\t * SecurityProperties.\n+\t * \n+\t * @param builder the AuthenticationManagerBuilder to use\n+\t * @param security the SecurityProperties in use\n+\t */\n+\tpublic static void authentication(AuthenticationManagerBuilder builder,\n+\t\t\tSecurityProperties security) throws Exception {\n+\n+\t\tif (isBuilt(builder)) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tUser user = security.getUser();\n+\n+\t\tif (user.isDefaultPassword()) {\n+\t\t\tlogger.info("\\n\\nUsing default password for application endpoints: "\n+\t\t\t\t\t+ user.getPassword() + "\\n\\n");\n+\t\t}\n+\n+\t\tSet<String> roles = new LinkedHashSet<String>(user.getRole());\n+\n+\t\tbuilder.inMemoryAuthentication().withUser(user.getName())\n+\t\t\t\t.password(user.getPassword())\n+\t\t\t\t.roles(roles.toArray(new String[roles.size()]));\n+\n+\t}\n+\n+\tprivate static boolean isBuilt(AuthenticationManagerBuilder builder) {\n+\t\tMethod configurers = ReflectionUtils.findMethod(\n+\t\t\t\tAbstractConfiguredSecurityBuilder.class, "getConfigurers");\n+\t\tMethod unbuilt = ReflectionUtils.findMethod(\n+\t\t\t\tAbstractConfiguredSecurityBuilder.class, "isUnbuilt");\n+\t\tReflectionUtils.makeAccessible(configurers);\n+\t\tReflectionUtils.makeAccessible(unbuilt);\n+\t\treturn !((Collection<?>) ReflectionUtils.invokeMethod(configurers, builder))\n+\t\t\t\t.isEmpty() || !((Boolean) ReflectionUtils.invokeMethod(unbuilt, builder));\n+\t}\n }\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security;\n\nimport java.lang.reflect.Method;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.security.SecurityProperties.User;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder;\nimport org.springframework.security.config.annotation.ObjectPostProcessor;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.util.ReflectionUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Security. Provides an\n * {@link AuthenticationManager} based on configuration bound to a\n * {@link SecurityProperties} bean. There is one user (named "user") whose password is\n * random and printed on the console at INFO level during startup. In a webapp this\n * configuration also secures all web endpoints (except some well-known static resource)\n * locations with HTTP basic security. To replace all the default behaviour in a webapp\n * provide a <code>@Configuration</code> with <code>@EnableWebSecurity</code>. To just add\n * your own layer of application security in front of the defaults, add a\n * <code>@Configuration</code> of type {@link WebSecurityConfigurerAdapter}.\n * \n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnClass(AuthenticationManager.class)\n@EnableConfigurationProperties\n@Import({ SpringBootWebSecurityConfiguration.class,\n\t\tAuthenticationManagerConfiguration.class })\npublic class SecurityAutoConfiguration {\n\n\tprivate static Log logger = LogFactory.getLog(SecurityAutoConfiguration.class);\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic SecurityProperties securityProperties() {\n\t\treturn new SecurityProperties();\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(AuthenticationManagerBuilder.class)\n\t@ConditionalOnMissingBean\n\tpublic AuthenticationManager authenticationManager(\n\t\t\tAuthenticationManagerBuilder builder, ObjectPostProcessor<Object> processor)\n\t\t\tthrows Exception {\n\t\tif (!isBuilt(builder)) {\n\t\t\tauthentication(builder, securityProperties());\n\t\t}\n\t\telse if (builder.getOrBuild() == null) {\n\t\t\tbuilder = new AuthenticationManagerBuilder(processor);\n\t\t\tauthentication(builder, securityProperties());\n\t\t}\n\t\treturn builder.getOrBuild();\n\t}\n\n\t/**\n\t * Convenience method for building the default AuthenticationManager from\n\t * SecurityProperties.\n\t * \n\t * @param builder the AuthenticationManagerBuilder to use\n\t * @param security the SecurityProperties in use\n\t */\n\tpublic static void authentication(AuthenticationManagerBuilder builder,\n\t\t\tSecurityProperties security) throws Exception {\n\n\t\tif (isBuilt(builder)) {\n\t\t\treturn;\n\t\t}\n\n\t\tUser user = security.getUser();\n\n\t\tif (user.isDefaultPassword()) {\n\t\t\tlogger.info("\\n\\nUsing default password for application endpoints: "\n\t\t\t\t\t+ user.getPassword() + "\\n\\n");\n\t\t}\n\n\t\tSet<String> roles = new LinkedHashSet<String>(user.getRole());\n\n\t\tbuilder.inMemoryAuthentication().withUser(user.getName())\n\t\t\t\t.password(user.getPassword())\n\t\t\t\t.roles(roles.toArray(new String[roles.size()]));\n\n\t}\n\n\tprivate static boolean isBuilt(AuthenticationManagerBuilder builder) {\n\t\tMethod configurers = ReflectionUtils.findMethod(\n\t\t\t\tAbstractConfiguredSecurityBuilder.class, "getConfigurers");\n\t\tMethod unbuilt = ReflectionUtils.findMethod(\n\t\t\t\tAbstractConfiguredSecurityBuilder.class, "isUnbuilt");\n\t\tReflectionUtils.makeAccessible(configurers);\n\t\tReflectionUtils.makeAccessible(unbuilt);\n\t\treturn !((Collection<?>) ReflectionUtils.invokeMethod(configurers, builder))\n\t\t\t\t.isEmpty() || !((Boolean) ReflectionUtils.invokeMethod(unbuilt, builder));\n\t}\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.security.authentication.AuthenticationManager;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Security.\n * \n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnClass(AuthenticationManager.class)\n@EnableConfigurationProperties\n@Import({ SpringBootWebSecurityConfiguration.class,\n\t\tAuthenticationManagerConfiguration.class })\npublic class SecurityAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic SecurityProperties securityProperties() {\n\t\treturn new SecurityProperties();\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
