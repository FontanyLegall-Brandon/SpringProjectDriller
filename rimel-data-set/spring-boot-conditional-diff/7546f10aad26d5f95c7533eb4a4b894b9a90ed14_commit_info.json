{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ErrorMvcAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ErrorMvcAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -97,7 +97,7 @@ public class ErrorMvcAutoConfiguration implements EmbeddedServletContainerCustom\n \t}\n \n \t@Configuration\n-\t@ConditionalOnProperty(prefix = "error.whitelable", name = "enabled", matchIfMissing = true)\n+\t@ConditionalOnProperty(prefix = "error.whitelabel", name = "enabled", matchIfMissing = true)\n \t@Conditional(ErrorTemplateMissingCondition.class)\n \tprotected static class WhitelabelErrorViewConfiguration {\n \n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.servlet.Servlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider;\nimport org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainer;\nimport org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;\nimport org.springframework.boot.context.embedded.ErrorPage;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.expression.MapAccessor;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.io.support.SpringFactoriesLoader;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.expression.Expression;\nimport org.springframework.expression.spel.standard.SpelExpressionParser;\nimport org.springframework.expression.spel.support.StandardEvaluationContext;\nimport org.springframework.util.PropertyPlaceholderHelper;\nimport org.springframework.util.PropertyPlaceholderHelper.PlaceholderResolver;\nimport org.springframework.web.servlet.DispatcherServlet;\nimport org.springframework.web.servlet.View;\nimport org.springframework.web.servlet.view.BeanNameViewResolver;\nimport org.springframework.web.util.HtmlUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to render errors via a MVC error\n * controller.\n *\n * @author Dave Syer\n * @author Andy Wilkinson\n */\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class })\n@ConditionalOnWebApplication\n// Ensure this loads before the main WebMvcAutoConfiguration so that the error View is\n// available\n@AutoConfigureBefore(WebMvcAutoConfiguration.class)\n@Configuration\npublic class ErrorMvcAutoConfiguration implements EmbeddedServletContainerCustomizer {\n\n\t@Value("${error.path:/error}")\n\tprivate String errorPath = "/error";\n\n\t@Autowired\n\tprivate ServerProperties properties;\n\n\t@Bean\n\t@ConditionalOnMissingBean(value = ErrorAttributes.class, search = SearchStrategy.CURRENT)\n\tpublic DefaultErrorAttributes errorAttributes() {\n\t\treturn new DefaultErrorAttributes();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(value = ErrorController.class, search = SearchStrategy.CURRENT)\n\tpublic BasicErrorController basicErrorController(ErrorAttributes errorAttributes) {\n\t\treturn new BasicErrorController(errorAttributes);\n\t}\n\n\t@Override\n\tpublic void customize(ConfigurableEmbeddedServletContainer container) {\n\t\tcontainer.addErrorPages(new ErrorPage(this.properties.getServletPrefix()\n\t\t\t\t+ this.errorPath));\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "error.whitelabel", name = "enabled", matchIfMissing = true)\n\t@Conditional(ErrorTemplateMissingCondition.class)\n\tprotected static class WhitelabelErrorViewConfiguration {\n\n\t\tprivate final SpelView defaultErrorView = new SpelView(\n\t\t\t\t"<html><body><h1>Whitelabel Error Page</h1>"\n\t\t\t\t\t\t+ "<p>This application has no explicit mapping for /error, so you are seeing this as a fallback.</p>"\n\t\t\t\t\t\t+ "<div id=\'created\'>${timestamp}</div>"\n\t\t\t\t\t\t+ "<div>There was an unexpected error (type=${error}, status=${status}).</div>"\n\t\t\t\t\t\t+ "<div>${message}</div></body></html>");\n\n\t\t@Bean(name = "error")\n\t\t@ConditionalOnMissingBean(name = "error")\n\t\tpublic View defaultErrorView() {\n\t\t\treturn this.defaultErrorView;\n\t\t}\n\n\t\t// If the user adds @EnableWebMvc then the bean name view resolver from\n\t\t// WebMvcAutoConfiguration disappears, so add it back in to avoid disappointment.\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(BeanNameViewResolver.class)\n\t\tpublic BeanNameViewResolver beanNameViewResolver() {\n\t\t\tBeanNameViewResolver resolver = new BeanNameViewResolver();\n\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 10);\n\t\t\treturn resolver;\n\t\t}\n\n\t}\n\n\tprivate static class ErrorTemplateMissingCondition extends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tList<TemplateAvailabilityProvider> availabilityProviders = SpringFactoriesLoader\n\t\t\t\t\t.loadFactories(TemplateAvailabilityProvider.class,\n\t\t\t\t\t\t\tcontext.getClassLoader());\n\n\t\t\tfor (TemplateAvailabilityProvider availabilityProvider : availabilityProviders) {\n\t\t\t\tif (availabilityProvider.isTemplateAvailable("error",\n\t\t\t\t\t\tcontext.getEnvironment(), context.getClassLoader(),\n\t\t\t\t\t\tcontext.getResourceLoader())) {\n\t\t\t\t\treturn ConditionOutcome.noMatch("Template from "\n\t\t\t\t\t\t\t+ availabilityProvider + " found for error view");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn ConditionOutcome.match("No error template view detected");\n\t\t};\n\n\t}\n\n\t/**\n\t * Simple {@link View} implementation that resolves variables as SpEL expressions.\n\t */\n\tprivate static class SpelView implements View {\n\n\t\tprivate final String template;\n\n\t\tprivate final StandardEvaluationContext context = new StandardEvaluationContext();\n\n\t\tprivate PropertyPlaceholderHelper helper;\n\n\t\tprivate PlaceholderResolver resolver;\n\n\t\tpublic SpelView(String template) {\n\t\t\tthis.template = template;\n\t\t\tthis.context.addPropertyAccessor(new MapAccessor());\n\t\t\tthis.helper = new PropertyPlaceholderHelper("${", "}");\n\t\t\tthis.resolver = new SpelPlaceholderResolver(this.context);\n\t\t}\n\n\t\t@Override\n\t\tpublic String getContentType() {\n\t\t\treturn "text/html";\n\t\t}\n\n\t\t@Override\n\t\tpublic void render(Map<String, ?> model, HttpServletRequest request,\n\t\t\t\tHttpServletResponse response) throws Exception {\n\t\t\tif (response.getContentType() == null) {\n\t\t\t\tresponse.setContentType(getContentType());\n\t\t\t}\n\t\t\tMap<String, Object> map = new HashMap<String, Object>(model);\n\t\t\tmap.put("path", request.getContextPath());\n\t\t\tthis.context.setRootObject(map);\n\t\t\tString result = this.helper.replacePlaceholders(this.template, this.resolver);\n\t\t\tresponse.getWriter().append(result);\n\t\t}\n\n\t}\n\n\t/**\n\t * SpEL based {@link PlaceholderResolver}.\n\t */\n\tprivate static class SpelPlaceholderResolver implements PlaceholderResolver {\n\n\t\tprivate final SpelExpressionParser parser = new SpelExpressionParser();\n\n\t\tprivate final StandardEvaluationContext context;\n\n\t\tpublic SpelPlaceholderResolver(StandardEvaluationContext context) {\n\t\t\tthis.context = context;\n\t\t}\n\n\t\t@Override\n\t\tpublic String resolvePlaceholder(String name) {\n\t\t\tExpression expression = this.parser.parseExpression(name);\n\t\t\ttry {\n\t\t\t\tObject value = expression.getValue(this.context);\n\t\t\t\treturn HtmlUtils.htmlEscape(value == null ? null : value.toString());\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.servlet.Servlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider;\nimport org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainer;\nimport org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;\nimport org.springframework.boot.context.embedded.ErrorPage;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.expression.MapAccessor;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.io.support.SpringFactoriesLoader;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.expression.Expression;\nimport org.springframework.expression.spel.standard.SpelExpressionParser;\nimport org.springframework.expression.spel.support.StandardEvaluationContext;\nimport org.springframework.util.PropertyPlaceholderHelper;\nimport org.springframework.util.PropertyPlaceholderHelper.PlaceholderResolver;\nimport org.springframework.web.servlet.DispatcherServlet;\nimport org.springframework.web.servlet.View;\nimport org.springframework.web.servlet.view.BeanNameViewResolver;\nimport org.springframework.web.util.HtmlUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to render errors via a MVC error\n * controller.\n *\n * @author Dave Syer\n * @author Andy Wilkinson\n */\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class })\n@ConditionalOnWebApplication\n// Ensure this loads before the main WebMvcAutoConfiguration so that the error View is\n// available\n@AutoConfigureBefore(WebMvcAutoConfiguration.class)\n@Configuration\npublic class ErrorMvcAutoConfiguration implements EmbeddedServletContainerCustomizer {\n\n\t@Value("${error.path:/error}")\n\tprivate String errorPath = "/error";\n\n\t@Autowired\n\tprivate ServerProperties properties;\n\n\t@Bean\n\t@ConditionalOnMissingBean(value = ErrorAttributes.class, search = SearchStrategy.CURRENT)\n\tpublic DefaultErrorAttributes errorAttributes() {\n\t\treturn new DefaultErrorAttributes();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(value = ErrorController.class, search = SearchStrategy.CURRENT)\n\tpublic BasicErrorController basicErrorController(ErrorAttributes errorAttributes) {\n\t\treturn new BasicErrorController(errorAttributes);\n\t}\n\n\t@Override\n\tpublic void customize(ConfigurableEmbeddedServletContainer container) {\n\t\tcontainer.addErrorPages(new ErrorPage(this.properties.getServletPrefix()\n\t\t\t\t+ this.errorPath));\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "error.whitelable", name = "enabled", matchIfMissing = true)\n\t@Conditional(ErrorTemplateMissingCondition.class)\n\tprotected static class WhitelabelErrorViewConfiguration {\n\n\t\tprivate final SpelView defaultErrorView = new SpelView(\n\t\t\t\t"<html><body><h1>Whitelabel Error Page</h1>"\n\t\t\t\t\t\t+ "<p>This application has no explicit mapping for /error, so you are seeing this as a fallback.</p>"\n\t\t\t\t\t\t+ "<div id=\'created\'>${timestamp}</div>"\n\t\t\t\t\t\t+ "<div>There was an unexpected error (type=${error}, status=${status}).</div>"\n\t\t\t\t\t\t+ "<div>${message}</div></body></html>");\n\n\t\t@Bean(name = "error")\n\t\t@ConditionalOnMissingBean(name = "error")\n\t\tpublic View defaultErrorView() {\n\t\t\treturn this.defaultErrorView;\n\t\t}\n\n\t\t// If the user adds @EnableWebMvc then the bean name view resolver from\n\t\t// WebMvcAutoConfiguration disappears, so add it back in to avoid disappointment.\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(BeanNameViewResolver.class)\n\t\tpublic BeanNameViewResolver beanNameViewResolver() {\n\t\t\tBeanNameViewResolver resolver = new BeanNameViewResolver();\n\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 10);\n\t\t\treturn resolver;\n\t\t}\n\n\t}\n\n\tprivate static class ErrorTemplateMissingCondition extends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tList<TemplateAvailabilityProvider> availabilityProviders = SpringFactoriesLoader\n\t\t\t\t\t.loadFactories(TemplateAvailabilityProvider.class,\n\t\t\t\t\t\t\tcontext.getClassLoader());\n\n\t\t\tfor (TemplateAvailabilityProvider availabilityProvider : availabilityProviders) {\n\t\t\t\tif (availabilityProvider.isTemplateAvailable("error",\n\t\t\t\t\t\tcontext.getEnvironment(), context.getClassLoader(),\n\t\t\t\t\t\tcontext.getResourceLoader())) {\n\t\t\t\t\treturn ConditionOutcome.noMatch("Template from "\n\t\t\t\t\t\t\t+ availabilityProvider + " found for error view");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn ConditionOutcome.match("No error template view detected");\n\t\t};\n\n\t}\n\n\t/**\n\t * Simple {@link View} implementation that resolves variables as SpEL expressions.\n\t */\n\tprivate static class SpelView implements View {\n\n\t\tprivate final String template;\n\n\t\tprivate final StandardEvaluationContext context = new StandardEvaluationContext();\n\n\t\tprivate PropertyPlaceholderHelper helper;\n\n\t\tprivate PlaceholderResolver resolver;\n\n\t\tpublic SpelView(String template) {\n\t\t\tthis.template = template;\n\t\t\tthis.context.addPropertyAccessor(new MapAccessor());\n\t\t\tthis.helper = new PropertyPlaceholderHelper("${", "}");\n\t\t\tthis.resolver = new SpelPlaceholderResolver(this.context);\n\t\t}\n\n\t\t@Override\n\t\tpublic String getContentType() {\n\t\t\treturn "text/html";\n\t\t}\n\n\t\t@Override\n\t\tpublic void render(Map<String, ?> model, HttpServletRequest request,\n\t\t\t\tHttpServletResponse response) throws Exception {\n\t\t\tif (response.getContentType() == null) {\n\t\t\t\tresponse.setContentType(getContentType());\n\t\t\t}\n\t\t\tMap<String, Object> map = new HashMap<String, Object>(model);\n\t\t\tmap.put("path", request.getContextPath());\n\t\t\tthis.context.setRootObject(map);\n\t\t\tString result = this.helper.replacePlaceholders(this.template, this.resolver);\n\t\t\tresponse.getWriter().append(result);\n\t\t}\n\n\t}\n\n\t/**\n\t * SpEL based {@link PlaceholderResolver}.\n\t */\n\tprivate static class SpelPlaceholderResolver implements PlaceholderResolver {\n\n\t\tprivate final SpelExpressionParser parser = new SpelExpressionParser();\n\n\t\tprivate final StandardEvaluationContext context;\n\n\t\tpublic SpelPlaceholderResolver(StandardEvaluationContext context) {\n\t\t\tthis.context = context;\n\t\t}\n\n\t\t@Override\n\t\tpublic String resolvePlaceholder(String name) {\n\t\t\tExpression expression = this.parser.parseExpression(name);\n\t\t\ttry {\n\t\t\t\tObject value = expression.getValue(this.context);\n\t\t\t\treturn HtmlUtils.htmlEscape(value == null ? null : value.toString());\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
