{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/audit/AuditAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/audit/AuditAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,10 +16,8 @@\n \n package org.springframework.boot.actuate.autoconfigure.audit;\n \n-import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.boot.actuate.audit.AuditEvent;\n import org.springframework.boot.actuate.audit.AuditEventRepository;\n-import org.springframework.boot.actuate.audit.InMemoryAuditEventRepository;\n import org.springframework.boot.actuate.audit.listener.AbstractAuditListener;\n import org.springframework.boot.actuate.audit.listener.AuditListener;\n import org.springframework.boot.actuate.security.AbstractAuthenticationAuditListener;\n@@ -27,8 +25,10 @@ import org.springframework.boot.actuate.security.AbstractAuthorizationAuditListe\n import org.springframework.boot.actuate.security.AuthenticationAuditListener;\n import org.springframework.boot.actuate.security.AuthorizationAuditListener;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n@@ -40,13 +40,15 @@ import org.springframework.context.annotation.Configuration;\n  * @since 2.0.0\n  */\n @Configuration(proxyBeanMethods = false)\n+@ConditionalOnBean(AuditEventRepository.class)\n+@ConditionalOnProperty(prefix = "management.auditevents", name = "enabled",\n+\t\tmatchIfMissing = true)\n public class AuditAutoConfiguration {\n \n \t@Bean\n \t@ConditionalOnMissingBean(AbstractAuditListener.class)\n-\tpublic AuditListener auditListener(\n-\t\t\tObjectProvider<AuditEventRepository> auditEventRepository) throws Exception {\n-\t\treturn new AuditListener(auditEventRepository.getIfAvailable());\n+\tpublic AuditListener auditListener(AuditEventRepository auditEventRepository) {\n+\t\treturn new AuditListener(auditEventRepository);\n \t}\n \n \t@Bean\n@@ -65,15 +67,4 @@ public class AuditAutoConfiguration {\n \t\treturn new AuthorizationAuditListener();\n \t}\n \n-\t@Configuration(proxyBeanMethods = false)\n-\t@ConditionalOnMissingBean(AuditEventRepository.class)\n-\tprotected static class AuditEventRepositoryConfiguration {\n-\n-\t\t@Bean\n-\t\tpublic InMemoryAuditEventRepository auditEventRepository() throws Exception {\n-\t\t\treturn new InMemoryAuditEventRepository();\n-\t\t}\n-\n-\t}\n-\n }\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.audit;\n\nimport org.springframework.boot.actuate.audit.AuditEvent;\nimport org.springframework.boot.actuate.audit.AuditEventRepository;\nimport org.springframework.boot.actuate.audit.listener.AbstractAuditListener;\nimport org.springframework.boot.actuate.audit.listener.AuditListener;\nimport org.springframework.boot.actuate.security.AbstractAuthenticationAuditListener;\nimport org.springframework.boot.actuate.security.AbstractAuthorizationAuditListener;\nimport org.springframework.boot.actuate.security.AuthenticationAuditListener;\nimport org.springframework.boot.actuate.security.AuthorizationAuditListener;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link AuditEvent}s.\n *\n * @author Dave Syer\n * @author Vedran Pavic\n * @since 2.0.0\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnBean(AuditEventRepository.class)\n@ConditionalOnProperty(prefix = "management.auditevents", name = "enabled",\n\t\tmatchIfMissing = true)\npublic class AuditAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean(AbstractAuditListener.class)\n\tpublic AuditListener auditListener(AuditEventRepository auditEventRepository) {\n\t\treturn new AuditListener(auditEventRepository);\n\t}\n\n\t@Bean\n\t@ConditionalOnClass(\n\t\t\tname = "org.springframework.security.authentication.event.AbstractAuthenticationEvent")\n\t@ConditionalOnMissingBean(AbstractAuthenticationAuditListener.class)\n\tpublic AuthenticationAuditListener authenticationAuditListener() throws Exception {\n\t\treturn new AuthenticationAuditListener();\n\t}\n\n\t@Bean\n\t@ConditionalOnClass(\n\t\t\tname = "org.springframework.security.access.event.AbstractAuthorizationEvent")\n\t@ConditionalOnMissingBean(AbstractAuthorizationAuditListener.class)\n\tpublic AuthorizationAuditListener authorizationAuditListener() throws Exception {\n\t\treturn new AuthorizationAuditListener();\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.audit;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.actuate.audit.AuditEvent;\nimport org.springframework.boot.actuate.audit.AuditEventRepository;\nimport org.springframework.boot.actuate.audit.InMemoryAuditEventRepository;\nimport org.springframework.boot.actuate.audit.listener.AbstractAuditListener;\nimport org.springframework.boot.actuate.audit.listener.AuditListener;\nimport org.springframework.boot.actuate.security.AbstractAuthenticationAuditListener;\nimport org.springframework.boot.actuate.security.AbstractAuthorizationAuditListener;\nimport org.springframework.boot.actuate.security.AuthenticationAuditListener;\nimport org.springframework.boot.actuate.security.AuthorizationAuditListener;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link AuditEvent}s.\n *\n * @author Dave Syer\n * @author Vedran Pavic\n * @since 2.0.0\n */\n@Configuration(proxyBeanMethods = false)\npublic class AuditAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean(AbstractAuditListener.class)\n\tpublic AuditListener auditListener(\n\t\t\tObjectProvider<AuditEventRepository> auditEventRepository) throws Exception {\n\t\treturn new AuditListener(auditEventRepository.getIfAvailable());\n\t}\n\n\t@Bean\n\t@ConditionalOnClass(\n\t\t\tname = "org.springframework.security.authentication.event.AbstractAuthenticationEvent")\n\t@ConditionalOnMissingBean(AbstractAuthenticationAuditListener.class)\n\tpublic AuthenticationAuditListener authenticationAuditListener() throws Exception {\n\t\treturn new AuthenticationAuditListener();\n\t}\n\n\t@Bean\n\t@ConditionalOnClass(\n\t\t\tname = "org.springframework.security.access.event.AbstractAuthorizationEvent")\n\t@ConditionalOnMissingBean(AbstractAuthorizationAuditListener.class)\n\tpublic AuthorizationAuditListener authorizationAuditListener() throws Exception {\n\t\treturn new AuthorizationAuditListener();\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnMissingBean(AuditEventRepository.class)\n\tprotected static class AuditEventRepositoryConfiguration {\n\n\t\t@Bean\n\t\tpublic InMemoryAuditEventRepository auditEventRepository() throws Exception {\n\t\t\treturn new InMemoryAuditEventRepository();\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
