{'_old_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -18,6 +18,8 @@ package org.springframework.boot.actuate.autoconfigure;\n \n import javax.cache.Caching;\n \n+import com.hazelcast.core.IMap;\n+import com.hazelcast.spring.cache.HazelcastCache;\n import net.sf.ehcache.Ehcache;\n \n import org.springframework.boot.actuate.cache.CacheStatistics;\n@@ -41,8 +43,6 @@ import org.springframework.cache.support.NoOpCacheManager;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n-import com.hazelcast.core.IMap;\n-\n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for {@link CacheStatisticsProvider}\n  * beans.\n@@ -79,7 +79,7 @@ public class CacheStatisticsAutoConfiguration {\n \t}\n \n \t@Configuration\n-\t@ConditionalOnClass(IMap.class)\n+\t@ConditionalOnClass({ IMap.class, HazelcastCache.class} )\n \tstatic class HazelcastCacheStatisticsConfiguration {\n \n \t\t@Bean\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport javax.cache.Caching;\n\nimport com.hazelcast.core.IMap;\nimport com.hazelcast.spring.cache.HazelcastCache;\nimport net.sf.ehcache.Ehcache;\n\nimport org.springframework.boot.actuate.cache.CacheStatistics;\nimport org.springframework.boot.actuate.cache.CacheStatisticsProvider;\nimport org.springframework.boot.actuate.cache.ConcurrentMapCacheStatisticsProvider;\nimport org.springframework.boot.actuate.cache.DefaultCacheStatistics;\nimport org.springframework.boot.actuate.cache.EhCacheStatisticsProvider;\nimport org.springframework.boot.actuate.cache.GuavaCacheStatisticsProvider;\nimport org.springframework.boot.actuate.cache.HazelcastCacheStatisticsProvider;\nimport org.springframework.boot.actuate.cache.JCacheStatisticsProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.cache.Cache;\nimport org.springframework.cache.CacheManager;\nimport org.springframework.cache.concurrent.ConcurrentMapCache;\nimport org.springframework.cache.jcache.JCacheCache;\nimport org.springframework.cache.support.NoOpCacheManager;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link CacheStatisticsProvider}\n * beans.\n *\n * @author Stephane Nicoll\n * @author Phillip Webb\n * @since 1.3.0\n */\n@Configuration\n@AutoConfigureAfter(CacheAutoConfiguration.class)\n@ConditionalOnBean(CacheManager.class)\npublic class CacheStatisticsAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnClass({ Caching.class, JCacheCache.class })\n\tstatic class JCacheCacheStatisticsProviderConfiguration {\n\n\t\t@Bean\n\t\tpublic JCacheStatisticsProvider jCacheStatisticsProvider() {\n\t\t\treturn new JCacheStatisticsProvider();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(Ehcache.class)\n\tstatic class EhCacheCacheStatisticsProviderConfiguration {\n\n\t\t@Bean\n\t\tpublic EhCacheStatisticsProvider ehCacheCacheStatisticsProvider() {\n\t\t\treturn new EhCacheStatisticsProvider();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ IMap.class, HazelcastCache.class} )\n\tstatic class HazelcastCacheStatisticsConfiguration {\n\n\t\t@Bean\n\t\tpublic HazelcastCacheStatisticsProvider hazelcastCacheStatisticsProvider() {\n\t\t\treturn new HazelcastCacheStatisticsProvider();\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(com.google.common.cache.Cache.class)\n\tstatic class GuavaCacheStatisticsConfiguration {\n\n\t\t@Bean\n\t\tpublic GuavaCacheStatisticsProvider guavaCacheStatisticsProvider() {\n\t\t\treturn new GuavaCacheStatisticsProvider();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(ConcurrentMapCache.class)\n\tstatic class ConcurrentMapCacheStatisticsConfiguration {\n\n\t\t@Bean\n\t\tpublic ConcurrentMapCacheStatisticsProvider concurrentMapCacheStatisticsProvider() {\n\t\t\treturn new ConcurrentMapCacheStatisticsProvider();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(NoOpCacheManager.class)\n\tstatic class NoOpCacheStatisticsConfiguration {\n\n\t\tprivate static final CacheStatistics NO_OP_STATS = new DefaultCacheStatistics();\n\n\t\t@Bean\n\t\tpublic CacheStatisticsProvider<Cache> noOpCacheStatisticsProvider() {\n\t\t\treturn new CacheStatisticsProvider<Cache>() {\n\t\t\t\t@Override\n\t\t\t\tpublic CacheStatistics getCacheStatistics(CacheManager cacheManager,\n\t\t\t\t\t\tCache cache) {\n\t\t\t\t\tif (cacheManager instanceof NoOpCacheManager) {\n\t\t\t\t\t\treturn NO_OP_STATS;\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport javax.cache.Caching;\n\nimport net.sf.ehcache.Ehcache;\n\nimport org.springframework.boot.actuate.cache.CacheStatistics;\nimport org.springframework.boot.actuate.cache.CacheStatisticsProvider;\nimport org.springframework.boot.actuate.cache.ConcurrentMapCacheStatisticsProvider;\nimport org.springframework.boot.actuate.cache.DefaultCacheStatistics;\nimport org.springframework.boot.actuate.cache.EhCacheStatisticsProvider;\nimport org.springframework.boot.actuate.cache.GuavaCacheStatisticsProvider;\nimport org.springframework.boot.actuate.cache.HazelcastCacheStatisticsProvider;\nimport org.springframework.boot.actuate.cache.JCacheStatisticsProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.cache.Cache;\nimport org.springframework.cache.CacheManager;\nimport org.springframework.cache.concurrent.ConcurrentMapCache;\nimport org.springframework.cache.jcache.JCacheCache;\nimport org.springframework.cache.support.NoOpCacheManager;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport com.hazelcast.core.IMap;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link CacheStatisticsProvider}\n * beans.\n *\n * @author Stephane Nicoll\n * @author Phillip Webb\n * @since 1.3.0\n */\n@Configuration\n@AutoConfigureAfter(CacheAutoConfiguration.class)\n@ConditionalOnBean(CacheManager.class)\npublic class CacheStatisticsAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnClass({ Caching.class, JCacheCache.class })\n\tstatic class JCacheCacheStatisticsProviderConfiguration {\n\n\t\t@Bean\n\t\tpublic JCacheStatisticsProvider jCacheStatisticsProvider() {\n\t\t\treturn new JCacheStatisticsProvider();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(Ehcache.class)\n\tstatic class EhCacheCacheStatisticsProviderConfiguration {\n\n\t\t@Bean\n\t\tpublic EhCacheStatisticsProvider ehCacheCacheStatisticsProvider() {\n\t\t\treturn new EhCacheStatisticsProvider();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(IMap.class)\n\tstatic class HazelcastCacheStatisticsConfiguration {\n\n\t\t@Bean\n\t\tpublic HazelcastCacheStatisticsProvider hazelcastCacheStatisticsProvider() {\n\t\t\treturn new HazelcastCacheStatisticsProvider();\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(com.google.common.cache.Cache.class)\n\tstatic class GuavaCacheStatisticsConfiguration {\n\n\t\t@Bean\n\t\tpublic GuavaCacheStatisticsProvider guavaCacheStatisticsProvider() {\n\t\t\treturn new GuavaCacheStatisticsProvider();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(ConcurrentMapCache.class)\n\tstatic class ConcurrentMapCacheStatisticsConfiguration {\n\n\t\t@Bean\n\t\tpublic ConcurrentMapCacheStatisticsProvider concurrentMapCacheStatisticsProvider() {\n\t\t\treturn new ConcurrentMapCacheStatisticsProvider();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(NoOpCacheManager.class)\n\tstatic class NoOpCacheStatisticsConfiguration {\n\n\t\tprivate static final CacheStatistics NO_OP_STATS = new DefaultCacheStatistics();\n\n\t\t@Bean\n\t\tpublic CacheStatisticsProvider<Cache> noOpCacheStatisticsProvider() {\n\t\t\treturn new CacheStatisticsProvider<Cache>() {\n\t\t\t\t@Override\n\t\t\t\tpublic CacheStatistics getCacheStatistics(CacheManager cacheManager,\n\t\t\t\t\t\tCache cache) {\n\t\t\t\t\tif (cacheManager instanceof NoOpCacheManager) {\n\t\t\t\t\t\treturn NO_OP_STATS;\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
