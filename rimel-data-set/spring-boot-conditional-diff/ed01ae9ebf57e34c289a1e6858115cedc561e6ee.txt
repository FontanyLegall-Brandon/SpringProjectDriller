@@ -0,0 +1,97 @@
+
+
+package org.springframework.boot.autoconfigure.jdbc;
+
+import javax.sql.DataSource;
+
+import com.zaxxer.hikari.HikariDataSource;
+
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
+import org.springframework.boot.context.properties.ConfigurationProperties;
+import org.springframework.context.annotation.Bean;
+
+
+abstract class DataSourceConfiguration {
+
+	@SuppressWarnings()
+	protected <T> T createDataSource(DataSourceProperties properties,
+			Class<? extends DataSource> type) {
+		return (T) DataSourceBuilder.create(properties.getClassLoader()).type(type)
+				.driverClassName(properties.determineDriverClassName())
+				.url(properties.determineUrl()).username(properties.determineUsername())
+				.password(properties.determinePassword()).build();
+	}
+
+	@ConditionalOnClass(org.apache.tomcat.jdbc.pool.DataSource.class)
+	@ConditionalOnProperty(name = , havingValue = , matchIfMissing = true)
+	static class Tomcat extends DataSourceConfiguration {
+
+		@Bean
+		@ConfigurationProperties()
+		public org.apache.tomcat.jdbc.pool.DataSource dataSource(
+				DataSourceProperties properties) {
+			return createDataSource(properties,
+					org.apache.tomcat.jdbc.pool.DataSource.class);
+		}
+
+	}
+
+	@ConditionalOnClass(HikariDataSource.class)
+	@ConditionalOnProperty(name = , havingValue = , matchIfMissing = true)
+	static class Hikari extends DataSourceConfiguration {
+
+		@Bean
+		@ConfigurationProperties()
+		public HikariDataSource dataSource(DataSourceProperties properties) {
+			return createDataSource(properties, HikariDataSource.class);
+		}
+	}
+
+	@ConditionalOnClass(org.apache.commons.dbcp.BasicDataSource.class)
+	@ConditionalOnProperty(name = , havingValue = , matchIfMissing = true)
+	static class Dbcp extends DataSourceConfiguration {
+
+		@Bean
+		@ConfigurationProperties()
+		public org.apache.commons.dbcp.BasicDataSource dataSource(
+				DataSourceProperties properties) {
+			return createDataSource(properties,
+					org.apache.commons.dbcp.BasicDataSource.class);
+		}
+	}
+
+	@ConditionalOnClass(org.apache.commons.dbcp2.BasicDataSource.class)
+	@ConditionalOnProperty(name = , havingValue = , matchIfMissing = true)
+	static class Dbcp2 extends DataSourceConfiguration {
+
+		@Bean
+		@ConfigurationProperties()
+		public org.apache.commons.dbcp2.BasicDataSource dataSource(
+				DataSourceProperties properties) {
+			return createDataSource(properties,
+					org.apache.commons.dbcp2.BasicDataSource.class);
+		}
+	}
+
+}

