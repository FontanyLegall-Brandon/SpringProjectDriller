@@ -1,5 +1,5 @@
 
 @Configuration
 @ConditionalOnClass(Gson.class)
 public class GsonAutoConfiguration {
 
-	@Bean
-	@ConditionalOnMissingBean
-	public Gson gson() {
-		return new Gson();
+	@Configuration
+	static class GsonConfiguration {
+
+		@Bean
+		@Primary
+		@ConditionalOnMissingBean(Gson.class)
+		public Gson gson(GsonBuilder gsonBuilder) {
+			return gsonBuilder.create();
+		}
+	}
+
+	@Configuration
+	static class GsonBuilderConfiguration {
+
+		@Bean
+		public GsonBuilder gsonBuilder(List<GsonBuilderCustomizer> customizers) {
+			final GsonBuilder gsonBuilder = new GsonBuilder();
+			customizers.forEach(c -> c.customize(gsonBuilder));
+			return gsonBuilder;
+		}
+
+	}
+
+	@Configuration
+	@EnableConfigurationProperties(GsonProperties.class)
+	static class GsonBuilderCustomizerConfiguration {
+
+		@Bean
+		public StandardGsonBuilderCustomizer standardGsonBuilderCustomizer(
+				GsonProperties gsonProperties) {
+			return new StandardGsonBuilderCustomizer(gsonProperties);
+		}
+
+		private static final class StandardGsonBuilderCustomizer
+				implements GsonBuilderCustomizer, Ordered {
+
+			private final GsonProperties properties;
+
+			StandardGsonBuilderCustomizer(GsonProperties properties) {
+				this.properties = properties;
+			}
+
+			@Override
+			public int getOrder() {
+				return 0;
+			}
+
+			@Override
+			public void customize(GsonBuilder gsonBuilder) {
+
+				boolean generateNonExecutableJson = this.properties
+						.isGenerateNonExecutableJson();
+				if (generateNonExecutableJson) {
+					gsonBuilder.generateNonExecutableJson();
+				}
+
+				boolean excludeFieldsWithoutExposeAnnotation = this.properties
+						.isExcludeFieldsWithoutExposeAnnotation();
+				if (excludeFieldsWithoutExposeAnnotation) {
+					gsonBuilder.excludeFieldsWithoutExposeAnnotation();
+				}
+
+				boolean serializeNulls = this.properties.isSerializeNulls();
+				if (serializeNulls) {
+					gsonBuilder.serializeNulls();
+				}
+
+				boolean enableComplexMapKeySerialization = this.properties
+						.isEnableComplexMapKeySerialization();
+				if (enableComplexMapKeySerialization) {
+					gsonBuilder.enableComplexMapKeySerialization();
+				}
+
+				boolean disableInnerClassSerialization = this.properties
+						.isDisableInnerClassSerialization();
+				if (disableInnerClassSerialization) {
+					gsonBuilder.disableInnerClassSerialization();
+				}
+
+				LongSerializationPolicy longSerializationPolicy = this.properties
+						.getLongSerializationPolicy();
+				if (longSerializationPolicy != null) {
+					gsonBuilder.setLongSerializationPolicy(longSerializationPolicy);
+				}
+
+				FieldNamingPolicy fieldNamingPolicy = this.properties
+						.getFieldNamingPolicy();
+				if (fieldNamingPolicy != null) {
+					gsonBuilder.setFieldNamingPolicy(fieldNamingPolicy);
+				}
+
+				boolean prettyPrinting = this.properties.isPrettyPrinting();
+				if (prettyPrinting) {
+					gsonBuilder.setPrettyPrinting();
+				}
+
+				boolean isLenient = this.properties.isLenient();
+				if (isLenient) {
+					gsonBuilder.setLenient();
+				}
+
+				boolean disableHtmlEscaping = this.properties.isDisableHtmlEscaping();
+				if (disableHtmlEscaping) {
+					gsonBuilder.disableHtmlEscaping();
+				}
+
+				String dateFormat = this.properties.getDateFormat();
+				if (dateFormat != null) {
+					gsonBuilder.setDateFormat(dateFormat);
+				}
+			}
+		}
 	}
 
 }

