{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/servlet/WebMvcMetricsAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/servlet/WebMvcMetricsAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -23,11 +23,13 @@ import io.micrometer.core.instrument.MeterRegistry;\n import org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration;\n import org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties;\n import org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties.Web.Server;\n+import org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration;\n import org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider;\n import org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter;\n import org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n@@ -46,9 +48,11 @@ import org.springframework.web.servlet.DispatcherServlet;\n  * @since 2.0.0\n  */\n @Configuration\n-@AutoConfigureAfter(MetricsAutoConfiguration.class)\n+@AutoConfigureAfter({ MetricsAutoConfiguration.class,\n+\t\tSimpleMetricsExportAutoConfiguration.class })\n @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n @ConditionalOnClass(DispatcherServlet.class)\n+@ConditionalOnBean(MeterRegistry.class)\n @EnableConfigurationProperties(MetricsProperties.class)\n public class WebMvcMetricsAutoConfiguration {\n \n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics.web.servlet;\n\nimport javax.servlet.DispatcherType;\n\nimport io.micrometer.core.instrument.MeterRegistry;\n\nimport org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties;\nimport org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties.Web.Server;\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration;\nimport org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider;\nimport org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter;\nimport org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.web.servlet.FilterRegistrationBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.context.WebApplicationContext;\nimport org.springframework.web.servlet.DispatcherServlet;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for instrumentation of Spring Web\n * MVC servlet-based request mappings.\n *\n * @author Jon Schneider\n * @since 2.0.0\n */\n@Configuration\n@AutoConfigureAfter({ MetricsAutoConfiguration.class,\n\t\tSimpleMetricsExportAutoConfiguration.class })\n@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n@ConditionalOnClass(DispatcherServlet.class)\n@ConditionalOnBean(MeterRegistry.class)\n@EnableConfigurationProperties(MetricsProperties.class)\npublic class WebMvcMetricsAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean(WebMvcTagsProvider.class)\n\tpublic DefaultWebMvcTagsProvider webMvcTagsProvider() {\n\t\treturn new DefaultWebMvcTagsProvider();\n\t}\n\n\t@Bean\n\tpublic FilterRegistrationBean<WebMvcMetricsFilter> webMvcMetricsFilter(\n\t\t\tMeterRegistry registry, MetricsProperties properties,\n\t\t\tWebMvcTagsProvider tagsProvider, WebApplicationContext context) {\n\t\tServer serverProperties = properties.getWeb().getServer();\n\t\tWebMvcMetricsFilter filter = new WebMvcMetricsFilter(context, registry,\n\t\t\t\ttagsProvider, serverProperties.getRequestsMetricName(),\n\t\t\t\tserverProperties.isAutoTimeRequests());\n\t\tFilterRegistrationBean<WebMvcMetricsFilter> registration = new FilterRegistrationBean<>(\n\t\t\t\tfilter);\n\t\tregistration.setDispatcherTypes(DispatcherType.REQUEST, DispatcherType.ASYNC);\n\t\treturn registration;\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics.web.servlet;\n\nimport javax.servlet.DispatcherType;\n\nimport io.micrometer.core.instrument.MeterRegistry;\n\nimport org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties;\nimport org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties.Web.Server;\nimport org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider;\nimport org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter;\nimport org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.web.servlet.FilterRegistrationBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.context.WebApplicationContext;\nimport org.springframework.web.servlet.DispatcherServlet;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for instrumentation of Spring Web\n * MVC servlet-based request mappings.\n *\n * @author Jon Schneider\n * @since 2.0.0\n */\n@Configuration\n@AutoConfigureAfter(MetricsAutoConfiguration.class)\n@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n@ConditionalOnClass(DispatcherServlet.class)\n@EnableConfigurationProperties(MetricsProperties.class)\npublic class WebMvcMetricsAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean(WebMvcTagsProvider.class)\n\tpublic DefaultWebMvcTagsProvider webMvcTagsProvider() {\n\t\treturn new DefaultWebMvcTagsProvider();\n\t}\n\n\t@Bean\n\tpublic FilterRegistrationBean<WebMvcMetricsFilter> webMvcMetricsFilter(\n\t\t\tMeterRegistry registry, MetricsProperties properties,\n\t\t\tWebMvcTagsProvider tagsProvider, WebApplicationContext context) {\n\t\tServer serverProperties = properties.getWeb().getServer();\n\t\tWebMvcMetricsFilter filter = new WebMvcMetricsFilter(context, registry,\n\t\t\t\ttagsProvider, serverProperties.getRequestsMetricName(),\n\t\t\t\tserverProperties.isAutoTimeRequests());\n\t\tFilterRegistrationBean<WebMvcMetricsFilter> registration = new FilterRegistrationBean<>(\n\t\t\t\tfilter);\n\t\tregistration.setDispatcherTypes(DispatcherType.REQUEST, DispatcherType.ASYNC);\n\t\treturn registration;\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
