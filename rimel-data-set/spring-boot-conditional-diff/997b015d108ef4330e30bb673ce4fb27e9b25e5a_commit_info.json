{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -28,6 +28,7 @@ import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;\n import org.springframework.boot.autoconfigure.security.SecurityProperties.Headers;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n@@ -46,10 +47,12 @@ import org.springframework.security.config.annotation.web.configuration.EnableWe\n import org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;\n import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n import org.springframework.security.config.annotation.web.configurers.HeadersConfigurer;\n+import org.springframework.security.config.annotation.web.servlet.configuration.EnableWebMvcSecurity;\n import org.springframework.security.web.AuthenticationEntryPoint;\n import org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint;\n import org.springframework.security.web.header.writers.HstsHeaderWriter;\n import org.springframework.security.web.util.matcher.AnyRequestMatcher;\n+import org.springframework.web.servlet.support.RequestDataValueProcessor;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for security of a web application or\n@@ -129,10 +132,30 @@ public class SecurityAutoConfiguration {\n \n \t}\n \n-\t@ConditionalOnMissingBean({ ApplicationWebSecurityConfigurerAdapter.class })\n+\t// Pull in @EnableWebMvcSecurity if Spring MVC is available and no-one defined a\n+\t// RequestDataValueProcessor\n+\t@ConditionalOnClass(RequestDataValueProcessor.class)\n+\t@ConditionalOnMissingBean(RequestDataValueProcessor.class)\n+\t@ConditionalOnExpression("${security.basic.enabled:true}")\n+\t@Configuration\n+\tprotected static class WebMvcSecurityConfigurationConditions {\n+\t\t@Configuration\n+\t\t@EnableWebMvcSecurity\n+\t\tprotected static class DefaultWebMvcSecurityConfiguration {\n+\t\t}\n+\t}\n+\n+\t// Pull in a plain @EnableWebSecurity if Spring MVC is not available\n+\t@ConditionalOnMissingBean(WebMvcSecurityConfigurationConditions.class)\n+\t@ConditionalOnMissingClass(name = "org.springframework.web.servlet.support.RequestDataValueProcessor")\n \t@ConditionalOnExpression("${security.basic.enabled:true}")\n \t@Configuration\n \t@EnableWebSecurity\n+\tprotected static class DefaultWebSecurityConfiguration {\n+\t}\n+\n+\t@ConditionalOnExpression("${security.basic.enabled:true}")\n+\t@Configuration\n \t@Order(Ordered.LOWEST_PRECEDENCE - 5)\n \tprotected static class ApplicationWebSecurityConfigurerAdapter extends\n \t\t\tWebSecurityConfigurerAdapter {\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport javax.servlet.Filter;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;\nimport org.springframework.boot.autoconfigure.security.SecurityProperties.Headers;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.security.authentication.AuthenticationEventPublisher;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.DefaultAuthenticationEventPublisher;\nimport org.springframework.security.authentication.ProviderManager;\nimport org.springframework.security.config.annotation.SecurityConfigurer;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.builders.WebSecurity;\nimport org.springframework.security.config.annotation.web.builders.WebSecurity.IgnoredRequestConfigurer;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.config.annotation.web.configurers.HeadersConfigurer;\nimport org.springframework.security.config.annotation.web.servlet.configuration.EnableWebMvcSecurity;\nimport org.springframework.security.web.AuthenticationEntryPoint;\nimport org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint;\nimport org.springframework.security.web.header.writers.HstsHeaderWriter;\nimport org.springframework.security.web.util.matcher.AnyRequestMatcher;\nimport org.springframework.web.servlet.support.RequestDataValueProcessor;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for security of a web application or\n * service. By default everything is secured with HTTP Basic authentication except the\n * {@link SecurityProperties#getIgnored() explicitly ignored} paths (defaults to\n * <code>&#47;css&#47;**, &#47;js&#47;**, &#47;images&#47;**, &#47;**&#47;favicon.ico</code>\n * ). Many aspects of the behavior can be controller with {@link SecurityProperties} via\n * externalized application properties (or via an bean definition of that type to set the\n * defaults). The user details for authentication are just placeholders\n * <code>(username=user,\n * password=password)</code> but can easily be customized by providing a bean definition\n * of type {@link AuthenticationManager}. Also provides audit logging of authentication\n * events.\n * \n * <p>\n * Some common simple customizations:\n * <ul>\n * <li>Switch off security completely and permanently: remove Spring Security from the\n * classpath or {@link EnableAutoConfiguration#exclude() exclude} this configuration.</li>\n * <li>Switch off security temporarily (e.g. for a dev environment): set\n * <code>security.basic.enabled: false</code></li>\n * <li>Customize the user details: add an AuthenticationManager bean</li>\n * <li>Add form login for user facing resources: add a\n * {@link WebSecurityConfigurerAdapter} and use {@link HttpSecurity#formLogin()}</li>\n * </ul>\n * \n * @author Dave Syer\n */\n@Configuration\n@EnableConfigurationProperties\n@ConditionalOnClass({ EnableWebSecurity.class })\n@ConditionalOnMissingBean(WebSecurityConfiguration.class)\n// @ConditionalOnMissingBean(annotation = EnableWebSecurity.class)\npublic class SecurityAutoConfiguration {\n\n\tprivate static List<String> DEFAULT_IGNORED = Arrays.asList("/css/**", "/js/**",\n\t\t\t"/images/**", "/**/favicon.ico");\n\n\t@Bean(name = "org.springframework.autoconfigure.security.SecurityProperties")\n\t@ConditionalOnMissingBean\n\tpublic SecurityProperties securityProperties() {\n\t\treturn new SecurityProperties();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic AuthenticationEventPublisher authenticationEventPublisher() {\n\t\treturn new DefaultAuthenticationEventPublisher();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean({ IgnoredPathsWebSecurityConfigurerAdapter.class })\n\t// @ConditionalOnBean(annotation = EnableWebSecurity.class)\n\t@ConditionalOnBean(WebSecurityConfiguration.class)\n\tpublic SecurityConfigurer<Filter, WebSecurity> ignoredPathsWebSecurityConfigurerAdapter() {\n\t\treturn new IgnoredPathsWebSecurityConfigurerAdapter();\n\t}\n\n\t// Get the ignored paths in early\n\t@Order(Ordered.HIGHEST_PRECEDENCE)\n\tprivate static class IgnoredPathsWebSecurityConfigurerAdapter implements\n\t\t\tSecurityConfigurer<Filter, WebSecurity> {\n\n\t\t@Autowired\n\t\tprivate SecurityProperties security;\n\n\t\t@Override\n\t\tpublic void configure(WebSecurity builder) throws Exception {\n\t\t}\n\n\t\t@Override\n\t\tpublic void init(WebSecurity builder) throws Exception {\n\t\t\tIgnoredRequestConfigurer ignoring = builder.ignoring();\n\t\t\tList<String> ignored = getIgnored(this.security);\n\t\t\tignoring.antMatchers(ignored.toArray(new String[0]));\n\t\t}\n\n\t}\n\n\t// Pull in @EnableWebMvcSecurity if Spring MVC is available and no-one defined a\n\t// RequestDataValueProcessor\n\t@ConditionalOnClass(RequestDataValueProcessor.class)\n\t@ConditionalOnMissingBean(RequestDataValueProcessor.class)\n\t@ConditionalOnExpression("${security.basic.enabled:true}")\n\t@Configuration\n\tprotected static class WebMvcSecurityConfigurationConditions {\n\t\t@Configuration\n\t\t@EnableWebMvcSecurity\n\t\tprotected static class DefaultWebMvcSecurityConfiguration {\n\t\t}\n\t}\n\n\t// Pull in a plain @EnableWebSecurity if Spring MVC is not available\n\t@ConditionalOnMissingBean(WebMvcSecurityConfigurationConditions.class)\n\t@ConditionalOnMissingClass(name = "org.springframework.web.servlet.support.RequestDataValueProcessor")\n\t@ConditionalOnExpression("${security.basic.enabled:true}")\n\t@Configuration\n\t@EnableWebSecurity\n\tprotected static class DefaultWebSecurityConfiguration {\n\t}\n\n\t@ConditionalOnExpression("${security.basic.enabled:true}")\n\t@Configuration\n\t@Order(Ordered.LOWEST_PRECEDENCE - 5)\n\tprotected static class ApplicationWebSecurityConfigurerAdapter extends\n\t\t\tWebSecurityConfigurerAdapter {\n\n\t\t@Autowired\n\t\tprivate SecurityProperties security;\n\n\t\t@Autowired\n\t\tprivate AuthenticationEventPublisher authenticationEventPublisher;\n\n\t\t@Override\n\t\tprotected void configure(HttpSecurity http) throws Exception {\n\n\t\t\tif (this.security.isRequireSsl()) {\n\t\t\t\thttp.requiresChannel().anyRequest().requiresSecure();\n\t\t\t}\n\n\t\t\tString[] paths = getSecureApplicationPaths();\n\t\t\tif (this.security.getBasic().isEnabled() && paths.length > 0) {\n\t\t\t\thttp.exceptionHandling().authenticationEntryPoint(entryPoint());\n\t\t\t\thttp.requestMatchers().antMatchers(paths);\n\t\t\t\thttp.authorizeRequests()\n\t\t\t\t\t\t.anyRequest()\n\t\t\t\t\t\t.hasAnyRole(\n\t\t\t\t\t\t\t\tthis.security.getUser().getRole().toArray(new String[0])) //\n\t\t\t\t\t\t.and().httpBasic() //\n\t\t\t\t\t\t.and().anonymous().disable();\n\t\t\t}\n\t\t\tif (!this.security.isEnableCsrf()) {\n\t\t\t\thttp.csrf().disable();\n\t\t\t}\n\t\t\t// No cookies for application endpoints by default\n\t\t\thttp.sessionManagement().sessionCreationPolicy(this.security.getSessions());\n\n\t\t\tSecurityAutoConfiguration.configureHeaders(http.headers(),\n\t\t\t\t\tthis.security.getHeaders());\n\n\t\t}\n\n\t\tprivate String[] getSecureApplicationPaths() {\n\t\t\tList<String> list = new ArrayList<String>();\n\t\t\tfor (String path : this.security.getBasic().getPath()) {\n\t\t\t\tpath = (path == null ? "" : path.trim());\n\t\t\t\tif (path.equals("/**")) {\n\t\t\t\t\treturn new String[] { path };\n\t\t\t\t}\n\t\t\t\tif (!path.equals("")) {\n\t\t\t\t\tlist.add(path);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn list.toArray(new String[list.size()]);\n\t\t}\n\n\t\tprivate AuthenticationEntryPoint entryPoint() {\n\t\t\tBasicAuthenticationEntryPoint entryPoint = new BasicAuthenticationEntryPoint();\n\t\t\tentryPoint.setRealmName(this.security.getBasic().getRealm());\n\t\t\treturn entryPoint;\n\t\t}\n\n\t\t@Override\n\t\tprotected AuthenticationManager authenticationManager() throws Exception {\n\t\t\tAuthenticationManager manager = super.authenticationManager();\n\t\t\tif (manager instanceof ProviderManager) {\n\t\t\t\t((ProviderManager) manager)\n\t\t\t\t\t\t.setAuthenticationEventPublisher(this.authenticationEventPublisher);\n\t\t\t}\n\t\t\treturn manager;\n\t\t}\n\n\t\t@Configuration\n\t\t@ConditionalOnMissingBean(AuthenticationManager.class)\n\t\tprotected static class ApplicationAuthenticationManagerConfiguration extends\n\t\t\t\tAuthenticationManagerConfiguration {\n\t\t}\n\n\t}\n\n\tpublic static void configureHeaders(HeadersConfigurer<?> configurer,\n\t\t\tSecurityProperties.Headers headers) throws Exception {\n\t\tif (headers.getHsts() != Headers.HSTS.none) {\n\t\t\tboolean includeSubdomains = headers.getHsts() == Headers.HSTS.all;\n\t\t\tHstsHeaderWriter writer = new HstsHeaderWriter(includeSubdomains);\n\t\t\twriter.setRequestMatcher(AnyRequestMatcher.INSTANCE);\n\t\t\tconfigurer.addHeaderWriter(writer);\n\t\t}\n\t\tif (headers.isContentType()) {\n\t\t\tconfigurer.contentTypeOptions();\n\t\t}\n\t\tif (headers.isXss()) {\n\t\t\tconfigurer.xssProtection();\n\t\t}\n\t\tif (headers.isCache()) {\n\t\t\tconfigurer.cacheControl();\n\t\t}\n\t\tif (headers.isFrame()) {\n\t\t\tconfigurer.frameOptions();\n\t\t}\n\t}\n\n\tpublic static List<String> getIgnored(SecurityProperties security) {\n\t\tList<String> ignored = new ArrayList<String>(security.getIgnored());\n\t\tif (ignored.isEmpty()) {\n\t\t\tignored.addAll(DEFAULT_IGNORED);\n\t\t}\n\t\telse if (ignored.contains("none")) {\n\t\t\tignored.remove("none");\n\t\t}\n\t\treturn ignored;\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport javax.servlet.Filter;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.security.SecurityProperties.Headers;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.security.authentication.AuthenticationEventPublisher;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.DefaultAuthenticationEventPublisher;\nimport org.springframework.security.authentication.ProviderManager;\nimport org.springframework.security.config.annotation.SecurityConfigurer;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.builders.WebSecurity;\nimport org.springframework.security.config.annotation.web.builders.WebSecurity.IgnoredRequestConfigurer;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.config.annotation.web.configurers.HeadersConfigurer;\nimport org.springframework.security.web.AuthenticationEntryPoint;\nimport org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint;\nimport org.springframework.security.web.header.writers.HstsHeaderWriter;\nimport org.springframework.security.web.util.matcher.AnyRequestMatcher;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for security of a web application or\n * service. By default everything is secured with HTTP Basic authentication except the\n * {@link SecurityProperties#getIgnored() explicitly ignored} paths (defaults to\n * <code>&#47;css&#47;**, &#47;js&#47;**, &#47;images&#47;**, &#47;**&#47;favicon.ico</code>\n * ). Many aspects of the behavior can be controller with {@link SecurityProperties} via\n * externalized application properties (or via an bean definition of that type to set the\n * defaults). The user details for authentication are just placeholders\n * <code>(username=user,\n * password=password)</code> but can easily be customized by providing a bean definition\n * of type {@link AuthenticationManager}. Also provides audit logging of authentication\n * events.\n * \n * <p>\n * Some common simple customizations:\n * <ul>\n * <li>Switch off security completely and permanently: remove Spring Security from the\n * classpath or {@link EnableAutoConfiguration#exclude() exclude} this configuration.</li>\n * <li>Switch off security temporarily (e.g. for a dev environment): set\n * <code>security.basic.enabled: false</code></li>\n * <li>Customize the user details: add an AuthenticationManager bean</li>\n * <li>Add form login for user facing resources: add a\n * {@link WebSecurityConfigurerAdapter} and use {@link HttpSecurity#formLogin()}</li>\n * </ul>\n * \n * @author Dave Syer\n */\n@Configuration\n@EnableConfigurationProperties\n@ConditionalOnClass({ EnableWebSecurity.class })\n@ConditionalOnMissingBean(WebSecurityConfiguration.class)\n// @ConditionalOnMissingBean(annotation = EnableWebSecurity.class)\npublic class SecurityAutoConfiguration {\n\n\tprivate static List<String> DEFAULT_IGNORED = Arrays.asList("/css/**", "/js/**",\n\t\t\t"/images/**", "/**/favicon.ico");\n\n\t@Bean(name = "org.springframework.autoconfigure.security.SecurityProperties")\n\t@ConditionalOnMissingBean\n\tpublic SecurityProperties securityProperties() {\n\t\treturn new SecurityProperties();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic AuthenticationEventPublisher authenticationEventPublisher() {\n\t\treturn new DefaultAuthenticationEventPublisher();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean({ IgnoredPathsWebSecurityConfigurerAdapter.class })\n\t// @ConditionalOnBean(annotation = EnableWebSecurity.class)\n\t@ConditionalOnBean(WebSecurityConfiguration.class)\n\tpublic SecurityConfigurer<Filter, WebSecurity> ignoredPathsWebSecurityConfigurerAdapter() {\n\t\treturn new IgnoredPathsWebSecurityConfigurerAdapter();\n\t}\n\n\t// Get the ignored paths in early\n\t@Order(Ordered.HIGHEST_PRECEDENCE)\n\tprivate static class IgnoredPathsWebSecurityConfigurerAdapter implements\n\t\t\tSecurityConfigurer<Filter, WebSecurity> {\n\n\t\t@Autowired\n\t\tprivate SecurityProperties security;\n\n\t\t@Override\n\t\tpublic void configure(WebSecurity builder) throws Exception {\n\t\t}\n\n\t\t@Override\n\t\tpublic void init(WebSecurity builder) throws Exception {\n\t\t\tIgnoredRequestConfigurer ignoring = builder.ignoring();\n\t\t\tList<String> ignored = getIgnored(this.security);\n\t\t\tignoring.antMatchers(ignored.toArray(new String[0]));\n\t\t}\n\n\t}\n\n\t@ConditionalOnMissingBean({ ApplicationWebSecurityConfigurerAdapter.class })\n\t@ConditionalOnExpression("${security.basic.enabled:true}")\n\t@Configuration\n\t@EnableWebSecurity\n\t@Order(Ordered.LOWEST_PRECEDENCE - 5)\n\tprotected static class ApplicationWebSecurityConfigurerAdapter extends\n\t\t\tWebSecurityConfigurerAdapter {\n\n\t\t@Autowired\n\t\tprivate SecurityProperties security;\n\n\t\t@Autowired\n\t\tprivate AuthenticationEventPublisher authenticationEventPublisher;\n\n\t\t@Override\n\t\tprotected void configure(HttpSecurity http) throws Exception {\n\n\t\t\tif (this.security.isRequireSsl()) {\n\t\t\t\thttp.requiresChannel().anyRequest().requiresSecure();\n\t\t\t}\n\n\t\t\tString[] paths = getSecureApplicationPaths();\n\t\t\tif (this.security.getBasic().isEnabled() && paths.length > 0) {\n\t\t\t\thttp.exceptionHandling().authenticationEntryPoint(entryPoint());\n\t\t\t\thttp.requestMatchers().antMatchers(paths);\n\t\t\t\thttp.authorizeRequests()\n\t\t\t\t\t\t.anyRequest()\n\t\t\t\t\t\t.hasAnyRole(\n\t\t\t\t\t\t\t\tthis.security.getUser().getRole().toArray(new String[0])) //\n\t\t\t\t\t\t.and().httpBasic() //\n\t\t\t\t\t\t.and().anonymous().disable();\n\t\t\t}\n\t\t\tif (!this.security.isEnableCsrf()) {\n\t\t\t\thttp.csrf().disable();\n\t\t\t}\n\t\t\t// No cookies for application endpoints by default\n\t\t\thttp.sessionManagement().sessionCreationPolicy(this.security.getSessions());\n\n\t\t\tSecurityAutoConfiguration.configureHeaders(http.headers(),\n\t\t\t\t\tthis.security.getHeaders());\n\n\t\t}\n\n\t\tprivate String[] getSecureApplicationPaths() {\n\t\t\tList<String> list = new ArrayList<String>();\n\t\t\tfor (String path : this.security.getBasic().getPath()) {\n\t\t\t\tpath = (path == null ? "" : path.trim());\n\t\t\t\tif (path.equals("/**")) {\n\t\t\t\t\treturn new String[] { path };\n\t\t\t\t}\n\t\t\t\tif (!path.equals("")) {\n\t\t\t\t\tlist.add(path);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn list.toArray(new String[list.size()]);\n\t\t}\n\n\t\tprivate AuthenticationEntryPoint entryPoint() {\n\t\t\tBasicAuthenticationEntryPoint entryPoint = new BasicAuthenticationEntryPoint();\n\t\t\tentryPoint.setRealmName(this.security.getBasic().getRealm());\n\t\t\treturn entryPoint;\n\t\t}\n\n\t\t@Override\n\t\tprotected AuthenticationManager authenticationManager() throws Exception {\n\t\t\tAuthenticationManager manager = super.authenticationManager();\n\t\t\tif (manager instanceof ProviderManager) {\n\t\t\t\t((ProviderManager) manager)\n\t\t\t\t\t\t.setAuthenticationEventPublisher(this.authenticationEventPublisher);\n\t\t\t}\n\t\t\treturn manager;\n\t\t}\n\n\t\t@Configuration\n\t\t@ConditionalOnMissingBean(AuthenticationManager.class)\n\t\tprotected static class ApplicationAuthenticationManagerConfiguration extends\n\t\t\t\tAuthenticationManagerConfiguration {\n\t\t}\n\n\t}\n\n\tpublic static void configureHeaders(HeadersConfigurer<?> configurer,\n\t\t\tSecurityProperties.Headers headers) throws Exception {\n\t\tif (headers.getHsts() != Headers.HSTS.none) {\n\t\t\tboolean includeSubdomains = headers.getHsts() == Headers.HSTS.all;\n\t\t\tHstsHeaderWriter writer = new HstsHeaderWriter(includeSubdomains);\n\t\t\twriter.setRequestMatcher(AnyRequestMatcher.INSTANCE);\n\t\t\tconfigurer.addHeaderWriter(writer);\n\t\t}\n\t\tif (headers.isContentType()) {\n\t\t\tconfigurer.contentTypeOptions();\n\t\t}\n\t\tif (headers.isXss()) {\n\t\t\tconfigurer.xssProtection();\n\t\t}\n\t\tif (headers.isCache()) {\n\t\t\tconfigurer.cacheControl();\n\t\t}\n\t\tif (headers.isFrame()) {\n\t\t\tconfigurer.frameOptions();\n\t\t}\n\t}\n\n\tpublic static List<String> getIgnored(SecurityProperties security) {\n\t\tList<String> ignored = new ArrayList<String>(security.getIgnored());\n\t\tif (ignored.isEmpty()) {\n\t\t\tignored.addAll(DEFAULT_IGNORED);\n\t\t}\n\t\telse if (ignored.contains("none")) {\n\t\t\tignored.remove("none");\n\t\t}\n\t\treturn ignored;\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
