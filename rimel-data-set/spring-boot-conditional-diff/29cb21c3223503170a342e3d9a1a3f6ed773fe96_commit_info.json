{'_old_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnPropertyTests.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnPropertyTests.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -79,6 +79,16 @@ public class ConditionalOnPropertyTests {\n \t\tassertTrue(this.context.containsBean("foo"));\n \t}\n \n+\t@Test\n+\tpublic void prefixWithoutPeriod() throws Exception {\n+\t\tEnvironmentTestUtils.addEnvironment(this.context.getEnvironment(),\n+\t\t\t\t"spring.property=value1");\n+\t\tthis.context\n+\t\t\t\t.register(RelaxedPropertiesRequiredConfigurationWithShortPrefix.class);\n+\t\tthis.context.refresh();\n+\t\tassertTrue(this.context.containsBean("foo"));\n+\t}\n+\n \t@Test\n \tpublic void nonRelaxedName() throws Exception {\n \t\tEnvironmentTestUtils.addEnvironment(this.context.getEnvironment(),\n@@ -110,6 +120,17 @@ public class ConditionalOnPropertyTests {\n \n \t}\n \n+\t@Configuration\n+\t@ConditionalOnProperty(prefix = "spring", value = "property")\n+\tprotected static class RelaxedPropertiesRequiredConfigurationWithShortPrefix {\n+\n+\t\t@Bean\n+\t\tpublic String foo() {\n+\t\t\treturn "foo";\n+\t\t}\n+\n+\t}\n+\n \t@Configuration\n \t@ConditionalOnProperty(value = "the-relaxed-property", relaxedNames = false)\n \tprotected static class NonRelaxedPropertiesRequiredConfiguration {\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport org.junit.Test;\nimport org.springframework.boot.test.EnvironmentTestUtils;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\n/**\n * Tests for {@link ConditionalOnProperty}.\n * \n * @author Maciej Walkowiak\n */\npublic class ConditionalOnPropertyTests {\n\n\tprivate AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n\n\t@Test\n\tpublic void allPropertiesAreDefined() {\n\t\tEnvironmentTestUtils.addEnvironment(this.context.getEnvironment(),\n\t\t\t\t"property1=value1", "property2=value2");\n\t\tthis.context.register(MultiplePropertiesRequiredConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void notAllPropertiesAreDefined() {\n\t\tEnvironmentTestUtils.addEnvironment(this.context.getEnvironment(),\n\t\t\t\t"property1=value1");\n\t\tthis.context.register(MultiplePropertiesRequiredConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertFalse(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void propertyValueEqualsFalse() {\n\t\tEnvironmentTestUtils.addEnvironment(this.context.getEnvironment(),\n\t\t\t\t"property1=false", "property2=value2");\n\t\tthis.context.register(MultiplePropertiesRequiredConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertFalse(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void propertyValueEqualsFALSE() {\n\t\tEnvironmentTestUtils.addEnvironment(this.context.getEnvironment(),\n\t\t\t\t"property1=FALSE", "property2=value2");\n\t\tthis.context.register(MultiplePropertiesRequiredConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertFalse(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void relaxedName() throws Exception {\n\t\tEnvironmentTestUtils.addEnvironment(this.context.getEnvironment(),\n\t\t\t\t"spring.theRelaxedProperty=value1");\n\t\tthis.context.register(RelaxedPropertiesRequiredConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void prefixWithoutPeriod() throws Exception {\n\t\tEnvironmentTestUtils.addEnvironment(this.context.getEnvironment(),\n\t\t\t\t"spring.property=value1");\n\t\tthis.context\n\t\t\t\t.register(RelaxedPropertiesRequiredConfigurationWithShortPrefix.class);\n\t\tthis.context.refresh();\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void nonRelaxedName() throws Exception {\n\t\tEnvironmentTestUtils.addEnvironment(this.context.getEnvironment(),\n\t\t\t\t"theRelaxedProperty=value1");\n\t\tthis.context.register(NonRelaxedPropertiesRequiredConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertFalse(this.context.containsBean("foo"));\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty({ "property1", "property2" })\n\tprotected static class MultiplePropertiesRequiredConfiguration {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "spring.", value = "the-relaxed-property")\n\tprotected static class RelaxedPropertiesRequiredConfiguration {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "spring", value = "property")\n\tprotected static class RelaxedPropertiesRequiredConfigurationWithShortPrefix {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(value = "the-relaxed-property", relaxedNames = false)\n\tprotected static class NonRelaxedPropertiesRequiredConfiguration {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport org.junit.Test;\nimport org.springframework.boot.test.EnvironmentTestUtils;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\n/**\n * Tests for {@link ConditionalOnProperty}.\n * \n * @author Maciej Walkowiak\n */\npublic class ConditionalOnPropertyTests {\n\n\tprivate AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n\n\t@Test\n\tpublic void allPropertiesAreDefined() {\n\t\tEnvironmentTestUtils.addEnvironment(this.context.getEnvironment(),\n\t\t\t\t"property1=value1", "property2=value2");\n\t\tthis.context.register(MultiplePropertiesRequiredConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void notAllPropertiesAreDefined() {\n\t\tEnvironmentTestUtils.addEnvironment(this.context.getEnvironment(),\n\t\t\t\t"property1=value1");\n\t\tthis.context.register(MultiplePropertiesRequiredConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertFalse(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void propertyValueEqualsFalse() {\n\t\tEnvironmentTestUtils.addEnvironment(this.context.getEnvironment(),\n\t\t\t\t"property1=false", "property2=value2");\n\t\tthis.context.register(MultiplePropertiesRequiredConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertFalse(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void propertyValueEqualsFALSE() {\n\t\tEnvironmentTestUtils.addEnvironment(this.context.getEnvironment(),\n\t\t\t\t"property1=FALSE", "property2=value2");\n\t\tthis.context.register(MultiplePropertiesRequiredConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertFalse(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void relaxedName() throws Exception {\n\t\tEnvironmentTestUtils.addEnvironment(this.context.getEnvironment(),\n\t\t\t\t"spring.theRelaxedProperty=value1");\n\t\tthis.context.register(RelaxedPropertiesRequiredConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertTrue(this.context.containsBean("foo"));\n\t}\n\n\t@Test\n\tpublic void nonRelaxedName() throws Exception {\n\t\tEnvironmentTestUtils.addEnvironment(this.context.getEnvironment(),\n\t\t\t\t"theRelaxedProperty=value1");\n\t\tthis.context.register(NonRelaxedPropertiesRequiredConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertFalse(this.context.containsBean("foo"));\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty({ "property1", "property2" })\n\tprotected static class MultiplePropertiesRequiredConfiguration {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "spring.", value = "the-relaxed-property")\n\tprotected static class RelaxedPropertiesRequiredConfiguration {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(value = "the-relaxed-property", relaxedNames = false)\n\tprotected static class NonRelaxedPropertiesRequiredConfiguration {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
