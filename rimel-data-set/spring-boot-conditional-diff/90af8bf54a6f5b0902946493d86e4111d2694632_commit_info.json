{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/websocket/WebSocketAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/websocket/WebSocketAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -22,6 +22,9 @@ import org.apache.catalina.Context;\n import org.apache.catalina.startup.Tomcat;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n+import org.eclipse.jetty.webapp.AbstractConfiguration;\n+import org.eclipse.jetty.webapp.WebAppContext;\n+import org.eclipse.jetty.websocket.jsr356.server.deploy.WebSocketServerContainerInitializer;\n import org.springframework.beans.BeanUtils;\n import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n@@ -29,97 +32,157 @@ import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean\n import org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration;\n import org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainer;\n import org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;\n+import org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainerFactory;\n import org.springframework.boot.context.embedded.tomcat.TomcatContextCustomizer;\n import org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;\n import org.springframework.boot.context.web.NonEmbeddedServletContainerFactory;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.util.Assert;\n import org.springframework.util.ClassUtils;\n import org.springframework.util.ReflectionUtils;\n import org.springframework.web.socket.WebSocketHandler;\n \n /**\n- * Auto configuration for websocket server in embedded Tomcat. If\n- * <code>spring-websocket</code> is detected on the classpath then we add a listener that\n+ * Auto configuration for websocket server in embedded Tomcat or Jetty. Requires\n+ * <code>spring-websocket</code> and either Tomcat or Jetty with their WebSocket modules\n+ * to be on the classpath.\n+ * <p/>\n+ * If Tomcat\'s WebSocket support is detected on the classpath we add a listener that\n  * installs the Tomcat Websocket initializer. In a non-embedded container it should\n  * already be there.\n+ * <p/>\n+ * If Jetty\'s WebSocket support is detected on the classpath we add a configuration that\n+ * configures the context with WebSocket support. In a non-embedded container it should\n+ * already be there.\n  *\n  * @author Dave Syer\n  * @author Phillip Webb\n+ * @author Andy Wilkinson\n  */\n @Configuration\n-@ConditionalOnClass(name = "org.apache.tomcat.websocket.server.WsSci", value = {\n-\t\tServlet.class, Tomcat.class, WebSocketHandler.class })\n+@ConditionalOnClass({ Servlet.class, WebSocketHandler.class })\n @AutoConfigureBefore(EmbeddedServletContainerAutoConfiguration.class)\n public class WebSocketAutoConfiguration {\n \n-\tprivate static final String TOMCAT_7_LISTENER_TYPE = "org.apache.catalina.deploy.ApplicationListener";\n+\t@Configuration\n+\t@ConditionalOnClass(name = "org.apache.tomcat.websocket.server.WsSci", value = Tomcat.class)\n+\tstatic class TomcatWebSocketConfiguration {\n \n-\tprivate static final String TOMCAT_8_LISTENER_TYPE = "org.apache.tomcat.util.descriptor.web.ApplicationListener";\n+\t\tprivate static final String TOMCAT_7_LISTENER_TYPE = "org.apache.catalina.deploy.ApplicationListener";\n \n-\tprivate static final String WS_LISTENER = "org.apache.tomcat.websocket.server.WsContextListener";\n+\t\tprivate static final String TOMCAT_8_LISTENER_TYPE = "org.apache.tomcat.util.descriptor.web.ApplicationListener";\n \n-\tprivate static Log logger = LogFactory.getLog(WebSocketAutoConfiguration.class);\n+\t\tprivate static final String WS_LISTENER = "org.apache.tomcat.websocket.server.WsContextListener";\n \n-\t@Bean\n-\t@ConditionalOnMissingBean(name = "websocketContainerCustomizer")\n-\tpublic EmbeddedServletContainerCustomizer websocketContainerCustomizer() {\n-\t\treturn new EmbeddedServletContainerCustomizer() {\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(name = "websocketContainerCustomizer")\n+\t\tpublic EmbeddedServletContainerCustomizer websocketContainerCustomizer() {\n+\t\t\treturn new WebSocketContainerCustomizer<TomcatEmbeddedServletContainerFactory>(\n+\t\t\t\t\tTomcatEmbeddedServletContainerFactory.class) {\n \n-\t\t\t@Override\n-\t\t\tpublic void customize(ConfigurableEmbeddedServletContainer container) {\n-\t\t\t\tif (container instanceof NonEmbeddedServletContainerFactory) {\n-\t\t\t\t\tlogger.info("NonEmbeddedServletContainerFactory detected. Websockets "\n-\t\t\t\t\t\t\t+ "support should be native so this normally is not a problem.");\n-\t\t\t\t\treturn;\n+\t\t\t\t@Override\n+\t\t\t\tpublic void doCustomize(\n+\t\t\t\t\t\tTomcatEmbeddedServletContainerFactory tomcatContainer) {\n+\t\t\t\t\ttomcatContainer.addContextCustomizers(new TomcatContextCustomizer() {\n+\t\t\t\t\t\t@Override\n+\t\t\t\t\t\tpublic void customize(Context context) {\n+\t\t\t\t\t\t\taddListener(context, findListenerType());\n+\t\t\t\t\t\t}\n+\t\t\t\t\t});\n \t\t\t\t}\n-\t\t\t\tAssert.state(container instanceof TomcatEmbeddedServletContainerFactory,\n-\t\t\t\t\t\t"Websockets are currently only supported in Tomcat (found "\n-\t\t\t\t\t\t\t\t+ container.getClass() + "). ");\n-\t\t\t\tTomcatEmbeddedServletContainerFactory tomcatContainer = (TomcatEmbeddedServletContainerFactory) container;\n-\t\t\t\ttomcatContainer.addContextCustomizers(new TomcatContextCustomizer() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic void customize(Context context) {\n-\t\t\t\t\t\taddListener(context, findListenerType());\n-\t\t\t\t\t}\n-\t\t\t\t});\n+\n+\t\t\t};\n+\t\t}\n+\n+\t\tprivate static Class<?> findListenerType() {\n+\t\t\tif (ClassUtils.isPresent(TOMCAT_7_LISTENER_TYPE, null)) {\n+\t\t\t\treturn ClassUtils.resolveClassName(TOMCAT_7_LISTENER_TYPE, null);\n \t\t\t}\n+\t\t\tif (ClassUtils.isPresent(TOMCAT_8_LISTENER_TYPE, null)) {\n+\t\t\t\treturn ClassUtils.resolveClassName(TOMCAT_8_LISTENER_TYPE, null);\n+\t\t\t}\n+\t\t\t// With Tomcat 8.0.8 ApplicationListener is not required\n+\t\t\treturn null;\n+\t\t}\n \n-\t\t};\n-\t}\n+\t\t/**\n+\t\t * Instead of registering the WsSci directly as a ServletContainerInitializer, we\n+\t\t * use the ApplicationListener provided by Tomcat. Unfortunately the\n+\t\t * ApplicationListener class moved packages in Tomcat 8 and been deleted in 8.0.8\n+\t\t * so we have to use reflection.\n+\t\t * @param context the current context\n+\t\t * @param listenerType the type of listener to add\n+\t\t */\n+\t\tprivate static void addListener(Context context, Class<?> listenerType) {\n+\t\t\tif (listenerType == null) {\n+\t\t\t\tReflectionUtils.invokeMethod(ClassUtils.getMethod(context.getClass(),\n+\t\t\t\t\t\t"addApplicationListener", String.class), context, WS_LISTENER);\n \n-\tprivate static Class<?> findListenerType() {\n-\t\tif (ClassUtils.isPresent(TOMCAT_7_LISTENER_TYPE, null)) {\n-\t\t\treturn ClassUtils.resolveClassName(TOMCAT_7_LISTENER_TYPE, null);\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tObject instance = BeanUtils.instantiateClass(ClassUtils\n+\t\t\t\t\t\t.getConstructorIfAvailable(listenerType, String.class,\n+\t\t\t\t\t\t\t\tboolean.class), WS_LISTENER, false);\n+\t\t\t\tReflectionUtils.invokeMethod(ClassUtils.getMethod(context.getClass(),\n+\t\t\t\t\t\t"addApplicationListener", listenerType), context, instance);\n+\t\t\t}\n \t\t}\n-\t\tif (ClassUtils.isPresent(TOMCAT_8_LISTENER_TYPE, null)) {\n-\t\t\treturn ClassUtils.resolveClassName(TOMCAT_8_LISTENER_TYPE, null);\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnClass(WebSocketServerContainerInitializer.class)\n+\tstatic class JettyWebSocketConfiguration {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(name = "websocketContainerCustomizer")\n+\t\tpublic EmbeddedServletContainerCustomizer websocketContainerCustomizer() {\n+\t\t\treturn new WebSocketContainerCustomizer<JettyEmbeddedServletContainerFactory>(\n+\t\t\t\t\tJettyEmbeddedServletContainerFactory.class) {\n+\n+\t\t\t\t@Override\n+\t\t\t\tprotected void doCustomize(JettyEmbeddedServletContainerFactory container) {\n+\t\t\t\t\tcontainer.addConfigurations(new AbstractConfiguration() {\n+\n+\t\t\t\t\t\t@Override\n+\t\t\t\t\t\tpublic void configure(WebAppContext context) throws Exception {\n+\t\t\t\t\t\t\tWebSocketServerContainerInitializer.configureContext(context);\n+\t\t\t\t\t\t}\n+\n+\t\t\t\t\t});\n+\t\t\t\t}\n+\n+\t\t\t};\n \t\t}\n-\t\t// With Tomcat 8.0.8 ApplicationListener is not required\n-\t\treturn null;\n+\n \t}\n \n-\t/**\n-\t * Instead of registering the WsSci directly as a ServletContainerInitializer, we use\n-\t * the ApplicationListener provided by Tomcat. Unfortunately the ApplicationListener\n-\t * class moved packages in Tomcat 8 and been deleted in 8.0.8 so we have to use\n-\t * reflection.\n-\t * @param context the current context\n-\t * @param listenerType the type of listener to add\n-\t */\n-\tprivate static void addListener(Context context, Class<?> listenerType) {\n-\t\tif (listenerType == null) {\n-\t\t\tReflectionUtils.invokeMethod(ClassUtils.getMethod(context.getClass(),\n-\t\t\t\t\t"addApplicationListener", String.class), context, WS_LISTENER);\n+\tabstract static class WebSocketContainerCustomizer<T extends ConfigurableEmbeddedServletContainer>\n+\t\t\timplements EmbeddedServletContainerCustomizer {\n+\n+\t\tprivate Log logger = LogFactory.getLog(getClass());\n+\n+\t\tprivate final Class<T> containerType;\n \n+\t\tprotected WebSocketContainerCustomizer(Class<T> containerType) {\n+\t\t\tthis.containerType = containerType;\n \t\t}\n-\t\telse {\n-\t\t\tObject instance = BeanUtils.instantiateClass(\n-\t\t\t\t\tClassUtils.getConstructorIfAvailable(listenerType, String.class,\n-\t\t\t\t\t\t\tboolean.class), WS_LISTENER, false);\n-\t\t\tReflectionUtils.invokeMethod(ClassUtils.getMethod(context.getClass(),\n-\t\t\t\t\t"addApplicationListener", listenerType), context, instance);\n+\n+\t\t@SuppressWarnings("unchecked")\n+\t\t@Override\n+\t\tpublic void customize(ConfigurableEmbeddedServletContainer container) {\n+\t\t\tif (container instanceof NonEmbeddedServletContainerFactory) {\n+\t\t\t\tthis.logger\n+\t\t\t\t\t\t.info("NonEmbeddedServletContainerFactory detected. Websockets "\n+\t\t\t\t\t\t\t\t+ "support should be native so this normally is not a problem.");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tif (this.containerType.isAssignableFrom(container.getClass())) {\n+\t\t\t\tdoCustomize((T) container);\n+\t\t\t}\n \t\t}\n+\n+\t\tprotected abstract void doCustomize(T container);\n+\n \t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.websocket;\n\nimport javax.servlet.Servlet;\n\nimport org.apache.catalina.Context;\nimport org.apache.catalina.startup.Tomcat;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.eclipse.jetty.webapp.AbstractConfiguration;\nimport org.eclipse.jetty.webapp.WebAppContext;\nimport org.eclipse.jetty.websocket.jsr356.server.deploy.WebSocketServerContainerInitializer;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration;\nimport org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainer;\nimport org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;\nimport org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainerFactory;\nimport org.springframework.boot.context.embedded.tomcat.TomcatContextCustomizer;\nimport org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;\nimport org.springframework.boot.context.web.NonEmbeddedServletContainerFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.ReflectionUtils;\nimport org.springframework.web.socket.WebSocketHandler;\n\n/**\n * Auto configuration for websocket server in embedded Tomcat or Jetty. Requires\n * <code>spring-websocket</code> and either Tomcat or Jetty with their WebSocket modules\n * to be on the classpath.\n * <p/>\n * If Tomcat\'s WebSocket support is detected on the classpath we add a listener that\n * installs the Tomcat Websocket initializer. In a non-embedded container it should\n * already be there.\n * <p/>\n * If Jetty\'s WebSocket support is detected on the classpath we add a configuration that\n * configures the context with WebSocket support. In a non-embedded container it should\n * already be there.\n *\n * @author Dave Syer\n * @author Phillip Webb\n * @author Andy Wilkinson\n */\n@Configuration\n@ConditionalOnClass({ Servlet.class, WebSocketHandler.class })\n@AutoConfigureBefore(EmbeddedServletContainerAutoConfiguration.class)\npublic class WebSocketAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnClass(name = "org.apache.tomcat.websocket.server.WsSci", value = Tomcat.class)\n\tstatic class TomcatWebSocketConfiguration {\n\n\t\tprivate static final String TOMCAT_7_LISTENER_TYPE = "org.apache.catalina.deploy.ApplicationListener";\n\n\t\tprivate static final String TOMCAT_8_LISTENER_TYPE = "org.apache.tomcat.util.descriptor.web.ApplicationListener";\n\n\t\tprivate static final String WS_LISTENER = "org.apache.tomcat.websocket.server.WsContextListener";\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "websocketContainerCustomizer")\n\t\tpublic EmbeddedServletContainerCustomizer websocketContainerCustomizer() {\n\t\t\treturn new WebSocketContainerCustomizer<TomcatEmbeddedServletContainerFactory>(\n\t\t\t\t\tTomcatEmbeddedServletContainerFactory.class) {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void doCustomize(\n\t\t\t\t\t\tTomcatEmbeddedServletContainerFactory tomcatContainer) {\n\t\t\t\t\ttomcatContainer.addContextCustomizers(new TomcatContextCustomizer() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void customize(Context context) {\n\t\t\t\t\t\t\taddListener(context, findListenerType());\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t};\n\t\t}\n\n\t\tprivate static Class<?> findListenerType() {\n\t\t\tif (ClassUtils.isPresent(TOMCAT_7_LISTENER_TYPE, null)) {\n\t\t\t\treturn ClassUtils.resolveClassName(TOMCAT_7_LISTENER_TYPE, null);\n\t\t\t}\n\t\t\tif (ClassUtils.isPresent(TOMCAT_8_LISTENER_TYPE, null)) {\n\t\t\t\treturn ClassUtils.resolveClassName(TOMCAT_8_LISTENER_TYPE, null);\n\t\t\t}\n\t\t\t// With Tomcat 8.0.8 ApplicationListener is not required\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * Instead of registering the WsSci directly as a ServletContainerInitializer, we\n\t\t * use the ApplicationListener provided by Tomcat. Unfortunately the\n\t\t * ApplicationListener class moved packages in Tomcat 8 and been deleted in 8.0.8\n\t\t * so we have to use reflection.\n\t\t * @param context the current context\n\t\t * @param listenerType the type of listener to add\n\t\t */\n\t\tprivate static void addListener(Context context, Class<?> listenerType) {\n\t\t\tif (listenerType == null) {\n\t\t\t\tReflectionUtils.invokeMethod(ClassUtils.getMethod(context.getClass(),\n\t\t\t\t\t\t"addApplicationListener", String.class), context, WS_LISTENER);\n\n\t\t\t}\n\t\t\telse {\n\t\t\t\tObject instance = BeanUtils.instantiateClass(ClassUtils\n\t\t\t\t\t\t.getConstructorIfAvailable(listenerType, String.class,\n\t\t\t\t\t\t\t\tboolean.class), WS_LISTENER, false);\n\t\t\t\tReflectionUtils.invokeMethod(ClassUtils.getMethod(context.getClass(),\n\t\t\t\t\t\t"addApplicationListener", listenerType), context, instance);\n\t\t\t}\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(WebSocketServerContainerInitializer.class)\n\tstatic class JettyWebSocketConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "websocketContainerCustomizer")\n\t\tpublic EmbeddedServletContainerCustomizer websocketContainerCustomizer() {\n\t\t\treturn new WebSocketContainerCustomizer<JettyEmbeddedServletContainerFactory>(\n\t\t\t\t\tJettyEmbeddedServletContainerFactory.class) {\n\n\t\t\t\t@Override\n\t\t\t\tprotected void doCustomize(JettyEmbeddedServletContainerFactory container) {\n\t\t\t\t\tcontainer.addConfigurations(new AbstractConfiguration() {\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void configure(WebAppContext context) throws Exception {\n\t\t\t\t\t\t\tWebSocketServerContainerInitializer.configureContext(context);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t};\n\t\t}\n\n\t}\n\n\tabstract static class WebSocketContainerCustomizer<T extends ConfigurableEmbeddedServletContainer>\n\t\t\timplements EmbeddedServletContainerCustomizer {\n\n\t\tprivate Log logger = LogFactory.getLog(getClass());\n\n\t\tprivate final Class<T> containerType;\n\n\t\tprotected WebSocketContainerCustomizer(Class<T> containerType) {\n\t\t\tthis.containerType = containerType;\n\t\t}\n\n\t\t@SuppressWarnings("unchecked")\n\t\t@Override\n\t\tpublic void customize(ConfigurableEmbeddedServletContainer container) {\n\t\t\tif (container instanceof NonEmbeddedServletContainerFactory) {\n\t\t\t\tthis.logger\n\t\t\t\t\t\t.info("NonEmbeddedServletContainerFactory detected. Websockets "\n\t\t\t\t\t\t\t\t+ "support should be native so this normally is not a problem.");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this.containerType.isAssignableFrom(container.getClass())) {\n\t\t\t\tdoCustomize((T) container);\n\t\t\t}\n\t\t}\n\n\t\tprotected abstract void doCustomize(T container);\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.websocket;\n\nimport javax.servlet.Servlet;\n\nimport org.apache.catalina.Context;\nimport org.apache.catalina.startup.Tomcat;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration;\nimport org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainer;\nimport org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;\nimport org.springframework.boot.context.embedded.tomcat.TomcatContextCustomizer;\nimport org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;\nimport org.springframework.boot.context.web.NonEmbeddedServletContainerFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.util.Assert;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.ReflectionUtils;\nimport org.springframework.web.socket.WebSocketHandler;\n\n/**\n * Auto configuration for websocket server in embedded Tomcat. If\n * <code>spring-websocket</code> is detected on the classpath then we add a listener that\n * installs the Tomcat Websocket initializer. In a non-embedded container it should\n * already be there.\n *\n * @author Dave Syer\n * @author Phillip Webb\n */\n@Configuration\n@ConditionalOnClass(name = "org.apache.tomcat.websocket.server.WsSci", value = {\n\t\tServlet.class, Tomcat.class, WebSocketHandler.class })\n@AutoConfigureBefore(EmbeddedServletContainerAutoConfiguration.class)\npublic class WebSocketAutoConfiguration {\n\n\tprivate static final String TOMCAT_7_LISTENER_TYPE = "org.apache.catalina.deploy.ApplicationListener";\n\n\tprivate static final String TOMCAT_8_LISTENER_TYPE = "org.apache.tomcat.util.descriptor.web.ApplicationListener";\n\n\tprivate static final String WS_LISTENER = "org.apache.tomcat.websocket.server.WsContextListener";\n\n\tprivate static Log logger = LogFactory.getLog(WebSocketAutoConfiguration.class);\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "websocketContainerCustomizer")\n\tpublic EmbeddedServletContainerCustomizer websocketContainerCustomizer() {\n\t\treturn new EmbeddedServletContainerCustomizer() {\n\n\t\t\t@Override\n\t\t\tpublic void customize(ConfigurableEmbeddedServletContainer container) {\n\t\t\t\tif (container instanceof NonEmbeddedServletContainerFactory) {\n\t\t\t\t\tlogger.info("NonEmbeddedServletContainerFactory detected. Websockets "\n\t\t\t\t\t\t\t+ "support should be native so this normally is not a problem.");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tAssert.state(container instanceof TomcatEmbeddedServletContainerFactory,\n\t\t\t\t\t\t"Websockets are currently only supported in Tomcat (found "\n\t\t\t\t\t\t\t\t+ container.getClass() + "). ");\n\t\t\t\tTomcatEmbeddedServletContainerFactory tomcatContainer = (TomcatEmbeddedServletContainerFactory) container;\n\t\t\t\ttomcatContainer.addContextCustomizers(new TomcatContextCustomizer() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void customize(Context context) {\n\t\t\t\t\t\taddListener(context, findListenerType());\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t};\n\t}\n\n\tprivate static Class<?> findListenerType() {\n\t\tif (ClassUtils.isPresent(TOMCAT_7_LISTENER_TYPE, null)) {\n\t\t\treturn ClassUtils.resolveClassName(TOMCAT_7_LISTENER_TYPE, null);\n\t\t}\n\t\tif (ClassUtils.isPresent(TOMCAT_8_LISTENER_TYPE, null)) {\n\t\t\treturn ClassUtils.resolveClassName(TOMCAT_8_LISTENER_TYPE, null);\n\t\t}\n\t\t// With Tomcat 8.0.8 ApplicationListener is not required\n\t\treturn null;\n\t}\n\n\t/**\n\t * Instead of registering the WsSci directly as a ServletContainerInitializer, we use\n\t * the ApplicationListener provided by Tomcat. Unfortunately the ApplicationListener\n\t * class moved packages in Tomcat 8 and been deleted in 8.0.8 so we have to use\n\t * reflection.\n\t * @param context the current context\n\t * @param listenerType the type of listener to add\n\t */\n\tprivate static void addListener(Context context, Class<?> listenerType) {\n\t\tif (listenerType == null) {\n\t\t\tReflectionUtils.invokeMethod(ClassUtils.getMethod(context.getClass(),\n\t\t\t\t\t"addApplicationListener", String.class), context, WS_LISTENER);\n\n\t\t}\n\t\telse {\n\t\t\tObject instance = BeanUtils.instantiateClass(\n\t\t\t\t\tClassUtils.getConstructorIfAvailable(listenerType, String.class,\n\t\t\t\t\t\t\tboolean.class), WS_LISTENER, false);\n\t\t\tReflectionUtils.invokeMethod(ClassUtils.getMethod(context.getClass(),\n\t\t\t\t\t"addApplicationListener", listenerType), context, instance);\n\t\t}\n\t}\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
