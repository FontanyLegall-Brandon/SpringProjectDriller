{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/LettuceConnectionConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/LettuceConnectionConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -43,7 +43,8 @@ import org.springframework.util.StringUtils;\n  * @author Mark Paluch\n  */\n @Configuration\n-@ConditionalOnClass({ GenericObjectPool.class, RedisClient.class, RedisClusterClient.class })\n+@ConditionalOnClass({ GenericObjectPool.class, RedisClient.class,\n+\t\tRedisClusterClient.class })\n class LettuceConnectionConfiguration extends RedisConnectionConfiguration {\n \n \tprivate final RedisProperties properties;\n@@ -149,8 +150,7 @@ class LettuceConnectionConfiguration extends RedisConnectionConfiguration {\n \t\t\t\treturn new LettuceConnectionFactory(applyProperties(\n \t\t\t\t\t\tapplyClientResources(lettucePool, clientResources)));\n \t\t\t}\n-\t\t\treturn applyClientResources(\n-\t\t\t\t\tnew LettuceConnectionFactory(getSentinelConfig()),\n+\t\t\treturn applyClientResources(new LettuceConnectionFactory(getSentinelConfig()),\n \t\t\t\t\tclientResources);\n \t\t}\n \n@@ -166,8 +166,8 @@ class LettuceConnectionConfiguration extends RedisConnectionConfiguration {\n \t\t\t\t\tthis.properties.getLettuce().getPool());\n \t\t\tDefaultLettucePool lettucePool = new DefaultLettucePool(\n \t\t\t\t\tthis.properties.getHost(), this.properties.getPort(), config);\n-\t\t\treturn new LettuceConnectionFactory(applyProperties(\n-\t\t\t\t\tapplyClientResources(lettucePool, clientResources)));\n+\t\t\treturn new LettuceConnectionFactory(\n+\t\t\t\t\tapplyProperties(applyClientResources(lettucePool, clientResources)));\n \t\t}\n \n \t\treturn applyClientResources(new LettuceConnectionFactory(), clientResources);\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.redis;\n\nimport java.net.UnknownHostException;\n\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.cluster.RedisClusterClient;\nimport io.lettuce.core.resource.ClientResources;\nimport io.lettuce.core.resource.DefaultClientResources;\nimport org.apache.commons.pool2.impl.GenericObjectPool;\nimport org.apache.commons.pool2.impl.GenericObjectPoolConfig;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisClusterConfiguration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.connection.RedisSentinelConfiguration;\nimport org.springframework.data.redis.connection.lettuce.DefaultLettucePool;\nimport org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;\nimport org.springframework.util.StringUtils;\n\n/**\n * Redis connection configuration using Lettuce.\n *\n * @author Mark Paluch\n */\n@Configuration\n@ConditionalOnClass({ GenericObjectPool.class, RedisClient.class,\n\t\tRedisClusterClient.class })\nclass LettuceConnectionConfiguration extends RedisConnectionConfiguration {\n\n\tprivate final RedisProperties properties;\n\n\tLettuceConnectionConfiguration(RedisProperties properties,\n\t\t\tObjectProvider<RedisSentinelConfiguration> sentinelConfigurationProvider,\n\t\t\tObjectProvider<RedisClusterConfiguration> clusterConfigurationProvider) {\n\t\tsuper(properties, sentinelConfigurationProvider, clusterConfigurationProvider);\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean(destroyMethod = "shutdown")\n\t@ConditionalOnMissingBean(ClientResources.class)\n\tpublic DefaultClientResources lettuceClientResources() {\n\t\treturn DefaultClientResources.create();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(RedisConnectionFactory.class)\n\tpublic LettuceConnectionFactory redisConnectionFactory(\n\t\t\tClientResources clientResources) throws UnknownHostException {\n\t\treturn applyProperties(createLettuceConnectionFactory(clientResources));\n\t}\n\n\tprivate LettuceConnectionFactory applyProperties(LettuceConnectionFactory factory) {\n\t\tconfigureConnection(factory);\n\t\tif (this.properties.isSsl()) {\n\t\t\tfactory.setUseSsl(true);\n\t\t}\n\t\tif (this.properties.getLettuce() != null) {\n\t\t\tRedisProperties.Lettuce lettuce = this.properties.getLettuce();\n\t\t\tif (lettuce.getShutdownTimeout() >= 0) {\n\t\t\t\tfactory.setShutdownTimeout(\n\t\t\t\t\t\tthis.properties.getLettuce().getShutdownTimeout());\n\t\t\t}\n\t\t}\n\t\treturn factory;\n\t}\n\n\tprivate void configureConnection(LettuceConnectionFactory factory) {\n\t\tif (StringUtils.hasText(this.properties.getUrl())) {\n\t\t\tconfigureConnectionFromUrl(factory);\n\t\t}\n\t\telse {\n\t\t\tfactory.setHostName(this.properties.getHost());\n\t\t\tfactory.setPort(this.properties.getPort());\n\t\t\tif (this.properties.getPassword() != null) {\n\t\t\t\tfactory.setPassword(this.properties.getPassword());\n\t\t\t}\n\t\t\tfactory.setDatabase(this.properties.getDatabase());\n\t\t\tif (this.properties.getTimeout() > 0) {\n\t\t\t\tfactory.setTimeout(this.properties.getTimeout());\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void configureConnectionFromUrl(LettuceConnectionFactory factory) {\n\t\tConnectionInfo connectionInfo = parseUrl(this.properties.getUrl());\n\t\tfactory.setUseSsl(connectionInfo.isUseSsl());\n\t\tfactory.setHostName(connectionInfo.getHostName());\n\t\tfactory.setPort(connectionInfo.getPort());\n\t\tif (connectionInfo.getPassword() != null) {\n\t\t\tfactory.setPassword(connectionInfo.getPassword());\n\t\t}\n\t}\n\n\tprivate DefaultLettucePool applyProperties(DefaultLettucePool pool) {\n\t\tif (StringUtils.hasText(this.properties.getUrl())) {\n\t\t\tconfigureConnectionFromUrl(pool);\n\t\t}\n\t\telse {\n\t\t\tpool.setHostName(this.properties.getHost());\n\t\t\tpool.setPort(this.properties.getPort());\n\t\t\tif (this.properties.getPassword() != null) {\n\t\t\t\tpool.setPassword(this.properties.getPassword());\n\t\t\t}\n\t\t\tpool.setDatabase(this.properties.getDatabase());\n\t\t}\n\t\tif (this.properties.getTimeout() > 0) {\n\t\t\tpool.setTimeout(this.properties.getTimeout());\n\t\t}\n\t\tpool.afterPropertiesSet();\n\t\treturn pool;\n\t}\n\n\tprivate void configureConnectionFromUrl(DefaultLettucePool lettucePool) {\n\t\tConnectionInfo connectionInfo = parseUrl(this.properties.getUrl());\n\t\tlettucePool.setHostName(connectionInfo.getHostName());\n\t\tlettucePool.setPort(connectionInfo.getPort());\n\t\tif (connectionInfo.getPassword() != null) {\n\t\t\tlettucePool.setPassword(connectionInfo.getPassword());\n\t\t}\n\t}\n\n\tprivate LettuceConnectionFactory createLettuceConnectionFactory(\n\t\t\tClientResources clientResources) {\n\n\t\tif (getSentinelConfig() != null) {\n\t\t\tif (this.properties.getLettuce() != null\n\t\t\t\t\t&& this.properties.getLettuce().getPool() != null) {\n\t\t\t\tDefaultLettucePool lettucePool = new DefaultLettucePool(\n\t\t\t\t\t\tgetSentinelConfig());\n\t\t\t\treturn new LettuceConnectionFactory(applyProperties(\n\t\t\t\t\t\tapplyClientResources(lettucePool, clientResources)));\n\t\t\t}\n\t\t\treturn applyClientResources(new LettuceConnectionFactory(getSentinelConfig()),\n\t\t\t\t\tclientResources);\n\t\t}\n\n\t\tif (getClusterConfiguration() != null) {\n\t\t\treturn applyClientResources(\n\t\t\t\t\tnew LettuceConnectionFactory(getClusterConfiguration()),\n\t\t\t\t\tclientResources);\n\t\t}\n\n\t\tif (this.properties.getLettuce() != null\n\t\t\t\t&& this.properties.getLettuce().getPool() != null) {\n\t\t\tGenericObjectPoolConfig config = lettucePoolConfig(\n\t\t\t\t\tthis.properties.getLettuce().getPool());\n\t\t\tDefaultLettucePool lettucePool = new DefaultLettucePool(\n\t\t\t\t\tthis.properties.getHost(), this.properties.getPort(), config);\n\t\t\treturn new LettuceConnectionFactory(\n\t\t\t\t\tapplyProperties(applyClientResources(lettucePool, clientResources)));\n\t\t}\n\n\t\treturn applyClientResources(new LettuceConnectionFactory(), clientResources);\n\t}\n\n\tprivate DefaultLettucePool applyClientResources(DefaultLettucePool lettucePool,\n\t\t\tClientResources clientResources) {\n\t\tlettucePool.setClientResources(clientResources);\n\t\treturn lettucePool;\n\t}\n\n\tprivate LettuceConnectionFactory applyClientResources(\n\t\t\tLettuceConnectionFactory factory, ClientResources clientResources) {\n\t\tfactory.setClientResources(clientResources);\n\t\treturn factory;\n\t}\n\n\tprivate GenericObjectPoolConfig lettucePoolConfig(RedisProperties.Pool props) {\n\t\tGenericObjectPoolConfig config = new GenericObjectPoolConfig();\n\t\tconfig.setMaxTotal(props.getMaxActive());\n\t\tconfig.setMaxIdle(props.getMaxIdle());\n\t\tconfig.setMinIdle(props.getMinIdle());\n\t\tconfig.setMaxWaitMillis(props.getMaxWait());\n\t\treturn config;\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.redis;\n\nimport java.net.UnknownHostException;\n\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.cluster.RedisClusterClient;\nimport io.lettuce.core.resource.ClientResources;\nimport io.lettuce.core.resource.DefaultClientResources;\nimport org.apache.commons.pool2.impl.GenericObjectPool;\nimport org.apache.commons.pool2.impl.GenericObjectPoolConfig;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisClusterConfiguration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.connection.RedisSentinelConfiguration;\nimport org.springframework.data.redis.connection.lettuce.DefaultLettucePool;\nimport org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;\nimport org.springframework.util.StringUtils;\n\n/**\n * Redis connection configuration using Lettuce.\n *\n * @author Mark Paluch\n */\n@Configuration\n@ConditionalOnClass({ GenericObjectPool.class, RedisClient.class, RedisClusterClient.class })\nclass LettuceConnectionConfiguration extends RedisConnectionConfiguration {\n\n\tprivate final RedisProperties properties;\n\n\tLettuceConnectionConfiguration(RedisProperties properties,\n\t\t\tObjectProvider<RedisSentinelConfiguration> sentinelConfigurationProvider,\n\t\t\tObjectProvider<RedisClusterConfiguration> clusterConfigurationProvider) {\n\t\tsuper(properties, sentinelConfigurationProvider, clusterConfigurationProvider);\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean(destroyMethod = "shutdown")\n\t@ConditionalOnMissingBean(ClientResources.class)\n\tpublic DefaultClientResources lettuceClientResources() {\n\t\treturn DefaultClientResources.create();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(RedisConnectionFactory.class)\n\tpublic LettuceConnectionFactory redisConnectionFactory(\n\t\t\tClientResources clientResources) throws UnknownHostException {\n\t\treturn applyProperties(createLettuceConnectionFactory(clientResources));\n\t}\n\n\tprivate LettuceConnectionFactory applyProperties(LettuceConnectionFactory factory) {\n\t\tconfigureConnection(factory);\n\t\tif (this.properties.isSsl()) {\n\t\t\tfactory.setUseSsl(true);\n\t\t}\n\t\tif (this.properties.getLettuce() != null) {\n\t\t\tRedisProperties.Lettuce lettuce = this.properties.getLettuce();\n\t\t\tif (lettuce.getShutdownTimeout() >= 0) {\n\t\t\t\tfactory.setShutdownTimeout(\n\t\t\t\t\t\tthis.properties.getLettuce().getShutdownTimeout());\n\t\t\t}\n\t\t}\n\t\treturn factory;\n\t}\n\n\tprivate void configureConnection(LettuceConnectionFactory factory) {\n\t\tif (StringUtils.hasText(this.properties.getUrl())) {\n\t\t\tconfigureConnectionFromUrl(factory);\n\t\t}\n\t\telse {\n\t\t\tfactory.setHostName(this.properties.getHost());\n\t\t\tfactory.setPort(this.properties.getPort());\n\t\t\tif (this.properties.getPassword() != null) {\n\t\t\t\tfactory.setPassword(this.properties.getPassword());\n\t\t\t}\n\t\t\tfactory.setDatabase(this.properties.getDatabase());\n\t\t\tif (this.properties.getTimeout() > 0) {\n\t\t\t\tfactory.setTimeout(this.properties.getTimeout());\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void configureConnectionFromUrl(LettuceConnectionFactory factory) {\n\t\tConnectionInfo connectionInfo = parseUrl(this.properties.getUrl());\n\t\tfactory.setUseSsl(connectionInfo.isUseSsl());\n\t\tfactory.setHostName(connectionInfo.getHostName());\n\t\tfactory.setPort(connectionInfo.getPort());\n\t\tif (connectionInfo.getPassword() != null) {\n\t\t\tfactory.setPassword(connectionInfo.getPassword());\n\t\t}\n\t}\n\n\tprivate DefaultLettucePool applyProperties(DefaultLettucePool pool) {\n\t\tif (StringUtils.hasText(this.properties.getUrl())) {\n\t\t\tconfigureConnectionFromUrl(pool);\n\t\t}\n\t\telse {\n\t\t\tpool.setHostName(this.properties.getHost());\n\t\t\tpool.setPort(this.properties.getPort());\n\t\t\tif (this.properties.getPassword() != null) {\n\t\t\t\tpool.setPassword(this.properties.getPassword());\n\t\t\t}\n\t\t\tpool.setDatabase(this.properties.getDatabase());\n\t\t}\n\t\tif (this.properties.getTimeout() > 0) {\n\t\t\tpool.setTimeout(this.properties.getTimeout());\n\t\t}\n\t\tpool.afterPropertiesSet();\n\t\treturn pool;\n\t}\n\n\tprivate void configureConnectionFromUrl(DefaultLettucePool lettucePool) {\n\t\tConnectionInfo connectionInfo = parseUrl(this.properties.getUrl());\n\t\tlettucePool.setHostName(connectionInfo.getHostName());\n\t\tlettucePool.setPort(connectionInfo.getPort());\n\t\tif (connectionInfo.getPassword() != null) {\n\t\t\tlettucePool.setPassword(connectionInfo.getPassword());\n\t\t}\n\t}\n\n\tprivate LettuceConnectionFactory createLettuceConnectionFactory(\n\t\t\tClientResources clientResources) {\n\n\t\tif (getSentinelConfig() != null) {\n\t\t\tif (this.properties.getLettuce() != null\n\t\t\t\t\t&& this.properties.getLettuce().getPool() != null) {\n\t\t\t\tDefaultLettucePool lettucePool = new DefaultLettucePool(\n\t\t\t\t\t\tgetSentinelConfig());\n\t\t\t\treturn new LettuceConnectionFactory(applyProperties(\n\t\t\t\t\t\tapplyClientResources(lettucePool, clientResources)));\n\t\t\t}\n\t\t\treturn applyClientResources(\n\t\t\t\t\tnew LettuceConnectionFactory(getSentinelConfig()),\n\t\t\t\t\tclientResources);\n\t\t}\n\n\t\tif (getClusterConfiguration() != null) {\n\t\t\treturn applyClientResources(\n\t\t\t\t\tnew LettuceConnectionFactory(getClusterConfiguration()),\n\t\t\t\t\tclientResources);\n\t\t}\n\n\t\tif (this.properties.getLettuce() != null\n\t\t\t\t&& this.properties.getLettuce().getPool() != null) {\n\t\t\tGenericObjectPoolConfig config = lettucePoolConfig(\n\t\t\t\t\tthis.properties.getLettuce().getPool());\n\t\t\tDefaultLettucePool lettucePool = new DefaultLettucePool(\n\t\t\t\t\tthis.properties.getHost(), this.properties.getPort(), config);\n\t\t\treturn new LettuceConnectionFactory(applyProperties(\n\t\t\t\t\tapplyClientResources(lettucePool, clientResources)));\n\t\t}\n\n\t\treturn applyClientResources(new LettuceConnectionFactory(), clientResources);\n\t}\n\n\tprivate DefaultLettucePool applyClientResources(DefaultLettucePool lettucePool,\n\t\t\tClientResources clientResources) {\n\t\tlettucePool.setClientResources(clientResources);\n\t\treturn lettucePool;\n\t}\n\n\tprivate LettuceConnectionFactory applyClientResources(\n\t\t\tLettuceConnectionFactory factory, ClientResources clientResources) {\n\t\tfactory.setClientResources(clientResources);\n\t\treturn factory;\n\t}\n\n\tprivate GenericObjectPoolConfig lettucePoolConfig(RedisProperties.Pool props) {\n\t\tGenericObjectPoolConfig config = new GenericObjectPoolConfig();\n\t\tconfig.setMaxTotal(props.getMaxActive());\n\t\tconfig.setMaxIdle(props.getMaxIdle());\n\t\tconfig.setMinIdle(props.getMinIdle());\n\t\tconfig.setMaxWaitMillis(props.getMaxWait());\n\t\treturn config;\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
