{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mustache/MustacheServletWebConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2012-2017 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.mustache;\n+\n+import com.samskivert.mustache.Mustache.Compiler;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\n+import org.springframework.boot.web.servlet.view.MustacheViewResolver;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.Ordered;\n+\n+@Configuration\n+@ConditionalOnWebApplication(type = Type.SERVLET)\n+class MustacheServletWebConfiguration {\n+\n+\tprivate final MustacheProperties mustache;\n+\n+\tprotected MustacheServletWebConfiguration(MustacheProperties mustache) {\n+\t\tthis.mustache = mustache;\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean(MustacheViewResolver.class)\n+\tpublic MustacheViewResolver mustacheViewResolver(Compiler mustacheCompiler) {\n+\t\tMustacheViewResolver resolver = new MustacheViewResolver(mustacheCompiler);\n+\t\tthis.mustache.applyToViewResolver(resolver);\n+\t\tresolver.setCharset(this.mustache.getCharsetName());\n+\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 10);\n+\t\treturn resolver;\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.mustache;\n\nimport com.samskivert.mustache.Mustache.Compiler;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.web.servlet.view.MustacheViewResolver;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\n\n@Configuration\n@ConditionalOnWebApplication(type = Type.SERVLET)\nclass MustacheServletWebConfiguration {\n\n\tprivate final MustacheProperties mustache;\n\n\tprotected MustacheServletWebConfiguration(MustacheProperties mustache) {\n\t\tthis.mustache = mustache;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(MustacheViewResolver.class)\n\tpublic MustacheViewResolver mustacheViewResolver(Compiler mustacheCompiler) {\n\t\tMustacheViewResolver resolver = new MustacheViewResolver(mustacheCompiler);\n\t\tthis.mustache.applyToViewResolver(resolver);\n\t\tresolver.setCharset(this.mustache.getCharsetName());\n\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 10);\n\t\treturn resolver;\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
