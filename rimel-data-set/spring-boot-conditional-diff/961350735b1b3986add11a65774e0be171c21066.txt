@@ -0,0 +1,109 @@
+
+
+package org.springframework.boot.autoconfigure.cache;
+
+import org.junit.After;
+import org.junit.Test;
+
+import org.springframework.boot.test.EnvironmentTestUtils;
+import org.springframework.context.ConfigurableApplicationContext;
+import org.springframework.context.annotation.AnnotationConfigApplicationContext;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Conditional;
+import org.springframework.context.annotation.Configuration;
+
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+
+public class CacheConfigFileConditionTests {
+
+	private ConfigurableApplicationContext context;
+
+	@After
+	public void tearDown() {
+		if (this.context != null) {
+			this.context.close();
+		}
+	}
+
+	@Test
+	public void defaultFileAndNoExplicitKey() {
+		load(DefaultFileConfiguration.class);
+		assertTrue(this.context.containsBean());
+	}
+
+	@Test
+	public void noDefaultFileAndNoExplicitKey() {
+		load(NoDefaultFileConfiguration.class);
+		assertFalse(this.context.containsBean());
+	}
+
+	@Test
+	public void noDefaultFileAndExplicitKeyToResource() {
+		load(NoDefaultFileConfiguration.class, );
+		assertTrue(this.context.containsBean());
+	}
+
+	private void load(Class<?> config,
+			String... environment) {
+		AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext();
+		EnvironmentTestUtils.addEnvironment(applicationContext, environment);
+		applicationContext.register(config);
+		applicationContext.refresh();
+		this.context = applicationContext;
+	}
+
+
+	@Configuration
+	@Conditional(CacheConfigFileDefaultFileCondition.class)
+	static class DefaultFileConfiguration {
+
+		@Bean
+		public String foo() {
+			return ;
+		}
+	}
+
+	@Configuration
+	@Conditional(CacheConfigFileNoDefaultFileCondition.class)
+	static class NoDefaultFileConfiguration {
+
+		@Bean
+		public String foo() {
+			return ;
+		}
+	}
+
+	private static class CacheConfigFileDefaultFileCondition extends CacheConfigFileCondition {
+
+		public CacheConfigFileDefaultFileCondition() {
+			super(, , );
+		}
+	}
+
+	private static class CacheConfigFileNoDefaultFileCondition extends CacheConfigFileCondition {
+		public CacheConfigFileNoDefaultFileCondition() {
+			super(, , );
+		}
+
+	}
+}

