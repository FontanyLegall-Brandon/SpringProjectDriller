{'_old_path': None, '_new_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricsDropwizardAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2012-2015 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.autoconfigure;\n+\n+import org.springframework.boot.actuate.endpoint.MetricReaderPublicMetrics;\n+import org.springframework.boot.actuate.endpoint.PublicMetrics;\n+import org.springframework.boot.actuate.metrics.CounterService;\n+import org.springframework.boot.actuate.metrics.GaugeService;\n+import org.springframework.boot.actuate.metrics.reader.MetricRegistryMetricReader;\n+import org.springframework.boot.actuate.metrics.writer.DropwizardMetricServices;\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import com.codahale.metrics.MetricRegistry;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for Dropwizard-based metrics.\n+ *\n+ * @author Dave Syer\n+ */\n+@Configuration\n+@ConditionalOnClass(MetricRegistry.class)\n+@AutoConfigureBefore(MetricRepositoryAutoConfiguration.class)\n+public class MetricsDropwizardAutoConfiguration {\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic MetricRegistry metricRegistry() {\n+\t\treturn new MetricRegistry();\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean({ DropwizardMetricServices.class, CounterService.class,\n+\t\t\tGaugeService.class })\n+\tpublic DropwizardMetricServices dropwizardMetricServices(MetricRegistry metricRegistry) {\n+\t\treturn new DropwizardMetricServices(metricRegistry);\n+\t}\n+\n+\t@Bean\n+\tpublic PublicMetrics dropwizardPublicMetrics(MetricRegistry metricRegistry) {\n+\t\tMetricRegistryMetricReader reader = new MetricRegistryMetricReader(metricRegistry);\n+\t\treturn new MetricReaderPublicMetrics(reader);\n+\t}\n+\n+}\n\\ No newline at end of file\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport org.springframework.boot.actuate.endpoint.MetricReaderPublicMetrics;\nimport org.springframework.boot.actuate.endpoint.PublicMetrics;\nimport org.springframework.boot.actuate.metrics.CounterService;\nimport org.springframework.boot.actuate.metrics.GaugeService;\nimport org.springframework.boot.actuate.metrics.reader.MetricRegistryMetricReader;\nimport org.springframework.boot.actuate.metrics.writer.DropwizardMetricServices;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport com.codahale.metrics.MetricRegistry;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Dropwizard-based metrics.\n *\n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnClass(MetricRegistry.class)\n@AutoConfigureBefore(MetricRepositoryAutoConfiguration.class)\npublic class MetricsDropwizardAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic MetricRegistry metricRegistry() {\n\t\treturn new MetricRegistry();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean({ DropwizardMetricServices.class, CounterService.class,\n\t\t\tGaugeService.class })\n\tpublic DropwizardMetricServices dropwizardMetricServices(MetricRegistry metricRegistry) {\n\t\treturn new DropwizardMetricServices(metricRegistry);\n\t}\n\n\t@Bean\n\tpublic PublicMetrics dropwizardPublicMetrics(MetricRegistry metricRegistry) {\n\t\tMetricRegistryMetricReader reader = new MetricRegistryMetricReader(metricRegistry);\n\t\treturn new MetricReaderPublicMetrics(reader);\n\t}\n\n}', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
