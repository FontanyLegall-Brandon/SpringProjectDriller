{'_old_path': None, '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/reactive/ReactiveOAuth2ClientConfigurations.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2012-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.security.oauth2.client.reactive;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.autoconfigure.security.oauth2.client.ClientsConfiguredCondition;\n+import org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties;\n+import org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Conditional;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.config.web.server.ServerHttpSecurity;\n+import org.springframework.security.oauth2.client.InMemoryReactiveOAuth2AuthorizedClientService;\n+import org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientService;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.InMemoryReactiveClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.registration.ReactiveClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.server.AuthenticatedPrincipalServerOAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizedClientRepository;\n+import org.springframework.security.web.server.SecurityWebFilterChain;\n+\n+/**\n+ * Reactive OAuth2 Client configurations.\n+ *\n+ * @author Madhura Bhave\n+ */\n+class ReactiveOAuth2ClientConfigurations {\n+\n+\t@Configuration\n+\t@Conditional(ClientsConfiguredCondition.class)\n+\t@ConditionalOnMissingBean(ReactiveClientRegistrationRepository.class)\n+\tstatic class ReactiveClientRegistrationRepositoryConfiguration {\n+\n+\t\t@Bean\n+\t\tpublic InMemoryReactiveClientRegistrationRepository clientRegistrationRepository(\n+\t\t\t\tOAuth2ClientProperties properties) {\n+\t\t\tList<ClientRegistration> registrations = new ArrayList<>(\n+\t\t\t\t\tOAuth2ClientPropertiesRegistrationAdapter.getClientRegistrations(properties).values());\n+\t\t\treturn new InMemoryReactiveClientRegistrationRepository(registrations);\n+\t\t}\n+\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnBean(ReactiveClientRegistrationRepository.class)\n+\tstatic class ReactiveOAuth2ClientConfiguration {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean\n+\t\tpublic ReactiveOAuth2AuthorizedClientService authorizedClientService(\n+\t\t\t\tReactiveClientRegistrationRepository clientRegistrationRepository) {\n+\t\t\treturn new InMemoryReactiveOAuth2AuthorizedClientService(clientRegistrationRepository);\n+\t\t}\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean\n+\t\tpublic ServerOAuth2AuthorizedClientRepository authorizedClientRepository(\n+\t\t\t\tReactiveOAuth2AuthorizedClientService authorizedClientService) {\n+\t\t\treturn new AuthenticatedPrincipalServerOAuth2AuthorizedClientRepository(authorizedClientService);\n+\t\t}\n+\n+\t\t@Configuration\n+\t\t@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)\n+\t\tstatic class SecurityWebFilterChainConfiguration {\n+\n+\t\t\t@Bean\n+\t\t\t@ConditionalOnMissingBean\n+\t\t\tpublic SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) {\n+\t\t\t\thttp.authorizeExchange().anyExchange().authenticated();\n+\t\t\t\thttp.oauth2Login();\n+\t\t\t\treturn http.build();\n+\t\t\t}\n+\n+\t\t}\n+\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security.oauth2.client.reactive;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.security.oauth2.client.ClientsConfiguredCondition;\nimport org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties;\nimport org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.web.server.ServerHttpSecurity;\nimport org.springframework.security.oauth2.client.InMemoryReactiveOAuth2AuthorizedClientService;\nimport org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientService;\nimport org.springframework.security.oauth2.client.registration.ClientRegistration;\nimport org.springframework.security.oauth2.client.registration.InMemoryReactiveClientRegistrationRepository;\nimport org.springframework.security.oauth2.client.registration.ReactiveClientRegistrationRepository;\nimport org.springframework.security.oauth2.client.web.server.AuthenticatedPrincipalServerOAuth2AuthorizedClientRepository;\nimport org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizedClientRepository;\nimport org.springframework.security.web.server.SecurityWebFilterChain;\n\n/**\n * Reactive OAuth2 Client configurations.\n *\n * @author Madhura Bhave\n */\nclass ReactiveOAuth2ClientConfigurations {\n\n\t@Configuration\n\t@Conditional(ClientsConfiguredCondition.class)\n\t@ConditionalOnMissingBean(ReactiveClientRegistrationRepository.class)\n\tstatic class ReactiveClientRegistrationRepositoryConfiguration {\n\n\t\t@Bean\n\t\tpublic InMemoryReactiveClientRegistrationRepository clientRegistrationRepository(\n\t\t\t\tOAuth2ClientProperties properties) {\n\t\t\tList<ClientRegistration> registrations = new ArrayList<>(\n\t\t\t\t\tOAuth2ClientPropertiesRegistrationAdapter.getClientRegistrations(properties).values());\n\t\t\treturn new InMemoryReactiveClientRegistrationRepository(registrations);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(ReactiveClientRegistrationRepository.class)\n\tstatic class ReactiveOAuth2ClientConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic ReactiveOAuth2AuthorizedClientService authorizedClientService(\n\t\t\t\tReactiveClientRegistrationRepository clientRegistrationRepository) {\n\t\t\treturn new InMemoryReactiveOAuth2AuthorizedClientService(clientRegistrationRepository);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic ServerOAuth2AuthorizedClientRepository authorizedClientRepository(\n\t\t\t\tReactiveOAuth2AuthorizedClientService authorizedClientService) {\n\t\t\treturn new AuthenticatedPrincipalServerOAuth2AuthorizedClientRepository(authorizedClientService);\n\t\t}\n\n\t\t@Configuration\n\t\t@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)\n\t\tstatic class SecurityWebFilterChainConfiguration {\n\n\t\t\t@Bean\n\t\t\t@ConditionalOnMissingBean\n\t\t\tpublic SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) {\n\t\t\t\thttp.authorizeExchange().anyExchange().authenticated();\n\t\t\t\thttp.oauth2Login();\n\t\t\t\treturn http.build();\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
