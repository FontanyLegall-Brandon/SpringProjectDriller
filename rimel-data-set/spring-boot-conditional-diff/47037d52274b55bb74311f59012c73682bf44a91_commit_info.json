{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/ReactiveCassandraDataAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/ReactiveCassandraDataAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -18,11 +18,11 @@ package org.springframework.boot.autoconfigure.data.cassandra;\n \n import com.datastax.driver.core.Cluster;\n import com.datastax.driver.core.Session;\n+import reactor.core.publisher.Flux;\n import reactor.core.scheduler.Schedulers;\n \n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n-import org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n@@ -43,29 +43,29 @@ import org.springframework.data.cassandra.core.ReactiveCassandraTemplate;\n  * @since 2.0.0\n  */\n @Configuration\n-@ConditionalOnClass({ Cluster.class, ReactiveCassandraTemplate.class })\n+@ConditionalOnClass({ Cluster.class, ReactiveCassandraTemplate.class, Flux.class })\n @ConditionalOnBean(Session.class)\n-@AutoConfigureAfter(CassandraAutoConfiguration.class)\n+@AutoConfigureAfter(CassandraDataAutoConfiguration.class)\n public class ReactiveCassandraDataAutoConfiguration {\n \n \t@Bean\n \t@ConditionalOnMissingBean(ReactiveSession.class)\n-\tpublic ReactiveSession rectiveSession(Session session)\n-\t\t\tthrows Exception {\n+\tpublic ReactiveSession reactiveCassandraSession(Session session) {\n \t\treturn new DefaultBridgedReactiveSession(session, Schedulers.elastic());\n \t}\n \n \t@Bean\n-\tpublic ReactiveSessionFactory reactiveSessionFactory(ReactiveSession reactiveSession)\n-\t\t\tthrows Exception {\n-\t\treturn new DefaultReactiveSessionFactory(reactiveSession);\n+\tpublic ReactiveSessionFactory reactiveCassandraSessionFactory(\n+\t\t\tReactiveSession reactiveCassandraSession) {\n+\t\treturn new DefaultReactiveSessionFactory(reactiveCassandraSession);\n \t}\n \n \t@Bean\n \t@ConditionalOnMissingBean\n-\tpublic ReactiveCassandraTemplate reactiveCassandraTemplate(ReactiveSession session,\n-\t\t\tCassandraConverter converter) throws Exception {\n-\t\treturn new ReactiveCassandraTemplate(session, converter);\n+\tpublic ReactiveCassandraTemplate reactiveCassandraTemplate(\n+\t\t\tReactiveSession reactiveCassandraSession,\n+\t\t\tCassandraConverter converter) {\n+\t\treturn new ReactiveCassandraTemplate(reactiveCassandraSession, converter);\n \t}\n \n }\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.cassandra;\n\nimport com.datastax.driver.core.Cluster;\nimport com.datastax.driver.core.Session;\nimport reactor.core.publisher.Flux;\nimport reactor.core.scheduler.Schedulers;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.cassandra.core.session.DefaultBridgedReactiveSession;\nimport org.springframework.cassandra.core.session.DefaultReactiveSessionFactory;\nimport org.springframework.cassandra.core.session.ReactiveSession;\nimport org.springframework.cassandra.core.session.ReactiveSessionFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.cassandra.convert.CassandraConverter;\nimport org.springframework.data.cassandra.core.ReactiveCassandraTemplate;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s reactive Cassandra\n * support.\n *\n * @author Eddú Meléndez\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass({ Cluster.class, ReactiveCassandraTemplate.class, Flux.class })\n@ConditionalOnBean(Session.class)\n@AutoConfigureAfter(CassandraDataAutoConfiguration.class)\npublic class ReactiveCassandraDataAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean(ReactiveSession.class)\n\tpublic ReactiveSession reactiveCassandraSession(Session session) {\n\t\treturn new DefaultBridgedReactiveSession(session, Schedulers.elastic());\n\t}\n\n\t@Bean\n\tpublic ReactiveSessionFactory reactiveCassandraSessionFactory(\n\t\t\tReactiveSession reactiveCassandraSession) {\n\t\treturn new DefaultReactiveSessionFactory(reactiveCassandraSession);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic ReactiveCassandraTemplate reactiveCassandraTemplate(\n\t\t\tReactiveSession reactiveCassandraSession,\n\t\t\tCassandraConverter converter) {\n\t\treturn new ReactiveCassandraTemplate(reactiveCassandraSession, converter);\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.cassandra;\n\nimport com.datastax.driver.core.Cluster;\nimport com.datastax.driver.core.Session;\nimport reactor.core.scheduler.Schedulers;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.cassandra.core.session.DefaultBridgedReactiveSession;\nimport org.springframework.cassandra.core.session.DefaultReactiveSessionFactory;\nimport org.springframework.cassandra.core.session.ReactiveSession;\nimport org.springframework.cassandra.core.session.ReactiveSessionFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.cassandra.convert.CassandraConverter;\nimport org.springframework.data.cassandra.core.ReactiveCassandraTemplate;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s reactive Cassandra\n * support.\n *\n * @author Eddú Meléndez\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass({ Cluster.class, ReactiveCassandraTemplate.class })\n@ConditionalOnBean(Session.class)\n@AutoConfigureAfter(CassandraAutoConfiguration.class)\npublic class ReactiveCassandraDataAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean(ReactiveSession.class)\n\tpublic ReactiveSession rectiveSession(Session session)\n\t\t\tthrows Exception {\n\t\treturn new DefaultBridgedReactiveSession(session, Schedulers.elastic());\n\t}\n\n\t@Bean\n\tpublic ReactiveSessionFactory reactiveSessionFactory(ReactiveSession reactiveSession)\n\t\t\tthrows Exception {\n\t\treturn new DefaultReactiveSessionFactory(reactiveSession);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic ReactiveCassandraTemplate reactiveCassandraTemplate(ReactiveSession session,\n\t\t\tCassandraConverter converter) throws Exception {\n\t\treturn new ReactiveCassandraTemplate(session, converter);\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
