{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/HealthWebEndpointManagementContextConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/HealthWebEndpointManagementContextConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -31,9 +31,6 @@ import org.springframework.boot.actuate.health.HealthStatusHttpMapper;\n import org.springframework.boot.actuate.health.OrderedHealthAggregator;\n import org.springframework.boot.actuate.health.ReactiveHealthEndpointWebExtension;\n import org.springframework.boot.actuate.health.ReactiveHealthIndicator;\n-import org.springframework.boot.actuate.health.ReactiveStatusEndpointWebExtension;\n-import org.springframework.boot.actuate.health.StatusEndpoint;\n-import org.springframework.boot.actuate.health.StatusEndpointWebExtension;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n@@ -85,19 +82,10 @@ public class HealthWebEndpointManagementContextConfiguration {\n \t\t@ConditionalOnEnabledEndpoint\n \t\t@ConditionalOnBean(HealthEndpoint.class)\n \t\tpublic ReactiveHealthEndpointWebExtension reactiveHealthEndpointWebExtension(\n-\t\t\t\tHealthStatusHttpMapper healthStatusHttpMapper) {\n+\t\t\t\tHealthStatusHttpMapper healthStatusHttpMapper,\n+\t\t\t\tHealthEndpointProperties properties) {\n \t\t\treturn new ReactiveHealthEndpointWebExtension(this.reactiveHealthIndicator,\n-\t\t\t\t\thealthStatusHttpMapper);\n-\t\t}\n-\n-\t\t@Bean\n-\t\t@ConditionalOnMissingBean\n-\t\t@ConditionalOnEnabledEndpoint\n-\t\t@ConditionalOnBean(StatusEndpoint.class)\n-\t\tpublic ReactiveStatusEndpointWebExtension reactiveStatusEndpointWebExtension(\n-\t\t\t\tHealthStatusHttpMapper healthStatusHttpMapper) {\n-\t\t\treturn new ReactiveStatusEndpointWebExtension(this.reactiveHealthIndicator,\n-\t\t\t\t\thealthStatusHttpMapper);\n+\t\t\t\t\thealthStatusHttpMapper, properties.isShowDetails());\n \t\t}\n \n \t}\n@@ -115,15 +103,6 @@ public class HealthWebEndpointManagementContextConfiguration {\n \t\t\treturn new HealthEndpointWebExtension(delegate, healthStatusHttpMapper);\n \t\t}\n \n-\t\t@Bean\n-\t\t@ConditionalOnMissingBean\n-\t\t@ConditionalOnEnabledEndpoint\n-\t\t@ConditionalOnBean(StatusEndpoint.class)\n-\t\tpublic StatusEndpointWebExtension statusEndpointWebExtension(\n-\t\t\t\tStatusEndpoint delegate, HealthStatusHttpMapper healthStatusHttpMapper) {\n-\t\t\treturn new StatusEndpointWebExtension(delegate, healthStatusHttpMapper);\n-\t\t}\n-\n \t}\n \n }\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.health;\n\nimport java.util.Collections;\nimport java.util.Map;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\nimport org.springframework.boot.actuate.autoconfigure.web.ManagementContextConfiguration;\nimport org.springframework.boot.actuate.health.CompositeReactiveHealthIndicatorFactory;\nimport org.springframework.boot.actuate.health.HealthAggregator;\nimport org.springframework.boot.actuate.health.HealthEndpoint;\nimport org.springframework.boot.actuate.health.HealthEndpointWebExtension;\nimport org.springframework.boot.actuate.health.HealthIndicator;\nimport org.springframework.boot.actuate.health.HealthStatusHttpMapper;\nimport org.springframework.boot.actuate.health.OrderedHealthAggregator;\nimport org.springframework.boot.actuate.health.ReactiveHealthEndpointWebExtension;\nimport org.springframework.boot.actuate.health.ReactiveHealthIndicator;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link ManagementContextConfiguration} for health endpoints.\n *\n * @author Stephane Nicoll\n * @since 2.0.0\n */\n@ManagementContextConfiguration\n@EnableConfigurationProperties(HealthIndicatorProperties.class)\npublic class HealthWebEndpointManagementContextConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic HealthStatusHttpMapper createHealthStatusHttpMapper(\n\t\t\tHealthIndicatorProperties healthIndicatorProperties) {\n\t\tHealthStatusHttpMapper statusHttpMapper = new HealthStatusHttpMapper();\n\t\tif (healthIndicatorProperties.getHttpMapping() != null) {\n\t\t\tstatusHttpMapper.addStatusMapping(healthIndicatorProperties.getHttpMapping());\n\t\t}\n\t\treturn statusHttpMapper;\n\t}\n\n\t@Configuration\n\t@ConditionalOnWebApplication(type = Type.REACTIVE)\n\tstatic class ReactiveWebHealthConfiguration {\n\n\t\tprivate final ReactiveHealthIndicator reactiveHealthIndicator;\n\n\t\tReactiveWebHealthConfiguration(ObjectProvider<HealthAggregator> healthAggregator,\n\t\t\t\tObjectProvider<Map<String, ReactiveHealthIndicator>> reactiveHealthIndicators,\n\t\t\t\tObjectProvider<Map<String, HealthIndicator>> healthIndicators) {\n\t\t\tthis.reactiveHealthIndicator = new CompositeReactiveHealthIndicatorFactory()\n\t\t\t\t\t.createReactiveHealthIndicator(\n\t\t\t\t\t\t\thealthAggregator.getIfAvailable(OrderedHealthAggregator::new),\n\t\t\t\t\t\t\treactiveHealthIndicators\n\t\t\t\t\t\t\t\t\t.getIfAvailable(Collections::emptyMap),\n\t\t\t\t\t\t\thealthIndicators.getIfAvailable(Collections::emptyMap));\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnEnabledEndpoint\n\t\t@ConditionalOnBean(HealthEndpoint.class)\n\t\tpublic ReactiveHealthEndpointWebExtension reactiveHealthEndpointWebExtension(\n\t\t\t\tHealthStatusHttpMapper healthStatusHttpMapper,\n\t\t\t\tHealthEndpointProperties properties) {\n\t\t\treturn new ReactiveHealthEndpointWebExtension(this.reactiveHealthIndicator,\n\t\t\t\t\thealthStatusHttpMapper, properties.isShowDetails());\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnWebApplication(type = Type.SERVLET)\n\tstatic class ServletWebHealthConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnEnabledEndpoint\n\t\t@ConditionalOnBean(HealthEndpoint.class)\n\t\tpublic HealthEndpointWebExtension healthEndpointWebExtension(\n\t\t\t\tHealthEndpoint delegate, HealthStatusHttpMapper healthStatusHttpMapper) {\n\t\t\treturn new HealthEndpointWebExtension(delegate, healthStatusHttpMapper);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.health;\n\nimport java.util.Collections;\nimport java.util.Map;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\nimport org.springframework.boot.actuate.autoconfigure.web.ManagementContextConfiguration;\nimport org.springframework.boot.actuate.health.CompositeReactiveHealthIndicatorFactory;\nimport org.springframework.boot.actuate.health.HealthAggregator;\nimport org.springframework.boot.actuate.health.HealthEndpoint;\nimport org.springframework.boot.actuate.health.HealthEndpointWebExtension;\nimport org.springframework.boot.actuate.health.HealthIndicator;\nimport org.springframework.boot.actuate.health.HealthStatusHttpMapper;\nimport org.springframework.boot.actuate.health.OrderedHealthAggregator;\nimport org.springframework.boot.actuate.health.ReactiveHealthEndpointWebExtension;\nimport org.springframework.boot.actuate.health.ReactiveHealthIndicator;\nimport org.springframework.boot.actuate.health.ReactiveStatusEndpointWebExtension;\nimport org.springframework.boot.actuate.health.StatusEndpoint;\nimport org.springframework.boot.actuate.health.StatusEndpointWebExtension;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link ManagementContextConfiguration} for health endpoints.\n *\n * @author Stephane Nicoll\n * @since 2.0.0\n */\n@ManagementContextConfiguration\n@EnableConfigurationProperties(HealthIndicatorProperties.class)\npublic class HealthWebEndpointManagementContextConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic HealthStatusHttpMapper createHealthStatusHttpMapper(\n\t\t\tHealthIndicatorProperties healthIndicatorProperties) {\n\t\tHealthStatusHttpMapper statusHttpMapper = new HealthStatusHttpMapper();\n\t\tif (healthIndicatorProperties.getHttpMapping() != null) {\n\t\t\tstatusHttpMapper.addStatusMapping(healthIndicatorProperties.getHttpMapping());\n\t\t}\n\t\treturn statusHttpMapper;\n\t}\n\n\t@Configuration\n\t@ConditionalOnWebApplication(type = Type.REACTIVE)\n\tstatic class ReactiveWebHealthConfiguration {\n\n\t\tprivate final ReactiveHealthIndicator reactiveHealthIndicator;\n\n\t\tReactiveWebHealthConfiguration(ObjectProvider<HealthAggregator> healthAggregator,\n\t\t\t\tObjectProvider<Map<String, ReactiveHealthIndicator>> reactiveHealthIndicators,\n\t\t\t\tObjectProvider<Map<String, HealthIndicator>> healthIndicators) {\n\t\t\tthis.reactiveHealthIndicator = new CompositeReactiveHealthIndicatorFactory()\n\t\t\t\t\t.createReactiveHealthIndicator(\n\t\t\t\t\t\t\thealthAggregator.getIfAvailable(OrderedHealthAggregator::new),\n\t\t\t\t\t\t\treactiveHealthIndicators\n\t\t\t\t\t\t\t\t\t.getIfAvailable(Collections::emptyMap),\n\t\t\t\t\t\t\thealthIndicators.getIfAvailable(Collections::emptyMap));\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnEnabledEndpoint\n\t\t@ConditionalOnBean(HealthEndpoint.class)\n\t\tpublic ReactiveHealthEndpointWebExtension reactiveHealthEndpointWebExtension(\n\t\t\t\tHealthStatusHttpMapper healthStatusHttpMapper) {\n\t\t\treturn new ReactiveHealthEndpointWebExtension(this.reactiveHealthIndicator,\n\t\t\t\t\thealthStatusHttpMapper);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnEnabledEndpoint\n\t\t@ConditionalOnBean(StatusEndpoint.class)\n\t\tpublic ReactiveStatusEndpointWebExtension reactiveStatusEndpointWebExtension(\n\t\t\t\tHealthStatusHttpMapper healthStatusHttpMapper) {\n\t\t\treturn new ReactiveStatusEndpointWebExtension(this.reactiveHealthIndicator,\n\t\t\t\t\thealthStatusHttpMapper);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnWebApplication(type = Type.SERVLET)\n\tstatic class ServletWebHealthConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnEnabledEndpoint\n\t\t@ConditionalOnBean(HealthEndpoint.class)\n\t\tpublic HealthEndpointWebExtension healthEndpointWebExtension(\n\t\t\t\tHealthEndpoint delegate, HealthStatusHttpMapper healthStatusHttpMapper) {\n\t\t\treturn new HealthEndpointWebExtension(delegate, healthStatusHttpMapper);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnEnabledEndpoint\n\t\t@ConditionalOnBean(StatusEndpoint.class)\n\t\tpublic StatusEndpointWebExtension statusEndpointWebExtension(\n\t\t\t\tStatusEndpoint delegate, HealthStatusHttpMapper healthStatusHttpMapper) {\n\t\t\treturn new StatusEndpointWebExtension(delegate, healthStatusHttpMapper);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
