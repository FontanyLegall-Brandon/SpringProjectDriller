@@ -0,0 +1,81 @@
+
+
+package org.springframework.boot.autoconfigure.data.elasticsearch;
+
+import reactor.netty.http.client.HttpClient;
+
+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.context.properties.EnableConfigurationProperties;
+import org.springframework.boot.context.properties.PropertyMapper;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.data.elasticsearch.client.ClientConfiguration;
+import org.springframework.data.elasticsearch.client.reactive.ReactiveElasticsearchClient;
+import org.springframework.data.elasticsearch.client.reactive.ReactiveRestClients;
+import org.springframework.http.HttpHeaders;
+import org.springframework.web.reactive.function.client.WebClient;
+
+
+@Configuration(proxyBeanMethods = false)
+@ConditionalOnClass({ ReactiveRestClients.class, WebClient.class, HttpClient.class })
+@EnableConfigurationProperties(ReactiveRestClientProperties.class)
+public class ReactiveRestClientAutoConfiguration {
+
+	@Bean
+	@ConditionalOnMissingBean
+	public ClientConfiguration clientConfiguration(
+			ReactiveRestClientProperties properties) {
+		ClientConfiguration.MaybeSecureClientConfigurationBuilder builder = ClientConfiguration
+				.builder().connectedTo(properties.getEndpoints().toArray(new String[0]));
+		if (properties.isUseSsl()) {
+			builder.usingSsl();
+		}
+		configureTimeouts(builder, properties);
+		return builder.build();
+	}
+
+	private void configureTimeouts(
+			ClientConfiguration.TerminalClientConfigurationBuilder builder,
+			ReactiveRestClientProperties properties) {
+		PropertyMapper map = PropertyMapper.get();
+		map.from(properties.getConnectionTimeout()).whenNonNull()
+				.to(builder::withConnectTimeout);
+		map.from(properties.getSocketTimeout()).whenNonNull()
+				.to(builder::withSocketTimeout);
+		map.from(properties.getUsername()).whenHasText().to((username) -> {
+			HttpHeaders headers = new HttpHeaders();
+			headers.setBasicAuth(username, properties.getPassword());
+			builder.withDefaultHeaders(headers);
+		});
+	}
+
+	@Bean
+	@ConditionalOnMissingBean
+	public ReactiveElasticsearchClient reactiveElasticsearchClient(
+			ClientConfiguration clientConfiguration) {
+		return ReactiveRestClients.create(clientConfiguration);
+	}
+
+}

