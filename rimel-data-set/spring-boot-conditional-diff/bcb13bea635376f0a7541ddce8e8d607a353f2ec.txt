@@ -0,0 +1,71 @@
+
+
+package org.springframework.boot.autoconfigure.batch;
+
+import javax.persistence.EntityManagerFactory;
+import javax.sql.DataSource;
+
+import org.springframework.batch.core.configuration.annotation.BatchConfigurer;
+import org.springframework.beans.factory.ObjectProvider;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.transaction.PlatformTransactionManager;
+
+
+@ConditionalOnClass(PlatformTransactionManager.class)
+@ConditionalOnMissingBean(BatchConfigurer.class)
+@Configuration
+class BatchConfigurerConfiguration {
+
+	@ConditionalOnMissingBean(name = )
+	static class JdbcBatchConfiguration {
+
+		@Bean
+		public BasicBatchConfigurer batchConfigurer(BatchProperties properties,
+				DataSource dataSource,
+				ObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers) {
+			return new BasicBatchConfigurer(properties, dataSource,
+					transactionManagerCustomizers.getIfAvailable());
+		}
+
+	}
+
+	@ConditionalOnClass(name = )
+	@ConditionalOnBean(name = )
+	static class JpaBatchConfiguration {
+
+		@Bean
+		public JpaBatchConfigurer batchConfigurer(BatchProperties properties,
+				DataSource dataSource,
+				ObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers,
+				EntityManagerFactory entityManagerFactory) {
+			return new JpaBatchConfigurer(properties, dataSource,
+					transactionManagerCustomizers.getIfAvailable(), entityManagerFactory);
+		}
+
+	}
+
+}
+

