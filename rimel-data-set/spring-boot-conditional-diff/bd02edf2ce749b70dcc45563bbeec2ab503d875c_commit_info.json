{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaHibernateConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,190 @@\n+/*\n+ * Copyright 2012-2017 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.orm.jpa;\n+\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.sql.DataSource;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\n+import org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers;\n+import org.springframework.boot.jdbc.SchemaManagementProvider;\n+import org.springframework.boot.orm.jpa.hibernate.SpringJtaPlatform;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.jndi.JndiLocatorDelegate;\n+import org.springframework.orm.jpa.vendor.AbstractJpaVendorAdapter;\n+import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;\n+import org.springframework.transaction.jta.JtaTransactionManager;\n+import org.springframework.util.ClassUtils;\n+\n+/**\n+ * {@link JpaBaseConfiguration} implementation for Hibernate.\n+ *\n+ * @author Phillip Webb\n+ * @author Josh Long\n+ * @author Manuel Doninger\n+ * @author Andy Wilkinson\n+ * @author Stephane Nicoll\n+ * @since 2.0.0\n+ */\n+@Configuration\n+@ConditionalOnSingleCandidate(DataSource.class)\n+public class JpaHibernateConfiguration extends JpaBaseConfiguration {\n+\n+\tprivate static final Log logger = LogFactory\n+\t\t\t.getLog(JpaHibernateConfiguration.class);\n+\n+\tprivate static final String JTA_PLATFORM = "hibernate.transaction.jta.platform";\n+\n+\t/**\n+\t * {@code NoJtaPlatform} implementations for various Hibernate versions.\n+\t */\n+\tprivate static final String[] NO_JTA_PLATFORM_CLASSES = {\n+\t\t\t"org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform",\n+\t\t\t"org.hibernate.service.jta.platform.internal.NoJtaPlatform" };\n+\n+\t/**\n+\t * {@code WebSphereExtendedJtaPlatform} implementations for various Hibernate\n+\t * versions.\n+\t */\n+\tprivate static final String[] WEBSPHERE_JTA_PLATFORM_CLASSES = {\n+\t\t\t"org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform",\n+\t\t\t"org.hibernate.service.jta.platform.internal.WebSphereExtendedJtaPlatform", };\n+\n+\tprivate final HibernateDefaultDdlAutoProvider defaultDdlAutoProvider;\n+\n+\tpublic JpaHibernateConfiguration(DataSource dataSource,\n+\t\t\tJpaProperties jpaProperties,\n+\t\t\tObjectProvider<JtaTransactionManager> jtaTransactionManager,\n+\t\t\tObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers,\n+\t\t\tObjectProvider<List<SchemaManagementProvider>> providers) {\n+\t\tsuper(dataSource, jpaProperties, jtaTransactionManager,\n+\t\t\t\ttransactionManagerCustomizers);\n+\t\tthis.defaultDdlAutoProvider = new HibernateDefaultDdlAutoProvider(\n+\t\t\t\tproviders.getIfAvailable(Collections::emptyList));\n+\t}\n+\n+\t@Override\n+\tprotected AbstractJpaVendorAdapter createJpaVendorAdapter() {\n+\t\treturn new HibernateJpaVendorAdapter();\n+\t}\n+\n+\t@Override\n+\tprotected Map<String, Object> getVendorProperties() {\n+\t\tMap<String, Object> vendorProperties = new LinkedHashMap<>();\n+\t\tString defaultDdlMode = this.defaultDdlAutoProvider\n+\t\t\t\t.getDefaultDdlAuto(getDataSource());\n+\t\tvendorProperties.putAll(getProperties().getHibernateProperties(defaultDdlMode));\n+\t\treturn vendorProperties;\n+\t}\n+\n+\t@Override\n+\tprotected void customizeVendorProperties(Map<String, Object> vendorProperties) {\n+\t\tsuper.customizeVendorProperties(vendorProperties);\n+\t\tif (!vendorProperties.containsKey(JTA_PLATFORM)) {\n+\t\t\tconfigureJtaPlatform(vendorProperties);\n+\t\t}\n+\t}\n+\n+\tprivate void configureJtaPlatform(Map<String, Object> vendorProperties)\n+\t\t\tthrows LinkageError {\n+\t\tJtaTransactionManager jtaTransactionManager = getJtaTransactionManager();\n+\t\tif (jtaTransactionManager != null) {\n+\t\t\tif (runningOnWebSphere()) {\n+\t\t\t\t// We can never use SpringJtaPlatform on WebSphere as\n+\t\t\t\t// WebSphereUowTransactionManager has a null TransactionManager\n+\t\t\t\t// which will cause Hibernate to NPE\n+\t\t\t\tconfigureWebSphereTransactionPlatform(vendorProperties);\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tconfigureSpringJtaPlatform(vendorProperties, jtaTransactionManager);\n+\t\t\t}\n+\t\t}\n+\t\telse {\n+\t\t\tvendorProperties.put(JTA_PLATFORM, getNoJtaPlatformManager());\n+\t\t}\n+\t}\n+\n+\tprivate boolean runningOnWebSphere() {\n+\t\treturn ClassUtils.isPresent(\n+\t\t\t\t"com.ibm.websphere.jtaextensions." + "ExtendedJTATransaction",\n+\t\t\t\tgetClass().getClassLoader());\n+\t}\n+\n+\tprivate void configureWebSphereTransactionPlatform(\n+\t\t\tMap<String, Object> vendorProperties) {\n+\t\tvendorProperties.put(JTA_PLATFORM, getWebSphereJtaPlatformManager());\n+\t}\n+\n+\tprivate Object getWebSphereJtaPlatformManager() {\n+\t\treturn getJtaPlatformManager(WEBSPHERE_JTA_PLATFORM_CLASSES);\n+\t}\n+\n+\tprivate void configureSpringJtaPlatform(Map<String, Object> vendorProperties,\n+\t\t\tJtaTransactionManager jtaTransactionManager) {\n+\t\ttry {\n+\t\t\tvendorProperties.put(JTA_PLATFORM,\n+\t\t\t\t\tnew SpringJtaPlatform(jtaTransactionManager));\n+\t\t}\n+\t\tcatch (LinkageError ex) {\n+\t\t\t// NoClassDefFoundError can happen if Hibernate 4.2 is used and some\n+\t\t\t// containers (e.g. JBoss EAP 6) wraps it in the superclass LinkageError\n+\t\t\tif (!isUsingJndi()) {\n+\t\t\t\tthrow new IllegalStateException("Unable to set Hibernate JTA "\n+\t\t\t\t\t\t+ "platform, are you using the correct "\n+\t\t\t\t\t\t+ "version of Hibernate?", ex);\n+\t\t\t}\n+\t\t\t// Assume that Hibernate will use JNDI\n+\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\tlogger.debug("Unable to set Hibernate JTA platform : " + ex.getMessage());\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate boolean isUsingJndi() {\n+\t\ttry {\n+\t\t\treturn JndiLocatorDelegate.isDefaultJndiEnvironmentAvailable();\n+\t\t}\n+\t\tcatch (Error ex) {\n+\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\tprivate Object getNoJtaPlatformManager() {\n+\t\treturn getJtaPlatformManager(NO_JTA_PLATFORM_CLASSES);\n+\t}\n+\n+\tprivate Object getJtaPlatformManager(String[] candidates) {\n+\t\tfor (String candidate : candidates) {\n+\t\t\ttry {\n+\t\t\t\treturn Class.forName(candidate).newInstance();\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\t// Continue searching\n+\t\t\t}\n+\t\t}\n+\t\tthrow new IllegalStateException("Could not configure JTA platform");\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.orm.jpa;\n\nimport java.util.Collections;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.sql.DataSource;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\nimport org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers;\nimport org.springframework.boot.jdbc.SchemaManagementProvider;\nimport org.springframework.boot.orm.jpa.hibernate.SpringJtaPlatform;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jndi.JndiLocatorDelegate;\nimport org.springframework.orm.jpa.vendor.AbstractJpaVendorAdapter;\nimport org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;\nimport org.springframework.transaction.jta.JtaTransactionManager;\nimport org.springframework.util.ClassUtils;\n\n/**\n * {@link JpaBaseConfiguration} implementation for Hibernate.\n *\n * @author Phillip Webb\n * @author Josh Long\n * @author Manuel Doninger\n * @author Andy Wilkinson\n * @author Stephane Nicoll\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnSingleCandidate(DataSource.class)\npublic class JpaHibernateConfiguration extends JpaBaseConfiguration {\n\n\tprivate static final Log logger = LogFactory\n\t\t\t.getLog(JpaHibernateConfiguration.class);\n\n\tprivate static final String JTA_PLATFORM = "hibernate.transaction.jta.platform";\n\n\t/**\n\t * {@code NoJtaPlatform} implementations for various Hibernate versions.\n\t */\n\tprivate static final String[] NO_JTA_PLATFORM_CLASSES = {\n\t\t\t"org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform",\n\t\t\t"org.hibernate.service.jta.platform.internal.NoJtaPlatform" };\n\n\t/**\n\t * {@code WebSphereExtendedJtaPlatform} implementations for various Hibernate\n\t * versions.\n\t */\n\tprivate static final String[] WEBSPHERE_JTA_PLATFORM_CLASSES = {\n\t\t\t"org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform",\n\t\t\t"org.hibernate.service.jta.platform.internal.WebSphereExtendedJtaPlatform", };\n\n\tprivate final HibernateDefaultDdlAutoProvider defaultDdlAutoProvider;\n\n\tpublic JpaHibernateConfiguration(DataSource dataSource,\n\t\t\tJpaProperties jpaProperties,\n\t\t\tObjectProvider<JtaTransactionManager> jtaTransactionManager,\n\t\t\tObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers,\n\t\t\tObjectProvider<List<SchemaManagementProvider>> providers) {\n\t\tsuper(dataSource, jpaProperties, jtaTransactionManager,\n\t\t\t\ttransactionManagerCustomizers);\n\t\tthis.defaultDdlAutoProvider = new HibernateDefaultDdlAutoProvider(\n\t\t\t\tproviders.getIfAvailable(Collections::emptyList));\n\t}\n\n\t@Override\n\tprotected AbstractJpaVendorAdapter createJpaVendorAdapter() {\n\t\treturn new HibernateJpaVendorAdapter();\n\t}\n\n\t@Override\n\tprotected Map<String, Object> getVendorProperties() {\n\t\tMap<String, Object> vendorProperties = new LinkedHashMap<>();\n\t\tString defaultDdlMode = this.defaultDdlAutoProvider\n\t\t\t\t.getDefaultDdlAuto(getDataSource());\n\t\tvendorProperties.putAll(getProperties().getHibernateProperties(defaultDdlMode));\n\t\treturn vendorProperties;\n\t}\n\n\t@Override\n\tprotected void customizeVendorProperties(Map<String, Object> vendorProperties) {\n\t\tsuper.customizeVendorProperties(vendorProperties);\n\t\tif (!vendorProperties.containsKey(JTA_PLATFORM)) {\n\t\t\tconfigureJtaPlatform(vendorProperties);\n\t\t}\n\t}\n\n\tprivate void configureJtaPlatform(Map<String, Object> vendorProperties)\n\t\t\tthrows LinkageError {\n\t\tJtaTransactionManager jtaTransactionManager = getJtaTransactionManager();\n\t\tif (jtaTransactionManager != null) {\n\t\t\tif (runningOnWebSphere()) {\n\t\t\t\t// We can never use SpringJtaPlatform on WebSphere as\n\t\t\t\t// WebSphereUowTransactionManager has a null TransactionManager\n\t\t\t\t// which will cause Hibernate to NPE\n\t\t\t\tconfigureWebSphereTransactionPlatform(vendorProperties);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconfigureSpringJtaPlatform(vendorProperties, jtaTransactionManager);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tvendorProperties.put(JTA_PLATFORM, getNoJtaPlatformManager());\n\t\t}\n\t}\n\n\tprivate boolean runningOnWebSphere() {\n\t\treturn ClassUtils.isPresent(\n\t\t\t\t"com.ibm.websphere.jtaextensions." + "ExtendedJTATransaction",\n\t\t\t\tgetClass().getClassLoader());\n\t}\n\n\tprivate void configureWebSphereTransactionPlatform(\n\t\t\tMap<String, Object> vendorProperties) {\n\t\tvendorProperties.put(JTA_PLATFORM, getWebSphereJtaPlatformManager());\n\t}\n\n\tprivate Object getWebSphereJtaPlatformManager() {\n\t\treturn getJtaPlatformManager(WEBSPHERE_JTA_PLATFORM_CLASSES);\n\t}\n\n\tprivate void configureSpringJtaPlatform(Map<String, Object> vendorProperties,\n\t\t\tJtaTransactionManager jtaTransactionManager) {\n\t\ttry {\n\t\t\tvendorProperties.put(JTA_PLATFORM,\n\t\t\t\t\tnew SpringJtaPlatform(jtaTransactionManager));\n\t\t}\n\t\tcatch (LinkageError ex) {\n\t\t\t// NoClassDefFoundError can happen if Hibernate 4.2 is used and some\n\t\t\t// containers (e.g. JBoss EAP 6) wraps it in the superclass LinkageError\n\t\t\tif (!isUsingJndi()) {\n\t\t\t\tthrow new IllegalStateException("Unable to set Hibernate JTA "\n\t\t\t\t\t\t+ "platform, are you using the correct "\n\t\t\t\t\t\t+ "version of Hibernate?", ex);\n\t\t\t}\n\t\t\t// Assume that Hibernate will use JNDI\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug("Unable to set Hibernate JTA platform : " + ex.getMessage());\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate boolean isUsingJndi() {\n\t\ttry {\n\t\t\treturn JndiLocatorDelegate.isDefaultJndiEnvironmentAvailable();\n\t\t}\n\t\tcatch (Error ex) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprivate Object getNoJtaPlatformManager() {\n\t\treturn getJtaPlatformManager(NO_JTA_PLATFORM_CLASSES);\n\t}\n\n\tprivate Object getJtaPlatformManager(String[] candidates) {\n\t\tfor (String candidate : candidates) {\n\t\t\ttry {\n\t\t\t\treturn Class.forName(candidate).newInstance();\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\t// Continue searching\n\t\t\t}\n\t\t}\n\t\tthrow new IllegalStateException("Could not configure JTA platform");\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
