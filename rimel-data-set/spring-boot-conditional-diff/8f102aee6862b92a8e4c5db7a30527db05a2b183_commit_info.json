{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/condition/ConditionalOnEnabledEndpointTests.java'), '_new_path': None, 'change_type': <ModificationType.DELETE: 4>, 'diff': '@@ -1,277 +0,0 @@\n-/*\n- * Copyright 2012-2019 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the "License");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an "AS IS" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.boot.actuate.autoconfigure.endpoint.condition;\n-\n-import org.junit.jupiter.api.Test;\n-\n-import org.springframework.boot.actuate.endpoint.EndpointFilter;\n-import org.springframework.boot.actuate.endpoint.ExposableEndpoint;\n-import org.springframework.boot.actuate.endpoint.annotation.Endpoint;\n-import org.springframework.boot.actuate.endpoint.annotation.EndpointExtension;\n-import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Configuration;\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-\n-/**\n- * Tests for {@link ConditionalOnEnabledEndpoint @ConditionalOnEnabledEndpoint}.\n- *\n- * @author Stephane Nicoll\n- * @author Andy Wilkinson\n- */\n-@Deprecated\n-@SuppressWarnings("deprecation")\n-class ConditionalOnEnabledEndpointTests {\n-\n-\tprivate final ApplicationContextRunner contextRunner = new ApplicationContextRunner();\n-\n-\t@Test\n-\tvoid outcomeWhenEndpointEnabledPropertyIsTrueShouldMatch() {\n-\t\tthis.contextRunner.withPropertyValues("management.endpoint.foo.enabled=true")\n-\t\t\t\t.withUserConfiguration(FooEndpointEnabledByDefaultFalseConfiguration.class)\n-\t\t\t\t.run((context) -> assertThat(context).hasBean("foo"));\n-\t}\n-\n-\t@Test\n-\tvoid outcomeWhenEndpointEnabledPropertyIsFalseShouldNotMatch() {\n-\t\tthis.contextRunner.withPropertyValues("management.endpoint.foo.enabled=false")\n-\t\t\t\t.withUserConfiguration(FooEndpointEnabledByDefaultTrueConfiguration.class)\n-\t\t\t\t.run((context) -> assertThat(context).doesNotHaveBean("foo"));\n-\t}\n-\n-\t@Test\n-\tvoid outcomeWhenNoEndpointPropertyAndUserDefinedDefaultIsTrueShouldMatch() {\n-\t\tthis.contextRunner.withPropertyValues("management.endpoints.enabled-by-default=true")\n-\t\t\t\t.withUserConfiguration(FooEndpointEnabledByDefaultFalseConfiguration.class)\n-\t\t\t\t.run((context) -> assertThat(context).hasBean("foo"));\n-\t}\n-\n-\t@Test\n-\tvoid outcomeWhenNoEndpointPropertyAndUserDefinedDefaultIsFalseShouldNotMatch() {\n-\t\tthis.contextRunner.withPropertyValues("management.endpoints.enabled-by-default=false")\n-\t\t\t\t.withUserConfiguration(FooEndpointEnabledByDefaultTrueConfiguration.class)\n-\t\t\t\t.run((context) -> assertThat(context).doesNotHaveBean("foo"));\n-\t}\n-\n-\t@Test\n-\tvoid outcomeWhenNoPropertiesAndAnnotationIsEnabledByDefaultShouldMatch() {\n-\t\tthis.contextRunner.withUserConfiguration(FooEndpointEnabledByDefaultTrueConfiguration.class)\n-\t\t\t\t.run((context) -> assertThat(context).hasBean("foo"));\n-\t}\n-\n-\t@Test\n-\tvoid outcomeWhenNoPropertiesAndAnnotationIsNotEnabledByDefaultShouldNotMatch() {\n-\t\tthis.contextRunner.withUserConfiguration(FooEndpointEnabledByDefaultFalseConfiguration.class)\n-\t\t\t\t.run((context) -> assertThat(context).doesNotHaveBean("foo"));\n-\t}\n-\n-\t@Test\n-\tvoid outcomeWhenNoPropertiesAndExtensionAnnotationIsEnabledByDefaultShouldMatch() {\n-\t\tthis.contextRunner.withUserConfiguration(FooEndpointAndExtensionEnabledByDefaultTrueConfiguration.class)\n-\t\t\t\t.run((context) -> assertThat(context).hasBean("foo").hasBean("fooExt"));\n-\t}\n-\n-\t@Test\n-\tvoid outcomeWhenNoPropertiesAndExtensionAnnotationIsNotEnabledByDefaultShouldNotMatch() {\n-\t\tthis.contextRunner.withUserConfiguration(FooEndpointAndExtensionEnabledByDefaultFalseConfiguration.class)\n-\t\t\t\t.run((context) -> assertThat(context).doesNotHaveBean("foo").doesNotHaveBean("fooExt"));\n-\t}\n-\n-\t@Test\n-\tvoid outcomeWithReferenceWhenNoPropertiesShouldMatch() {\n-\t\tthis.contextRunner\n-\t\t\t\t.withUserConfiguration(FooEndpointEnabledByDefaultTrue.class,\n-\t\t\t\t\t\tComponentEnabledIfEndpointIsEnabledConfiguration.class)\n-\t\t\t\t.run((context) -> assertThat(context).hasBean("fooComponent"));\n-\t}\n-\n-\t@Test\n-\tvoid outcomeWithReferenceWhenEndpointEnabledPropertyIsTrueShouldMatch() {\n-\t\tthis.contextRunner.withPropertyValues("management.endpoint.foo.enabled=true")\n-\t\t\t\t.withUserConfiguration(FooEndpointEnabledByDefaultTrue.class,\n-\t\t\t\t\t\tComponentEnabledIfEndpointIsEnabledConfiguration.class)\n-\t\t\t\t.run((context) -> assertThat(context).hasBean("fooComponent"));\n-\t}\n-\n-\t@Test\n-\tvoid outcomeWithReferenceWhenEndpointEnabledPropertyIsFalseShouldNotMatch() {\n-\t\tthis.contextRunner.withPropertyValues("management.endpoint.foo.enabled=false")\n-\t\t\t\t.withUserConfiguration(FooEndpointEnabledByDefaultTrue.class,\n-\t\t\t\t\t\tComponentEnabledIfEndpointIsEnabledConfiguration.class)\n-\t\t\t\t.run((context) -> assertThat(context).doesNotHaveBean("fooComponent"));\n-\t}\n-\n-\t@Test\n-\tvoid outcomeWithNoReferenceShouldFail() {\n-\t\tthis.contextRunner.withUserConfiguration(ComponentWithNoEndpointReferenceConfiguration.class).run((context) -> {\n-\t\t\tassertThat(context).hasFailed();\n-\t\t\tassertThat(context.getStartupFailure().getCause().getMessage())\n-\t\t\t\t\t.contains("No endpoint is specified and the return type of the @Bean method "\n-\t\t\t\t\t\t\t+ "is neither an @Endpoint, nor an @EndpointExtension");\n-\t\t});\n-\t}\n-\n-\t@Test\n-\tvoid outcomeWhenEndpointEnabledPropertyIsTrueAndMixedCaseShouldMatch() {\n-\t\tthis.contextRunner.withPropertyValues("management.endpoint.foo-bar.enabled=true")\n-\t\t\t\t.withUserConfiguration(FooBarEndpointEnabledByDefaultFalseConfiguration.class)\n-\t\t\t\t.run((context) -> assertThat(context).hasBean("fooBar"));\n-\t}\n-\n-\t@Test\n-\tvoid outcomeWhenEndpointEnabledPropertyIsFalseOnClassShouldNotMatch() {\n-\t\tthis.contextRunner.withPropertyValues("management.endpoint.foo.enabled=false")\n-\t\t\t\t.withUserConfiguration(FooEndpointEnabledByDefaultTrueOnConfigurationConfiguration.class)\n-\t\t\t\t.run((context) -> assertThat(context).doesNotHaveBean("foo"));\n-\t}\n-\n-\t@Endpoint(id = "foo", enableByDefault = true)\n-\tstatic class FooEndpointEnabledByDefaultTrue {\n-\n-\t}\n-\n-\t@Endpoint(id = "foo", enableByDefault = false)\n-\tstatic class FooEndpointEnabledByDefaultFalse {\n-\n-\t}\n-\n-\t@Endpoint(id = "fooBar", enableByDefault = false)\n-\tstatic class FooBarEndpointEnabledByDefaultFalse {\n-\n-\t}\n-\n-\t@EndpointExtension(endpoint = FooEndpointEnabledByDefaultTrue.class, filter = TestFilter.class)\n-\tstatic class FooEndpointExtensionEnabledByDefaultTrue {\n-\n-\t}\n-\n-\t@EndpointExtension(endpoint = FooEndpointEnabledByDefaultFalse.class, filter = TestFilter.class)\n-\tstatic class FooEndpointExtensionEnabledByDefaultFalse {\n-\n-\t}\n-\n-\tstatic class TestFilter implements EndpointFilter<ExposableEndpoint<?>> {\n-\n-\t\t@Override\n-\t\tpublic boolean match(ExposableEndpoint<?> endpoint) {\n-\t\t\treturn true;\n-\t\t}\n-\n-\t}\n-\n-\t@Configuration(proxyBeanMethods = false)\n-\tstatic class FooEndpointEnabledByDefaultTrueConfiguration {\n-\n-\t\t@Bean\n-\t\t@ConditionalOnEnabledEndpoint\n-\t\tFooEndpointEnabledByDefaultTrue foo() {\n-\t\t\treturn new FooEndpointEnabledByDefaultTrue();\n-\t\t}\n-\n-\t}\n-\n-\t@Configuration(proxyBeanMethods = false)\n-\t@ConditionalOnEnabledEndpoint(endpoint = FooEndpointEnabledByDefaultTrue.class)\n-\tstatic class FooEndpointEnabledByDefaultTrueOnConfigurationConfiguration {\n-\n-\t\t@Bean\n-\t\tFooEndpointEnabledByDefaultTrue foo() {\n-\t\t\treturn new FooEndpointEnabledByDefaultTrue();\n-\t\t}\n-\n-\t}\n-\n-\t@Configuration(proxyBeanMethods = false)\n-\tstatic class FooEndpointEnabledByDefaultFalseConfiguration {\n-\n-\t\t@Bean\n-\t\t@ConditionalOnEnabledEndpoint\n-\t\tFooEndpointEnabledByDefaultFalse foo() {\n-\t\t\treturn new FooEndpointEnabledByDefaultFalse();\n-\t\t}\n-\n-\t}\n-\n-\t@Configuration(proxyBeanMethods = false)\n-\tstatic class FooBarEndpointEnabledByDefaultFalseConfiguration {\n-\n-\t\t@Bean\n-\t\t@ConditionalOnEnabledEndpoint\n-\t\tFooBarEndpointEnabledByDefaultFalse fooBar() {\n-\t\t\treturn new FooBarEndpointEnabledByDefaultFalse();\n-\t\t}\n-\n-\t}\n-\n-\t@Configuration(proxyBeanMethods = false)\n-\tstatic class FooEndpointAndExtensionEnabledByDefaultTrueConfiguration {\n-\n-\t\t@Bean\n-\t\t@ConditionalOnEnabledEndpoint\n-\t\tFooEndpointEnabledByDefaultTrue foo() {\n-\t\t\treturn new FooEndpointEnabledByDefaultTrue();\n-\t\t}\n-\n-\t\t@Bean\n-\t\t@ConditionalOnEnabledEndpoint\n-\t\tFooEndpointExtensionEnabledByDefaultTrue fooExt() {\n-\t\t\treturn new FooEndpointExtensionEnabledByDefaultTrue();\n-\t\t}\n-\n-\t}\n-\n-\t@Configuration(proxyBeanMethods = false)\n-\tstatic class FooEndpointAndExtensionEnabledByDefaultFalseConfiguration {\n-\n-\t\t@Bean\n-\t\t@ConditionalOnEnabledEndpoint\n-\t\tFooEndpointEnabledByDefaultFalse foo() {\n-\t\t\treturn new FooEndpointEnabledByDefaultFalse();\n-\t\t}\n-\n-\t\t@Bean\n-\t\t@ConditionalOnEnabledEndpoint\n-\t\tFooEndpointExtensionEnabledByDefaultFalse fooExt() {\n-\t\t\treturn new FooEndpointExtensionEnabledByDefaultFalse();\n-\t\t}\n-\n-\t}\n-\n-\t@Configuration(proxyBeanMethods = false)\n-\tstatic class ComponentEnabledIfEndpointIsEnabledConfiguration {\n-\n-\t\t@Bean\n-\t\t@ConditionalOnEnabledEndpoint(endpoint = FooEndpointEnabledByDefaultTrue.class)\n-\t\tString fooComponent() {\n-\t\t\treturn "foo";\n-\t\t}\n-\n-\t}\n-\n-\t@Configuration(proxyBeanMethods = false)\n-\tstatic class ComponentWithNoEndpointReferenceConfiguration {\n-\n-\t\t@Bean\n-\t\t@ConditionalOnEnabledEndpoint\n-\t\tString fooComponent() {\n-\t\t\treturn "foo";\n-\t\t}\n-\n-\t}\n-\n-}\n', 'source_code': None, 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.endpoint.condition;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.boot.actuate.endpoint.EndpointFilter;\nimport org.springframework.boot.actuate.endpoint.ExposableEndpoint;\nimport org.springframework.boot.actuate.endpoint.annotation.Endpoint;\nimport org.springframework.boot.actuate.endpoint.annotation.EndpointExtension;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link ConditionalOnEnabledEndpoint @ConditionalOnEnabledEndpoint}.\n *\n * @author Stephane Nicoll\n * @author Andy Wilkinson\n */\n@Deprecated\n@SuppressWarnings("deprecation")\nclass ConditionalOnEnabledEndpointTests {\n\n\tprivate final ApplicationContextRunner contextRunner = new ApplicationContextRunner();\n\n\t@Test\n\tvoid outcomeWhenEndpointEnabledPropertyIsTrueShouldMatch() {\n\t\tthis.contextRunner.withPropertyValues("management.endpoint.foo.enabled=true")\n\t\t\t\t.withUserConfiguration(FooEndpointEnabledByDefaultFalseConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(context).hasBean("foo"));\n\t}\n\n\t@Test\n\tvoid outcomeWhenEndpointEnabledPropertyIsFalseShouldNotMatch() {\n\t\tthis.contextRunner.withPropertyValues("management.endpoint.foo.enabled=false")\n\t\t\t\t.withUserConfiguration(FooEndpointEnabledByDefaultTrueConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(context).doesNotHaveBean("foo"));\n\t}\n\n\t@Test\n\tvoid outcomeWhenNoEndpointPropertyAndUserDefinedDefaultIsTrueShouldMatch() {\n\t\tthis.contextRunner.withPropertyValues("management.endpoints.enabled-by-default=true")\n\t\t\t\t.withUserConfiguration(FooEndpointEnabledByDefaultFalseConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(context).hasBean("foo"));\n\t}\n\n\t@Test\n\tvoid outcomeWhenNoEndpointPropertyAndUserDefinedDefaultIsFalseShouldNotMatch() {\n\t\tthis.contextRunner.withPropertyValues("management.endpoints.enabled-by-default=false")\n\t\t\t\t.withUserConfiguration(FooEndpointEnabledByDefaultTrueConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(context).doesNotHaveBean("foo"));\n\t}\n\n\t@Test\n\tvoid outcomeWhenNoPropertiesAndAnnotationIsEnabledByDefaultShouldMatch() {\n\t\tthis.contextRunner.withUserConfiguration(FooEndpointEnabledByDefaultTrueConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(context).hasBean("foo"));\n\t}\n\n\t@Test\n\tvoid outcomeWhenNoPropertiesAndAnnotationIsNotEnabledByDefaultShouldNotMatch() {\n\t\tthis.contextRunner.withUserConfiguration(FooEndpointEnabledByDefaultFalseConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(context).doesNotHaveBean("foo"));\n\t}\n\n\t@Test\n\tvoid outcomeWhenNoPropertiesAndExtensionAnnotationIsEnabledByDefaultShouldMatch() {\n\t\tthis.contextRunner.withUserConfiguration(FooEndpointAndExtensionEnabledByDefaultTrueConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(context).hasBean("foo").hasBean("fooExt"));\n\t}\n\n\t@Test\n\tvoid outcomeWhenNoPropertiesAndExtensionAnnotationIsNotEnabledByDefaultShouldNotMatch() {\n\t\tthis.contextRunner.withUserConfiguration(FooEndpointAndExtensionEnabledByDefaultFalseConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(context).doesNotHaveBean("foo").doesNotHaveBean("fooExt"));\n\t}\n\n\t@Test\n\tvoid outcomeWithReferenceWhenNoPropertiesShouldMatch() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(FooEndpointEnabledByDefaultTrue.class,\n\t\t\t\t\t\tComponentEnabledIfEndpointIsEnabledConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(context).hasBean("fooComponent"));\n\t}\n\n\t@Test\n\tvoid outcomeWithReferenceWhenEndpointEnabledPropertyIsTrueShouldMatch() {\n\t\tthis.contextRunner.withPropertyValues("management.endpoint.foo.enabled=true")\n\t\t\t\t.withUserConfiguration(FooEndpointEnabledByDefaultTrue.class,\n\t\t\t\t\t\tComponentEnabledIfEndpointIsEnabledConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(context).hasBean("fooComponent"));\n\t}\n\n\t@Test\n\tvoid outcomeWithReferenceWhenEndpointEnabledPropertyIsFalseShouldNotMatch() {\n\t\tthis.contextRunner.withPropertyValues("management.endpoint.foo.enabled=false")\n\t\t\t\t.withUserConfiguration(FooEndpointEnabledByDefaultTrue.class,\n\t\t\t\t\t\tComponentEnabledIfEndpointIsEnabledConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(context).doesNotHaveBean("fooComponent"));\n\t}\n\n\t@Test\n\tvoid outcomeWithNoReferenceShouldFail() {\n\t\tthis.contextRunner.withUserConfiguration(ComponentWithNoEndpointReferenceConfiguration.class).run((context) -> {\n\t\t\tassertThat(context).hasFailed();\n\t\t\tassertThat(context.getStartupFailure().getCause().getMessage())\n\t\t\t\t\t.contains("No endpoint is specified and the return type of the @Bean method "\n\t\t\t\t\t\t\t+ "is neither an @Endpoint, nor an @EndpointExtension");\n\t\t});\n\t}\n\n\t@Test\n\tvoid outcomeWhenEndpointEnabledPropertyIsTrueAndMixedCaseShouldMatch() {\n\t\tthis.contextRunner.withPropertyValues("management.endpoint.foo-bar.enabled=true")\n\t\t\t\t.withUserConfiguration(FooBarEndpointEnabledByDefaultFalseConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(context).hasBean("fooBar"));\n\t}\n\n\t@Test\n\tvoid outcomeWhenEndpointEnabledPropertyIsFalseOnClassShouldNotMatch() {\n\t\tthis.contextRunner.withPropertyValues("management.endpoint.foo.enabled=false")\n\t\t\t\t.withUserConfiguration(FooEndpointEnabledByDefaultTrueOnConfigurationConfiguration.class)\n\t\t\t\t.run((context) -> assertThat(context).doesNotHaveBean("foo"));\n\t}\n\n\t@Endpoint(id = "foo", enableByDefault = true)\n\tstatic class FooEndpointEnabledByDefaultTrue {\n\n\t}\n\n\t@Endpoint(id = "foo", enableByDefault = false)\n\tstatic class FooEndpointEnabledByDefaultFalse {\n\n\t}\n\n\t@Endpoint(id = "fooBar", enableByDefault = false)\n\tstatic class FooBarEndpointEnabledByDefaultFalse {\n\n\t}\n\n\t@EndpointExtension(endpoint = FooEndpointEnabledByDefaultTrue.class, filter = TestFilter.class)\n\tstatic class FooEndpointExtensionEnabledByDefaultTrue {\n\n\t}\n\n\t@EndpointExtension(endpoint = FooEndpointEnabledByDefaultFalse.class, filter = TestFilter.class)\n\tstatic class FooEndpointExtensionEnabledByDefaultFalse {\n\n\t}\n\n\tstatic class TestFilter implements EndpointFilter<ExposableEndpoint<?>> {\n\n\t\t@Override\n\t\tpublic boolean match(ExposableEndpoint<?> endpoint) {\n\t\t\treturn true;\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\tstatic class FooEndpointEnabledByDefaultTrueConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnEnabledEndpoint\n\t\tFooEndpointEnabledByDefaultTrue foo() {\n\t\t\treturn new FooEndpointEnabledByDefaultTrue();\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnEnabledEndpoint(endpoint = FooEndpointEnabledByDefaultTrue.class)\n\tstatic class FooEndpointEnabledByDefaultTrueOnConfigurationConfiguration {\n\n\t\t@Bean\n\t\tFooEndpointEnabledByDefaultTrue foo() {\n\t\t\treturn new FooEndpointEnabledByDefaultTrue();\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\tstatic class FooEndpointEnabledByDefaultFalseConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnEnabledEndpoint\n\t\tFooEndpointEnabledByDefaultFalse foo() {\n\t\t\treturn new FooEndpointEnabledByDefaultFalse();\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\tstatic class FooBarEndpointEnabledByDefaultFalseConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnEnabledEndpoint\n\t\tFooBarEndpointEnabledByDefaultFalse fooBar() {\n\t\t\treturn new FooBarEndpointEnabledByDefaultFalse();\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\tstatic class FooEndpointAndExtensionEnabledByDefaultTrueConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnEnabledEndpoint\n\t\tFooEndpointEnabledByDefaultTrue foo() {\n\t\t\treturn new FooEndpointEnabledByDefaultTrue();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnEnabledEndpoint\n\t\tFooEndpointExtensionEnabledByDefaultTrue fooExt() {\n\t\t\treturn new FooEndpointExtensionEnabledByDefaultTrue();\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\tstatic class FooEndpointAndExtensionEnabledByDefaultFalseConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnEnabledEndpoint\n\t\tFooEndpointEnabledByDefaultFalse foo() {\n\t\t\treturn new FooEndpointEnabledByDefaultFalse();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnEnabledEndpoint\n\t\tFooEndpointExtensionEnabledByDefaultFalse fooExt() {\n\t\t\treturn new FooEndpointExtensionEnabledByDefaultFalse();\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\tstatic class ComponentEnabledIfEndpointIsEnabledConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnEnabledEndpoint(endpoint = FooEndpointEnabledByDefaultTrue.class)\n\t\tString fooComponent() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\tstatic class ComponentWithNoEndpointReferenceConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnEnabledEndpoint\n\t\tString fooComponent() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
