{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/HttpMessageConvertersAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/HttpMessageConvertersAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2013 the original author or authors.\n+ * Copyright 2012-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -23,7 +23,6 @@ import java.util.List;\n \n import javax.annotation.PostConstruct;\n \n-import org.joda.time.DateTime;\n import org.springframework.beans.factory.BeanFactoryUtils;\n import org.springframework.beans.factory.ListableBeanFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -38,7 +37,6 @@ import org.springframework.http.converter.json.MappingJackson2HttpMessageConvert\n \n import com.fasterxml.jackson.databind.Module;\n import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.datatype.joda.JodaModule;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for {@link HttpMessageConverter}s.\n@@ -60,17 +58,6 @@ public class HttpMessageConvertersAutoConfiguration {\n \t\treturn new HttpMessageConverters(converters);\n \t}\n \n-\t@Configuration\n-\t@ConditionalOnClass({ JodaModule.class, DateTime.class })\n-\tprotected static class JodaModuleConfiguration {\n-\n-\t\t@Bean\n-\t\tpublic JodaModule jodaModule() {\n-\t\t\treturn new JodaModule();\n-\t\t}\n-\n-\t}\n-\n \t@Configuration\n \t@ConditionalOnClass(ObjectMapper.class)\n \tprotected static class ObjectMappers {\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\n\nimport javax.annotation.PostConstruct;\n\nimport org.springframework.beans.factory.BeanFactoryUtils;\nimport org.springframework.beans.factory.ListableBeanFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\n\nimport com.fasterxml.jackson.databind.Module;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link HttpMessageConverter}s.\n * \n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnClass(HttpMessageConverter.class)\npublic class HttpMessageConvertersAutoConfiguration {\n\n\t@Autowired(required = false)\n\tprivate final List<HttpMessageConverter<?>> converters = Collections.emptyList();\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic HttpMessageConverters messageConverters() {\n\t\tList<HttpMessageConverter<?>> converters = new ArrayList<HttpMessageConverter<?>>(\n\t\t\t\tthis.converters);\n\t\treturn new HttpMessageConverters(converters);\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(ObjectMapper.class)\n\tprotected static class ObjectMappers {\n\n\t\t@Autowired\n\t\tprivate ListableBeanFactory beanFactory;\n\n\t\t@PostConstruct\n\t\tpublic void init() {\n\t\t\tCollection<ObjectMapper> mappers = BeanFactoryUtils\n\t\t\t\t\t.beansOfTypeIncludingAncestors(this.beanFactory, ObjectMapper.class)\n\t\t\t\t\t.values();\n\t\t\tCollection<Module> modules = BeanFactoryUtils.beansOfTypeIncludingAncestors(\n\t\t\t\t\tthis.beanFactory, Module.class).values();\n\t\t\tfor (ObjectMapper mapper : mappers) {\n\t\t\t\tmapper.registerModules(modules);\n\t\t\t}\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@Primary\n\t\tpublic ObjectMapper jacksonObjectMapper() {\n\t\t\treturn new ObjectMapper();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter(\n\t\t\t\tObjectMapper objectMapper) {\n\t\t\tMappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();\n\t\t\tconverter.setObjectMapper(objectMapper);\n\t\t\treturn converter;\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\n\nimport javax.annotation.PostConstruct;\n\nimport org.joda.time.DateTime;\nimport org.springframework.beans.factory.BeanFactoryUtils;\nimport org.springframework.beans.factory.ListableBeanFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\n\nimport com.fasterxml.jackson.databind.Module;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.datatype.joda.JodaModule;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link HttpMessageConverter}s.\n * \n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnClass(HttpMessageConverter.class)\npublic class HttpMessageConvertersAutoConfiguration {\n\n\t@Autowired(required = false)\n\tprivate final List<HttpMessageConverter<?>> converters = Collections.emptyList();\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic HttpMessageConverters messageConverters() {\n\t\tList<HttpMessageConverter<?>> converters = new ArrayList<HttpMessageConverter<?>>(\n\t\t\t\tthis.converters);\n\t\treturn new HttpMessageConverters(converters);\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ JodaModule.class, DateTime.class })\n\tprotected static class JodaModuleConfiguration {\n\n\t\t@Bean\n\t\tpublic JodaModule jodaModule() {\n\t\t\treturn new JodaModule();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(ObjectMapper.class)\n\tprotected static class ObjectMappers {\n\n\t\t@Autowired\n\t\tprivate ListableBeanFactory beanFactory;\n\n\t\t@PostConstruct\n\t\tpublic void init() {\n\t\t\tCollection<ObjectMapper> mappers = BeanFactoryUtils\n\t\t\t\t\t.beansOfTypeIncludingAncestors(this.beanFactory, ObjectMapper.class)\n\t\t\t\t\t.values();\n\t\t\tCollection<Module> modules = BeanFactoryUtils.beansOfTypeIncludingAncestors(\n\t\t\t\t\tthis.beanFactory, Module.class).values();\n\t\t\tfor (ObjectMapper mapper : mappers) {\n\t\t\t\tmapper.registerModules(modules);\n\t\t\t}\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@Primary\n\t\tpublic ObjectMapper jacksonObjectMapper() {\n\t\t\treturn new ObjectMapper();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter(\n\t\t\t\tObjectMapper objectMapper) {\n\t\t\tMappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();\n\t\t\tconverter.setObjectMapper(objectMapper);\n\t\t\treturn converter;\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
