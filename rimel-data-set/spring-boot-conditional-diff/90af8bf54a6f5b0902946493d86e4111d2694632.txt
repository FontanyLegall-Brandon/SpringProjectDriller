@@ -22,6 +22,9 @@ import org.apache.catalina.Context;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.eclipse.jetty.webapp.AbstractConfiguration;
+import org.eclipse.jetty.webapp.WebAppContext;
+import org.eclipse.jetty.websocket.jsr356.server.deploy.WebSocketServerContainerInitializer;
 import org.springframework.beans.BeanUtils;
 import org.springframework.boot.autoconfigure.AutoConfigureBefore;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
@@ -29,97 +32,157 @@ import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean
 import org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration;
 import org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainer;
 import org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;
+import org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainerFactory;
 import org.springframework.boot.context.embedded.tomcat.TomcatContextCustomizer;
 import org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;
 import org.springframework.boot.context.web.NonEmbeddedServletContainerFactory;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
-import org.springframework.util.Assert;
 import org.springframework.util.ClassUtils;
 import org.springframework.util.ReflectionUtils;
 import org.springframework.web.socket.WebSocketHandler;
 
 
 @Configuration
-@ConditionalOnClass(name = , value = {
-		Servlet.class, Tomcat.class, WebSocketHandler.class })
+@ConditionalOnClass({ Servlet.class, WebSocketHandler.class })
 @AutoConfigureBefore(EmbeddedServletContainerAutoConfiguration.class)
 public class WebSocketAutoConfiguration {
 
-	private static final String TOMCAT_7_LISTENER_TYPE = ;
+	@Configuration
+	@ConditionalOnClass(name = , value = Tomcat.class)
+	static class TomcatWebSocketConfiguration {
 
-	private static final String TOMCAT_8_LISTENER_TYPE = ;
+		private static final String TOMCAT_7_LISTENER_TYPE = ;
 
-	private static final String WS_LISTENER = ;
+		private static final String TOMCAT_8_LISTENER_TYPE = ;
 
-	private static Log logger = LogFactory.getLog(WebSocketAutoConfiguration.class);
+		private static final String WS_LISTENER = ;
 
-	@Bean
-	@ConditionalOnMissingBean(name = )
-	public EmbeddedServletContainerCustomizer websocketContainerCustomizer() {
-		return new EmbeddedServletContainerCustomizer() {
+		@Bean
+		@ConditionalOnMissingBean(name = )
+		public EmbeddedServletContainerCustomizer websocketContainerCustomizer() {
+			return new WebSocketContainerCustomizer<TomcatEmbeddedServletContainerFactory>(
+					TomcatEmbeddedServletContainerFactory.class) {
 
-			@Override
-			public void customize(ConfigurableEmbeddedServletContainer container) {
-				if (container instanceof NonEmbeddedServletContainerFactory) {
-					logger.info(
-							+ );
-					return;
+				@Override
+				public void doCustomize(
+						TomcatEmbeddedServletContainerFactory tomcatContainer) {
+					tomcatContainer.addContextCustomizers(new TomcatContextCustomizer() {
+						@Override
+						public void customize(Context context) {
+							addListener(context, findListenerType());
+						}
+					});
 				}
-				Assert.state(container instanceof TomcatEmbeddedServletContainerFactory,
-						
-								+ container.getClass() + );
-				TomcatEmbeddedServletContainerFactory tomcatContainer = (TomcatEmbeddedServletContainerFactory) container;
-				tomcatContainer.addContextCustomizers(new TomcatContextCustomizer() {
-					@Override
-					public void customize(Context context) {
-						addListener(context, findListenerType());
-					}
-				});
+
+			};
+		}
+
+		private static Class<?> findListenerType() {
+			if (ClassUtils.isPresent(TOMCAT_7_LISTENER_TYPE, null)) {
+				return ClassUtils.resolveClassName(TOMCAT_7_LISTENER_TYPE, null);
 			}
+			if (ClassUtils.isPresent(TOMCAT_8_LISTENER_TYPE, null)) {
+				return ClassUtils.resolveClassName(TOMCAT_8_LISTENER_TYPE, null);
+			}
+			
+			return null;
+		}
 
-		};
-	}
+		
+		private static void addListener(Context context, Class<?> listenerType) {
+			if (listenerType == null) {
+				ReflectionUtils.invokeMethod(ClassUtils.getMethod(context.getClass(),
+						, String.class), context, WS_LISTENER);
 
-	private static Class<?> findListenerType() {
-		if (ClassUtils.isPresent(TOMCAT_7_LISTENER_TYPE, null)) {
-			return ClassUtils.resolveClassName(TOMCAT_7_LISTENER_TYPE, null);
+			}
+			else {
+				Object instance = BeanUtils.instantiateClass(ClassUtils
+						.getConstructorIfAvailable(listenerType, String.class,
+								boolean.class), WS_LISTENER, false);
+				ReflectionUtils.invokeMethod(ClassUtils.getMethod(context.getClass(),
+						, listenerType), context, instance);
+			}
 		}
-		if (ClassUtils.isPresent(TOMCAT_8_LISTENER_TYPE, null)) {
-			return ClassUtils.resolveClassName(TOMCAT_8_LISTENER_TYPE, null);
+	}
+
+	@Configuration
+	@ConditionalOnClass(WebSocketServerContainerInitializer.class)
+	static class JettyWebSocketConfiguration {
+
+		@Bean
+		@ConditionalOnMissingBean(name = )
+		public EmbeddedServletContainerCustomizer websocketContainerCustomizer() {
+			return new WebSocketContainerCustomizer<JettyEmbeddedServletContainerFactory>(
+					JettyEmbeddedServletContainerFactory.class) {
+
+				@Override
+				protected void doCustomize(JettyEmbeddedServletContainerFactory container) {
+					container.addConfigurations(new AbstractConfiguration() {
+
+						@Override
+						public void configure(WebAppContext context) throws Exception {
+							WebSocketServerContainerInitializer.configureContext(context);
+						}
+
+					});
+				}
+
+			};
 		}
-		
-		return null;
+
 	}
 
-	
-	private static void addListener(Context context, Class<?> listenerType) {
-		if (listenerType == null) {
-			ReflectionUtils.invokeMethod(ClassUtils.getMethod(context.getClass(),
-					, String.class), context, WS_LISTENER);
+	abstract static class WebSocketContainerCustomizer<T extends ConfigurableEmbeddedServletContainer>
+			implements EmbeddedServletContainerCustomizer {
+
+		private Log logger = LogFactory.getLog(getClass());
+
+		private final Class<T> containerType;
 
+		protected WebSocketContainerCustomizer(Class<T> containerType) {
+			this.containerType = containerType;
 		}
-		else {
-			Object instance = BeanUtils.instantiateClass(
-					ClassUtils.getConstructorIfAvailable(listenerType, String.class,
-							boolean.class), WS_LISTENER, false);
-			ReflectionUtils.invokeMethod(ClassUtils.getMethod(context.getClass(),
-					, listenerType), context, instance);
+
+		@SuppressWarnings()
+		@Override
+		public void customize(ConfigurableEmbeddedServletContainer container) {
+			if (container instanceof NonEmbeddedServletContainerFactory) {
+				this.logger
+						.info(
+								+ );
+				return;
+			}
+			if (this.containerType.isAssignableFrom(container.getClass())) {
+				doCustomize((T) container);
+			}
 		}
+
+		protected abstract void doCustomize(T container);
+
 	}
+
 }

