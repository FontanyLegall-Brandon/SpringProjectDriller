{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/solr/SolrAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2014 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.solr;\n+\n+import javax.annotation.PreDestroy;\n+\n+import org.apache.solr.client.solrj.SolrServer;\n+import org.apache.solr.client.solrj.impl.CloudSolrServer;\n+import org.apache.solr.client.solrj.impl.HttpSolrServer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Enables auto configuration for Solr.\n+ * \n+ * @author Christoph Strobl\n+ */\n+@Configuration\n+@ConditionalOnClass(SolrServer.class)\n+@EnableConfigurationProperties(SolrProperties.class)\n+public class SolrAutoConfiguration {\n+\n+\tprivate @Autowired SolrProperties properties;\n+\n+\tprivate SolrServer solrServer;\n+\n+\t@PreDestroy\n+\tpublic void close() {\n+\t\tif (this.solrServer != null) {\n+\t\t\tthis.solrServer.shutdown();\n+\t\t}\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic SolrServer solrServer() {\n+\n+\t\tthis.solrServer = createSolrServer();\n+\t\treturn this.solrServer;\n+\t}\n+\n+\tprivate SolrServer createSolrServer() {\n+\n+\t\tif (StringUtils.hasText(this.properties.getZkHost())) {\n+\t\t\treturn new CloudSolrServer(this.properties.getZkHost());\n+\t\t}\n+\t\treturn new HttpSolrServer(this.properties.getHost());\n+\t}\n+}\n', 'source_code': '/*\n * Copyright 2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.solr;\n\nimport javax.annotation.PreDestroy;\n\nimport org.apache.solr.client.solrj.SolrServer;\nimport org.apache.solr.client.solrj.impl.CloudSolrServer;\nimport org.apache.solr.client.solrj.impl.HttpSolrServer;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.util.StringUtils;\n\n/**\n * Enables auto configuration for Solr.\n * \n * @author Christoph Strobl\n */\n@Configuration\n@ConditionalOnClass(SolrServer.class)\n@EnableConfigurationProperties(SolrProperties.class)\npublic class SolrAutoConfiguration {\n\n\tprivate @Autowired SolrProperties properties;\n\n\tprivate SolrServer solrServer;\n\n\t@PreDestroy\n\tpublic void close() {\n\t\tif (this.solrServer != null) {\n\t\t\tthis.solrServer.shutdown();\n\t\t}\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic SolrServer solrServer() {\n\n\t\tthis.solrServer = createSolrServer();\n\t\treturn this.solrServer;\n\t}\n\n\tprivate SolrServer createSolrServer() {\n\n\t\tif (StringUtils.hasText(this.properties.getZkHost())) {\n\t\t\treturn new CloudSolrServer(this.properties.getZkHost());\n\t\t}\n\t\treturn new HttpSolrServer(this.properties.getHost());\n\t}\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
