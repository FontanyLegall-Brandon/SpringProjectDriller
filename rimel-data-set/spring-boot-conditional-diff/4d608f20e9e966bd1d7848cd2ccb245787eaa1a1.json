{"author_date": "2014-01-29 12:32:09+00:00", "msg": "Support for AuthenticationManagerBuilder injection into user code\n\nSpring Boot provides a default AuthenticatiomManager for getting\nstarted quickly with security and never exposing insecure\nendpoints. To override that feature as users move to the next\nstage in their project, they may have to do something slightly\ndifferent depending on whether it is a webapp or not.\n\nIn any app (web or not), providing a @Bean of type\nAuthenticationManager always works, but you don't get the benefit of\nthe builder features.\n\nIn a webapp the user can also extend WebSecurityConfigurerAdapter\nto provides a custom AuthenticationManager, and the preferred\nway of doing that is via a void method that is autowired with an\nAuthenticationManagerBuilder. The default AuthenticationManager is\nbuilt in a configurer with @Order(LOWEST_PRECEDENCE - 3) so\nto override it the user's confugrer must have higher precedence\n(lower @Order).\n\n@EnableGlobalMethodSecurity can also be used in a non-webapp, and\nSpring Boot will still provide a default AuthenticationManager.\nTo override it the user has to either extend\nGlobalMethodSecurityConfiguration or provide a @Bean of type\nAuthenticationManager (there's no other way to\ncapture the AuthenticationManagerBuilder that doesn't happen too late\nin the beans lifecyle).\n\nFixes gh-244"}