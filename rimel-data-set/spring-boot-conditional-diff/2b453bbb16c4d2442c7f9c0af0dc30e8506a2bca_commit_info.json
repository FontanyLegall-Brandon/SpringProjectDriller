{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/Log4J2MetricsAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/Log4J2MetricsAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,12 +16,10 @@\n \n package org.springframework.boot.actuate.autoconfigure.metrics;\n \n-import java.util.Collections;\n-\n import io.micrometer.core.instrument.MeterRegistry;\n import io.micrometer.core.instrument.binder.logging.Log4j2Metrics;\n import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.logging.log4j.spi.LoggerContext;\n \n import org.springframework.boot.actuate.autoconfigure.metrics.Log4J2MetricsAutoConfiguration.Log4JCoreLoggerContextCondition;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n@@ -44,7 +42,8 @@ import org.springframework.core.type.AnnotatedTypeMetadata;\n  */\n @Configuration\n @AutoConfigureAfter(MetricsAutoConfiguration.class)\n-@ConditionalOnClass({ Log4j2Metrics.class, LoggerContext.class, LogManager.class })\n+@ConditionalOnClass(value = { Log4j2Metrics.class,\n+\t\tLogManager.class }, name = "org.apache.logging.log4j.core.LoggerContext")\n @ConditionalOnBean(MeterRegistry.class)\n @Conditional(Log4JCoreLoggerContextCondition.class)\n public class Log4J2MetricsAutoConfiguration {\n@@ -52,8 +51,7 @@ public class Log4J2MetricsAutoConfiguration {\n \t@Bean\n \t@ConditionalOnMissingBean\n \tpublic Log4j2Metrics log4j2Metrics() {\n-\t\treturn new Log4j2Metrics(Collections.emptyList(),\n-\t\t\t\t(LoggerContext) LogManager.getContext(false));\n+\t\treturn new Log4j2Metrics();\n \t}\n \n \tstatic class Log4JCoreLoggerContextCondition extends SpringBootCondition {\n@@ -61,14 +59,19 @@ public class Log4J2MetricsAutoConfiguration {\n \t\t@Override\n \t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n \t\t\t\tAnnotatedTypeMetadata metadata) {\n-\t\t\torg.apache.logging.log4j.spi.LoggerContext loggerContext = LogManager\n-\t\t\t\t\t.getContext(false);\n-\t\t\tif (loggerContext instanceof LoggerContext) {\n-\t\t\t\treturn ConditionOutcome.match(\n-\t\t\t\t\t\t"LoggerContext was an instance of org.apache.logging.log4j.spi.LoggerContext");\n+\t\t\tLoggerContext loggerContext = LogManager.getContext(false);\n+\t\t\ttry {\n+\t\t\t\tif (Class.forName("org.apache.logging.log4j.core.LoggerContext")\n+\t\t\t\t\t\t.isInstance(loggerContext)) {\n+\t\t\t\t\treturn ConditionOutcome.match(\n+\t\t\t\t\t\t\t"LoggerContext was an instance of org.apache.logging.log4j.core.LoggerContext");\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (Throwable ex) {\n+\t\t\t\t// Continue with no match\n \t\t\t}\n \t\t\treturn ConditionOutcome.noMatch(\n-\t\t\t\t\t"Logger context was not an instance of org.apache.logging.log4j.spi.LoggerContext");\n+\t\t\t\t\t"Logger context was not an instance of org.apache.logging.log4j.core.LoggerContext");\n \t\t}\n \n \t}\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics;\n\nimport io.micrometer.core.instrument.MeterRegistry;\nimport io.micrometer.core.instrument.binder.logging.Log4j2Metrics;\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.spi.LoggerContext;\n\nimport org.springframework.boot.actuate.autoconfigure.metrics.Log4J2MetricsAutoConfiguration.Log4JCoreLoggerContextCondition;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\n\n/**\n * Auto-configuration for Log4J2 metrics.\n *\n * @author Andy Wilkinson\n * @since 2.1.0\n */\n@Configuration\n@AutoConfigureAfter(MetricsAutoConfiguration.class)\n@ConditionalOnClass(value = { Log4j2Metrics.class,\n\t\tLogManager.class }, name = "org.apache.logging.log4j.core.LoggerContext")\n@ConditionalOnBean(MeterRegistry.class)\n@Conditional(Log4JCoreLoggerContextCondition.class)\npublic class Log4J2MetricsAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic Log4j2Metrics log4j2Metrics() {\n\t\treturn new Log4j2Metrics();\n\t}\n\n\tstatic class Log4JCoreLoggerContextCondition extends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tLoggerContext loggerContext = LogManager.getContext(false);\n\t\t\ttry {\n\t\t\t\tif (Class.forName("org.apache.logging.log4j.core.LoggerContext")\n\t\t\t\t\t\t.isInstance(loggerContext)) {\n\t\t\t\t\treturn ConditionOutcome.match(\n\t\t\t\t\t\t\t"LoggerContext was an instance of org.apache.logging.log4j.core.LoggerContext");\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Throwable ex) {\n\t\t\t\t// Continue with no match\n\t\t\t}\n\t\t\treturn ConditionOutcome.noMatch(\n\t\t\t\t\t"Logger context was not an instance of org.apache.logging.log4j.core.LoggerContext");\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics;\n\nimport java.util.Collections;\n\nimport io.micrometer.core.instrument.MeterRegistry;\nimport io.micrometer.core.instrument.binder.logging.Log4j2Metrics;\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.core.LoggerContext;\n\nimport org.springframework.boot.actuate.autoconfigure.metrics.Log4J2MetricsAutoConfiguration.Log4JCoreLoggerContextCondition;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\n\n/**\n * Auto-configuration for Log4J2 metrics.\n *\n * @author Andy Wilkinson\n * @since 2.1.0\n */\n@Configuration\n@AutoConfigureAfter(MetricsAutoConfiguration.class)\n@ConditionalOnClass({ Log4j2Metrics.class, LoggerContext.class, LogManager.class })\n@ConditionalOnBean(MeterRegistry.class)\n@Conditional(Log4JCoreLoggerContextCondition.class)\npublic class Log4J2MetricsAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic Log4j2Metrics log4j2Metrics() {\n\t\treturn new Log4j2Metrics(Collections.emptyList(),\n\t\t\t\t(LoggerContext) LogManager.getContext(false));\n\t}\n\n\tstatic class Log4JCoreLoggerContextCondition extends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\torg.apache.logging.log4j.spi.LoggerContext loggerContext = LogManager\n\t\t\t\t\t.getContext(false);\n\t\t\tif (loggerContext instanceof LoggerContext) {\n\t\t\t\treturn ConditionOutcome.match(\n\t\t\t\t\t\t"LoggerContext was an instance of org.apache.logging.log4j.spi.LoggerContext");\n\t\t\t}\n\t\t\treturn ConditionOutcome.noMatch(\n\t\t\t\t\t"Logger context was not an instance of org.apache.logging.log4j.spi.LoggerContext");\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
