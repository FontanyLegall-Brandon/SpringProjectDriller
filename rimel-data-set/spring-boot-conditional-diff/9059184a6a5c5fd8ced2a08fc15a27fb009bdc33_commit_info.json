{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -24,11 +24,10 @@ import org.apache.commons.pool2.impl.GenericObjectPool;\n import redis.clients.jedis.Jedis;\n import redis.clients.jedis.JedisPoolConfig;\n \n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;\n import org.springframework.boot.autoconfigure.data.redis.RedisProperties.Cluster;\n import org.springframework.boot.autoconfigure.data.redis.RedisProperties.Sentinel;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n@@ -55,31 +54,40 @@ import org.springframework.util.StringUtils;\n  * @author Christoph Strobl\n  * @author Phillip Webb\n  * @author Eddú Meléndez\n+ * @author Stephane Nicoll\n  */\n @Configuration\n @ConditionalOnClass({ JedisConnection.class, RedisOperations.class, Jedis.class })\n-@EnableConfigurationProperties\n+@EnableConfigurationProperties(RedisProperties.class)\n public class RedisAutoConfiguration {\n \n-\t@Bean(name = "org.springframework.autoconfigure.redis.RedisProperties")\n-\t@ConditionalOnMissingBean\n-\tpublic RedisProperties redisProperties() {\n-\t\treturn new RedisProperties();\n-\t}\n-\n \t/**\n-\t * Base class for Redis configurations.\n+\t * Redis connection configuration.\n \t */\n-\tprotected static abstract class AbstractRedisConfiguration {\n+\t@Configuration\n+\t@ConditionalOnClass(GenericObjectPool.class)\n+\tprotected static class RedisConnectionConfiguration {\n+\n+\t\tprivate final RedisProperties properties;\n \n-\t\t@Autowired\n-\t\tprotected RedisProperties properties;\n+\t\tprivate final RedisSentinelConfiguration sentinelConfiguration;\n \n-\t\t@Autowired(required = false)\n-\t\tprivate RedisSentinelConfiguration sentinelConfiguration;\n+\t\tprivate final RedisClusterConfiguration clusterConfiguration;\n \n-\t\t@Autowired(required = false)\n-\t\tprivate RedisClusterConfiguration clusterConfiguration;\n+\t\tpublic RedisConnectionConfiguration(RedisProperties properties,\n+\t\t\t\tObjectProvider<RedisSentinelConfiguration> sentinelConfigurationProvider,\n+\t\t\t\tObjectProvider<RedisClusterConfiguration> clusterConfigurationProvider) {\n+\t\t\tthis.properties = properties;\n+\t\t\tthis.sentinelConfiguration = sentinelConfigurationProvider.getIfAvailable();\n+\t\t\tthis.clusterConfiguration = clusterConfigurationProvider.getIfAvailable();\n+\t\t}\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(RedisConnectionFactory.class)\n+\t\tpublic JedisConnectionFactory redisConnectionFactory()\n+\t\t\t\tthrows UnknownHostException {\n+\t\t\treturn applyProperties(createJedisConnectionFactory());\n+\t\t}\n \n \t\tprotected final JedisConnectionFactory applyProperties(\n \t\t\t\tJedisConnectionFactory factory) {\n@@ -147,49 +155,6 @@ public class RedisAutoConfiguration {\n \t\t\treturn nodes;\n \t\t}\n \n-\t}\n-\n-\t/**\n-\t * Redis connection configuration.\n-\t */\n-\t@Configuration\n-\t@ConditionalOnMissingClass("org.apache.commons.pool2.impl.GenericObjectPool")\n-\tprotected static class RedisConnectionConfiguration\n-\t\t\textends AbstractRedisConfiguration {\n-\n-\t\t@Bean\n-\t\t@ConditionalOnMissingBean(RedisConnectionFactory.class)\n-\t\tpublic JedisConnectionFactory redisConnectionFactory()\n-\t\t\t\tthrows UnknownHostException {\n-\t\t\treturn applyProperties(createJedisConnectionFactory());\n-\t\t}\n-\n-\t\tprivate JedisConnectionFactory createJedisConnectionFactory() {\n-\t\t\tif (getSentinelConfig() != null) {\n-\t\t\t\treturn new JedisConnectionFactory(getSentinelConfig());\n-\t\t\t}\n-\t\t\tif (getClusterConfiguration() != null) {\n-\t\t\t\treturn new JedisConnectionFactory(getClusterConfiguration());\n-\t\t\t}\n-\t\t\treturn new JedisConnectionFactory();\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Redis pooled connection configuration.\n-\t */\n-\t@Configuration\n-\t@ConditionalOnClass(GenericObjectPool.class)\n-\tprotected static class RedisPooledConnectionConfiguration\n-\t\t\textends AbstractRedisConfiguration {\n-\n-\t\t@Bean\n-\t\t@ConditionalOnMissingBean(RedisConnectionFactory.class)\n-\t\tpublic JedisConnectionFactory redisConnectionFactory()\n-\t\t\t\tthrows UnknownHostException {\n-\t\t\treturn applyProperties(createJedisConnectionFactory());\n-\t\t}\n-\n \t\tprivate JedisConnectionFactory createJedisConnectionFactory() {\n \t\t\tJedisPoolConfig poolConfig = this.properties.getPool() != null\n \t\t\t\t\t? jedisPoolConfig() : new JedisPoolConfig();\n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.redis;\n\nimport java.net.UnknownHostException;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.apache.commons.pool2.impl.GenericObjectPool;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPoolConfig;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.data.redis.RedisProperties.Cluster;\nimport org.springframework.boot.autoconfigure.data.redis.RedisProperties.Sentinel;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisClusterConfiguration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.connection.RedisNode;\nimport org.springframework.data.redis.connection.RedisSentinelConfiguration;\nimport org.springframework.data.redis.connection.jedis.JedisConnection;\nimport org.springframework.data.redis.connection.jedis.JedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisOperations;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.util.Assert;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s Redis support.\n *\n * @author Dave Syer\n * @author Andy Wilkinson\n * @author Christian Dupuis\n * @author Christoph Strobl\n * @author Phillip Webb\n * @author Eddú Meléndez\n * @author Stephane Nicoll\n */\n@Configuration\n@ConditionalOnClass({ JedisConnection.class, RedisOperations.class, Jedis.class })\n@EnableConfigurationProperties(RedisProperties.class)\npublic class RedisAutoConfiguration {\n\n\t/**\n\t * Redis connection configuration.\n\t */\n\t@Configuration\n\t@ConditionalOnClass(GenericObjectPool.class)\n\tprotected static class RedisConnectionConfiguration {\n\n\t\tprivate final RedisProperties properties;\n\n\t\tprivate final RedisSentinelConfiguration sentinelConfiguration;\n\n\t\tprivate final RedisClusterConfiguration clusterConfiguration;\n\n\t\tpublic RedisConnectionConfiguration(RedisProperties properties,\n\t\t\t\tObjectProvider<RedisSentinelConfiguration> sentinelConfigurationProvider,\n\t\t\t\tObjectProvider<RedisClusterConfiguration> clusterConfigurationProvider) {\n\t\t\tthis.properties = properties;\n\t\t\tthis.sentinelConfiguration = sentinelConfigurationProvider.getIfAvailable();\n\t\t\tthis.clusterConfiguration = clusterConfigurationProvider.getIfAvailable();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(RedisConnectionFactory.class)\n\t\tpublic JedisConnectionFactory redisConnectionFactory()\n\t\t\t\tthrows UnknownHostException {\n\t\t\treturn applyProperties(createJedisConnectionFactory());\n\t\t}\n\n\t\tprotected final JedisConnectionFactory applyProperties(\n\t\t\t\tJedisConnectionFactory factory) {\n\t\t\tfactory.setHostName(this.properties.getHost());\n\t\t\tfactory.setPort(this.properties.getPort());\n\t\t\tif (this.properties.getPassword() != null) {\n\t\t\t\tfactory.setPassword(this.properties.getPassword());\n\t\t\t}\n\t\t\tfactory.setDatabase(this.properties.getDatabase());\n\t\t\tif (this.properties.getTimeout() > 0) {\n\t\t\t\tfactory.setTimeout(this.properties.getTimeout());\n\t\t\t}\n\t\t\treturn factory;\n\t\t}\n\n\t\tprotected final RedisSentinelConfiguration getSentinelConfig() {\n\t\t\tif (this.sentinelConfiguration != null) {\n\t\t\t\treturn this.sentinelConfiguration;\n\t\t\t}\n\t\t\tSentinel sentinelProperties = this.properties.getSentinel();\n\t\t\tif (sentinelProperties != null) {\n\t\t\t\tRedisSentinelConfiguration config = new RedisSentinelConfiguration();\n\t\t\t\tconfig.master(sentinelProperties.getMaster());\n\t\t\t\tconfig.setSentinels(createSentinels(sentinelProperties));\n\t\t\t\treturn config;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * Create a {@link RedisClusterConfiguration} if necessary.\n\t\t * @return {@literal null} if no cluster settings are set.\n\t\t */\n\t\tprotected final RedisClusterConfiguration getClusterConfiguration() {\n\t\t\tif (this.clusterConfiguration != null) {\n\t\t\t\treturn this.clusterConfiguration;\n\t\t\t}\n\t\t\tif (this.properties.getCluster() == null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tCluster clusterProperties = this.properties.getCluster();\n\t\t\tRedisClusterConfiguration config = new RedisClusterConfiguration(\n\t\t\t\t\tclusterProperties.getNodes());\n\n\t\t\tif (clusterProperties.getMaxRedirects() != null) {\n\t\t\t\tconfig.setMaxRedirects(clusterProperties.getMaxRedirects());\n\t\t\t}\n\t\t\treturn config;\n\t\t}\n\n\t\tprivate List<RedisNode> createSentinels(Sentinel sentinel) {\n\t\t\tList<RedisNode> nodes = new ArrayList<RedisNode>();\n\t\t\tfor (String node : StringUtils\n\t\t\t\t\t.commaDelimitedListToStringArray(sentinel.getNodes())) {\n\t\t\t\ttry {\n\t\t\t\t\tString[] parts = StringUtils.split(node, ":");\n\t\t\t\t\tAssert.state(parts.length == 2, "Must be defined as \'host:port\'");\n\t\t\t\t\tnodes.add(new RedisNode(parts[0], Integer.valueOf(parts[1])));\n\t\t\t\t}\n\t\t\t\tcatch (RuntimeException ex) {\n\t\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t\t"Invalid redis sentinel " + "property \'" + node + "\'", ex);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn nodes;\n\t\t}\n\n\t\tprivate JedisConnectionFactory createJedisConnectionFactory() {\n\t\t\tJedisPoolConfig poolConfig = this.properties.getPool() != null\n\t\t\t\t\t? jedisPoolConfig() : new JedisPoolConfig();\n\n\t\t\tif (getSentinelConfig() != null) {\n\t\t\t\treturn new JedisConnectionFactory(getSentinelConfig(), poolConfig);\n\t\t\t}\n\t\t\tif (getClusterConfiguration() != null) {\n\t\t\t\treturn new JedisConnectionFactory(getClusterConfiguration(), poolConfig);\n\t\t\t}\n\t\t\treturn new JedisConnectionFactory(poolConfig);\n\t\t}\n\n\t\tprivate JedisPoolConfig jedisPoolConfig() {\n\t\t\tJedisPoolConfig config = new JedisPoolConfig();\n\t\t\tRedisProperties.Pool props = this.properties.getPool();\n\t\t\tconfig.setMaxTotal(props.getMaxActive());\n\t\t\tconfig.setMaxIdle(props.getMaxIdle());\n\t\t\tconfig.setMinIdle(props.getMinIdle());\n\t\t\tconfig.setMaxWaitMillis(props.getMaxWait());\n\t\t\treturn config;\n\t\t}\n\n\t}\n\n\t/**\n\t * Standard Redis configuration.\n\t */\n\t@Configuration\n\tprotected static class RedisConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "redisTemplate")\n\t\tpublic RedisTemplate<Object, Object> redisTemplate(\n\t\t\t\tRedisConnectionFactory redisConnectionFactory)\n\t\t\t\t\t\tthrows UnknownHostException {\n\t\t\tRedisTemplate<Object, Object> template = new RedisTemplate<Object, Object>();\n\t\t\ttemplate.setConnectionFactory(redisConnectionFactory);\n\t\t\treturn template;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(StringRedisTemplate.class)\n\t\tpublic StringRedisTemplate stringRedisTemplate(\n\t\t\t\tRedisConnectionFactory redisConnectionFactory)\n\t\t\t\t\t\tthrows UnknownHostException {\n\t\t\tStringRedisTemplate template = new StringRedisTemplate();\n\t\t\ttemplate.setConnectionFactory(redisConnectionFactory);\n\t\t\treturn template;\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.redis;\n\nimport java.net.UnknownHostException;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.apache.commons.pool2.impl.GenericObjectPool;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPoolConfig;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;\nimport org.springframework.boot.autoconfigure.data.redis.RedisProperties.Cluster;\nimport org.springframework.boot.autoconfigure.data.redis.RedisProperties.Sentinel;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisClusterConfiguration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.connection.RedisNode;\nimport org.springframework.data.redis.connection.RedisSentinelConfiguration;\nimport org.springframework.data.redis.connection.jedis.JedisConnection;\nimport org.springframework.data.redis.connection.jedis.JedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisOperations;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.util.Assert;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s Redis support.\n *\n * @author Dave Syer\n * @author Andy Wilkinson\n * @author Christian Dupuis\n * @author Christoph Strobl\n * @author Phillip Webb\n * @author Eddú Meléndez\n */\n@Configuration\n@ConditionalOnClass({ JedisConnection.class, RedisOperations.class, Jedis.class })\n@EnableConfigurationProperties\npublic class RedisAutoConfiguration {\n\n\t@Bean(name = "org.springframework.autoconfigure.redis.RedisProperties")\n\t@ConditionalOnMissingBean\n\tpublic RedisProperties redisProperties() {\n\t\treturn new RedisProperties();\n\t}\n\n\t/**\n\t * Base class for Redis configurations.\n\t */\n\tprotected static abstract class AbstractRedisConfiguration {\n\n\t\t@Autowired\n\t\tprotected RedisProperties properties;\n\n\t\t@Autowired(required = false)\n\t\tprivate RedisSentinelConfiguration sentinelConfiguration;\n\n\t\t@Autowired(required = false)\n\t\tprivate RedisClusterConfiguration clusterConfiguration;\n\n\t\tprotected final JedisConnectionFactory applyProperties(\n\t\t\t\tJedisConnectionFactory factory) {\n\t\t\tfactory.setHostName(this.properties.getHost());\n\t\t\tfactory.setPort(this.properties.getPort());\n\t\t\tif (this.properties.getPassword() != null) {\n\t\t\t\tfactory.setPassword(this.properties.getPassword());\n\t\t\t}\n\t\t\tfactory.setDatabase(this.properties.getDatabase());\n\t\t\tif (this.properties.getTimeout() > 0) {\n\t\t\t\tfactory.setTimeout(this.properties.getTimeout());\n\t\t\t}\n\t\t\treturn factory;\n\t\t}\n\n\t\tprotected final RedisSentinelConfiguration getSentinelConfig() {\n\t\t\tif (this.sentinelConfiguration != null) {\n\t\t\t\treturn this.sentinelConfiguration;\n\t\t\t}\n\t\t\tSentinel sentinelProperties = this.properties.getSentinel();\n\t\t\tif (sentinelProperties != null) {\n\t\t\t\tRedisSentinelConfiguration config = new RedisSentinelConfiguration();\n\t\t\t\tconfig.master(sentinelProperties.getMaster());\n\t\t\t\tconfig.setSentinels(createSentinels(sentinelProperties));\n\t\t\t\treturn config;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * Create a {@link RedisClusterConfiguration} if necessary.\n\t\t * @return {@literal null} if no cluster settings are set.\n\t\t */\n\t\tprotected final RedisClusterConfiguration getClusterConfiguration() {\n\t\t\tif (this.clusterConfiguration != null) {\n\t\t\t\treturn this.clusterConfiguration;\n\t\t\t}\n\t\t\tif (this.properties.getCluster() == null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tCluster clusterProperties = this.properties.getCluster();\n\t\t\tRedisClusterConfiguration config = new RedisClusterConfiguration(\n\t\t\t\t\tclusterProperties.getNodes());\n\n\t\t\tif (clusterProperties.getMaxRedirects() != null) {\n\t\t\t\tconfig.setMaxRedirects(clusterProperties.getMaxRedirects());\n\t\t\t}\n\t\t\treturn config;\n\t\t}\n\n\t\tprivate List<RedisNode> createSentinels(Sentinel sentinel) {\n\t\t\tList<RedisNode> nodes = new ArrayList<RedisNode>();\n\t\t\tfor (String node : StringUtils\n\t\t\t\t\t.commaDelimitedListToStringArray(sentinel.getNodes())) {\n\t\t\t\ttry {\n\t\t\t\t\tString[] parts = StringUtils.split(node, ":");\n\t\t\t\t\tAssert.state(parts.length == 2, "Must be defined as \'host:port\'");\n\t\t\t\t\tnodes.add(new RedisNode(parts[0], Integer.valueOf(parts[1])));\n\t\t\t\t}\n\t\t\t\tcatch (RuntimeException ex) {\n\t\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t\t"Invalid redis sentinel " + "property \'" + node + "\'", ex);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn nodes;\n\t\t}\n\n\t}\n\n\t/**\n\t * Redis connection configuration.\n\t */\n\t@Configuration\n\t@ConditionalOnMissingClass("org.apache.commons.pool2.impl.GenericObjectPool")\n\tprotected static class RedisConnectionConfiguration\n\t\t\textends AbstractRedisConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(RedisConnectionFactory.class)\n\t\tpublic JedisConnectionFactory redisConnectionFactory()\n\t\t\t\tthrows UnknownHostException {\n\t\t\treturn applyProperties(createJedisConnectionFactory());\n\t\t}\n\n\t\tprivate JedisConnectionFactory createJedisConnectionFactory() {\n\t\t\tif (getSentinelConfig() != null) {\n\t\t\t\treturn new JedisConnectionFactory(getSentinelConfig());\n\t\t\t}\n\t\t\tif (getClusterConfiguration() != null) {\n\t\t\t\treturn new JedisConnectionFactory(getClusterConfiguration());\n\t\t\t}\n\t\t\treturn new JedisConnectionFactory();\n\t\t}\n\t}\n\n\t/**\n\t * Redis pooled connection configuration.\n\t */\n\t@Configuration\n\t@ConditionalOnClass(GenericObjectPool.class)\n\tprotected static class RedisPooledConnectionConfiguration\n\t\t\textends AbstractRedisConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(RedisConnectionFactory.class)\n\t\tpublic JedisConnectionFactory redisConnectionFactory()\n\t\t\t\tthrows UnknownHostException {\n\t\t\treturn applyProperties(createJedisConnectionFactory());\n\t\t}\n\n\t\tprivate JedisConnectionFactory createJedisConnectionFactory() {\n\t\t\tJedisPoolConfig poolConfig = this.properties.getPool() != null\n\t\t\t\t\t? jedisPoolConfig() : new JedisPoolConfig();\n\n\t\t\tif (getSentinelConfig() != null) {\n\t\t\t\treturn new JedisConnectionFactory(getSentinelConfig(), poolConfig);\n\t\t\t}\n\t\t\tif (getClusterConfiguration() != null) {\n\t\t\t\treturn new JedisConnectionFactory(getClusterConfiguration(), poolConfig);\n\t\t\t}\n\t\t\treturn new JedisConnectionFactory(poolConfig);\n\t\t}\n\n\t\tprivate JedisPoolConfig jedisPoolConfig() {\n\t\t\tJedisPoolConfig config = new JedisPoolConfig();\n\t\t\tRedisProperties.Pool props = this.properties.getPool();\n\t\t\tconfig.setMaxTotal(props.getMaxActive());\n\t\t\tconfig.setMaxIdle(props.getMaxIdle());\n\t\t\tconfig.setMinIdle(props.getMinIdle());\n\t\t\tconfig.setMaxWaitMillis(props.getMaxWait());\n\t\t\treturn config;\n\t\t}\n\n\t}\n\n\t/**\n\t * Standard Redis configuration.\n\t */\n\t@Configuration\n\tprotected static class RedisConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "redisTemplate")\n\t\tpublic RedisTemplate<Object, Object> redisTemplate(\n\t\t\t\tRedisConnectionFactory redisConnectionFactory)\n\t\t\t\t\t\tthrows UnknownHostException {\n\t\t\tRedisTemplate<Object, Object> template = new RedisTemplate<Object, Object>();\n\t\t\ttemplate.setConnectionFactory(redisConnectionFactory);\n\t\t\treturn template;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(StringRedisTemplate.class)\n\t\tpublic StringRedisTemplate stringRedisTemplate(\n\t\t\t\tRedisConnectionFactory redisConnectionFactory)\n\t\t\t\t\t\tthrows UnknownHostException {\n\t\t\tStringRedisTemplate template = new StringRedisTemplate();\n\t\t\ttemplate.setConnectionFactory(redisConnectionFactory);\n\t\t\treturn template;\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
