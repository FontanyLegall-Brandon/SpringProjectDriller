{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2012-2013 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.redis;\n+\n+import java.net.UnknownHostException;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.data.redis.connection.RedisConnectionFactory;\n+import org.springframework.data.redis.connection.lettuce.LettuceConnection;\n+import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;\n+import org.springframework.data.redis.core.RedisOperations;\n+import org.springframework.data.redis.core.RedisTemplate;\n+import org.springframework.data.redis.core.StringRedisTemplate;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s redis support.\n+ * \n+ * @author Dave Syer\n+ */\n+@Configuration\n+@ConditionalOnClass({ LettuceConnection.class, RedisOperations.class })\n+public class RedisAutoConfiguration {\n+\n+\t@Configuration\n+\t@EnableConfigurationProperties(RedisProperties.class)\n+\tprotected static class RedisConfiguration {\n+\n+\t\t@Autowired\n+\t\tprivate RedisProperties config;\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(RedisConnectionFactory.class)\n+\t\tRedisConnectionFactory redisConnectionFactory() throws UnknownHostException {\n+\t\t\tLettuceConnectionFactory factory = new LettuceConnectionFactory(\n+\t\t\t\t\tthis.config.getHost(), this.config.getPort());\n+\t\t\tif (this.config.getPassword() != null) {\n+\t\t\t\tfactory.setPassword(this.config.getPassword());\n+\t\t\t}\n+\t\t\treturn factory;\n+\t\t}\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(RedisOperations.class)\n+\t\tRedisOperations<Object, Object> redisTemplate(\n+\t\t\t\tRedisConnectionFactory redisConnectionFactory)\n+\t\t\t\tthrows UnknownHostException {\n+\t\t\tRedisTemplate<Object, Object> template = new RedisTemplate<Object, Object>();\n+\t\t\ttemplate.setConnectionFactory(redisConnectionFactory);\n+\t\t\treturn template;\n+\t\t}\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(StringRedisTemplate.class)\n+\t\tStringRedisTemplate stringRedisTemplate(\n+\t\t\t\tRedisConnectionFactory redisConnectionFactory)\n+\t\t\t\tthrows UnknownHostException {\n+\t\t\tStringRedisTemplate template = new StringRedisTemplate();\n+\t\t\ttemplate.setConnectionFactory(redisConnectionFactory);\n+\t\t\treturn template;\n+\t\t}\n+\n+\t}\n+\n+\t@ConfigurationProperties(name = "spring.data.redis")\n+\tpublic static class RedisProperties {\n+\n+\t\tprivate String host = "localhost";\n+\n+\t\tprivate String password;\n+\n+\t\tprivate int port = 6379;\n+\n+\t\tpublic String getHost() {\n+\t\t\treturn this.host;\n+\t\t}\n+\n+\t\tpublic void setHost(String host) {\n+\t\t\tthis.host = host;\n+\t\t}\n+\n+\t\tpublic int getPort() {\n+\t\t\treturn this.port;\n+\t\t}\n+\n+\t\tpublic void setPort(int port) {\n+\t\t\tthis.port = port;\n+\t\t}\n+\n+\t\tpublic String getPassword() {\n+\t\t\treturn this.password;\n+\t\t}\n+\n+\t\tpublic void setPassword(String password) {\n+\t\t\tthis.password = password;\n+\t\t}\n+\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.redis;\n\nimport java.net.UnknownHostException;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.connection.lettuce.LettuceConnection;\nimport org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;\nimport org.springframework.data.redis.core.RedisOperations;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.core.StringRedisTemplate;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s redis support.\n * \n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnClass({ LettuceConnection.class, RedisOperations.class })\npublic class RedisAutoConfiguration {\n\n\t@Configuration\n\t@EnableConfigurationProperties(RedisProperties.class)\n\tprotected static class RedisConfiguration {\n\n\t\t@Autowired\n\t\tprivate RedisProperties config;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(RedisConnectionFactory.class)\n\t\tRedisConnectionFactory redisConnectionFactory() throws UnknownHostException {\n\t\t\tLettuceConnectionFactory factory = new LettuceConnectionFactory(\n\t\t\t\t\tthis.config.getHost(), this.config.getPort());\n\t\t\tif (this.config.getPassword() != null) {\n\t\t\t\tfactory.setPassword(this.config.getPassword());\n\t\t\t}\n\t\t\treturn factory;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(RedisOperations.class)\n\t\tRedisOperations<Object, Object> redisTemplate(\n\t\t\t\tRedisConnectionFactory redisConnectionFactory)\n\t\t\t\tthrows UnknownHostException {\n\t\t\tRedisTemplate<Object, Object> template = new RedisTemplate<Object, Object>();\n\t\t\ttemplate.setConnectionFactory(redisConnectionFactory);\n\t\t\treturn template;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(StringRedisTemplate.class)\n\t\tStringRedisTemplate stringRedisTemplate(\n\t\t\t\tRedisConnectionFactory redisConnectionFactory)\n\t\t\t\tthrows UnknownHostException {\n\t\t\tStringRedisTemplate template = new StringRedisTemplate();\n\t\t\ttemplate.setConnectionFactory(redisConnectionFactory);\n\t\t\treturn template;\n\t\t}\n\n\t}\n\n\t@ConfigurationProperties(name = "spring.data.redis")\n\tpublic static class RedisProperties {\n\n\t\tprivate String host = "localhost";\n\n\t\tprivate String password;\n\n\t\tprivate int port = 6379;\n\n\t\tpublic String getHost() {\n\t\t\treturn this.host;\n\t\t}\n\n\t\tpublic void setHost(String host) {\n\t\t\tthis.host = host;\n\t\t}\n\n\t\tpublic int getPort() {\n\t\t\treturn this.port;\n\t\t}\n\n\t\tpublic void setPort(int port) {\n\t\t\tthis.port = port;\n\t\t}\n\n\t\tpublic String getPassword() {\n\t\t\treturn this.password;\n\t\t}\n\n\t\tpublic void setPassword(String password) {\n\t\t\tthis.password = password;\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
