{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -21,7 +21,6 @@ import com.couchbase.client.java.Cluster;\n import com.couchbase.client.java.CouchbaseBucket;\n import com.couchbase.client.java.CouchbaseCluster;\n import com.couchbase.client.java.cluster.ClusterInfo;\n-import com.couchbase.client.java.env.CouchbaseEnvironment;\n import com.couchbase.client.java.env.DefaultCouchbaseEnvironment;\n \n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n@@ -51,7 +50,7 @@ import org.springframework.data.couchbase.config.CouchbaseConfigurer;\n public class CouchbaseAutoConfiguration {\n \n \t@Configuration\n-\t@ConditionalOnMissingBean(CouchbaseConfigurer.class)\n+\t@ConditionalOnMissingBean({CouchbaseConfigurer.class, CouchbaseConfiguration.class})\n \tpublic static class CouchbaseConfiguration {\n \n \t\tprivate final CouchbaseProperties properties;\n@@ -62,8 +61,8 @@ public class CouchbaseAutoConfiguration {\n \n \t\t@Bean\n \t\t@Primary\n-\t\tpublic CouchbaseEnvironment couchbaseEnvironment() throws Exception {\n-\t\t\treturn createEnvironment(this.properties);\n+\t\tpublic DefaultCouchbaseEnvironment couchbaseEnvironment() throws Exception {\n+\t\t\treturn initializeEnvironmentBuilder(this.properties).build();\n \t\t}\n \n \t\t@Bean\n@@ -90,11 +89,11 @@ public class CouchbaseAutoConfiguration {\n \t\t}\n \n \t\t/**\n-\t\t * Create a {@link CouchbaseEnvironment} based on the specified settings.\n+\t\t * Initialize an environment builder based on the specified settings.\n \t\t * @param properties the couchbase properties to use\n-\t\t * @return a {@link CouchbaseEnvironment}\n+\t\t * @return a {@link DefaultCouchbaseEnvironment.Builder}\n \t\t */\n-\t\tprotected CouchbaseEnvironment createEnvironment(CouchbaseProperties properties) {\n+\t\tprotected DefaultCouchbaseEnvironment.Builder initializeEnvironmentBuilder(CouchbaseProperties properties) {\n \t\t\tCouchbaseProperties.Endpoints endpoints = properties.getEnv().getEndpoints();\n \t\t\tCouchbaseProperties.Timeouts timeouts = properties.getEnv().getTimeouts();\n \t\t\tDefaultCouchbaseEnvironment.Builder builder = DefaultCouchbaseEnvironment\n@@ -103,6 +102,7 @@ public class CouchbaseAutoConfiguration {\n \t\t\t\t\t.kvTimeout(timeouts.getKeyValue())\n \t\t\t\t\t.queryEndpoints(endpoints.getQuery())\n \t\t\t\t\t.queryTimeout(timeouts.getQuery()).viewEndpoints(endpoints.getView())\n+\t\t\t\t\t.socketConnectTimeout(timeouts.getSocketConnect())\n \t\t\t\t\t.viewTimeout(timeouts.getView());\n \t\t\tCouchbaseProperties.Ssl ssl = properties.getEnv().getSsl();\n \t\t\tif (ssl.getEnabled()) {\n@@ -114,7 +114,7 @@ public class CouchbaseAutoConfiguration {\n \t\t\t\t\tbuilder.sslKeystorePassword(ssl.getKeyStorePassword());\n \t\t\t\t}\n \t\t\t}\n-\t\t\treturn builder.build();\n+\t\t\treturn builder;\n \t\t}\n \n \t}\n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.couchbase;\n\nimport com.couchbase.client.java.Bucket;\nimport com.couchbase.client.java.Cluster;\nimport com.couchbase.client.java.CouchbaseBucket;\nimport com.couchbase.client.java.CouchbaseCluster;\nimport com.couchbase.client.java.cluster.ClusterInfo;\nimport com.couchbase.client.java.env.DefaultCouchbaseEnvironment;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.data.couchbase.config.CouchbaseConfigurer;\n\n/**\n * {@link EnableAutoConfiguration Auto-Configuration} for Couchbase.\n *\n * @author Eddú Meléndez\n * @author Stephane Nicoll\n * @since 1.4.0\n */\n@Configuration\n@ConditionalOnClass({ CouchbaseBucket.class, Cluster.class })\n@Conditional(CouchbaseAutoConfiguration.CouchbaseCondition.class)\n@EnableConfigurationProperties(CouchbaseProperties.class)\npublic class CouchbaseAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnMissingBean({CouchbaseConfigurer.class, CouchbaseConfiguration.class})\n\tpublic static class CouchbaseConfiguration {\n\n\t\tprivate final CouchbaseProperties properties;\n\n\t\tpublic CouchbaseConfiguration(CouchbaseProperties properties) {\n\t\t\tthis.properties = properties;\n\t\t}\n\n\t\t@Bean\n\t\t@Primary\n\t\tpublic DefaultCouchbaseEnvironment couchbaseEnvironment() throws Exception {\n\t\t\treturn initializeEnvironmentBuilder(this.properties).build();\n\t\t}\n\n\t\t@Bean\n\t\t@Primary\n\t\tpublic Cluster couchbaseCluster() throws Exception {\n\t\t\treturn CouchbaseCluster.create(couchbaseEnvironment(),\n\t\t\t\t\tthis.properties.getBootstrapHosts());\n\t\t}\n\n\t\t@Bean\n\t\t@Primary\n\t\tpublic ClusterInfo couchbaseClusterInfo() throws Exception {\n\t\t\treturn couchbaseCluster()\n\t\t\t\t\t.clusterManager(this.properties.getBucket().getName(),\n\t\t\t\t\t\t\tthis.properties.getBucket().getPassword())\n\t\t\t\t\t.info();\n\t\t}\n\n\t\t@Bean\n\t\t@Primary\n\t\tpublic Bucket couchbaseClient() throws Exception {\n\t\t\treturn couchbaseCluster().openBucket(this.properties.getBucket().getName(),\n\t\t\t\t\tthis.properties.getBucket().getPassword());\n\t\t}\n\n\t\t/**\n\t\t * Initialize an environment builder based on the specified settings.\n\t\t * @param properties the couchbase properties to use\n\t\t * @return a {@link DefaultCouchbaseEnvironment.Builder}\n\t\t */\n\t\tprotected DefaultCouchbaseEnvironment.Builder initializeEnvironmentBuilder(CouchbaseProperties properties) {\n\t\t\tCouchbaseProperties.Endpoints endpoints = properties.getEnv().getEndpoints();\n\t\t\tCouchbaseProperties.Timeouts timeouts = properties.getEnv().getTimeouts();\n\t\t\tDefaultCouchbaseEnvironment.Builder builder = DefaultCouchbaseEnvironment\n\t\t\t\t\t.builder().connectTimeout(timeouts.getConnect())\n\t\t\t\t\t.kvEndpoints(endpoints.getKeyValue())\n\t\t\t\t\t.kvTimeout(timeouts.getKeyValue())\n\t\t\t\t\t.queryEndpoints(endpoints.getQuery())\n\t\t\t\t\t.queryTimeout(timeouts.getQuery()).viewEndpoints(endpoints.getView())\n\t\t\t\t\t.socketConnectTimeout(timeouts.getSocketConnect())\n\t\t\t\t\t.viewTimeout(timeouts.getView());\n\t\t\tCouchbaseProperties.Ssl ssl = properties.getEnv().getSsl();\n\t\t\tif (ssl.getEnabled()) {\n\t\t\t\tbuilder.sslEnabled(true);\n\t\t\t\tif (ssl.getKeyStore() != null) {\n\t\t\t\t\tbuilder.sslKeystoreFile(ssl.getKeyStore());\n\t\t\t\t}\n\t\t\t\tif (ssl.getKeyStorePassword() != null) {\n\t\t\t\t\tbuilder.sslKeystorePassword(ssl.getKeyStorePassword());\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn builder;\n\t\t}\n\n\t}\n\n\t/**\n\t * Determine if Couchbase should be configured. This happens if either the\n\t * user-configuration defines a {@link CouchbaseConfigurer} or if at least the\n\t * "bootstrapHosts" property is specified.\n\t */\n\tstatic class CouchbaseCondition extends AnyNestedCondition {\n\n\t\tCouchbaseCondition() {\n\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n\t\t}\n\n\t\t@ConditionalOnProperty(prefix = "spring.couchbase", name = "bootstrapHosts")\n\t\tstatic class BootstrapHostsProperty {\n\t\t}\n\n\t\t@ConditionalOnBean(CouchbaseConfigurer.class)\n\t\tstatic class CouchbaseConfigurerAvailable {\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.couchbase;\n\nimport com.couchbase.client.java.Bucket;\nimport com.couchbase.client.java.Cluster;\nimport com.couchbase.client.java.CouchbaseBucket;\nimport com.couchbase.client.java.CouchbaseCluster;\nimport com.couchbase.client.java.cluster.ClusterInfo;\nimport com.couchbase.client.java.env.CouchbaseEnvironment;\nimport com.couchbase.client.java.env.DefaultCouchbaseEnvironment;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.data.couchbase.config.CouchbaseConfigurer;\n\n/**\n * {@link EnableAutoConfiguration Auto-Configuration} for Couchbase.\n *\n * @author Eddú Meléndez\n * @author Stephane Nicoll\n * @since 1.4.0\n */\n@Configuration\n@ConditionalOnClass({ CouchbaseBucket.class, Cluster.class })\n@Conditional(CouchbaseAutoConfiguration.CouchbaseCondition.class)\n@EnableConfigurationProperties(CouchbaseProperties.class)\npublic class CouchbaseAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnMissingBean(CouchbaseConfigurer.class)\n\tpublic static class CouchbaseConfiguration {\n\n\t\tprivate final CouchbaseProperties properties;\n\n\t\tpublic CouchbaseConfiguration(CouchbaseProperties properties) {\n\t\t\tthis.properties = properties;\n\t\t}\n\n\t\t@Bean\n\t\t@Primary\n\t\tpublic CouchbaseEnvironment couchbaseEnvironment() throws Exception {\n\t\t\treturn createEnvironment(this.properties);\n\t\t}\n\n\t\t@Bean\n\t\t@Primary\n\t\tpublic Cluster couchbaseCluster() throws Exception {\n\t\t\treturn CouchbaseCluster.create(couchbaseEnvironment(),\n\t\t\t\t\tthis.properties.getBootstrapHosts());\n\t\t}\n\n\t\t@Bean\n\t\t@Primary\n\t\tpublic ClusterInfo couchbaseClusterInfo() throws Exception {\n\t\t\treturn couchbaseCluster()\n\t\t\t\t\t.clusterManager(this.properties.getBucket().getName(),\n\t\t\t\t\t\t\tthis.properties.getBucket().getPassword())\n\t\t\t\t\t.info();\n\t\t}\n\n\t\t@Bean\n\t\t@Primary\n\t\tpublic Bucket couchbaseClient() throws Exception {\n\t\t\treturn couchbaseCluster().openBucket(this.properties.getBucket().getName(),\n\t\t\t\t\tthis.properties.getBucket().getPassword());\n\t\t}\n\n\t\t/**\n\t\t * Create a {@link CouchbaseEnvironment} based on the specified settings.\n\t\t * @param properties the couchbase properties to use\n\t\t * @return a {@link CouchbaseEnvironment}\n\t\t */\n\t\tprotected CouchbaseEnvironment createEnvironment(CouchbaseProperties properties) {\n\t\t\tCouchbaseProperties.Endpoints endpoints = properties.getEnv().getEndpoints();\n\t\t\tCouchbaseProperties.Timeouts timeouts = properties.getEnv().getTimeouts();\n\t\t\tDefaultCouchbaseEnvironment.Builder builder = DefaultCouchbaseEnvironment\n\t\t\t\t\t.builder().connectTimeout(timeouts.getConnect())\n\t\t\t\t\t.kvEndpoints(endpoints.getKeyValue())\n\t\t\t\t\t.kvTimeout(timeouts.getKeyValue())\n\t\t\t\t\t.queryEndpoints(endpoints.getQuery())\n\t\t\t\t\t.queryTimeout(timeouts.getQuery()).viewEndpoints(endpoints.getView())\n\t\t\t\t\t.viewTimeout(timeouts.getView());\n\t\t\tCouchbaseProperties.Ssl ssl = properties.getEnv().getSsl();\n\t\t\tif (ssl.getEnabled()) {\n\t\t\t\tbuilder.sslEnabled(true);\n\t\t\t\tif (ssl.getKeyStore() != null) {\n\t\t\t\t\tbuilder.sslKeystoreFile(ssl.getKeyStore());\n\t\t\t\t}\n\t\t\t\tif (ssl.getKeyStorePassword() != null) {\n\t\t\t\t\tbuilder.sslKeystorePassword(ssl.getKeyStorePassword());\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn builder.build();\n\t\t}\n\n\t}\n\n\t/**\n\t * Determine if Couchbase should be configured. This happens if either the\n\t * user-configuration defines a {@link CouchbaseConfigurer} or if at least the\n\t * "bootstrapHosts" property is specified.\n\t */\n\tstatic class CouchbaseCondition extends AnyNestedCondition {\n\n\t\tCouchbaseCondition() {\n\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n\t\t}\n\n\t\t@ConditionalOnProperty(prefix = "spring.couchbase", name = "bootstrapHosts")\n\t\tstatic class BootstrapHostsProperty {\n\t\t}\n\n\t\t@ConditionalOnBean(CouchbaseConfigurer.class)\n\t\tstatic class CouchbaseConfigurerAvailable {\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
