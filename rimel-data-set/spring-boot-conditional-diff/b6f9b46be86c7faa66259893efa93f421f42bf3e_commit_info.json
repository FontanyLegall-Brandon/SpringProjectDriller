{'_old_path': PosixPath('spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/reactive/WebTestClientAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/reactive/WebTestClientAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -22,9 +22,11 @@ import java.util.List;\n \n import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration;\n+import org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.boot.web.codec.CodecCustomizer;\n@@ -33,6 +35,7 @@ import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.test.web.reactive.server.WebTestClient;\n import org.springframework.web.reactive.function.client.WebClient;\n+import org.springframework.web.server.WebHandler;\n \n /**\n  * Auto-configuration for {@link WebTestClient}.\n@@ -43,12 +46,13 @@ import org.springframework.web.reactive.function.client.WebClient;\n  */\n @Configuration\n @ConditionalOnClass({ WebClient.class, WebTestClient.class })\n-@AutoConfigureAfter(CodecsAutoConfiguration.class)\n+@AutoConfigureAfter({ CodecsAutoConfiguration.class, WebFluxAutoConfiguration.class })\n @EnableConfigurationProperties\n public class WebTestClientAutoConfiguration {\n \n \t@Bean\n \t@ConditionalOnMissingBean\n+\t@ConditionalOnBean(WebHandler.class)\n \tpublic WebTestClient webTestClient(ApplicationContext applicationContext,\n \t\t\tList<WebTestClientBuilderCustomizer> customizers) {\n \t\tWebTestClient.Builder builder = WebTestClient\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.test.autoconfigure.web.reactive;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.web.codec.CodecCustomizer;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.test.web.reactive.server.WebTestClient;\nimport org.springframework.web.reactive.function.client.WebClient;\nimport org.springframework.web.server.WebHandler;\n\n/**\n * Auto-configuration for {@link WebTestClient}.\n *\n * @author Stephane Nicoll\n * @author Andy Wilkinson\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass({ WebClient.class, WebTestClient.class })\n@AutoConfigureAfter({ CodecsAutoConfiguration.class, WebFluxAutoConfiguration.class })\n@EnableConfigurationProperties\npublic class WebTestClientAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnBean(WebHandler.class)\n\tpublic WebTestClient webTestClient(ApplicationContext applicationContext,\n\t\t\tList<WebTestClientBuilderCustomizer> customizers) {\n\t\tWebTestClient.Builder builder = WebTestClient\n\t\t\t\t.bindToApplicationContext(applicationContext).configureClient();\n\t\tfor (WebTestClientBuilderCustomizer customizer : customizers) {\n\t\t\tcustomizer.customize(builder);\n\t\t}\n\t\treturn builder.build();\n\t}\n\n\t@Bean\n\t@ConfigurationProperties(prefix = "spring.test.webtestclient")\n\tpublic SpringBootWebTestClientBuilderCustomizer springBootWebTestClientBuilderCustomizer(\n\t\t\tObjectProvider<Collection<CodecCustomizer>> codecCustomizers) {\n\t\treturn new SpringBootWebTestClientBuilderCustomizer(\n\t\t\t\tcodecCustomizers.getIfAvailable(Collections::emptyList));\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.test.autoconfigure.web.reactive;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.web.codec.CodecCustomizer;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.test.web.reactive.server.WebTestClient;\nimport org.springframework.web.reactive.function.client.WebClient;\n\n/**\n * Auto-configuration for {@link WebTestClient}.\n *\n * @author Stephane Nicoll\n * @author Andy Wilkinson\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass({ WebClient.class, WebTestClient.class })\n@AutoConfigureAfter(CodecsAutoConfiguration.class)\n@EnableConfigurationProperties\npublic class WebTestClientAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic WebTestClient webTestClient(ApplicationContext applicationContext,\n\t\t\tList<WebTestClientBuilderCustomizer> customizers) {\n\t\tWebTestClient.Builder builder = WebTestClient\n\t\t\t\t.bindToApplicationContext(applicationContext).configureClient();\n\t\tfor (WebTestClientBuilderCustomizer customizer : customizers) {\n\t\t\tcustomizer.customize(builder);\n\t\t}\n\t\treturn builder.build();\n\t}\n\n\t@Bean\n\t@ConfigurationProperties(prefix = "spring.test.webtestclient")\n\tpublic SpringBootWebTestClientBuilderCustomizer springBootWebTestClientBuilderCustomizer(\n\t\t\tObjectProvider<Collection<CodecCustomizer>> codecCustomizers) {\n\t\treturn new SpringBootWebTestClientBuilderCustomizer(\n\t\t\t\tcodecCustomizers.getIfAvailable(Collections::emptyList));\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
