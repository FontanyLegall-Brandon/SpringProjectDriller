{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/liquibase/LiquibaseEndpointAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/liquibase/LiquibaseEndpointAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -18,6 +18,8 @@ package org.springframework.boot.actuate.autoconfigure.liquibase;\n \n import liquibase.integration.spring.SpringLiquibase;\n \n+import org.springframework.beans.BeansException;\n+import org.springframework.beans.factory.config.BeanPostProcessor;\n import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\n import org.springframework.boot.actuate.liquibase.LiquibaseEndpoint;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n@@ -25,6 +27,7 @@ import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.liquibase.DataSourceClosingSpringLiquibase;\n import org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Bean;\n@@ -49,4 +52,29 @@ public class LiquibaseEndpointAutoConfiguration {\n \t\treturn new LiquibaseEndpoint(context);\n \t}\n \n+\t@Bean\n+\t@ConditionalOnBean(SpringLiquibase.class)\n+\t@ConditionalOnEnabledEndpoint(endpoint = LiquibaseEndpoint.class)\n+\tpublic static BeanPostProcessor preventDataSourceCloseBeanPostProcessor() {\n+\t\treturn new BeanPostProcessor() {\n+\n+\t\t\t@Override\n+\t\t\tpublic Object postProcessBeforeInitialization(Object bean, String beanName)\n+\t\t\t\t\tthrows BeansException {\n+\t\t\t\tif (bean instanceof DataSourceClosingSpringLiquibase) {\n+\t\t\t\t\t((DataSourceClosingSpringLiquibase) bean)\n+\t\t\t\t\t\t\t.setCloseDataSourceOnceMigrated(false);\n+\t\t\t\t}\n+\t\t\t\treturn bean;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic Object postProcessAfterInitialization(Object bean, String beanName)\n+\t\t\t\t\tthrows BeansException {\n+\t\t\t\treturn bean;\n+\t\t\t}\n+\n+\t\t};\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.liquibase;\n\nimport liquibase.integration.spring.SpringLiquibase;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.config.BeanPostProcessor;\nimport org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\nimport org.springframework.boot.actuate.liquibase.LiquibaseEndpoint;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.liquibase.DataSourceClosingSpringLiquibase;\nimport org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link LiquibaseEndpoint}.\n *\n * @author Phillip Webb\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass(SpringLiquibase.class)\n@AutoConfigureAfter(LiquibaseAutoConfiguration.class)\npublic class LiquibaseEndpointAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnBean(SpringLiquibase.class)\n\t@ConditionalOnMissingBean\n\t@ConditionalOnEnabledEndpoint\n\tpublic LiquibaseEndpoint liquibaseEndpoint(ApplicationContext context) {\n\t\treturn new LiquibaseEndpoint(context);\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(SpringLiquibase.class)\n\t@ConditionalOnEnabledEndpoint(endpoint = LiquibaseEndpoint.class)\n\tpublic static BeanPostProcessor preventDataSourceCloseBeanPostProcessor() {\n\t\treturn new BeanPostProcessor() {\n\n\t\t\t@Override\n\t\t\tpublic Object postProcessBeforeInitialization(Object bean, String beanName)\n\t\t\t\t\tthrows BeansException {\n\t\t\t\tif (bean instanceof DataSourceClosingSpringLiquibase) {\n\t\t\t\t\t((DataSourceClosingSpringLiquibase) bean)\n\t\t\t\t\t\t\t.setCloseDataSourceOnceMigrated(false);\n\t\t\t\t}\n\t\t\t\treturn bean;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic Object postProcessAfterInitialization(Object bean, String beanName)\n\t\t\t\t\tthrows BeansException {\n\t\t\t\treturn bean;\n\t\t\t}\n\n\t\t};\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.liquibase;\n\nimport liquibase.integration.spring.SpringLiquibase;\n\nimport org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\nimport org.springframework.boot.actuate.liquibase.LiquibaseEndpoint;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link LiquibaseEndpoint}.\n *\n * @author Phillip Webb\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass(SpringLiquibase.class)\n@AutoConfigureAfter(LiquibaseAutoConfiguration.class)\npublic class LiquibaseEndpointAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnBean(SpringLiquibase.class)\n\t@ConditionalOnMissingBean\n\t@ConditionalOnEnabledEndpoint\n\tpublic LiquibaseEndpoint liquibaseEndpoint(ApplicationContext context) {\n\t\treturn new LiquibaseEndpoint(context);\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
