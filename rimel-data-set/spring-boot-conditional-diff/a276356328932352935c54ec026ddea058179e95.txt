@@ -17,11 +17,13 @@
 package org.springframework.boot.autoconfigure.session;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.List;
 
 import javax.annotation.PostConstruct;
 
 import org.springframework.beans.factory.ObjectProvider;
+import org.springframework.boot.WebApplicationType;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.AutoConfigureBefore;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
@@ -43,6 +45,7 @@ import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Import;
 import org.springframework.context.annotation.ImportSelector;
 import org.springframework.core.type.AnnotationMetadata;
+import org.springframework.session.ReactiveSessionRepository;
 import org.springframework.session.Session;
 import org.springframework.session.SessionRepository;
 
@@ -69,77 +72,116 @@ public class SessionAutoConfiguration {
 
 	@Configuration
 	@ConditionalOnWebApplication(type = Type.SERVLET)
-	@Import({ SessionRepositoryConfiguration.class, SessionRepositoryValidator.class,
+	@Import({ ServletSessionRepositoryValidator.class,
 			SessionRepositoryFilterConfiguration.class })
 	static class ServletSessionConfiguration {
 
+		@Configuration
+		@ConditionalOnMissingBean(SessionRepository.class)
+		@Import({ ServletSessionRepositoryImplementationValidator.class,
+				ServletSessionConfigurationImportSelector.class })
+		static class ServletSessionRepositoryConfiguration {
+
+		}
+
 	}
 
 	@Configuration
 	@ConditionalOnWebApplication(type = Type.REACTIVE)
+	@Import(ReactiveSessionRepositoryValidator.class)
 	static class ReactiveSessionConfiguration {
 
-	}
+		@Configuration
+		@ConditionalOnMissingBean(ReactiveSessionRepository.class)
+		@Import({ ReactiveSessionRepositoryImplementationValidator.class,
+				ReactiveSessionConfigurationImportSelector.class })
+		static class ReactiveSessionRepositoryConfiguration {
 
-	@Configuration
-	@ConditionalOnMissingBean(SessionRepository.class)
-	@Import({ SessionRepositoryImplementationValidator.class,
-			SessionConfigurationImportSelector.class })
-	static class SessionRepositoryConfiguration {
+		}
 
 	}
 
 	
-	static class SessionConfigurationImportSelector implements ImportSelector {
+	static abstract class SessionConfigurationImportSelector implements ImportSelector {
 
-		@Override
-		public String[] selectImports(AnnotationMetadata importingClassMetadata) {
+		protected final String[] selectImports(AnnotationMetadata importingClassMetadata,
+				WebApplicationType webApplicationType) {
+			List<String> imports = new ArrayList<>();
 			StoreType[] types = StoreType.values();
-			String[] imports = new String[types.length];
 			for (int i = 0; i < types.length; i++) {
-				imports[i] = SessionStoreMappings.getConfigurationClass(types[i]);
+				imports.add(SessionStoreMappings.getConfigurationClass(webApplicationType,
+						types[i]));
 			}
-			return imports;
+			return imports.toArray(new String[imports.size()]);
 		}
 
 	}
 
 	
+	static class ReactiveSessionConfigurationImportSelector
+			extends SessionConfigurationImportSelector {
+
+		@Override
+		public String[] selectImports(AnnotationMetadata importingClassMetadata) {
+			return super.selectImports(importingClassMetadata,
+					WebApplicationType.REACTIVE);
+		}
+
+	}
+
+	
-	static class SessionRepositoryImplementationValidator {
+	static class ServletSessionConfigurationImportSelector
+			extends SessionConfigurationImportSelector {
+
+		@Override
+		public String[] selectImports(AnnotationMetadata importingClassMetadata) {
+			return super.selectImports(importingClassMetadata,
+					WebApplicationType.SERVLET);
+		}
+
+	}
+
+	
+	static class AbstractSessionRepositoryImplementationValidator {
+
+		private final List<String> candidates;
 
 		private final ClassLoader classLoader;
 
 		private final SessionProperties sessionProperties;
 
-		SessionRepositoryImplementationValidator(ApplicationContext applicationContext,
-				SessionProperties sessionProperties) {
+		AbstractSessionRepositoryImplementationValidator(
+				ApplicationContext applicationContext,
+				SessionProperties sessionProperties, List<String> candidates) {
 			this.classLoader = applicationContext.getClassLoader();
 			this.sessionProperties = sessionProperties;
+			this.candidates = candidates;
 		}
 
 		@PostConstruct
 		public void checkAvailableImplementations() {
-			List<Class<?>> candidates = new ArrayList<>();
-			addCandidate(candidates,
-					);
-			addCandidate(candidates,
-					);
-			addCandidate(candidates,
-					);
-			addCandidate(candidates,
-					);
+			List<Class<?>> availableCandidates = new ArrayList<>();
+			for (String candidate : this.candidates) {
+				addCandidateIfAvailable(availableCandidates, candidate);
+			}
 			StoreType storeType = this.sessionProperties.getStoreType();
-			if (candidates.size() > 1 && storeType == null) {
-				throw new NonUniqueSessionRepositoryException(candidates);
+			if (availableCandidates.size() > 1 && storeType == null) {
+				throw new NonUniqueSessionRepositoryException(availableCandidates);
 			}
 		}
 
-		private void addCandidate(List<Class<?>> candidates, String type) {
+		private void addCandidateIfAvailable(List<Class<?>> candidates, String type) {
 			try {
 				Class<?> candidate = this.classLoader.loadClass(type);
 				if (candidate != null) {
@@ -153,17 +195,52 @@ public class SessionAutoConfiguration {
 	}
 
 	
+	static class ServletSessionRepositoryImplementationValidator
+			extends AbstractSessionRepositoryImplementationValidator {
+
+		ServletSessionRepositoryImplementationValidator(
+				ApplicationContext applicationContext,
+				SessionProperties sessionProperties) {
+			super(applicationContext, sessionProperties, Arrays.asList(
+					,
+					,
+					,
+					));
+		}
+
+	}
+
+	
-	static class SessionRepositoryValidator {
+	static class ReactiveSessionRepositoryImplementationValidator
+			extends AbstractSessionRepositoryImplementationValidator {
 
-		private SessionProperties sessionProperties;
+		ReactiveSessionRepositoryImplementationValidator(
+				ApplicationContext applicationContext,
+				SessionProperties sessionProperties) {
+			super(applicationContext, sessionProperties, Arrays.asList(
+					,
+					));
+		}
 
-		private ObjectProvider<SessionRepository<?>> sessionRepositoryProvider;
+	}
 
-		SessionRepositoryValidator(SessionProperties sessionProperties,
-				ObjectProvider<SessionRepository<?>> sessionRepositoryProvider) {
+	
+	static class AbstractSessionRepositoryValidator {
+
+		private final SessionProperties sessionProperties;
+
+		private final ObjectProvider<?> sessionRepositoryProvider;
+
+		protected AbstractSessionRepositoryValidator(SessionProperties sessionProperties,
+				ObjectProvider<?> sessionRepositoryProvider) {
 			this.sessionProperties = sessionProperties;
 			this.sessionRepositoryProvider = sessionRepositoryProvider;
 		}
@@ -184,4 +261,32 @@ public class SessionAutoConfiguration {
 
 	}
 
+	
+	static class ServletSessionRepositoryValidator
+			extends AbstractSessionRepositoryValidator {
+
+		ServletSessionRepositoryValidator(SessionProperties sessionProperties,
+				ObjectProvider<SessionRepository<?>> sessionRepositoryProvider) {
+			super(sessionProperties, sessionRepositoryProvider);
+		}
+
+	}
+
+	
+	static class ReactiveSessionRepositoryValidator
+			extends AbstractSessionRepositoryValidator {
+
+		ReactiveSessionRepositoryValidator(SessionProperties sessionProperties,
+				ObjectProvider<ReactiveSessionRepository<?>> sessionRepositoryProvider) {
+			super(sessionProperties, sessionRepositoryProvider);
+		}
+
+	}
+
 }

