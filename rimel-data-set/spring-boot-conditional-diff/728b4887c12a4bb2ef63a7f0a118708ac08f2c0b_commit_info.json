{'_old_path': PosixPath('spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/autoconfigure/HealthzConfiguration.java'), '_new_path': PosixPath('spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/autoconfigure/HealthConfiguration.java'), 'change_type': <ModificationType.RENAME: 3>, 'diff': '@@ -19,9 +19,9 @@ package org.springframework.bootstrap.actuate.autoconfigure;\n import javax.servlet.Servlet;\n \n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.bootstrap.actuate.health.HealthIndicator;\n-import org.springframework.bootstrap.actuate.health.HealthzEndpoint;\n-import org.springframework.bootstrap.actuate.health.VanillaHealthIndicator;\n+import org.springframework.bootstrap.actuate.endpoint.health.HealthEndpoint;\n+import org.springframework.bootstrap.actuate.endpoint.health.HealthIndicator;\n+import org.springframework.bootstrap.actuate.endpoint.health.VanillaHealthIndicator;\n import org.springframework.bootstrap.context.annotation.ConditionalOnClass;\n import org.springframework.bootstrap.context.annotation.ConditionalOnMissingBean;\n import org.springframework.bootstrap.context.annotation.EnableAutoConfiguration;\n@@ -30,21 +30,21 @@ import org.springframework.context.annotation.Configuration;\n import org.springframework.web.servlet.DispatcherServlet;\n \n /**\n- * {@link EnableAutoConfiguration Auto-configuration} for /healthz endpoint.\n+ * {@link EnableAutoConfiguration Auto-configuration} for /health endpoint.\n  * \n  * @author Dave Syer\n  */\n @Configuration\n @ConditionalOnClass({ Servlet.class, DispatcherServlet.class })\n-@ConditionalOnMissingBean({ HealthzEndpoint.class })\n-public class HealthzConfiguration {\n+@ConditionalOnMissingBean({ HealthEndpoint.class })\n+public class HealthConfiguration {\n \n \t@Autowired(required = false)\n \tprivate HealthIndicator<? extends Object> healthIndicator = new VanillaHealthIndicator();\n \n \t@Bean\n-\tpublic HealthzEndpoint<? extends Object> healthzEndpoint() {\n-\t\treturn new HealthzEndpoint<Object>(healthIndicator);\n+\tpublic HealthEndpoint<? extends Object> healthzEndpoint() {\n+\t\treturn new HealthEndpoint<Object>(this.healthIndicator);\n \t}\n \n }\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.bootstrap.actuate.autoconfigure;\n\nimport javax.servlet.Servlet;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.bootstrap.actuate.endpoint.health.HealthEndpoint;\nimport org.springframework.bootstrap.actuate.endpoint.health.HealthIndicator;\nimport org.springframework.bootstrap.actuate.endpoint.health.VanillaHealthIndicator;\nimport org.springframework.bootstrap.context.annotation.ConditionalOnClass;\nimport org.springframework.bootstrap.context.annotation.ConditionalOnMissingBean;\nimport org.springframework.bootstrap.context.annotation.EnableAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.DispatcherServlet;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for /health endpoint.\n * \n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class })\n@ConditionalOnMissingBean({ HealthEndpoint.class })\npublic class HealthConfiguration {\n\n\t@Autowired(required = false)\n\tprivate HealthIndicator<? extends Object> healthIndicator = new VanillaHealthIndicator();\n\n\t@Bean\n\tpublic HealthEndpoint<? extends Object> healthzEndpoint() {\n\t\treturn new HealthEndpoint<Object>(this.healthIndicator);\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.bootstrap.actuate.autoconfigure;\n\nimport javax.servlet.Servlet;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.bootstrap.actuate.health.HealthIndicator;\nimport org.springframework.bootstrap.actuate.health.HealthzEndpoint;\nimport org.springframework.bootstrap.actuate.health.VanillaHealthIndicator;\nimport org.springframework.bootstrap.context.annotation.ConditionalOnClass;\nimport org.springframework.bootstrap.context.annotation.ConditionalOnMissingBean;\nimport org.springframework.bootstrap.context.annotation.EnableAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.DispatcherServlet;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for /healthz endpoint.\n * \n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class })\n@ConditionalOnMissingBean({ HealthzEndpoint.class })\npublic class HealthzConfiguration {\n\n\t@Autowired(required = false)\n\tprivate HealthIndicator<? extends Object> healthIndicator = new VanillaHealthIndicator();\n\n\t@Bean\n\tpublic HealthzEndpoint<? extends Object> healthzEndpoint() {\n\t\treturn new HealthzEndpoint<Object>(healthIndicator);\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
