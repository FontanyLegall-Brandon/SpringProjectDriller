@@ -20,7 +20,6 @@ import java.util.Collection;
 import java.util.LinkedHashMap;
 
 import javax.annotation.PostConstruct;
-import javax.servlet.Servlet;
 
 import com.github.mxab.thymeleaf.extras.dataattribute.dialect.DataAttributeDialect;
 import nz.net.ultraq.thymeleaf.LayoutDialect;
@@ -29,9 +28,12 @@ import org.apache.commons.logging.LogFactory;
 import org.thymeleaf.dialect.IDialect;
 import org.thymeleaf.extras.java8time.dialect.Java8TimeDialect;
 import org.thymeleaf.extras.springsecurity4.dialect.SpringSecurityDialect;
+import org.thymeleaf.spring5.ISpringWebFluxTemplateEngine;
 import org.thymeleaf.spring5.SpringTemplateEngine;
+import org.thymeleaf.spring5.SpringWebFluxTemplateEngine;
 import org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver;
 import org.thymeleaf.spring5.view.ThymeleafViewResolver;
+import org.thymeleaf.spring5.view.reactive.ThymeleafReactiveViewResolver;
 import org.thymeleaf.templatemode.TemplateMode;
 import org.thymeleaf.templateresolver.ITemplateResolver;
 
@@ -45,6 +47,7 @@ import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplicat
 import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;
 import org.springframework.boot.autoconfigure.template.TemplateLocation;
 import org.springframework.boot.autoconfigure.web.ConditionalOnEnabledResourceChain;
+import org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration;
 import org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.ApplicationContext;
@@ -63,11 +66,12 @@ import org.springframework.web.servlet.resource.ResourceUrlEncodingFilter;
  * @author Stephane Nicoll
  * @author Brian Clozel
  * @author Eddú Meléndez
+ * @author Daniel Fernández
  */
 @Configuration
 @EnableConfigurationProperties(ThymeleafProperties.class)
 @ConditionalOnClass(TemplateMode.class)
-@AutoConfigureAfter(WebMvcAutoConfiguration.class)
+@AutoConfigureAfter({WebMvcAutoConfiguration.class, WebFluxAutoConfiguration.class})
 public class ThymeleafAutoConfiguration {
 
 	@Configuration
@@ -123,68 +127,112 @@ public class ThymeleafAutoConfiguration {
 	}
 
 	@Configuration
-	@ConditionalOnClass({ Servlet.class })
-	@ConditionalOnWebApplication(type = Type.SERVLET)
-	static class ThymeleafViewResolverConfiguration {
+	protected static class ThymeleafDefaultConfiguration {
 
-		private final ThymeleafProperties properties;
+		private final Collection<ITemplateResolver> templateResolvers;
 
-		private final SpringTemplateEngine templateEngine;
+		private final Collection<IDialect> dialects;
 
-		ThymeleafViewResolverConfiguration(ThymeleafProperties properties,
-				SpringTemplateEngine templateEngine) {
-			this.properties = properties;
-			this.templateEngine = templateEngine;
+		public ThymeleafDefaultConfiguration(
+				Collection<ITemplateResolver> templateResolvers,
+				ObjectProvider<Collection<IDialect>> dialectsProvider) {
+			this.templateResolvers = templateResolvers;
+			this.dialects = dialectsProvider.getIfAvailable();
 		}
 
 		@Bean
-		@ConditionalOnMissingBean(name = )
-		@ConditionalOnProperty(name = , matchIfMissing = true)
-		public ThymeleafViewResolver thymeleafViewResolver() {
-			ThymeleafViewResolver resolver = new ThymeleafViewResolver();
-			resolver.setTemplateEngine(this.templateEngine);
-			resolver.setCharacterEncoding(this.properties.getEncoding().name());
-			resolver.setContentType(appendCharset(this.properties.getContentType(),
-					resolver.getCharacterEncoding()));
-			resolver.setExcludedViewNames(this.properties.getExcludedViewNames());
-			resolver.setViewNames(this.properties.getViewNames());
-			
-			
-			resolver.setOrder(Ordered.LOWEST_PRECEDENCE - 5);
-			resolver.setCache(this.properties.isCache());
-			return resolver;
+		@ConditionalOnMissingBean(SpringTemplateEngine.class)
+		public SpringTemplateEngine templateEngine() {
+			SpringTemplateEngine engine = new SpringTemplateEngine();
+			for (ITemplateResolver templateResolver : this.templateResolvers) {
+				engine.addTemplateResolver(templateResolver);
+			}
+			if (!CollectionUtils.isEmpty(this.dialects)) {
+				for (IDialect dialect : this.dialects) {
+					engine.addDialect(dialect);
+				}
+			}
+			return engine;
+		}
+
+	}
+
+	@Configuration
+	@ConditionalOnWebApplication(type = Type.SERVLET)
+	@ConditionalOnProperty(name = , matchIfMissing = true)
+	static class ThymeleafWebMvcConfiguration {
+
+		@Bean
+		@ConditionalOnMissingBean
+		@ConditionalOnEnabledResourceChain
+		public ResourceUrlEncodingFilter resourceUrlEncodingFilter() {
+			return new ResourceUrlEncodingFilter();
 		}
 
-		private String appendCharset(MimeType type, String charset) {
-			if (type.getCharset() != null) {
-				return type.toString();
+		@Configuration
+		static class ThymeleafViewResolverConfiguration {
+
+			private final ThymeleafProperties properties;
+
+			private final SpringTemplateEngine templateEngine;
+
+			ThymeleafViewResolverConfiguration(ThymeleafProperties properties,
+					SpringTemplateEngine templateEngine) {
+				this.properties = properties;
+				this.templateEngine = templateEngine;
+			}
+
+			@Bean
+			@ConditionalOnMissingBean(name = )
+			public ThymeleafViewResolver thymeleafViewResolver() {
+				ThymeleafViewResolver resolver = new ThymeleafViewResolver();
+				resolver.setTemplateEngine(this.templateEngine);
+				resolver.setCharacterEncoding(this.properties.getEncoding().name());
+				resolver.setContentType(appendCharset(this.properties.getServlet().getContentType(),
+						resolver.getCharacterEncoding()));
+				resolver.setExcludedViewNames(this.properties.getExcludedViewNames());
+				resolver.setViewNames(this.properties.getViewNames());
+				
+				
+				resolver.setOrder(Ordered.LOWEST_PRECEDENCE - 5);
+				resolver.setCache(this.properties.isCache());
+				return resolver;
+			}
+
+			private String appendCharset(MimeType type, String charset) {
+				if (type.getCharset() != null) {
+					return type.toString();
+				}
+				LinkedHashMap<String, String> parameters = new LinkedHashMap<>();
+				parameters.put(, charset);
+				parameters.putAll(type.getParameters());
+				return new MimeType(type, parameters).toString();
 			}
-			LinkedHashMap<String, String> parameters = new LinkedHashMap<>();
-			parameters.put(, charset);
-			parameters.putAll(type.getParameters());
-			return new MimeType(type, parameters).toString();
+
 		}
 
 	}
 
 	@Configuration
-	@ConditionalOnMissingBean(SpringTemplateEngine.class)
-	protected static class ThymeleafDefaultConfiguration {
+	@ConditionalOnWebApplication(type = Type.REACTIVE)
+	@ConditionalOnProperty(name = , matchIfMissing = true)
+	static class ThymeleafReactiveConfiguration {
 
 		private final Collection<ITemplateResolver> templateResolvers;
 
 		private final Collection<IDialect> dialects;
 
-		public ThymeleafDefaultConfiguration(
-				Collection<ITemplateResolver> templateResolvers,
+
+		ThymeleafReactiveConfiguration(Collection<ITemplateResolver> templateResolvers,
 				ObjectProvider<Collection<IDialect>> dialectsProvider) {
 			this.templateResolvers = templateResolvers;
 			this.dialects = dialectsProvider.getIfAvailable();
 		}
 
 		@Bean
-		public SpringTemplateEngine templateEngine() {
-			SpringTemplateEngine engine = new SpringTemplateEngine();
+		@ConditionalOnMissingBean(ISpringWebFluxTemplateEngine.class)
+		public SpringWebFluxTemplateEngine templateEngine() {
+			SpringWebFluxTemplateEngine engine = new SpringWebFluxTemplateEngine();
 			for (ITemplateResolver templateResolver : this.templateResolvers) {
 				engine.addTemplateResolver(templateResolver);
 			}
@@ -195,6 +243,38 @@ public class ThymeleafAutoConfiguration {
 			}
 			return engine;
 		}
+	}
+
+	@Configuration
+	@ConditionalOnWebApplication(type = Type.REACTIVE)
+	@ConditionalOnProperty(name = , matchIfMissing = true)
+	static class ThymeleafWebFluxConfiguration {
+
+		private final ThymeleafProperties properties;
+
+
+		ThymeleafWebFluxConfiguration(ThymeleafProperties properties) {
+			this.properties = properties;
+		}
+
+		@Bean
+		@ConditionalOnMissingBean(name = )
+		public ThymeleafReactiveViewResolver thymeleafViewResolver(ISpringWebFluxTemplateEngine templateEngine) {
+
+			ThymeleafReactiveViewResolver resolver = new ThymeleafReactiveViewResolver();
+			resolver.setTemplateEngine(templateEngine);
+			resolver.setDefaultCharset(this.properties.getEncoding());
+			resolver.setSupportedMediaTypes(this.properties.getReactive().getMediaTypes());
+			resolver.setExcludedViewNames(this.properties.getExcludedViewNames());
+			resolver.setViewNames(this.properties.getViewNames());
+			if (this.properties.getReactive().getMaxChunkSize() > 0) {
+				resolver.setResponseMaxChunkSizeBytes(this.properties.getReactive().getMaxChunkSize());
+			}
+			
+			
+			resolver.setOrder(Ordered.LOWEST_PRECEDENCE - 5);
+			return resolver;
+		}
 
 	}
 
@@ -223,7 +303,7 @@ public class ThymeleafAutoConfiguration {
 	}
 
 	@Configuration
-	@ConditionalOnClass({ SpringSecurityDialect.class })
+	@ConditionalOnClass({SpringSecurityDialect.class})
 	protected static class ThymeleafSecurityDialectConfiguration {
 
 		@Bean
@@ -246,17 +326,4 @@ public class ThymeleafAutoConfiguration {
 
 	}
 
-	@Configuration
-	@ConditionalOnWebApplication(type = Type.SERVLET)
-	protected static class ThymeleafResourceHandlingConfig {
-
-		@Bean
-		@ConditionalOnMissingBean
-		@ConditionalOnEnabledResourceChain
-		public ResourceUrlEncodingFilter resourceUrlEncodingFilter() {
-			return new ResourceUrlEncodingFilter();
-		}
-
-	}
-
 }

