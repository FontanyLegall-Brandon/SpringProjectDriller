@@ -0,0 +1,76 @@
+
+
+package org.springframework.boot.autoconfigure.data.couchbase;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.data.couchbase.config.AbstractCouchbaseDataConfiguration;
+import org.springframework.data.couchbase.config.BeanNames;
+import org.springframework.data.couchbase.config.CouchbaseConfigurer;
+import org.springframework.data.couchbase.core.CouchbaseTemplate;
+import org.springframework.data.couchbase.core.query.Consistency;
+import org.springframework.data.couchbase.repository.support.IndexManager;
+
+
+@Configuration
+@ConditionalOnMissingBean(AbstractCouchbaseDataConfiguration.class)
+@ConditionalOnBean(CouchbaseConfigurer.class)
+class SpringBootCouchbaseDataConfiguration extends AbstractCouchbaseDataConfiguration {
+
+	@Autowired
+	private CouchbaseDataProperties properties;
+
+	@Autowired(required = false)
+	private CouchbaseConfigurer couchbaseConfigurer;
+
+	@Override
+	protected CouchbaseConfigurer couchbaseConfigurer() {
+		return this.couchbaseConfigurer;
+	}
+
+	@Override
+	protected Consistency getDefaultConsistency() {
+		return this.properties.getConsistency();
+	}
+
+	@Override
+	@ConditionalOnMissingBean(name = BeanNames.COUCHBASE_TEMPLATE)
+	@Bean(name = BeanNames.COUCHBASE_TEMPLATE)
+	public CouchbaseTemplate couchbaseTemplate() throws Exception {
+		return super.couchbaseTemplate();
+	}
+
+	@Override
+	@ConditionalOnMissingBean(name = BeanNames.COUCHBASE_INDEX_MANAGER)
+	@Bean(name = BeanNames.COUCHBASE_INDEX_MANAGER)
+	public IndexManager indexManager() {
+		if (this.properties.isAutoIndex()) {
+			return new IndexManager(true, true, true);
+		}
+		else {
+			return new IndexManager(false, false, false);
+		}
+	}
+
+}

