{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisReactiveAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisReactiveAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -28,6 +28,7 @@ import org.springframework.context.annotation.Configuration;\n import org.springframework.core.io.ResourceLoader;\n import org.springframework.data.redis.connection.ReactiveRedisConnectionFactory;\n import org.springframework.data.redis.core.ReactiveRedisTemplate;\n+import org.springframework.data.redis.core.ReactiveStringRedisTemplate;\n import org.springframework.data.redis.serializer.JdkSerializationRedisSerializer;\n import org.springframework.data.redis.serializer.RedisSerializationContext;\n \n@@ -60,4 +61,12 @@ public class RedisReactiveAutoConfiguration {\n \t\t\t\tserializationContext);\n \t}\n \n+\t@Bean\n+\t@ConditionalOnMissingBean(name = "reactiveStringRedisTemplate")\n+\t@ConditionalOnBean(ReactiveRedisConnectionFactory.class)\n+\tpublic ReactiveStringRedisTemplate reactiveStringRedisTemplate(\n+\t\t\tReactiveRedisConnectionFactory reactiveRedisConnectionFactory) {\n+\t\treturn new ReactiveStringRedisTemplate(reactiveRedisConnectionFactory);\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.redis;\n\nimport reactor.core.publisher.Flux;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.data.redis.connection.ReactiveRedisConnectionFactory;\nimport org.springframework.data.redis.core.ReactiveRedisTemplate;\nimport org.springframework.data.redis.core.ReactiveStringRedisTemplate;\nimport org.springframework.data.redis.serializer.JdkSerializationRedisSerializer;\nimport org.springframework.data.redis.serializer.RedisSerializationContext;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s reactive Redis\n * support.\n *\n * @author Mark Paluch\n * @author Stephane Nicoll\n * @since 2.0.0\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass({ ReactiveRedisConnectionFactory.class, ReactiveRedisTemplate.class,\n\t\tFlux.class })\n@AutoConfigureAfter(RedisAutoConfiguration.class)\npublic class RedisReactiveAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "reactiveRedisTemplate")\n\t@ConditionalOnBean(ReactiveRedisConnectionFactory.class)\n\tpublic ReactiveRedisTemplate<Object, Object> reactiveRedisTemplate(\n\t\t\tReactiveRedisConnectionFactory reactiveRedisConnectionFactory,\n\t\t\tResourceLoader resourceLoader) {\n\t\tJdkSerializationRedisSerializer jdkSerializer = new JdkSerializationRedisSerializer(\n\t\t\t\tresourceLoader.getClassLoader());\n\t\tRedisSerializationContext<Object, Object> serializationContext = RedisSerializationContext\n\t\t\t\t.newSerializationContext().key(jdkSerializer).value(jdkSerializer)\n\t\t\t\t.hashKey(jdkSerializer).hashValue(jdkSerializer).build();\n\t\treturn new ReactiveRedisTemplate<>(reactiveRedisConnectionFactory,\n\t\t\t\tserializationContext);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "reactiveStringRedisTemplate")\n\t@ConditionalOnBean(ReactiveRedisConnectionFactory.class)\n\tpublic ReactiveStringRedisTemplate reactiveStringRedisTemplate(\n\t\t\tReactiveRedisConnectionFactory reactiveRedisConnectionFactory) {\n\t\treturn new ReactiveStringRedisTemplate(reactiveRedisConnectionFactory);\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.redis;\n\nimport reactor.core.publisher.Flux;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.data.redis.connection.ReactiveRedisConnectionFactory;\nimport org.springframework.data.redis.core.ReactiveRedisTemplate;\nimport org.springframework.data.redis.serializer.JdkSerializationRedisSerializer;\nimport org.springframework.data.redis.serializer.RedisSerializationContext;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s reactive Redis\n * support.\n *\n * @author Mark Paluch\n * @author Stephane Nicoll\n * @since 2.0.0\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass({ ReactiveRedisConnectionFactory.class, ReactiveRedisTemplate.class,\n\t\tFlux.class })\n@AutoConfigureAfter(RedisAutoConfiguration.class)\npublic class RedisReactiveAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "reactiveRedisTemplate")\n\t@ConditionalOnBean(ReactiveRedisConnectionFactory.class)\n\tpublic ReactiveRedisTemplate<Object, Object> reactiveRedisTemplate(\n\t\t\tReactiveRedisConnectionFactory reactiveRedisConnectionFactory,\n\t\t\tResourceLoader resourceLoader) {\n\t\tJdkSerializationRedisSerializer jdkSerializer = new JdkSerializationRedisSerializer(\n\t\t\t\tresourceLoader.getClassLoader());\n\t\tRedisSerializationContext<Object, Object> serializationContext = RedisSerializationContext\n\t\t\t\t.newSerializationContext().key(jdkSerializer).value(jdkSerializer)\n\t\t\t\t.hashKey(jdkSerializer).hashValue(jdkSerializer).build();\n\t\treturn new ReactiveRedisTemplate<>(reactiveRedisConnectionFactory,\n\t\t\t\tserializationContext);\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
