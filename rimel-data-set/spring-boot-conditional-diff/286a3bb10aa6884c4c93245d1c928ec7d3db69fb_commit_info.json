{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/gson/GsonAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/gson/GsonAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2014 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -18,18 +18,16 @@ package org.springframework.boot.autoconfigure.gson;\n \n import java.util.List;\n \n-import com.google.gson.FieldNamingPolicy;\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n-import com.google.gson.LongSerializationPolicy;\n \n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.context.properties.PropertyMapper;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.context.annotation.Primary;\n import org.springframework.core.Ordered;\n \n /**\n@@ -41,120 +39,65 @@ import org.springframework.core.Ordered;\n  */\n @Configuration\n @ConditionalOnClass(Gson.class)\n+@EnableConfigurationProperties(GsonProperties.class)\n public class GsonAutoConfiguration {\n \n-\t@Configuration\n-\tstatic class GsonConfiguration {\n-\n-\t\t@Bean\n-\t\t@Primary\n-\t\t@ConditionalOnMissingBean(Gson.class)\n-\t\tpublic Gson gson(GsonBuilder gsonBuilder) {\n-\t\t\treturn gsonBuilder.create();\n-\t\t}\n+\t@Bean\n+\tpublic GsonBuilder gsonBuilder(List<GsonBuilderCustomizer> customizers) {\n+\t\tGsonBuilder builder = new GsonBuilder();\n+\t\tcustomizers.forEach(c -> c.customize(builder));\n+\t\treturn builder;\n \t}\n \n-\t@Configuration\n-\tstatic class GsonBuilderConfiguration {\n-\n-\t\t@Bean\n-\t\tpublic GsonBuilder gsonBuilder(List<GsonBuilderCustomizer> customizers) {\n-\t\t\tfinal GsonBuilder gsonBuilder = new GsonBuilder();\n-\t\t\tcustomizers.forEach(c -> c.customize(gsonBuilder));\n-\t\t\treturn gsonBuilder;\n-\t\t}\n-\n+\t@Bean\n+\t@ConditionalOnMissingBean(Gson.class)\n+\tpublic Gson gson(GsonBuilder gsonBuilder) {\n+\t\treturn gsonBuilder.create();\n \t}\n \n-\t@Configuration\n-\t@EnableConfigurationProperties(GsonProperties.class)\n-\tstatic class GsonBuilderCustomizerConfiguration {\n-\n-\t\t@Bean\n-\t\tpublic StandardGsonBuilderCustomizer standardGsonBuilderCustomizer(\n-\t\t\t\tGsonProperties gsonProperties) {\n-\t\t\treturn new StandardGsonBuilderCustomizer(gsonProperties);\n-\t\t}\n-\n-\t\tprivate static final class StandardGsonBuilderCustomizer\n-\t\t\t\timplements GsonBuilderCustomizer, Ordered {\n-\n-\t\t\tprivate final GsonProperties properties;\n-\n-\t\t\tStandardGsonBuilderCustomizer(GsonProperties properties) {\n-\t\t\t\tthis.properties = properties;\n-\t\t\t}\n-\n-\t\t\t@Override\n-\t\t\tpublic int getOrder() {\n-\t\t\t\treturn 0;\n-\t\t\t}\n-\n-\t\t\t@Override\n-\t\t\tpublic void customize(GsonBuilder gsonBuilder) {\n-\n-\t\t\t\tboolean generateNonExecutableJson = this.properties\n-\t\t\t\t\t\t.isGenerateNonExecutableJson();\n-\t\t\t\tif (generateNonExecutableJson) {\n-\t\t\t\t\tgsonBuilder.generateNonExecutableJson();\n-\t\t\t\t}\n-\n-\t\t\t\tboolean excludeFieldsWithoutExposeAnnotation = this.properties\n-\t\t\t\t\t\t.isExcludeFieldsWithoutExposeAnnotation();\n-\t\t\t\tif (excludeFieldsWithoutExposeAnnotation) {\n-\t\t\t\t\tgsonBuilder.excludeFieldsWithoutExposeAnnotation();\n-\t\t\t\t}\n-\n-\t\t\t\tboolean serializeNulls = this.properties.isSerializeNulls();\n-\t\t\t\tif (serializeNulls) {\n-\t\t\t\t\tgsonBuilder.serializeNulls();\n-\t\t\t\t}\n-\n-\t\t\t\tboolean enableComplexMapKeySerialization = this.properties\n-\t\t\t\t\t\t.isEnableComplexMapKeySerialization();\n-\t\t\t\tif (enableComplexMapKeySerialization) {\n-\t\t\t\t\tgsonBuilder.enableComplexMapKeySerialization();\n-\t\t\t\t}\n-\n-\t\t\t\tboolean disableInnerClassSerialization = this.properties\n-\t\t\t\t\t\t.isDisableInnerClassSerialization();\n-\t\t\t\tif (disableInnerClassSerialization) {\n-\t\t\t\t\tgsonBuilder.disableInnerClassSerialization();\n-\t\t\t\t}\n-\n-\t\t\t\tLongSerializationPolicy longSerializationPolicy = this.properties\n-\t\t\t\t\t\t.getLongSerializationPolicy();\n-\t\t\t\tif (longSerializationPolicy != null) {\n-\t\t\t\t\tgsonBuilder.setLongSerializationPolicy(longSerializationPolicy);\n-\t\t\t\t}\n+\t@Bean\n+\tpublic StandardGsonBuilderCustomizer standardGsonBuilderCustomizer(\n+\t\t\tGsonProperties gsonProperties) {\n+\t\treturn new StandardGsonBuilderCustomizer(gsonProperties);\n+\t}\n \n-\t\t\t\tFieldNamingPolicy fieldNamingPolicy = this.properties\n-\t\t\t\t\t\t.getFieldNamingPolicy();\n-\t\t\t\tif (fieldNamingPolicy != null) {\n-\t\t\t\t\tgsonBuilder.setFieldNamingPolicy(fieldNamingPolicy);\n-\t\t\t\t}\n+\tprivate static final class StandardGsonBuilderCustomizer\n+\t\t\timplements GsonBuilderCustomizer, Ordered {\n \n-\t\t\t\tboolean prettyPrinting = this.properties.isPrettyPrinting();\n-\t\t\t\tif (prettyPrinting) {\n-\t\t\t\t\tgsonBuilder.setPrettyPrinting();\n-\t\t\t\t}\n+\t\tprivate final GsonProperties properties;\n \n-\t\t\t\tboolean isLenient = this.properties.isLenient();\n-\t\t\t\tif (isLenient) {\n-\t\t\t\t\tgsonBuilder.setLenient();\n-\t\t\t\t}\n+\t\tStandardGsonBuilderCustomizer(GsonProperties properties) {\n+\t\t\tthis.properties = properties;\n+\t\t}\n \n-\t\t\t\tboolean disableHtmlEscaping = this.properties.isDisableHtmlEscaping();\n-\t\t\t\tif (disableHtmlEscaping) {\n-\t\t\t\t\tgsonBuilder.disableHtmlEscaping();\n-\t\t\t\t}\n+\t\t@Override\n+\t\tpublic int getOrder() {\n+\t\t\treturn 0;\n+\t\t}\n \n-\t\t\t\tString dateFormat = this.properties.getDateFormat();\n-\t\t\t\tif (dateFormat != null) {\n-\t\t\t\t\tgsonBuilder.setDateFormat(dateFormat);\n-\t\t\t\t}\n-\t\t\t}\n+\t\t@Override\n+\t\tpublic void customize(GsonBuilder builder) {\n+\t\t\tGsonProperties properties = this.properties;\n+\t\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n+\t\t\tmap.from(properties::getGenerateNonExecutableJson)\n+\t\t\t\t\t.toCall(builder::generateNonExecutableJson);\n+\t\t\tmap.from(properties::getExcludeFieldsWithoutExposeAnnotation)\n+\t\t\t\t\t.toCall(builder::excludeFieldsWithoutExposeAnnotation);\n+\t\t\tmap.from(properties::getSerializeNulls).toCall(builder::serializeNulls);\n+\t\t\tmap.from(properties::getEnableComplexMapKeySerialization)\n+\t\t\t\t\t.toCall(builder::enableComplexMapKeySerialization);\n+\t\t\tmap.from(properties::getDisableInnerClassSerialization)\n+\t\t\t\t\t.toCall(builder::disableInnerClassSerialization);\n+\t\t\tmap.from(properties::getLongSerializationPolicy)\n+\t\t\t\t\t.to(builder::setLongSerializationPolicy);\n+\t\t\tmap.from(properties::getFieldNamingPolicy).to(builder::setFieldNamingPolicy);\n+\t\t\tmap.from(properties::getPrettyPrinting).toCall(builder::setPrettyPrinting);\n+\t\t\tmap.from(properties::getLenient).toCall(builder::setLenient);\n+\t\t\tmap.from(properties::getDisableHtmlEscaping)\n+\t\t\t\t\t.toCall(builder::disableHtmlEscaping);\n+\t\t\tmap.from(properties::getDateFormat).to(builder::setDateFormat);\n \t\t}\n+\n \t}\n \n }\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.gson;\n\nimport java.util.List;\n\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.context.properties.PropertyMapper;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Gson.\n *\n * @author David Liu\n * @author Ivan Golovko\n * @since 1.2.0\n */\n@Configuration\n@ConditionalOnClass(Gson.class)\n@EnableConfigurationProperties(GsonProperties.class)\npublic class GsonAutoConfiguration {\n\n\t@Bean\n\tpublic GsonBuilder gsonBuilder(List<GsonBuilderCustomizer> customizers) {\n\t\tGsonBuilder builder = new GsonBuilder();\n\t\tcustomizers.forEach(c -> c.customize(builder));\n\t\treturn builder;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(Gson.class)\n\tpublic Gson gson(GsonBuilder gsonBuilder) {\n\t\treturn gsonBuilder.create();\n\t}\n\n\t@Bean\n\tpublic StandardGsonBuilderCustomizer standardGsonBuilderCustomizer(\n\t\t\tGsonProperties gsonProperties) {\n\t\treturn new StandardGsonBuilderCustomizer(gsonProperties);\n\t}\n\n\tprivate static final class StandardGsonBuilderCustomizer\n\t\t\timplements GsonBuilderCustomizer, Ordered {\n\n\t\tprivate final GsonProperties properties;\n\n\t\tStandardGsonBuilderCustomizer(GsonProperties properties) {\n\t\t\tthis.properties = properties;\n\t\t}\n\n\t\t@Override\n\t\tpublic int getOrder() {\n\t\t\treturn 0;\n\t\t}\n\n\t\t@Override\n\t\tpublic void customize(GsonBuilder builder) {\n\t\t\tGsonProperties properties = this.properties;\n\t\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\t\tmap.from(properties::getGenerateNonExecutableJson)\n\t\t\t\t\t.toCall(builder::generateNonExecutableJson);\n\t\t\tmap.from(properties::getExcludeFieldsWithoutExposeAnnotation)\n\t\t\t\t\t.toCall(builder::excludeFieldsWithoutExposeAnnotation);\n\t\t\tmap.from(properties::getSerializeNulls).toCall(builder::serializeNulls);\n\t\t\tmap.from(properties::getEnableComplexMapKeySerialization)\n\t\t\t\t\t.toCall(builder::enableComplexMapKeySerialization);\n\t\t\tmap.from(properties::getDisableInnerClassSerialization)\n\t\t\t\t\t.toCall(builder::disableInnerClassSerialization);\n\t\t\tmap.from(properties::getLongSerializationPolicy)\n\t\t\t\t\t.to(builder::setLongSerializationPolicy);\n\t\t\tmap.from(properties::getFieldNamingPolicy).to(builder::setFieldNamingPolicy);\n\t\t\tmap.from(properties::getPrettyPrinting).toCall(builder::setPrettyPrinting);\n\t\t\tmap.from(properties::getLenient).toCall(builder::setLenient);\n\t\t\tmap.from(properties::getDisableHtmlEscaping)\n\t\t\t\t\t.toCall(builder::disableHtmlEscaping);\n\t\t\tmap.from(properties::getDateFormat).to(builder::setDateFormat);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.gson;\n\nimport java.util.List;\n\nimport com.google.gson.FieldNamingPolicy;\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\nimport com.google.gson.LongSerializationPolicy;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.core.Ordered;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Gson.\n *\n * @author David Liu\n * @author Ivan Golovko\n * @since 1.2.0\n */\n@Configuration\n@ConditionalOnClass(Gson.class)\npublic class GsonAutoConfiguration {\n\n\t@Configuration\n\tstatic class GsonConfiguration {\n\n\t\t@Bean\n\t\t@Primary\n\t\t@ConditionalOnMissingBean(Gson.class)\n\t\tpublic Gson gson(GsonBuilder gsonBuilder) {\n\t\t\treturn gsonBuilder.create();\n\t\t}\n\t}\n\n\t@Configuration\n\tstatic class GsonBuilderConfiguration {\n\n\t\t@Bean\n\t\tpublic GsonBuilder gsonBuilder(List<GsonBuilderCustomizer> customizers) {\n\t\t\tfinal GsonBuilder gsonBuilder = new GsonBuilder();\n\t\t\tcustomizers.forEach(c -> c.customize(gsonBuilder));\n\t\t\treturn gsonBuilder;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@EnableConfigurationProperties(GsonProperties.class)\n\tstatic class GsonBuilderCustomizerConfiguration {\n\n\t\t@Bean\n\t\tpublic StandardGsonBuilderCustomizer standardGsonBuilderCustomizer(\n\t\t\t\tGsonProperties gsonProperties) {\n\t\t\treturn new StandardGsonBuilderCustomizer(gsonProperties);\n\t\t}\n\n\t\tprivate static final class StandardGsonBuilderCustomizer\n\t\t\t\timplements GsonBuilderCustomizer, Ordered {\n\n\t\t\tprivate final GsonProperties properties;\n\n\t\t\tStandardGsonBuilderCustomizer(GsonProperties properties) {\n\t\t\t\tthis.properties = properties;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic int getOrder() {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void customize(GsonBuilder gsonBuilder) {\n\n\t\t\t\tboolean generateNonExecutableJson = this.properties\n\t\t\t\t\t\t.isGenerateNonExecutableJson();\n\t\t\t\tif (generateNonExecutableJson) {\n\t\t\t\t\tgsonBuilder.generateNonExecutableJson();\n\t\t\t\t}\n\n\t\t\t\tboolean excludeFieldsWithoutExposeAnnotation = this.properties\n\t\t\t\t\t\t.isExcludeFieldsWithoutExposeAnnotation();\n\t\t\t\tif (excludeFieldsWithoutExposeAnnotation) {\n\t\t\t\t\tgsonBuilder.excludeFieldsWithoutExposeAnnotation();\n\t\t\t\t}\n\n\t\t\t\tboolean serializeNulls = this.properties.isSerializeNulls();\n\t\t\t\tif (serializeNulls) {\n\t\t\t\t\tgsonBuilder.serializeNulls();\n\t\t\t\t}\n\n\t\t\t\tboolean enableComplexMapKeySerialization = this.properties\n\t\t\t\t\t\t.isEnableComplexMapKeySerialization();\n\t\t\t\tif (enableComplexMapKeySerialization) {\n\t\t\t\t\tgsonBuilder.enableComplexMapKeySerialization();\n\t\t\t\t}\n\n\t\t\t\tboolean disableInnerClassSerialization = this.properties\n\t\t\t\t\t\t.isDisableInnerClassSerialization();\n\t\t\t\tif (disableInnerClassSerialization) {\n\t\t\t\t\tgsonBuilder.disableInnerClassSerialization();\n\t\t\t\t}\n\n\t\t\t\tLongSerializationPolicy longSerializationPolicy = this.properties\n\t\t\t\t\t\t.getLongSerializationPolicy();\n\t\t\t\tif (longSerializationPolicy != null) {\n\t\t\t\t\tgsonBuilder.setLongSerializationPolicy(longSerializationPolicy);\n\t\t\t\t}\n\n\t\t\t\tFieldNamingPolicy fieldNamingPolicy = this.properties\n\t\t\t\t\t\t.getFieldNamingPolicy();\n\t\t\t\tif (fieldNamingPolicy != null) {\n\t\t\t\t\tgsonBuilder.setFieldNamingPolicy(fieldNamingPolicy);\n\t\t\t\t}\n\n\t\t\t\tboolean prettyPrinting = this.properties.isPrettyPrinting();\n\t\t\t\tif (prettyPrinting) {\n\t\t\t\t\tgsonBuilder.setPrettyPrinting();\n\t\t\t\t}\n\n\t\t\t\tboolean isLenient = this.properties.isLenient();\n\t\t\t\tif (isLenient) {\n\t\t\t\t\tgsonBuilder.setLenient();\n\t\t\t\t}\n\n\t\t\t\tboolean disableHtmlEscaping = this.properties.isDisableHtmlEscaping();\n\t\t\t\tif (disableHtmlEscaping) {\n\t\t\t\t\tgsonBuilder.disableHtmlEscaping();\n\t\t\t\t}\n\n\t\t\t\tString dateFormat = this.properties.getDateFormat();\n\t\t\t\tif (dateFormat != null) {\n\t\t\t\t\tgsonBuilder.setDateFormat(dateFormat);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
