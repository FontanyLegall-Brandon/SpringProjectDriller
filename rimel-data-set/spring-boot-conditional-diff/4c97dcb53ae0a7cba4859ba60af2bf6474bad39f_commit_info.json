{'_old_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -26,6 +26,7 @@ import javax.sql.DataSource;\n import com.couchbase.client.java.Bucket;\n import com.datastax.driver.core.Cluster;\n import org.apache.solr.client.solrj.SolrClient;\n+import org.neo4j.ogm.session.SessionFactory;\n \n import org.springframework.amqp.rabbit.core.RabbitTemplate;\n import org.springframework.beans.factory.InitializingBean;\n@@ -42,6 +43,7 @@ import org.springframework.boot.actuate.health.JmsHealthIndicator;\n import org.springframework.boot.actuate.health.LdapHealthIndicator;\n import org.springframework.boot.actuate.health.MailHealthIndicator;\n import org.springframework.boot.actuate.health.MongoHealthIndicator;\n+import org.springframework.boot.actuate.health.Neo4jHealthIndicator;\n import org.springframework.boot.actuate.health.OrderedHealthAggregator;\n import org.springframework.boot.actuate.health.RabbitHealthIndicator;\n import org.springframework.boot.actuate.health.RedisHealthIndicator;\n@@ -59,6 +61,7 @@ import org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoCo\n import org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration;\n import org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration;\n import org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration;\n+import org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration;\n import org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration;\n import org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration;\n import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\n@@ -91,6 +94,7 @@ import org.springframework.mail.javamail.JavaMailSenderImpl;\n  * @author Phillip Webb\n  * @author Tommy Ludwig\n  * @author Eddú Meléndez\n+ * @author Eric Spiegelberg\n  * @since 1.1.0\n  */\n @Configuration\n@@ -102,7 +106,7 @@ import org.springframework.mail.javamail.JavaMailSenderImpl;\n \t\tLdapDataAutoConfiguration.class, MailSenderAutoConfiguration.class,\n \t\tMongoAutoConfiguration.class, MongoDataAutoConfiguration.class,\n \t\tRabbitAutoConfiguration.class, RedisAutoConfiguration.class,\n-\t\tSolrAutoConfiguration.class })\n+\t\tSolrAutoConfiguration.class, Neo4jDataAutoConfiguration.class })\n @EnableConfigurationProperties({ HealthIndicatorProperties.class })\n @Import({\n \t\tElasticsearchHealthIndicatorConfiguration.ElasticsearchClientHealthIndicatorConfiguration.class,\n@@ -257,6 +261,28 @@ public class HealthIndicatorAutoConfiguration {\n \n \t}\n \n+\t@Configuration\n+\t@ConditionalOnClass(SessionFactory.class)\n+\t@ConditionalOnBean(SessionFactory.class)\n+\t@ConditionalOnEnabledHealthIndicator("neo4j")\n+\tpublic static class Neo4jHealthIndicatorConfiguration extends\n+\t\t\tCompositeHealthIndicatorConfiguration<Neo4jHealthIndicator, SessionFactory> {\n+\n+\t\tprivate final Map<String, SessionFactory> sessionFactories;\n+\n+\t\tpublic Neo4jHealthIndicatorConfiguration(\n+\t\t\t\tMap<String, SessionFactory> sessionFactories) {\n+\t\t\tthis.sessionFactories = sessionFactories;\n+\t\t}\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(name = "neo4jHealthIndicator")\n+\t\tpublic HealthIndicator neo4jHealthIndicator() {\n+\t\t\treturn createHealthIndicator(this.sessionFactories);\n+\t\t}\n+\n+\t}\n+\n \t@Configuration\n \t@ConditionalOnBean(MongoTemplate.class)\n \t@ConditionalOnEnabledHealthIndicator("mongo")\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport java.util.Collection;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\nimport javax.jms.ConnectionFactory;\nimport javax.sql.DataSource;\n\nimport com.couchbase.client.java.Bucket;\nimport com.datastax.driver.core.Cluster;\nimport org.apache.solr.client.solrj.SolrClient;\nimport org.neo4j.ogm.session.SessionFactory;\n\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.actuate.health.ApplicationHealthIndicator;\nimport org.springframework.boot.actuate.health.CassandraHealthIndicator;\nimport org.springframework.boot.actuate.health.CouchbaseHealthIndicator;\nimport org.springframework.boot.actuate.health.DataSourceHealthIndicator;\nimport org.springframework.boot.actuate.health.DiskSpaceHealthIndicator;\nimport org.springframework.boot.actuate.health.DiskSpaceHealthIndicatorProperties;\nimport org.springframework.boot.actuate.health.HealthAggregator;\nimport org.springframework.boot.actuate.health.HealthIndicator;\nimport org.springframework.boot.actuate.health.JmsHealthIndicator;\nimport org.springframework.boot.actuate.health.LdapHealthIndicator;\nimport org.springframework.boot.actuate.health.MailHealthIndicator;\nimport org.springframework.boot.actuate.health.MongoHealthIndicator;\nimport org.springframework.boot.actuate.health.Neo4jHealthIndicator;\nimport org.springframework.boot.actuate.health.OrderedHealthAggregator;\nimport org.springframework.boot.actuate.health.RabbitHealthIndicator;\nimport org.springframework.boot.actuate.health.RedisHealthIndicator;\nimport org.springframework.boot.actuate.health.SolrHealthIndicator;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration;\nimport org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration;\nimport org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration;\nimport org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration;\nimport org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration;\nimport org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration;\nimport org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration;\nimport org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration;\nimport org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadata;\nimport org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvider;\nimport org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProviders;\nimport org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration;\nimport org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration;\nimport org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration;\nimport org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.data.cassandra.core.CassandraOperations;\nimport org.springframework.data.couchbase.core.CouchbaseOperations;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;\nimport org.springframework.ldap.core.LdapOperations;\nimport org.springframework.mail.javamail.JavaMailSenderImpl;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link HealthIndicator}s.\n *\n * @author Christian Dupuis\n * @author Andy Wilkinson\n * @author Stephane Nicoll\n * @author Phillip Webb\n * @author Tommy Ludwig\n * @author Eddú Meléndez\n * @author Eric Spiegelberg\n * @since 1.1.0\n */\n@Configuration\n@AutoConfigureBefore({ EndpointAutoConfiguration.class })\n@AutoConfigureAfter({ CassandraAutoConfiguration.class,\n\t\tCassandraDataAutoConfiguration.class, CouchbaseDataAutoConfiguration.class,\n\t\tDataSourceAutoConfiguration.class, ElasticsearchAutoConfiguration.class,\n\t\tJestAutoConfiguration.class, JmsAutoConfiguration.class,\n\t\tLdapDataAutoConfiguration.class, MailSenderAutoConfiguration.class,\n\t\tMongoAutoConfiguration.class, MongoDataAutoConfiguration.class,\n\t\tRabbitAutoConfiguration.class, RedisAutoConfiguration.class,\n\t\tSolrAutoConfiguration.class, Neo4jDataAutoConfiguration.class })\n@EnableConfigurationProperties({ HealthIndicatorProperties.class })\n@Import({\n\t\tElasticsearchHealthIndicatorConfiguration.ElasticsearchClientHealthIndicatorConfiguration.class,\n\t\tElasticsearchHealthIndicatorConfiguration.ElasticsearchJestHealthIndicatorConfiguration.class })\npublic class HealthIndicatorAutoConfiguration {\n\n\tprivate final HealthIndicatorProperties properties;\n\n\tpublic HealthIndicatorAutoConfiguration(HealthIndicatorProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(HealthAggregator.class)\n\tpublic OrderedHealthAggregator healthAggregator() {\n\t\tOrderedHealthAggregator healthAggregator = new OrderedHealthAggregator();\n\t\tif (this.properties.getOrder() != null) {\n\t\t\thealthAggregator.setStatusOrder(this.properties.getOrder());\n\t\t}\n\t\treturn healthAggregator;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(HealthIndicator.class)\n\tpublic ApplicationHealthIndicator applicationHealthIndicator() {\n\t\treturn new ApplicationHealthIndicator();\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ CassandraOperations.class, Cluster.class })\n\t@ConditionalOnBean(CassandraOperations.class)\n\t@ConditionalOnEnabledHealthIndicator("cassandra")\n\tpublic static class CassandraHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<CassandraHealthIndicator, CassandraOperations> {\n\n\t\tprivate final Map<String, CassandraOperations> cassandraOperations;\n\n\t\tpublic CassandraHealthIndicatorConfiguration(\n\t\t\t\tMap<String, CassandraOperations> cassandraOperations) {\n\t\t\tthis.cassandraOperations = cassandraOperations;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "cassandraHealthIndicator")\n\t\tpublic HealthIndicator cassandraHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.cassandraOperations);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ CouchbaseOperations.class, Bucket.class })\n\t@ConditionalOnBean(CouchbaseOperations.class)\n\t@ConditionalOnEnabledHealthIndicator("couchbase")\n\tpublic static class CouchbaseHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<CouchbaseHealthIndicator, CouchbaseOperations> {\n\n\t\tprivate final Map<String, CouchbaseOperations> couchbaseOperations;\n\n\t\tpublic CouchbaseHealthIndicatorConfiguration(\n\t\t\t\tMap<String, CouchbaseOperations> couchbaseOperations) {\n\t\t\tthis.couchbaseOperations = couchbaseOperations;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "couchbaseHealthIndicator")\n\t\tpublic HealthIndicator couchbaseHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.couchbaseOperations);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ JdbcTemplate.class, AbstractRoutingDataSource.class })\n\t@ConditionalOnBean(DataSource.class)\n\t@ConditionalOnEnabledHealthIndicator("db")\n\tpublic static class DataSourcesHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n\t\t\timplements InitializingBean {\n\n\t\tprivate final Map<String, DataSource> dataSources;\n\n\t\tprivate final Collection<DataSourcePoolMetadataProvider> metadataProviders;\n\n\t\tprivate DataSourcePoolMetadataProvider poolMetadataProvider;\n\n\t\tpublic DataSourcesHealthIndicatorConfiguration(\n\t\t\t\tObjectProvider<Map<String, DataSource>> dataSources,\n\t\t\t\tObjectProvider<Collection<DataSourcePoolMetadataProvider>> metadataProviders) {\n\t\t\tthis.dataSources = filterDataSources(dataSources.getIfAvailable());\n\t\t\tthis.metadataProviders = metadataProviders.getIfAvailable();\n\t\t}\n\n\t\tprivate Map<String, DataSource> filterDataSources(\n\t\t\t\tMap<String, DataSource> candidates) {\n\t\t\tif (candidates == null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tMap<String, DataSource> dataSources = new LinkedHashMap<>();\n\t\t\tfor (Map.Entry<String, DataSource> entry : candidates.entrySet()) {\n\t\t\t\tif (!(entry.getValue() instanceof AbstractRoutingDataSource)) {\n\t\t\t\t\tdataSources.put(entry.getKey(), entry.getValue());\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn dataSources;\n\t\t}\n\n\t\t@Override\n\t\tpublic void afterPropertiesSet() throws Exception {\n\t\t\tthis.poolMetadataProvider = new DataSourcePoolMetadataProviders(\n\t\t\t\t\tthis.metadataProviders);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "dbHealthIndicator")\n\t\tpublic HealthIndicator dbHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.dataSources);\n\t\t}\n\n\t\t@Override\n\t\tprotected DataSourceHealthIndicator createHealthIndicator(DataSource source) {\n\t\t\treturn new DataSourceHealthIndicator(source, getValidationQuery(source));\n\t\t}\n\n\t\tprivate String getValidationQuery(DataSource source) {\n\t\t\tDataSourcePoolMetadata poolMetadata = this.poolMetadataProvider\n\t\t\t\t\t.getDataSourcePoolMetadata(source);\n\t\t\treturn (poolMetadata == null ? null : poolMetadata.getValidationQuery());\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(LdapOperations.class)\n\t@ConditionalOnBean(LdapOperations.class)\n\t@ConditionalOnEnabledHealthIndicator("ldap")\n\tpublic static class LdapHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<LdapHealthIndicator, LdapOperations> {\n\n\t\tprivate final Map<String, LdapOperations> ldapOperations;\n\n\t\tpublic LdapHealthIndicatorConfiguration(\n\t\t\t\tMap<String, LdapOperations> ldapOperations) {\n\t\t\tthis.ldapOperations = ldapOperations;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "ldapHealthIndicator")\n\t\tpublic HealthIndicator ldapHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.ldapOperations);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(SessionFactory.class)\n\t@ConditionalOnBean(SessionFactory.class)\n\t@ConditionalOnEnabledHealthIndicator("neo4j")\n\tpublic static class Neo4jHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<Neo4jHealthIndicator, SessionFactory> {\n\n\t\tprivate final Map<String, SessionFactory> sessionFactories;\n\n\t\tpublic Neo4jHealthIndicatorConfiguration(\n\t\t\t\tMap<String, SessionFactory> sessionFactories) {\n\t\t\tthis.sessionFactories = sessionFactories;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "neo4jHealthIndicator")\n\t\tpublic HealthIndicator neo4jHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.sessionFactories);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(MongoTemplate.class)\n\t@ConditionalOnEnabledHealthIndicator("mongo")\n\tpublic static class MongoHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {\n\n\t\tprivate final Map<String, MongoTemplate> mongoTemplates;\n\n\t\tpublic MongoHealthIndicatorConfiguration(\n\t\t\t\tMap<String, MongoTemplate> mongoTemplates) {\n\t\t\tthis.mongoTemplates = mongoTemplates;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "mongoHealthIndicator")\n\t\tpublic HealthIndicator mongoHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.mongoTemplates);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(RedisConnectionFactory.class)\n\t@ConditionalOnEnabledHealthIndicator("redis")\n\tpublic static class RedisHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {\n\n\t\tprivate final Map<String, RedisConnectionFactory> redisConnectionFactories;\n\n\t\tpublic RedisHealthIndicatorConfiguration(\n\t\t\t\tMap<String, RedisConnectionFactory> redisConnectionFactories) {\n\t\t\tthis.redisConnectionFactories = redisConnectionFactories;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "redisHealthIndicator")\n\t\tpublic HealthIndicator redisHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.redisConnectionFactories);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(RabbitTemplate.class)\n\t@ConditionalOnEnabledHealthIndicator("rabbit")\n\tpublic static class RabbitHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {\n\n\t\tprivate final Map<String, RabbitTemplate> rabbitTemplates;\n\n\t\tpublic RabbitHealthIndicatorConfiguration(\n\t\t\t\tMap<String, RabbitTemplate> rabbitTemplates) {\n\t\t\tthis.rabbitTemplates = rabbitTemplates;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "rabbitHealthIndicator")\n\t\tpublic HealthIndicator rabbitHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.rabbitTemplates);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(SolrClient.class)\n\t@ConditionalOnEnabledHealthIndicator("solr")\n\tpublic static class SolrHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrClient> {\n\n\t\tprivate final Map<String, SolrClient> solrClients;\n\n\t\tpublic SolrHealthIndicatorConfiguration(Map<String, SolrClient> solrClients) {\n\t\t\tthis.solrClients = solrClients;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "solrHealthIndicator")\n\t\tpublic HealthIndicator solrHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.solrClients);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnEnabledHealthIndicator("diskspace")\n\tpublic static class DiskSpaceHealthIndicatorConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "diskSpaceHealthIndicator")\n\t\tpublic DiskSpaceHealthIndicator diskSpaceHealthIndicator(\n\t\t\t\tDiskSpaceHealthIndicatorProperties properties) {\n\t\t\treturn new DiskSpaceHealthIndicator(properties);\n\t\t}\n\n\t\t@Bean\n\t\tpublic DiskSpaceHealthIndicatorProperties diskSpaceHealthIndicatorProperties() {\n\t\t\treturn new DiskSpaceHealthIndicatorProperties();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(JavaMailSenderImpl.class)\n\t@ConditionalOnEnabledHealthIndicator("mail")\n\tpublic static class MailHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {\n\n\t\tprivate final Map<String, JavaMailSenderImpl> mailSenders;\n\n\t\tpublic MailHealthIndicatorConfiguration(\n\t\t\t\tObjectProvider<Map<String, JavaMailSenderImpl>> mailSenders) {\n\t\t\tthis.mailSenders = mailSenders.getIfAvailable();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "mailHealthIndicator")\n\t\tpublic HealthIndicator mailHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.mailSenders);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(ConnectionFactory.class)\n\t@ConditionalOnEnabledHealthIndicator("jms")\n\tpublic static class JmsHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {\n\n\t\tprivate final Map<String, ConnectionFactory> connectionFactories;\n\n\t\tpublic JmsHealthIndicatorConfiguration(\n\t\t\t\tObjectProvider<Map<String, ConnectionFactory>> connectionFactories) {\n\t\t\tthis.connectionFactories = connectionFactories.getIfAvailable();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "jmsHealthIndicator")\n\t\tpublic HealthIndicator jmsHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.connectionFactories);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport java.util.Collection;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\nimport javax.jms.ConnectionFactory;\nimport javax.sql.DataSource;\n\nimport com.couchbase.client.java.Bucket;\nimport com.datastax.driver.core.Cluster;\nimport org.apache.solr.client.solrj.SolrClient;\n\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.actuate.health.ApplicationHealthIndicator;\nimport org.springframework.boot.actuate.health.CassandraHealthIndicator;\nimport org.springframework.boot.actuate.health.CouchbaseHealthIndicator;\nimport org.springframework.boot.actuate.health.DataSourceHealthIndicator;\nimport org.springframework.boot.actuate.health.DiskSpaceHealthIndicator;\nimport org.springframework.boot.actuate.health.DiskSpaceHealthIndicatorProperties;\nimport org.springframework.boot.actuate.health.HealthAggregator;\nimport org.springframework.boot.actuate.health.HealthIndicator;\nimport org.springframework.boot.actuate.health.JmsHealthIndicator;\nimport org.springframework.boot.actuate.health.LdapHealthIndicator;\nimport org.springframework.boot.actuate.health.MailHealthIndicator;\nimport org.springframework.boot.actuate.health.MongoHealthIndicator;\nimport org.springframework.boot.actuate.health.OrderedHealthAggregator;\nimport org.springframework.boot.actuate.health.RabbitHealthIndicator;\nimport org.springframework.boot.actuate.health.RedisHealthIndicator;\nimport org.springframework.boot.actuate.health.SolrHealthIndicator;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration;\nimport org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration;\nimport org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration;\nimport org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration;\nimport org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration;\nimport org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration;\nimport org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration;\nimport org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadata;\nimport org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvider;\nimport org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProviders;\nimport org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration;\nimport org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration;\nimport org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration;\nimport org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.data.cassandra.core.CassandraOperations;\nimport org.springframework.data.couchbase.core.CouchbaseOperations;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;\nimport org.springframework.ldap.core.LdapOperations;\nimport org.springframework.mail.javamail.JavaMailSenderImpl;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link HealthIndicator}s.\n *\n * @author Christian Dupuis\n * @author Andy Wilkinson\n * @author Stephane Nicoll\n * @author Phillip Webb\n * @author Tommy Ludwig\n * @author Eddú Meléndez\n * @since 1.1.0\n */\n@Configuration\n@AutoConfigureBefore({ EndpointAutoConfiguration.class })\n@AutoConfigureAfter({ CassandraAutoConfiguration.class,\n\t\tCassandraDataAutoConfiguration.class, CouchbaseDataAutoConfiguration.class,\n\t\tDataSourceAutoConfiguration.class, ElasticsearchAutoConfiguration.class,\n\t\tJestAutoConfiguration.class, JmsAutoConfiguration.class,\n\t\tLdapDataAutoConfiguration.class, MailSenderAutoConfiguration.class,\n\t\tMongoAutoConfiguration.class, MongoDataAutoConfiguration.class,\n\t\tRabbitAutoConfiguration.class, RedisAutoConfiguration.class,\n\t\tSolrAutoConfiguration.class })\n@EnableConfigurationProperties({ HealthIndicatorProperties.class })\n@Import({\n\t\tElasticsearchHealthIndicatorConfiguration.ElasticsearchClientHealthIndicatorConfiguration.class,\n\t\tElasticsearchHealthIndicatorConfiguration.ElasticsearchJestHealthIndicatorConfiguration.class })\npublic class HealthIndicatorAutoConfiguration {\n\n\tprivate final HealthIndicatorProperties properties;\n\n\tpublic HealthIndicatorAutoConfiguration(HealthIndicatorProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(HealthAggregator.class)\n\tpublic OrderedHealthAggregator healthAggregator() {\n\t\tOrderedHealthAggregator healthAggregator = new OrderedHealthAggregator();\n\t\tif (this.properties.getOrder() != null) {\n\t\t\thealthAggregator.setStatusOrder(this.properties.getOrder());\n\t\t}\n\t\treturn healthAggregator;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(HealthIndicator.class)\n\tpublic ApplicationHealthIndicator applicationHealthIndicator() {\n\t\treturn new ApplicationHealthIndicator();\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ CassandraOperations.class, Cluster.class })\n\t@ConditionalOnBean(CassandraOperations.class)\n\t@ConditionalOnEnabledHealthIndicator("cassandra")\n\tpublic static class CassandraHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<CassandraHealthIndicator, CassandraOperations> {\n\n\t\tprivate final Map<String, CassandraOperations> cassandraOperations;\n\n\t\tpublic CassandraHealthIndicatorConfiguration(\n\t\t\t\tMap<String, CassandraOperations> cassandraOperations) {\n\t\t\tthis.cassandraOperations = cassandraOperations;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "cassandraHealthIndicator")\n\t\tpublic HealthIndicator cassandraHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.cassandraOperations);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ CouchbaseOperations.class, Bucket.class })\n\t@ConditionalOnBean(CouchbaseOperations.class)\n\t@ConditionalOnEnabledHealthIndicator("couchbase")\n\tpublic static class CouchbaseHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<CouchbaseHealthIndicator, CouchbaseOperations> {\n\n\t\tprivate final Map<String, CouchbaseOperations> couchbaseOperations;\n\n\t\tpublic CouchbaseHealthIndicatorConfiguration(\n\t\t\t\tMap<String, CouchbaseOperations> couchbaseOperations) {\n\t\t\tthis.couchbaseOperations = couchbaseOperations;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "couchbaseHealthIndicator")\n\t\tpublic HealthIndicator couchbaseHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.couchbaseOperations);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ JdbcTemplate.class, AbstractRoutingDataSource.class })\n\t@ConditionalOnBean(DataSource.class)\n\t@ConditionalOnEnabledHealthIndicator("db")\n\tpublic static class DataSourcesHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n\t\t\timplements InitializingBean {\n\n\t\tprivate final Map<String, DataSource> dataSources;\n\n\t\tprivate final Collection<DataSourcePoolMetadataProvider> metadataProviders;\n\n\t\tprivate DataSourcePoolMetadataProvider poolMetadataProvider;\n\n\t\tpublic DataSourcesHealthIndicatorConfiguration(\n\t\t\t\tObjectProvider<Map<String, DataSource>> dataSources,\n\t\t\t\tObjectProvider<Collection<DataSourcePoolMetadataProvider>> metadataProviders) {\n\t\t\tthis.dataSources = filterDataSources(dataSources.getIfAvailable());\n\t\t\tthis.metadataProviders = metadataProviders.getIfAvailable();\n\t\t}\n\n\t\tprivate Map<String, DataSource> filterDataSources(\n\t\t\t\tMap<String, DataSource> candidates) {\n\t\t\tif (candidates == null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tMap<String, DataSource> dataSources = new LinkedHashMap<>();\n\t\t\tfor (Map.Entry<String, DataSource> entry : candidates.entrySet()) {\n\t\t\t\tif (!(entry.getValue() instanceof AbstractRoutingDataSource)) {\n\t\t\t\t\tdataSources.put(entry.getKey(), entry.getValue());\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn dataSources;\n\t\t}\n\n\t\t@Override\n\t\tpublic void afterPropertiesSet() throws Exception {\n\t\t\tthis.poolMetadataProvider = new DataSourcePoolMetadataProviders(\n\t\t\t\t\tthis.metadataProviders);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "dbHealthIndicator")\n\t\tpublic HealthIndicator dbHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.dataSources);\n\t\t}\n\n\t\t@Override\n\t\tprotected DataSourceHealthIndicator createHealthIndicator(DataSource source) {\n\t\t\treturn new DataSourceHealthIndicator(source, getValidationQuery(source));\n\t\t}\n\n\t\tprivate String getValidationQuery(DataSource source) {\n\t\t\tDataSourcePoolMetadata poolMetadata = this.poolMetadataProvider\n\t\t\t\t\t.getDataSourcePoolMetadata(source);\n\t\t\treturn (poolMetadata == null ? null : poolMetadata.getValidationQuery());\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(LdapOperations.class)\n\t@ConditionalOnBean(LdapOperations.class)\n\t@ConditionalOnEnabledHealthIndicator("ldap")\n\tpublic static class LdapHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<LdapHealthIndicator, LdapOperations> {\n\n\t\tprivate final Map<String, LdapOperations> ldapOperations;\n\n\t\tpublic LdapHealthIndicatorConfiguration(\n\t\t\t\tMap<String, LdapOperations> ldapOperations) {\n\t\t\tthis.ldapOperations = ldapOperations;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "ldapHealthIndicator")\n\t\tpublic HealthIndicator ldapHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.ldapOperations);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(MongoTemplate.class)\n\t@ConditionalOnEnabledHealthIndicator("mongo")\n\tpublic static class MongoHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {\n\n\t\tprivate final Map<String, MongoTemplate> mongoTemplates;\n\n\t\tpublic MongoHealthIndicatorConfiguration(\n\t\t\t\tMap<String, MongoTemplate> mongoTemplates) {\n\t\t\tthis.mongoTemplates = mongoTemplates;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "mongoHealthIndicator")\n\t\tpublic HealthIndicator mongoHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.mongoTemplates);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(RedisConnectionFactory.class)\n\t@ConditionalOnEnabledHealthIndicator("redis")\n\tpublic static class RedisHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {\n\n\t\tprivate final Map<String, RedisConnectionFactory> redisConnectionFactories;\n\n\t\tpublic RedisHealthIndicatorConfiguration(\n\t\t\t\tMap<String, RedisConnectionFactory> redisConnectionFactories) {\n\t\t\tthis.redisConnectionFactories = redisConnectionFactories;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "redisHealthIndicator")\n\t\tpublic HealthIndicator redisHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.redisConnectionFactories);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(RabbitTemplate.class)\n\t@ConditionalOnEnabledHealthIndicator("rabbit")\n\tpublic static class RabbitHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {\n\n\t\tprivate final Map<String, RabbitTemplate> rabbitTemplates;\n\n\t\tpublic RabbitHealthIndicatorConfiguration(\n\t\t\t\tMap<String, RabbitTemplate> rabbitTemplates) {\n\t\t\tthis.rabbitTemplates = rabbitTemplates;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "rabbitHealthIndicator")\n\t\tpublic HealthIndicator rabbitHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.rabbitTemplates);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(SolrClient.class)\n\t@ConditionalOnEnabledHealthIndicator("solr")\n\tpublic static class SolrHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrClient> {\n\n\t\tprivate final Map<String, SolrClient> solrClients;\n\n\t\tpublic SolrHealthIndicatorConfiguration(Map<String, SolrClient> solrClients) {\n\t\t\tthis.solrClients = solrClients;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "solrHealthIndicator")\n\t\tpublic HealthIndicator solrHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.solrClients);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnEnabledHealthIndicator("diskspace")\n\tpublic static class DiskSpaceHealthIndicatorConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "diskSpaceHealthIndicator")\n\t\tpublic DiskSpaceHealthIndicator diskSpaceHealthIndicator(\n\t\t\t\tDiskSpaceHealthIndicatorProperties properties) {\n\t\t\treturn new DiskSpaceHealthIndicator(properties);\n\t\t}\n\n\t\t@Bean\n\t\tpublic DiskSpaceHealthIndicatorProperties diskSpaceHealthIndicatorProperties() {\n\t\t\treturn new DiskSpaceHealthIndicatorProperties();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(JavaMailSenderImpl.class)\n\t@ConditionalOnEnabledHealthIndicator("mail")\n\tpublic static class MailHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {\n\n\t\tprivate final Map<String, JavaMailSenderImpl> mailSenders;\n\n\t\tpublic MailHealthIndicatorConfiguration(\n\t\t\t\tObjectProvider<Map<String, JavaMailSenderImpl>> mailSenders) {\n\t\t\tthis.mailSenders = mailSenders.getIfAvailable();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "mailHealthIndicator")\n\t\tpublic HealthIndicator mailHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.mailSenders);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(ConnectionFactory.class)\n\t@ConditionalOnEnabledHealthIndicator("jms")\n\tpublic static class JmsHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {\n\n\t\tprivate final Map<String, ConnectionFactory> connectionFactories;\n\n\t\tpublic JmsHealthIndicatorConfiguration(\n\t\t\t\tObjectProvider<Map<String, ConnectionFactory>> connectionFactories) {\n\t\t\tthis.connectionFactories = connectionFactories.getIfAvailable();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "jmsHealthIndicator")\n\t\tpublic HealthIndicator jmsHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.connectionFactories);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
