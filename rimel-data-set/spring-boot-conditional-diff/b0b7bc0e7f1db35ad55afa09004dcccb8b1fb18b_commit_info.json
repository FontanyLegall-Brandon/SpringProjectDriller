{'_old_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -33,6 +33,7 @@ import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n import org.springframework.boot.autoconfigure.security.AuthenticationManagerConfiguration;\n import org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration;\n import org.springframework.boot.autoconfigure.security.SecurityPrequisite;\n@@ -43,12 +44,12 @@ import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.core.Ordered;\n import org.springframework.core.annotation.Order;\n-import org.springframework.security.authentication.AuthenticationManager;\n import org.springframework.security.config.annotation.web.WebSecurityConfigurer;\n import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n import org.springframework.security.config.annotation.web.builders.WebSecurity;\n import org.springframework.security.config.annotation.web.builders.WebSecurity.IgnoredRequestConfigurer;\n import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;\n import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n import org.springframework.security.web.AuthenticationEntryPoint;\n import org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint;\n@@ -145,10 +146,17 @@ public class ManagementSecurityAutoConfiguration {\n \n \t}\n \n+\t@Configuration\n+\t@ConditionalOnExpression("${management.security.enabled:true} && !${security.basic.enabled:true}")\n+\t@ConditionalOnMissingBean(WebSecurityConfiguration.class)\n+\t@EnableWebSecurity\n+\tprotected static class WebSecurityEnabler extends AuthenticationManagerConfiguration {\n+\t}\n+\n \t@Configuration\n \t@ConditionalOnMissingBean({ ManagementWebSecurityConfigurerAdapter.class })\n \t@ConditionalOnExpression("${management.security.enabled:true}")\n-\t@EnableWebSecurity\n+\t@ConditionalOnWebApplication\n \t// Give user-supplied filters a chance to be last in line\n \t@Order(Ordered.LOWEST_PRECEDENCE - 10)\n \tprotected static class ManagementWebSecurityConfigurerAdapter extends\n@@ -198,13 +206,6 @@ public class ManagementSecurityAutoConfiguration {\n \t\t\treturn entryPoint;\n \t\t}\n \n-\t\t@Configuration\n-\t\t@ConditionalOnMissingBean(AuthenticationManager.class)\n-\t\t@Order(Ordered.LOWEST_PRECEDENCE - 4)\n-\t\tprotected static class ManagementAuthenticationManagerConfiguration extends\n-\t\t\t\tAuthenticationManagerConfiguration {\n-\t\t}\n-\n \t}\n \n \tprivate static String[] getEndpointPaths(\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.annotation.PostConstruct;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuate.endpoint.Endpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping;\nimport org.springframework.boot.actuate.endpoint.mvc.MvcEndpoint;\nimport org.springframework.boot.actuate.web.ErrorController;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.security.AuthenticationManagerConfiguration;\nimport org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration;\nimport org.springframework.boot.autoconfigure.security.SecurityPrequisite;\nimport org.springframework.boot.autoconfigure.security.SecurityProperties;\nimport org.springframework.boot.autoconfigure.security.SpringBootWebSecurityConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.security.config.annotation.web.WebSecurityConfigurer;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.builders.WebSecurity;\nimport org.springframework.security.config.annotation.web.builders.WebSecurity.IgnoredRequestConfigurer;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.web.AuthenticationEntryPoint;\nimport org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for security of framework endpoints.\n * Many aspects of the behavior can be controller with {@link ManagementServerProperties}\n * via externalized application properties (or via an bean definition of that type to set\n * the defaults).\n * \n * <p>\n * The framework {@link Endpoint}s (used to expose application information to operations)\n * include a {@link Endpoint#isSensitive() sensitive} configuration option which will be\n * used as a security hint by the filter created here.\n * \n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnClass({ EnableWebSecurity.class })\n@AutoConfigureAfter(SecurityAutoConfiguration.class)\n@EnableConfigurationProperties\npublic class ManagementSecurityAutoConfiguration {\n\n\tprivate static final String[] NO_PATHS = new String[0];\n\n\t@Bean\n\t@ConditionalOnMissingBean({ IgnoredPathsWebSecurityConfigurerAdapter.class })\n\tpublic WebSecurityConfigurer<WebSecurity> ignoredPathsWebSecurityConfigurerAdapter() {\n\t\treturn new IgnoredPathsWebSecurityConfigurerAdapter();\n\t}\n\n\t@Configuration\n\tprotected static class ManagementSecurityPropertiesConfiguration implements\n\t\t\tSecurityPrequisite {\n\n\t\t@Autowired(required = false)\n\t\tprivate SecurityProperties security;\n\n\t\t@Autowired(required = false)\n\t\tprivate ManagementServerProperties management;\n\n\t\t@PostConstruct\n\t\tpublic void init() {\n\t\t\tif (this.management != null && this.security != null) {\n\t\t\t\tthis.security.getUser().getRole()\n\t\t\t\t\t\t.add(this.management.getSecurity().getRole());\n\t\t\t}\n\t\t}\n\n\t}\n\n\t// Get the ignored paths in early\n\t@Order(Ordered.HIGHEST_PRECEDENCE + 1)\n\tprivate static class IgnoredPathsWebSecurityConfigurerAdapter implements\n\t\t\tWebSecurityConfigurer<WebSecurity> {\n\n\t\t@Autowired(required = false)\n\t\tprivate ErrorController errorController;\n\n\t\t@Autowired(required = false)\n\t\tprivate EndpointHandlerMapping endpointHandlerMapping;\n\n\t\t@Autowired\n\t\tprivate ManagementServerProperties management;\n\n\t\t@Autowired\n\t\tprivate SecurityProperties security;\n\n\t\t@Override\n\t\tpublic void configure(WebSecurity builder) throws Exception {\n\t\t}\n\n\t\t@Override\n\t\tpublic void init(WebSecurity builder) throws Exception {\n\t\t\tIgnoredRequestConfigurer ignoring = builder.ignoring();\n\t\t\t// The ignores are not cumulative, so to prevent overwriting the defaults we\n\t\t\t// add them back.\n\t\t\tList<String> ignored = SpringBootWebSecurityConfiguration\n\t\t\t\t\t.getIgnored(this.security);\n\t\t\tignored.addAll(Arrays.asList(getEndpointPaths(this.endpointHandlerMapping,\n\t\t\t\t\tfalse)));\n\t\t\tif (!this.management.getSecurity().isEnabled()) {\n\t\t\t\tignored.addAll(Arrays.asList(getEndpointPaths(\n\t\t\t\t\t\tthis.endpointHandlerMapping, true)));\n\t\t\t}\n\t\t\tif (ignored.contains("none")) {\n\t\t\t\tignored.remove("none");\n\t\t\t}\n\t\t\tif (this.errorController != null) {\n\t\t\t\tignored.add(this.errorController.getErrorPath());\n\t\t\t}\n\t\t\tignoring.antMatchers(ignored.toArray(new String[0]));\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnExpression("${management.security.enabled:true} && !${security.basic.enabled:true}")\n\t@ConditionalOnMissingBean(WebSecurityConfiguration.class)\n\t@EnableWebSecurity\n\tprotected static class WebSecurityEnabler extends AuthenticationManagerConfiguration {\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean({ ManagementWebSecurityConfigurerAdapter.class })\n\t@ConditionalOnExpression("${management.security.enabled:true}")\n\t@ConditionalOnWebApplication\n\t// Give user-supplied filters a chance to be last in line\n\t@Order(Ordered.LOWEST_PRECEDENCE - 10)\n\tprotected static class ManagementWebSecurityConfigurerAdapter extends\n\t\t\tWebSecurityConfigurerAdapter {\n\n\t\t@Autowired\n\t\tprivate SecurityProperties security;\n\n\t\t@Autowired\n\t\tprivate ManagementServerProperties management;\n\n\t\t@Autowired(required = false)\n\t\tprivate EndpointHandlerMapping endpointHandlerMapping;\n\n\t\t@Override\n\t\tprotected void configure(HttpSecurity http) throws Exception {\n\n\t\t\t// secure endpoints\n\t\t\tString[] paths = getEndpointPaths(this.endpointHandlerMapping, true);\n\t\t\tif (paths.length > 0 && this.management.getSecurity().isEnabled()) {\n\t\t\t\t// Always protect them if present\n\t\t\t\tif (this.security.isRequireSsl()) {\n\t\t\t\t\thttp.requiresChannel().anyRequest().requiresSecure();\n\t\t\t\t}\n\t\t\t\thttp.exceptionHandling().authenticationEntryPoint(entryPoint());\n\t\t\t\thttp.requestMatchers().antMatchers(paths);\n\t\t\t\thttp.authorizeRequests().anyRequest()\n\t\t\t\t\t\t.hasRole(this.management.getSecurity().getRole()) //\n\t\t\t\t\t\t.and().httpBasic() //\n\t\t\t\t\t\t.and().anonymous().disable();\n\n\t\t\t\t// No cookies for management endpoints by default\n\t\t\t\thttp.csrf().disable();\n\t\t\t\thttp.sessionManagement().sessionCreationPolicy(\n\t\t\t\t\t\tthis.management.getSecurity().getSessions());\n\n\t\t\t\tSpringBootWebSecurityConfiguration.configureHeaders(http.headers(),\n\t\t\t\t\t\tthis.security.getHeaders());\n\n\t\t\t}\n\n\t\t}\n\n\t\tprivate AuthenticationEntryPoint entryPoint() {\n\t\t\tBasicAuthenticationEntryPoint entryPoint = new BasicAuthenticationEntryPoint();\n\t\t\tentryPoint.setRealmName(this.security.getBasic().getRealm());\n\t\t\treturn entryPoint;\n\t\t}\n\n\t}\n\n\tprivate static String[] getEndpointPaths(\n\t\t\tEndpointHandlerMapping endpointHandlerMapping, boolean secure) {\n\t\tif (endpointHandlerMapping == null) {\n\t\t\treturn NO_PATHS;\n\t\t}\n\n\t\tSet<? extends MvcEndpoint> endpoints = endpointHandlerMapping.getEndpoints();\n\t\tList<String> paths = new ArrayList<String>(endpoints.size());\n\t\tfor (MvcEndpoint endpoint : endpoints) {\n\t\t\tif (endpoint.isSensitive() == secure) {\n\t\t\t\tpaths.add(endpoint.getPath());\n\t\t\t}\n\t\t}\n\t\treturn paths.toArray(new String[paths.size()]);\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.annotation.PostConstruct;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuate.endpoint.Endpoint;\nimport org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping;\nimport org.springframework.boot.actuate.endpoint.mvc.MvcEndpoint;\nimport org.springframework.boot.actuate.web.ErrorController;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.security.AuthenticationManagerConfiguration;\nimport org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration;\nimport org.springframework.boot.autoconfigure.security.SecurityPrequisite;\nimport org.springframework.boot.autoconfigure.security.SecurityProperties;\nimport org.springframework.boot.autoconfigure.security.SpringBootWebSecurityConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.web.WebSecurityConfigurer;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.builders.WebSecurity;\nimport org.springframework.security.config.annotation.web.builders.WebSecurity.IgnoredRequestConfigurer;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.web.AuthenticationEntryPoint;\nimport org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for security of framework endpoints.\n * Many aspects of the behavior can be controller with {@link ManagementServerProperties}\n * via externalized application properties (or via an bean definition of that type to set\n * the defaults).\n * \n * <p>\n * The framework {@link Endpoint}s (used to expose application information to operations)\n * include a {@link Endpoint#isSensitive() sensitive} configuration option which will be\n * used as a security hint by the filter created here.\n * \n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnClass({ EnableWebSecurity.class })\n@AutoConfigureAfter(SecurityAutoConfiguration.class)\n@EnableConfigurationProperties\npublic class ManagementSecurityAutoConfiguration {\n\n\tprivate static final String[] NO_PATHS = new String[0];\n\n\t@Bean\n\t@ConditionalOnMissingBean({ IgnoredPathsWebSecurityConfigurerAdapter.class })\n\tpublic WebSecurityConfigurer<WebSecurity> ignoredPathsWebSecurityConfigurerAdapter() {\n\t\treturn new IgnoredPathsWebSecurityConfigurerAdapter();\n\t}\n\n\t@Configuration\n\tprotected static class ManagementSecurityPropertiesConfiguration implements\n\t\t\tSecurityPrequisite {\n\n\t\t@Autowired(required = false)\n\t\tprivate SecurityProperties security;\n\n\t\t@Autowired(required = false)\n\t\tprivate ManagementServerProperties management;\n\n\t\t@PostConstruct\n\t\tpublic void init() {\n\t\t\tif (this.management != null && this.security != null) {\n\t\t\t\tthis.security.getUser().getRole()\n\t\t\t\t\t\t.add(this.management.getSecurity().getRole());\n\t\t\t}\n\t\t}\n\n\t}\n\n\t// Get the ignored paths in early\n\t@Order(Ordered.HIGHEST_PRECEDENCE + 1)\n\tprivate static class IgnoredPathsWebSecurityConfigurerAdapter implements\n\t\t\tWebSecurityConfigurer<WebSecurity> {\n\n\t\t@Autowired(required = false)\n\t\tprivate ErrorController errorController;\n\n\t\t@Autowired(required = false)\n\t\tprivate EndpointHandlerMapping endpointHandlerMapping;\n\n\t\t@Autowired\n\t\tprivate ManagementServerProperties management;\n\n\t\t@Autowired\n\t\tprivate SecurityProperties security;\n\n\t\t@Override\n\t\tpublic void configure(WebSecurity builder) throws Exception {\n\t\t}\n\n\t\t@Override\n\t\tpublic void init(WebSecurity builder) throws Exception {\n\t\t\tIgnoredRequestConfigurer ignoring = builder.ignoring();\n\t\t\t// The ignores are not cumulative, so to prevent overwriting the defaults we\n\t\t\t// add them back.\n\t\t\tList<String> ignored = SpringBootWebSecurityConfiguration\n\t\t\t\t\t.getIgnored(this.security);\n\t\t\tignored.addAll(Arrays.asList(getEndpointPaths(this.endpointHandlerMapping,\n\t\t\t\t\tfalse)));\n\t\t\tif (!this.management.getSecurity().isEnabled()) {\n\t\t\t\tignored.addAll(Arrays.asList(getEndpointPaths(\n\t\t\t\t\t\tthis.endpointHandlerMapping, true)));\n\t\t\t}\n\t\t\tif (ignored.contains("none")) {\n\t\t\t\tignored.remove("none");\n\t\t\t}\n\t\t\tif (this.errorController != null) {\n\t\t\t\tignored.add(this.errorController.getErrorPath());\n\t\t\t}\n\t\t\tignoring.antMatchers(ignored.toArray(new String[0]));\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean({ ManagementWebSecurityConfigurerAdapter.class })\n\t@ConditionalOnExpression("${management.security.enabled:true}")\n\t@EnableWebSecurity\n\t// Give user-supplied filters a chance to be last in line\n\t@Order(Ordered.LOWEST_PRECEDENCE - 10)\n\tprotected static class ManagementWebSecurityConfigurerAdapter extends\n\t\t\tWebSecurityConfigurerAdapter {\n\n\t\t@Autowired\n\t\tprivate SecurityProperties security;\n\n\t\t@Autowired\n\t\tprivate ManagementServerProperties management;\n\n\t\t@Autowired(required = false)\n\t\tprivate EndpointHandlerMapping endpointHandlerMapping;\n\n\t\t@Override\n\t\tprotected void configure(HttpSecurity http) throws Exception {\n\n\t\t\t// secure endpoints\n\t\t\tString[] paths = getEndpointPaths(this.endpointHandlerMapping, true);\n\t\t\tif (paths.length > 0 && this.management.getSecurity().isEnabled()) {\n\t\t\t\t// Always protect them if present\n\t\t\t\tif (this.security.isRequireSsl()) {\n\t\t\t\t\thttp.requiresChannel().anyRequest().requiresSecure();\n\t\t\t\t}\n\t\t\t\thttp.exceptionHandling().authenticationEntryPoint(entryPoint());\n\t\t\t\thttp.requestMatchers().antMatchers(paths);\n\t\t\t\thttp.authorizeRequests().anyRequest()\n\t\t\t\t\t\t.hasRole(this.management.getSecurity().getRole()) //\n\t\t\t\t\t\t.and().httpBasic() //\n\t\t\t\t\t\t.and().anonymous().disable();\n\n\t\t\t\t// No cookies for management endpoints by default\n\t\t\t\thttp.csrf().disable();\n\t\t\t\thttp.sessionManagement().sessionCreationPolicy(\n\t\t\t\t\t\tthis.management.getSecurity().getSessions());\n\n\t\t\t\tSpringBootWebSecurityConfiguration.configureHeaders(http.headers(),\n\t\t\t\t\t\tthis.security.getHeaders());\n\n\t\t\t}\n\n\t\t}\n\n\t\tprivate AuthenticationEntryPoint entryPoint() {\n\t\t\tBasicAuthenticationEntryPoint entryPoint = new BasicAuthenticationEntryPoint();\n\t\t\tentryPoint.setRealmName(this.security.getBasic().getRealm());\n\t\t\treturn entryPoint;\n\t\t}\n\n\t\t@Configuration\n\t\t@ConditionalOnMissingBean(AuthenticationManager.class)\n\t\t@Order(Ordered.LOWEST_PRECEDENCE - 4)\n\t\tprotected static class ManagementAuthenticationManagerConfiguration extends\n\t\t\t\tAuthenticationManagerConfiguration {\n\t\t}\n\n\t}\n\n\tprivate static String[] getEndpointPaths(\n\t\t\tEndpointHandlerMapping endpointHandlerMapping, boolean secure) {\n\t\tif (endpointHandlerMapping == null) {\n\t\t\treturn NO_PATHS;\n\t\t}\n\n\t\tSet<? extends MvcEndpoint> endpoints = endpointHandlerMapping.getEndpoints();\n\t\tList<String> paths = new ArrayList<String>(endpoints.size());\n\t\tfor (MvcEndpoint endpoint : endpoints) {\n\t\t\tif (endpoint.isSensitive() == secure) {\n\t\t\t\tpaths.add(endpoint.getPath());\n\t\t\t}\n\t\t}\n\t\treturn paths.toArray(new String[paths.size()]);\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
