{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchConfigurerConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchConfigurerConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -36,7 +36,6 @@ import org.springframework.transaction.PlatformTransactionManager;\n  */\n @ConditionalOnClass(PlatformTransactionManager.class)\n @ConditionalOnMissingBean(BatchConfigurer.class)\n-@ConditionalOnBean(DataSource.class)\n @Configuration(proxyBeanMethods = false)\n class BatchConfigurerConfiguration {\n \n@@ -45,10 +44,10 @@ class BatchConfigurerConfiguration {\n \tstatic class JdbcBatchConfiguration {\n \n \t\t@Bean\n-\t\tBasicBatchConfigurer batchConfigurer(BatchProperties properties, ObjectProvider<DataSource> dataSource,\n+\t\tBasicBatchConfigurer batchConfigurer(BatchProperties properties, DataSource dataSource,\n \t\t\t\t@BatchDataSource ObjectProvider<DataSource> batchDataSource,\n \t\t\t\tObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers) {\n-\t\t\treturn new BasicBatchConfigurer(properties, batchDataSource.getIfAvailable(dataSource::getIfAvailable),\n+\t\t\treturn new BasicBatchConfigurer(properties, batchDataSource.getIfAvailable(() -> dataSource),\n \t\t\t\t\ttransactionManagerCustomizers.getIfAvailable());\n \t\t}\n \n@@ -60,11 +59,11 @@ class BatchConfigurerConfiguration {\n \tstatic class JpaBatchConfiguration {\n \n \t\t@Bean\n-\t\tJpaBatchConfigurer batchConfigurer(BatchProperties properties, ObjectProvider<DataSource> dataSource,\n+\t\tJpaBatchConfigurer batchConfigurer(BatchProperties properties, DataSource dataSource,\n \t\t\t\t@BatchDataSource ObjectProvider<DataSource> batchDataSource,\n \t\t\t\tObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers,\n \t\t\t\tEntityManagerFactory entityManagerFactory) {\n-\t\t\treturn new JpaBatchConfigurer(properties, batchDataSource.getIfAvailable(dataSource::getIfAvailable),\n+\t\t\treturn new JpaBatchConfigurer(properties, batchDataSource.getIfAvailable(() -> dataSource),\n \t\t\t\t\ttransactionManagerCustomizers.getIfAvailable(), entityManagerFactory);\n \t\t}\n \n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.batch;\n\nimport javax.persistence.EntityManagerFactory;\nimport javax.sql.DataSource;\n\nimport org.springframework.batch.core.configuration.annotation.BatchConfigurer;\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.transaction.PlatformTransactionManager;\n\n/**\n * Provide a {@link BatchConfigurer} according to the current environment.\n *\n * @author Stephane Nicoll\n */\n@ConditionalOnClass(PlatformTransactionManager.class)\n@ConditionalOnMissingBean(BatchConfigurer.class)\n@Configuration(proxyBeanMethods = false)\nclass BatchConfigurerConfiguration {\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnMissingBean(name = "entityManagerFactory")\n\tstatic class JdbcBatchConfiguration {\n\n\t\t@Bean\n\t\tBasicBatchConfigurer batchConfigurer(BatchProperties properties, DataSource dataSource,\n\t\t\t\t@BatchDataSource ObjectProvider<DataSource> batchDataSource,\n\t\t\t\tObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers) {\n\t\t\treturn new BasicBatchConfigurer(properties, batchDataSource.getIfAvailable(() -> dataSource),\n\t\t\t\t\ttransactionManagerCustomizers.getIfAvailable());\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnClass(EntityManagerFactory.class)\n\t@ConditionalOnBean(name = "entityManagerFactory")\n\tstatic class JpaBatchConfiguration {\n\n\t\t@Bean\n\t\tJpaBatchConfigurer batchConfigurer(BatchProperties properties, DataSource dataSource,\n\t\t\t\t@BatchDataSource ObjectProvider<DataSource> batchDataSource,\n\t\t\t\tObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers,\n\t\t\t\tEntityManagerFactory entityManagerFactory) {\n\t\t\treturn new JpaBatchConfigurer(properties, batchDataSource.getIfAvailable(() -> dataSource),\n\t\t\t\t\ttransactionManagerCustomizers.getIfAvailable(), entityManagerFactory);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.batch;\n\nimport javax.persistence.EntityManagerFactory;\nimport javax.sql.DataSource;\n\nimport org.springframework.batch.core.configuration.annotation.BatchConfigurer;\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.transaction.PlatformTransactionManager;\n\n/**\n * Provide a {@link BatchConfigurer} according to the current environment.\n *\n * @author Stephane Nicoll\n */\n@ConditionalOnClass(PlatformTransactionManager.class)\n@ConditionalOnMissingBean(BatchConfigurer.class)\n@ConditionalOnBean(DataSource.class)\n@Configuration(proxyBeanMethods = false)\nclass BatchConfigurerConfiguration {\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnMissingBean(name = "entityManagerFactory")\n\tstatic class JdbcBatchConfiguration {\n\n\t\t@Bean\n\t\tBasicBatchConfigurer batchConfigurer(BatchProperties properties, ObjectProvider<DataSource> dataSource,\n\t\t\t\t@BatchDataSource ObjectProvider<DataSource> batchDataSource,\n\t\t\t\tObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers) {\n\t\t\treturn new BasicBatchConfigurer(properties, batchDataSource.getIfAvailable(dataSource::getIfAvailable),\n\t\t\t\t\ttransactionManagerCustomizers.getIfAvailable());\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnClass(EntityManagerFactory.class)\n\t@ConditionalOnBean(name = "entityManagerFactory")\n\tstatic class JpaBatchConfiguration {\n\n\t\t@Bean\n\t\tJpaBatchConfigurer batchConfigurer(BatchProperties properties, ObjectProvider<DataSource> dataSource,\n\t\t\t\t@BatchDataSource ObjectProvider<DataSource> batchDataSource,\n\t\t\t\tObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers,\n\t\t\t\tEntityManagerFactory entityManagerFactory) {\n\t\t\treturn new JpaBatchConfigurer(properties, batchDataSource.getIfAvailable(dataSource::getIfAvailable),\n\t\t\t\t\ttransactionManagerCustomizers.getIfAvailable(), entityManagerFactory);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
