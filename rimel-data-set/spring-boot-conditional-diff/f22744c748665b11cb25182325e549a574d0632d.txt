@@ -16,6 +16,9 @@
 
 package org.springframework.boot.autoconfigure.transaction;
 
+import java.util.List;
+
+import org.springframework.beans.factory.ObjectProvider;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
@@ -23,6 +26,7 @@ import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandi
 import org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration;
 import org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration;
 import org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration;
+import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.transaction.PlatformTransactionManager;
@@ -36,22 +40,35 @@ import org.springframework.transaction.support.TransactionTemplate;
  * @since 1.3.0
  */
 @Configuration
-@ConditionalOnClass({ TransactionTemplate.class, PlatformTransactionManager.class })
-@ConditionalOnSingleCandidate(PlatformTransactionManager.class)
+@ConditionalOnClass(PlatformTransactionManager.class)
 @AutoConfigureAfter({ JtaAutoConfiguration.class, JpaBaseConfiguration.class,
 		DataSourceTransactionManagerAutoConfiguration.class })
+@EnableConfigurationProperties(TransactionProperties.class)
 public class TransactionAutoConfiguration {
 
-	private final PlatformTransactionManager transactionManager;
-
-	public TransactionAutoConfiguration(PlatformTransactionManager transactionManager) {
-		this.transactionManager = transactionManager;
-	}
-
 	@Bean
 	@ConditionalOnMissingBean
-	public TransactionTemplate transactionTemplate() {
-		return new TransactionTemplate(this.transactionManager);
+	public TransactionManagerCustomizers platformTransactionManagerCustomizers(
+			ObjectProvider<List<PlatformTransactionManagerCustomizer<?>>> customizers) {
+		return new TransactionManagerCustomizers(customizers.getIfAvailable());
+	}
+
+	@Configuration
+	@ConditionalOnSingleCandidate(PlatformTransactionManager.class)
+	public static class TransactionTemplateConfiguration {
+
+		private final PlatformTransactionManager transactionManager;
+
+		public TransactionTemplateConfiguration(
+				PlatformTransactionManager transactionManager) {
+			this.transactionManager = transactionManager;
+		}
+
+		@Bean
+		@ConditionalOnMissingBean
+		public TransactionTemplate transactionTemplate() {
+			return new TransactionTemplate(this.transactionManager);
+		}
 	}
 
 }

