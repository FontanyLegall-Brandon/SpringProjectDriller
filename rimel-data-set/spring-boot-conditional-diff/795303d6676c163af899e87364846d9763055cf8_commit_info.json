{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -43,6 +43,9 @@ import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.autoconfigure.data.jpa.EntityManagerFactoryDependsOnPostProcessor;\n import org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration.FlywayDataSourceCondition;\n+import org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration.FlywayEntityManagerFactoryDependsOnPostProcessor;\n+import org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration.FlywayJdbcOperationsDependsOnPostProcessor;\n+import org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration.FlywayNamedParameterJdbcOperationsDependencyConfiguration;\n import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\n import org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;\n import org.springframework.boot.autoconfigure.jdbc.JdbcOperationsDependsOnPostProcessor;\n@@ -56,6 +59,7 @@ import org.springframework.boot.jdbc.DatabaseDriver;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n import org.springframework.core.convert.TypeDescriptor;\n import org.springframework.core.convert.converter.GenericConverter;\n import org.springframework.core.io.ResourceLoader;\n@@ -90,6 +94,8 @@ import org.springframework.util.StringUtils;\n @ConditionalOnProperty(prefix = "spring.flyway", name = "enabled", matchIfMissing = true)\n @AutoConfigureAfter({ DataSourceAutoConfiguration.class, JdbcTemplateAutoConfiguration.class,\n \t\tHibernateJpaAutoConfiguration.class })\n+@Import({ FlywayEntityManagerFactoryDependsOnPostProcessor.class, FlywayJdbcOperationsDependsOnPostProcessor.class,\n+\t\tFlywayNamedParameterJdbcOperationsDependencyConfiguration.class })\n public class FlywayAutoConfiguration {\n \n \t@Bean\n@@ -106,6 +112,9 @@ public class FlywayAutoConfiguration {\n \t@Configuration(proxyBeanMethods = false)\n \t@ConditionalOnMissingBean(Flyway.class)\n \t@EnableConfigurationProperties({ DataSourceProperties.class, FlywayProperties.class })\n+\t@Import({ FlywayMigrationInitializerEntityManagerFactoryDependsOnPostProcessor.class,\n+\t\t\tFlywayMigrationInitializerJdbcOperationsDependsOnPostProcessor.class,\n+\t\t\tFlywayMigrationInitializerNamedParameterJdbcOperationsDependsOnPostProcessor.class })\n \tpublic static class FlywayConfiguration {\n \n \t\t@Bean\n@@ -257,91 +266,85 @@ public class FlywayAutoConfiguration {\n \t\t\treturn new FlywayMigrationInitializer(flyway, migrationStrategy.getIfAvailable());\n \t\t}\n \n-\t\t/**\n-\t\t * Additional configuration to ensure that {@link EntityManagerFactory} beans\n-\t\t * depend on any {@link FlywayMigrationInitializer} beans.\n-\t\t */\n-\t\t@Configuration(proxyBeanMethods = false)\n-\t\t@ConditionalOnClass(LocalContainerEntityManagerFactoryBean.class)\n-\t\t@ConditionalOnBean(AbstractEntityManagerFactoryBean.class)\n-\t\tprotected static class FlywayInitializerJpaDependencyConfiguration\n-\t\t\t\textends EntityManagerFactoryDependsOnPostProcessor {\n-\n-\t\t\tpublic FlywayInitializerJpaDependencyConfiguration() {\n-\t\t\t\tsuper(FlywayMigrationInitializer.class);\n-\t\t\t}\n+\t}\n+\n+\t/**\n+\t * Post processor to ensure that {@link EntityManagerFactory} beans depend on any\n+\t * {@link FlywayMigrationInitializer} beans.\n+\t */\n+\t@ConditionalOnClass(LocalContainerEntityManagerFactoryBean.class)\n+\t@ConditionalOnBean(AbstractEntityManagerFactoryBean.class)\n+\tstatic class FlywayMigrationInitializerEntityManagerFactoryDependsOnPostProcessor\n+\t\t\textends EntityManagerFactoryDependsOnPostProcessor {\n \n+\t\tFlywayMigrationInitializerEntityManagerFactoryDependsOnPostProcessor() {\n+\t\t\tsuper(FlywayMigrationInitializer.class);\n \t\t}\n \n-\t\t/**\n-\t\t * Additional configuration to ensure that {@link JdbcOperations} beans depend on\n-\t\t * any {@link FlywayMigrationInitializer} beans.\n-\t\t */\n-\t\t@Configuration(proxyBeanMethods = false)\n-\t\t@ConditionalOnClass(JdbcOperations.class)\n-\t\t@ConditionalOnBean(JdbcOperations.class)\n-\t\tprotected static class FlywayInitializerJdbcOperationsDependencyConfiguration\n-\t\t\t\textends JdbcOperationsDependsOnPostProcessor {\n-\n-\t\t\tpublic FlywayInitializerJdbcOperationsDependencyConfiguration() {\n-\t\t\t\tsuper(FlywayMigrationInitializer.class);\n-\t\t\t}\n+\t}\n+\n+\t/**\n+\t * Post processor to ensure that {@link JdbcOperations} beans depend on any\n+\t * {@link FlywayMigrationInitializer} beans.\n+\t */\n+\t@ConditionalOnClass(JdbcOperations.class)\n+\t@ConditionalOnBean(JdbcOperations.class)\n+\tstatic class FlywayMigrationInitializerJdbcOperationsDependsOnPostProcessor\n+\t\t\textends JdbcOperationsDependsOnPostProcessor {\n \n+\t\tFlywayMigrationInitializerJdbcOperationsDependsOnPostProcessor() {\n+\t\t\tsuper(FlywayMigrationInitializer.class);\n \t\t}\n \n-\t\t/**\n-\t\t * Additional configuration to ensure that {@link NamedParameterJdbcOperations}\n-\t\t * beans depend on any {@link FlywayMigrationInitializer} beans.\n-\t\t */\n-\t\t@Configuration(proxyBeanMethods = false)\n-\t\t@ConditionalOnClass(NamedParameterJdbcOperations.class)\n-\t\t@ConditionalOnBean(NamedParameterJdbcOperations.class)\n-\t\tprotected static class FlywayInitializerNamedParameterJdbcOperationsDependencyConfiguration\n-\t\t\t\textends NamedParameterJdbcOperationsDependsOnPostProcessor {\n-\n-\t\t\tpublic FlywayInitializerNamedParameterJdbcOperationsDependencyConfiguration() {\n-\t\t\t\tsuper(FlywayMigrationInitializer.class);\n-\t\t\t}\n+\t}\n \n+\t/**\n+\t * Post processor to ensure that {@link NamedParameterJdbcOperations} beans depend on\n+\t * any {@link FlywayMigrationInitializer} beans.\n+\t */\n+\t@ConditionalOnClass(NamedParameterJdbcOperations.class)\n+\t@ConditionalOnBean(NamedParameterJdbcOperations.class)\n+\tstatic class FlywayMigrationInitializerNamedParameterJdbcOperationsDependsOnPostProcessor\n+\t\t\textends NamedParameterJdbcOperationsDependsOnPostProcessor {\n+\n+\t\tFlywayMigrationInitializerNamedParameterJdbcOperationsDependsOnPostProcessor() {\n+\t\t\tsuper(FlywayMigrationInitializer.class);\n \t\t}\n \n \t}\n \n \t/**\n-\t * Additional configuration to ensure that {@link EntityManagerFactory} beans depend\n-\t * on any {@link Flyway} beans.\n+\t * Post processor to ensure that {@link EntityManagerFactory} beans depend on any\n+\t * {@link Flyway} beans.\n \t */\n-\t@Configuration(proxyBeanMethods = false)\n \t@ConditionalOnClass(LocalContainerEntityManagerFactoryBean.class)\n \t@ConditionalOnBean(AbstractEntityManagerFactoryBean.class)\n-\tprotected static class FlywayJpaDependencyConfiguration extends EntityManagerFactoryDependsOnPostProcessor {\n+\tstatic class FlywayEntityManagerFactoryDependsOnPostProcessor extends EntityManagerFactoryDependsOnPostProcessor {\n \n-\t\tpublic FlywayJpaDependencyConfiguration() {\n+\t\tFlywayEntityManagerFactoryDependsOnPostProcessor() {\n \t\t\tsuper(Flyway.class);\n \t\t}\n \n \t}\n \n \t/**\n-\t * Additional configuration to ensure that {@link JdbcOperations} beans depend on any\n+\t * Post processor to ensure that {@link JdbcOperations} beans depend on any\n \t * {@link Flyway} beans.\n \t */\n-\t@Configuration(proxyBeanMethods = false)\n \t@ConditionalOnClass(JdbcOperations.class)\n \t@ConditionalOnBean(JdbcOperations.class)\n-\tprotected static class FlywayJdbcOperationsDependencyConfiguration extends JdbcOperationsDependsOnPostProcessor {\n+\tstatic class FlywayJdbcOperationsDependsOnPostProcessor extends JdbcOperationsDependsOnPostProcessor {\n \n-\t\tpublic FlywayJdbcOperationsDependencyConfiguration() {\n+\t\tFlywayJdbcOperationsDependsOnPostProcessor() {\n \t\t\tsuper(Flyway.class);\n \t\t}\n \n \t}\n \n \t/**\n-\t * Additional configuration to ensure that {@link NamedParameterJdbcOperations} beans\n-\t * depend on any {@link Flyway} beans.\n+\t * Post processor to ensure that {@link NamedParameterJdbcOperations} beans depend on\n+\t * any {@link Flyway} beans.\n \t */\n-\t@Configuration(proxyBeanMethods = false)\n \t@ConditionalOnClass(NamedParameterJdbcOperations.class)\n \t@ConditionalOnBean(NamedParameterJdbcOperations.class)\n \tprotected static class FlywayNamedParameterJdbcOperationsDependencyConfiguration\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.flyway;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.function.Supplier;\nimport java.util.stream.Collectors;\n\nimport javax.persistence.EntityManagerFactory;\nimport javax.sql.DataSource;\n\nimport org.flywaydb.core.Flyway;\nimport org.flywaydb.core.api.MigrationVersion;\nimport org.flywaydb.core.api.callback.Callback;\nimport org.flywaydb.core.api.configuration.FluentConfiguration;\nimport org.flywaydb.core.api.migration.JavaMigration;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.data.jpa.EntityManagerFactoryDependsOnPostProcessor;\nimport org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration.FlywayDataSourceCondition;\nimport org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration.FlywayEntityManagerFactoryDependsOnPostProcessor;\nimport org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration.FlywayJdbcOperationsDependsOnPostProcessor;\nimport org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration.FlywayNamedParameterJdbcOperationsDependencyConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;\nimport org.springframework.boot.autoconfigure.jdbc.JdbcOperationsDependsOnPostProcessor;\nimport org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.NamedParameterJdbcOperationsDependsOnPostProcessor;\nimport org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;\nimport org.springframework.boot.context.properties.ConfigurationPropertiesBinding;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.context.properties.PropertyMapper;\nimport org.springframework.boot.jdbc.DatabaseDriver;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.core.convert.TypeDescriptor;\nimport org.springframework.core.convert.converter.GenericConverter;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.jdbc.core.JdbcOperations;\nimport org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations;\nimport org.springframework.jdbc.support.JdbcUtils;\nimport org.springframework.jdbc.support.MetaDataAccessException;\nimport org.springframework.orm.jpa.AbstractEntityManagerFactoryBean;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.util.ObjectUtils;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Flyway database migrations.\n *\n * @author Dave Syer\n * @author Phillip Webb\n * @author Vedran Pavic\n * @author Stephane Nicoll\n * @author Jacques-Etienne Beaudet\n * @author Eddú Meléndez\n * @author Dominic Gunn\n * @author Dan Zheng\n * @author András Deák\n * @author Semyon Danilov\n * @since 1.1.0\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass(Flyway.class)\n@Conditional(FlywayDataSourceCondition.class)\n@ConditionalOnProperty(prefix = "spring.flyway", name = "enabled", matchIfMissing = true)\n@AutoConfigureAfter({ DataSourceAutoConfiguration.class, JdbcTemplateAutoConfiguration.class,\n\t\tHibernateJpaAutoConfiguration.class })\n@Import({ FlywayEntityManagerFactoryDependsOnPostProcessor.class, FlywayJdbcOperationsDependsOnPostProcessor.class,\n\t\tFlywayNamedParameterJdbcOperationsDependencyConfiguration.class })\npublic class FlywayAutoConfiguration {\n\n\t@Bean\n\t@ConfigurationPropertiesBinding\n\tpublic StringOrNumberToMigrationVersionConverter stringOrNumberMigrationVersionConverter() {\n\t\treturn new StringOrNumberToMigrationVersionConverter();\n\t}\n\n\t@Bean\n\tpublic FlywaySchemaManagementProvider flywayDefaultDdlModeProvider(ObjectProvider<Flyway> flyways) {\n\t\treturn new FlywaySchemaManagementProvider(flyways);\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnMissingBean(Flyway.class)\n\t@EnableConfigurationProperties({ DataSourceProperties.class, FlywayProperties.class })\n\t@Import({ FlywayMigrationInitializerEntityManagerFactoryDependsOnPostProcessor.class,\n\t\t\tFlywayMigrationInitializerJdbcOperationsDependsOnPostProcessor.class,\n\t\t\tFlywayMigrationInitializerNamedParameterJdbcOperationsDependsOnPostProcessor.class })\n\tpublic static class FlywayConfiguration {\n\n\t\t@Bean\n\t\tpublic Flyway flyway(FlywayProperties properties, DataSourceProperties dataSourceProperties,\n\t\t\t\tResourceLoader resourceLoader, ObjectProvider<DataSource> dataSource,\n\t\t\t\t@FlywayDataSource ObjectProvider<DataSource> flywayDataSource,\n\t\t\t\tObjectProvider<FlywayConfigurationCustomizer> fluentConfigurationCustomizers,\n\t\t\t\tObjectProvider<JavaMigration> javaMigrations, ObjectProvider<Callback> callbacks) {\n\t\t\tFluentConfiguration configuration = new FluentConfiguration(resourceLoader.getClassLoader());\n\t\t\tDataSource dataSourceToMigrate = configureDataSource(configuration, properties, dataSourceProperties,\n\t\t\t\t\tflywayDataSource.getIfAvailable(), dataSource.getIfAvailable());\n\t\t\tcheckLocationExists(dataSourceToMigrate, properties, resourceLoader);\n\t\t\tconfigureProperties(configuration, properties);\n\t\t\tList<Callback> orderedCallbacks = callbacks.orderedStream().collect(Collectors.toList());\n\t\t\tconfigureCallbacks(configuration, orderedCallbacks);\n\t\t\tfluentConfigurationCustomizers.orderedStream().forEach((customizer) -> customizer.customize(configuration));\n\t\t\tconfigureFlywayCallbacks(configuration, orderedCallbacks);\n\t\t\tList<JavaMigration> migrations = javaMigrations.stream().collect(Collectors.toList());\n\t\t\tconfigureJavaMigrations(configuration, migrations);\n\t\t\treturn configuration.load();\n\t\t}\n\n\t\tprivate DataSource configureDataSource(FluentConfiguration configuration, FlywayProperties properties,\n\t\t\t\tDataSourceProperties dataSourceProperties, DataSource flywayDataSource, DataSource dataSource) {\n\t\t\tif (properties.isCreateDataSource()) {\n\t\t\t\tString url = getProperty(properties::getUrl, dataSourceProperties::determineUrl);\n\t\t\t\tString user = getProperty(properties::getUser, dataSourceProperties::determineUsername);\n\t\t\t\tString password = getProperty(properties::getPassword, dataSourceProperties::determinePassword);\n\t\t\t\tconfiguration.dataSource(url, user, password);\n\t\t\t\tif (!CollectionUtils.isEmpty(properties.getInitSqls())) {\n\t\t\t\t\tString initSql = StringUtils.collectionToDelimitedString(properties.getInitSqls(), "\\n");\n\t\t\t\t\tconfiguration.initSql(initSql);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (flywayDataSource != null) {\n\t\t\t\tconfiguration.dataSource(flywayDataSource);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconfiguration.dataSource(dataSource);\n\t\t\t}\n\t\t\treturn configuration.getDataSource();\n\t\t}\n\n\t\tprivate void checkLocationExists(DataSource dataSource, FlywayProperties properties,\n\t\t\t\tResourceLoader resourceLoader) {\n\t\t\tif (properties.isCheckLocation()) {\n\t\t\t\tList<String> locations = new LocationResolver(dataSource).resolveLocations(properties.getLocations());\n\t\t\t\tif (!hasAtLeastOneLocation(resourceLoader, locations)) {\n\t\t\t\t\tthrow new FlywayMigrationScriptMissingException(locations);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tprivate void configureProperties(FluentConfiguration configuration, FlywayProperties properties) {\n\t\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\t\tString[] locations = new LocationResolver(configuration.getDataSource())\n\t\t\t\t\t.resolveLocations(properties.getLocations()).toArray(new String[0]);\n\t\t\tmap.from(locations).to(configuration::locations);\n\t\t\tmap.from(properties.getEncoding()).to(configuration::encoding);\n\t\t\tmap.from(properties.getConnectRetries()).to(configuration::connectRetries);\n\t\t\tmap.from(properties.getSchemas()).as(StringUtils::toStringArray).to(configuration::schemas);\n\t\t\tmap.from(properties.getTable()).to(configuration::table);\n\t\t\t// No method reference for compatibility with Flyway 5.x\n\t\t\tmap.from(properties.getTablespace()).whenNonNull().to((tablespace) -> configuration.tablespace(tablespace));\n\t\t\tmap.from(properties.getBaselineDescription()).to(configuration::baselineDescription);\n\t\t\tmap.from(properties.getBaselineVersion()).to(configuration::baselineVersion);\n\t\t\tmap.from(properties.getInstalledBy()).to(configuration::installedBy);\n\t\t\tmap.from(properties.getPlaceholders()).to(configuration::placeholders);\n\t\t\tmap.from(properties.getPlaceholderPrefix()).to(configuration::placeholderPrefix);\n\t\t\tmap.from(properties.getPlaceholderSuffix()).to(configuration::placeholderSuffix);\n\t\t\tmap.from(properties.isPlaceholderReplacement()).to(configuration::placeholderReplacement);\n\t\t\tmap.from(properties.getSqlMigrationPrefix()).to(configuration::sqlMigrationPrefix);\n\t\t\tmap.from(properties.getSqlMigrationSuffixes()).as(StringUtils::toStringArray)\n\t\t\t\t\t.to(configuration::sqlMigrationSuffixes);\n\t\t\tmap.from(properties.getSqlMigrationSeparator()).to(configuration::sqlMigrationSeparator);\n\t\t\tmap.from(properties.getRepeatableSqlMigrationPrefix()).to(configuration::repeatableSqlMigrationPrefix);\n\t\t\tmap.from(properties.getTarget()).to(configuration::target);\n\t\t\tmap.from(properties.isBaselineOnMigrate()).to(configuration::baselineOnMigrate);\n\t\t\tmap.from(properties.isCleanDisabled()).to(configuration::cleanDisabled);\n\t\t\tmap.from(properties.isCleanOnValidationError()).to(configuration::cleanOnValidationError);\n\t\t\tmap.from(properties.isGroup()).to(configuration::group);\n\t\t\tmap.from(properties.isIgnoreMissingMigrations()).to(configuration::ignoreMissingMigrations);\n\t\t\tmap.from(properties.isIgnoreIgnoredMigrations()).to(configuration::ignoreIgnoredMigrations);\n\t\t\tmap.from(properties.isIgnorePendingMigrations()).to(configuration::ignorePendingMigrations);\n\t\t\tmap.from(properties.isIgnoreFutureMigrations()).to(configuration::ignoreFutureMigrations);\n\t\t\tmap.from(properties.isMixed()).to(configuration::mixed);\n\t\t\tmap.from(properties.isOutOfOrder()).to(configuration::outOfOrder);\n\t\t\tmap.from(properties.isSkipDefaultCallbacks()).to(configuration::skipDefaultCallbacks);\n\t\t\tmap.from(properties.isSkipDefaultResolvers()).to(configuration::skipDefaultResolvers);\n\t\t\tmap.from(properties.isValidateOnMigrate()).to(configuration::validateOnMigrate);\n\t\t\t// Pro properties\n\t\t\tmap.from(properties.getBatch()).whenNonNull().to(configuration::batch);\n\t\t\tmap.from(properties.getDryRunOutput()).whenNonNull().to(configuration::dryRunOutput);\n\t\t\tmap.from(properties.getErrorOverrides()).whenNonNull().to(configuration::errorOverrides);\n\t\t\tmap.from(properties.getLicenseKey()).whenNonNull().to(configuration::licenseKey);\n\t\t\tmap.from(properties.getOracleSqlplus()).whenNonNull().to(configuration::oracleSqlplus);\n\t\t\t// No method reference for compatibility with Flyway 5.x\n\t\t\tmap.from(properties.getOracleSqlplusWarn()).whenNonNull()\n\t\t\t\t\t.to((oracleSqlplusWarn) -> configuration.oracleSqlplusWarn(oracleSqlplusWarn));\n\t\t\tmap.from(properties.getStream()).whenNonNull().to(configuration::stream);\n\t\t\tmap.from(properties.getUndoSqlMigrationPrefix()).whenNonNull().to(configuration::undoSqlMigrationPrefix);\n\t\t}\n\n\t\tprivate void configureCallbacks(FluentConfiguration configuration, List<Callback> callbacks) {\n\t\t\tif (!callbacks.isEmpty()) {\n\t\t\t\tconfiguration.callbacks(callbacks.toArray(new Callback[0]));\n\t\t\t}\n\t\t}\n\n\t\tprivate void configureFlywayCallbacks(FluentConfiguration flyway, List<Callback> callbacks) {\n\t\t\tif (!callbacks.isEmpty()) {\n\t\t\t\tflyway.callbacks(callbacks.toArray(new Callback[0]));\n\t\t\t}\n\t\t}\n\n\t\tprivate void configureJavaMigrations(FluentConfiguration flyway, List<JavaMigration> migrations) {\n\t\t\tif (!migrations.isEmpty()) {\n\t\t\t\ttry {\n\t\t\t\t\tflyway.javaMigrations(migrations.toArray(new JavaMigration[0]));\n\t\t\t\t}\n\t\t\t\tcatch (NoSuchMethodError ex) {\n\t\t\t\t\t// Flyway 5.x\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tprivate String getProperty(Supplier<String> property, Supplier<String> defaultValue) {\n\t\t\tString value = property.get();\n\t\t\treturn (value != null) ? value : defaultValue.get();\n\t\t}\n\n\t\tprivate boolean hasAtLeastOneLocation(ResourceLoader resourceLoader, Collection<String> locations) {\n\t\t\tfor (String location : locations) {\n\t\t\t\tif (resourceLoader.getResource(normalizePrefix(location)).exists()) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tprivate String normalizePrefix(String location) {\n\t\t\treturn location.replace("filesystem:", "file:");\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic FlywayMigrationInitializer flywayInitializer(Flyway flyway,\n\t\t\t\tObjectProvider<FlywayMigrationStrategy> migrationStrategy) {\n\t\t\treturn new FlywayMigrationInitializer(flyway, migrationStrategy.getIfAvailable());\n\t\t}\n\n\t}\n\n\t/**\n\t * Post processor to ensure that {@link EntityManagerFactory} beans depend on any\n\t * {@link FlywayMigrationInitializer} beans.\n\t */\n\t@ConditionalOnClass(LocalContainerEntityManagerFactoryBean.class)\n\t@ConditionalOnBean(AbstractEntityManagerFactoryBean.class)\n\tstatic class FlywayMigrationInitializerEntityManagerFactoryDependsOnPostProcessor\n\t\t\textends EntityManagerFactoryDependsOnPostProcessor {\n\n\t\tFlywayMigrationInitializerEntityManagerFactoryDependsOnPostProcessor() {\n\t\t\tsuper(FlywayMigrationInitializer.class);\n\t\t}\n\n\t}\n\n\t/**\n\t * Post processor to ensure that {@link JdbcOperations} beans depend on any\n\t * {@link FlywayMigrationInitializer} beans.\n\t */\n\t@ConditionalOnClass(JdbcOperations.class)\n\t@ConditionalOnBean(JdbcOperations.class)\n\tstatic class FlywayMigrationInitializerJdbcOperationsDependsOnPostProcessor\n\t\t\textends JdbcOperationsDependsOnPostProcessor {\n\n\t\tFlywayMigrationInitializerJdbcOperationsDependsOnPostProcessor() {\n\t\t\tsuper(FlywayMigrationInitializer.class);\n\t\t}\n\n\t}\n\n\t/**\n\t * Post processor to ensure that {@link NamedParameterJdbcOperations} beans depend on\n\t * any {@link FlywayMigrationInitializer} beans.\n\t */\n\t@ConditionalOnClass(NamedParameterJdbcOperations.class)\n\t@ConditionalOnBean(NamedParameterJdbcOperations.class)\n\tstatic class FlywayMigrationInitializerNamedParameterJdbcOperationsDependsOnPostProcessor\n\t\t\textends NamedParameterJdbcOperationsDependsOnPostProcessor {\n\n\t\tFlywayMigrationInitializerNamedParameterJdbcOperationsDependsOnPostProcessor() {\n\t\t\tsuper(FlywayMigrationInitializer.class);\n\t\t}\n\n\t}\n\n\t/**\n\t * Post processor to ensure that {@link EntityManagerFactory} beans depend on any\n\t * {@link Flyway} beans.\n\t */\n\t@ConditionalOnClass(LocalContainerEntityManagerFactoryBean.class)\n\t@ConditionalOnBean(AbstractEntityManagerFactoryBean.class)\n\tstatic class FlywayEntityManagerFactoryDependsOnPostProcessor extends EntityManagerFactoryDependsOnPostProcessor {\n\n\t\tFlywayEntityManagerFactoryDependsOnPostProcessor() {\n\t\t\tsuper(Flyway.class);\n\t\t}\n\n\t}\n\n\t/**\n\t * Post processor to ensure that {@link JdbcOperations} beans depend on any\n\t * {@link Flyway} beans.\n\t */\n\t@ConditionalOnClass(JdbcOperations.class)\n\t@ConditionalOnBean(JdbcOperations.class)\n\tstatic class FlywayJdbcOperationsDependsOnPostProcessor extends JdbcOperationsDependsOnPostProcessor {\n\n\t\tFlywayJdbcOperationsDependsOnPostProcessor() {\n\t\t\tsuper(Flyway.class);\n\t\t}\n\n\t}\n\n\t/**\n\t * Post processor to ensure that {@link NamedParameterJdbcOperations} beans depend on\n\t * any {@link Flyway} beans.\n\t */\n\t@ConditionalOnClass(NamedParameterJdbcOperations.class)\n\t@ConditionalOnBean(NamedParameterJdbcOperations.class)\n\tprotected static class FlywayNamedParameterJdbcOperationsDependencyConfiguration\n\t\t\textends NamedParameterJdbcOperationsDependsOnPostProcessor {\n\n\t\tpublic FlywayNamedParameterJdbcOperationsDependencyConfiguration() {\n\t\t\tsuper(Flyway.class);\n\t\t}\n\n\t}\n\n\tprivate static class LocationResolver {\n\n\t\tprivate static final String VENDOR_PLACEHOLDER = "{vendor}";\n\n\t\tprivate final DataSource dataSource;\n\n\t\tLocationResolver(DataSource dataSource) {\n\t\t\tthis.dataSource = dataSource;\n\t\t}\n\n\t\tList<String> resolveLocations(List<String> locations) {\n\t\t\tif (usesVendorLocation(locations)) {\n\t\t\t\tDatabaseDriver databaseDriver = getDatabaseDriver();\n\t\t\t\treturn replaceVendorLocations(locations, databaseDriver);\n\t\t\t}\n\t\t\treturn locations;\n\t\t}\n\n\t\tprivate List<String> replaceVendorLocations(List<String> locations, DatabaseDriver databaseDriver) {\n\t\t\tif (databaseDriver == DatabaseDriver.UNKNOWN) {\n\t\t\t\treturn locations;\n\t\t\t}\n\t\t\tString vendor = databaseDriver.getId();\n\t\t\treturn locations.stream().map((location) -> location.replace(VENDOR_PLACEHOLDER, vendor))\n\t\t\t\t\t.collect(Collectors.toList());\n\t\t}\n\n\t\tprivate DatabaseDriver getDatabaseDriver() {\n\t\t\ttry {\n\t\t\t\tString url = JdbcUtils.extractDatabaseMetaData(this.dataSource, "getURL");\n\t\t\t\treturn DatabaseDriver.fromJdbcUrl(url);\n\t\t\t}\n\t\t\tcatch (MetaDataAccessException ex) {\n\t\t\t\tthrow new IllegalStateException(ex);\n\t\t\t}\n\n\t\t}\n\n\t\tprivate boolean usesVendorLocation(Collection<String> locations) {\n\t\t\tfor (String location : locations) {\n\t\t\t\tif (location.contains(VENDOR_PLACEHOLDER)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t}\n\n\t/**\n\t * Convert a String or Number to a {@link MigrationVersion}.\n\t */\n\tprivate static class StringOrNumberToMigrationVersionConverter implements GenericConverter {\n\n\t\tprivate static final Set<ConvertiblePair> CONVERTIBLE_TYPES;\n\n\t\tstatic {\n\t\t\tSet<ConvertiblePair> types = new HashSet<>(2);\n\t\t\ttypes.add(new ConvertiblePair(String.class, MigrationVersion.class));\n\t\t\ttypes.add(new ConvertiblePair(Number.class, MigrationVersion.class));\n\t\t\tCONVERTIBLE_TYPES = Collections.unmodifiableSet(types);\n\t\t}\n\n\t\t@Override\n\t\tpublic Set<ConvertiblePair> getConvertibleTypes() {\n\t\t\treturn CONVERTIBLE_TYPES;\n\t\t}\n\n\t\t@Override\n\t\tpublic Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\t\tString value = ObjectUtils.nullSafeToString(source);\n\t\t\treturn MigrationVersion.fromVersion(value);\n\t\t}\n\n\t}\n\n\tstatic final class FlywayDataSourceCondition extends AnyNestedCondition {\n\n\t\tFlywayDataSourceCondition() {\n\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n\t\t}\n\n\t\t@ConditionalOnBean(DataSource.class)\n\t\tprivate static final class DataSourceBeanCondition {\n\n\t\t}\n\n\t\t@ConditionalOnProperty(prefix = "spring.flyway", name = "url", matchIfMissing = false)\n\t\tprivate static final class FlywayUrlCondition {\n\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.flyway;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.function.Supplier;\nimport java.util.stream.Collectors;\n\nimport javax.persistence.EntityManagerFactory;\nimport javax.sql.DataSource;\n\nimport org.flywaydb.core.Flyway;\nimport org.flywaydb.core.api.MigrationVersion;\nimport org.flywaydb.core.api.callback.Callback;\nimport org.flywaydb.core.api.configuration.FluentConfiguration;\nimport org.flywaydb.core.api.migration.JavaMigration;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.data.jpa.EntityManagerFactoryDependsOnPostProcessor;\nimport org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration.FlywayDataSourceCondition;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;\nimport org.springframework.boot.autoconfigure.jdbc.JdbcOperationsDependsOnPostProcessor;\nimport org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.NamedParameterJdbcOperationsDependsOnPostProcessor;\nimport org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;\nimport org.springframework.boot.context.properties.ConfigurationPropertiesBinding;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.context.properties.PropertyMapper;\nimport org.springframework.boot.jdbc.DatabaseDriver;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.convert.TypeDescriptor;\nimport org.springframework.core.convert.converter.GenericConverter;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.jdbc.core.JdbcOperations;\nimport org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations;\nimport org.springframework.jdbc.support.JdbcUtils;\nimport org.springframework.jdbc.support.MetaDataAccessException;\nimport org.springframework.orm.jpa.AbstractEntityManagerFactoryBean;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.util.ObjectUtils;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Flyway database migrations.\n *\n * @author Dave Syer\n * @author Phillip Webb\n * @author Vedran Pavic\n * @author Stephane Nicoll\n * @author Jacques-Etienne Beaudet\n * @author Eddú Meléndez\n * @author Dominic Gunn\n * @author Dan Zheng\n * @author András Deák\n * @author Semyon Danilov\n * @since 1.1.0\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass(Flyway.class)\n@Conditional(FlywayDataSourceCondition.class)\n@ConditionalOnProperty(prefix = "spring.flyway", name = "enabled", matchIfMissing = true)\n@AutoConfigureAfter({ DataSourceAutoConfiguration.class, JdbcTemplateAutoConfiguration.class,\n\t\tHibernateJpaAutoConfiguration.class })\npublic class FlywayAutoConfiguration {\n\n\t@Bean\n\t@ConfigurationPropertiesBinding\n\tpublic StringOrNumberToMigrationVersionConverter stringOrNumberMigrationVersionConverter() {\n\t\treturn new StringOrNumberToMigrationVersionConverter();\n\t}\n\n\t@Bean\n\tpublic FlywaySchemaManagementProvider flywayDefaultDdlModeProvider(ObjectProvider<Flyway> flyways) {\n\t\treturn new FlywaySchemaManagementProvider(flyways);\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnMissingBean(Flyway.class)\n\t@EnableConfigurationProperties({ DataSourceProperties.class, FlywayProperties.class })\n\tpublic static class FlywayConfiguration {\n\n\t\t@Bean\n\t\tpublic Flyway flyway(FlywayProperties properties, DataSourceProperties dataSourceProperties,\n\t\t\t\tResourceLoader resourceLoader, ObjectProvider<DataSource> dataSource,\n\t\t\t\t@FlywayDataSource ObjectProvider<DataSource> flywayDataSource,\n\t\t\t\tObjectProvider<FlywayConfigurationCustomizer> fluentConfigurationCustomizers,\n\t\t\t\tObjectProvider<JavaMigration> javaMigrations, ObjectProvider<Callback> callbacks) {\n\t\t\tFluentConfiguration configuration = new FluentConfiguration(resourceLoader.getClassLoader());\n\t\t\tDataSource dataSourceToMigrate = configureDataSource(configuration, properties, dataSourceProperties,\n\t\t\t\t\tflywayDataSource.getIfAvailable(), dataSource.getIfAvailable());\n\t\t\tcheckLocationExists(dataSourceToMigrate, properties, resourceLoader);\n\t\t\tconfigureProperties(configuration, properties);\n\t\t\tList<Callback> orderedCallbacks = callbacks.orderedStream().collect(Collectors.toList());\n\t\t\tconfigureCallbacks(configuration, orderedCallbacks);\n\t\t\tfluentConfigurationCustomizers.orderedStream().forEach((customizer) -> customizer.customize(configuration));\n\t\t\tconfigureFlywayCallbacks(configuration, orderedCallbacks);\n\t\t\tList<JavaMigration> migrations = javaMigrations.stream().collect(Collectors.toList());\n\t\t\tconfigureJavaMigrations(configuration, migrations);\n\t\t\treturn configuration.load();\n\t\t}\n\n\t\tprivate DataSource configureDataSource(FluentConfiguration configuration, FlywayProperties properties,\n\t\t\t\tDataSourceProperties dataSourceProperties, DataSource flywayDataSource, DataSource dataSource) {\n\t\t\tif (properties.isCreateDataSource()) {\n\t\t\t\tString url = getProperty(properties::getUrl, dataSourceProperties::determineUrl);\n\t\t\t\tString user = getProperty(properties::getUser, dataSourceProperties::determineUsername);\n\t\t\t\tString password = getProperty(properties::getPassword, dataSourceProperties::determinePassword);\n\t\t\t\tconfiguration.dataSource(url, user, password);\n\t\t\t\tif (!CollectionUtils.isEmpty(properties.getInitSqls())) {\n\t\t\t\t\tString initSql = StringUtils.collectionToDelimitedString(properties.getInitSqls(), "\\n");\n\t\t\t\t\tconfiguration.initSql(initSql);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (flywayDataSource != null) {\n\t\t\t\tconfiguration.dataSource(flywayDataSource);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconfiguration.dataSource(dataSource);\n\t\t\t}\n\t\t\treturn configuration.getDataSource();\n\t\t}\n\n\t\tprivate void checkLocationExists(DataSource dataSource, FlywayProperties properties,\n\t\t\t\tResourceLoader resourceLoader) {\n\t\t\tif (properties.isCheckLocation()) {\n\t\t\t\tList<String> locations = new LocationResolver(dataSource).resolveLocations(properties.getLocations());\n\t\t\t\tif (!hasAtLeastOneLocation(resourceLoader, locations)) {\n\t\t\t\t\tthrow new FlywayMigrationScriptMissingException(locations);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tprivate void configureProperties(FluentConfiguration configuration, FlywayProperties properties) {\n\t\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\t\tString[] locations = new LocationResolver(configuration.getDataSource())\n\t\t\t\t\t.resolveLocations(properties.getLocations()).toArray(new String[0]);\n\t\t\tmap.from(locations).to(configuration::locations);\n\t\t\tmap.from(properties.getEncoding()).to(configuration::encoding);\n\t\t\tmap.from(properties.getConnectRetries()).to(configuration::connectRetries);\n\t\t\tmap.from(properties.getSchemas()).as(StringUtils::toStringArray).to(configuration::schemas);\n\t\t\tmap.from(properties.getTable()).to(configuration::table);\n\t\t\t// No method reference for compatibility with Flyway 5.x\n\t\t\tmap.from(properties.getTablespace()).whenNonNull().to((tablespace) -> configuration.tablespace(tablespace));\n\t\t\tmap.from(properties.getBaselineDescription()).to(configuration::baselineDescription);\n\t\t\tmap.from(properties.getBaselineVersion()).to(configuration::baselineVersion);\n\t\t\tmap.from(properties.getInstalledBy()).to(configuration::installedBy);\n\t\t\tmap.from(properties.getPlaceholders()).to(configuration::placeholders);\n\t\t\tmap.from(properties.getPlaceholderPrefix()).to(configuration::placeholderPrefix);\n\t\t\tmap.from(properties.getPlaceholderSuffix()).to(configuration::placeholderSuffix);\n\t\t\tmap.from(properties.isPlaceholderReplacement()).to(configuration::placeholderReplacement);\n\t\t\tmap.from(properties.getSqlMigrationPrefix()).to(configuration::sqlMigrationPrefix);\n\t\t\tmap.from(properties.getSqlMigrationSuffixes()).as(StringUtils::toStringArray)\n\t\t\t\t\t.to(configuration::sqlMigrationSuffixes);\n\t\t\tmap.from(properties.getSqlMigrationSeparator()).to(configuration::sqlMigrationSeparator);\n\t\t\tmap.from(properties.getRepeatableSqlMigrationPrefix()).to(configuration::repeatableSqlMigrationPrefix);\n\t\t\tmap.from(properties.getTarget()).to(configuration::target);\n\t\t\tmap.from(properties.isBaselineOnMigrate()).to(configuration::baselineOnMigrate);\n\t\t\tmap.from(properties.isCleanDisabled()).to(configuration::cleanDisabled);\n\t\t\tmap.from(properties.isCleanOnValidationError()).to(configuration::cleanOnValidationError);\n\t\t\tmap.from(properties.isGroup()).to(configuration::group);\n\t\t\tmap.from(properties.isIgnoreMissingMigrations()).to(configuration::ignoreMissingMigrations);\n\t\t\tmap.from(properties.isIgnoreIgnoredMigrations()).to(configuration::ignoreIgnoredMigrations);\n\t\t\tmap.from(properties.isIgnorePendingMigrations()).to(configuration::ignorePendingMigrations);\n\t\t\tmap.from(properties.isIgnoreFutureMigrations()).to(configuration::ignoreFutureMigrations);\n\t\t\tmap.from(properties.isMixed()).to(configuration::mixed);\n\t\t\tmap.from(properties.isOutOfOrder()).to(configuration::outOfOrder);\n\t\t\tmap.from(properties.isSkipDefaultCallbacks()).to(configuration::skipDefaultCallbacks);\n\t\t\tmap.from(properties.isSkipDefaultResolvers()).to(configuration::skipDefaultResolvers);\n\t\t\tmap.from(properties.isValidateOnMigrate()).to(configuration::validateOnMigrate);\n\t\t\t// Pro properties\n\t\t\tmap.from(properties.getBatch()).whenNonNull().to(configuration::batch);\n\t\t\tmap.from(properties.getDryRunOutput()).whenNonNull().to(configuration::dryRunOutput);\n\t\t\tmap.from(properties.getErrorOverrides()).whenNonNull().to(configuration::errorOverrides);\n\t\t\tmap.from(properties.getLicenseKey()).whenNonNull().to(configuration::licenseKey);\n\t\t\tmap.from(properties.getOracleSqlplus()).whenNonNull().to(configuration::oracleSqlplus);\n\t\t\t// No method reference for compatibility with Flyway 5.x\n\t\t\tmap.from(properties.getOracleSqlplusWarn()).whenNonNull()\n\t\t\t\t\t.to((oracleSqlplusWarn) -> configuration.oracleSqlplusWarn(oracleSqlplusWarn));\n\t\t\tmap.from(properties.getStream()).whenNonNull().to(configuration::stream);\n\t\t\tmap.from(properties.getUndoSqlMigrationPrefix()).whenNonNull().to(configuration::undoSqlMigrationPrefix);\n\t\t}\n\n\t\tprivate void configureCallbacks(FluentConfiguration configuration, List<Callback> callbacks) {\n\t\t\tif (!callbacks.isEmpty()) {\n\t\t\t\tconfiguration.callbacks(callbacks.toArray(new Callback[0]));\n\t\t\t}\n\t\t}\n\n\t\tprivate void configureFlywayCallbacks(FluentConfiguration flyway, List<Callback> callbacks) {\n\t\t\tif (!callbacks.isEmpty()) {\n\t\t\t\tflyway.callbacks(callbacks.toArray(new Callback[0]));\n\t\t\t}\n\t\t}\n\n\t\tprivate void configureJavaMigrations(FluentConfiguration flyway, List<JavaMigration> migrations) {\n\t\t\tif (!migrations.isEmpty()) {\n\t\t\t\ttry {\n\t\t\t\t\tflyway.javaMigrations(migrations.toArray(new JavaMigration[0]));\n\t\t\t\t}\n\t\t\t\tcatch (NoSuchMethodError ex) {\n\t\t\t\t\t// Flyway 5.x\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tprivate String getProperty(Supplier<String> property, Supplier<String> defaultValue) {\n\t\t\tString value = property.get();\n\t\t\treturn (value != null) ? value : defaultValue.get();\n\t\t}\n\n\t\tprivate boolean hasAtLeastOneLocation(ResourceLoader resourceLoader, Collection<String> locations) {\n\t\t\tfor (String location : locations) {\n\t\t\t\tif (resourceLoader.getResource(normalizePrefix(location)).exists()) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tprivate String normalizePrefix(String location) {\n\t\t\treturn location.replace("filesystem:", "file:");\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic FlywayMigrationInitializer flywayInitializer(Flyway flyway,\n\t\t\t\tObjectProvider<FlywayMigrationStrategy> migrationStrategy) {\n\t\t\treturn new FlywayMigrationInitializer(flyway, migrationStrategy.getIfAvailable());\n\t\t}\n\n\t\t/**\n\t\t * Additional configuration to ensure that {@link EntityManagerFactory} beans\n\t\t * depend on any {@link FlywayMigrationInitializer} beans.\n\t\t */\n\t\t@Configuration(proxyBeanMethods = false)\n\t\t@ConditionalOnClass(LocalContainerEntityManagerFactoryBean.class)\n\t\t@ConditionalOnBean(AbstractEntityManagerFactoryBean.class)\n\t\tprotected static class FlywayInitializerJpaDependencyConfiguration\n\t\t\t\textends EntityManagerFactoryDependsOnPostProcessor {\n\n\t\t\tpublic FlywayInitializerJpaDependencyConfiguration() {\n\t\t\t\tsuper(FlywayMigrationInitializer.class);\n\t\t\t}\n\n\t\t}\n\n\t\t/**\n\t\t * Additional configuration to ensure that {@link JdbcOperations} beans depend on\n\t\t * any {@link FlywayMigrationInitializer} beans.\n\t\t */\n\t\t@Configuration(proxyBeanMethods = false)\n\t\t@ConditionalOnClass(JdbcOperations.class)\n\t\t@ConditionalOnBean(JdbcOperations.class)\n\t\tprotected static class FlywayInitializerJdbcOperationsDependencyConfiguration\n\t\t\t\textends JdbcOperationsDependsOnPostProcessor {\n\n\t\t\tpublic FlywayInitializerJdbcOperationsDependencyConfiguration() {\n\t\t\t\tsuper(FlywayMigrationInitializer.class);\n\t\t\t}\n\n\t\t}\n\n\t\t/**\n\t\t * Additional configuration to ensure that {@link NamedParameterJdbcOperations}\n\t\t * beans depend on any {@link FlywayMigrationInitializer} beans.\n\t\t */\n\t\t@Configuration(proxyBeanMethods = false)\n\t\t@ConditionalOnClass(NamedParameterJdbcOperations.class)\n\t\t@ConditionalOnBean(NamedParameterJdbcOperations.class)\n\t\tprotected static class FlywayInitializerNamedParameterJdbcOperationsDependencyConfiguration\n\t\t\t\textends NamedParameterJdbcOperationsDependsOnPostProcessor {\n\n\t\t\tpublic FlywayInitializerNamedParameterJdbcOperationsDependencyConfiguration() {\n\t\t\t\tsuper(FlywayMigrationInitializer.class);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Additional configuration to ensure that {@link EntityManagerFactory} beans depend\n\t * on any {@link Flyway} beans.\n\t */\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnClass(LocalContainerEntityManagerFactoryBean.class)\n\t@ConditionalOnBean(AbstractEntityManagerFactoryBean.class)\n\tprotected static class FlywayJpaDependencyConfiguration extends EntityManagerFactoryDependsOnPostProcessor {\n\n\t\tpublic FlywayJpaDependencyConfiguration() {\n\t\t\tsuper(Flyway.class);\n\t\t}\n\n\t}\n\n\t/**\n\t * Additional configuration to ensure that {@link JdbcOperations} beans depend on any\n\t * {@link Flyway} beans.\n\t */\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnClass(JdbcOperations.class)\n\t@ConditionalOnBean(JdbcOperations.class)\n\tprotected static class FlywayJdbcOperationsDependencyConfiguration extends JdbcOperationsDependsOnPostProcessor {\n\n\t\tpublic FlywayJdbcOperationsDependencyConfiguration() {\n\t\t\tsuper(Flyway.class);\n\t\t}\n\n\t}\n\n\t/**\n\t * Additional configuration to ensure that {@link NamedParameterJdbcOperations} beans\n\t * depend on any {@link Flyway} beans.\n\t */\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnClass(NamedParameterJdbcOperations.class)\n\t@ConditionalOnBean(NamedParameterJdbcOperations.class)\n\tprotected static class FlywayNamedParameterJdbcOperationsDependencyConfiguration\n\t\t\textends NamedParameterJdbcOperationsDependsOnPostProcessor {\n\n\t\tpublic FlywayNamedParameterJdbcOperationsDependencyConfiguration() {\n\t\t\tsuper(Flyway.class);\n\t\t}\n\n\t}\n\n\tprivate static class LocationResolver {\n\n\t\tprivate static final String VENDOR_PLACEHOLDER = "{vendor}";\n\n\t\tprivate final DataSource dataSource;\n\n\t\tLocationResolver(DataSource dataSource) {\n\t\t\tthis.dataSource = dataSource;\n\t\t}\n\n\t\tList<String> resolveLocations(List<String> locations) {\n\t\t\tif (usesVendorLocation(locations)) {\n\t\t\t\tDatabaseDriver databaseDriver = getDatabaseDriver();\n\t\t\t\treturn replaceVendorLocations(locations, databaseDriver);\n\t\t\t}\n\t\t\treturn locations;\n\t\t}\n\n\t\tprivate List<String> replaceVendorLocations(List<String> locations, DatabaseDriver databaseDriver) {\n\t\t\tif (databaseDriver == DatabaseDriver.UNKNOWN) {\n\t\t\t\treturn locations;\n\t\t\t}\n\t\t\tString vendor = databaseDriver.getId();\n\t\t\treturn locations.stream().map((location) -> location.replace(VENDOR_PLACEHOLDER, vendor))\n\t\t\t\t\t.collect(Collectors.toList());\n\t\t}\n\n\t\tprivate DatabaseDriver getDatabaseDriver() {\n\t\t\ttry {\n\t\t\t\tString url = JdbcUtils.extractDatabaseMetaData(this.dataSource, "getURL");\n\t\t\t\treturn DatabaseDriver.fromJdbcUrl(url);\n\t\t\t}\n\t\t\tcatch (MetaDataAccessException ex) {\n\t\t\t\tthrow new IllegalStateException(ex);\n\t\t\t}\n\n\t\t}\n\n\t\tprivate boolean usesVendorLocation(Collection<String> locations) {\n\t\t\tfor (String location : locations) {\n\t\t\t\tif (location.contains(VENDOR_PLACEHOLDER)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t}\n\n\t/**\n\t * Convert a String or Number to a {@link MigrationVersion}.\n\t */\n\tprivate static class StringOrNumberToMigrationVersionConverter implements GenericConverter {\n\n\t\tprivate static final Set<ConvertiblePair> CONVERTIBLE_TYPES;\n\n\t\tstatic {\n\t\t\tSet<ConvertiblePair> types = new HashSet<>(2);\n\t\t\ttypes.add(new ConvertiblePair(String.class, MigrationVersion.class));\n\t\t\ttypes.add(new ConvertiblePair(Number.class, MigrationVersion.class));\n\t\t\tCONVERTIBLE_TYPES = Collections.unmodifiableSet(types);\n\t\t}\n\n\t\t@Override\n\t\tpublic Set<ConvertiblePair> getConvertibleTypes() {\n\t\t\treturn CONVERTIBLE_TYPES;\n\t\t}\n\n\t\t@Override\n\t\tpublic Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\t\tString value = ObjectUtils.nullSafeToString(source);\n\t\t\treturn MigrationVersion.fromVersion(value);\n\t\t}\n\n\t}\n\n\tstatic final class FlywayDataSourceCondition extends AnyNestedCondition {\n\n\t\tFlywayDataSourceCondition() {\n\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n\t\t}\n\n\t\t@ConditionalOnBean(DataSource.class)\n\t\tprivate static final class DataSourceBeanCondition {\n\n\t\t}\n\n\t\t@ConditionalOnProperty(prefix = "spring.flyway", name = "url", matchIfMissing = false)\n\t\tprivate static final class FlywayUrlCondition {\n\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
