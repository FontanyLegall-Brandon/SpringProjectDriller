{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/reactive/ReactiveOAuth2ResourceServerJwkConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/reactive/ReactiveOAuth2ResourceServerJwkConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -17,16 +17,20 @@ package org.springframework.boot.autoconfigure.security.oauth2.resource.reactive\n \n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.security.oauth2.resource.IssuerUriCondition;\n import org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ResourceServerProperties;\n import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder;\n import org.springframework.security.oauth2.jwt.ReactiveJwtDecoder;\n+import org.springframework.security.oauth2.jwt.ReactiveJwtDecoders;\n \n /**\n  * Configures a {@link ReactiveJwtDecoder} when a JWK Set URI is available.\n  *\n  * @author Madhura Bhave\n+ * @author Artsiom Yudovin\n  */\n @Configuration\n class ReactiveOAuth2ResourceServerJwkConfiguration {\n@@ -45,4 +49,12 @@ class ReactiveOAuth2ResourceServerJwkConfiguration {\n \t\treturn new NimbusReactiveJwtDecoder(this.properties.getJwt().getJwkSetUri());\n \t}\n \n+\t@Bean\n+\t@Conditional(IssuerUriCondition.class)\n+\t@ConditionalOnMissingBean\n+\tpublic ReactiveJwtDecoder jwtDecoderByIssuerUri() {\n+\t\treturn ReactiveJwtDecoders\n+\t\t\t\t.fromOidcIssuerLocation(this.properties.getJwt().getIssuerUri());\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.boot.autoconfigure.security.oauth2.resource.reactive;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.security.oauth2.resource.IssuerUriCondition;\nimport org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ResourceServerProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder;\nimport org.springframework.security.oauth2.jwt.ReactiveJwtDecoder;\nimport org.springframework.security.oauth2.jwt.ReactiveJwtDecoders;\n\n/**\n * Configures a {@link ReactiveJwtDecoder} when a JWK Set URI is available.\n *\n * @author Madhura Bhave\n * @author Artsiom Yudovin\n */\n@Configuration\nclass ReactiveOAuth2ResourceServerJwkConfiguration {\n\n\tprivate final OAuth2ResourceServerProperties properties;\n\n\tReactiveOAuth2ResourceServerJwkConfiguration(\n\t\t\tOAuth2ResourceServerProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@ConditionalOnProperty(name = "spring.security.oauth2.resourceserver.jwt.jwk-set-uri")\n\t@ConditionalOnMissingBean\n\tpublic ReactiveJwtDecoder jwtDecoder() {\n\t\treturn new NimbusReactiveJwtDecoder(this.properties.getJwt().getJwkSetUri());\n\t}\n\n\t@Bean\n\t@Conditional(IssuerUriCondition.class)\n\t@ConditionalOnMissingBean\n\tpublic ReactiveJwtDecoder jwtDecoderByIssuerUri() {\n\t\treturn ReactiveJwtDecoders\n\t\t\t\t.fromOidcIssuerLocation(this.properties.getJwt().getIssuerUri());\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.boot.autoconfigure.security.oauth2.resource.reactive;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ResourceServerProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder;\nimport org.springframework.security.oauth2.jwt.ReactiveJwtDecoder;\n\n/**\n * Configures a {@link ReactiveJwtDecoder} when a JWK Set URI is available.\n *\n * @author Madhura Bhave\n */\n@Configuration\nclass ReactiveOAuth2ResourceServerJwkConfiguration {\n\n\tprivate final OAuth2ResourceServerProperties properties;\n\n\tReactiveOAuth2ResourceServerJwkConfiguration(\n\t\t\tOAuth2ResourceServerProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@ConditionalOnProperty(name = "spring.security.oauth2.resourceserver.jwt.jwk-set-uri")\n\t@ConditionalOnMissingBean\n\tpublic ReactiveJwtDecoder jwtDecoder() {\n\t\treturn new NimbusReactiveJwtDecoder(this.properties.getJwt().getJwkSetUri());\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
