{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/servlet/OAuth2ResourceServerOpaqueTokenConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/servlet/OAuth2ResourceServerOpaqueTokenConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -41,10 +41,10 @@ class OAuth2ResourceServerOpaqueTokenConfiguration {\n \tstatic class OpaqueTokenIntrospectionClientConfiguration {\n \n \t\t@Bean\n-\t\t@ConditionalOnProperty(name = "spring.security.oauth2.resourceserver.opaque-token.introspection-uri")\n+\t\t@ConditionalOnProperty(name = "spring.security.oauth2.resourceserver.opaquetoken.introspection-uri")\n \t\tpublic NimbusOAuth2TokenIntrospectionClient oAuth2TokenIntrospectionClient(\n \t\t\t\tOAuth2ResourceServerProperties properties) {\n-\t\t\tOAuth2ResourceServerProperties.OpaqueToken opaqueToken = properties.getOpaqueToken();\n+\t\t\tOAuth2ResourceServerProperties.Opaquetoken opaqueToken = properties.getOpaquetoken();\n \t\t\treturn new NimbusOAuth2TokenIntrospectionClient(opaqueToken.getIntrospectionUri(),\n \t\t\t\t\topaqueToken.getClientId(), opaqueToken.getClientSecret());\n \t\t}\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.boot.autoconfigure.security.oauth2.resource.servlet;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ResourceServerProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.oauth2.server.resource.introspection.NimbusOAuth2TokenIntrospectionClient;\nimport org.springframework.security.oauth2.server.resource.introspection.OAuth2TokenIntrospectionClient;\n\n/**\n * Configures a {@link OAuth2TokenIntrospectionClient} when a token introspection endpoint\n * is available. Also configures a {@link WebSecurityConfigurerAdapter} if a\n * {@link OAuth2TokenIntrospectionClient} bean is found.\n *\n * @author Madhura Bhave\n */\n@Configuration(proxyBeanMethods = false)\nclass OAuth2ResourceServerOpaqueTokenConfiguration {\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnMissingBean(OAuth2TokenIntrospectionClient.class)\n\tstatic class OpaqueTokenIntrospectionClientConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnProperty(name = "spring.security.oauth2.resourceserver.opaquetoken.introspection-uri")\n\t\tpublic NimbusOAuth2TokenIntrospectionClient oAuth2TokenIntrospectionClient(\n\t\t\t\tOAuth2ResourceServerProperties properties) {\n\t\t\tOAuth2ResourceServerProperties.Opaquetoken opaqueToken = properties.getOpaquetoken();\n\t\t\treturn new NimbusOAuth2TokenIntrospectionClient(opaqueToken.getIntrospectionUri(),\n\t\t\t\t\topaqueToken.getClientId(), opaqueToken.getClientSecret());\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnMissingBean(WebSecurityConfigurerAdapter.class)\n\tstatic class OAuth2WebSecurityConfigurerAdapter {\n\n\t\t@Bean\n\t\t@ConditionalOnBean(OAuth2TokenIntrospectionClient.class)\n\t\tpublic WebSecurityConfigurerAdapter opaqueTokenWebSecurityConfigurerAdapter() {\n\t\t\treturn new WebSecurityConfigurerAdapter() {\n\t\t\t\t@Override\n\t\t\t\tprotected void configure(HttpSecurity http) throws Exception {\n\t\t\t\t\thttp.authorizeRequests().anyRequest().authenticated().and().oauth2ResourceServer().opaqueToken();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.boot.autoconfigure.security.oauth2.resource.servlet;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ResourceServerProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.oauth2.server.resource.introspection.NimbusOAuth2TokenIntrospectionClient;\nimport org.springframework.security.oauth2.server.resource.introspection.OAuth2TokenIntrospectionClient;\n\n/**\n * Configures a {@link OAuth2TokenIntrospectionClient} when a token introspection endpoint\n * is available. Also configures a {@link WebSecurityConfigurerAdapter} if a\n * {@link OAuth2TokenIntrospectionClient} bean is found.\n *\n * @author Madhura Bhave\n */\n@Configuration(proxyBeanMethods = false)\nclass OAuth2ResourceServerOpaqueTokenConfiguration {\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnMissingBean(OAuth2TokenIntrospectionClient.class)\n\tstatic class OpaqueTokenIntrospectionClientConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnProperty(name = "spring.security.oauth2.resourceserver.opaque-token.introspection-uri")\n\t\tpublic NimbusOAuth2TokenIntrospectionClient oAuth2TokenIntrospectionClient(\n\t\t\t\tOAuth2ResourceServerProperties properties) {\n\t\t\tOAuth2ResourceServerProperties.OpaqueToken opaqueToken = properties.getOpaqueToken();\n\t\t\treturn new NimbusOAuth2TokenIntrospectionClient(opaqueToken.getIntrospectionUri(),\n\t\t\t\t\topaqueToken.getClientId(), opaqueToken.getClientSecret());\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnMissingBean(WebSecurityConfigurerAdapter.class)\n\tstatic class OAuth2WebSecurityConfigurerAdapter {\n\n\t\t@Bean\n\t\t@ConditionalOnBean(OAuth2TokenIntrospectionClient.class)\n\t\tpublic WebSecurityConfigurerAdapter opaqueTokenWebSecurityConfigurerAdapter() {\n\t\t\treturn new WebSecurityConfigurerAdapter() {\n\t\t\t\t@Override\n\t\t\t\tprotected void configure(HttpSecurity http) throws Exception {\n\t\t\t\t\thttp.authorizeRequests().anyRequest().authenticated().and().oauth2ResourceServer().opaqueToken();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
