@@ -14,28 +14,19 @@
  * limitations under the License.
  */
 
-package org.springframework.boot.autoconfigure.security.oauth2.client;
+package org.springframework.boot.autoconfigure.security.oauth2.client.servlet;
 
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.List;
-import java.util.Map;
-import java.util.stream.Collectors;
 
-import org.springframework.boot.autoconfigure.condition.ConditionMessage;
-import org.springframework.boot.autoconfigure.condition.ConditionOutcome;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
-import org.springframework.boot.autoconfigure.condition.SpringBootCondition;
-import org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties.Registration;
+import org.springframework.boot.autoconfigure.security.oauth2.client.ClientsConfiguredCondition;
+import org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties;
+import org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
-import org.springframework.boot.context.properties.bind.Bindable;
-import org.springframework.boot.context.properties.bind.Binder;
 import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.ConditionContext;
 import org.springframework.context.annotation.Conditional;
 import org.springframework.context.annotation.Configuration;
-import org.springframework.core.env.Environment;
-import org.springframework.core.type.AnnotatedTypeMetadata;
 import org.springframework.security.oauth2.client.registration.ClientRegistration;
 import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;
 import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;
@@ -45,11 +36,10 @@ import org.springframework.security.oauth2.client.registration.InMemoryClientReg
  * registrations.
  *
  * @author Madhura Bhave
- * @author Phillip Webb
  */
 @Configuration
 @EnableConfigurationProperties(OAuth2ClientProperties.class)
-@Conditional(OAuth2ClientRegistrationRepositoryConfiguration.ClientsConfiguredCondition.class)
+@Conditional(ClientsConfiguredCondition.class)
 class OAuth2ClientRegistrationRepositoryConfiguration {
 
 	private final OAuth2ClientProperties properties;
@@ -67,38 +57,4 @@ class OAuth2ClientRegistrationRepositoryConfiguration {
 		return new InMemoryClientRegistrationRepository(registrations);
 	}
 
-	
-	static class ClientsConfiguredCondition extends SpringBootCondition {
-
-		private static final Bindable<Map<String, Registration>> BINDABLE_REGISTRATION = Bindable
-				.mapOf(String.class, OAuth2ClientProperties.Registration.class);
-
-		@Override
-		public ConditionOutcome getMatchOutcome(ConditionContext context,
-				AnnotatedTypeMetadata metadata) {
-			ConditionMessage.Builder message = ConditionMessage
-					.forCondition();
-			Map<String, Registration> registrations = this
-					.getRegistrations(context.getEnvironment());
-			if (!registrations.isEmpty()) {
-				return ConditionOutcome.match(message.foundExactly(
-						 + registrations.values().stream()
-								.map(OAuth2ClientProperties.Registration::getClientId)
-								.collect(Collectors.joining())));
-			}
-			return ConditionOutcome.noMatch(message.notAvailable());
-		}
-
-		private Map<String, Registration> getRegistrations(Environment environment) {
-			return Binder.get(environment)
-					.bind(,
-							BINDABLE_REGISTRATION)
-					.orElse(Collections.emptyMap());
-		}
-
-	}
-
 }

