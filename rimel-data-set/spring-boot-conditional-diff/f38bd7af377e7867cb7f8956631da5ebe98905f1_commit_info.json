{'_old_path': PosixPath('spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/json/JsonTestersAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/json/JsonTestersAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -66,27 +66,36 @@ public class JsonTestersAutoConfiguration {\n \t\t\t\tnull);\n \t}\n \n-\t@Bean\n-\t@Scope("prototype")\n \t@ConditionalOnClass(ObjectMapper.class)\n-\t@ConditionalOnBean(ObjectMapper.class)\n-\tpublic FactoryBean<JacksonTester<?>> jacksonTesterFactoryBean(ObjectMapper mapper) {\n-\t\treturn new JsonTesterFactoryBean<JacksonTester<?>, ObjectMapper>(\n-\t\t\t\tJacksonTester.class, mapper);\n+\tprivate static class JacksonJsonTestersConfiguration {\n+\n+\t\t@Bean\n+\t\t@Scope("prototype")\n+\t\t@ConditionalOnBean(ObjectMapper.class)\n+\t\tpublic FactoryBean<JacksonTester<?>> jacksonTesterFactoryBean(\n+\t\t\t\tObjectMapper mapper) {\n+\t\t\treturn new JsonTesterFactoryBean<JacksonTester<?>, ObjectMapper>(\n+\t\t\t\t\tJacksonTester.class, mapper);\n+\t\t}\n+\n \t}\n \n-\t@Bean\n-\t@Scope("prototype")\n \t@ConditionalOnClass(Gson.class)\n-\t@ConditionalOnBean(Gson.class)\n-\tpublic FactoryBean<GsonTester<?>> gsonTesterFactoryBean(Gson gson) {\n-\t\treturn new JsonTesterFactoryBean<GsonTester<?>, Gson>(GsonTester.class, gson);\n+\tprivate static class GsonJsonTestersConfiguration {\n+\n+\t\t@Bean\n+\t\t@Scope("prototype")\n+\t\t@ConditionalOnBean(Gson.class)\n+\t\tpublic FactoryBean<GsonTester<?>> gsonTesterFactoryBean(Gson gson) {\n+\t\t\treturn new JsonTesterFactoryBean<GsonTester<?>, Gson>(GsonTester.class, gson);\n+\t\t}\n+\n \t}\n \n \t/**\n \t * {@link FactoryBean} used to create JSON Tester instances.\n \t */\n-\tprivate class JsonTesterFactoryBean<T, M> implements FactoryBean<T> {\n+\tprivate static class JsonTesterFactoryBean<T, M> implements FactoryBean<T> {\n \n \t\tprivate final Class<?> objectType;\n \n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.test.autoconfigure.json;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.google.gson.Gson;\n\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.FactoryBean;\nimport org.springframework.beans.factory.config.BeanPostProcessor;\nimport org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessorAdapter;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.test.json.AbstractJsonMarshalTester;\nimport org.springframework.boot.test.json.BasicJsonTester;\nimport org.springframework.boot.test.json.GsonTester;\nimport org.springframework.boot.test.json.JacksonTester;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.core.ResolvableType;\nimport org.springframework.test.util.ReflectionTestUtils;\nimport org.springframework.util.ReflectionUtils;\nimport org.springframework.util.ReflectionUtils.FieldCallback;\n\n/**\n * Auto-configuration for Json testers.\n *\n * @author Phillip Webb\n * @see AutoConfigureJsonTesters\n * @since 1.4.0\n */\n@Configuration\n@ConditionalOnClass(name = "org.assertj.core.api.Assert")\n@ConditionalOnProperty("spring.test.jsontesters.enabled")\npublic class JsonTestersAutoConfiguration {\n\n\t@Bean\n\tpublic static JsonMarshalTestersBeanPostProcessor jsonMarshalTestersBeanPostProcessor() {\n\t\treturn new JsonMarshalTestersBeanPostProcessor();\n\t}\n\n\t@Bean\n\t@Scope("prototype")\n\tpublic FactoryBean<BasicJsonTester> BasicJsonTesterFactoryBean() {\n\t\treturn new JsonTesterFactoryBean<BasicJsonTester, Void>(BasicJsonTester.class,\n\t\t\t\tnull);\n\t}\n\n\t@ConditionalOnClass(ObjectMapper.class)\n\tprivate static class JacksonJsonTestersConfiguration {\n\n\t\t@Bean\n\t\t@Scope("prototype")\n\t\t@ConditionalOnBean(ObjectMapper.class)\n\t\tpublic FactoryBean<JacksonTester<?>> jacksonTesterFactoryBean(\n\t\t\t\tObjectMapper mapper) {\n\t\t\treturn new JsonTesterFactoryBean<JacksonTester<?>, ObjectMapper>(\n\t\t\t\t\tJacksonTester.class, mapper);\n\t\t}\n\n\t}\n\n\t@ConditionalOnClass(Gson.class)\n\tprivate static class GsonJsonTestersConfiguration {\n\n\t\t@Bean\n\t\t@Scope("prototype")\n\t\t@ConditionalOnBean(Gson.class)\n\t\tpublic FactoryBean<GsonTester<?>> gsonTesterFactoryBean(Gson gson) {\n\t\t\treturn new JsonTesterFactoryBean<GsonTester<?>, Gson>(GsonTester.class, gson);\n\t\t}\n\n\t}\n\n\t/**\n\t * {@link FactoryBean} used to create JSON Tester instances.\n\t */\n\tprivate static class JsonTesterFactoryBean<T, M> implements FactoryBean<T> {\n\n\t\tprivate final Class<?> objectType;\n\n\t\tprivate final M marshaller;\n\n\t\tJsonTesterFactoryBean(Class<?> objectType, M marshaller) {\n\t\t\tthis.objectType = objectType;\n\t\t\tthis.marshaller = marshaller;\n\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean isSingleton() {\n\t\t\treturn false;\n\t\t}\n\n\t\t@Override\n\t\t@SuppressWarnings("unchecked")\n\t\tpublic T getObject() throws Exception {\n\t\t\tif (this.marshaller == null) {\n\t\t\t\tConstructor<?> constructor = this.objectType.getDeclaredConstructor();\n\t\t\t\tReflectionUtils.makeAccessible(constructor);\n\t\t\t\treturn (T) BeanUtils.instantiateClass(constructor);\n\t\t\t}\n\t\t\tConstructor<?>[] constructors = this.objectType.getDeclaredConstructors();\n\t\t\tfor (Constructor<?> constructor : constructors) {\n\t\t\t\tif (constructor.getParameterTypes().length == 1\n\t\t\t\t\t\t&& constructor.getParameterTypes()[0]\n\t\t\t\t\t\t\t\t.isInstance(this.marshaller)) {\n\t\t\t\t\tReflectionUtils.makeAccessible(constructor);\n\t\t\t\t\treturn (T) BeanUtils.instantiateClass(constructor, this.marshaller);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\tthis.objectType + " does not have a usable constructor");\n\t\t}\n\n\t\t@Override\n\t\tpublic Class<?> getObjectType() {\n\t\t\treturn this.objectType;\n\t\t}\n\n\t}\n\n\t/**\n\t * {@link BeanPostProcessor} used to initialize JSON testers.\n\t */\n\tprivate static class JsonMarshalTestersBeanPostProcessor\n\t\t\textends InstantiationAwareBeanPostProcessorAdapter {\n\n\t\t@Override\n\t\tpublic Object postProcessAfterInitialization(final Object bean, String beanName)\n\t\t\t\tthrows BeansException {\n\n\t\t\tReflectionUtils.doWithFields(bean.getClass(), new FieldCallback() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void doWith(Field field)\n\t\t\t\t\t\tthrows IllegalArgumentException, IllegalAccessException {\n\t\t\t\t\tprocessFiled(bean, field);\n\t\t\t\t}\n\n\t\t\t});\n\t\t\treturn bean;\n\t\t}\n\n\t\tprivate void processFiled(Object bean, Field field) {\n\t\t\tif (AbstractJsonMarshalTester.class.isAssignableFrom(field.getType())\n\t\t\t\t\t|| BasicJsonTester.class.isAssignableFrom(field.getType())) {\n\t\t\t\tResolvableType type = ResolvableType.forField(field).getGeneric();\n\t\t\t\tReflectionUtils.makeAccessible(field);\n\t\t\t\tObject tester = ReflectionUtils.getField(field, bean);\n\t\t\t\tif (tester != null) {\n\t\t\t\t\tReflectionTestUtils.invokeMethod(tester, "initialize",\n\t\t\t\t\t\t\tbean.getClass(), type);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.test.autoconfigure.json;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.google.gson.Gson;\n\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.FactoryBean;\nimport org.springframework.beans.factory.config.BeanPostProcessor;\nimport org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessorAdapter;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.test.json.AbstractJsonMarshalTester;\nimport org.springframework.boot.test.json.BasicJsonTester;\nimport org.springframework.boot.test.json.GsonTester;\nimport org.springframework.boot.test.json.JacksonTester;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.core.ResolvableType;\nimport org.springframework.test.util.ReflectionTestUtils;\nimport org.springframework.util.ReflectionUtils;\nimport org.springframework.util.ReflectionUtils.FieldCallback;\n\n/**\n * Auto-configuration for Json testers.\n *\n * @author Phillip Webb\n * @see AutoConfigureJsonTesters\n * @since 1.4.0\n */\n@Configuration\n@ConditionalOnClass(name = "org.assertj.core.api.Assert")\n@ConditionalOnProperty("spring.test.jsontesters.enabled")\npublic class JsonTestersAutoConfiguration {\n\n\t@Bean\n\tpublic static JsonMarshalTestersBeanPostProcessor jsonMarshalTestersBeanPostProcessor() {\n\t\treturn new JsonMarshalTestersBeanPostProcessor();\n\t}\n\n\t@Bean\n\t@Scope("prototype")\n\tpublic FactoryBean<BasicJsonTester> BasicJsonTesterFactoryBean() {\n\t\treturn new JsonTesterFactoryBean<BasicJsonTester, Void>(BasicJsonTester.class,\n\t\t\t\tnull);\n\t}\n\n\t@Bean\n\t@Scope("prototype")\n\t@ConditionalOnClass(ObjectMapper.class)\n\t@ConditionalOnBean(ObjectMapper.class)\n\tpublic FactoryBean<JacksonTester<?>> jacksonTesterFactoryBean(ObjectMapper mapper) {\n\t\treturn new JsonTesterFactoryBean<JacksonTester<?>, ObjectMapper>(\n\t\t\t\tJacksonTester.class, mapper);\n\t}\n\n\t@Bean\n\t@Scope("prototype")\n\t@ConditionalOnClass(Gson.class)\n\t@ConditionalOnBean(Gson.class)\n\tpublic FactoryBean<GsonTester<?>> gsonTesterFactoryBean(Gson gson) {\n\t\treturn new JsonTesterFactoryBean<GsonTester<?>, Gson>(GsonTester.class, gson);\n\t}\n\n\t/**\n\t * {@link FactoryBean} used to create JSON Tester instances.\n\t */\n\tprivate class JsonTesterFactoryBean<T, M> implements FactoryBean<T> {\n\n\t\tprivate final Class<?> objectType;\n\n\t\tprivate final M marshaller;\n\n\t\tJsonTesterFactoryBean(Class<?> objectType, M marshaller) {\n\t\t\tthis.objectType = objectType;\n\t\t\tthis.marshaller = marshaller;\n\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean isSingleton() {\n\t\t\treturn false;\n\t\t}\n\n\t\t@Override\n\t\t@SuppressWarnings("unchecked")\n\t\tpublic T getObject() throws Exception {\n\t\t\tif (this.marshaller == null) {\n\t\t\t\tConstructor<?> constructor = this.objectType.getDeclaredConstructor();\n\t\t\t\tReflectionUtils.makeAccessible(constructor);\n\t\t\t\treturn (T) BeanUtils.instantiateClass(constructor);\n\t\t\t}\n\t\t\tConstructor<?>[] constructors = this.objectType.getDeclaredConstructors();\n\t\t\tfor (Constructor<?> constructor : constructors) {\n\t\t\t\tif (constructor.getParameterTypes().length == 1\n\t\t\t\t\t\t&& constructor.getParameterTypes()[0]\n\t\t\t\t\t\t\t\t.isInstance(this.marshaller)) {\n\t\t\t\t\tReflectionUtils.makeAccessible(constructor);\n\t\t\t\t\treturn (T) BeanUtils.instantiateClass(constructor, this.marshaller);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\tthis.objectType + " does not have a usable constructor");\n\t\t}\n\n\t\t@Override\n\t\tpublic Class<?> getObjectType() {\n\t\t\treturn this.objectType;\n\t\t}\n\n\t}\n\n\t/**\n\t * {@link BeanPostProcessor} used to initialize JSON testers.\n\t */\n\tprivate static class JsonMarshalTestersBeanPostProcessor\n\t\t\textends InstantiationAwareBeanPostProcessorAdapter {\n\n\t\t@Override\n\t\tpublic Object postProcessAfterInitialization(final Object bean, String beanName)\n\t\t\t\tthrows BeansException {\n\n\t\t\tReflectionUtils.doWithFields(bean.getClass(), new FieldCallback() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void doWith(Field field)\n\t\t\t\t\t\tthrows IllegalArgumentException, IllegalAccessException {\n\t\t\t\t\tprocessFiled(bean, field);\n\t\t\t\t}\n\n\t\t\t});\n\t\t\treturn bean;\n\t\t}\n\n\t\tprivate void processFiled(Object bean, Field field) {\n\t\t\tif (AbstractJsonMarshalTester.class.isAssignableFrom(field.getType())\n\t\t\t\t\t|| BasicJsonTester.class.isAssignableFrom(field.getType())) {\n\t\t\t\tResolvableType type = ResolvableType.forField(field).getGeneric();\n\t\t\t\tReflectionUtils.makeAccessible(field);\n\t\t\t\tObject tester = ReflectionUtils.getField(field, bean);\n\t\t\t\tif (tester != null) {\n\t\t\t\t\tReflectionTestUtils.invokeMethod(tester, "initialize",\n\t\t\t\t\t\t\tbean.getClass(), type);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
