{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -21,8 +21,6 @@ import javax.management.MBeanServer;\n import org.springframework.beans.BeansException;\n import org.springframework.beans.factory.BeanFactory;\n import org.springframework.beans.factory.BeanFactoryAware;\n-import org.springframework.beans.factory.ObjectProvider;\n-import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n@@ -35,6 +33,7 @@ import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.core.env.Environment;\n import org.springframework.integration.config.EnableIntegration;\n+import org.springframework.integration.config.EnableIntegrationManagement;\n import org.springframework.integration.jmx.config.EnableIntegrationMBeanExport;\n import org.springframework.integration.monitor.IntegrationMBeanExporter;\n import org.springframework.integration.support.management.IntegrationManagementConfigurer;\n@@ -67,17 +66,10 @@ public class IntegrationAutoConfiguration {\n \tprotected static class IntegrationJmxConfiguration\n \t\t\timplements EnvironmentAware, BeanFactoryAware {\n \n-\t\tprivate final IntegrationManagementConfigurer configurer;\n-\n \t\tprivate BeanFactory beanFactory;\n \n \t\tprivate RelaxedPropertyResolver propertyResolver;\n \n-\t\tprotected IntegrationJmxConfiguration(\n-\t\t\t\t@Qualifier(IntegrationManagementConfigurer.MANAGEMENT_CONFIGURER_NAME) ObjectProvider<IntegrationManagementConfigurer> configurerProvider) {\n-\t\t\tthis.configurer = configurerProvider.getIfAvailable();\n-\t\t}\n-\n \t\t@Override\n \t\tpublic void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n \t\t\tthis.beanFactory = beanFactory;\n@@ -100,17 +92,25 @@ public class IntegrationAutoConfiguration {\n \t\t\tif (StringUtils.hasLength(server)) {\n \t\t\t\texporter.setServer(this.beanFactory.getBean(server, MBeanServer.class));\n \t\t\t}\n-\t\t\tif (this.configurer != null) {\n-\t\t\t\tif (this.configurer.getDefaultCountsEnabled() == null) {\n-\t\t\t\t\tthis.configurer.setDefaultCountsEnabled(true);\n-\t\t\t\t}\n-\t\t\t\tif (this.configurer.getDefaultStatsEnabled() == null) {\n-\t\t\t\t\tthis.configurer.setDefaultStatsEnabled(true);\n-\t\t\t\t}\n-\t\t\t}\n \t\t\treturn exporter;\n \t\t}\n \n \t}\n \n+\t@Configuration\n+\t@ConditionalOnClass({EnableIntegrationManagement.class, EnableIntegrationMBeanExport.class})\n+\t@ConditionalOnMissingBean(value = IntegrationManagementConfigurer.class,\n+\t\t\tname = IntegrationManagementConfigurer.MANAGEMENT_CONFIGURER_NAME,\n+\t\t\tsearch = SearchStrategy.CURRENT)\n+\t@ConditionalOnProperty(prefix = "spring.jmx", name = "enabled", havingValue = "true", matchIfMissing = true)\n+\tprotected static class IntegrationManagementConfiguration {\n+\n+\t\t@Configuration\n+\t\t@EnableIntegrationManagement(defaultCountsEnabled = "true", defaultStatsEnabled = "true")\n+\t\tprotected static class EnableIntegrationManagementConfiguration {\n+\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.integration;\n\nimport javax.management.MBeanServer;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration;\nimport org.springframework.boot.bind.RelaxedPropertyResolver;\nimport org.springframework.context.EnvironmentAware;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\nimport org.springframework.integration.config.EnableIntegration;\nimport org.springframework.integration.config.EnableIntegrationManagement;\nimport org.springframework.integration.jmx.config.EnableIntegrationMBeanExport;\nimport org.springframework.integration.monitor.IntegrationMBeanExporter;\nimport org.springframework.integration.support.management.IntegrationManagementConfigurer;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link org.springframework.boot.autoconfigure.EnableAutoConfiguration\n * Auto-configuration} for Spring Integration.\n *\n * @author Artem Bilan\n * @author Dave Syer\n * @author Stephane Nicoll\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass(EnableIntegration.class)\n@AutoConfigureAfter(JmxAutoConfiguration.class)\npublic class IntegrationAutoConfiguration {\n\n\t@Configuration\n\t@EnableIntegration\n\tprotected static class IntegrationConfiguration {\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(EnableIntegrationMBeanExport.class)\n\t@ConditionalOnMissingBean(value = IntegrationMBeanExporter.class, search = SearchStrategy.CURRENT)\n\t@ConditionalOnProperty(prefix = "spring.jmx", name = "enabled", havingValue = "true", matchIfMissing = true)\n\tprotected static class IntegrationJmxConfiguration\n\t\t\timplements EnvironmentAware, BeanFactoryAware {\n\n\t\tprivate BeanFactory beanFactory;\n\n\t\tprivate RelaxedPropertyResolver propertyResolver;\n\n\t\t@Override\n\t\tpublic void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n\t\t\tthis.beanFactory = beanFactory;\n\t\t}\n\n\t\t@Override\n\t\tpublic void setEnvironment(Environment environment) {\n\t\t\tthis.propertyResolver = new RelaxedPropertyResolver(environment,\n\t\t\t\t\t"spring.jmx.");\n\t\t}\n\n\t\t@Bean\n\t\tpublic IntegrationMBeanExporter integrationMbeanExporter() {\n\t\t\tIntegrationMBeanExporter exporter = new IntegrationMBeanExporter();\n\t\t\tString defaultDomain = this.propertyResolver.getProperty("default-domain");\n\t\t\tif (StringUtils.hasLength(defaultDomain)) {\n\t\t\t\texporter.setDefaultDomain(defaultDomain);\n\t\t\t}\n\t\t\tString server = this.propertyResolver.getProperty("server", "mbeanServer");\n\t\t\tif (StringUtils.hasLength(server)) {\n\t\t\t\texporter.setServer(this.beanFactory.getBean(server, MBeanServer.class));\n\t\t\t}\n\t\t\treturn exporter;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({EnableIntegrationManagement.class, EnableIntegrationMBeanExport.class})\n\t@ConditionalOnMissingBean(value = IntegrationManagementConfigurer.class,\n\t\t\tname = IntegrationManagementConfigurer.MANAGEMENT_CONFIGURER_NAME,\n\t\t\tsearch = SearchStrategy.CURRENT)\n\t@ConditionalOnProperty(prefix = "spring.jmx", name = "enabled", havingValue = "true", matchIfMissing = true)\n\tprotected static class IntegrationManagementConfiguration {\n\n\t\t@Configuration\n\t\t@EnableIntegrationManagement(defaultCountsEnabled = "true", defaultStatsEnabled = "true")\n\t\tprotected static class EnableIntegrationManagementConfiguration {\n\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.integration;\n\nimport javax.management.MBeanServer;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration;\nimport org.springframework.boot.bind.RelaxedPropertyResolver;\nimport org.springframework.context.EnvironmentAware;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\nimport org.springframework.integration.config.EnableIntegration;\nimport org.springframework.integration.jmx.config.EnableIntegrationMBeanExport;\nimport org.springframework.integration.monitor.IntegrationMBeanExporter;\nimport org.springframework.integration.support.management.IntegrationManagementConfigurer;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link org.springframework.boot.autoconfigure.EnableAutoConfiguration\n * Auto-configuration} for Spring Integration.\n *\n * @author Artem Bilan\n * @author Dave Syer\n * @author Stephane Nicoll\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass(EnableIntegration.class)\n@AutoConfigureAfter(JmxAutoConfiguration.class)\npublic class IntegrationAutoConfiguration {\n\n\t@Configuration\n\t@EnableIntegration\n\tprotected static class IntegrationConfiguration {\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(EnableIntegrationMBeanExport.class)\n\t@ConditionalOnMissingBean(value = IntegrationMBeanExporter.class, search = SearchStrategy.CURRENT)\n\t@ConditionalOnProperty(prefix = "spring.jmx", name = "enabled", havingValue = "true", matchIfMissing = true)\n\tprotected static class IntegrationJmxConfiguration\n\t\t\timplements EnvironmentAware, BeanFactoryAware {\n\n\t\tprivate final IntegrationManagementConfigurer configurer;\n\n\t\tprivate BeanFactory beanFactory;\n\n\t\tprivate RelaxedPropertyResolver propertyResolver;\n\n\t\tprotected IntegrationJmxConfiguration(\n\t\t\t\t@Qualifier(IntegrationManagementConfigurer.MANAGEMENT_CONFIGURER_NAME) ObjectProvider<IntegrationManagementConfigurer> configurerProvider) {\n\t\t\tthis.configurer = configurerProvider.getIfAvailable();\n\t\t}\n\n\t\t@Override\n\t\tpublic void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n\t\t\tthis.beanFactory = beanFactory;\n\t\t}\n\n\t\t@Override\n\t\tpublic void setEnvironment(Environment environment) {\n\t\t\tthis.propertyResolver = new RelaxedPropertyResolver(environment,\n\t\t\t\t\t"spring.jmx.");\n\t\t}\n\n\t\t@Bean\n\t\tpublic IntegrationMBeanExporter integrationMbeanExporter() {\n\t\t\tIntegrationMBeanExporter exporter = new IntegrationMBeanExporter();\n\t\t\tString defaultDomain = this.propertyResolver.getProperty("default-domain");\n\t\t\tif (StringUtils.hasLength(defaultDomain)) {\n\t\t\t\texporter.setDefaultDomain(defaultDomain);\n\t\t\t}\n\t\t\tString server = this.propertyResolver.getProperty("server", "mbeanServer");\n\t\t\tif (StringUtils.hasLength(server)) {\n\t\t\t\texporter.setServer(this.beanFactory.getBean(server, MBeanServer.class));\n\t\t\t}\n\t\t\tif (this.configurer != null) {\n\t\t\t\tif (this.configurer.getDefaultCountsEnabled() == null) {\n\t\t\t\t\tthis.configurer.setDefaultCountsEnabled(true);\n\t\t\t\t}\n\t\t\t\tif (this.configurer.getDefaultStatsEnabled() == null) {\n\t\t\t\t\tthis.configurer.setDefaultStatsEnabled(true);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn exporter;\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
