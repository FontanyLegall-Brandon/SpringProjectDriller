@@ -0,0 +1,104 @@
+
+
+package org.springframework.boot.autoconfigure.condition;
+
+import org.hamcrest.Matcher;
+import org.junit.Test;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnJava.JavaVersion;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnJava.Range;
+import org.springframework.context.annotation.AnnotationConfigApplicationContext;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+import static org.hamcrest.Matchers.is;
+import static org.hamcrest.Matchers.iterableWithSize;
+import static org.junit.Assert.assertThat;
+
+
+public class ConditionalOnJavaTests {
+
+	private final AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();
+
+	@Test
+	public void doesNotMatchIfBetterVersionIsRequired() {
+
+		this.context.register(Java9Required.class);
+		this.context.refresh();
+
+		assertPresent(false);
+	}
+
+	@Test
+	public void doesNotMatchIfLowerIsRequired() {
+
+		this.context.register(Java5Required.class);
+		this.context.refresh();
+
+		assertPresent(false);
+	}
+
+	@Test
+	public void matchesIfVersionIsInRange() {
+
+		this.context.register(Java6Required.class);
+		this.context.refresh();
+
+		assertPresent(true);
+	}
+
+	@Configuration
+	@ConditionalOnJava(JavaVersion.NINE)
+	static class Java9Required {
+
+		@Bean
+		String foo() {
+			return ;
+		}
+	}
+
+	@Configuration
+	@ConditionalOnJava(value = JavaVersion.SIX, range = Range.OLDER_THAN)
+	static class Java5Required {
+
+		@Bean
+		String foo() {
+			return ;
+		}
+	}
+
+	@Configuration
+	@ConditionalOnJava(JavaVersion.SIX)
+	static class Java6Required {
+
+		@Bean
+		String foo() {
+			return ;
+		}
+	}
+
+	private void assertPresent(boolean expected) {
+
+		int expectedNumber = expected ? 1 : 0;
+		Matcher<Iterable<String>> matcher = iterableWithSize(expectedNumber);
+
+		assertThat(this.context.getBeansOfType(String.class).values(), is(matcher));
+	}
+}

