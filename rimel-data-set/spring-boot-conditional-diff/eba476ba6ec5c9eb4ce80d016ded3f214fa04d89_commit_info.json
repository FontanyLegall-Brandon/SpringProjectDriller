{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/logging/LoggersEndpointAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/logging/LoggersEndpointAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -19,11 +19,17 @@ package org.springframework.boot.actuate.autoconfigure.logging;\n import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\n import org.springframework.boot.actuate.logging.LoggersEndpoint;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionMessage;\n+import org.springframework.boot.autoconfigure.condition.ConditionOutcome;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.SpringBootCondition;\n import org.springframework.boot.logging.LoggingSystem;\n import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.ConditionContext;\n+import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.type.AnnotatedTypeMetadata;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for the {@link LoggersEndpoint}.\n@@ -36,10 +42,28 @@ public class LoggersEndpointAutoConfiguration {\n \n \t@Bean\n \t@ConditionalOnBean(LoggingSystem.class)\n+\t@Conditional(OnEnabledLoggingSystemCondition.class)\n \t@ConditionalOnMissingBean\n \t@ConditionalOnEnabledEndpoint\n \tpublic LoggersEndpoint loggersEndpoint(LoggingSystem loggingSystem) {\n \t\treturn new LoggersEndpoint(loggingSystem);\n \t}\n \n+\n+\tstatic class OnEnabledLoggingSystemCondition extends SpringBootCondition {\n+\n+\t\t@Override\n+\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n+\t\t\t\tAnnotatedTypeMetadata metadata) {\n+\t\t\tConditionMessage.Builder message = ConditionMessage\n+\t\t\t\t\t.forCondition("Logging System");\n+\t\t\tString loggingSystem = System.getProperty(LoggingSystem.SYSTEM_PROPERTY);\n+\t\t\tif (LoggingSystem.NONE.equals(loggingSystem)) {\n+\t\t\t\treturn ConditionOutcome.noMatch(message.because("system property "\n+\t\t\t\t\t\t+ LoggingSystem.SYSTEM_PROPERTY + " is set to none"));\n+\t\t\t}\n+\t\t\treturn ConditionOutcome.match(message.because("enabled"));\n+\t\t}\n+\n+\t}\n }\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.logging;\n\nimport org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\nimport org.springframework.boot.actuate.logging.LoggersEndpoint;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionMessage;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.logging.LoggingSystem;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for the {@link LoggersEndpoint}.\n *\n * @author Phillip Webb\n * @since 2.0.0\n */\n@Configuration\npublic class LoggersEndpointAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnBean(LoggingSystem.class)\n\t@Conditional(OnEnabledLoggingSystemCondition.class)\n\t@ConditionalOnMissingBean\n\t@ConditionalOnEnabledEndpoint\n\tpublic LoggersEndpoint loggersEndpoint(LoggingSystem loggingSystem) {\n\t\treturn new LoggersEndpoint(loggingSystem);\n\t}\n\n\n\tstatic class OnEnabledLoggingSystemCondition extends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tConditionMessage.Builder message = ConditionMessage\n\t\t\t\t\t.forCondition("Logging System");\n\t\t\tString loggingSystem = System.getProperty(LoggingSystem.SYSTEM_PROPERTY);\n\t\t\tif (LoggingSystem.NONE.equals(loggingSystem)) {\n\t\t\t\treturn ConditionOutcome.noMatch(message.because("system property "\n\t\t\t\t\t\t+ LoggingSystem.SYSTEM_PROPERTY + " is set to none"));\n\t\t\t}\n\t\t\treturn ConditionOutcome.match(message.because("enabled"));\n\t\t}\n\n\t}\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.logging;\n\nimport org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\nimport org.springframework.boot.actuate.logging.LoggersEndpoint;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.logging.LoggingSystem;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for the {@link LoggersEndpoint}.\n *\n * @author Phillip Webb\n * @since 2.0.0\n */\n@Configuration\npublic class LoggersEndpointAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnBean(LoggingSystem.class)\n\t@ConditionalOnMissingBean\n\t@ConditionalOnEnabledEndpoint\n\tpublic LoggersEndpoint loggersEndpoint(LoggingSystem loggingSystem) {\n\t\treturn new LoggersEndpoint(loggingSystem);\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
