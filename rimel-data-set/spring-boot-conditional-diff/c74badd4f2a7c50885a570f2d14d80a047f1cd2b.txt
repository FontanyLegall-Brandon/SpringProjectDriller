@@ -0,0 +1,97 @@
+
+
+package org.springframework.boot.autoconfigure.data.elasticsearch;
+
+import org.elasticsearch.client.Client;
+import org.elasticsearch.client.RestHighLevelClient;
+
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.data.elasticsearch.core.ElasticsearchOperations;
+import org.springframework.data.elasticsearch.core.ElasticsearchRestTemplate;
+import org.springframework.data.elasticsearch.core.ElasticsearchTemplate;
+import org.springframework.data.elasticsearch.core.convert.ElasticsearchConverter;
+import org.springframework.data.elasticsearch.core.convert.MappingElasticsearchConverter;
+import org.springframework.data.elasticsearch.core.mapping.SimpleElasticsearchMappingContext;
+
+
+abstract class ElasticsearchDataConfiguration {
+
+	@Configuration(proxyBeanMethods = false)
+	static class BaseConfiguration {
+
+		@Bean
+		@ConditionalOnMissingBean
+		public ElasticsearchConverter elasticsearchConverter(
+				SimpleElasticsearchMappingContext mappingContext) {
+			return new MappingElasticsearchConverter(mappingContext);
+		}
+
+		@Bean
+		@ConditionalOnMissingBean
+		public SimpleElasticsearchMappingContext mappingContext() {
+			return new SimpleElasticsearchMappingContext();
+		}
+
+	}
+
+	@Configuration(proxyBeanMethods = false)
+	@ConditionalOnClass(RestHighLevelClient.class)
+	static class RestHighLevelClientConfiguration {
+
+		@Bean
+		@ConditionalOnMissingBean(value = ElasticsearchOperations.class,
+				name = )
+		@ConditionalOnBean(RestHighLevelClient.class)
+		public ElasticsearchRestTemplate elasticsearchTemplate(RestHighLevelClient client,
+				ElasticsearchConverter converter) {
+			return new ElasticsearchRestTemplate(client, converter);
+		}
+
+	}
+
+	@Configuration(proxyBeanMethods = false)
+	@ConditionalOnClass(Client.class)
+	static class TransportClientConfiguration {
+
+		@Bean
+		@ConditionalOnMissingBean(value = ElasticsearchOperations.class,
+				name = )
+		@ConditionalOnBean(Client.class)
+		public ElasticsearchTemplate elasticsearchTemplate(Client client,
+				ElasticsearchConverter converter) {
+			try {
+				return new ElasticsearchTemplate(client, converter);
+			}
+			catch (Exception ex) {
+				throw new IllegalStateException(ex);
+			}
+		}
+
+	}
+
+}

