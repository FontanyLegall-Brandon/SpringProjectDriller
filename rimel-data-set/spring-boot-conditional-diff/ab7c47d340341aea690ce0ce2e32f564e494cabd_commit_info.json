{'_old_path': PosixPath('spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/restdocs/RestDocsAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/restdocs/RestDocsAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -35,12 +35,15 @@ import org.springframework.restdocs.mockmvc.MockMvcRestDocumentationConfigurer;\n import org.springframework.restdocs.mockmvc.RestDocumentationResultHandler;\n import org.springframework.restdocs.restassured3.RestAssuredRestDocumentation;\n import org.springframework.restdocs.restassured3.RestAssuredRestDocumentationConfigurer;\n+import org.springframework.restdocs.webtestclient.WebTestClientRestDocumentation;\n+import org.springframework.restdocs.webtestclient.WebTestClientRestDocumentationConfigurer;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for Spring REST Docs.\n  *\n  * @author Andy Wilkinson\n  * @author Eddú Meléndez\n+ * @author Roman Zaynetdinov\n  * @since 1.4.0\n  */\n @Configuration\n@@ -108,4 +111,33 @@ public class RestDocsAutoConfiguration {\n \n \t}\n \n+\t@Configuration\n+\t@ConditionalOnClass(WebTestClientRestDocumentation.class)\n+\t@ConditionalOnWebApplication(type = Type.REACTIVE)\n+\tstatic class RestDocsWebTestClientAutoConfiguration {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(WebTestClientRestDocumentationConfigurer.class)\n+\t\tpublic WebTestClientRestDocumentationConfigurer restDocsWebTestClientConfigurer(\n+\t\t\t\tObjectProvider<RestDocsWebTestClientConfigurationCustomizer> configurationCustomizerProvider,\n+\t\t\t\tRestDocumentationContextProvider contextProvider) {\n+\t\t\tWebTestClientRestDocumentationConfigurer configurer = WebTestClientRestDocumentation\n+\t\t\t\t\t.documentationConfiguration(contextProvider);\n+\t\t\tRestDocsWebTestClientConfigurationCustomizer configurationCustomizer = configurationCustomizerProvider\n+\t\t\t\t\t.getIfAvailable();\n+\t\t\tif (configurationCustomizer != null) {\n+\t\t\t\tconfigurationCustomizer.customize(configurer);\n+\t\t\t}\n+\t\t\treturn configurer;\n+\t\t}\n+\n+\t\t@Bean\n+\t\t@ConfigurationProperties(prefix = "spring.test.restdocs")\n+\t\tpublic RestDocsWebTestClientBuilderCustomizer restDocumentationConfigurer(\n+\t\t\t\tWebTestClientRestDocumentationConfigurer configurer) {\n+\t\t\treturn new RestDocsWebTestClientBuilderCustomizer(configurer);\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.test.autoconfigure.restdocs;\n\nimport io.restassured.builder.RequestSpecBuilder;\nimport io.restassured.specification.RequestSpecification;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.restdocs.RestDocumentationContextProvider;\nimport org.springframework.restdocs.mockmvc.MockMvcRestDocumentation;\nimport org.springframework.restdocs.mockmvc.MockMvcRestDocumentationConfigurer;\nimport org.springframework.restdocs.mockmvc.RestDocumentationResultHandler;\nimport org.springframework.restdocs.restassured3.RestAssuredRestDocumentation;\nimport org.springframework.restdocs.restassured3.RestAssuredRestDocumentationConfigurer;\nimport org.springframework.restdocs.webtestclient.WebTestClientRestDocumentation;\nimport org.springframework.restdocs.webtestclient.WebTestClientRestDocumentationConfigurer;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring REST Docs.\n *\n * @author Andy Wilkinson\n * @author Eddú Meléndez\n * @author Roman Zaynetdinov\n * @since 1.4.0\n */\n@Configuration\n@EnableConfigurationProperties\n@ConditionalOnWebApplication\npublic class RestDocsAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnClass(MockMvcRestDocumentation.class)\n\t@ConditionalOnWebApplication(type = Type.SERVLET)\n\tstatic class RestDocsMockMvcAutoConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(MockMvcRestDocumentationConfigurer.class)\n\t\tpublic MockMvcRestDocumentationConfigurer restDocsMockMvcConfigurer(\n\t\t\t\tObjectProvider<RestDocsMockMvcConfigurationCustomizer> configurationCustomizerProvider,\n\t\t\t\tRestDocumentationContextProvider contextProvider) {\n\t\t\tMockMvcRestDocumentationConfigurer configurer = MockMvcRestDocumentation\n\t\t\t\t\t.documentationConfiguration(contextProvider);\n\t\t\tRestDocsMockMvcConfigurationCustomizer configurationCustomizer = configurationCustomizerProvider\n\t\t\t\t\t.getIfAvailable();\n\t\t\tif (configurationCustomizer != null) {\n\t\t\t\tconfigurationCustomizer.customize(configurer);\n\t\t\t}\n\t\t\treturn configurer;\n\t\t}\n\n\t\t@Bean\n\t\t@ConfigurationProperties(prefix = "spring.test.restdocs")\n\t\tpublic RestDocsMockMvcBuilderCustomizer restDocumentationConfigurer(\n\t\t\t\tMockMvcRestDocumentationConfigurer configurer,\n\t\t\t\tObjectProvider<RestDocumentationResultHandler> resultHandler) {\n\t\t\treturn new RestDocsMockMvcBuilderCustomizer(configurer,\n\t\t\t\t\tresultHandler.getIfAvailable());\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ RequestSpecification.class,\n\t\t\tRestAssuredRestDocumentation.class })\n\tstatic class RestDocsRestAssuredAutoConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(RequestSpecification.class)\n\t\tpublic RequestSpecification restDocsRestAssuredConfigurer(\n\t\t\t\tObjectProvider<RestDocsRestAssuredConfigurationCustomizer> configurationCustomizerProvider,\n\t\t\t\tRestDocumentationContextProvider contextProvider) {\n\t\t\tRestAssuredRestDocumentationConfigurer configurer = RestAssuredRestDocumentation\n\t\t\t\t\t.documentationConfiguration(contextProvider);\n\t\t\tRestDocsRestAssuredConfigurationCustomizer configurationCustomizer = configurationCustomizerProvider\n\t\t\t\t\t.getIfAvailable();\n\t\t\tif (configurationCustomizer != null) {\n\t\t\t\tconfigurationCustomizer.customize(configurer);\n\t\t\t}\n\t\t\treturn new RequestSpecBuilder().addFilter(configurer).build();\n\t\t}\n\n\t\t@Bean\n\t\t@ConfigurationProperties(prefix = "spring.test.restdocs")\n\t\tpublic RestDocsRestAssuredBuilderCustomizer restAssuredBuilderCustomizer(\n\t\t\t\tRequestSpecification configurer) {\n\t\t\treturn new RestDocsRestAssuredBuilderCustomizer(configurer);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(WebTestClientRestDocumentation.class)\n\t@ConditionalOnWebApplication(type = Type.REACTIVE)\n\tstatic class RestDocsWebTestClientAutoConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(WebTestClientRestDocumentationConfigurer.class)\n\t\tpublic WebTestClientRestDocumentationConfigurer restDocsWebTestClientConfigurer(\n\t\t\t\tObjectProvider<RestDocsWebTestClientConfigurationCustomizer> configurationCustomizerProvider,\n\t\t\t\tRestDocumentationContextProvider contextProvider) {\n\t\t\tWebTestClientRestDocumentationConfigurer configurer = WebTestClientRestDocumentation\n\t\t\t\t\t.documentationConfiguration(contextProvider);\n\t\t\tRestDocsWebTestClientConfigurationCustomizer configurationCustomizer = configurationCustomizerProvider\n\t\t\t\t\t.getIfAvailable();\n\t\t\tif (configurationCustomizer != null) {\n\t\t\t\tconfigurationCustomizer.customize(configurer);\n\t\t\t}\n\t\t\treturn configurer;\n\t\t}\n\n\t\t@Bean\n\t\t@ConfigurationProperties(prefix = "spring.test.restdocs")\n\t\tpublic RestDocsWebTestClientBuilderCustomizer restDocumentationConfigurer(\n\t\t\t\tWebTestClientRestDocumentationConfigurer configurer) {\n\t\t\treturn new RestDocsWebTestClientBuilderCustomizer(configurer);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.test.autoconfigure.restdocs;\n\nimport io.restassured.builder.RequestSpecBuilder;\nimport io.restassured.specification.RequestSpecification;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.restdocs.RestDocumentationContextProvider;\nimport org.springframework.restdocs.mockmvc.MockMvcRestDocumentation;\nimport org.springframework.restdocs.mockmvc.MockMvcRestDocumentationConfigurer;\nimport org.springframework.restdocs.mockmvc.RestDocumentationResultHandler;\nimport org.springframework.restdocs.restassured3.RestAssuredRestDocumentation;\nimport org.springframework.restdocs.restassured3.RestAssuredRestDocumentationConfigurer;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring REST Docs.\n *\n * @author Andy Wilkinson\n * @author Eddú Meléndez\n * @since 1.4.0\n */\n@Configuration\n@EnableConfigurationProperties\n@ConditionalOnWebApplication\npublic class RestDocsAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnClass(MockMvcRestDocumentation.class)\n\t@ConditionalOnWebApplication(type = Type.SERVLET)\n\tstatic class RestDocsMockMvcAutoConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(MockMvcRestDocumentationConfigurer.class)\n\t\tpublic MockMvcRestDocumentationConfigurer restDocsMockMvcConfigurer(\n\t\t\t\tObjectProvider<RestDocsMockMvcConfigurationCustomizer> configurationCustomizerProvider,\n\t\t\t\tRestDocumentationContextProvider contextProvider) {\n\t\t\tMockMvcRestDocumentationConfigurer configurer = MockMvcRestDocumentation\n\t\t\t\t\t.documentationConfiguration(contextProvider);\n\t\t\tRestDocsMockMvcConfigurationCustomizer configurationCustomizer = configurationCustomizerProvider\n\t\t\t\t\t.getIfAvailable();\n\t\t\tif (configurationCustomizer != null) {\n\t\t\t\tconfigurationCustomizer.customize(configurer);\n\t\t\t}\n\t\t\treturn configurer;\n\t\t}\n\n\t\t@Bean\n\t\t@ConfigurationProperties(prefix = "spring.test.restdocs")\n\t\tpublic RestDocsMockMvcBuilderCustomizer restDocumentationConfigurer(\n\t\t\t\tMockMvcRestDocumentationConfigurer configurer,\n\t\t\t\tObjectProvider<RestDocumentationResultHandler> resultHandler) {\n\t\t\treturn new RestDocsMockMvcBuilderCustomizer(configurer,\n\t\t\t\t\tresultHandler.getIfAvailable());\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ RequestSpecification.class,\n\t\t\tRestAssuredRestDocumentation.class })\n\tstatic class RestDocsRestAssuredAutoConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(RequestSpecification.class)\n\t\tpublic RequestSpecification restDocsRestAssuredConfigurer(\n\t\t\t\tObjectProvider<RestDocsRestAssuredConfigurationCustomizer> configurationCustomizerProvider,\n\t\t\t\tRestDocumentationContextProvider contextProvider) {\n\t\t\tRestAssuredRestDocumentationConfigurer configurer = RestAssuredRestDocumentation\n\t\t\t\t\t.documentationConfiguration(contextProvider);\n\t\t\tRestDocsRestAssuredConfigurationCustomizer configurationCustomizer = configurationCustomizerProvider\n\t\t\t\t\t.getIfAvailable();\n\t\t\tif (configurationCustomizer != null) {\n\t\t\t\tconfigurationCustomizer.customize(configurer);\n\t\t\t}\n\t\t\treturn new RequestSpecBuilder().addFilter(configurer).build();\n\t\t}\n\n\t\t@Bean\n\t\t@ConfigurationProperties(prefix = "spring.test.restdocs")\n\t\tpublic RestDocsRestAssuredBuilderCustomizer restAssuredBuilderCustomizer(\n\t\t\t\tRequestSpecification configurer) {\n\t\t\treturn new RestDocsRestAssuredBuilderCustomizer(configurer);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
