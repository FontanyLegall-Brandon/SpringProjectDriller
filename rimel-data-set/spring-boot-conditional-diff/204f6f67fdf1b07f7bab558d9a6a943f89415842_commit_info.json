{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/reactive/server/WebFluxMetricsConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/reactive/WebFluxMetricsAutoConfiguration.java'), 'change_type': <ModificationType.RENAME: 3>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -14,29 +14,33 @@\n  * limitations under the License.\n  */\n \n-package org.springframework.boot.actuate.autoconfigure.metrics.reactive.server;\n+package org.springframework.boot.actuate.autoconfigure.metrics.web.reactive;\n \n import io.micrometer.core.instrument.MeterRegistry;\n \n+import org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration;\n import org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties;\n import org.springframework.boot.actuate.metrics.web.reactive.server.DefaultWebFluxTagsProvider;\n import org.springframework.boot.actuate.metrics.web.reactive.server.MetricsWebFilter;\n import org.springframework.boot.actuate.metrics.web.reactive.server.WebFluxTagsProvider;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n /**\n- * Configures instrumentation of Spring Webflux MVC annotation-based programming model\n- * request mappings.\n+ * {@link EnableAutoConfiguration Auto-configuration} for instrumentation of Spring\n+ * Webflux MVC annotation-based programming model request mappings.\n  *\n  * @author Jon Schneider\n  * @since 2.0.0\n  */\n-@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)\n @Configuration\n-public class WebFluxMetricsConfiguration {\n+@AutoConfigureAfter(MetricsAutoConfiguration.class)\n+@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)\n+public class WebFluxMetricsAutoConfiguration {\n \n \t@Bean\n \t@ConditionalOnMissingBean(WebFluxTagsProvider.class)\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics.web.reactive;\n\nimport io.micrometer.core.instrument.MeterRegistry;\n\nimport org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties;\nimport org.springframework.boot.actuate.metrics.web.reactive.server.DefaultWebFluxTagsProvider;\nimport org.springframework.boot.actuate.metrics.web.reactive.server.MetricsWebFilter;\nimport org.springframework.boot.actuate.metrics.web.reactive.server.WebFluxTagsProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for instrumentation of Spring\n * Webflux MVC annotation-based programming model request mappings.\n *\n * @author Jon Schneider\n * @since 2.0.0\n */\n@Configuration\n@AutoConfigureAfter(MetricsAutoConfiguration.class)\n@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)\npublic class WebFluxMetricsAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean(WebFluxTagsProvider.class)\n\tpublic DefaultWebFluxTagsProvider webfluxTagConfigurer() {\n\t\treturn new DefaultWebFluxTagsProvider();\n\t}\n\n\t@Bean\n\tpublic MetricsWebFilter webfluxMetrics(MeterRegistry registry,\n\t\t\tWebFluxTagsProvider tagConfigurer, MetricsProperties properties) {\n\t\treturn new MetricsWebFilter(registry, tagConfigurer,\n\t\t\t\tproperties.getWeb().getServer().getRequestsMetricName());\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics.reactive.server;\n\nimport io.micrometer.core.instrument.MeterRegistry;\n\nimport org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties;\nimport org.springframework.boot.actuate.metrics.web.reactive.server.DefaultWebFluxTagsProvider;\nimport org.springframework.boot.actuate.metrics.web.reactive.server.MetricsWebFilter;\nimport org.springframework.boot.actuate.metrics.web.reactive.server.WebFluxTagsProvider;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Configures instrumentation of Spring Webflux MVC annotation-based programming model\n * request mappings.\n *\n * @author Jon Schneider\n * @since 2.0.0\n */\n@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)\n@Configuration\npublic class WebFluxMetricsConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean(WebFluxTagsProvider.class)\n\tpublic DefaultWebFluxTagsProvider webfluxTagConfigurer() {\n\t\treturn new DefaultWebFluxTagsProvider();\n\t}\n\n\t@Bean\n\tpublic MetricsWebFilter webfluxMetrics(MeterRegistry registry,\n\t\t\tWebFluxTagsProvider tagConfigurer, MetricsProperties properties) {\n\t\treturn new MetricsWebFilter(registry, tagConfigurer,\n\t\t\t\tproperties.getWeb().getServer().getRequestsMetricName());\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
