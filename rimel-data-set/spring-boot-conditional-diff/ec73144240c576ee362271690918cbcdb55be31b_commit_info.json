{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -42,6 +42,9 @@ abstract class DataSourceConfiguration {\n \t\treturn (T) properties.initializeDataSourceBuilder().type(type).build();\n \t}\n \n+\t/**\n+\t * Tomcat Pool DataSource configuration.\n+\t */\n \t@ConditionalOnClass(org.apache.tomcat.jdbc.pool.DataSource.class)\n \t@ConditionalOnProperty(name = "spring.datasource.type", havingValue = "org.apache.tomcat.jdbc.pool.DataSource", matchIfMissing = true)\n \tstatic class Tomcat extends DataSourceConfiguration {\n@@ -64,6 +67,9 @@ abstract class DataSourceConfiguration {\n \n \t}\n \n+\t/**\n+\t * Hikari DataSource configuration.\n+\t */\n \t@ConditionalOnClass(HikariDataSource.class)\n \t@ConditionalOnProperty(name = "spring.datasource.type", havingValue = "com.zaxxer.hikari.HikariDataSource", matchIfMissing = true)\n \tstatic class Hikari extends DataSourceConfiguration {\n@@ -75,6 +81,10 @@ abstract class DataSourceConfiguration {\n \t\t}\n \t}\n \n+\t/**\n+\t * DBCP DataSource configuration.\n+\t * @deprecated as of Spring Boot 1.5 in favor of DBCP2\n+\t */\n \t@ConditionalOnClass(org.apache.commons.dbcp.BasicDataSource.class)\n \t@ConditionalOnProperty(name = "spring.datasource.type", havingValue = "org.apache.commons.dbcp.BasicDataSource", matchIfMissing = true)\n \t@Deprecated\n@@ -97,6 +107,9 @@ abstract class DataSourceConfiguration {\n \t\t}\n \t}\n \n+\t/**\n+\t * DBCP DataSource configuration.\n+\t */\n \t@ConditionalOnClass(org.apache.commons.dbcp2.BasicDataSource.class)\n \t@ConditionalOnProperty(name = "spring.datasource.type", havingValue = "org.apache.commons.dbcp2.BasicDataSource", matchIfMissing = true)\n \tstatic class Dbcp2 extends DataSourceConfiguration {\n@@ -110,6 +123,9 @@ abstract class DataSourceConfiguration {\n \t\t}\n \t}\n \n+\t/**\n+\t * Generic DataSource configuration.\n+\t */\n \t@ConditionalOnMissingBean(DataSource.class)\n \t@ConditionalOnProperty(name = "spring.datasource.type")\n \tstatic class Generic {\n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jdbc;\n\nimport javax.sql.DataSource;\n\nimport com.zaxxer.hikari.HikariDataSource;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.jdbc.DatabaseDriver;\nimport org.springframework.context.annotation.Bean;\n\n/**\n * Actual DataSource configurations imported by {@link DataSourceAutoConfiguration}.\n *\n * @author Dave Syer\n * @author Phillip Webb\n * @author Stephane Nicoll\n */\nabstract class DataSourceConfiguration {\n\n\t@SuppressWarnings("unchecked")\n\tprotected <T> T createDataSource(DataSourceProperties properties,\n\t\t\tClass<? extends DataSource> type) {\n\t\treturn (T) properties.initializeDataSourceBuilder().type(type).build();\n\t}\n\n\t/**\n\t * Tomcat Pool DataSource configuration.\n\t */\n\t@ConditionalOnClass(org.apache.tomcat.jdbc.pool.DataSource.class)\n\t@ConditionalOnProperty(name = "spring.datasource.type", havingValue = "org.apache.tomcat.jdbc.pool.DataSource", matchIfMissing = true)\n\tstatic class Tomcat extends DataSourceConfiguration {\n\n\t\t@Bean\n\t\t@ConfigurationProperties("spring.datasource.tomcat")\n\t\tpublic org.apache.tomcat.jdbc.pool.DataSource dataSource(\n\t\t\t\tDataSourceProperties properties) {\n\t\t\torg.apache.tomcat.jdbc.pool.DataSource dataSource = createDataSource(\n\t\t\t\t\tproperties, org.apache.tomcat.jdbc.pool.DataSource.class);\n\t\t\tDatabaseDriver databaseDriver = DatabaseDriver\n\t\t\t\t\t.fromJdbcUrl(properties.determineUrl());\n\t\t\tString validationQuery = databaseDriver.getValidationQuery();\n\t\t\tif (validationQuery != null) {\n\t\t\t\tdataSource.setTestOnBorrow(true);\n\t\t\t\tdataSource.setValidationQuery(validationQuery);\n\t\t\t}\n\t\t\treturn dataSource;\n\t\t}\n\n\t}\n\n\t/**\n\t * Hikari DataSource configuration.\n\t */\n\t@ConditionalOnClass(HikariDataSource.class)\n\t@ConditionalOnProperty(name = "spring.datasource.type", havingValue = "com.zaxxer.hikari.HikariDataSource", matchIfMissing = true)\n\tstatic class Hikari extends DataSourceConfiguration {\n\n\t\t@Bean\n\t\t@ConfigurationProperties("spring.datasource.hikari")\n\t\tpublic HikariDataSource dataSource(DataSourceProperties properties) {\n\t\t\treturn createDataSource(properties, HikariDataSource.class);\n\t\t}\n\t}\n\n\t/**\n\t * DBCP DataSource configuration.\n\t * @deprecated as of Spring Boot 1.5 in favor of DBCP2\n\t */\n\t@ConditionalOnClass(org.apache.commons.dbcp.BasicDataSource.class)\n\t@ConditionalOnProperty(name = "spring.datasource.type", havingValue = "org.apache.commons.dbcp.BasicDataSource", matchIfMissing = true)\n\t@Deprecated\n\tstatic class Dbcp extends DataSourceConfiguration {\n\n\t\t@Bean\n\t\t@ConfigurationProperties("spring.datasource.dbcp")\n\t\tpublic org.apache.commons.dbcp.BasicDataSource dataSource(\n\t\t\t\tDataSourceProperties properties) {\n\t\t\torg.apache.commons.dbcp.BasicDataSource dataSource = createDataSource(\n\t\t\t\t\tproperties, org.apache.commons.dbcp.BasicDataSource.class);\n\t\t\tDatabaseDriver databaseDriver = DatabaseDriver\n\t\t\t\t\t.fromJdbcUrl(properties.determineUrl());\n\t\t\tString validationQuery = databaseDriver.getValidationQuery();\n\t\t\tif (validationQuery != null) {\n\t\t\t\tdataSource.setTestOnBorrow(true);\n\t\t\t\tdataSource.setValidationQuery(validationQuery);\n\t\t\t}\n\t\t\treturn dataSource;\n\t\t}\n\t}\n\n\t/**\n\t * DBCP DataSource configuration.\n\t */\n\t@ConditionalOnClass(org.apache.commons.dbcp2.BasicDataSource.class)\n\t@ConditionalOnProperty(name = "spring.datasource.type", havingValue = "org.apache.commons.dbcp2.BasicDataSource", matchIfMissing = true)\n\tstatic class Dbcp2 extends DataSourceConfiguration {\n\n\t\t@Bean\n\t\t@ConfigurationProperties("spring.datasource.dbcp2")\n\t\tpublic org.apache.commons.dbcp2.BasicDataSource dataSource(\n\t\t\t\tDataSourceProperties properties) {\n\t\t\treturn createDataSource(properties,\n\t\t\t\t\torg.apache.commons.dbcp2.BasicDataSource.class);\n\t\t}\n\t}\n\n\t/**\n\t * Generic DataSource configuration.\n\t */\n\t@ConditionalOnMissingBean(DataSource.class)\n\t@ConditionalOnProperty(name = "spring.datasource.type")\n\tstatic class Generic {\n\n\t\t@Bean\n\t\tpublic DataSource dataSource(DataSourceProperties properties) {\n\t\t\treturn properties.initializeDataSourceBuilder().build();\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jdbc;\n\nimport javax.sql.DataSource;\n\nimport com.zaxxer.hikari.HikariDataSource;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.jdbc.DatabaseDriver;\nimport org.springframework.context.annotation.Bean;\n\n/**\n * Actual DataSource configurations imported by {@link DataSourceAutoConfiguration}.\n *\n * @author Dave Syer\n * @author Phillip Webb\n * @author Stephane Nicoll\n */\nabstract class DataSourceConfiguration {\n\n\t@SuppressWarnings("unchecked")\n\tprotected <T> T createDataSource(DataSourceProperties properties,\n\t\t\tClass<? extends DataSource> type) {\n\t\treturn (T) properties.initializeDataSourceBuilder().type(type).build();\n\t}\n\n\t@ConditionalOnClass(org.apache.tomcat.jdbc.pool.DataSource.class)\n\t@ConditionalOnProperty(name = "spring.datasource.type", havingValue = "org.apache.tomcat.jdbc.pool.DataSource", matchIfMissing = true)\n\tstatic class Tomcat extends DataSourceConfiguration {\n\n\t\t@Bean\n\t\t@ConfigurationProperties("spring.datasource.tomcat")\n\t\tpublic org.apache.tomcat.jdbc.pool.DataSource dataSource(\n\t\t\t\tDataSourceProperties properties) {\n\t\t\torg.apache.tomcat.jdbc.pool.DataSource dataSource = createDataSource(\n\t\t\t\t\tproperties, org.apache.tomcat.jdbc.pool.DataSource.class);\n\t\t\tDatabaseDriver databaseDriver = DatabaseDriver\n\t\t\t\t\t.fromJdbcUrl(properties.determineUrl());\n\t\t\tString validationQuery = databaseDriver.getValidationQuery();\n\t\t\tif (validationQuery != null) {\n\t\t\t\tdataSource.setTestOnBorrow(true);\n\t\t\t\tdataSource.setValidationQuery(validationQuery);\n\t\t\t}\n\t\t\treturn dataSource;\n\t\t}\n\n\t}\n\n\t@ConditionalOnClass(HikariDataSource.class)\n\t@ConditionalOnProperty(name = "spring.datasource.type", havingValue = "com.zaxxer.hikari.HikariDataSource", matchIfMissing = true)\n\tstatic class Hikari extends DataSourceConfiguration {\n\n\t\t@Bean\n\t\t@ConfigurationProperties("spring.datasource.hikari")\n\t\tpublic HikariDataSource dataSource(DataSourceProperties properties) {\n\t\t\treturn createDataSource(properties, HikariDataSource.class);\n\t\t}\n\t}\n\n\t@ConditionalOnClass(org.apache.commons.dbcp.BasicDataSource.class)\n\t@ConditionalOnProperty(name = "spring.datasource.type", havingValue = "org.apache.commons.dbcp.BasicDataSource", matchIfMissing = true)\n\t@Deprecated\n\tstatic class Dbcp extends DataSourceConfiguration {\n\n\t\t@Bean\n\t\t@ConfigurationProperties("spring.datasource.dbcp")\n\t\tpublic org.apache.commons.dbcp.BasicDataSource dataSource(\n\t\t\t\tDataSourceProperties properties) {\n\t\t\torg.apache.commons.dbcp.BasicDataSource dataSource = createDataSource(\n\t\t\t\t\tproperties, org.apache.commons.dbcp.BasicDataSource.class);\n\t\t\tDatabaseDriver databaseDriver = DatabaseDriver\n\t\t\t\t\t.fromJdbcUrl(properties.determineUrl());\n\t\t\tString validationQuery = databaseDriver.getValidationQuery();\n\t\t\tif (validationQuery != null) {\n\t\t\t\tdataSource.setTestOnBorrow(true);\n\t\t\t\tdataSource.setValidationQuery(validationQuery);\n\t\t\t}\n\t\t\treturn dataSource;\n\t\t}\n\t}\n\n\t@ConditionalOnClass(org.apache.commons.dbcp2.BasicDataSource.class)\n\t@ConditionalOnProperty(name = "spring.datasource.type", havingValue = "org.apache.commons.dbcp2.BasicDataSource", matchIfMissing = true)\n\tstatic class Dbcp2 extends DataSourceConfiguration {\n\n\t\t@Bean\n\t\t@ConfigurationProperties("spring.datasource.dbcp2")\n\t\tpublic org.apache.commons.dbcp2.BasicDataSource dataSource(\n\t\t\t\tDataSourceProperties properties) {\n\t\t\treturn createDataSource(properties,\n\t\t\t\t\torg.apache.commons.dbcp2.BasicDataSource.class);\n\t\t}\n\t}\n\n\t@ConditionalOnMissingBean(DataSource.class)\n\t@ConditionalOnProperty(name = "spring.datasource.type")\n\tstatic class Generic {\n\n\t\t@Bean\n\t\tpublic DataSource dataSource(DataSourceProperties properties) {\n\t\t\treturn properties.initializeDataSourceBuilder().build();\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
