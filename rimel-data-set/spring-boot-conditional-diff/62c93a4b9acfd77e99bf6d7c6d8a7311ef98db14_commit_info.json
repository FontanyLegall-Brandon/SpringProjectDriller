{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -23,6 +23,7 @@ import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.cache.CacheProperties.Redis;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration;\n import org.springframework.cache.CacheManager;\n@@ -45,6 +46,7 @@ import org.springframework.data.redis.serializer.RedisSerializationContext.Seria\n  * @since 1.3.0\n  */\n @Configuration\n+@ConditionalOnClass(RedisConnectionFactory.class)\n @AutoConfigureAfter(RedisAutoConfiguration.class)\n @ConditionalOnBean(RedisConnectionFactory.class)\n @ConditionalOnMissingBean(CacheManager.class)\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.cache;\n\nimport java.util.LinkedHashSet;\nimport java.util.List;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.cache.CacheProperties.Redis;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration;\nimport org.springframework.cache.CacheManager;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.data.redis.cache.RedisCacheManager;\nimport org.springframework.data.redis.cache.RedisCacheManager.RedisCacheManagerBuilder;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.serializer.JdkSerializationRedisSerializer;\nimport org.springframework.data.redis.serializer.RedisSerializationContext.SerializationPair;\n\n/**\n * Redis cache configuration.\n *\n * @author Stephane Nicoll\n * @author Mark Paluch\n * @author Ryon Day\n * @since 1.3.0\n */\n@Configuration\n@ConditionalOnClass(RedisConnectionFactory.class)\n@AutoConfigureAfter(RedisAutoConfiguration.class)\n@ConditionalOnBean(RedisConnectionFactory.class)\n@ConditionalOnMissingBean(CacheManager.class)\n@Conditional(CacheCondition.class)\nclass RedisCacheConfiguration {\n\n\tprivate final CacheProperties cacheProperties;\n\n\tprivate final CacheManagerCustomizers customizerInvoker;\n\n\tprivate final org.springframework.data.redis.cache.RedisCacheConfiguration redisCacheConfiguration;\n\n\tRedisCacheConfiguration(CacheProperties cacheProperties,\n\t\t\tCacheManagerCustomizers customizerInvoker,\n\t\t\tObjectProvider<org.springframework.data.redis.cache.RedisCacheConfiguration> redisCacheConfiguration) {\n\t\tthis.cacheProperties = cacheProperties;\n\t\tthis.customizerInvoker = customizerInvoker;\n\t\tthis.redisCacheConfiguration = redisCacheConfiguration.getIfAvailable();\n\t}\n\n\t@Bean\n\tpublic RedisCacheManager cacheManager(RedisConnectionFactory redisConnectionFactory,\n\t\t\tResourceLoader resourceLoader) {\n\t\tRedisCacheManagerBuilder builder = RedisCacheManager\n\t\t\t\t.builder(redisConnectionFactory)\n\t\t\t\t.cacheDefaults(determineConfiguration(resourceLoader.getClassLoader()));\n\t\tList<String> cacheNames = this.cacheProperties.getCacheNames();\n\t\tif (!cacheNames.isEmpty()) {\n\t\t\tbuilder.initialCacheNames(new LinkedHashSet<>(cacheNames));\n\t\t}\n\t\treturn this.customizerInvoker.customize(builder.build());\n\t}\n\n\tprivate org.springframework.data.redis.cache.RedisCacheConfiguration determineConfiguration(\n\t\t\tClassLoader classLoader) {\n\t\tif (this.redisCacheConfiguration != null) {\n\t\t\treturn this.redisCacheConfiguration;\n\t\t}\n\t\tRedis redisProperties = this.cacheProperties.getRedis();\n\t\torg.springframework.data.redis.cache.RedisCacheConfiguration config = org.springframework.data.redis.cache.RedisCacheConfiguration\n\t\t\t\t.defaultCacheConfig();\n\t\tconfig = config.serializeValuesWith(SerializationPair\n\t\t\t\t.fromSerializer(new JdkSerializationRedisSerializer(classLoader)));\n\t\tif (redisProperties.getTimeToLive() != null) {\n\t\t\tconfig = config.entryTtl(redisProperties.getTimeToLive());\n\t\t}\n\t\tif (redisProperties.getKeyPrefix() != null) {\n\t\t\tconfig = config.prefixKeysWith(redisProperties.getKeyPrefix());\n\t\t}\n\t\tif (!redisProperties.isCacheNullValues()) {\n\t\t\tconfig = config.disableCachingNullValues();\n\t\t}\n\t\tif (!redisProperties.isUseKeyPrefix()) {\n\t\t\tconfig = config.disableKeyPrefix();\n\t\t}\n\t\treturn config;\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.cache;\n\nimport java.util.LinkedHashSet;\nimport java.util.List;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.cache.CacheProperties.Redis;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration;\nimport org.springframework.cache.CacheManager;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.data.redis.cache.RedisCacheManager;\nimport org.springframework.data.redis.cache.RedisCacheManager.RedisCacheManagerBuilder;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.serializer.JdkSerializationRedisSerializer;\nimport org.springframework.data.redis.serializer.RedisSerializationContext.SerializationPair;\n\n/**\n * Redis cache configuration.\n *\n * @author Stephane Nicoll\n * @author Mark Paluch\n * @author Ryon Day\n * @since 1.3.0\n */\n@Configuration\n@AutoConfigureAfter(RedisAutoConfiguration.class)\n@ConditionalOnBean(RedisConnectionFactory.class)\n@ConditionalOnMissingBean(CacheManager.class)\n@Conditional(CacheCondition.class)\nclass RedisCacheConfiguration {\n\n\tprivate final CacheProperties cacheProperties;\n\n\tprivate final CacheManagerCustomizers customizerInvoker;\n\n\tprivate final org.springframework.data.redis.cache.RedisCacheConfiguration redisCacheConfiguration;\n\n\tRedisCacheConfiguration(CacheProperties cacheProperties,\n\t\t\tCacheManagerCustomizers customizerInvoker,\n\t\t\tObjectProvider<org.springframework.data.redis.cache.RedisCacheConfiguration> redisCacheConfiguration) {\n\t\tthis.cacheProperties = cacheProperties;\n\t\tthis.customizerInvoker = customizerInvoker;\n\t\tthis.redisCacheConfiguration = redisCacheConfiguration.getIfAvailable();\n\t}\n\n\t@Bean\n\tpublic RedisCacheManager cacheManager(RedisConnectionFactory redisConnectionFactory,\n\t\t\tResourceLoader resourceLoader) {\n\t\tRedisCacheManagerBuilder builder = RedisCacheManager\n\t\t\t\t.builder(redisConnectionFactory)\n\t\t\t\t.cacheDefaults(determineConfiguration(resourceLoader.getClassLoader()));\n\t\tList<String> cacheNames = this.cacheProperties.getCacheNames();\n\t\tif (!cacheNames.isEmpty()) {\n\t\t\tbuilder.initialCacheNames(new LinkedHashSet<>(cacheNames));\n\t\t}\n\t\treturn this.customizerInvoker.customize(builder.build());\n\t}\n\n\tprivate org.springframework.data.redis.cache.RedisCacheConfiguration determineConfiguration(\n\t\t\tClassLoader classLoader) {\n\t\tif (this.redisCacheConfiguration != null) {\n\t\t\treturn this.redisCacheConfiguration;\n\t\t}\n\t\tRedis redisProperties = this.cacheProperties.getRedis();\n\t\torg.springframework.data.redis.cache.RedisCacheConfiguration config = org.springframework.data.redis.cache.RedisCacheConfiguration\n\t\t\t\t.defaultCacheConfig();\n\t\tconfig = config.serializeValuesWith(SerializationPair\n\t\t\t\t.fromSerializer(new JdkSerializationRedisSerializer(classLoader)));\n\t\tif (redisProperties.getTimeToLive() != null) {\n\t\t\tconfig = config.entryTtl(redisProperties.getTimeToLive());\n\t\t}\n\t\tif (redisProperties.getKeyPrefix() != null) {\n\t\t\tconfig = config.prefixKeysWith(redisProperties.getKeyPrefix());\n\t\t}\n\t\tif (!redisProperties.isCacheNullValues()) {\n\t\t\tconfig = config.disableCachingNullValues();\n\t\t}\n\t\tif (!redisProperties.isUseKeyPrefix()) {\n\t\t\tconfig = config.disableKeyPrefix();\n\t\t}\n\t\treturn config;\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
