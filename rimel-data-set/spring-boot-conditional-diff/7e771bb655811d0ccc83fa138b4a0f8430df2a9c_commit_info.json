{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jmx/JmxAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jmx/JmxAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2014 the original author or authors.\n+ * Copyright 2012-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -18,30 +18,28 @@ package org.springframework.boot.autoconfigure.jmx;\n \n import javax.management.MBeanServer;\n \n+import org.springframework.beans.BeansException;\n import org.springframework.beans.factory.BeanFactory;\n-import org.springframework.beans.factory.FactoryBean;\n-import org.springframework.beans.factory.InitializingBean;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.BeanFactoryAware;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.SearchStrategy;\n+import org.springframework.boot.bind.RelaxedPropertyResolver;\n+import org.springframework.context.EnvironmentAware;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.EnableMBeanExport;\n-import org.springframework.context.annotation.MBeanExportConfiguration;\n+import org.springframework.context.annotation.MBeanExportConfiguration.SpecificPlatform;\n import org.springframework.core.env.Environment;\n-import org.springframework.core.type.StandardAnnotationMetadata;\n import org.springframework.jmx.export.MBeanExporter;\n import org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource;\n import org.springframework.jmx.export.annotation.AnnotationMBeanExporter;\n import org.springframework.jmx.export.naming.ObjectNamingStrategy;\n import org.springframework.jmx.support.MBeanServerFactoryBean;\n-import org.springframework.jmx.support.WebSphereMBeanServerFactoryBean;\n-import org.springframework.jndi.JndiObjectFactoryBean;\n-import org.springframework.util.Assert;\n-import org.springframework.util.ClassUtils;\n+import org.springframework.jmx.support.RegistrationPolicy;\n+import org.springframework.util.StringUtils;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} to enable/disable Spring\'s\n@@ -54,35 +52,45 @@ import org.springframework.util.ClassUtils;\n @Configuration\n @ConditionalOnClass({ MBeanExporter.class })\n @ConditionalOnExpression("${spring.jmx.enabled:true}")\n-public class JmxAutoConfiguration {\n+public class JmxAutoConfiguration implements EnvironmentAware, BeanFactoryAware {\n \n-\t@Autowired\n-\tprivate Environment environment;\n+\tprivate RelaxedPropertyResolver propertyResolver;\n \n-\t@Autowired\n \tprivate BeanFactory beanFactory;\n \n-\t@Autowired\n-\tprivate ObjectNamingStrategy namingStrategy;\n+\t@Override\n+\tpublic void setEnvironment(Environment environment) {\n+\t\tthis.propertyResolver = new RelaxedPropertyResolver(environment, "spring.jmx.");\n+\t}\n+\n+\t@Override\n+\tpublic void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n+\t\tthis.beanFactory = beanFactory;\n+\t}\n \n \t@Bean\n \t@ConditionalOnMissingBean(value = MBeanExporter.class, search = SearchStrategy.CURRENT)\n-\tpublic AnnotationMBeanExporter mbeanExporter() {\n-\t\t// Re-use the @EnableMBeanExport configuration\n-\t\tMBeanExportConfiguration config = new MBeanExportConfiguration();\n-\t\tconfig.setEnvironment(this.environment);\n-\t\tconfig.setBeanFactory(this.beanFactory);\n-\t\tconfig.setImportMetadata(new StandardAnnotationMetadata(Empty.class));\n-\t\t// But add a custom naming strategy\n-\t\tAnnotationMBeanExporter exporter = config.mbeanExporter();\n-\t\texporter.setNamingStrategy(this.namingStrategy);\n+\tpublic AnnotationMBeanExporter mbeanExporter(ObjectNamingStrategy namingStrategy) {\n+\t\tAnnotationMBeanExporter exporter = new AnnotationMBeanExporter();\n+\t\texporter.setRegistrationPolicy(RegistrationPolicy.FAIL_ON_EXISTING);\n+\t\texporter.setNamingStrategy(namingStrategy);\n+\t\tString server = this.propertyResolver.getProperty("server", "mbeanServer");\n+\t\tif (StringUtils.hasLength(server)) {\n+\t\t\texporter.setServer(this.beanFactory.getBean(server, MBeanServer.class));\n+\t\t}\n \t\treturn exporter;\n \t}\n \n \t@Bean\n-\t@ConditionalOnMissingBean(ObjectNamingStrategy.class)\n+\t@ConditionalOnMissingBean(value = ObjectNamingStrategy.class, search = SearchStrategy.CURRENT)\n \tpublic ParentAwareNamingStrategy objectNamingStrategy() {\n-\t\treturn new ParentAwareNamingStrategy(new AnnotationJmxAttributeSource());\n+\t\tParentAwareNamingStrategy namingStrategy = new ParentAwareNamingStrategy(\n+\t\t\t\tnew AnnotationJmxAttributeSource());\n+\t\tString defaultDomain = this.propertyResolver.getProperty("default-domain");\n+\t\tif (StringUtils.hasLength(defaultDomain)) {\n+\t\t\tnamingStrategy.setDefaultDomain(defaultDomain);\n+\t\t}\n+\t\treturn namingStrategy;\n \t}\n \n \t@Bean\n@@ -99,63 +107,4 @@ public class JmxAutoConfiguration {\n \n \t}\n \n-\t@EnableMBeanExport(defaultDomain = "${spring.jmx.default_domain:}", server = "${spring.jmx.server:mbeanServer}")\n-\tprivate static class Empty {\n-\n-\t}\n-\n-\t// Copied and adapted from MBeanExportConfiguration\n-\tprivate static enum SpecificPlatform {\n-\n-\t\tWEBLOGIC("weblogic.management.Helper") {\n-\t\t\t@Override\n-\t\t\tpublic FactoryBean<?> getMBeanServerFactory() {\n-\t\t\t\tJndiObjectFactoryBean factory = new JndiObjectFactoryBean();\n-\t\t\t\tfactory.setJndiName("java:comp/env/jmx/runtime");\n-\t\t\t\treturn factory;\n-\t\t\t}\n-\t\t},\n-\n-\t\tWEBSPHERE("com.ibm.websphere.management.AdminServiceFactory") {\n-\t\t\t@Override\n-\t\t\tpublic FactoryBean<MBeanServer> getMBeanServerFactory() {\n-\t\t\t\treturn new WebSphereMBeanServerFactoryBean();\n-\t\t\t}\n-\t\t};\n-\n-\t\tprivate final String identifyingClass;\n-\n-\t\tprivate SpecificPlatform(String identifyingClass) {\n-\t\t\tthis.identifyingClass = identifyingClass;\n-\t\t}\n-\n-\t\tpublic MBeanServer getMBeanServer() {\n-\t\t\ttry {\n-\t\t\t\tFactoryBean<?> factory = getMBeanServerFactory();\n-\t\t\t\tif (factory instanceof InitializingBean) {\n-\t\t\t\t\t((InitializingBean) factory).afterPropertiesSet();\n-\t\t\t\t}\n-\t\t\t\tObject server = factory.getObject();\n-\t\t\t\tAssert.isInstanceOf(MBeanServer.class, server);\n-\t\t\t\treturn (MBeanServer) server;\n-\t\t\t}\n-\t\t\tcatch (Exception ex) {\n-\t\t\t\tthrow new IllegalStateException(ex);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected abstract FactoryBean<?> getMBeanServerFactory();\n-\n-\t\tpublic static SpecificPlatform get() {\n-\t\t\tClassLoader classLoader = MBeanExportConfiguration.class.getClassLoader();\n-\t\t\tfor (SpecificPlatform environment : values()) {\n-\t\t\t\tif (ClassUtils.isPresent(environment.identifyingClass, classLoader)) {\n-\t\t\t\t\treturn environment;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn null;\n-\t\t}\n-\n-\t}\n-\n }\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jmx;\n\nimport javax.management.MBeanServer;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.boot.bind.RelaxedPropertyResolver;\nimport org.springframework.context.EnvironmentAware;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.EnableMBeanExport;\nimport org.springframework.context.annotation.MBeanExportConfiguration.SpecificPlatform;\nimport org.springframework.core.env.Environment;\nimport org.springframework.jmx.export.MBeanExporter;\nimport org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource;\nimport org.springframework.jmx.export.annotation.AnnotationMBeanExporter;\nimport org.springframework.jmx.export.naming.ObjectNamingStrategy;\nimport org.springframework.jmx.support.MBeanServerFactoryBean;\nimport org.springframework.jmx.support.RegistrationPolicy;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to enable/disable Spring\'s\n * {@link EnableMBeanExport} mechanism based on configuration properties.\n * <p>\n * To disable auto export of annotation beans set <code>spring.jmx.enabled: false</code>.\n *\n * @author Christian Dupuis\n */\n@Configuration\n@ConditionalOnClass({ MBeanExporter.class })\n@ConditionalOnExpression("${spring.jmx.enabled:true}")\npublic class JmxAutoConfiguration implements EnvironmentAware, BeanFactoryAware {\n\n\tprivate RelaxedPropertyResolver propertyResolver;\n\n\tprivate BeanFactory beanFactory;\n\n\t@Override\n\tpublic void setEnvironment(Environment environment) {\n\t\tthis.propertyResolver = new RelaxedPropertyResolver(environment, "spring.jmx.");\n\t}\n\n\t@Override\n\tpublic void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n\t\tthis.beanFactory = beanFactory;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(value = MBeanExporter.class, search = SearchStrategy.CURRENT)\n\tpublic AnnotationMBeanExporter mbeanExporter(ObjectNamingStrategy namingStrategy) {\n\t\tAnnotationMBeanExporter exporter = new AnnotationMBeanExporter();\n\t\texporter.setRegistrationPolicy(RegistrationPolicy.FAIL_ON_EXISTING);\n\t\texporter.setNamingStrategy(namingStrategy);\n\t\tString server = this.propertyResolver.getProperty("server", "mbeanServer");\n\t\tif (StringUtils.hasLength(server)) {\n\t\t\texporter.setServer(this.beanFactory.getBean(server, MBeanServer.class));\n\t\t}\n\t\treturn exporter;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(value = ObjectNamingStrategy.class, search = SearchStrategy.CURRENT)\n\tpublic ParentAwareNamingStrategy objectNamingStrategy() {\n\t\tParentAwareNamingStrategy namingStrategy = new ParentAwareNamingStrategy(\n\t\t\t\tnew AnnotationJmxAttributeSource());\n\t\tString defaultDomain = this.propertyResolver.getProperty("default-domain");\n\t\tif (StringUtils.hasLength(defaultDomain)) {\n\t\t\tnamingStrategy.setDefaultDomain(defaultDomain);\n\t\t}\n\t\treturn namingStrategy;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(MBeanServer.class)\n\tpublic MBeanServer mbeanServer() {\n\t\tSpecificPlatform platform = SpecificPlatform.get();\n\t\tif (platform != null) {\n\t\t\treturn platform.getMBeanServer();\n\t\t}\n\t\tMBeanServerFactoryBean factory = new MBeanServerFactoryBean();\n\t\tfactory.setLocateExistingServerIfPossible(true);\n\t\tfactory.afterPropertiesSet();\n\t\treturn factory.getObject();\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jmx;\n\nimport javax.management.MBeanServer;\n\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.FactoryBean;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.EnableMBeanExport;\nimport org.springframework.context.annotation.MBeanExportConfiguration;\nimport org.springframework.core.env.Environment;\nimport org.springframework.core.type.StandardAnnotationMetadata;\nimport org.springframework.jmx.export.MBeanExporter;\nimport org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource;\nimport org.springframework.jmx.export.annotation.AnnotationMBeanExporter;\nimport org.springframework.jmx.export.naming.ObjectNamingStrategy;\nimport org.springframework.jmx.support.MBeanServerFactoryBean;\nimport org.springframework.jmx.support.WebSphereMBeanServerFactoryBean;\nimport org.springframework.jndi.JndiObjectFactoryBean;\nimport org.springframework.util.Assert;\nimport org.springframework.util.ClassUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to enable/disable Spring\'s\n * {@link EnableMBeanExport} mechanism based on configuration properties.\n * <p>\n * To disable auto export of annotation beans set <code>spring.jmx.enabled: false</code>.\n *\n * @author Christian Dupuis\n */\n@Configuration\n@ConditionalOnClass({ MBeanExporter.class })\n@ConditionalOnExpression("${spring.jmx.enabled:true}")\npublic class JmxAutoConfiguration {\n\n\t@Autowired\n\tprivate Environment environment;\n\n\t@Autowired\n\tprivate BeanFactory beanFactory;\n\n\t@Autowired\n\tprivate ObjectNamingStrategy namingStrategy;\n\n\t@Bean\n\t@ConditionalOnMissingBean(value = MBeanExporter.class, search = SearchStrategy.CURRENT)\n\tpublic AnnotationMBeanExporter mbeanExporter() {\n\t\t// Re-use the @EnableMBeanExport configuration\n\t\tMBeanExportConfiguration config = new MBeanExportConfiguration();\n\t\tconfig.setEnvironment(this.environment);\n\t\tconfig.setBeanFactory(this.beanFactory);\n\t\tconfig.setImportMetadata(new StandardAnnotationMetadata(Empty.class));\n\t\t// But add a custom naming strategy\n\t\tAnnotationMBeanExporter exporter = config.mbeanExporter();\n\t\texporter.setNamingStrategy(this.namingStrategy);\n\t\treturn exporter;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(ObjectNamingStrategy.class)\n\tpublic ParentAwareNamingStrategy objectNamingStrategy() {\n\t\treturn new ParentAwareNamingStrategy(new AnnotationJmxAttributeSource());\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(MBeanServer.class)\n\tpublic MBeanServer mbeanServer() {\n\t\tSpecificPlatform platform = SpecificPlatform.get();\n\t\tif (platform != null) {\n\t\t\treturn platform.getMBeanServer();\n\t\t}\n\t\tMBeanServerFactoryBean factory = new MBeanServerFactoryBean();\n\t\tfactory.setLocateExistingServerIfPossible(true);\n\t\tfactory.afterPropertiesSet();\n\t\treturn factory.getObject();\n\n\t}\n\n\t@EnableMBeanExport(defaultDomain = "${spring.jmx.default_domain:}", server = "${spring.jmx.server:mbeanServer}")\n\tprivate static class Empty {\n\n\t}\n\n\t// Copied and adapted from MBeanExportConfiguration\n\tprivate static enum SpecificPlatform {\n\n\t\tWEBLOGIC("weblogic.management.Helper") {\n\t\t\t@Override\n\t\t\tpublic FactoryBean<?> getMBeanServerFactory() {\n\t\t\t\tJndiObjectFactoryBean factory = new JndiObjectFactoryBean();\n\t\t\t\tfactory.setJndiName("java:comp/env/jmx/runtime");\n\t\t\t\treturn factory;\n\t\t\t}\n\t\t},\n\n\t\tWEBSPHERE("com.ibm.websphere.management.AdminServiceFactory") {\n\t\t\t@Override\n\t\t\tpublic FactoryBean<MBeanServer> getMBeanServerFactory() {\n\t\t\t\treturn new WebSphereMBeanServerFactoryBean();\n\t\t\t}\n\t\t};\n\n\t\tprivate final String identifyingClass;\n\n\t\tprivate SpecificPlatform(String identifyingClass) {\n\t\t\tthis.identifyingClass = identifyingClass;\n\t\t}\n\n\t\tpublic MBeanServer getMBeanServer() {\n\t\t\ttry {\n\t\t\t\tFactoryBean<?> factory = getMBeanServerFactory();\n\t\t\t\tif (factory instanceof InitializingBean) {\n\t\t\t\t\t((InitializingBean) factory).afterPropertiesSet();\n\t\t\t\t}\n\t\t\t\tObject server = factory.getObject();\n\t\t\t\tAssert.isInstanceOf(MBeanServer.class, server);\n\t\t\t\treturn (MBeanServer) server;\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tthrow new IllegalStateException(ex);\n\t\t\t}\n\t\t}\n\n\t\tprotected abstract FactoryBean<?> getMBeanServerFactory();\n\n\t\tpublic static SpecificPlatform get() {\n\t\t\tClassLoader classLoader = MBeanExportConfiguration.class.getClassLoader();\n\t\t\tfor (SpecificPlatform environment : values()) {\n\t\t\t\tif (ClassUtils.isPresent(environment.identifyingClass, classLoader)) {\n\t\t\t\t\treturn environment;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
