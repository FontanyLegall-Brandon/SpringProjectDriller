{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/reactive/ReactiveUserDetailsServiceAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/reactive/ReactiveUserDetailsServiceAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -48,9 +48,9 @@ import org.springframework.util.StringUtils;\n  */\n @Configuration(proxyBeanMethods = false)\n @ConditionalOnClass({ ReactiveAuthenticationManager.class })\n-@ConditionalOnMissingBean(value = { ReactiveAuthenticationManager.class, ReactiveUserDetailsService.class }, type = {\n-\t\t"org.springframework.security.oauth2.jwt.ReactiveJwtDecoder",\n-\t\t"org.springframework.security.oauth2.server.resource.introspection.ReactiveOAuth2TokenIntrospectionClient" })\n+@ConditionalOnMissingBean(value = { ReactiveAuthenticationManager.class, ReactiveUserDetailsService.class },\n+\t\ttype = { "org.springframework.security.oauth2.jwt.ReactiveJwtDecoder",\n+\t\t\t\t"org.springframework.security.oauth2.server.resource.introspection.ReactiveOpaqueTokenIntrospector" })\n @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)\n public class ReactiveUserDetailsServiceAutoConfiguration {\n \n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security.reactive;\n\nimport java.util.List;\nimport java.util.regex.Pattern;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.security.SecurityProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.ReactiveAuthenticationManager;\nimport org.springframework.security.core.userdetails.MapReactiveUserDetailsService;\nimport org.springframework.security.core.userdetails.ReactiveUserDetailsService;\nimport org.springframework.security.core.userdetails.User;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.util.StringUtils;\n\n/**\n * Default user {@link Configuration @Configuration} for a reactive web application.\n * Configures a {@link ReactiveUserDetailsService} with a default user and generated\n * password. This backs-off completely if there is a bean of type\n * {@link ReactiveUserDetailsService} or {@link ReactiveAuthenticationManager}.\n *\n * @author Madhura Bhave\n * @since 2.0.0\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass({ ReactiveAuthenticationManager.class })\n@ConditionalOnMissingBean(value = { ReactiveAuthenticationManager.class, ReactiveUserDetailsService.class },\n\t\ttype = { "org.springframework.security.oauth2.jwt.ReactiveJwtDecoder",\n\t\t\t\t"org.springframework.security.oauth2.server.resource.introspection.ReactiveOpaqueTokenIntrospector" })\n@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)\npublic class ReactiveUserDetailsServiceAutoConfiguration {\n\n\tprivate static final String NOOP_PASSWORD_PREFIX = "{noop}";\n\n\tprivate static final Pattern PASSWORD_ALGORITHM_PATTERN = Pattern.compile("^\\\\{.+}.*$");\n\n\tprivate static final Log logger = LogFactory.getLog(ReactiveUserDetailsServiceAutoConfiguration.class);\n\n\t@Bean\n\tpublic MapReactiveUserDetailsService reactiveUserDetailsService(SecurityProperties properties,\n\t\t\tObjectProvider<PasswordEncoder> passwordEncoder) {\n\t\tSecurityProperties.User user = properties.getUser();\n\t\tUserDetails userDetails = getUserDetails(user, getOrDeducePassword(user, passwordEncoder.getIfAvailable()));\n\t\treturn new MapReactiveUserDetailsService(userDetails);\n\t}\n\n\tprivate UserDetails getUserDetails(SecurityProperties.User user, String password) {\n\t\tList<String> roles = user.getRoles();\n\t\treturn User.withUsername(user.getName()).password(password).roles(StringUtils.toStringArray(roles)).build();\n\t}\n\n\tprivate String getOrDeducePassword(SecurityProperties.User user, PasswordEncoder encoder) {\n\t\tString password = user.getPassword();\n\t\tif (user.isPasswordGenerated()) {\n\t\t\tlogger.info(String.format("%n%nUsing generated security password: %s%n", user.getPassword()));\n\t\t}\n\t\tif (encoder != null || PASSWORD_ALGORITHM_PATTERN.matcher(password).matches()) {\n\t\t\treturn password;\n\t\t}\n\t\treturn NOOP_PASSWORD_PREFIX + password;\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security.reactive;\n\nimport java.util.List;\nimport java.util.regex.Pattern;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.security.SecurityProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.ReactiveAuthenticationManager;\nimport org.springframework.security.core.userdetails.MapReactiveUserDetailsService;\nimport org.springframework.security.core.userdetails.ReactiveUserDetailsService;\nimport org.springframework.security.core.userdetails.User;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.util.StringUtils;\n\n/**\n * Default user {@link Configuration @Configuration} for a reactive web application.\n * Configures a {@link ReactiveUserDetailsService} with a default user and generated\n * password. This backs-off completely if there is a bean of type\n * {@link ReactiveUserDetailsService} or {@link ReactiveAuthenticationManager}.\n *\n * @author Madhura Bhave\n * @since 2.0.0\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass({ ReactiveAuthenticationManager.class })\n@ConditionalOnMissingBean(value = { ReactiveAuthenticationManager.class, ReactiveUserDetailsService.class }, type = {\n\t\t"org.springframework.security.oauth2.jwt.ReactiveJwtDecoder",\n\t\t"org.springframework.security.oauth2.server.resource.introspection.ReactiveOAuth2TokenIntrospectionClient" })\n@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)\npublic class ReactiveUserDetailsServiceAutoConfiguration {\n\n\tprivate static final String NOOP_PASSWORD_PREFIX = "{noop}";\n\n\tprivate static final Pattern PASSWORD_ALGORITHM_PATTERN = Pattern.compile("^\\\\{.+}.*$");\n\n\tprivate static final Log logger = LogFactory.getLog(ReactiveUserDetailsServiceAutoConfiguration.class);\n\n\t@Bean\n\tpublic MapReactiveUserDetailsService reactiveUserDetailsService(SecurityProperties properties,\n\t\t\tObjectProvider<PasswordEncoder> passwordEncoder) {\n\t\tSecurityProperties.User user = properties.getUser();\n\t\tUserDetails userDetails = getUserDetails(user, getOrDeducePassword(user, passwordEncoder.getIfAvailable()));\n\t\treturn new MapReactiveUserDetailsService(userDetails);\n\t}\n\n\tprivate UserDetails getUserDetails(SecurityProperties.User user, String password) {\n\t\tList<String> roles = user.getRoles();\n\t\treturn User.withUsername(user.getName()).password(password).roles(StringUtils.toStringArray(roles)).build();\n\t}\n\n\tprivate String getOrDeducePassword(SecurityProperties.User user, PasswordEncoder encoder) {\n\t\tString password = user.getPassword();\n\t\tif (user.isPasswordGenerated()) {\n\t\t\tlogger.info(String.format("%n%nUsing generated security password: %s%n", user.getPassword()));\n\t\t}\n\t\tif (encoder != null || PASSWORD_ALGORITHM_PATTERN.matcher(password).matches()) {\n\t\t\treturn password;\n\t\t}\n\t\treturn NOOP_PASSWORD_PREFIX + password;\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
