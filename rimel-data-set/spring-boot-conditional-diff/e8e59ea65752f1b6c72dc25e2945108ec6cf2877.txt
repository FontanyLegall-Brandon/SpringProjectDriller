@@ -16,33 +16,70 @@
 
 package org.springframework.boot.autoconfigure.web;
 
-import javax.servlet.MultipartConfigElement;
-import javax.servlet.Servlet;
-
+import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.context.embedded.EmbeddedWebApplicationContext;
+import org.springframework.boot.context.embedded.MultipartConfigFactory;
+import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.util.StringUtils;
 import org.springframework.web.multipart.support.StandardServletMultipartResolver;
 
+import javax.servlet.MultipartConfigElement;
+import javax.servlet.Servlet;
+
 
 @Configuration
-@ConditionalOnClass({ Servlet.class, StandardServletMultipartResolver.class })
-@ConditionalOnBean(MultipartConfigElement.class)
+@ConditionalOnClass({Servlet.class, StandardServletMultipartResolver.class})
+@EnableConfigurationProperties(MultipartProperties.class)
 public class MultipartAutoConfiguration {
 
-	@Bean
-	public StandardServletMultipartResolver multipartResolver() {
-		return new StandardServletMultipartResolver();
-	}
+    @Autowired
+    private MultipartProperties multipartProperties = new MultipartProperties();
+
+    @Bean
+    @ConditionalOnMissingBean
+    public MultipartConfigElement multipartConfigElement() {
+        MultipartConfigFactory factory = new MultipartConfigFactory();
+
+        if (StringUtils.hasText(this.multipartProperties.getFileSizeThreshold())) {
+            factory.setFileSizeThreshold(this.multipartProperties.getFileSizeThreshold());
+        }
+
+        if (StringUtils.hasText(this.multipartProperties.getLocation())) {
+            factory.setLocation(this.multipartProperties.getLocation());
+        }
+
+        if (StringUtils.hasText(this.multipartProperties.getMaxRequestSize())) {
+            factory.setMaxRequestSize(this.multipartProperties.getMaxRequestSize());
+        }
+
+        if (StringUtils.hasText(this.multipartProperties.getMaxFileSize())) {
+            factory.setMaxFileSize(this.multipartProperties.getMaxFileSize());
+        }
+
+        return factory.createMultipartConfig();
+    }
+
 
+    @Bean
+    @ConditionalOnMissingBean
+    public StandardServletMultipartResolver multipartResolver() {
+        return new StandardServletMultipartResolver();
+    }
 }

