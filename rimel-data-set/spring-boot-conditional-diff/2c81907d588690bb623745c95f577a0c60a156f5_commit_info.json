{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,259 @@\n+/*\n+ * Copyright 2012-2015 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.mongo.embedded;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration;\n+import org.springframework.boot.autoconfigure.mongo.MongoProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.core.env.MapPropertySource;\n+import org.springframework.core.env.MutablePropertySources;\n+import org.springframework.util.Assert;\n+\n+import com.mongodb.Mongo;\n+import com.mongodb.MongoClient;\n+\n+import de.flapdoodle.embed.mongo.Command;\n+import de.flapdoodle.embed.mongo.MongodExecutable;\n+import de.flapdoodle.embed.mongo.MongodStarter;\n+import de.flapdoodle.embed.mongo.config.ArtifactStoreBuilder;\n+import de.flapdoodle.embed.mongo.config.DownloadConfigBuilder;\n+import de.flapdoodle.embed.mongo.config.IMongodConfig;\n+import de.flapdoodle.embed.mongo.config.MongodConfigBuilder;\n+import de.flapdoodle.embed.mongo.config.Net;\n+import de.flapdoodle.embed.mongo.config.RuntimeConfigBuilder;\n+import de.flapdoodle.embed.mongo.distribution.Feature;\n+import de.flapdoodle.embed.mongo.distribution.IFeatureAwareVersion;\n+import de.flapdoodle.embed.process.config.IRuntimeConfig;\n+import de.flapdoodle.embed.process.config.io.ProcessOutput;\n+import de.flapdoodle.embed.process.io.Processors;\n+import de.flapdoodle.embed.process.io.Slf4jLevel;\n+import de.flapdoodle.embed.process.io.progress.Slf4jProgressListener;\n+\n+import static de.flapdoodle.embed.process.runtime.Network.localhostIsIPv6;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for Embedded Mongo.\n+ *\n+ * @author Henryk Konsek\n+ * @author Andy Wilkinson\n+ */\n+@Configuration\n+@EnableConfigurationProperties({ MongoProperties.class, EmbeddedMongoProperties.class })\n+@AutoConfigureBefore(MongoAutoConfiguration.class)\n+@ConditionalOnClass({ Mongo.class, MongodStarter.class })\n+public class EmbeddedMongoAutoConfiguration {\n+\n+\t@Autowired\n+\tprivate MongoProperties properties;\n+\n+\t@Autowired\n+\tprivate EmbeddedMongoProperties embeddedProperties;\n+\n+\t@Autowired\n+\tprivate ApplicationContext context;\n+\n+\t@Bean(initMethod = "start", destroyMethod = "stop")\n+\t@ConditionalOnMissingBean\n+\tpublic MongodExecutable embeddedMongoServer(IMongodConfig mongodConfig,\n+\t\t\tIRuntimeConfig runtimeConfig) throws IOException {\n+\t\treturn createEmbeddedMongoServer(mongodConfig, runtimeConfig);\n+\t}\n+\n+\t@Bean(initMethod = "start", destroyMethod = "stop")\n+\t@ConditionalOnMissingBean\n+\tpublic MongodExecutable embeddedMongoServer(IMongodConfig mongodConfig)\n+\t\t\tthrows IOException {\n+\t\treturn createEmbeddedMongoServer(mongodConfig, null);\n+\t}\n+\n+\tprivate MongodExecutable createEmbeddedMongoServer(IMongodConfig mongodConfig,\n+\t\t\tIRuntimeConfig runtimeConfig) {\n+\t\tif (getPort() == 0) {\n+\t\t\tpublishPortInfo(mongodConfig.net().getPort());\n+\t\t}\n+\t\tMongodStarter mongodStarter = runtimeConfig == null ? MongodStarter\n+\t\t\t\t.getDefaultInstance() : MongodStarter.getInstance(runtimeConfig);\n+\t\treturn mongodStarter.prepare(mongodConfig);\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\t@ConditionalOnClass(Logger.class)\n+\tpublic IRuntimeConfig embeddedMongoRuntimeConfig() {\n+\t\tLogger logger = LoggerFactory.getLogger(getClass().getPackage().getName()\n+\t\t\t\t+ ".EmbeddedMongo");\n+\n+\t\tProcessOutput processOutput = new ProcessOutput(\n+\t\t\t\tProcessors.logTo(logger, Slf4jLevel.INFO),\n+\t\t\t\tProcessors.logTo(logger, Slf4jLevel.ERROR),\n+\t\t\t\tProcessors.named("[console>]", Processors.logTo(logger, Slf4jLevel.DEBUG)));\n+\n+\t\treturn new RuntimeConfigBuilder()\n+\t\t\t\t.defaultsWithLogger(Command.MongoD, logger)\n+\t\t\t\t.processOutput(processOutput)\n+\t\t\t\t.artifactStore(\n+\t\t\t\t\t\tnew ArtifactStoreBuilder().defaults(Command.MongoD).download(\n+\t\t\t\t\t\t\t\tnew DownloadConfigBuilder().defaultsForCommand(\n+\t\t\t\t\t\t\t\t\t\tCommand.MongoD).progressListener(\n+\t\t\t\t\t\t\t\t\t\tnew Slf4jProgressListener(logger)))).build();\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic IMongodConfig embeddedMongoConfiguration() throws IOException {\n+\t\tIFeatureAwareVersion featureAwareVersion = new ToStringFriendlyFeatureAwareVersion(\n+\t\t\t\tthis.embeddedProperties.getVersion(),\n+\t\t\t\tthis.embeddedProperties.getFeatures());\n+\t\tMongodConfigBuilder builder = new MongodConfigBuilder()\n+\t\t\t\t.version(featureAwareVersion);\n+\t\tif (getPort() > 0) {\n+\t\t\tbuilder.net(new Net(getPort(), localhostIsIPv6()));\n+\t\t}\n+\t\treturn builder.build();\n+\t}\n+\n+\tprivate int getPort() {\n+\t\treturn this.properties.getPort() == null ? MongoProperties.DEFAULT_PORT\n+\t\t\t\t: this.properties.getPort();\n+\t}\n+\n+\tprivate void publishPortInfo(int port) {\n+\t\tsetPortProperty(this.context, port);\n+\t}\n+\n+\tprivate void setPortProperty(ApplicationContext context, int port) {\n+\t\tif (context instanceof ConfigurableApplicationContext) {\n+\t\t\tConfigurableEnvironment environment = ((ConfigurableApplicationContext) context)\n+\t\t\t\t\t.getEnvironment();\n+\t\t\tMutablePropertySources sources = environment.getPropertySources();\n+\t\t\tMap<String, Object> map;\n+\t\t\tif (!sources.contains("mongo.ports")) {\n+\t\t\t\tmap = new HashMap<String, Object>();\n+\t\t\t\tMapPropertySource source = new MapPropertySource("mongo.ports", map);\n+\t\t\t\tsources.addFirst(source);\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\t@SuppressWarnings("unchecked")\n+\t\t\t\tMap<String, Object> value = (Map<String, Object>) sources.get(\n+\t\t\t\t\t\t"mongo.ports").getSource();\n+\t\t\t\tmap = value;\n+\t\t\t}\n+\t\t\tmap.put("local.mongo.port", port);\n+\t\t}\n+\t\tif (this.context.getParent() != null) {\n+\t\t\tsetPortProperty(this.context.getParent(), port);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Additional configuration to ensure that {@link MongoClient} beans depend on the\n+\t * {@code embeddedMongoServer} bean.\n+\t */\n+\t@Configuration\n+\t@ConditionalOnClass(MongoClient.class)\n+\tprotected static class EmbeddedMongoDependencyConfiguration extends\n+\t\t\tMongoClientDependsOnBeanFactoryPostProcessor {\n+\n+\t\tpublic EmbeddedMongoDependencyConfiguration() {\n+\t\t\tsuper("embeddedMongoServer");\n+\t\t}\n+\n+\t}\n+\n+\t/**\n+\t * A workaround for the lack of a {@code toString} implementation on\n+\t * {@code GenericFeatureAwareVersion}.\n+\t */\n+\tprivate static class ToStringFriendlyFeatureAwareVersion implements\n+\t\t\tIFeatureAwareVersion {\n+\n+\t\tprivate final String version;\n+\n+\t\tprivate final Set<Feature> features;\n+\n+\t\tprivate ToStringFriendlyFeatureAwareVersion(String version, Set<Feature> features) {\n+\t\t\tAssert.notNull(version, "version must not be null");\n+\t\t\tthis.version = version;\n+\t\t\tthis.features = features == null ? Collections.<Feature> emptySet()\n+\t\t\t\t\t: features;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String asInDownloadPath() {\n+\t\t\treturn this.version;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean enabled(Feature feature) {\n+\t\t\treturn this.features.contains(feature);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\treturn this.version;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic int hashCode() {\n+\t\t\tfinal int prime = 31;\n+\t\t\tint result = 1;\n+\t\t\tresult = prime * result + this.features.hashCode();\n+\t\t\tresult = prime * result + this.version.hashCode();\n+\t\t\treturn result;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean equals(Object obj) {\n+\t\t\tif (this == obj) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\tif (obj == null) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tif (getClass() != obj.getClass()) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tToStringFriendlyFeatureAwareVersion other = (ToStringFriendlyFeatureAwareVersion) obj;\n+\t\t\tif (!this.features.equals(other.features)) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\telse if (!this.version.equals(other.version)) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\treturn true;\n+\t\t}\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.mongo.embedded;\n\nimport java.io.IOException;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration;\nimport org.springframework.boot.autoconfigure.mongo.MongoProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.ConfigurableEnvironment;\nimport org.springframework.core.env.MapPropertySource;\nimport org.springframework.core.env.MutablePropertySources;\nimport org.springframework.util.Assert;\n\nimport com.mongodb.Mongo;\nimport com.mongodb.MongoClient;\n\nimport de.flapdoodle.embed.mongo.Command;\nimport de.flapdoodle.embed.mongo.MongodExecutable;\nimport de.flapdoodle.embed.mongo.MongodStarter;\nimport de.flapdoodle.embed.mongo.config.ArtifactStoreBuilder;\nimport de.flapdoodle.embed.mongo.config.DownloadConfigBuilder;\nimport de.flapdoodle.embed.mongo.config.IMongodConfig;\nimport de.flapdoodle.embed.mongo.config.MongodConfigBuilder;\nimport de.flapdoodle.embed.mongo.config.Net;\nimport de.flapdoodle.embed.mongo.config.RuntimeConfigBuilder;\nimport de.flapdoodle.embed.mongo.distribution.Feature;\nimport de.flapdoodle.embed.mongo.distribution.IFeatureAwareVersion;\nimport de.flapdoodle.embed.process.config.IRuntimeConfig;\nimport de.flapdoodle.embed.process.config.io.ProcessOutput;\nimport de.flapdoodle.embed.process.io.Processors;\nimport de.flapdoodle.embed.process.io.Slf4jLevel;\nimport de.flapdoodle.embed.process.io.progress.Slf4jProgressListener;\n\nimport static de.flapdoodle.embed.process.runtime.Network.localhostIsIPv6;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Embedded Mongo.\n *\n * @author Henryk Konsek\n * @author Andy Wilkinson\n */\n@Configuration\n@EnableConfigurationProperties({ MongoProperties.class, EmbeddedMongoProperties.class })\n@AutoConfigureBefore(MongoAutoConfiguration.class)\n@ConditionalOnClass({ Mongo.class, MongodStarter.class })\npublic class EmbeddedMongoAutoConfiguration {\n\n\t@Autowired\n\tprivate MongoProperties properties;\n\n\t@Autowired\n\tprivate EmbeddedMongoProperties embeddedProperties;\n\n\t@Autowired\n\tprivate ApplicationContext context;\n\n\t@Bean(initMethod = "start", destroyMethod = "stop")\n\t@ConditionalOnMissingBean\n\tpublic MongodExecutable embeddedMongoServer(IMongodConfig mongodConfig,\n\t\t\tIRuntimeConfig runtimeConfig) throws IOException {\n\t\treturn createEmbeddedMongoServer(mongodConfig, runtimeConfig);\n\t}\n\n\t@Bean(initMethod = "start", destroyMethod = "stop")\n\t@ConditionalOnMissingBean\n\tpublic MongodExecutable embeddedMongoServer(IMongodConfig mongodConfig)\n\t\t\tthrows IOException {\n\t\treturn createEmbeddedMongoServer(mongodConfig, null);\n\t}\n\n\tprivate MongodExecutable createEmbeddedMongoServer(IMongodConfig mongodConfig,\n\t\t\tIRuntimeConfig runtimeConfig) {\n\t\tif (getPort() == 0) {\n\t\t\tpublishPortInfo(mongodConfig.net().getPort());\n\t\t}\n\t\tMongodStarter mongodStarter = runtimeConfig == null ? MongodStarter\n\t\t\t\t.getDefaultInstance() : MongodStarter.getInstance(runtimeConfig);\n\t\treturn mongodStarter.prepare(mongodConfig);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnClass(Logger.class)\n\tpublic IRuntimeConfig embeddedMongoRuntimeConfig() {\n\t\tLogger logger = LoggerFactory.getLogger(getClass().getPackage().getName()\n\t\t\t\t+ ".EmbeddedMongo");\n\n\t\tProcessOutput processOutput = new ProcessOutput(\n\t\t\t\tProcessors.logTo(logger, Slf4jLevel.INFO),\n\t\t\t\tProcessors.logTo(logger, Slf4jLevel.ERROR),\n\t\t\t\tProcessors.named("[console>]", Processors.logTo(logger, Slf4jLevel.DEBUG)));\n\n\t\treturn new RuntimeConfigBuilder()\n\t\t\t\t.defaultsWithLogger(Command.MongoD, logger)\n\t\t\t\t.processOutput(processOutput)\n\t\t\t\t.artifactStore(\n\t\t\t\t\t\tnew ArtifactStoreBuilder().defaults(Command.MongoD).download(\n\t\t\t\t\t\t\t\tnew DownloadConfigBuilder().defaultsForCommand(\n\t\t\t\t\t\t\t\t\t\tCommand.MongoD).progressListener(\n\t\t\t\t\t\t\t\t\t\tnew Slf4jProgressListener(logger)))).build();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic IMongodConfig embeddedMongoConfiguration() throws IOException {\n\t\tIFeatureAwareVersion featureAwareVersion = new ToStringFriendlyFeatureAwareVersion(\n\t\t\t\tthis.embeddedProperties.getVersion(),\n\t\t\t\tthis.embeddedProperties.getFeatures());\n\t\tMongodConfigBuilder builder = new MongodConfigBuilder()\n\t\t\t\t.version(featureAwareVersion);\n\t\tif (getPort() > 0) {\n\t\t\tbuilder.net(new Net(getPort(), localhostIsIPv6()));\n\t\t}\n\t\treturn builder.build();\n\t}\n\n\tprivate int getPort() {\n\t\treturn this.properties.getPort() == null ? MongoProperties.DEFAULT_PORT\n\t\t\t\t: this.properties.getPort();\n\t}\n\n\tprivate void publishPortInfo(int port) {\n\t\tsetPortProperty(this.context, port);\n\t}\n\n\tprivate void setPortProperty(ApplicationContext context, int port) {\n\t\tif (context instanceof ConfigurableApplicationContext) {\n\t\t\tConfigurableEnvironment environment = ((ConfigurableApplicationContext) context)\n\t\t\t\t\t.getEnvironment();\n\t\t\tMutablePropertySources sources = environment.getPropertySources();\n\t\t\tMap<String, Object> map;\n\t\t\tif (!sources.contains("mongo.ports")) {\n\t\t\t\tmap = new HashMap<String, Object>();\n\t\t\t\tMapPropertySource source = new MapPropertySource("mongo.ports", map);\n\t\t\t\tsources.addFirst(source);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t@SuppressWarnings("unchecked")\n\t\t\t\tMap<String, Object> value = (Map<String, Object>) sources.get(\n\t\t\t\t\t\t"mongo.ports").getSource();\n\t\t\t\tmap = value;\n\t\t\t}\n\t\t\tmap.put("local.mongo.port", port);\n\t\t}\n\t\tif (this.context.getParent() != null) {\n\t\t\tsetPortProperty(this.context.getParent(), port);\n\t\t}\n\t}\n\n\t/**\n\t * Additional configuration to ensure that {@link MongoClient} beans depend on the\n\t * {@code embeddedMongoServer} bean.\n\t */\n\t@Configuration\n\t@ConditionalOnClass(MongoClient.class)\n\tprotected static class EmbeddedMongoDependencyConfiguration extends\n\t\t\tMongoClientDependsOnBeanFactoryPostProcessor {\n\n\t\tpublic EmbeddedMongoDependencyConfiguration() {\n\t\t\tsuper("embeddedMongoServer");\n\t\t}\n\n\t}\n\n\t/**\n\t * A workaround for the lack of a {@code toString} implementation on\n\t * {@code GenericFeatureAwareVersion}.\n\t */\n\tprivate static class ToStringFriendlyFeatureAwareVersion implements\n\t\t\tIFeatureAwareVersion {\n\n\t\tprivate final String version;\n\n\t\tprivate final Set<Feature> features;\n\n\t\tprivate ToStringFriendlyFeatureAwareVersion(String version, Set<Feature> features) {\n\t\t\tAssert.notNull(version, "version must not be null");\n\t\t\tthis.version = version;\n\t\t\tthis.features = features == null ? Collections.<Feature> emptySet()\n\t\t\t\t\t: features;\n\t\t}\n\n\t\t@Override\n\t\tpublic String asInDownloadPath() {\n\t\t\treturn this.version;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean enabled(Feature feature) {\n\t\t\treturn this.features.contains(feature);\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn this.version;\n\t\t}\n\n\t\t@Override\n\t\tpublic int hashCode() {\n\t\t\tfinal int prime = 31;\n\t\t\tint result = 1;\n\t\t\tresult = prime * result + this.features.hashCode();\n\t\t\tresult = prime * result + this.version.hashCode();\n\t\t\treturn result;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean equals(Object obj) {\n\t\t\tif (this == obj) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (obj == null) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (getClass() != obj.getClass()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tToStringFriendlyFeatureAwareVersion other = (ToStringFriendlyFeatureAwareVersion) obj;\n\t\t\tif (!this.features.equals(other.features)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (!this.version.equals(other.version)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
