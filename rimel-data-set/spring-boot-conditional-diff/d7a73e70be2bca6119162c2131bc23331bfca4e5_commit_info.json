{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/LettuceConnectionConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/LettuceConnectionConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -22,10 +22,8 @@ import java.util.Collections;\n import java.util.List;\n \n import io.lettuce.core.RedisClient;\n-import io.lettuce.core.cluster.RedisClusterClient;\n import io.lettuce.core.resource.ClientResources;\n import io.lettuce.core.resource.DefaultClientResources;\n-import org.apache.commons.pool2.impl.GenericObjectPool;\n import org.apache.commons.pool2.impl.GenericObjectPoolConfig;\n \n import org.springframework.beans.factory.ObjectProvider;\n@@ -50,8 +48,7 @@ import org.springframework.util.StringUtils;\n  * @author Andy Wilkinson\n  */\n @Configuration\n-@ConditionalOnClass({ GenericObjectPool.class, RedisClient.class,\n-\t\tRedisClusterClient.class })\n+@ConditionalOnClass(RedisClient.class)\n class LettuceConnectionConfiguration extends RedisConnectionConfiguration {\n \n \tprivate final RedisProperties properties;\n@@ -84,15 +81,6 @@ class LettuceConnectionConfiguration extends RedisConnectionConfiguration {\n \t\treturn createLettuceConnectionFactory(clientConfig);\n \t}\n \n-\tprivate static GenericObjectPoolConfig lettucePoolConfig(RedisProperties.Pool props) {\n-\t\tGenericObjectPoolConfig config = new GenericObjectPoolConfig();\n-\t\tconfig.setMaxTotal(props.getMaxActive());\n-\t\tconfig.setMaxIdle(props.getMaxIdle());\n-\t\tconfig.setMinIdle(props.getMinIdle());\n-\t\tconfig.setMaxWaitMillis(props.getMaxWait());\n-\t\treturn config;\n-\t}\n-\n \tprivate LettuceConnectionFactory createLettuceConnectionFactory(\n \t\t\tLettuceClientConfiguration clientConfiguration) {\n \t\tif (getSentinelConfig() != null) {\n@@ -107,14 +95,7 @@ class LettuceConnectionConfiguration extends RedisConnectionConfiguration {\n \n \tprivate LettuceClientConfiguration getLettuceClientConfiguration(\n \t\t\tClientResources clientResources, Pool pool) {\n-\t\tLettuceClientConfigurationBuilder builder;\n-\t\tif (pool != null) {\n-\t\t\tbuilder = LettucePoolingClientConfiguration.builder()\n-\t\t\t\t\t.poolConfig(lettucePoolConfig(pool));\n-\t\t}\n-\t\telse {\n-\t\t\tbuilder = LettuceClientConfiguration.builder();\n-\t\t}\n+\t\tLettuceClientConfigurationBuilder builder = createBuilder(pool);\n \t\tapplyProperties(builder);\n \t\tif (StringUtils.hasText(this.properties.getUrl())) {\n \t\t\tcustomizeConfigurationFromUrl(builder);\n@@ -124,6 +105,13 @@ class LettuceConnectionConfiguration extends RedisConnectionConfiguration {\n \t\treturn builder.build();\n \t}\n \n+\tprivate LettuceClientConfigurationBuilder createBuilder(Pool pool) {\n+\t\tif (pool == null) {\n+\t\t\treturn LettuceClientConfiguration.builder();\n+\t\t}\n+\t\treturn new PoolBuilderFactory().createBuilder(pool);\n+\t}\n+\n \tprivate LettuceClientConfigurationBuilder applyProperties(\n \t\t\tLettuceClientConfiguration.LettuceClientConfigurationBuilder builder) {\n \t\tif (this.properties.isSsl()) {\n@@ -157,4 +145,25 @@ class LettuceConnectionConfiguration extends RedisConnectionConfiguration {\n \t\t}\n \t}\n \n+\t/**\n+\t * Inner class to allow optional commons-pool2 dependency.\n+\t */\n+\tprivate static class PoolBuilderFactory {\n+\n+\t\tpublic LettuceClientConfigurationBuilder createBuilder(Pool properties) {\n+\t\t\treturn LettucePoolingClientConfiguration.builder()\n+\t\t\t\t\t.poolConfig(getPoolConfig(properties));\n+\t\t}\n+\n+\t\tprivate GenericObjectPoolConfig getPoolConfig(Pool properties) {\n+\t\t\tGenericObjectPoolConfig config = new GenericObjectPoolConfig();\n+\t\t\tconfig.setMaxTotal(properties.getMaxActive());\n+\t\t\tconfig.setMaxIdle(properties.getMaxIdle());\n+\t\t\tconfig.setMinIdle(properties.getMinIdle());\n+\t\t\tconfig.setMaxWaitMillis(properties.getMaxWait());\n+\t\t\treturn config;\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.redis;\n\nimport java.net.UnknownHostException;\nimport java.time.Duration;\nimport java.util.Collections;\nimport java.util.List;\n\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.resource.ClientResources;\nimport io.lettuce.core.resource.DefaultClientResources;\nimport org.apache.commons.pool2.impl.GenericObjectPoolConfig;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.data.redis.RedisProperties.Pool;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisClusterConfiguration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.connection.RedisSentinelConfiguration;\nimport org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration;\nimport org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration.LettuceClientConfigurationBuilder;\nimport org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;\nimport org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration;\nimport org.springframework.util.StringUtils;\n\n/**\n * Redis connection configuration using Lettuce.\n *\n * @author Mark Paluch\n * @author Andy Wilkinson\n */\n@Configuration\n@ConditionalOnClass(RedisClient.class)\nclass LettuceConnectionConfiguration extends RedisConnectionConfiguration {\n\n\tprivate final RedisProperties properties;\n\n\tprivate final List<LettuceClientConfigurationBuilderCustomizer> builderCustomizers;\n\n\tLettuceConnectionConfiguration(RedisProperties properties,\n\t\t\tObjectProvider<RedisSentinelConfiguration> sentinelConfigurationProvider,\n\t\t\tObjectProvider<RedisClusterConfiguration> clusterConfigurationProvider,\n\t\t\tObjectProvider<List<LettuceClientConfigurationBuilderCustomizer>> builderCustomizers) {\n\t\tsuper(properties, sentinelConfigurationProvider, clusterConfigurationProvider);\n\t\tthis.properties = properties;\n\t\tthis.builderCustomizers = builderCustomizers\n\t\t\t\t.getIfAvailable(Collections::emptyList);\n\t}\n\n\t@Bean(destroyMethod = "shutdown")\n\t@ConditionalOnMissingBean(ClientResources.class)\n\tpublic DefaultClientResources lettuceClientResources() {\n\t\treturn DefaultClientResources.create();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(RedisConnectionFactory.class)\n\tpublic LettuceConnectionFactory redisConnectionFactory(\n\t\t\tClientResources clientResources) throws UnknownHostException {\n\t\tLettuceClientConfiguration clientConfig;\n\t\tclientConfig = getLettuceClientConfiguration(clientResources,\n\t\t\t\tthis.properties.getLettuce().getPool());\n\t\treturn createLettuceConnectionFactory(clientConfig);\n\t}\n\n\tprivate LettuceConnectionFactory createLettuceConnectionFactory(\n\t\t\tLettuceClientConfiguration clientConfiguration) {\n\t\tif (getSentinelConfig() != null) {\n\t\t\treturn new LettuceConnectionFactory(getSentinelConfig(), clientConfiguration);\n\t\t}\n\t\tif (getClusterConfiguration() != null) {\n\t\t\treturn new LettuceConnectionFactory(getClusterConfiguration(),\n\t\t\t\t\tclientConfiguration);\n\t\t}\n\t\treturn new LettuceConnectionFactory(getStandaloneConfig(), clientConfiguration);\n\t}\n\n\tprivate LettuceClientConfiguration getLettuceClientConfiguration(\n\t\t\tClientResources clientResources, Pool pool) {\n\t\tLettuceClientConfigurationBuilder builder = createBuilder(pool);\n\t\tapplyProperties(builder);\n\t\tif (StringUtils.hasText(this.properties.getUrl())) {\n\t\t\tcustomizeConfigurationFromUrl(builder);\n\t\t}\n\t\tbuilder.clientResources(clientResources);\n\t\tcustomize(builder);\n\t\treturn builder.build();\n\t}\n\n\tprivate LettuceClientConfigurationBuilder createBuilder(Pool pool) {\n\t\tif (pool == null) {\n\t\t\treturn LettuceClientConfiguration.builder();\n\t\t}\n\t\treturn new PoolBuilderFactory().createBuilder(pool);\n\t}\n\n\tprivate LettuceClientConfigurationBuilder applyProperties(\n\t\t\tLettuceClientConfiguration.LettuceClientConfigurationBuilder builder) {\n\t\tif (this.properties.isSsl()) {\n\t\t\tbuilder.useSsl();\n\t\t}\n\t\tif (this.properties.getTimeout() != 0) {\n\t\t\tbuilder.commandTimeout(Duration.ofMillis(this.properties.getTimeout()));\n\t\t}\n\t\tif (this.properties.getLettuce() != null) {\n\t\t\tRedisProperties.Lettuce lettuce = this.properties.getLettuce();\n\t\t\tif (lettuce.getShutdownTimeout() >= 0) {\n\t\t\t\tbuilder.shutdownTimeout(Duration\n\t\t\t\t\t\t.ofMillis(this.properties.getLettuce().getShutdownTimeout()));\n\t\t\t}\n\t\t}\n\t\treturn builder;\n\t}\n\n\tprivate void customizeConfigurationFromUrl(\n\t\t\tLettuceClientConfiguration.LettuceClientConfigurationBuilder builder) {\n\t\tConnectionInfo connectionInfo = parseUrl(this.properties.getUrl());\n\t\tif (connectionInfo.isUseSsl()) {\n\t\t\tbuilder.useSsl();\n\t\t}\n\t}\n\n\tprivate void customize(\n\t\t\tLettuceClientConfiguration.LettuceClientConfigurationBuilder builder) {\n\t\tfor (LettuceClientConfigurationBuilderCustomizer customizer : this.builderCustomizers) {\n\t\t\tcustomizer.customize(builder);\n\t\t}\n\t}\n\n\t/**\n\t * Inner class to allow optional commons-pool2 dependency.\n\t */\n\tprivate static class PoolBuilderFactory {\n\n\t\tpublic LettuceClientConfigurationBuilder createBuilder(Pool properties) {\n\t\t\treturn LettucePoolingClientConfiguration.builder()\n\t\t\t\t\t.poolConfig(getPoolConfig(properties));\n\t\t}\n\n\t\tprivate GenericObjectPoolConfig getPoolConfig(Pool properties) {\n\t\t\tGenericObjectPoolConfig config = new GenericObjectPoolConfig();\n\t\t\tconfig.setMaxTotal(properties.getMaxActive());\n\t\t\tconfig.setMaxIdle(properties.getMaxIdle());\n\t\t\tconfig.setMinIdle(properties.getMinIdle());\n\t\t\tconfig.setMaxWaitMillis(properties.getMaxWait());\n\t\t\treturn config;\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.redis;\n\nimport java.net.UnknownHostException;\nimport java.time.Duration;\nimport java.util.Collections;\nimport java.util.List;\n\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.cluster.RedisClusterClient;\nimport io.lettuce.core.resource.ClientResources;\nimport io.lettuce.core.resource.DefaultClientResources;\nimport org.apache.commons.pool2.impl.GenericObjectPool;\nimport org.apache.commons.pool2.impl.GenericObjectPoolConfig;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.data.redis.RedisProperties.Pool;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisClusterConfiguration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.connection.RedisSentinelConfiguration;\nimport org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration;\nimport org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration.LettuceClientConfigurationBuilder;\nimport org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;\nimport org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration;\nimport org.springframework.util.StringUtils;\n\n/**\n * Redis connection configuration using Lettuce.\n *\n * @author Mark Paluch\n * @author Andy Wilkinson\n */\n@Configuration\n@ConditionalOnClass({ GenericObjectPool.class, RedisClient.class,\n\t\tRedisClusterClient.class })\nclass LettuceConnectionConfiguration extends RedisConnectionConfiguration {\n\n\tprivate final RedisProperties properties;\n\n\tprivate final List<LettuceClientConfigurationBuilderCustomizer> builderCustomizers;\n\n\tLettuceConnectionConfiguration(RedisProperties properties,\n\t\t\tObjectProvider<RedisSentinelConfiguration> sentinelConfigurationProvider,\n\t\t\tObjectProvider<RedisClusterConfiguration> clusterConfigurationProvider,\n\t\t\tObjectProvider<List<LettuceClientConfigurationBuilderCustomizer>> builderCustomizers) {\n\t\tsuper(properties, sentinelConfigurationProvider, clusterConfigurationProvider);\n\t\tthis.properties = properties;\n\t\tthis.builderCustomizers = builderCustomizers\n\t\t\t\t.getIfAvailable(Collections::emptyList);\n\t}\n\n\t@Bean(destroyMethod = "shutdown")\n\t@ConditionalOnMissingBean(ClientResources.class)\n\tpublic DefaultClientResources lettuceClientResources() {\n\t\treturn DefaultClientResources.create();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(RedisConnectionFactory.class)\n\tpublic LettuceConnectionFactory redisConnectionFactory(\n\t\t\tClientResources clientResources) throws UnknownHostException {\n\t\tLettuceClientConfiguration clientConfig;\n\t\tclientConfig = getLettuceClientConfiguration(clientResources,\n\t\t\t\tthis.properties.getLettuce().getPool());\n\t\treturn createLettuceConnectionFactory(clientConfig);\n\t}\n\n\tprivate static GenericObjectPoolConfig lettucePoolConfig(RedisProperties.Pool props) {\n\t\tGenericObjectPoolConfig config = new GenericObjectPoolConfig();\n\t\tconfig.setMaxTotal(props.getMaxActive());\n\t\tconfig.setMaxIdle(props.getMaxIdle());\n\t\tconfig.setMinIdle(props.getMinIdle());\n\t\tconfig.setMaxWaitMillis(props.getMaxWait());\n\t\treturn config;\n\t}\n\n\tprivate LettuceConnectionFactory createLettuceConnectionFactory(\n\t\t\tLettuceClientConfiguration clientConfiguration) {\n\t\tif (getSentinelConfig() != null) {\n\t\t\treturn new LettuceConnectionFactory(getSentinelConfig(), clientConfiguration);\n\t\t}\n\t\tif (getClusterConfiguration() != null) {\n\t\t\treturn new LettuceConnectionFactory(getClusterConfiguration(),\n\t\t\t\t\tclientConfiguration);\n\t\t}\n\t\treturn new LettuceConnectionFactory(getStandaloneConfig(), clientConfiguration);\n\t}\n\n\tprivate LettuceClientConfiguration getLettuceClientConfiguration(\n\t\t\tClientResources clientResources, Pool pool) {\n\t\tLettuceClientConfigurationBuilder builder;\n\t\tif (pool != null) {\n\t\t\tbuilder = LettucePoolingClientConfiguration.builder()\n\t\t\t\t\t.poolConfig(lettucePoolConfig(pool));\n\t\t}\n\t\telse {\n\t\t\tbuilder = LettuceClientConfiguration.builder();\n\t\t}\n\t\tapplyProperties(builder);\n\t\tif (StringUtils.hasText(this.properties.getUrl())) {\n\t\t\tcustomizeConfigurationFromUrl(builder);\n\t\t}\n\t\tbuilder.clientResources(clientResources);\n\t\tcustomize(builder);\n\t\treturn builder.build();\n\t}\n\n\tprivate LettuceClientConfigurationBuilder applyProperties(\n\t\t\tLettuceClientConfiguration.LettuceClientConfigurationBuilder builder) {\n\t\tif (this.properties.isSsl()) {\n\t\t\tbuilder.useSsl();\n\t\t}\n\t\tif (this.properties.getTimeout() != 0) {\n\t\t\tbuilder.commandTimeout(Duration.ofMillis(this.properties.getTimeout()));\n\t\t}\n\t\tif (this.properties.getLettuce() != null) {\n\t\t\tRedisProperties.Lettuce lettuce = this.properties.getLettuce();\n\t\t\tif (lettuce.getShutdownTimeout() >= 0) {\n\t\t\t\tbuilder.shutdownTimeout(Duration\n\t\t\t\t\t\t.ofMillis(this.properties.getLettuce().getShutdownTimeout()));\n\t\t\t}\n\t\t}\n\t\treturn builder;\n\t}\n\n\tprivate void customizeConfigurationFromUrl(\n\t\t\tLettuceClientConfiguration.LettuceClientConfigurationBuilder builder) {\n\t\tConnectionInfo connectionInfo = parseUrl(this.properties.getUrl());\n\t\tif (connectionInfo.isUseSsl()) {\n\t\t\tbuilder.useSsl();\n\t\t}\n\t}\n\n\tprivate void customize(\n\t\t\tLettuceClientConfiguration.LettuceClientConfigurationBuilder builder) {\n\t\tfor (LettuceClientConfigurationBuilderCustomizer customizer : this.builderCustomizers) {\n\t\t\tcustomizer.customize(builder);\n\t\t}\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
