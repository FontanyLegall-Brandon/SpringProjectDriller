{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -17,18 +17,13 @@\n package org.springframework.boot.autoconfigure.security;\n \n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Import;\n import org.springframework.security.authentication.AuthenticationManager;\n-import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n-import org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;\n import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n \n /**\n@@ -57,23 +52,4 @@ public class SecurityAutoConfiguration {\n \t\treturn new SecurityProperties();\n \t}\n \n-\t/**\n-\t * If the user explicitly disables the basic security features and forgets to\n-\t * <code>@EnableWebSecurity</code>, and yet still wants a bean of type\n-\t * WebSecurityConfigurerAdapter, he is trying to use a custom security setup. The app\n-\t * would fail in a confusing way without this shim configuration, which just helpfully\n-\t * defines an empty <code>@EnableWebSecurity</code>.\n-\t * \n-\t * @author Dave Syer\n-\t */\n-\t@ConditionalOnExpression("!${security.basic.enabled:true}")\n-\t@ConditionalOnBean(WebSecurityConfigurerAdapter.class)\n-\t@ConditionalOnClass(EnableWebSecurity.class)\n-\t@ConditionalOnMissingBean(WebSecurityConfiguration.class)\n-\t@ConditionalOnWebApplication\n-\t@EnableWebSecurity\n-\tprotected static class EmptyWebSecurityConfiguration {\n-\n-\t}\n-\n }\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Security. Provides an\n * {@link AuthenticationManager} based on configuration bound to a\n * {@link SecurityProperties} bean. There is one user (named "user") whose password is\n * random and printed on the console at INFO level during startup. In a webapp this\n * configuration also secures all web endpoints (except some well-known static resource)\n * locations with HTTP basic security. To replace all the default behaviour in a webapp\n * provide a <code>@Configuration</code> with <code>@EnableWebSecurity</code>. To just add\n * your own layer of application security in front of the defaults, add a\n * <code>@Configuration</code> of type {@link WebSecurityConfigurerAdapter}.\n * \n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnClass(AuthenticationManager.class)\n@EnableConfigurationProperties\n@Import({ SpringBootWebSecurityConfiguration.class,\n\t\tAuthenticationManagerConfiguration.class })\npublic class SecurityAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic SecurityProperties securityProperties() {\n\t\treturn new SecurityProperties();\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Security. Provides an\n * {@link AuthenticationManager} based on configuration bound to a\n * {@link SecurityProperties} bean. There is one user (named "user") whose password is\n * random and printed on the console at INFO level during startup. In a webapp this\n * configuration also secures all web endpoints (except some well-known static resource)\n * locations with HTTP basic security. To replace all the default behaviour in a webapp\n * provide a <code>@Configuration</code> with <code>@EnableWebSecurity</code>. To just add\n * your own layer of application security in front of the defaults, add a\n * <code>@Configuration</code> of type {@link WebSecurityConfigurerAdapter}.\n * \n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnClass(AuthenticationManager.class)\n@EnableConfigurationProperties\n@Import({ SpringBootWebSecurityConfiguration.class,\n\t\tAuthenticationManagerConfiguration.class })\npublic class SecurityAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic SecurityProperties securityProperties() {\n\t\treturn new SecurityProperties();\n\t}\n\n\t/**\n\t * If the user explicitly disables the basic security features and forgets to\n\t * <code>@EnableWebSecurity</code>, and yet still wants a bean of type\n\t * WebSecurityConfigurerAdapter, he is trying to use a custom security setup. The app\n\t * would fail in a confusing way without this shim configuration, which just helpfully\n\t * defines an empty <code>@EnableWebSecurity</code>.\n\t * \n\t * @author Dave Syer\n\t */\n\t@ConditionalOnExpression("!${security.basic.enabled:true}")\n\t@ConditionalOnBean(WebSecurityConfigurerAdapter.class)\n\t@ConditionalOnClass(EnableWebSecurity.class)\n\t@ConditionalOnMissingBean(WebSecurityConfiguration.class)\n\t@ConditionalOnWebApplication\n\t@EnableWebSecurity\n\tprotected static class EmptyWebSecurityConfiguration {\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
