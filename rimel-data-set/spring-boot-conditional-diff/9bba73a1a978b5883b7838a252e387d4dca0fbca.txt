@@ -1,5 +1,5 @@
 
 @Configuration
 @EnableConfigurationProperties(ThymeleafProperties.class)
-@ConditionalOnClass(SpringTemplateEngine.class)
+@ConditionalOnClass(TemplateMode.class)
 @AutoConfigureAfter(WebMvcAutoConfiguration.class)
 public class ThymeleafAutoConfiguration {
 
 	@Configuration
-	@ConditionalOnMissingClass()
-	static class Thymeleaf2Configuration {
+	@ConditionalOnMissingBean(name = )
+	static class DefaultTemplateResolverConfiguration {
 
-		@Configuration
-		@ConditionalOnMissingBean(name = )
-		static class DefaultTemplateResolverConfiguration
-				extends AbstractTemplateResolverConfiguration {
+		private static final Log logger = LogFactory
+				.getLog(DefaultTemplateResolverConfiguration.class);
 
-			DefaultTemplateResolverConfiguration(ThymeleafProperties properties,
-					ApplicationContext applicationContext) {
-				super(properties, applicationContext);
-			}
+		private final ThymeleafProperties properties;
 
-			@Bean
-			public SpringResourceResourceResolver thymeleafResourceResolver() {
-				return new SpringResourceResourceResolver();
-			}
+		private final ApplicationContext applicationContext;
 
+		DefaultTemplateResolverConfiguration(ThymeleafProperties properties,
+				ApplicationContext applicationContext) {
+			this.properties = properties;
+			this.applicationContext = applicationContext;
 		}
 
-		@Configuration
-		@ConditionalOnClass({ Servlet.class })
-		@ConditionalOnWebApplication
-		static class Thymeleaf2ViewResolverConfiguration
-				extends AbstractThymeleafViewResolverConfiguration {
-
-			Thymeleaf2ViewResolverConfiguration(ThymeleafProperties properties,
-					SpringTemplateEngine templateEngine) {
-				super(properties, templateEngine);
-			}
-
-			@Override
-			protected void configureTemplateEngine(ThymeleafViewResolver resolver,
-					SpringTemplateEngine templateEngine) {
-				resolver.setTemplateEngine(templateEngine);
+		@PostConstruct
+		public void checkTemplateLocationExists() {
+			boolean checkTemplateLocation = this.properties.isCheckTemplateLocation();
+			if (checkTemplateLocation) {
+				TemplateLocation location = new TemplateLocation(
+						this.properties.getPrefix());
+				if (!location.exists(this.applicationContext)) {
+					logger.warn( + location
+							+ 
+							+ );
+				}
 			}
-
 		}
 
-		@Configuration
-		@ConditionalOnClass(ConditionalCommentsDialect.class)
-		static class ThymeleafConditionalCommentsDialectConfiguration {
-
-			@Bean
-			@ConditionalOnMissingBean
-			public ConditionalCommentsDialect conditionalCommentsDialect() {
-				return new ConditionalCommentsDialect();
+		@Bean
+		public SpringResourceTemplateResolver defaultTemplateResolver() {
+			SpringResourceTemplateResolver resolver = new SpringResourceTemplateResolver();
+			resolver.setApplicationContext(this.applicationContext);
+			resolver.setPrefix(this.properties.getPrefix());
+			resolver.setSuffix(this.properties.getSuffix());
+			resolver.setTemplateMode(this.properties.getMode());
+			if (this.properties.getEncoding() != null) {
+				resolver.setCharacterEncoding(this.properties.getEncoding().name());
 			}
-
+			resolver.setCacheable(this.properties.isCache());
+			Integer order = this.properties.getTemplateResolverOrder();
+			if (order != null) {
+				resolver.setOrder(order);
+			}
+			resolver.setCheckExistence(this.properties.isCheckTemplate());
+			return resolver;
 		}
 
 	}
 
 	@Configuration
-	@ConditionalOnClass(name = )
-	static class Thymeleaf3Configuration {
-
-		@Configuration
-		@ConditionalOnMissingBean(name = )
-		static class DefaultTemplateResolverConfiguration
-				extends AbstractTemplateResolverConfiguration {
+	@ConditionalOnClass({ Servlet.class })
+	@ConditionalOnWebApplication
+	static class ThymeleafViewResolverConfiguration {
 
-			DefaultTemplateResolverConfiguration(ThymeleafProperties properties,
-					ApplicationContext applicationContext) {
-				super(properties, applicationContext);
-			}
+		private final ThymeleafProperties properties;
 
-			@Bean
-			@Override
-			public SpringResourceTemplateResolver defaultTemplateResolver() {
-				SpringResourceTemplateResolver resolver = super.defaultTemplateResolver();
-				Method setCheckExistence = ReflectionUtils.findMethod(resolver.getClass(),
-						, boolean.class);
-				ReflectionUtils.invokeMethod(setCheckExistence, resolver,
-						getProperties().isCheckTemplate());
-				return resolver;
-			}
+		private final SpringTemplateEngine templateEngine;
 
+		ThymeleafViewResolverConfiguration(ThymeleafProperties properties,
+				SpringTemplateEngine templateEngine) {
+			this.properties = properties;
+			this.templateEngine = templateEngine;
 		}
 
-		@Configuration
-		@ConditionalOnClass({ Servlet.class })
-		@ConditionalOnWebApplication
-		static class Thymeleaf3ViewResolverConfiguration
-				extends AbstractThymeleafViewResolverConfiguration {
-
-			Thymeleaf3ViewResolverConfiguration(ThymeleafProperties properties,
-					SpringTemplateEngine templateEngine) {
-				super(properties, templateEngine);
-			}
+		@Bean
+		@ConditionalOnMissingBean(name = )
+		@ConditionalOnProperty(name = , matchIfMissing = true)
+		public ThymeleafViewResolver thymeleafViewResolver() {
+			ThymeleafViewResolver resolver = new ThymeleafViewResolver();
+			resolver.setTemplateEngine(this.templateEngine);
+			resolver.setCharacterEncoding(this.properties.getEncoding().name());
+			resolver.setContentType(appendCharset(this.properties.getContentType(),
+					resolver.getCharacterEncoding()));
+			resolver.setExcludedViewNames(this.properties.getExcludedViewNames());
+			resolver.setViewNames(this.properties.getViewNames());
+			
+			
+			resolver.setOrder(Ordered.LOWEST_PRECEDENCE - 5);
+			resolver.setCache(this.properties.isCache());
+			return resolver;
+		}
 
-			@Override
-			protected void configureTemplateEngine(ThymeleafViewResolver resolver,
-					SpringTemplateEngine templateEngine) {
-				Method setTemplateEngine;
-				try {
-					setTemplateEngine = ReflectionUtils.findMethod(resolver.getClass(),
-							,
-							Class.forName(, true,
-									resolver.getClass().getClassLoader()));
-				}
-				catch (ClassNotFoundException ex) {
-					throw new IllegalStateException(ex);
-				}
-				ReflectionUtils.invokeMethod(setTemplateEngine, resolver, templateEngine);
+		private String appendCharset(MimeType type, String charset) {
+			if (type.getCharset() != null) {
+				return type.toString();
 			}
-
+			LinkedHashMap<String, String> parameters = new LinkedHashMap<String, String>();
+			parameters.put(, charset);
+			parameters.putAll(type.getParameters());
+			return new MimeType(type, parameters).toString();
 		}
 
 	}

