{'_old_path': None, '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2012-2018 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.elasticsearch.rest;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.http.HttpHost;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.Credentials;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.impl.client.BasicCredentialsProvider;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestClientBuilder;\n+import org.elasticsearch.client.RestHighLevelClient;\n+\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.context.properties.PropertyMapper;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-Configuration}\n+ * for Elasticseach REST clients.\n+ *\n+ * @author Brian Clozel\n+ * @since 2.1.0\n+ */\n+@Configuration\n+@ConditionalOnClass(RestClient.class)\n+@EnableConfigurationProperties(RestClientProperties.class)\n+public class RestClientAutoConfiguration {\n+\n+\n+\tprivate final RestClientProperties properties;\n+\n+\tprivate final List<RestClientBuilderCustomizer> builderCustomizers;\n+\n+\tpublic RestClientAutoConfiguration(RestClientProperties properties,\n+\t\t\tObjectProvider<List<RestClientBuilderCustomizer>> builderCustomizers) {\n+\t\tthis.properties = properties;\n+\t\tthis.builderCustomizers = builderCustomizers.getIfAvailable(Collections::emptyList);\n+\t}\n+\n+\t@Bean(destroyMethod = "close")\n+\t@ConditionalOnMissingBean\n+\tpublic RestClient restClient() {\n+\t\tRestClientBuilder builder = configureBuilder();\n+\t\treturn builder.build();\n+\t}\n+\n+\tprotected RestClientBuilder configureBuilder() {\n+\t\tHttpHost[] hosts = this.properties.getUris().stream()\n+\t\t\t\t.map(HttpHost::create).toArray(HttpHost[]::new);\n+\t\tRestClientBuilder builder = RestClient.builder(hosts);\n+\t\tPropertyMapper map = PropertyMapper.get();\n+\t\tmap.from(this.properties::getUsername).whenHasText().to((username) -> {\n+\t\t\tCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n+\t\t\tCredentials credentials = new UsernamePasswordCredentials(\n+\t\t\t\t\tthis.properties.getUsername(), this.properties.getPassword());\n+\t\t\tcredentialsProvider.setCredentials(AuthScope.ANY, credentials);\n+\t\t\tbuilder.setHttpClientConfigCallback(httpClientBuilder ->\n+\t\t\t\t\thttpClientBuilder.setDefaultCredentialsProvider(credentialsProvider));\n+\t\t});\n+\t\tthis.builderCustomizers.forEach((customizer) -> customizer.customize(builder));\n+\t\treturn builder;\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnClass(RestHighLevelClient.class)\n+\tpublic static class RestHighLevelClientConfiguration {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean\n+\t\tpublic RestHighLevelClient restHighLevelClient(RestClient restClient) {\n+\t\t\treturn new RestHighLevelClient(restClient);\n+\t\t}\n+\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.elasticsearch.rest;\n\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.apache.http.HttpHost;\nimport org.apache.http.auth.AuthScope;\nimport org.apache.http.auth.Credentials;\nimport org.apache.http.auth.UsernamePasswordCredentials;\nimport org.apache.http.client.CredentialsProvider;\nimport org.apache.http.impl.client.BasicCredentialsProvider;\nimport org.elasticsearch.client.RestClient;\nimport org.elasticsearch.client.RestClientBuilder;\nimport org.elasticsearch.client.RestHighLevelClient;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.context.properties.PropertyMapper;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-Configuration}\n * for Elasticseach REST clients.\n *\n * @author Brian Clozel\n * @since 2.1.0\n */\n@Configuration\n@ConditionalOnClass(RestClient.class)\n@EnableConfigurationProperties(RestClientProperties.class)\npublic class RestClientAutoConfiguration {\n\n\n\tprivate final RestClientProperties properties;\n\n\tprivate final List<RestClientBuilderCustomizer> builderCustomizers;\n\n\tpublic RestClientAutoConfiguration(RestClientProperties properties,\n\t\t\tObjectProvider<List<RestClientBuilderCustomizer>> builderCustomizers) {\n\t\tthis.properties = properties;\n\t\tthis.builderCustomizers = builderCustomizers.getIfAvailable(Collections::emptyList);\n\t}\n\n\t@Bean(destroyMethod = "close")\n\t@ConditionalOnMissingBean\n\tpublic RestClient restClient() {\n\t\tRestClientBuilder builder = configureBuilder();\n\t\treturn builder.build();\n\t}\n\n\tprotected RestClientBuilder configureBuilder() {\n\t\tHttpHost[] hosts = this.properties.getUris().stream()\n\t\t\t\t.map(HttpHost::create).toArray(HttpHost[]::new);\n\t\tRestClientBuilder builder = RestClient.builder(hosts);\n\t\tPropertyMapper map = PropertyMapper.get();\n\t\tmap.from(this.properties::getUsername).whenHasText().to((username) -> {\n\t\t\tCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n\t\t\tCredentials credentials = new UsernamePasswordCredentials(\n\t\t\t\t\tthis.properties.getUsername(), this.properties.getPassword());\n\t\t\tcredentialsProvider.setCredentials(AuthScope.ANY, credentials);\n\t\t\tbuilder.setHttpClientConfigCallback(httpClientBuilder ->\n\t\t\t\t\thttpClientBuilder.setDefaultCredentialsProvider(credentialsProvider));\n\t\t});\n\t\tthis.builderCustomizers.forEach((customizer) -> customizer.customize(builder));\n\t\treturn builder;\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(RestHighLevelClient.class)\n\tpublic static class RestHighLevelClientConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic RestHighLevelClient restHighLevelClient(RestClient restClient) {\n\t\t\treturn new RestHighLevelClient(restClient);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
