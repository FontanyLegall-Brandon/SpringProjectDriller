{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/jta/NarayanaJtaConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2012-2015 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.transaction.jta;\n+\n+import javax.jms.Message;\n+import javax.transaction.TransactionManager;\n+import javax.transaction.UserTransaction;\n+\n+import com.arjuna.ats.jbossatx.jta.RecoveryManagerService;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.jta.XAConnectionFactoryWrapper;\n+import org.springframework.boot.jta.XADataSourceWrapper;\n+import org.springframework.boot.jta.narayana.NarayanaBeanFactoryPostProcessor;\n+import org.springframework.boot.jta.narayana.NarayanaConfigurationBean;\n+import org.springframework.boot.jta.narayana.NarayanaProperties;\n+import org.springframework.boot.jta.narayana.NarayanaRecoveryManagerBean;\n+import org.springframework.boot.jta.narayana.NarayanaXAConnectionFactoryWrapper;\n+import org.springframework.boot.jta.narayana.NarayanaXADataSourceWrapper;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.DependsOn;\n+import org.springframework.transaction.PlatformTransactionManager;\n+import org.springframework.transaction.jta.JtaTransactionManager;\n+\n+/**\n+ * JTA Configuration for <a href="http://narayana.io/">Narayana</a>.\n+ *\n+ * @author <a href="mailto:gytis@redhat.com">Gytis Trikleris</a>\n+ */\n+@Configuration\n+@ConditionalOnClass({ JtaTransactionManager.class, com.arjuna.ats.jta.UserTransaction.class })\n+@ConditionalOnMissingBean(PlatformTransactionManager.class)\n+public class NarayanaJtaConfiguration {\n+\n+\t@Autowired\n+\tprivate JtaProperties jtaProperties;\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic NarayanaProperties narayanaProperties() {\n+\t\treturn new NarayanaProperties();\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic NarayanaConfigurationBean narayanaConfigurationBean(NarayanaProperties narayanaProperties) {\n+\t\tif (this.jtaProperties.getLogDir() != null) {\n+\t\t\tnarayanaProperties.setLogDir(this.jtaProperties.getLogDir());\n+\t\t}\n+\n+\t\tif (this.jtaProperties.getTransactionManagerId() != null) {\n+\t\t\tnarayanaProperties.setTransactionManagerId(this.jtaProperties.getTransactionManagerId());\n+\t\t}\n+\n+\t\treturn new NarayanaConfigurationBean(narayanaProperties);\n+\t}\n+\n+\t@Bean\n+\t@DependsOn("narayanaConfigurationBean")\n+\t@ConditionalOnMissingBean\n+\tpublic UserTransaction narayanaUserTransaction() {\n+\t\treturn com.arjuna.ats.jta.UserTransaction.userTransaction();\n+\t}\n+\n+\t@Bean\n+\t@DependsOn("narayanaConfigurationBean")\n+\t@ConditionalOnMissingBean\n+\tpublic TransactionManager narayanaTransactionManager() {\n+\t\treturn com.arjuna.ats.jta.TransactionManager.transactionManager();\n+\t}\n+\n+\t@Bean\n+\t@DependsOn("narayanaConfigurationBean")\n+\tpublic RecoveryManagerService narayanaRecoveryManagerService() {\n+\t\treturn new RecoveryManagerService();\n+\t}\n+\n+\t@Bean\n+\tpublic NarayanaRecoveryManagerBean narayanaRecoveryManagerBean(RecoveryManagerService recoveryManagerService) {\n+\t\treturn new NarayanaRecoveryManagerBean(recoveryManagerService);\n+\t}\n+\n+\t@Bean\n+\tpublic JtaTransactionManager transactionManager(UserTransaction userTransaction, TransactionManager transactionManager) {\n+\t\treturn new JtaTransactionManager(userTransaction, transactionManager);\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean(XADataSourceWrapper.class)\n+\tpublic XADataSourceWrapper xaDataSourceWrapper(NarayanaRecoveryManagerBean narayanaRecoveryManagerBean,\n+\t\t\tNarayanaProperties narayanaProperties) {\n+\t\treturn new NarayanaXADataSourceWrapper(narayanaRecoveryManagerBean, narayanaProperties);\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic static NarayanaBeanFactoryPostProcessor narayanaBeanFactoryPostProcessor() {\n+\t\treturn new NarayanaBeanFactoryPostProcessor();\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnClass(Message.class)\n+\tstatic class NarayanaJtaJmsConfiguration {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(XAConnectionFactoryWrapper.class)\n+\t\tpublic NarayanaXAConnectionFactoryWrapper xaConnectionFactoryWrapper(TransactionManager transactionManager,\n+\t\t\t\tNarayanaRecoveryManagerBean narayanaRecoveryManagerBean, NarayanaProperties narayanaProperties) {\n+\t\t\treturn new NarayanaXAConnectionFactoryWrapper(transactionManager, narayanaRecoveryManagerBean, narayanaProperties);\n+\t\t}\n+\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.transaction.jta;\n\nimport javax.jms.Message;\nimport javax.transaction.TransactionManager;\nimport javax.transaction.UserTransaction;\n\nimport com.arjuna.ats.jbossatx.jta.RecoveryManagerService;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.jta.XAConnectionFactoryWrapper;\nimport org.springframework.boot.jta.XADataSourceWrapper;\nimport org.springframework.boot.jta.narayana.NarayanaBeanFactoryPostProcessor;\nimport org.springframework.boot.jta.narayana.NarayanaConfigurationBean;\nimport org.springframework.boot.jta.narayana.NarayanaProperties;\nimport org.springframework.boot.jta.narayana.NarayanaRecoveryManagerBean;\nimport org.springframework.boot.jta.narayana.NarayanaXAConnectionFactoryWrapper;\nimport org.springframework.boot.jta.narayana.NarayanaXADataSourceWrapper;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.DependsOn;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.transaction.jta.JtaTransactionManager;\n\n/**\n * JTA Configuration for <a href="http://narayana.io/">Narayana</a>.\n *\n * @author <a href="mailto:gytis@redhat.com">Gytis Trikleris</a>\n */\n@Configuration\n@ConditionalOnClass({ JtaTransactionManager.class, com.arjuna.ats.jta.UserTransaction.class })\n@ConditionalOnMissingBean(PlatformTransactionManager.class)\npublic class NarayanaJtaConfiguration {\n\n\t@Autowired\n\tprivate JtaProperties jtaProperties;\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic NarayanaProperties narayanaProperties() {\n\t\treturn new NarayanaProperties();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic NarayanaConfigurationBean narayanaConfigurationBean(NarayanaProperties narayanaProperties) {\n\t\tif (this.jtaProperties.getLogDir() != null) {\n\t\t\tnarayanaProperties.setLogDir(this.jtaProperties.getLogDir());\n\t\t}\n\n\t\tif (this.jtaProperties.getTransactionManagerId() != null) {\n\t\t\tnarayanaProperties.setTransactionManagerId(this.jtaProperties.getTransactionManagerId());\n\t\t}\n\n\t\treturn new NarayanaConfigurationBean(narayanaProperties);\n\t}\n\n\t@Bean\n\t@DependsOn("narayanaConfigurationBean")\n\t@ConditionalOnMissingBean\n\tpublic UserTransaction narayanaUserTransaction() {\n\t\treturn com.arjuna.ats.jta.UserTransaction.userTransaction();\n\t}\n\n\t@Bean\n\t@DependsOn("narayanaConfigurationBean")\n\t@ConditionalOnMissingBean\n\tpublic TransactionManager narayanaTransactionManager() {\n\t\treturn com.arjuna.ats.jta.TransactionManager.transactionManager();\n\t}\n\n\t@Bean\n\t@DependsOn("narayanaConfigurationBean")\n\tpublic RecoveryManagerService narayanaRecoveryManagerService() {\n\t\treturn new RecoveryManagerService();\n\t}\n\n\t@Bean\n\tpublic NarayanaRecoveryManagerBean narayanaRecoveryManagerBean(RecoveryManagerService recoveryManagerService) {\n\t\treturn new NarayanaRecoveryManagerBean(recoveryManagerService);\n\t}\n\n\t@Bean\n\tpublic JtaTransactionManager transactionManager(UserTransaction userTransaction, TransactionManager transactionManager) {\n\t\treturn new JtaTransactionManager(userTransaction, transactionManager);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(XADataSourceWrapper.class)\n\tpublic XADataSourceWrapper xaDataSourceWrapper(NarayanaRecoveryManagerBean narayanaRecoveryManagerBean,\n\t\t\tNarayanaProperties narayanaProperties) {\n\t\treturn new NarayanaXADataSourceWrapper(narayanaRecoveryManagerBean, narayanaProperties);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic static NarayanaBeanFactoryPostProcessor narayanaBeanFactoryPostProcessor() {\n\t\treturn new NarayanaBeanFactoryPostProcessor();\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(Message.class)\n\tstatic class NarayanaJtaJmsConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(XAConnectionFactoryWrapper.class)\n\t\tpublic NarayanaXAConnectionFactoryWrapper xaConnectionFactoryWrapper(TransactionManager transactionManager,\n\t\t\t\tNarayanaRecoveryManagerBean narayanaRecoveryManagerBean, NarayanaProperties narayanaProperties) {\n\t\t\treturn new NarayanaXAConnectionFactoryWrapper(transactionManager, narayanaRecoveryManagerBean, narayanaProperties);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
