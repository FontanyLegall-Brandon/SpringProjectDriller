{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/BootGlobalAuthenticationConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2012-2015 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.boot.autoconfigure.security;\n+\n+import java.util.Map;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\n+import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\n+import org.springframework.security.config.annotation.authentication.configurers.GlobalAuthenticationConfigurerAdapter;\n+\n+/**\n+ * This works with the {@link AuthenticationConfiguration} to ensure that users are able to use:\n+ *\n+ * <pre>\n+ * public void configureGlobal(AuthenticationManagerBuilder auth) {\n+ *     ...\n+ * }\n+ * </pre>\n+ *\n+ * within their classes annotated with {{@EnableAutoConfiguration}} or use {{@SpringBootApplication}}.\n+ *\n+ * @author Rob Winch\n+ */\n+@Configuration\n+@ConditionalOnClass(GlobalAuthenticationConfigurerAdapter.class)\n+public class BootGlobalAuthenticationConfiguration {\n+\n+\t@Bean\n+\tpublic static BootGlobalAuthenticationConfigurationAdapter bootGlobalAuthenticationConfigurationAdapter(ApplicationContext context) {\n+\t\treturn new BootGlobalAuthenticationConfigurationAdapter(context);\n+\t}\n+\n+\tprivate static class BootGlobalAuthenticationConfigurationAdapter extends GlobalAuthenticationConfigurerAdapter {\n+\t\tprivate final ApplicationContext context;\n+\t\tprivate static final Log logger = LogFactory.getLog(BootGlobalAuthenticationConfiguration.class);\n+\n+\t\tpublic BootGlobalAuthenticationConfigurationAdapter(ApplicationContext context) {\n+\t\t\tthis.context = context;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void init(AuthenticationManagerBuilder auth) {\n+\t\t\tMap<String, Object> beansWithAnnotation = context.getBeansWithAnnotation(EnableAutoConfiguration.class);\n+\t\t\tif(logger.isDebugEnabled()) {\n+\t\t\t\tlogger.debug("Eagerly initializing " + beansWithAnnotation);\n+\t\t\t}\n+\t\t}\n+\t}\n+}\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.boot.autoconfigure.security;\n\nimport java.util.Map;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\nimport org.springframework.security.config.annotation.authentication.configurers.GlobalAuthenticationConfigurerAdapter;\n\n/**\n * This works with the {@link AuthenticationConfiguration} to ensure that users are able to use:\n *\n * <pre>\n * public void configureGlobal(AuthenticationManagerBuilder auth) {\n *     ...\n * }\n * </pre>\n *\n * within their classes annotated with {{@EnableAutoConfiguration}} or use {{@SpringBootApplication}}.\n *\n * @author Rob Winch\n */\n@Configuration\n@ConditionalOnClass(GlobalAuthenticationConfigurerAdapter.class)\npublic class BootGlobalAuthenticationConfiguration {\n\n\t@Bean\n\tpublic static BootGlobalAuthenticationConfigurationAdapter bootGlobalAuthenticationConfigurationAdapter(ApplicationContext context) {\n\t\treturn new BootGlobalAuthenticationConfigurationAdapter(context);\n\t}\n\n\tprivate static class BootGlobalAuthenticationConfigurationAdapter extends GlobalAuthenticationConfigurerAdapter {\n\t\tprivate final ApplicationContext context;\n\t\tprivate static final Log logger = LogFactory.getLog(BootGlobalAuthenticationConfiguration.class);\n\n\t\tpublic BootGlobalAuthenticationConfigurationAdapter(ApplicationContext context) {\n\t\t\tthis.context = context;\n\t\t}\n\n\t\t@Override\n\t\tpublic void init(AuthenticationManagerBuilder auth) {\n\t\t\tMap<String, Object> beansWithAnnotation = context.getBeansWithAnnotation(EnableAutoConfiguration.class);\n\t\t\tif(logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug("Eagerly initializing " + beansWithAnnotation);\n\t\t\t}\n\t\t}\n\t}\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
