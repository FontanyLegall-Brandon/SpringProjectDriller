{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/TransactionAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/TransactionAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2016 the original author or authors.\n+ * Copyright 2012-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -20,8 +20,10 @@ import java.util.List;\n \n import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\n import org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration;\n import org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;\n@@ -30,6 +32,8 @@ import org.springframework.boot.context.properties.EnableConfigurationProperties\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.transaction.PlatformTransactionManager;\n+import org.springframework.transaction.annotation.AbstractTransactionManagementConfiguration;\n+import org.springframework.transaction.annotation.EnableTransactionManagement;\n import org.springframework.transaction.support.TransactionTemplate;\n \n /**\n@@ -71,4 +75,25 @@ public class TransactionAutoConfiguration {\n \t\t}\n \t}\n \n+\t@Configuration\n+\t@ConditionalOnBean(PlatformTransactionManager.class)\n+\t@ConditionalOnMissingBean(AbstractTransactionManagementConfiguration.class)\n+\tpublic static class EnableTransactionManagementConfiguration {\n+\n+\t\t@Configuration\n+\t\t@EnableTransactionManagement(proxyTargetClass = false)\n+\t\t@ConditionalOnProperty(prefix = "spring.aop", name = "proxy-target-class", havingValue = "false", matchIfMissing = false)\n+\t\tpublic static class JdkDynamicAutoProxyConfiguration {\n+\n+\t\t}\n+\n+\t\t@Configuration\n+\t\t@EnableTransactionManagement(proxyTargetClass = true)\n+\t\t@ConditionalOnProperty(prefix = "spring.aop", name = "proxy-target-class", havingValue = "true", matchIfMissing = true)\n+\t\tpublic static class CglibAutoProxyConfiguration {\n+\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.transaction;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration;\nimport org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;\nimport org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.transaction.annotation.AbstractTransactionManagementConfiguration;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\nimport org.springframework.transaction.support.TransactionTemplate;\n\n/**\n * {@link org.springframework.boot.autoconfigure.EnableAutoConfiguration\n * Auto-configuration} for Spring transaction.\n *\n * @author Stephane Nicoll\n * @since 1.3.0\n */\n@Configuration\n@ConditionalOnClass(PlatformTransactionManager.class)\n@AutoConfigureAfter({ JtaAutoConfiguration.class, HibernateJpaAutoConfiguration.class,\n\t\tDataSourceTransactionManagerAutoConfiguration.class })\n@EnableConfigurationProperties(TransactionProperties.class)\npublic class TransactionAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic TransactionManagerCustomizers platformTransactionManagerCustomizers(\n\t\t\tObjectProvider<List<PlatformTransactionManagerCustomizer<?>>> customizers) {\n\t\treturn new TransactionManagerCustomizers(customizers.getIfAvailable());\n\t}\n\n\t@Configuration\n\t@ConditionalOnSingleCandidate(PlatformTransactionManager.class)\n\tpublic static class TransactionTemplateConfiguration {\n\n\t\tprivate final PlatformTransactionManager transactionManager;\n\n\t\tpublic TransactionTemplateConfiguration(\n\t\t\t\tPlatformTransactionManager transactionManager) {\n\t\t\tthis.transactionManager = transactionManager;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic TransactionTemplate transactionTemplate() {\n\t\t\treturn new TransactionTemplate(this.transactionManager);\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(PlatformTransactionManager.class)\n\t@ConditionalOnMissingBean(AbstractTransactionManagementConfiguration.class)\n\tpublic static class EnableTransactionManagementConfiguration {\n\n\t\t@Configuration\n\t\t@EnableTransactionManagement(proxyTargetClass = false)\n\t\t@ConditionalOnProperty(prefix = "spring.aop", name = "proxy-target-class", havingValue = "false", matchIfMissing = false)\n\t\tpublic static class JdkDynamicAutoProxyConfiguration {\n\n\t\t}\n\n\t\t@Configuration\n\t\t@EnableTransactionManagement(proxyTargetClass = true)\n\t\t@ConditionalOnProperty(prefix = "spring.aop", name = "proxy-target-class", havingValue = "true", matchIfMissing = true)\n\t\tpublic static class CglibAutoProxyConfiguration {\n\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.transaction;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration;\nimport org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;\nimport org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.transaction.support.TransactionTemplate;\n\n/**\n * {@link org.springframework.boot.autoconfigure.EnableAutoConfiguration\n * Auto-configuration} for Spring transaction.\n *\n * @author Stephane Nicoll\n * @since 1.3.0\n */\n@Configuration\n@ConditionalOnClass(PlatformTransactionManager.class)\n@AutoConfigureAfter({ JtaAutoConfiguration.class, HibernateJpaAutoConfiguration.class,\n\t\tDataSourceTransactionManagerAutoConfiguration.class })\n@EnableConfigurationProperties(TransactionProperties.class)\npublic class TransactionAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic TransactionManagerCustomizers platformTransactionManagerCustomizers(\n\t\t\tObjectProvider<List<PlatformTransactionManagerCustomizer<?>>> customizers) {\n\t\treturn new TransactionManagerCustomizers(customizers.getIfAvailable());\n\t}\n\n\t@Configuration\n\t@ConditionalOnSingleCandidate(PlatformTransactionManager.class)\n\tpublic static class TransactionTemplateConfiguration {\n\n\t\tprivate final PlatformTransactionManager transactionManager;\n\n\t\tpublic TransactionTemplateConfiguration(\n\t\t\t\tPlatformTransactionManager transactionManager) {\n\t\t\tthis.transactionManager = transactionManager;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic TransactionTemplate transactionTemplate() {\n\t\t\treturn new TransactionTemplate(this.transactionManager);\n\t\t}\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
