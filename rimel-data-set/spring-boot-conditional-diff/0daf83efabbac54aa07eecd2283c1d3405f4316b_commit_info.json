{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -28,6 +28,8 @@ import org.springframework.boot.WebApplicationType;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n@@ -39,9 +41,14 @@ import org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfig\n import org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration;\n import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\n import org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration;\n+import org.springframework.boot.autoconfigure.web.ServerProperties;\n import org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.context.properties.PropertyMapper;\n+import org.springframework.boot.web.servlet.server.Session.Cookie;\n import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Import;\n import org.springframework.context.annotation.ImportSelector;\n@@ -49,6 +56,10 @@ import org.springframework.core.type.AnnotationMetadata;\n import org.springframework.session.ReactiveSessionRepository;\n import org.springframework.session.Session;\n import org.springframework.session.SessionRepository;\n+import org.springframework.session.web.http.CookieHttpSessionIdResolver;\n+import org.springframework.session.web.http.CookieSerializer;\n+import org.springframework.session.web.http.DefaultCookieSerializer;\n+import org.springframework.session.web.http.HttpSessionIdResolver;\n import org.springframework.util.StringUtils;\n \n /**\n@@ -64,7 +75,7 @@ import org.springframework.util.StringUtils;\n @Configuration\n @ConditionalOnClass(Session.class)\n @ConditionalOnWebApplication\n-@EnableConfigurationProperties(SessionProperties.class)\n+@EnableConfigurationProperties({ ServerProperties.class, SessionProperties.class })\n @AutoConfigureAfter({ DataSourceAutoConfiguration.class, HazelcastAutoConfiguration.class,\n \t\tJdbcTemplateAutoConfiguration.class, MongoDataAutoConfiguration.class,\n \t\tMongoReactiveDataAutoConfiguration.class, RedisAutoConfiguration.class,\n@@ -78,6 +89,28 @@ public class SessionAutoConfiguration {\n \t\t\tSessionRepositoryFilterConfiguration.class })\n \tstatic class ServletSessionConfiguration {\n \n+\t\tprivate final ServerProperties serverProperties;\n+\n+\t\tServletSessionConfiguration(ServerProperties serverProperties) {\n+\t\t\tthis.serverProperties = serverProperties;\n+\t\t}\n+\n+\t\t@Bean\n+\t\t@Conditional(DefaultCookieSerializerCondition.class)\n+\t\tpublic DefaultCookieSerializer cookieSerializer() {\n+\t\t\tCookie cookie = this.serverProperties.getServlet().getSession().getCookie();\n+\t\t\tDefaultCookieSerializer cookieSerializer = new DefaultCookieSerializer();\n+\t\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n+\t\t\tmap.from(cookie::getName).to(cookieSerializer::setCookieName);\n+\t\t\tmap.from(cookie::getDomain).to(cookieSerializer::setDomainName);\n+\t\t\tmap.from(cookie::getPath).to(cookieSerializer::setCookiePath);\n+\t\t\tmap.from(cookie::getHttpOnly).to(cookieSerializer::setUseHttpOnlyCookie);\n+\t\t\tmap.from(cookie::getSecure).to(cookieSerializer::setUseSecureCookie);\n+\t\t\tmap.from(cookie::getMaxAge).to((maxAge) -> cookieSerializer\n+\t\t\t\t\t.setCookieMaxAge((int) maxAge.getSeconds()));\n+\t\t\treturn cookieSerializer;\n+\t\t}\n+\n \t\t@Configuration\n \t\t@ConditionalOnMissingBean(SessionRepository.class)\n \t\t@Import({ ServletSessionRepositoryImplementationValidator.class,\n@@ -103,6 +136,31 @@ public class SessionAutoConfiguration {\n \n \t}\n \n+\t/**\n+\t * Condition to trigger the creation of a {@link DefaultCookieSerializer}. This kicks\n+\t * in if either no {@link HttpSessionIdResolver} and {@link CookieSerializer} beans\n+\t * are registered, or if {@link CookieHttpSessionIdResolver} is registered but\n+\t * {@link CookieSerializer} is not.\n+\t */\n+\tstatic class DefaultCookieSerializerCondition extends AnyNestedCondition {\n+\n+\t\tDefaultCookieSerializerCondition() {\n+\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n+\t\t}\n+\n+\t\t@ConditionalOnMissingBean({ HttpSessionIdResolver.class, CookieSerializer.class })\n+\t\tstatic class NoComponentsAvailable {\n+\n+\t\t}\n+\n+\t\t@ConditionalOnBean(CookieHttpSessionIdResolver.class)\n+\t\t@ConditionalOnMissingBean(CookieSerializer.class)\n+\t\tstatic class CookieHttpSessionIdResolverAvailable {\n+\n+\t\t}\n+\n+\t}\n+\n \t/**\n \t * {@link ImportSelector} base class to add {@link StoreType} configuration classes.\n \t */\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.session;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Locale;\n\nimport javax.annotation.PostConstruct;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.WebApplicationType;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration;\nimport org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration;\nimport org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration;\nimport org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration;\nimport org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.ServerProperties;\nimport org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.context.properties.PropertyMapper;\nimport org.springframework.boot.web.servlet.server.Session.Cookie;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.ImportSelector;\nimport org.springframework.core.type.AnnotationMetadata;\nimport org.springframework.session.ReactiveSessionRepository;\nimport org.springframework.session.Session;\nimport org.springframework.session.SessionRepository;\nimport org.springframework.session.web.http.CookieHttpSessionIdResolver;\nimport org.springframework.session.web.http.CookieSerializer;\nimport org.springframework.session.web.http.DefaultCookieSerializer;\nimport org.springframework.session.web.http.HttpSessionIdResolver;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Session.\n *\n * @author Andy Wilkinson\n * @author Tommy Ludwig\n * @author Eddú Meléndez\n * @author Stephane Nicoll\n * @author Vedran Pavic\n * @since 1.4.0\n */\n@Configuration\n@ConditionalOnClass(Session.class)\n@ConditionalOnWebApplication\n@EnableConfigurationProperties({ ServerProperties.class, SessionProperties.class })\n@AutoConfigureAfter({ DataSourceAutoConfiguration.class, HazelcastAutoConfiguration.class,\n\t\tJdbcTemplateAutoConfiguration.class, MongoDataAutoConfiguration.class,\n\t\tMongoReactiveDataAutoConfiguration.class, RedisAutoConfiguration.class,\n\t\tRedisReactiveAutoConfiguration.class })\n@AutoConfigureBefore(HttpHandlerAutoConfiguration.class)\npublic class SessionAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnWebApplication(type = Type.SERVLET)\n\t@Import({ ServletSessionRepositoryValidator.class,\n\t\t\tSessionRepositoryFilterConfiguration.class })\n\tstatic class ServletSessionConfiguration {\n\n\t\tprivate final ServerProperties serverProperties;\n\n\t\tServletSessionConfiguration(ServerProperties serverProperties) {\n\t\t\tthis.serverProperties = serverProperties;\n\t\t}\n\n\t\t@Bean\n\t\t@Conditional(DefaultCookieSerializerCondition.class)\n\t\tpublic DefaultCookieSerializer cookieSerializer() {\n\t\t\tCookie cookie = this.serverProperties.getServlet().getSession().getCookie();\n\t\t\tDefaultCookieSerializer cookieSerializer = new DefaultCookieSerializer();\n\t\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\t\tmap.from(cookie::getName).to(cookieSerializer::setCookieName);\n\t\t\tmap.from(cookie::getDomain).to(cookieSerializer::setDomainName);\n\t\t\tmap.from(cookie::getPath).to(cookieSerializer::setCookiePath);\n\t\t\tmap.from(cookie::getHttpOnly).to(cookieSerializer::setUseHttpOnlyCookie);\n\t\t\tmap.from(cookie::getSecure).to(cookieSerializer::setUseSecureCookie);\n\t\t\tmap.from(cookie::getMaxAge).to((maxAge) -> cookieSerializer\n\t\t\t\t\t.setCookieMaxAge((int) maxAge.getSeconds()));\n\t\t\treturn cookieSerializer;\n\t\t}\n\n\t\t@Configuration\n\t\t@ConditionalOnMissingBean(SessionRepository.class)\n\t\t@Import({ ServletSessionRepositoryImplementationValidator.class,\n\t\t\t\tServletSessionConfigurationImportSelector.class })\n\t\tstatic class ServletSessionRepositoryConfiguration {\n\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnWebApplication(type = Type.REACTIVE)\n\t@Import(ReactiveSessionRepositoryValidator.class)\n\tstatic class ReactiveSessionConfiguration {\n\n\t\t@Configuration\n\t\t@ConditionalOnMissingBean(ReactiveSessionRepository.class)\n\t\t@Import({ ReactiveSessionRepositoryImplementationValidator.class,\n\t\t\t\tReactiveSessionConfigurationImportSelector.class })\n\t\tstatic class ReactiveSessionRepositoryConfiguration {\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Condition to trigger the creation of a {@link DefaultCookieSerializer}. This kicks\n\t * in if either no {@link HttpSessionIdResolver} and {@link CookieSerializer} beans\n\t * are registered, or if {@link CookieHttpSessionIdResolver} is registered but\n\t * {@link CookieSerializer} is not.\n\t */\n\tstatic class DefaultCookieSerializerCondition extends AnyNestedCondition {\n\n\t\tDefaultCookieSerializerCondition() {\n\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n\t\t}\n\n\t\t@ConditionalOnMissingBean({ HttpSessionIdResolver.class, CookieSerializer.class })\n\t\tstatic class NoComponentsAvailable {\n\n\t\t}\n\n\t\t@ConditionalOnBean(CookieHttpSessionIdResolver.class)\n\t\t@ConditionalOnMissingBean(CookieSerializer.class)\n\t\tstatic class CookieHttpSessionIdResolverAvailable {\n\n\t\t}\n\n\t}\n\n\t/**\n\t * {@link ImportSelector} base class to add {@link StoreType} configuration classes.\n\t */\n\tabstract static class SessionConfigurationImportSelector implements ImportSelector {\n\n\t\tprotected final String[] selectImports(WebApplicationType webApplicationType) {\n\t\t\tList<String> imports = new ArrayList<>();\n\t\t\tStoreType[] types = StoreType.values();\n\t\t\tfor (int i = 0; i < types.length; i++) {\n\t\t\t\timports.add(SessionStoreMappings.getConfigurationClass(webApplicationType,\n\t\t\t\t\t\ttypes[i]));\n\t\t\t}\n\t\t\treturn StringUtils.toStringArray(imports);\n\t\t}\n\n\t}\n\n\t/**\n\t * {@link ImportSelector} to add {@link StoreType} configuration classes for reactive\n\t * web applications.\n\t */\n\tstatic class ReactiveSessionConfigurationImportSelector\n\t\t\textends SessionConfigurationImportSelector {\n\n\t\t@Override\n\t\tpublic String[] selectImports(AnnotationMetadata importingClassMetadata) {\n\t\t\treturn super.selectImports(WebApplicationType.REACTIVE);\n\t\t}\n\n\t}\n\n\t/**\n\t * {@link ImportSelector} to add {@link StoreType} configuration classes for Servlet\n\t * web applications.\n\t */\n\tstatic class ServletSessionConfigurationImportSelector\n\t\t\textends SessionConfigurationImportSelector {\n\n\t\t@Override\n\t\tpublic String[] selectImports(AnnotationMetadata importingClassMetadata) {\n\t\t\treturn super.selectImports(WebApplicationType.SERVLET);\n\t\t}\n\n\t}\n\n\t/**\n\t * Base class for beans used to validate that only one supported implementation is\n\t * available in the classpath when the store-type property is not set.\n\t */\n\tabstract static class AbstractSessionRepositoryImplementationValidator {\n\n\t\tprivate final List<String> candidates;\n\n\t\tprivate final ClassLoader classLoader;\n\n\t\tprivate final SessionProperties sessionProperties;\n\n\t\tAbstractSessionRepositoryImplementationValidator(\n\t\t\t\tApplicationContext applicationContext,\n\t\t\t\tSessionProperties sessionProperties, List<String> candidates) {\n\t\t\tthis.classLoader = applicationContext.getClassLoader();\n\t\t\tthis.sessionProperties = sessionProperties;\n\t\t\tthis.candidates = candidates;\n\t\t}\n\n\t\t@PostConstruct\n\t\tpublic void checkAvailableImplementations() {\n\t\t\tList<Class<?>> availableCandidates = new ArrayList<>();\n\t\t\tfor (String candidate : this.candidates) {\n\t\t\t\taddCandidateIfAvailable(availableCandidates, candidate);\n\t\t\t}\n\t\t\tStoreType storeType = this.sessionProperties.getStoreType();\n\t\t\tif (availableCandidates.size() > 1 && storeType == null) {\n\t\t\t\tthrow new NonUniqueSessionRepositoryException(availableCandidates);\n\t\t\t}\n\t\t}\n\n\t\tprivate void addCandidateIfAvailable(List<Class<?>> candidates, String type) {\n\t\t\ttry {\n\t\t\t\tClass<?> candidate = this.classLoader.loadClass(type);\n\t\t\t\tif (candidate != null) {\n\t\t\t\t\tcandidates.add(candidate);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Throwable ex) {\n\t\t\t\t// Ignore\n\t\t\t}\n\t\t}\n\n\t}\n\n\t/**\n\t * Bean used to validate that only one supported implementation is available in the\n\t * classpath when the store-type property is not set.\n\t */\n\tstatic class ServletSessionRepositoryImplementationValidator\n\t\t\textends AbstractSessionRepositoryImplementationValidator {\n\n\t\tServletSessionRepositoryImplementationValidator(\n\t\t\t\tApplicationContext applicationContext,\n\t\t\t\tSessionProperties sessionProperties) {\n\t\t\tsuper(applicationContext, sessionProperties, Arrays.asList(\n\t\t\t\t\t"org.springframework.session.hazelcast.HazelcastSessionRepository",\n\t\t\t\t\t"org.springframework.session.jdbc.JdbcOperationsSessionRepository",\n\t\t\t\t\t"org.springframework.session.data.mongo.MongoOperationsSessionRepository",\n\t\t\t\t\t"org.springframework.session.data.redis.RedisOperationsSessionRepository"));\n\t\t}\n\n\t}\n\n\t/**\n\t * Bean used to validate that only one supported implementation is available in the\n\t * classpath when the store-type property is not set.\n\t */\n\tstatic class ReactiveSessionRepositoryImplementationValidator\n\t\t\textends AbstractSessionRepositoryImplementationValidator {\n\n\t\tReactiveSessionRepositoryImplementationValidator(\n\t\t\t\tApplicationContext applicationContext,\n\t\t\t\tSessionProperties sessionProperties) {\n\t\t\tsuper(applicationContext, sessionProperties, Arrays.asList(\n\t\t\t\t\t"org.springframework.session.data.redis.ReactiveRedisOperationsSessionRepository",\n\t\t\t\t\t"org.springframework.session.data.mongo.ReactiveMongoOperationsSessionRepository"));\n\t\t}\n\n\t}\n\n\t/**\n\t * Base class for validating that a (reactive) session repository bean exists.\n\t */\n\tabstract static class AbstractSessionRepositoryValidator {\n\n\t\tprivate final SessionProperties sessionProperties;\n\n\t\tprivate final ObjectProvider<?> sessionRepositoryProvider;\n\n\t\tprotected AbstractSessionRepositoryValidator(SessionProperties sessionProperties,\n\t\t\t\tObjectProvider<?> sessionRepositoryProvider) {\n\t\t\tthis.sessionProperties = sessionProperties;\n\t\t\tthis.sessionRepositoryProvider = sessionRepositoryProvider;\n\t\t}\n\n\t\t@PostConstruct\n\t\tpublic void checkSessionRepository() {\n\t\t\tStoreType storeType = this.sessionProperties.getStoreType();\n\t\t\tif (storeType != StoreType.NONE\n\t\t\t\t\t&& this.sessionRepositoryProvider.getIfAvailable() == null\n\t\t\t\t\t&& storeType != null) {\n\t\t\t\tthrow new SessionRepositoryUnavailableException(\n\t\t\t\t\t\t"No session repository could be auto-configured, check your "\n\t\t\t\t\t\t\t\t+ "configuration (session store type is \'"\n\t\t\t\t\t\t\t\t+ storeType.name().toLowerCase(Locale.ENGLISH) + "\')",\n\t\t\t\t\t\tstoreType);\n\t\t\t}\n\t\t}\n\n\t}\n\n\t/**\n\t * Bean used to validate that a {@link SessionRepository} exists and provide a\n\t * meaningful message if that\'s not the case.\n\t */\n\tstatic class ServletSessionRepositoryValidator\n\t\t\textends AbstractSessionRepositoryValidator {\n\n\t\tServletSessionRepositoryValidator(SessionProperties sessionProperties,\n\t\t\t\tObjectProvider<SessionRepository<?>> sessionRepositoryProvider) {\n\t\t\tsuper(sessionProperties, sessionRepositoryProvider);\n\t\t}\n\n\t}\n\n\t/**\n\t * Bean used to validate that a {@link ReactiveSessionRepository} exists and provide a\n\t * meaningful message if that\'s not the case.\n\t */\n\tstatic class ReactiveSessionRepositoryValidator\n\t\t\textends AbstractSessionRepositoryValidator {\n\n\t\tReactiveSessionRepositoryValidator(SessionProperties sessionProperties,\n\t\t\t\tObjectProvider<ReactiveSessionRepository<?>> sessionRepositoryProvider) {\n\t\t\tsuper(sessionProperties, sessionRepositoryProvider);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.session;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Locale;\n\nimport javax.annotation.PostConstruct;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.WebApplicationType;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration;\nimport org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration;\nimport org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration;\nimport org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration;\nimport org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.ImportSelector;\nimport org.springframework.core.type.AnnotationMetadata;\nimport org.springframework.session.ReactiveSessionRepository;\nimport org.springframework.session.Session;\nimport org.springframework.session.SessionRepository;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Session.\n *\n * @author Andy Wilkinson\n * @author Tommy Ludwig\n * @author Eddú Meléndez\n * @author Stephane Nicoll\n * @author Vedran Pavic\n * @since 1.4.0\n */\n@Configuration\n@ConditionalOnClass(Session.class)\n@ConditionalOnWebApplication\n@EnableConfigurationProperties(SessionProperties.class)\n@AutoConfigureAfter({ DataSourceAutoConfiguration.class, HazelcastAutoConfiguration.class,\n\t\tJdbcTemplateAutoConfiguration.class, MongoDataAutoConfiguration.class,\n\t\tMongoReactiveDataAutoConfiguration.class, RedisAutoConfiguration.class,\n\t\tRedisReactiveAutoConfiguration.class })\n@AutoConfigureBefore(HttpHandlerAutoConfiguration.class)\npublic class SessionAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnWebApplication(type = Type.SERVLET)\n\t@Import({ ServletSessionRepositoryValidator.class,\n\t\t\tSessionRepositoryFilterConfiguration.class })\n\tstatic class ServletSessionConfiguration {\n\n\t\t@Configuration\n\t\t@ConditionalOnMissingBean(SessionRepository.class)\n\t\t@Import({ ServletSessionRepositoryImplementationValidator.class,\n\t\t\t\tServletSessionConfigurationImportSelector.class })\n\t\tstatic class ServletSessionRepositoryConfiguration {\n\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnWebApplication(type = Type.REACTIVE)\n\t@Import(ReactiveSessionRepositoryValidator.class)\n\tstatic class ReactiveSessionConfiguration {\n\n\t\t@Configuration\n\t\t@ConditionalOnMissingBean(ReactiveSessionRepository.class)\n\t\t@Import({ ReactiveSessionRepositoryImplementationValidator.class,\n\t\t\t\tReactiveSessionConfigurationImportSelector.class })\n\t\tstatic class ReactiveSessionRepositoryConfiguration {\n\n\t\t}\n\n\t}\n\n\t/**\n\t * {@link ImportSelector} base class to add {@link StoreType} configuration classes.\n\t */\n\tabstract static class SessionConfigurationImportSelector implements ImportSelector {\n\n\t\tprotected final String[] selectImports(WebApplicationType webApplicationType) {\n\t\t\tList<String> imports = new ArrayList<>();\n\t\t\tStoreType[] types = StoreType.values();\n\t\t\tfor (int i = 0; i < types.length; i++) {\n\t\t\t\timports.add(SessionStoreMappings.getConfigurationClass(webApplicationType,\n\t\t\t\t\t\ttypes[i]));\n\t\t\t}\n\t\t\treturn StringUtils.toStringArray(imports);\n\t\t}\n\n\t}\n\n\t/**\n\t * {@link ImportSelector} to add {@link StoreType} configuration classes for reactive\n\t * web applications.\n\t */\n\tstatic class ReactiveSessionConfigurationImportSelector\n\t\t\textends SessionConfigurationImportSelector {\n\n\t\t@Override\n\t\tpublic String[] selectImports(AnnotationMetadata importingClassMetadata) {\n\t\t\treturn super.selectImports(WebApplicationType.REACTIVE);\n\t\t}\n\n\t}\n\n\t/**\n\t * {@link ImportSelector} to add {@link StoreType} configuration classes for Servlet\n\t * web applications.\n\t */\n\tstatic class ServletSessionConfigurationImportSelector\n\t\t\textends SessionConfigurationImportSelector {\n\n\t\t@Override\n\t\tpublic String[] selectImports(AnnotationMetadata importingClassMetadata) {\n\t\t\treturn super.selectImports(WebApplicationType.SERVLET);\n\t\t}\n\n\t}\n\n\t/**\n\t * Base class for beans used to validate that only one supported implementation is\n\t * available in the classpath when the store-type property is not set.\n\t */\n\tabstract static class AbstractSessionRepositoryImplementationValidator {\n\n\t\tprivate final List<String> candidates;\n\n\t\tprivate final ClassLoader classLoader;\n\n\t\tprivate final SessionProperties sessionProperties;\n\n\t\tAbstractSessionRepositoryImplementationValidator(\n\t\t\t\tApplicationContext applicationContext,\n\t\t\t\tSessionProperties sessionProperties, List<String> candidates) {\n\t\t\tthis.classLoader = applicationContext.getClassLoader();\n\t\t\tthis.sessionProperties = sessionProperties;\n\t\t\tthis.candidates = candidates;\n\t\t}\n\n\t\t@PostConstruct\n\t\tpublic void checkAvailableImplementations() {\n\t\t\tList<Class<?>> availableCandidates = new ArrayList<>();\n\t\t\tfor (String candidate : this.candidates) {\n\t\t\t\taddCandidateIfAvailable(availableCandidates, candidate);\n\t\t\t}\n\t\t\tStoreType storeType = this.sessionProperties.getStoreType();\n\t\t\tif (availableCandidates.size() > 1 && storeType == null) {\n\t\t\t\tthrow new NonUniqueSessionRepositoryException(availableCandidates);\n\t\t\t}\n\t\t}\n\n\t\tprivate void addCandidateIfAvailable(List<Class<?>> candidates, String type) {\n\t\t\ttry {\n\t\t\t\tClass<?> candidate = this.classLoader.loadClass(type);\n\t\t\t\tif (candidate != null) {\n\t\t\t\t\tcandidates.add(candidate);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Throwable ex) {\n\t\t\t\t// Ignore\n\t\t\t}\n\t\t}\n\n\t}\n\n\t/**\n\t * Bean used to validate that only one supported implementation is available in the\n\t * classpath when the store-type property is not set.\n\t */\n\tstatic class ServletSessionRepositoryImplementationValidator\n\t\t\textends AbstractSessionRepositoryImplementationValidator {\n\n\t\tServletSessionRepositoryImplementationValidator(\n\t\t\t\tApplicationContext applicationContext,\n\t\t\t\tSessionProperties sessionProperties) {\n\t\t\tsuper(applicationContext, sessionProperties, Arrays.asList(\n\t\t\t\t\t"org.springframework.session.hazelcast.HazelcastSessionRepository",\n\t\t\t\t\t"org.springframework.session.jdbc.JdbcOperationsSessionRepository",\n\t\t\t\t\t"org.springframework.session.data.mongo.MongoOperationsSessionRepository",\n\t\t\t\t\t"org.springframework.session.data.redis.RedisOperationsSessionRepository"));\n\t\t}\n\n\t}\n\n\t/**\n\t * Bean used to validate that only one supported implementation is available in the\n\t * classpath when the store-type property is not set.\n\t */\n\tstatic class ReactiveSessionRepositoryImplementationValidator\n\t\t\textends AbstractSessionRepositoryImplementationValidator {\n\n\t\tReactiveSessionRepositoryImplementationValidator(\n\t\t\t\tApplicationContext applicationContext,\n\t\t\t\tSessionProperties sessionProperties) {\n\t\t\tsuper(applicationContext, sessionProperties, Arrays.asList(\n\t\t\t\t\t"org.springframework.session.data.redis.ReactiveRedisOperationsSessionRepository",\n\t\t\t\t\t"org.springframework.session.data.mongo.ReactiveMongoOperationsSessionRepository"));\n\t\t}\n\n\t}\n\n\t/**\n\t * Base class for validating that a (reactive) session repository bean exists.\n\t */\n\tabstract static class AbstractSessionRepositoryValidator {\n\n\t\tprivate final SessionProperties sessionProperties;\n\n\t\tprivate final ObjectProvider<?> sessionRepositoryProvider;\n\n\t\tprotected AbstractSessionRepositoryValidator(SessionProperties sessionProperties,\n\t\t\t\tObjectProvider<?> sessionRepositoryProvider) {\n\t\t\tthis.sessionProperties = sessionProperties;\n\t\t\tthis.sessionRepositoryProvider = sessionRepositoryProvider;\n\t\t}\n\n\t\t@PostConstruct\n\t\tpublic void checkSessionRepository() {\n\t\t\tStoreType storeType = this.sessionProperties.getStoreType();\n\t\t\tif (storeType != StoreType.NONE\n\t\t\t\t\t&& this.sessionRepositoryProvider.getIfAvailable() == null\n\t\t\t\t\t&& storeType != null) {\n\t\t\t\tthrow new SessionRepositoryUnavailableException(\n\t\t\t\t\t\t"No session repository could be auto-configured, check your "\n\t\t\t\t\t\t\t\t+ "configuration (session store type is \'"\n\t\t\t\t\t\t\t\t+ storeType.name().toLowerCase(Locale.ENGLISH) + "\')",\n\t\t\t\t\t\tstoreType);\n\t\t\t}\n\t\t}\n\n\t}\n\n\t/**\n\t * Bean used to validate that a {@link SessionRepository} exists and provide a\n\t * meaningful message if that\'s not the case.\n\t */\n\tstatic class ServletSessionRepositoryValidator\n\t\t\textends AbstractSessionRepositoryValidator {\n\n\t\tServletSessionRepositoryValidator(SessionProperties sessionProperties,\n\t\t\t\tObjectProvider<SessionRepository<?>> sessionRepositoryProvider) {\n\t\t\tsuper(sessionProperties, sessionRepositoryProvider);\n\t\t}\n\n\t}\n\n\t/**\n\t * Bean used to validate that a {@link ReactiveSessionRepository} exists and provide a\n\t * meaningful message if that\'s not the case.\n\t */\n\tstatic class ReactiveSessionRepositoryValidator\n\t\t\textends AbstractSessionRepositoryValidator {\n\n\t\tReactiveSessionRepositoryValidator(SessionProperties sessionProperties,\n\t\t\t\tObjectProvider<ReactiveSessionRepository<?>> sessionRepositoryProvider) {\n\t\t\tsuper(sessionProperties, sessionRepositoryProvider);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
