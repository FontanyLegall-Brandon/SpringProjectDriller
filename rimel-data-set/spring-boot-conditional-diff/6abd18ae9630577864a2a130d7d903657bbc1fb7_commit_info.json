{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/client/RestTemplateAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/client/RestTemplateAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2018 the original author or authors.\n+ * Copyright 2012-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -24,11 +24,16 @@ import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\n+import org.springframework.boot.autoconfigure.condition.NoneNestedConditions;\n import org.springframework.boot.autoconfigure.http.HttpMessageConverters;\n import org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration;\n+import org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration.NotReactiveWebApplicationCondition;\n import org.springframework.boot.web.client.RestTemplateBuilder;\n import org.springframework.boot.web.client.RestTemplateCustomizer;\n import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.util.CollectionUtils;\n import org.springframework.web.client.RestTemplate;\n@@ -43,6 +48,7 @@ import org.springframework.web.client.RestTemplate;\n @Configuration\n @AutoConfigureAfter(HttpMessageConvertersAutoConfiguration.class)\n @ConditionalOnClass(RestTemplate.class)\n+@Conditional(NotReactiveWebApplicationCondition.class)\n public class RestTemplateAutoConfiguration {\n \n \tprivate final ObjectProvider<HttpMessageConverters> messageConverters;\n@@ -73,4 +79,17 @@ public class RestTemplateAutoConfiguration {\n \t\treturn builder;\n \t}\n \n+\tstatic class NotReactiveWebApplicationCondition extends NoneNestedConditions {\n+\n+\t\tNotReactiveWebApplicationCondition() {\n+\t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION);\n+\t\t}\n+\n+\t\t@ConditionalOnWebApplication(type = Type.REACTIVE)\n+\t\tprivate static class ReactiveWebApplication {\n+\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web.client;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.autoconfigure.condition.NoneNestedConditions;\nimport org.springframework.boot.autoconfigure.http.HttpMessageConverters;\nimport org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration.NotReactiveWebApplicationCondition;\nimport org.springframework.boot.web.client.RestTemplateBuilder;\nimport org.springframework.boot.web.client.RestTemplateCustomizer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.web.client.RestTemplate;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link RestTemplate}.\n *\n * @author Stephane Nicoll\n * @author Phillip Webb\n * @since 1.4.0\n */\n@Configuration\n@AutoConfigureAfter(HttpMessageConvertersAutoConfiguration.class)\n@ConditionalOnClass(RestTemplate.class)\n@Conditional(NotReactiveWebApplicationCondition.class)\npublic class RestTemplateAutoConfiguration {\n\n\tprivate final ObjectProvider<HttpMessageConverters> messageConverters;\n\n\tprivate final ObjectProvider<RestTemplateCustomizer> restTemplateCustomizers;\n\n\tpublic RestTemplateAutoConfiguration(\n\t\t\tObjectProvider<HttpMessageConverters> messageConverters,\n\t\t\tObjectProvider<RestTemplateCustomizer> restTemplateCustomizers) {\n\t\tthis.messageConverters = messageConverters;\n\t\tthis.restTemplateCustomizers = restTemplateCustomizers;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic RestTemplateBuilder restTemplateBuilder() {\n\t\tRestTemplateBuilder builder = new RestTemplateBuilder();\n\t\tHttpMessageConverters converters = this.messageConverters.getIfUnique();\n\t\tif (converters != null) {\n\t\t\tbuilder = builder.messageConverters(converters.getConverters());\n\t\t}\n\n\t\tList<RestTemplateCustomizer> customizers = this.restTemplateCustomizers\n\t\t\t\t.orderedStream().collect(Collectors.toList());\n\t\tif (!CollectionUtils.isEmpty(customizers)) {\n\t\t\tbuilder = builder.customizers(customizers);\n\t\t}\n\t\treturn builder;\n\t}\n\n\tstatic class NotReactiveWebApplicationCondition extends NoneNestedConditions {\n\n\t\tNotReactiveWebApplicationCondition() {\n\t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION);\n\t\t}\n\n\t\t@ConditionalOnWebApplication(type = Type.REACTIVE)\n\t\tprivate static class ReactiveWebApplication {\n\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web.client;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.http.HttpMessageConverters;\nimport org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration;\nimport org.springframework.boot.web.client.RestTemplateBuilder;\nimport org.springframework.boot.web.client.RestTemplateCustomizer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.web.client.RestTemplate;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link RestTemplate}.\n *\n * @author Stephane Nicoll\n * @author Phillip Webb\n * @since 1.4.0\n */\n@Configuration\n@AutoConfigureAfter(HttpMessageConvertersAutoConfiguration.class)\n@ConditionalOnClass(RestTemplate.class)\npublic class RestTemplateAutoConfiguration {\n\n\tprivate final ObjectProvider<HttpMessageConverters> messageConverters;\n\n\tprivate final ObjectProvider<RestTemplateCustomizer> restTemplateCustomizers;\n\n\tpublic RestTemplateAutoConfiguration(\n\t\t\tObjectProvider<HttpMessageConverters> messageConverters,\n\t\t\tObjectProvider<RestTemplateCustomizer> restTemplateCustomizers) {\n\t\tthis.messageConverters = messageConverters;\n\t\tthis.restTemplateCustomizers = restTemplateCustomizers;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic RestTemplateBuilder restTemplateBuilder() {\n\t\tRestTemplateBuilder builder = new RestTemplateBuilder();\n\t\tHttpMessageConverters converters = this.messageConverters.getIfUnique();\n\t\tif (converters != null) {\n\t\t\tbuilder = builder.messageConverters(converters.getConverters());\n\t\t}\n\n\t\tList<RestTemplateCustomizer> customizers = this.restTemplateCustomizers\n\t\t\t\t.orderedStream().collect(Collectors.toList());\n\t\tif (!CollectionUtils.isEmpty(customizers)) {\n\t\t\tbuilder = builder.customizers(customizers);\n\t\t}\n\t\treturn builder;\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
