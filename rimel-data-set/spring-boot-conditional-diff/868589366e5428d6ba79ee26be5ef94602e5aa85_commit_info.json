{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -20,13 +20,10 @@ import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n \n-import javax.servlet.Filter;\n import javax.servlet.http.HttpServletRequest;\n \n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n@@ -34,7 +31,6 @@ import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplicat\n import org.springframework.boot.autoconfigure.security.SecurityProperties.Headers;\n import org.springframework.boot.autoconfigure.web.ErrorController;\n import org.springframework.boot.autoconfigure.web.ServerProperties;\n-import org.springframework.boot.context.embedded.FilterRegistrationBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n@@ -50,7 +46,6 @@ import org.springframework.security.config.annotation.web.configuration.WebSecur\n import org.springframework.security.config.annotation.web.configurers.HeadersConfigurer;\n import org.springframework.security.web.AuthenticationEntryPoint;\n import org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint;\n-import org.springframework.security.web.context.AbstractSecurityWebApplicationInitializer;\n import org.springframework.security.web.header.writers.HstsHeaderWriter;\n import org.springframework.security.web.util.matcher.AnyRequestMatcher;\n import org.springframework.security.web.util.matcher.RequestMatcher;\n@@ -98,18 +93,6 @@ public class SpringBootWebSecurityConfiguration {\n \t\treturn new IgnoredPathsWebSecurityConfigurerAdapter();\n \t}\n \n-\t@Bean\n-\t@ConditionalOnBean(name = AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME)\n-\tpublic FilterRegistrationBean securityFilterChainRegistration(\n-\t\t\t@Qualifier(AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME) Filter securityFilter,\n-\t\t\tSecurityProperties securityProperties) {\n-\t\tFilterRegistrationBean registration = new FilterRegistrationBean(securityFilter);\n-\t\tregistration.setOrder(securityProperties.getFilterOrder());\n-\t\tregistration\n-\t\t\t\t.setName(AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME);\n-\t\treturn registration;\n-\t}\n-\n \tpublic static void configureHeaders(HeadersConfigurer<?> configurer,\n \t\t\tSecurityProperties.Headers headers) throws Exception {\n \t\tif (headers.getHsts() != Headers.HSTS.NONE) {\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.security.SecurityProperties.Headers;\nimport org.springframework.boot.autoconfigure.web.ErrorController;\nimport org.springframework.boot.autoconfigure.web.ServerProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.web.WebSecurityConfigurer;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.builders.WebSecurity;\nimport org.springframework.security.config.annotation.web.builders.WebSecurity.IgnoredRequestConfigurer;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.config.annotation.web.configurers.HeadersConfigurer;\nimport org.springframework.security.web.AuthenticationEntryPoint;\nimport org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint;\nimport org.springframework.security.web.header.writers.HstsHeaderWriter;\nimport org.springframework.security.web.util.matcher.AnyRequestMatcher;\nimport org.springframework.security.web.util.matcher.RequestMatcher;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for security of a web application or\n * service. By default everything is secured with HTTP Basic authentication except the\n * {@link SecurityProperties#getIgnored() explicitly ignored} paths (defaults to\n * <code>&#47;css&#47;**, &#47;js&#47;**, &#47;images&#47;**, &#47;**&#47;favicon.ico</code>\n * ). Many aspects of the behavior can be controller with {@link SecurityProperties} via\n * externalized application properties (or via an bean definition of that type to set the\n * defaults). The user details for authentication are just placeholders\n * {@code (username=user, password=password)} but can easily be customized by providing a\n * bean definition of type {@link AuthenticationManager}. Also provides audit logging of\n * authentication events.\n * <p>\n * Some common simple customizations:\n * <ul>\n * <li>Switch off security completely and permanently: remove Spring Security from the\n * classpath or {@link EnableAutoConfiguration#exclude() exclude} this configuration.</li>\n * <li>Switch off security temporarily (e.g. for a dev environment): set\n * {@code security.basic.enabled: false}</li>\n * <li>Customize the user details: add an AuthenticationManager bean</li>\n * <li>Add form login for user facing resources: add a\n * {@link WebSecurityConfigurerAdapter} and use {@link HttpSecurity#formLogin()}</li>\n * </ul>\n *\n * @author Dave Syer\n */\n@Configuration\n@EnableConfigurationProperties\n@ConditionalOnClass({ EnableWebSecurity.class, AuthenticationEntryPoint.class })\n@ConditionalOnMissingBean(WebSecurityConfiguration.class)\n@ConditionalOnWebApplication\n@EnableWebSecurity\npublic class SpringBootWebSecurityConfiguration {\n\n\tprivate static List<String> DEFAULT_IGNORED = Arrays.asList("/css/**", "/js/**",\n\t\t\t"/images/**", "/**/favicon.ico");\n\n\t@Bean\n\t@ConditionalOnMissingBean({ IgnoredPathsWebSecurityConfigurerAdapter.class })\n\tpublic IgnoredPathsWebSecurityConfigurerAdapter ignoredPathsWebSecurityConfigurerAdapter() {\n\t\treturn new IgnoredPathsWebSecurityConfigurerAdapter();\n\t}\n\n\tpublic static void configureHeaders(HeadersConfigurer<?> configurer,\n\t\t\tSecurityProperties.Headers headers) throws Exception {\n\t\tif (headers.getHsts() != Headers.HSTS.NONE) {\n\t\t\tboolean includeSubdomains = headers.getHsts() == Headers.HSTS.ALL;\n\t\t\tHstsHeaderWriter writer = new HstsHeaderWriter(includeSubdomains);\n\t\t\twriter.setRequestMatcher(AnyRequestMatcher.INSTANCE);\n\t\t\tconfigurer.addHeaderWriter(writer);\n\t\t}\n\t\tif (headers.isContentType()) {\n\t\t\tconfigurer.contentTypeOptions();\n\t\t}\n\t\tif (headers.isXss()) {\n\t\t\tconfigurer.xssProtection();\n\t\t}\n\t\tif (headers.isCache()) {\n\t\t\tconfigurer.cacheControl();\n\t\t}\n\t\tif (headers.isFrame()) {\n\t\t\tconfigurer.frameOptions();\n\t\t}\n\t}\n\n\tpublic static List<String> getIgnored(SecurityProperties security) {\n\t\tList<String> ignored = new ArrayList<String>(security.getIgnored());\n\t\tif (ignored.isEmpty()) {\n\t\t\tignored.addAll(DEFAULT_IGNORED);\n\t\t}\n\t\telse if (ignored.contains("none")) {\n\t\t\tignored.remove("none");\n\t\t}\n\t\treturn ignored;\n\t}\n\n\t// Get the ignored paths in early\n\t@Order(SecurityProperties.IGNORED_ORDER)\n\tprivate static class IgnoredPathsWebSecurityConfigurerAdapter implements\n\t\t\tWebSecurityConfigurer<WebSecurity> {\n\n\t\t@Autowired(required = false)\n\t\tprivate ErrorController errorController;\n\n\t\t@Autowired\n\t\tprivate SecurityProperties security;\n\n\t\t@Autowired\n\t\tprivate ServerProperties server;\n\n\t\t@Override\n\t\tpublic void configure(WebSecurity builder) throws Exception {\n\t\t}\n\n\t\t@Override\n\t\tpublic void init(WebSecurity builder) throws Exception {\n\t\t\tIgnoredRequestConfigurer ignoring = builder.ignoring();\n\t\t\tList<String> ignored = getIgnored(this.security);\n\t\t\tif (this.errorController != null) {\n\t\t\t\tignored.add(normalizePath(this.errorController.getErrorPath()));\n\t\t\t}\n\t\t\tString[] paths = this.server.getPathsArray(ignored);\n\t\t\tignoring.antMatchers(paths);\n\t\t}\n\n\t\tprivate String normalizePath(String errorPath) {\n\t\t\tString result = StringUtils.cleanPath(errorPath);\n\t\t\tif (!result.startsWith("/")) {\n\t\t\t\tresult = "/" + result;\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "security.basic", name = "enabled", havingValue = "false")\n\t@Order(SecurityProperties.BASIC_AUTH_ORDER)\n\tprotected static class ApplicationNoWebSecurityConfigurerAdapter extends\n\t\t\tWebSecurityConfigurerAdapter {\n\t\t@Override\n\t\tprotected void configure(HttpSecurity http) throws Exception {\n\t\t\thttp.requestMatcher(new RequestMatcher() {\n\t\t\t\t@Override\n\t\t\t\tpublic boolean matches(HttpServletRequest request) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "security.basic", name = "enabled", matchIfMissing = true)\n\t@Order(SecurityProperties.BASIC_AUTH_ORDER)\n\tprotected static class ApplicationWebSecurityConfigurerAdapter extends\n\t\t\tWebSecurityConfigurerAdapter {\n\n\t\t@Autowired\n\t\tprivate SecurityProperties security;\n\n\t\t@Override\n\t\tprotected void configure(HttpSecurity http) throws Exception {\n\t\t\tif (this.security.isRequireSsl()) {\n\t\t\t\thttp.requiresChannel().anyRequest().requiresSecure();\n\t\t\t}\n\t\t\tif (!this.security.isEnableCsrf()) {\n\t\t\t\thttp.csrf().disable();\n\t\t\t}\n\t\t\t// No cookies for application endpoints by default\n\t\t\thttp.sessionManagement().sessionCreationPolicy(this.security.getSessions());\n\t\t\tSpringBootWebSecurityConfiguration.configureHeaders(http.headers(),\n\t\t\t\t\tthis.security.getHeaders());\n\t\t\tString[] paths = getSecureApplicationPaths();\n\t\t\tif (paths.length > 0) {\n\t\t\t\tAuthenticationEntryPoint entryPoint = entryPoint();\n\t\t\t\thttp.exceptionHandling().authenticationEntryPoint(entryPoint);\n\t\t\t\thttp.httpBasic().authenticationEntryPoint(entryPoint);\n\t\t\t\thttp.requestMatchers().antMatchers(paths);\n\t\t\t\tString[] roles = this.security.getUser().getRole().toArray(new String[0]);\n\t\t\t\tSecurityAuthorizeMode mode = this.security.getBasic().getAuthorizeMode();\n\t\t\t\tif (mode == null || mode == SecurityAuthorizeMode.ROLE) {\n\t\t\t\t\thttp.authorizeRequests().anyRequest().hasAnyRole(roles);\n\t\t\t\t}\n\t\t\t\telse if (mode == SecurityAuthorizeMode.AUTHENTICATED) {\n\t\t\t\t\thttp.authorizeRequests().anyRequest().authenticated();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tprivate String[] getSecureApplicationPaths() {\n\t\t\tList<String> list = new ArrayList<String>();\n\t\t\tfor (String path : this.security.getBasic().getPath()) {\n\t\t\t\tpath = (path == null ? "" : path.trim());\n\t\t\t\tif (path.equals("/**")) {\n\t\t\t\t\treturn new String[] { path };\n\t\t\t\t}\n\t\t\t\tif (!path.equals("")) {\n\t\t\t\t\tlist.add(path);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn list.toArray(new String[list.size()]);\n\t\t}\n\n\t\tprivate AuthenticationEntryPoint entryPoint() {\n\t\t\tBasicAuthenticationEntryPoint entryPoint = new BasicAuthenticationEntryPoint();\n\t\t\tentryPoint.setRealmName(this.security.getBasic().getRealm());\n\t\t\treturn entryPoint;\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport javax.servlet.Filter;\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.security.SecurityProperties.Headers;\nimport org.springframework.boot.autoconfigure.web.ErrorController;\nimport org.springframework.boot.autoconfigure.web.ServerProperties;\nimport org.springframework.boot.context.embedded.FilterRegistrationBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.web.WebSecurityConfigurer;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.builders.WebSecurity;\nimport org.springframework.security.config.annotation.web.builders.WebSecurity.IgnoredRequestConfigurer;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.config.annotation.web.configurers.HeadersConfigurer;\nimport org.springframework.security.web.AuthenticationEntryPoint;\nimport org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint;\nimport org.springframework.security.web.context.AbstractSecurityWebApplicationInitializer;\nimport org.springframework.security.web.header.writers.HstsHeaderWriter;\nimport org.springframework.security.web.util.matcher.AnyRequestMatcher;\nimport org.springframework.security.web.util.matcher.RequestMatcher;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for security of a web application or\n * service. By default everything is secured with HTTP Basic authentication except the\n * {@link SecurityProperties#getIgnored() explicitly ignored} paths (defaults to\n * <code>&#47;css&#47;**, &#47;js&#47;**, &#47;images&#47;**, &#47;**&#47;favicon.ico</code>\n * ). Many aspects of the behavior can be controller with {@link SecurityProperties} via\n * externalized application properties (or via an bean definition of that type to set the\n * defaults). The user details for authentication are just placeholders\n * {@code (username=user, password=password)} but can easily be customized by providing a\n * bean definition of type {@link AuthenticationManager}. Also provides audit logging of\n * authentication events.\n * <p>\n * Some common simple customizations:\n * <ul>\n * <li>Switch off security completely and permanently: remove Spring Security from the\n * classpath or {@link EnableAutoConfiguration#exclude() exclude} this configuration.</li>\n * <li>Switch off security temporarily (e.g. for a dev environment): set\n * {@code security.basic.enabled: false}</li>\n * <li>Customize the user details: add an AuthenticationManager bean</li>\n * <li>Add form login for user facing resources: add a\n * {@link WebSecurityConfigurerAdapter} and use {@link HttpSecurity#formLogin()}</li>\n * </ul>\n *\n * @author Dave Syer\n */\n@Configuration\n@EnableConfigurationProperties\n@ConditionalOnClass({ EnableWebSecurity.class, AuthenticationEntryPoint.class })\n@ConditionalOnMissingBean(WebSecurityConfiguration.class)\n@ConditionalOnWebApplication\n@EnableWebSecurity\npublic class SpringBootWebSecurityConfiguration {\n\n\tprivate static List<String> DEFAULT_IGNORED = Arrays.asList("/css/**", "/js/**",\n\t\t\t"/images/**", "/**/favicon.ico");\n\n\t@Bean\n\t@ConditionalOnMissingBean({ IgnoredPathsWebSecurityConfigurerAdapter.class })\n\tpublic IgnoredPathsWebSecurityConfigurerAdapter ignoredPathsWebSecurityConfigurerAdapter() {\n\t\treturn new IgnoredPathsWebSecurityConfigurerAdapter();\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(name = AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME)\n\tpublic FilterRegistrationBean securityFilterChainRegistration(\n\t\t\t@Qualifier(AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME) Filter securityFilter,\n\t\t\tSecurityProperties securityProperties) {\n\t\tFilterRegistrationBean registration = new FilterRegistrationBean(securityFilter);\n\t\tregistration.setOrder(securityProperties.getFilterOrder());\n\t\tregistration\n\t\t\t\t.setName(AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME);\n\t\treturn registration;\n\t}\n\n\tpublic static void configureHeaders(HeadersConfigurer<?> configurer,\n\t\t\tSecurityProperties.Headers headers) throws Exception {\n\t\tif (headers.getHsts() != Headers.HSTS.NONE) {\n\t\t\tboolean includeSubdomains = headers.getHsts() == Headers.HSTS.ALL;\n\t\t\tHstsHeaderWriter writer = new HstsHeaderWriter(includeSubdomains);\n\t\t\twriter.setRequestMatcher(AnyRequestMatcher.INSTANCE);\n\t\t\tconfigurer.addHeaderWriter(writer);\n\t\t}\n\t\tif (headers.isContentType()) {\n\t\t\tconfigurer.contentTypeOptions();\n\t\t}\n\t\tif (headers.isXss()) {\n\t\t\tconfigurer.xssProtection();\n\t\t}\n\t\tif (headers.isCache()) {\n\t\t\tconfigurer.cacheControl();\n\t\t}\n\t\tif (headers.isFrame()) {\n\t\t\tconfigurer.frameOptions();\n\t\t}\n\t}\n\n\tpublic static List<String> getIgnored(SecurityProperties security) {\n\t\tList<String> ignored = new ArrayList<String>(security.getIgnored());\n\t\tif (ignored.isEmpty()) {\n\t\t\tignored.addAll(DEFAULT_IGNORED);\n\t\t}\n\t\telse if (ignored.contains("none")) {\n\t\t\tignored.remove("none");\n\t\t}\n\t\treturn ignored;\n\t}\n\n\t// Get the ignored paths in early\n\t@Order(SecurityProperties.IGNORED_ORDER)\n\tprivate static class IgnoredPathsWebSecurityConfigurerAdapter implements\n\t\t\tWebSecurityConfigurer<WebSecurity> {\n\n\t\t@Autowired(required = false)\n\t\tprivate ErrorController errorController;\n\n\t\t@Autowired\n\t\tprivate SecurityProperties security;\n\n\t\t@Autowired\n\t\tprivate ServerProperties server;\n\n\t\t@Override\n\t\tpublic void configure(WebSecurity builder) throws Exception {\n\t\t}\n\n\t\t@Override\n\t\tpublic void init(WebSecurity builder) throws Exception {\n\t\t\tIgnoredRequestConfigurer ignoring = builder.ignoring();\n\t\t\tList<String> ignored = getIgnored(this.security);\n\t\t\tif (this.errorController != null) {\n\t\t\t\tignored.add(normalizePath(this.errorController.getErrorPath()));\n\t\t\t}\n\t\t\tString[] paths = this.server.getPathsArray(ignored);\n\t\t\tignoring.antMatchers(paths);\n\t\t}\n\n\t\tprivate String normalizePath(String errorPath) {\n\t\t\tString result = StringUtils.cleanPath(errorPath);\n\t\t\tif (!result.startsWith("/")) {\n\t\t\t\tresult = "/" + result;\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "security.basic", name = "enabled", havingValue = "false")\n\t@Order(SecurityProperties.BASIC_AUTH_ORDER)\n\tprotected static class ApplicationNoWebSecurityConfigurerAdapter extends\n\t\t\tWebSecurityConfigurerAdapter {\n\t\t@Override\n\t\tprotected void configure(HttpSecurity http) throws Exception {\n\t\t\thttp.requestMatcher(new RequestMatcher() {\n\t\t\t\t@Override\n\t\t\t\tpublic boolean matches(HttpServletRequest request) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "security.basic", name = "enabled", matchIfMissing = true)\n\t@Order(SecurityProperties.BASIC_AUTH_ORDER)\n\tprotected static class ApplicationWebSecurityConfigurerAdapter extends\n\t\t\tWebSecurityConfigurerAdapter {\n\n\t\t@Autowired\n\t\tprivate SecurityProperties security;\n\n\t\t@Override\n\t\tprotected void configure(HttpSecurity http) throws Exception {\n\t\t\tif (this.security.isRequireSsl()) {\n\t\t\t\thttp.requiresChannel().anyRequest().requiresSecure();\n\t\t\t}\n\t\t\tif (!this.security.isEnableCsrf()) {\n\t\t\t\thttp.csrf().disable();\n\t\t\t}\n\t\t\t// No cookies for application endpoints by default\n\t\t\thttp.sessionManagement().sessionCreationPolicy(this.security.getSessions());\n\t\t\tSpringBootWebSecurityConfiguration.configureHeaders(http.headers(),\n\t\t\t\t\tthis.security.getHeaders());\n\t\t\tString[] paths = getSecureApplicationPaths();\n\t\t\tif (paths.length > 0) {\n\t\t\t\tAuthenticationEntryPoint entryPoint = entryPoint();\n\t\t\t\thttp.exceptionHandling().authenticationEntryPoint(entryPoint);\n\t\t\t\thttp.httpBasic().authenticationEntryPoint(entryPoint);\n\t\t\t\thttp.requestMatchers().antMatchers(paths);\n\t\t\t\tString[] roles = this.security.getUser().getRole().toArray(new String[0]);\n\t\t\t\tSecurityAuthorizeMode mode = this.security.getBasic().getAuthorizeMode();\n\t\t\t\tif (mode == null || mode == SecurityAuthorizeMode.ROLE) {\n\t\t\t\t\thttp.authorizeRequests().anyRequest().hasAnyRole(roles);\n\t\t\t\t}\n\t\t\t\telse if (mode == SecurityAuthorizeMode.AUTHENTICATED) {\n\t\t\t\t\thttp.authorizeRequests().anyRequest().authenticated();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tprivate String[] getSecureApplicationPaths() {\n\t\t\tList<String> list = new ArrayList<String>();\n\t\t\tfor (String path : this.security.getBasic().getPath()) {\n\t\t\t\tpath = (path == null ? "" : path.trim());\n\t\t\t\tif (path.equals("/**")) {\n\t\t\t\t\treturn new String[] { path };\n\t\t\t\t}\n\t\t\t\tif (!path.equals("")) {\n\t\t\t\t\tlist.add(path);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn list.toArray(new String[list.size()]);\n\t\t}\n\n\t\tprivate AuthenticationEntryPoint entryPoint() {\n\t\t\tBasicAuthenticationEntryPoint entryPoint = new BasicAuthenticationEntryPoint();\n\t\t\tentryPoint.setRealmName(this.security.getBasic().getRealm());\n\t\t\treturn entryPoint;\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
