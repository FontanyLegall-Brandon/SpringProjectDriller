{'_old_path': None, '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cassandra/CassandraReactiveHealthIndicatorAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2012-2017 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.boot.actuate.autoconfigure.cassandra;\n+\n+import com.datastax.driver.core.Cluster;\n+import org.springframework.boot.actuate.autoconfigure.health.CompositeReactiveHealthIndicatorConfiguration;\n+import org.springframework.boot.actuate.autoconfigure.health.ConditionalOnEnabledHealthIndicator;\n+import org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration;\n+import org.springframework.boot.actuate.cassandra.CassandraReactiveHealthIndicator;\n+import org.springframework.boot.actuate.health.ReactiveHealthIndicator;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.data.cassandra.core.ReactiveCassandraOperations;\n+\n+import java.util.Map;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for\n+ * {@link org.springframework.boot.actuate.cassandra.CassandraReactiveHealthIndicator}.\n+ *\n+ * @author Artsiom Yudovin\n+ * @since 2.0.0\n+ */\n+@Configuration\n+@ConditionalOnClass({ReactiveCassandraOperations.class, Cluster.class })\n+@ConditionalOnBean(ReactiveCassandraOperations.class)\n+@ConditionalOnEnabledHealthIndicator("cassandra")\n+@AutoConfigureBefore(HealthIndicatorAutoConfiguration.class)\n+@AutoConfigureAfter({ CassandraAutoConfiguration.class,\n+\t\tCassandraReactiveDataAutoConfiguration.class })\n+public class CassandraReactiveHealthIndicatorAutoConfiguration extends\n+\t\tCompositeReactiveHealthIndicatorConfiguration<CassandraReactiveHealthIndicator, ReactiveCassandraOperations> {\n+\tprivate final Map<String, ReactiveCassandraOperations> reactiveCassandraOperations;\n+\n+\tpublic CassandraReactiveHealthIndicatorAutoConfiguration(\n+\t\t\tMap<String, ReactiveCassandraOperations> reactiveCassandraOperations) {\n+\t\tthis.reactiveCassandraOperations = reactiveCassandraOperations;\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean(name = "cassandraReactiveHealthIndicator")\n+\tpublic ReactiveHealthIndicator cassandraHealthIndicator() {\n+\t\treturn createHealthIndicator(this.reactiveCassandraOperations);\n+\t}\n+}\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.boot.actuate.autoconfigure.cassandra;\n\nimport com.datastax.driver.core.Cluster;\nimport org.springframework.boot.actuate.autoconfigure.health.CompositeReactiveHealthIndicatorConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.health.ConditionalOnEnabledHealthIndicator;\nimport org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration;\nimport org.springframework.boot.actuate.cassandra.CassandraReactiveHealthIndicator;\nimport org.springframework.boot.actuate.health.ReactiveHealthIndicator;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.cassandra.core.ReactiveCassandraOperations;\n\nimport java.util.Map;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for\n * {@link org.springframework.boot.actuate.cassandra.CassandraReactiveHealthIndicator}.\n *\n * @author Artsiom Yudovin\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass({ReactiveCassandraOperations.class, Cluster.class })\n@ConditionalOnBean(ReactiveCassandraOperations.class)\n@ConditionalOnEnabledHealthIndicator("cassandra")\n@AutoConfigureBefore(HealthIndicatorAutoConfiguration.class)\n@AutoConfigureAfter({ CassandraAutoConfiguration.class,\n\t\tCassandraReactiveDataAutoConfiguration.class })\npublic class CassandraReactiveHealthIndicatorAutoConfiguration extends\n\t\tCompositeReactiveHealthIndicatorConfiguration<CassandraReactiveHealthIndicator, ReactiveCassandraOperations> {\n\tprivate final Map<String, ReactiveCassandraOperations> reactiveCassandraOperations;\n\n\tpublic CassandraReactiveHealthIndicatorAutoConfiguration(\n\t\t\tMap<String, ReactiveCassandraOperations> reactiveCassandraOperations) {\n\t\tthis.reactiveCassandraOperations = reactiveCassandraOperations;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "cassandraReactiveHealthIndicator")\n\tpublic ReactiveHealthIndicator cassandraHealthIndicator() {\n\t\treturn createHealthIndicator(this.reactiveCassandraOperations);\n\t}\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
