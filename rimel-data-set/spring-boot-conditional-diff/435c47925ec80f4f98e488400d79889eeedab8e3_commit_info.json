{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/artemis/ArtemisConnectionFactoryConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/artemis/ArtemisConnectionFactoryConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -19,15 +19,15 @@ package org.springframework.boot.autoconfigure.jms.artemis;\n import javax.jms.ConnectionFactory;\n \n import org.apache.activemq.artemis.jms.client.ActiveMQConnectionFactory;\n-import org.apache.activemq.jms.pool.PooledConnectionFactory;\n import org.apache.commons.pool2.PooledObject;\n+import org.messaginghub.pooled.jms.JmsPoolConnectionFactory;\n \n import org.springframework.beans.factory.ListableBeanFactory;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.jms.JmsPoolConnectionFactoryFactory;\n import org.springframework.boot.autoconfigure.jms.JmsProperties;\n-import org.springframework.boot.autoconfigure.jms.activemq.PooledConnectionFactoryFactory;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.jms.connection.CachingConnectionFactory;\n@@ -87,17 +87,17 @@ class ArtemisConnectionFactoryConfiguration {\n \t}\n \n \t@Configuration\n-\t@ConditionalOnClass({ PooledConnectionFactory.class, PooledObject.class })\n+\t@ConditionalOnClass({ JmsPoolConnectionFactory.class, PooledObject.class })\n \tstatic class PooledConnectionFactoryConfiguration {\n \n \t\t@Bean(destroyMethod = "stop")\n \t\t@ConditionalOnProperty(prefix = "spring.artemis.pool", name = "enabled", havingValue = "true", matchIfMissing = false)\n-\t\tpublic PooledConnectionFactory pooledJmsConnectionFactory(\n+\t\tpublic JmsPoolConnectionFactory pooledJmsConnectionFactory(\n \t\t\t\tListableBeanFactory beanFactory, ArtemisProperties properties) {\n \t\t\tActiveMQConnectionFactory connectionFactory = new ArtemisConnectionFactoryFactory(\n \t\t\t\t\tbeanFactory, properties)\n \t\t\t\t\t\t\t.createConnectionFactory(ActiveMQConnectionFactory.class);\n-\t\t\treturn new PooledConnectionFactoryFactory(properties.getPool())\n+\t\t\treturn new JmsPoolConnectionFactoryFactory(properties.getPool())\n \t\t\t\t\t.createPooledConnectionFactory(connectionFactory);\n \t\t}\n \n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jms.artemis;\n\nimport javax.jms.ConnectionFactory;\n\nimport org.apache.activemq.artemis.jms.client.ActiveMQConnectionFactory;\nimport org.apache.commons.pool2.PooledObject;\nimport org.messaginghub.pooled.jms.JmsPoolConnectionFactory;\n\nimport org.springframework.beans.factory.ListableBeanFactory;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.jms.JmsPoolConnectionFactoryFactory;\nimport org.springframework.boot.autoconfigure.jms.JmsProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jms.connection.CachingConnectionFactory;\n\n/**\n * Configuration for Artemis {@link ConnectionFactory}.\n *\n * @author Eddú Meléndez\n * @author Phillip Webb\n * @author Stephane Nicoll\n */\n@Configuration\n@ConditionalOnMissingBean(ConnectionFactory.class)\nclass ArtemisConnectionFactoryConfiguration {\n\n\t@Configuration\n\t@ConditionalOnClass(CachingConnectionFactory.class)\n\t@ConditionalOnProperty(prefix = "spring.artemis.pool", name = "enabled", havingValue = "false", matchIfMissing = true)\n\tstatic class SimpleConnectionFactoryConfiguration {\n\n\t\tprivate final JmsProperties jmsProperties;\n\n\t\tprivate final ArtemisProperties properties;\n\n\t\tprivate final ListableBeanFactory beanFactory;\n\n\t\tSimpleConnectionFactoryConfiguration(JmsProperties jmsProperties,\n\t\t\t\tArtemisProperties properties, ListableBeanFactory beanFactory) {\n\t\t\tthis.jmsProperties = jmsProperties;\n\t\t\tthis.properties = properties;\n\t\t\tthis.beanFactory = beanFactory;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnProperty(prefix = "spring.jms.cache", name = "enabled", havingValue = "true", matchIfMissing = true)\n\t\tpublic CachingConnectionFactory cachingJmsConnectionFactory() {\n\t\t\tJmsProperties.Cache cacheProperties = this.jmsProperties.getCache();\n\t\t\tCachingConnectionFactory connectionFactory = new CachingConnectionFactory(\n\t\t\t\t\tcreateConnectionFactory());\n\t\t\tconnectionFactory.setCacheConsumers(cacheProperties.isConsumers());\n\t\t\tconnectionFactory.setCacheProducers(cacheProperties.isProducers());\n\t\t\tconnectionFactory.setSessionCacheSize(cacheProperties.getSessionCacheSize());\n\t\t\treturn connectionFactory;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnProperty(prefix = "spring.jms.cache", name = "enabled", havingValue = "false")\n\t\tpublic ActiveMQConnectionFactory jmsConnectionFactory() {\n\t\t\treturn createConnectionFactory();\n\t\t}\n\n\t\tprivate ActiveMQConnectionFactory createConnectionFactory() {\n\t\t\treturn new ArtemisConnectionFactoryFactory(this.beanFactory, this.properties)\n\t\t\t\t\t.createConnectionFactory(ActiveMQConnectionFactory.class);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ JmsPoolConnectionFactory.class, PooledObject.class })\n\tstatic class PooledConnectionFactoryConfiguration {\n\n\t\t@Bean(destroyMethod = "stop")\n\t\t@ConditionalOnProperty(prefix = "spring.artemis.pool", name = "enabled", havingValue = "true", matchIfMissing = false)\n\t\tpublic JmsPoolConnectionFactory pooledJmsConnectionFactory(\n\t\t\t\tListableBeanFactory beanFactory, ArtemisProperties properties) {\n\t\t\tActiveMQConnectionFactory connectionFactory = new ArtemisConnectionFactoryFactory(\n\t\t\t\t\tbeanFactory, properties)\n\t\t\t\t\t\t\t.createConnectionFactory(ActiveMQConnectionFactory.class);\n\t\t\treturn new JmsPoolConnectionFactoryFactory(properties.getPool())\n\t\t\t\t\t.createPooledConnectionFactory(connectionFactory);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jms.artemis;\n\nimport javax.jms.ConnectionFactory;\n\nimport org.apache.activemq.artemis.jms.client.ActiveMQConnectionFactory;\nimport org.apache.activemq.jms.pool.PooledConnectionFactory;\nimport org.apache.commons.pool2.PooledObject;\n\nimport org.springframework.beans.factory.ListableBeanFactory;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.jms.JmsProperties;\nimport org.springframework.boot.autoconfigure.jms.activemq.PooledConnectionFactoryFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jms.connection.CachingConnectionFactory;\n\n/**\n * Configuration for Artemis {@link ConnectionFactory}.\n *\n * @author Eddú Meléndez\n * @author Phillip Webb\n * @author Stephane Nicoll\n */\n@Configuration\n@ConditionalOnMissingBean(ConnectionFactory.class)\nclass ArtemisConnectionFactoryConfiguration {\n\n\t@Configuration\n\t@ConditionalOnClass(CachingConnectionFactory.class)\n\t@ConditionalOnProperty(prefix = "spring.artemis.pool", name = "enabled", havingValue = "false", matchIfMissing = true)\n\tstatic class SimpleConnectionFactoryConfiguration {\n\n\t\tprivate final JmsProperties jmsProperties;\n\n\t\tprivate final ArtemisProperties properties;\n\n\t\tprivate final ListableBeanFactory beanFactory;\n\n\t\tSimpleConnectionFactoryConfiguration(JmsProperties jmsProperties,\n\t\t\t\tArtemisProperties properties, ListableBeanFactory beanFactory) {\n\t\t\tthis.jmsProperties = jmsProperties;\n\t\t\tthis.properties = properties;\n\t\t\tthis.beanFactory = beanFactory;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnProperty(prefix = "spring.jms.cache", name = "enabled", havingValue = "true", matchIfMissing = true)\n\t\tpublic CachingConnectionFactory cachingJmsConnectionFactory() {\n\t\t\tJmsProperties.Cache cacheProperties = this.jmsProperties.getCache();\n\t\t\tCachingConnectionFactory connectionFactory = new CachingConnectionFactory(\n\t\t\t\t\tcreateConnectionFactory());\n\t\t\tconnectionFactory.setCacheConsumers(cacheProperties.isConsumers());\n\t\t\tconnectionFactory.setCacheProducers(cacheProperties.isProducers());\n\t\t\tconnectionFactory.setSessionCacheSize(cacheProperties.getSessionCacheSize());\n\t\t\treturn connectionFactory;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnProperty(prefix = "spring.jms.cache", name = "enabled", havingValue = "false")\n\t\tpublic ActiveMQConnectionFactory jmsConnectionFactory() {\n\t\t\treturn createConnectionFactory();\n\t\t}\n\n\t\tprivate ActiveMQConnectionFactory createConnectionFactory() {\n\t\t\treturn new ArtemisConnectionFactoryFactory(this.beanFactory, this.properties)\n\t\t\t\t\t.createConnectionFactory(ActiveMQConnectionFactory.class);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ PooledConnectionFactory.class, PooledObject.class })\n\tstatic class PooledConnectionFactoryConfiguration {\n\n\t\t@Bean(destroyMethod = "stop")\n\t\t@ConditionalOnProperty(prefix = "spring.artemis.pool", name = "enabled", havingValue = "true", matchIfMissing = false)\n\t\tpublic PooledConnectionFactory pooledJmsConnectionFactory(\n\t\t\t\tListableBeanFactory beanFactory, ArtemisProperties properties) {\n\t\t\tActiveMQConnectionFactory connectionFactory = new ArtemisConnectionFactoryFactory(\n\t\t\t\t\tbeanFactory, properties)\n\t\t\t\t\t\t\t.createConnectionFactory(ActiveMQConnectionFactory.class);\n\t\t\treturn new PooledConnectionFactoryFactory(properties.getPool())\n\t\t\t\t\t.createPooledConnectionFactory(connectionFactory);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
