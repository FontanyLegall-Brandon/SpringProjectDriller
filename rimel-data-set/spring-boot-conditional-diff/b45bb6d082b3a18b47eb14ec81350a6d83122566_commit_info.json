{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/GsonHttpMessageConvertersConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/GsonHttpMessageConvertersConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -36,10 +36,10 @@ import com.google.gson.Gson;\n  * @since 1.2.2\n  */\n @Configuration\n+@ConditionalOnClass(Gson.class)\n class GsonHttpMessageConvertersConfiguration {\n \n \t@Configuration\n-\t@ConditionalOnClass(Gson.class)\n \t@ConditionalOnBean(Gson.class)\n \t@Conditional(PreferGsonOrMissingJacksonCondition.class)\n \tprotected static class GsonHttpMessageConverterConfiguration {\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web;\n\nimport org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.converter.json.GsonHttpMessageConverter;\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\n\nimport com.google.gson.Gson;\n\n/**\n * Configuration for HTTP Message converters that use Gson\n *\n * @author Andy Wilkinson\n * @since 1.2.2\n */\n@Configuration\n@ConditionalOnClass(Gson.class)\nclass GsonHttpMessageConvertersConfiguration {\n\n\t@Configuration\n\t@ConditionalOnBean(Gson.class)\n\t@Conditional(PreferGsonOrMissingJacksonCondition.class)\n\tprotected static class GsonHttpMessageConverterConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic GsonHttpMessageConverter gsonHttpMessageConverter(Gson gson) {\n\t\t\tGsonHttpMessageConverter converter = new GsonHttpMessageConverter();\n\t\t\tconverter.setGson(gson);\n\t\t\treturn converter;\n\t\t}\n\n\t}\n\n\tprivate static class PreferGsonOrMissingJacksonCondition extends AnyNestedCondition {\n\n\t\tpublic PreferGsonOrMissingJacksonCondition() {\n\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n\t\t}\n\n\t\t@ConditionalOnProperty(name = HttpMessageConvertersAutoConfiguration.PREFERRED_MAPPER_PROPERTY, havingValue = "gson", matchIfMissing = false)\n\t\tstatic class GsonPreferred {\n\n\t\t}\n\n\t\t@ConditionalOnMissingBean(MappingJackson2HttpMessageConverter.class)\n\t\tstatic class JacksonMissing {\n\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web;\n\nimport org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.converter.json.GsonHttpMessageConverter;\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\n\nimport com.google.gson.Gson;\n\n/**\n * Configuration for HTTP Message converters that use Gson\n *\n * @author Andy Wilkinson\n * @since 1.2.2\n */\n@Configuration\nclass GsonHttpMessageConvertersConfiguration {\n\n\t@Configuration\n\t@ConditionalOnClass(Gson.class)\n\t@ConditionalOnBean(Gson.class)\n\t@Conditional(PreferGsonOrMissingJacksonCondition.class)\n\tprotected static class GsonHttpMessageConverterConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic GsonHttpMessageConverter gsonHttpMessageConverter(Gson gson) {\n\t\t\tGsonHttpMessageConverter converter = new GsonHttpMessageConverter();\n\t\t\tconverter.setGson(gson);\n\t\t\treturn converter;\n\t\t}\n\n\t}\n\n\tprivate static class PreferGsonOrMissingJacksonCondition extends AnyNestedCondition {\n\n\t\tpublic PreferGsonOrMissingJacksonCondition() {\n\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n\t\t}\n\n\t\t@ConditionalOnProperty(name = HttpMessageConvertersAutoConfiguration.PREFERRED_MAPPER_PROPERTY, havingValue = "gson", matchIfMissing = false)\n\t\tstatic class GsonPreferred {\n\n\t\t}\n\n\t\t@ConditionalOnMissingBean(MappingJackson2HttpMessageConverter.class)\n\t\tstatic class JacksonMissing {\n\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
