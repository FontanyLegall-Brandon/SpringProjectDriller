{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoReactiveRepositoriesAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoReactiveRepositoriesAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -51,7 +51,7 @@ import org.springframework.data.mongodb.repository.support.ReactiveMongoReposito\n @ConditionalOnClass({ MongoClient.class, ReactiveMongoRepository.class })\n @ConditionalOnMissingBean({ ReactiveMongoRepositoryFactoryBean.class,\n \t\tReactiveMongoRepositoryConfigurationExtension.class })\n-@ConditionalOnProperty(prefix = "spring.data.mongodb.reactive-repositories", name = "enabled", havingValue = "true", matchIfMissing = true)\n+@ConditionalOnProperty(prefix = "spring.data.mongodb.reactiverepositories", name = "enabled", havingValue = "true", matchIfMissing = true)\n @Import(MongoReactiveRepositoriesAutoConfigureRegistrar.class)\n @AutoConfigureAfter(MongoReactiveDataAutoConfiguration.class)\n public class MongoReactiveRepositoriesAutoConfiguration {\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.mongo;\n\nimport com.mongodb.reactivestreams.client.MongoClient;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.data.mongodb.repository.ReactiveMongoRepository;\nimport org.springframework.data.mongodb.repository.config.EnableReactiveMongoRepositories;\nimport org.springframework.data.mongodb.repository.config.ReactiveMongoRepositoryConfigurationExtension;\nimport org.springframework.data.mongodb.repository.support.ReactiveMongoRepositoryFactoryBean;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s Mongo Reactive\n * Repositories.\n * <p>\n * Activates when there is no bean of type\n * {@link org.springframework.data.mongodb.repository.support.ReactiveMongoRepositoryFactoryBean}\n * configured in the context, the Spring Data Mongo {@link ReactiveMongoRepository} type\n * is on the classpath, the ReactiveStreams Mongo client driver API is on the classpath,\n * and there is no other configured {@link ReactiveMongoRepository}.\n * <p>\n * Once in effect, the auto-configuration is the equivalent of enabling Mongo repositories\n * using the {@link EnableReactiveMongoRepositories} annotation.\n *\n * @author Mark Paluch\n * @since 2.0.0\n * @see EnableReactiveMongoRepositories\n */\n@Configuration\n@ConditionalOnClass({ MongoClient.class, ReactiveMongoRepository.class })\n@ConditionalOnMissingBean({ ReactiveMongoRepositoryFactoryBean.class,\n\t\tReactiveMongoRepositoryConfigurationExtension.class })\n@ConditionalOnProperty(prefix = "spring.data.mongodb.reactiverepositories", name = "enabled", havingValue = "true", matchIfMissing = true)\n@Import(MongoReactiveRepositoriesAutoConfigureRegistrar.class)\n@AutoConfigureAfter(MongoReactiveDataAutoConfiguration.class)\npublic class MongoReactiveRepositoriesAutoConfiguration {\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.mongo;\n\nimport com.mongodb.reactivestreams.client.MongoClient;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.data.mongodb.repository.ReactiveMongoRepository;\nimport org.springframework.data.mongodb.repository.config.EnableReactiveMongoRepositories;\nimport org.springframework.data.mongodb.repository.config.ReactiveMongoRepositoryConfigurationExtension;\nimport org.springframework.data.mongodb.repository.support.ReactiveMongoRepositoryFactoryBean;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s Mongo Reactive\n * Repositories.\n * <p>\n * Activates when there is no bean of type\n * {@link org.springframework.data.mongodb.repository.support.ReactiveMongoRepositoryFactoryBean}\n * configured in the context, the Spring Data Mongo {@link ReactiveMongoRepository} type\n * is on the classpath, the ReactiveStreams Mongo client driver API is on the classpath,\n * and there is no other configured {@link ReactiveMongoRepository}.\n * <p>\n * Once in effect, the auto-configuration is the equivalent of enabling Mongo repositories\n * using the {@link EnableReactiveMongoRepositories} annotation.\n *\n * @author Mark Paluch\n * @since 2.0.0\n * @see EnableReactiveMongoRepositories\n */\n@Configuration\n@ConditionalOnClass({ MongoClient.class, ReactiveMongoRepository.class })\n@ConditionalOnMissingBean({ ReactiveMongoRepositoryFactoryBean.class,\n\t\tReactiveMongoRepositoryConfigurationExtension.class })\n@ConditionalOnProperty(prefix = "spring.data.mongodb.reactive-repositories", name = "enabled", havingValue = "true", matchIfMissing = true)\n@Import(MongoReactiveRepositoriesAutoConfigureRegistrar.class)\n@AutoConfigureAfter(MongoReactiveDataAutoConfiguration.class)\npublic class MongoReactiveRepositoriesAutoConfiguration {\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
