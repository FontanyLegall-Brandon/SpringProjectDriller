{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/couchbase/CouchbaseReactiveHealthIndicatorConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/couchbase/CouchbaseReactiveHealthIndicatorConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -17,34 +17,42 @@ package org.springframework.boot.actuate.autoconfigure.couchbase;\n \n import java.util.Map;\n \n+import reactor.core.publisher.Flux;\n+\n import org.springframework.boot.actuate.autoconfigure.health.CompositeReactiveHealthIndicatorConfiguration;\n import org.springframework.boot.actuate.couchbase.CouchbaseReactiveHealthIndicator;\n import org.springframework.boot.actuate.health.ReactiveHealthIndicator;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.data.couchbase.core.RxJavaCouchbaseOperations;\n \n /**\n- * Configuration for\n- * {@link org.springframework.boot.actuate.couchbase.CouchbaseReactiveHealthIndicator}.\n+ * Configuration for {@link CouchbaseReactiveHealthIndicator}.\n  *\n  * @author Mikalai Lushchytski\n+ * @author Stephane Nicoll\n  * @since 2.1.0\n  */\n @Configuration\n-@ConditionalOnClass(RxJavaCouchbaseOperations.class)\n+@ConditionalOnClass({ RxJavaCouchbaseOperations.class, Flux.class })\n @ConditionalOnBean(RxJavaCouchbaseOperations.class)\n+@EnableConfigurationProperties(CouchbaseHealthIndicatorProperties.class)\n public class CouchbaseReactiveHealthIndicatorConfiguration extends\n \t\tCompositeReactiveHealthIndicatorConfiguration<CouchbaseReactiveHealthIndicator, RxJavaCouchbaseOperations> {\n \n \tprivate final Map<String, RxJavaCouchbaseOperations> couchbaseOperations;\n \n+\tprivate final CouchbaseHealthIndicatorProperties properties;\n+\n \tCouchbaseReactiveHealthIndicatorConfiguration(\n-\t\t\tMap<String, RxJavaCouchbaseOperations> couchbaseOperations) {\n+\t\t\tMap<String, RxJavaCouchbaseOperations> couchbaseOperations,\n+\t\t\tCouchbaseHealthIndicatorProperties properties) {\n \t\tthis.couchbaseOperations = couchbaseOperations;\n+\t\tthis.properties = properties;\n \t}\n \n \t@Bean\n@@ -53,4 +61,11 @@ public class CouchbaseReactiveHealthIndicatorConfiguration extends\n \t\treturn createHealthIndicator(this.couchbaseOperations);\n \t}\n \n+\t@Override\n+\tprotected CouchbaseReactiveHealthIndicator createHealthIndicator(\n+\t\t\tRxJavaCouchbaseOperations couchbaseOperations) {\n+\t\treturn new CouchbaseReactiveHealthIndicator(couchbaseOperations,\n+\t\t\t\tthis.properties.getTimeout());\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.boot.actuate.autoconfigure.couchbase;\n\nimport java.util.Map;\n\nimport reactor.core.publisher.Flux;\n\nimport org.springframework.boot.actuate.autoconfigure.health.CompositeReactiveHealthIndicatorConfiguration;\nimport org.springframework.boot.actuate.couchbase.CouchbaseReactiveHealthIndicator;\nimport org.springframework.boot.actuate.health.ReactiveHealthIndicator;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.couchbase.core.RxJavaCouchbaseOperations;\n\n/**\n * Configuration for {@link CouchbaseReactiveHealthIndicator}.\n *\n * @author Mikalai Lushchytski\n * @author Stephane Nicoll\n * @since 2.1.0\n */\n@Configuration\n@ConditionalOnClass({ RxJavaCouchbaseOperations.class, Flux.class })\n@ConditionalOnBean(RxJavaCouchbaseOperations.class)\n@EnableConfigurationProperties(CouchbaseHealthIndicatorProperties.class)\npublic class CouchbaseReactiveHealthIndicatorConfiguration extends\n\t\tCompositeReactiveHealthIndicatorConfiguration<CouchbaseReactiveHealthIndicator, RxJavaCouchbaseOperations> {\n\n\tprivate final Map<String, RxJavaCouchbaseOperations> couchbaseOperations;\n\n\tprivate final CouchbaseHealthIndicatorProperties properties;\n\n\tCouchbaseReactiveHealthIndicatorConfiguration(\n\t\t\tMap<String, RxJavaCouchbaseOperations> couchbaseOperations,\n\t\t\tCouchbaseHealthIndicatorProperties properties) {\n\t\tthis.couchbaseOperations = couchbaseOperations;\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "couchbaseReactiveHealthIndicator")\n\tpublic ReactiveHealthIndicator couchbaseReactiveHealthIndicator() {\n\t\treturn createHealthIndicator(this.couchbaseOperations);\n\t}\n\n\t@Override\n\tprotected CouchbaseReactiveHealthIndicator createHealthIndicator(\n\t\t\tRxJavaCouchbaseOperations couchbaseOperations) {\n\t\treturn new CouchbaseReactiveHealthIndicator(couchbaseOperations,\n\t\t\t\tthis.properties.getTimeout());\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.boot.actuate.autoconfigure.couchbase;\n\nimport java.util.Map;\n\nimport org.springframework.boot.actuate.autoconfigure.health.CompositeReactiveHealthIndicatorConfiguration;\nimport org.springframework.boot.actuate.couchbase.CouchbaseReactiveHealthIndicator;\nimport org.springframework.boot.actuate.health.ReactiveHealthIndicator;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.couchbase.core.RxJavaCouchbaseOperations;\n\n/**\n * Configuration for\n * {@link org.springframework.boot.actuate.couchbase.CouchbaseReactiveHealthIndicator}.\n *\n * @author Mikalai Lushchytski\n * @since 2.1.0\n */\n@Configuration\n@ConditionalOnClass(RxJavaCouchbaseOperations.class)\n@ConditionalOnBean(RxJavaCouchbaseOperations.class)\npublic class CouchbaseReactiveHealthIndicatorConfiguration extends\n\t\tCompositeReactiveHealthIndicatorConfiguration<CouchbaseReactiveHealthIndicator, RxJavaCouchbaseOperations> {\n\n\tprivate final Map<String, RxJavaCouchbaseOperations> couchbaseOperations;\n\n\tCouchbaseReactiveHealthIndicatorConfiguration(\n\t\t\tMap<String, RxJavaCouchbaseOperations> couchbaseOperations) {\n\t\tthis.couchbaseOperations = couchbaseOperations;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "couchbaseReactiveHealthIndicator")\n\tpublic ReactiveHealthIndicator couchbaseReactiveHealthIndicator() {\n\t\treturn createHealthIndicator(this.couchbaseOperations);\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
