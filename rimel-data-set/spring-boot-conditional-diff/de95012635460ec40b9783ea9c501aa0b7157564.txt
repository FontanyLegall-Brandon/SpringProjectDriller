@@ -16,6 +16,8 @@
 
 package org.springframework.boot.actuate.autoconfigure;
 
+import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;
+
 import java.io.IOException;
 import java.lang.reflect.Type;
 import java.util.Map;
@@ -23,7 +25,11 @@ import java.util.concurrent.ConcurrentHashMap;
 
 import javax.annotation.PostConstruct;
 
+import org.springframework.beans.factory.ListableBeanFactory;
+import org.springframework.beans.factory.annotation.AnnotatedBeanDefinition;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.config.BeanDefinition;
+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
 import org.springframework.boot.actuate.endpoint.mvc.ActuatorDocsEndpoint;
 import org.springframework.boot.actuate.endpoint.mvc.HalBrowserEndpoint;
 import org.springframework.boot.actuate.endpoint.mvc.HypermediaDisabled;
@@ -41,6 +47,7 @@ import org.springframework.boot.autoconfigure.condition.SpringBootCondition;
 import org.springframework.boot.autoconfigure.web.HttpMessageConverters;
 import org.springframework.boot.autoconfigure.web.ResourceProperties;
 import org.springframework.boot.autoconfigure.web.ServerProperties;
+import org.springframework.boot.bind.RelaxedPropertyResolver;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.ConditionContext;
@@ -48,7 +55,9 @@ import org.springframework.context.annotation.Conditional;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.core.MethodParameter;
 import org.springframework.core.annotation.AnnotationUtils;
+import org.springframework.core.env.Environment;
 import org.springframework.core.type.AnnotatedTypeMetadata;
+import org.springframework.core.type.MethodMetadata;
 import org.springframework.hateoas.Link;
 import org.springframework.hateoas.Resource;
 import org.springframework.hateoas.ResourceSupport;
@@ -61,6 +70,7 @@ import org.springframework.http.converter.HttpMessageNotWritableException;
 import org.springframework.http.server.ServerHttpRequest;
 import org.springframework.http.server.ServerHttpResponse;
 import org.springframework.http.server.ServletServerHttpRequest;
+import org.springframework.util.ClassUtils;
 import org.springframework.util.StringUtils;
 import org.springframework.util.TypeUtils;
 import org.springframework.web.bind.annotation.ControllerAdvice;
@@ -74,8 +84,6 @@ import com.fasterxml.jackson.annotation.JsonUnwrapped;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;
 
-import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;
-
 /**
  * Configuration for hypermedia in HTTP endpoints.
  *
@@ -128,7 +136,7 @@ public class EndpointWebMvcHypermediaManagementContextConfiguration {
 	@Configuration()
 	@ConditionalOnResource(resources = )
 	protected static class MissingSpringDataRestResourceCondition extends
-			SpringBootCondition {
+	SpringBootCondition {
 
 		@Override
 		public ConditionOutcome getMatchOutcome(ConditionContext context,
@@ -149,12 +157,106 @@ public class EndpointWebMvcHypermediaManagementContextConfiguration {
 	@ConditionalOnProperty(value = , matchIfMissing = true)
 	public static class LinksConfiguration {
 
+		@Autowired
+		private ListableBeanFactory beanFactory;
+
+		@Autowired
+		private ManagementServerProperties management;
+
 		@Bean
+		@Conditional(NotSpringDataRestHomePageCondition.class)
 		public LinksMvcEndpoint linksMvcEndpoint(ResourceProperties resources) {
-			String defaultPath = (resources.getWelcomePage() != null ?  : );
+			String defaultPath = getDefaultPath(resources);
 			return new LinksMvcEndpoint(defaultPath);
 		}
 
+		private String getDefaultPath(ResourceProperties resources) {
+			return resources.getWelcomePage() != null ?  : ;
+		}
+
+		private static class NotSpringDataRestHomePageCondition extends
+		SpringBootCondition {
+
+			@Override
+			public ConditionOutcome getMatchOutcome(ConditionContext context,
+					AnnotatedTypeMetadata metadata) {
+				if (!ClassUtils
+						.isPresent(
+								,
+								null)) {
+					return ConditionOutcome.match();
+				}
+				Class<?> type = ClassUtils
+						.resolveClassName(
+								,
+								null);
+				ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();
+				if (beanFactory.getBeanNamesForType(type, true, false).length == 0) {
+					return ConditionOutcome.match();
+				}
+				Environment environment = context.getEnvironment();
+				String path = getProperty(environment, , );
+				if (path == null
+						&& hasCustomBeanDefinition(beanFactory,
+								ManagementServerProperties.class,
+								ManagementServerPropertiesAutoConfiguration.class)) {
+					ManagementServerProperties bean = beanFactory
+							.getBean(ManagementServerProperties.class);
+					path = bean.getContextPath();
+				}
+				if (isHome(path)) {
+					path = getProperty(environment, , );
+					if (isHome(path)) {
+						return ConditionOutcome
+								.noMatch();
+					}
+					else {
+						return ConditionOutcome
+								.match(
+										+ path + );
+					}
+				}
+				else {
+					
+					
+					
+					return ConditionOutcome
+							.match( + path + );
+				}
+			}
+
+			private static boolean isHome(String path) {
+				return path == null || .equals(path) || .equals(path);
+			}
+
+			private static String getProperty(Environment environment, String prefix,
+					String name) {
+				RelaxedPropertyResolver resolver = new RelaxedPropertyResolver(
+						environment, prefix);
+				return resolver.getProperty(name, String.class);
+			}
+
+			private static <T> boolean hasCustomBeanDefinition(
+					ConfigurableListableBeanFactory beanFactory, Class<T> type,
+					Class<?> configClass) {
+				String[] names = beanFactory.getBeanNamesForType(type, true, false);
+				if (names == null || names.length != 1) {
+					return false;
+				}
+				BeanDefinition definition = beanFactory.getBeanDefinition(names[0]);
+				if (definition instanceof AnnotatedBeanDefinition) {
+					MethodMetadata factoryMethodMetadata = ((AnnotatedBeanDefinition) definition)
+							.getFactoryMethodMetadata();
+					if (factoryMethodMetadata != null) {
+						String className = factoryMethodMetadata.getDeclaringClassName();
+						return !configClass.getName().equals(className);
+					}
+				}
+				return true;
+			}
+
+		}
+
 		/**
 		 * Controller advice that adds links to the home page and/or the management
 		 * context path. The home page is enhanced if it is composed already of a
@@ -166,7 +268,7 @@ public class EndpointWebMvcHypermediaManagementContextConfiguration {
 			@Autowired
 			private MvcEndpoints endpoints;
 
-			@Autowired
+			@Autowired(required = false)
 			private LinksMvcEndpoint linksEndpoint;
 
 			@Autowired
@@ -200,7 +302,7 @@ public class EndpointWebMvcHypermediaManagementContextConfiguration {
 			public Object beforeBodyWrite(Object body, MethodParameter returnType,
 					MediaType selectedContentType,
 					Class<? extends HttpMessageConverter<?>> selectedConverterType,
-					ServerHttpRequest request, ServerHttpResponse response) {
+							ServerHttpRequest request, ServerHttpResponse response) {
 				if (request instanceof ServletServerHttpRequest) {
 					beforeBodyWrite(body, (ServletServerHttpRequest) request);
 				}
@@ -217,8 +319,8 @@ public class EndpointWebMvcHypermediaManagementContextConfiguration {
 						if (isHomePage(path) && hasManagementPath()) {
 							String rel = this.management.getContextPath().substring(1);
 							resource.add(linkTo(
-									EndpointWebMvcHypermediaManagementContextConfiguration.class).slash(
-									this.management.getContextPath()).withRel(rel));
+									EndpointWebMvcHypermediaManagementContextConfiguration.class)
+									.slash(this.management.getContextPath()).withRel(rel));
 						}
 						else {
 							this.linksEnhancer.addEndpointLinks(resource, );
@@ -236,8 +338,9 @@ public class EndpointWebMvcHypermediaManagementContextConfiguration {
 			}
 
 			private boolean isLinksPath(String path) {
-				return (this.management.getContextPath() + this.linksEndpoint.getPath())
-						.equals(path);
+				return this.linksEndpoint != null
+						&& (this.management.getContextPath() + this.linksEndpoint
+								.getPath()).equals(path);
 			}
 
 			private boolean isHomePage(String path) {
@@ -280,7 +383,7 @@ public class EndpointWebMvcHypermediaManagementContextConfiguration {
 			public Object beforeBodyWrite(Object body, MethodParameter returnType,
 					MediaType selectedContentType,
 					Class<? extends HttpMessageConverter<?>> selectedConverterType,
-					ServerHttpRequest request, ServerHttpResponse response) {
+							ServerHttpRequest request, ServerHttpResponse response) {
 				if (request instanceof ServletServerHttpRequest) {
 					return beforeBodyWrite(body, returnType, selectedContentType,
 							selectedConverterType, (ServletServerHttpRequest) request,
@@ -292,7 +395,7 @@ public class EndpointWebMvcHypermediaManagementContextConfiguration {
 			private Object beforeBodyWrite(Object body, MethodParameter returnType,
 					MediaType selectedContentType,
 					Class<? extends HttpMessageConverter<?>> selectedConverterType,
-					ServletServerHttpRequest request, ServerHttpResponse response) {
+							ServletServerHttpRequest request, ServerHttpResponse response) {
 				if (body == null || body instanceof Resource) {
 					
 					return body;
@@ -317,7 +420,7 @@ public class EndpointWebMvcHypermediaManagementContextConfiguration {
 			@SuppressWarnings()
 			private HttpMessageConverter<Object> findConverter(
 					Class<? extends HttpMessageConverter<?>> selectedConverterType,
-					MediaType mediaType) {
+							MediaType mediaType) {
 				if (this.converterCache.containsKey(mediaType)) {
 					return (HttpMessageConverter<Object>) this.converterCache
 							.get(mediaType);

