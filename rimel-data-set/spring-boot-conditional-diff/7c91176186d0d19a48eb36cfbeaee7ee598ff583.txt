@@ -0,0 +1,149 @@
+
+
+package org.springframework.boot.autoconfigure.freemarker;
+
+import java.util.Map;
+import java.util.Properties;
+
+import javax.annotation.PostConstruct;
+import javax.servlet.Servlet;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
+import org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;
+import org.springframework.boot.bind.RelaxedPropertyResolver;
+import org.springframework.context.EnvironmentAware;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.core.Ordered;
+import org.springframework.core.env.Environment;
+import org.springframework.core.io.DefaultResourceLoader;
+import org.springframework.core.io.Resource;
+import org.springframework.core.io.ResourceLoader;
+import org.springframework.util.Assert;
+import org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer;
+import org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver;
+
+
+@Configuration
+@ConditionalOnClass(freemarker.template.Configuration.class)
+@ConditionalOnWebApplication
+@AutoConfigureAfter(WebMvcAutoConfiguration.class)
+public class FreeMarkerAutoConfiguration {
+
+	public static final String DEFAULT_TEMPLATE_LOADER_PATH = ;
+
+	public static final String DEFAULT_PREFIX = ;
+
+	public static final String DEFAULT_SUFFIX = ;
+
+	@Configuration
+	public static class FreemarkerConfigurerConfiguration implements EnvironmentAware {
+
+		@Autowired
+		private final ResourceLoader resourceLoader = new DefaultResourceLoader();
+
+		private RelaxedPropertyResolver environment;
+
+		@Override
+		public void setEnvironment(Environment environment) {
+			this.environment = new RelaxedPropertyResolver(environment,
+					);
+		}
+
+		@PostConstruct
+		public void checkTemplateLocationExists() {
+			Boolean checkTemplateLocation = this.environment.getProperty(
+					, Boolean.class, true);
+			if (checkTemplateLocation) {
+				Resource resource = this.resourceLoader.getResource(this.environment
+						.getProperty(, DEFAULT_TEMPLATE_LOADER_PATH));
+				Assert.state(resource.exists(), 
+						+ resource + 
+						+ );
+			}
+		}
+
+		@Bean
+		@ConditionalOnMissingBean(name = )
+		public FreeMarkerConfigurer freeMarkerConfigurer() {
+			FreeMarkerConfigurer freeMarkerConfigurer = new FreeMarkerConfigurer();
+			freeMarkerConfigurer.setTemplateLoaderPath(this.environment.getProperty(
+					, DEFAULT_TEMPLATE_LOADER_PATH));
+			freeMarkerConfigurer.setDefaultEncoding(this.environment.getProperty(
+					, ));
+			Map<String, Object> settingsMap = this.environment
+					.getSubProperties();
+			Properties settings = new Properties();
+			settings.putAll(settingsMap);
+			freeMarkerConfigurer.setFreemarkerSettings(settings);
+			return freeMarkerConfigurer;
+		}
+	}
+
+	@Configuration
+	@ConditionalOnClass(Servlet.class)
+	public static class FreemarkerViewResolverConfiguration implements EnvironmentAware {
+
+		private RelaxedPropertyResolver environment;
+
+		@Override
+		public void setEnvironment(Environment environment) {
+			this.environment = new RelaxedPropertyResolver(environment,
+					);
+		}
+
+		@Bean
+		@ConditionalOnMissingBean(name = )
+		public FreeMarkerViewResolver freeMarkerViewResolver() {
+			FreeMarkerViewResolver resolver = new FreeMarkerViewResolver();
+			resolver.setPrefix(this.environment.getProperty(, DEFAULT_PREFIX));
+			resolver.setSuffix(this.environment.getProperty(, DEFAULT_SUFFIX));
+			resolver.setCache(this.environment.getProperty(, Boolean.class, true));
+			resolver.setContentType(this.environment.getProperty(,
+					));
+			resolver.setViewNames(this.environment.getProperty(,
+					String[].class));
+			resolver.setExposeRequestAttributes(this.environment.getProperty(
+					, Boolean.class, false));
+			resolver.setAllowRequestOverride(this.environment.getProperty(
+					, Boolean.class, false));
+			resolver.setExposeSessionAttributes(this.environment.getProperty(
+					, Boolean.class, false));
+			resolver.setAllowSessionOverride(this.environment.getProperty(
+					, Boolean.class, false));
+			resolver.setExposeSpringMacroHelpers(this.environment.getProperty(
+					, Boolean.class, false));
+			resolver.setRequestContextAttribute(this.environment
+					.getProperty());
+
+			
+			
+			resolver.setOrder(Ordered.LOWEST_PRECEDENCE - 5);
+
+			return resolver;
+		}
+	}
+}

