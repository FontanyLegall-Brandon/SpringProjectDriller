{'_old_path': None, '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/ConditionalOnRepositoryTypeTests.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2012-2017 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.data;\n+\n+import org.junit.Test;\n+\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n+import org.springframework.context.annotation.Configuration;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+/**\n+ * Tests for {@link ConditionalOnRepositoryType}.\n+ *\n+ * @author Andy Wilkinson\n+ */\n+public class ConditionalOnRepositoryTypeTests {\n+\n+\tprivate final ApplicationContextRunner runner = new ApplicationContextRunner();\n+\n+\t@Test\n+\tpublic void imperativeRepositoryMatchesWithNoConfiguredType() {\n+\t\tthis.runner.withUserConfiguration(ImperativeRepository.class)\n+\t\t\t\t.run((context) -> assertThat(context)\n+\t\t\t\t\t\t.hasSingleBean(ImperativeRepository.class));\n+\t}\n+\n+\t@Test\n+\tpublic void reactiveRepositoryMatchesWithNoConfiguredType() {\n+\t\tthis.runner.withUserConfiguration(ReactiveRepository.class).run(\n+\t\t\t\t(context) -> assertThat(context).hasSingleBean(ReactiveRepository.class));\n+\t}\n+\n+\t@Test\n+\tpublic void imperativeRepositoryMatchesWithAutoConfiguredType() {\n+\t\tthis.runner.withUserConfiguration(ImperativeRepository.class)\n+\t\t\t\t.withPropertyValues("spring.data.test.repositories.type:auto")\n+\t\t\t\t.run((context) -> assertThat(context)\n+\t\t\t\t\t\t.hasSingleBean(ImperativeRepository.class));\n+\t}\n+\n+\t@Test\n+\tpublic void reactiveRepositoryMatchesWithAutoConfiguredType() {\n+\t\tthis.runner.withUserConfiguration(ReactiveRepository.class)\n+\t\t\t\t.withPropertyValues("spring.data.test.repositories.type:auto")\n+\t\t\t\t.run((context) -> assertThat(context)\n+\t\t\t\t\t\t.hasSingleBean(ReactiveRepository.class));\n+\t}\n+\n+\t@Test\n+\tpublic void imperativeRepositoryMatchesWithImperativeConfiguredType() {\n+\t\tthis.runner.withUserConfiguration(ImperativeRepository.class)\n+\t\t\t\t.withPropertyValues("spring.data.test.repositories.type:imperative")\n+\t\t\t\t.run((context) -> assertThat(context)\n+\t\t\t\t\t\t.hasSingleBean(ImperativeRepository.class));\n+\t}\n+\n+\t@Test\n+\tpublic void reactiveRepositoryMatchesWithReactiveConfiguredType() {\n+\t\tthis.runner.withUserConfiguration(ReactiveRepository.class)\n+\t\t\t\t.withPropertyValues("spring.data.test.repositories.type:reactive")\n+\t\t\t\t.run((context) -> assertThat(context)\n+\t\t\t\t\t\t.hasSingleBean(ReactiveRepository.class));\n+\t}\n+\n+\t@Test\n+\tpublic void imperativeRepositoryDoesNotMatchWithReactiveConfiguredType() {\n+\t\tthis.runner.withUserConfiguration(ImperativeRepository.class)\n+\t\t\t\t.withPropertyValues("spring.data.test.repositories.type:reactive")\n+\t\t\t\t.run((context) -> assertThat(context)\n+\t\t\t\t\t\t.doesNotHaveBean(ImperativeRepository.class));\n+\t}\n+\n+\t@Test\n+\tpublic void reactiveRepositoryDoesNotMatchWithImperativeConfiguredType() {\n+\t\tthis.runner.withUserConfiguration(ReactiveRepository.class)\n+\t\t\t\t.withPropertyValues("spring.data.test.repositories.type:imperative")\n+\t\t\t\t.run((context) -> assertThat(context)\n+\t\t\t\t\t\t.doesNotHaveBean(ReactiveRepository.class));\n+\t}\n+\n+\t@Test\n+\tpublic void imperativeRepositoryDoesNotMatchWithNoneConfiguredType() {\n+\t\tthis.runner.withUserConfiguration(ImperativeRepository.class)\n+\t\t\t\t.withPropertyValues("spring.data.test.repositories.type:none")\n+\t\t\t\t.run((context) -> assertThat(context)\n+\t\t\t\t\t\t.doesNotHaveBean(ImperativeRepository.class));\n+\t}\n+\n+\t@Test\n+\tpublic void reactiveRepositoryDoesNotMatchWithNoneConfiguredType() {\n+\t\tthis.runner.withUserConfiguration(ReactiveRepository.class)\n+\t\t\t\t.withPropertyValues("spring.data.test.repositories.type:none")\n+\t\t\t\t.run((context) -> assertThat(context)\n+\t\t\t\t\t\t.doesNotHaveBean(ReactiveRepository.class));\n+\t}\n+\n+\t@Test\n+\tpublic void failsFastWhenConfiguredTypeIsUnknown() {\n+\t\tthis.runner.withUserConfiguration(ReactiveRepository.class)\n+\t\t\t\t.withPropertyValues("spring.data.test.repositories.type:abcde")\n+\t\t\t\t.run((context) -> assertThat(context).hasFailed());\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnRepositoryType(store = "test", type = RepositoryType.IMPERATIVE)\n+\tprotected static class ImperativeRepository {\n+\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnRepositoryType(store = "test", type = RepositoryType.REACTIVE)\n+\tprotected static class ReactiveRepository {\n+\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data;\n\nimport org.junit.Test;\n\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.context.annotation.Configuration;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link ConditionalOnRepositoryType}.\n *\n * @author Andy Wilkinson\n */\npublic class ConditionalOnRepositoryTypeTests {\n\n\tprivate final ApplicationContextRunner runner = new ApplicationContextRunner();\n\n\t@Test\n\tpublic void imperativeRepositoryMatchesWithNoConfiguredType() {\n\t\tthis.runner.withUserConfiguration(ImperativeRepository.class)\n\t\t\t\t.run((context) -> assertThat(context)\n\t\t\t\t\t\t.hasSingleBean(ImperativeRepository.class));\n\t}\n\n\t@Test\n\tpublic void reactiveRepositoryMatchesWithNoConfiguredType() {\n\t\tthis.runner.withUserConfiguration(ReactiveRepository.class).run(\n\t\t\t\t(context) -> assertThat(context).hasSingleBean(ReactiveRepository.class));\n\t}\n\n\t@Test\n\tpublic void imperativeRepositoryMatchesWithAutoConfiguredType() {\n\t\tthis.runner.withUserConfiguration(ImperativeRepository.class)\n\t\t\t\t.withPropertyValues("spring.data.test.repositories.type:auto")\n\t\t\t\t.run((context) -> assertThat(context)\n\t\t\t\t\t\t.hasSingleBean(ImperativeRepository.class));\n\t}\n\n\t@Test\n\tpublic void reactiveRepositoryMatchesWithAutoConfiguredType() {\n\t\tthis.runner.withUserConfiguration(ReactiveRepository.class)\n\t\t\t\t.withPropertyValues("spring.data.test.repositories.type:auto")\n\t\t\t\t.run((context) -> assertThat(context)\n\t\t\t\t\t\t.hasSingleBean(ReactiveRepository.class));\n\t}\n\n\t@Test\n\tpublic void imperativeRepositoryMatchesWithImperativeConfiguredType() {\n\t\tthis.runner.withUserConfiguration(ImperativeRepository.class)\n\t\t\t\t.withPropertyValues("spring.data.test.repositories.type:imperative")\n\t\t\t\t.run((context) -> assertThat(context)\n\t\t\t\t\t\t.hasSingleBean(ImperativeRepository.class));\n\t}\n\n\t@Test\n\tpublic void reactiveRepositoryMatchesWithReactiveConfiguredType() {\n\t\tthis.runner.withUserConfiguration(ReactiveRepository.class)\n\t\t\t\t.withPropertyValues("spring.data.test.repositories.type:reactive")\n\t\t\t\t.run((context) -> assertThat(context)\n\t\t\t\t\t\t.hasSingleBean(ReactiveRepository.class));\n\t}\n\n\t@Test\n\tpublic void imperativeRepositoryDoesNotMatchWithReactiveConfiguredType() {\n\t\tthis.runner.withUserConfiguration(ImperativeRepository.class)\n\t\t\t\t.withPropertyValues("spring.data.test.repositories.type:reactive")\n\t\t\t\t.run((context) -> assertThat(context)\n\t\t\t\t\t\t.doesNotHaveBean(ImperativeRepository.class));\n\t}\n\n\t@Test\n\tpublic void reactiveRepositoryDoesNotMatchWithImperativeConfiguredType() {\n\t\tthis.runner.withUserConfiguration(ReactiveRepository.class)\n\t\t\t\t.withPropertyValues("spring.data.test.repositories.type:imperative")\n\t\t\t\t.run((context) -> assertThat(context)\n\t\t\t\t\t\t.doesNotHaveBean(ReactiveRepository.class));\n\t}\n\n\t@Test\n\tpublic void imperativeRepositoryDoesNotMatchWithNoneConfiguredType() {\n\t\tthis.runner.withUserConfiguration(ImperativeRepository.class)\n\t\t\t\t.withPropertyValues("spring.data.test.repositories.type:none")\n\t\t\t\t.run((context) -> assertThat(context)\n\t\t\t\t\t\t.doesNotHaveBean(ImperativeRepository.class));\n\t}\n\n\t@Test\n\tpublic void reactiveRepositoryDoesNotMatchWithNoneConfiguredType() {\n\t\tthis.runner.withUserConfiguration(ReactiveRepository.class)\n\t\t\t\t.withPropertyValues("spring.data.test.repositories.type:none")\n\t\t\t\t.run((context) -> assertThat(context)\n\t\t\t\t\t\t.doesNotHaveBean(ReactiveRepository.class));\n\t}\n\n\t@Test\n\tpublic void failsFastWhenConfiguredTypeIsUnknown() {\n\t\tthis.runner.withUserConfiguration(ReactiveRepository.class)\n\t\t\t\t.withPropertyValues("spring.data.test.repositories.type:abcde")\n\t\t\t\t.run((context) -> assertThat(context).hasFailed());\n\t}\n\n\t@Configuration\n\t@ConditionalOnRepositoryType(store = "test", type = RepositoryType.IMPERATIVE)\n\tprotected static class ImperativeRepository {\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnRepositoryType(store = "test", type = RepositoryType.REACTIVE)\n\tprotected static class ReactiveRepository {\n\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
