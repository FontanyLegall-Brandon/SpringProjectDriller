@@ -0,0 +1,71 @@
+
+
+package org.springframework.boot.autoconfigure.condition;
+
+import org.junit.After;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import org.springframework.boot.testutil.ClassPathExclusions;
+import org.springframework.boot.testutil.FilteredClassPathRunner;
+import org.springframework.cache.caffeine.CaffeineCacheManager;
+import org.springframework.context.annotation.AnnotationConfigApplicationContext;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+
+@RunWith(FilteredClassPathRunner.class)
+@ClassPathExclusions()
+public class ConditionalOnMissingBeanWithFilteredClasspathTests {
+
+	private final AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();
+
+	@After
+	public void closeContext() {
+		this.context.close();
+	}
+
+	@Test
+	public void testNameOnMissingBeanTypeWithMissingImport() {
+		this.context.register(OnBeanTypeConfiguration.class);
+		this.context.refresh();
+		assertThat(this.context.containsBean()).isTrue();
+	}
+
+
+	@Configuration
+	static class OnBeanTypeConfiguration {
+
+		@Bean
+		@ConditionalOnMissingBean(type = )
+		public String foo() {
+			return ;
+		}
+
+	}
+
+	static class TestCacheManager extends CaffeineCacheManager {
+	}
+
+}

