@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2014 the original author or authors.
+ * Copyright 2012-2015 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the );
  * you may not use this file except in compliance with the License.
@@ -18,30 +18,28 @@ package org.springframework.boot.autoconfigure.jmx;
 
 import javax.management.MBeanServer;
 
+import org.springframework.beans.BeansException;
 import org.springframework.beans.factory.BeanFactory;
-import org.springframework.beans.factory.FactoryBean;
-import org.springframework.beans.factory.InitializingBean;
-import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.BeanFactoryAware;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.SearchStrategy;
+import org.springframework.boot.bind.RelaxedPropertyResolver;
+import org.springframework.context.EnvironmentAware;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.EnableMBeanExport;
-import org.springframework.context.annotation.MBeanExportConfiguration;
+import org.springframework.context.annotation.MBeanExportConfiguration.SpecificPlatform;
 import org.springframework.core.env.Environment;
-import org.springframework.core.type.StandardAnnotationMetadata;
 import org.springframework.jmx.export.MBeanExporter;
 import org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource;
 import org.springframework.jmx.export.annotation.AnnotationMBeanExporter;
 import org.springframework.jmx.export.naming.ObjectNamingStrategy;
 import org.springframework.jmx.support.MBeanServerFactoryBean;
-import org.springframework.jmx.support.WebSphereMBeanServerFactoryBean;
-import org.springframework.jndi.JndiObjectFactoryBean;
-import org.springframework.util.Assert;
-import org.springframework.util.ClassUtils;
+import org.springframework.jmx.support.RegistrationPolicy;
+import org.springframework.util.StringUtils;
 
 /**
  * {@link EnableAutoConfiguration Auto-configuration} to enable/disable Spring's
@@ -54,35 +52,45 @@ import org.springframework.util.ClassUtils;
 @Configuration
 @ConditionalOnClass({ MBeanExporter.class })
 @ConditionalOnExpression()
-public class JmxAutoConfiguration {
+public class JmxAutoConfiguration implements EnvironmentAware, BeanFactoryAware {
 
-	@Autowired
-	private Environment environment;
+	private RelaxedPropertyResolver propertyResolver;
 
-	@Autowired
 	private BeanFactory beanFactory;
 
-	@Autowired
-	private ObjectNamingStrategy namingStrategy;
+	@Override
+	public void setEnvironment(Environment environment) {
+		this.propertyResolver = new RelaxedPropertyResolver(environment, );
+	}
+
+	@Override
+	public void setBeanFactory(BeanFactory beanFactory) throws BeansException {
+		this.beanFactory = beanFactory;
+	}
 
 	@Bean
 	@ConditionalOnMissingBean(value = MBeanExporter.class, search = SearchStrategy.CURRENT)
-	public AnnotationMBeanExporter mbeanExporter() {
-		
-		MBeanExportConfiguration config = new MBeanExportConfiguration();
-		config.setEnvironment(this.environment);
-		config.setBeanFactory(this.beanFactory);
-		config.setImportMetadata(new StandardAnnotationMetadata(Empty.class));
-		
-		AnnotationMBeanExporter exporter = config.mbeanExporter();
-		exporter.setNamingStrategy(this.namingStrategy);
+	public AnnotationMBeanExporter mbeanExporter(ObjectNamingStrategy namingStrategy) {
+		AnnotationMBeanExporter exporter = new AnnotationMBeanExporter();
+		exporter.setRegistrationPolicy(RegistrationPolicy.FAIL_ON_EXISTING);
+		exporter.setNamingStrategy(namingStrategy);
+		String server = this.propertyResolver.getProperty(, );
+		if (StringUtils.hasLength(server)) {
+			exporter.setServer(this.beanFactory.getBean(server, MBeanServer.class));
+		}
 		return exporter;
 	}
 
 	@Bean
-	@ConditionalOnMissingBean(ObjectNamingStrategy.class)
+	@ConditionalOnMissingBean(value = ObjectNamingStrategy.class, search = SearchStrategy.CURRENT)
 	public ParentAwareNamingStrategy objectNamingStrategy() {
-		return new ParentAwareNamingStrategy(new AnnotationJmxAttributeSource());
+		ParentAwareNamingStrategy namingStrategy = new ParentAwareNamingStrategy(
+				new AnnotationJmxAttributeSource());
+		String defaultDomain = this.propertyResolver.getProperty();
+		if (StringUtils.hasLength(defaultDomain)) {
+			namingStrategy.setDefaultDomain(defaultDomain);
+		}
+		return namingStrategy;
 	}
 
 	@Bean
@@ -99,63 +107,4 @@ public class JmxAutoConfiguration {
 
 	}
 
-	@EnableMBeanExport(defaultDomain = , server = )
-	private static class Empty {
-
-	}
-
-	
-	private static enum SpecificPlatform {
-
-		WEBLOGIC() {
-			@Override
-			public FactoryBean<?> getMBeanServerFactory() {
-				JndiObjectFactoryBean factory = new JndiObjectFactoryBean();
-				factory.setJndiName();
-				return factory;
-			}
-		},
-
-		WEBSPHERE() {
-			@Override
-			public FactoryBean<MBeanServer> getMBeanServerFactory() {
-				return new WebSphereMBeanServerFactoryBean();
-			}
-		};
-
-		private final String identifyingClass;
-
-		private SpecificPlatform(String identifyingClass) {
-			this.identifyingClass = identifyingClass;
-		}
-
-		public MBeanServer getMBeanServer() {
-			try {
-				FactoryBean<?> factory = getMBeanServerFactory();
-				if (factory instanceof InitializingBean) {
-					((InitializingBean) factory).afterPropertiesSet();
-				}
-				Object server = factory.getObject();
-				Assert.isInstanceOf(MBeanServer.class, server);
-				return (MBeanServer) server;
-			}
-			catch (Exception ex) {
-				throw new IllegalStateException(ex);
-			}
-		}
-
-		protected abstract FactoryBean<?> getMBeanServerFactory();
-
-		public static SpecificPlatform get() {
-			ClassLoader classLoader = MBeanExportConfiguration.class.getClassLoader();
-			for (SpecificPlatform environment : values()) {
-				if (ClassUtils.isPresent(environment.identifyingClass, classLoader)) {
-					return environment;
-				}
-			}
-			return null;
-		}
-
-	}
-
 }

