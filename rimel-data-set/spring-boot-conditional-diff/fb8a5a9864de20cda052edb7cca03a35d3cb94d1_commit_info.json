{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cache/CachesEndpointAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cache/CachesEndpointAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,8 +16,13 @@\n \n package org.springframework.boot.actuate.autoconfigure.cache;\n \n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\n import org.springframework.boot.actuate.cache.CachesEndpoint;\n+import org.springframework.boot.actuate.cache.CachesEndpointWebExtension;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration;\n@@ -25,7 +30,6 @@ import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.cache.CacheManager;\n-import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n@@ -33,7 +37,8 @@ import org.springframework.context.annotation.Configuration;\n  * {@link EnableAutoConfiguration Auto-configuration} for {@link CachesEndpoint}.\n  *\n  * @author Johannes Edmeier\n- * @since 2.0.0\n+ * @author Stephane Nicoll\n+ * @since 2.1.0\n  */\n @Configuration\n @ConditionalOnClass(CacheManager.class)\n@@ -41,11 +46,20 @@ import org.springframework.context.annotation.Configuration;\n public class CachesEndpointAutoConfiguration {\n \n \t@Bean\n-\t@ConditionalOnBean(CacheManager.class)\n \t@ConditionalOnMissingBean\n \t@ConditionalOnEnabledEndpoint\n-\tpublic CachesEndpoint cachesEndpoint(ApplicationContext context) {\n-\t\treturn new CachesEndpoint(context);\n+\tpublic CachesEndpoint cachesEndpoint(\n+\t\t\tObjectProvider<Map<String, CacheManager>> cacheManagers) {\n+\t\treturn new CachesEndpoint(cacheManagers.getIfAvailable(LinkedHashMap::new));\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\t@ConditionalOnEnabledEndpoint\n+\t@ConditionalOnBean(CachesEndpoint.class)\n+\tpublic CachesEndpointWebExtension cachesEndpointWebExtension(\n+\t\t\tCachesEndpoint cachesEndpoint) {\n+\t\treturn new CachesEndpointWebExtension(cachesEndpoint);\n \t}\n \n }\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.cache;\n\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\nimport org.springframework.boot.actuate.cache.CachesEndpoint;\nimport org.springframework.boot.actuate.cache.CachesEndpointWebExtension;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.cache.CacheManager;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link CachesEndpoint}.\n *\n * @author Johannes Edmeier\n * @author Stephane Nicoll\n * @since 2.1.0\n */\n@Configuration\n@ConditionalOnClass(CacheManager.class)\n@AutoConfigureAfter(CacheAutoConfiguration.class)\npublic class CachesEndpointAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnEnabledEndpoint\n\tpublic CachesEndpoint cachesEndpoint(\n\t\t\tObjectProvider<Map<String, CacheManager>> cacheManagers) {\n\t\treturn new CachesEndpoint(cacheManagers.getIfAvailable(LinkedHashMap::new));\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnEnabledEndpoint\n\t@ConditionalOnBean(CachesEndpoint.class)\n\tpublic CachesEndpointWebExtension cachesEndpointWebExtension(\n\t\t\tCachesEndpoint cachesEndpoint) {\n\t\treturn new CachesEndpointWebExtension(cachesEndpoint);\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.cache;\n\nimport org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\nimport org.springframework.boot.actuate.cache.CachesEndpoint;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.cache.CacheManager;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link CachesEndpoint}.\n *\n * @author Johannes Edmeier\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass(CacheManager.class)\n@AutoConfigureAfter(CacheAutoConfiguration.class)\npublic class CachesEndpointAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnBean(CacheManager.class)\n\t@ConditionalOnMissingBean\n\t@ConditionalOnEnabledEndpoint\n\tpublic CachesEndpoint cachesEndpoint(ApplicationContext context) {\n\t\treturn new CachesEndpoint(context);\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
