@@ -0,0 +1,99 @@
+
+
+package org.springframework.boot.autoconfigure.condition;
+
+import static org.hamcrest.Matchers.equalTo;
+import static org.junit.Assert.assertThat;
+
+import org.junit.Test;
+import org.springframework.boot.test.EnvironmentTestUtils;
+import org.springframework.context.annotation.AnnotationConfigApplicationContext;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Conditional;
+import org.springframework.context.annotation.Configuration;
+
+
+public class NoneOfNestedConditionsTests {
+
+	@Test
+	public void neither() throws Exception {
+		AnnotationConfigApplicationContext context = load(Config.class);
+		assertThat(context.containsBean(), equalTo(true));
+		context.close();
+	}
+
+	@Test
+	public void propertyA() throws Exception {
+		AnnotationConfigApplicationContext context = load(Config.class, );
+		assertThat(context.containsBean(), equalTo(false));
+		context.close();
+	}
+
+	@Test
+	public void propertyB() throws Exception {
+		AnnotationConfigApplicationContext context = load(Config.class, );
+		assertThat(context.containsBean(), equalTo(false));
+		context.close();
+	}
+
+	@Test
+	public void both() throws Exception {
+		AnnotationConfigApplicationContext context = load(Config.class, , );
+		assertThat(context.containsBean(), equalTo(false));
+		context.close();
+	}
+
+	private AnnotationConfigApplicationContext load(Class<?> config, String... env) {
+		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();
+		EnvironmentTestUtils.addEnvironment(context, env);
+		context.register(config);
+		context.refresh();
+		return context;
+	}
+
+	@Configuration
+	@Conditional(NeitherPropertyANorPropertyBCondition.class)
+	public static class Config {
+
+		@Bean
+		public String myBean() {
+			return ;
+		}
+
+	}
+
+	static class NeitherPropertyANorPropertyBCondition extends NoneOfNestedConditions {
+
+		public NeitherPropertyANorPropertyBCondition() {
+			super(ConfigurationPhase.PARSE_CONFIGURATION);
+		}
+
+		@ConditionalOnProperty()
+		static class HasPropertyA {
+
+		}
+
+		@ConditionalOnProperty()
+		static class HasPropertyB {
+
+		}
+
+	}
+
+}

