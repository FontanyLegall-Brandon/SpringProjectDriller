{'_old_path': None, '_new_path': PosixPath('spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/session/SessionsEndpointAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2012-2017 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.autoconfigure.session;\n+\n+import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\n+import org.springframework.boot.actuate.session.SessionsEndpoint;\n+import org.springframework.boot.actuate.session.SessionsWebEndpointExtension;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.session.SessionAutoConfiguration;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.session.FindByIndexNameSessionRepository;\n+import org.springframework.session.Session;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for {@link SessionsEndpoint}.\n+ *\n+ * @author Vedran Pavic\n+ * @since 2.0.0\n+ */\n+@Configuration\n+@ConditionalOnClass(FindByIndexNameSessionRepository.class)\n+@AutoConfigureAfter(SessionAutoConfiguration.class)\n+public class SessionsEndpointAutoConfiguration {\n+\n+\t@Bean\n+\t@ConditionalOnBean(FindByIndexNameSessionRepository.class)\n+\t@ConditionalOnMissingBean\n+\t@ConditionalOnEnabledEndpoint\n+\tpublic SessionsEndpoint sessionEndpoint(\n+\t\t\tFindByIndexNameSessionRepository<? extends Session> sessionRepository) {\n+\t\treturn new SessionsEndpoint(sessionRepository);\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\t@ConditionalOnEnabledEndpoint\n+\t@ConditionalOnBean(SessionsEndpoint.class)\n+\tpublic SessionsWebEndpointExtension sessionsWebEndpointExtension(\n+\t\t\tSessionsEndpoint sessionsEndpoint) {\n+\t\treturn new SessionsWebEndpointExtension(sessionsEndpoint);\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.session;\n\nimport org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\nimport org.springframework.boot.actuate.session.SessionsEndpoint;\nimport org.springframework.boot.actuate.session.SessionsWebEndpointExtension;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.session.SessionAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.session.FindByIndexNameSessionRepository;\nimport org.springframework.session.Session;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link SessionsEndpoint}.\n *\n * @author Vedran Pavic\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass(FindByIndexNameSessionRepository.class)\n@AutoConfigureAfter(SessionAutoConfiguration.class)\npublic class SessionsEndpointAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnBean(FindByIndexNameSessionRepository.class)\n\t@ConditionalOnMissingBean\n\t@ConditionalOnEnabledEndpoint\n\tpublic SessionsEndpoint sessionEndpoint(\n\t\t\tFindByIndexNameSessionRepository<? extends Session> sessionRepository) {\n\t\treturn new SessionsEndpoint(sessionRepository);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnEnabledEndpoint\n\t@ConditionalOnBean(SessionsEndpoint.class)\n\tpublic SessionsWebEndpointExtension sessionsWebEndpointExtension(\n\t\t\tSessionsEndpoint sessionsEndpoint) {\n\t\treturn new SessionsWebEndpointExtension(sessionsEndpoint);\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
