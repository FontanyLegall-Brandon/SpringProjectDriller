{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/SitePreferenceAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2012-2014 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.mobile;\n+\n+import java.util.List;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.mobile.device.DeviceResolver;\n+import org.springframework.mobile.device.site.SitePreferenceHandler;\n+import org.springframework.mobile.device.site.SitePreferenceHandlerInterceptor;\n+import org.springframework.mobile.device.site.SitePreferenceHandlerMethodArgumentResolver;\n+import org.springframework.web.method.support.HandlerMethodArgumentResolver;\n+import org.springframework.web.servlet.config.annotation.InterceptorRegistry;\n+import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for Spring Mobile\'s\n+ * {@link SitePreferenceHandler}. The site preference feature depends on a\n+ * {@link DeviceResolver} first being registered.\n+ *\n+ * @author Roy Clarkson\n+ * @since 1.1\n+ */\n+@Configuration\n+@ConditionalOnClass({ SitePreferenceHandlerInterceptor.class,\n+\tSitePreferenceHandlerMethodArgumentResolver.class })\n+@AutoConfigureAfter(DeviceResolverAutoConfiguration.class)\n+@ConditionalOnExpression("${spring.mobile.enableSitePreference:true}")\n+public class SitePreferenceAutoConfiguration {\n+\n+\t@Configuration\n+\t@ConditionalOnWebApplication\n+\tprotected static class SitePreferenceAutoConfigurationAdapter extends\n+\t\t\tWebMvcConfigurerAdapter {\n+\n+\t\t@Autowired\n+\t\tprivate SitePreferenceHandlerInterceptor sitePreferenceHandlerInterceptor;\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(SitePreferenceHandlerInterceptor.class)\n+\t\tpublic SitePreferenceHandlerInterceptor sitePreferenceHandlerInterceptor() {\n+\t\t\treturn new SitePreferenceHandlerInterceptor();\n+\t\t}\n+\n+\t\t@Bean\n+\t\tpublic SitePreferenceHandlerMethodArgumentResolver sitePreferenceHandlerMethodArgumentResolver() {\n+\t\t\treturn new SitePreferenceHandlerMethodArgumentResolver();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void addInterceptors(InterceptorRegistry registry) {\n+\t\t\tregistry.addInterceptor(sitePreferenceHandlerInterceptor);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void addArgumentResolvers(\n+\t\t\t\tList<HandlerMethodArgumentResolver> argumentResolvers) {\n+\t\t\targumentResolvers.add(sitePreferenceHandlerMethodArgumentResolver());\n+\t\t}\n+\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.mobile;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.mobile.device.DeviceResolver;\nimport org.springframework.mobile.device.site.SitePreferenceHandler;\nimport org.springframework.mobile.device.site.SitePreferenceHandlerInterceptor;\nimport org.springframework.mobile.device.site.SitePreferenceHandlerMethodArgumentResolver;\nimport org.springframework.web.method.support.HandlerMethodArgumentResolver;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Mobile\'s\n * {@link SitePreferenceHandler}. The site preference feature depends on a\n * {@link DeviceResolver} first being registered.\n *\n * @author Roy Clarkson\n * @since 1.1\n */\n@Configuration\n@ConditionalOnClass({ SitePreferenceHandlerInterceptor.class,\n\tSitePreferenceHandlerMethodArgumentResolver.class })\n@AutoConfigureAfter(DeviceResolverAutoConfiguration.class)\n@ConditionalOnExpression("${spring.mobile.enableSitePreference:true}")\npublic class SitePreferenceAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnWebApplication\n\tprotected static class SitePreferenceAutoConfigurationAdapter extends\n\t\t\tWebMvcConfigurerAdapter {\n\n\t\t@Autowired\n\t\tprivate SitePreferenceHandlerInterceptor sitePreferenceHandlerInterceptor;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(SitePreferenceHandlerInterceptor.class)\n\t\tpublic SitePreferenceHandlerInterceptor sitePreferenceHandlerInterceptor() {\n\t\t\treturn new SitePreferenceHandlerInterceptor();\n\t\t}\n\n\t\t@Bean\n\t\tpublic SitePreferenceHandlerMethodArgumentResolver sitePreferenceHandlerMethodArgumentResolver() {\n\t\t\treturn new SitePreferenceHandlerMethodArgumentResolver();\n\t\t}\n\n\t\t@Override\n\t\tpublic void addInterceptors(InterceptorRegistry registry) {\n\t\t\tregistry.addInterceptor(sitePreferenceHandlerInterceptor);\n\t\t}\n\n\t\t@Override\n\t\tpublic void addArgumentResolvers(\n\t\t\t\tList<HandlerMethodArgumentResolver> argumentResolvers) {\n\t\t\targumentResolvers.add(sitePreferenceHandlerMethodArgumentResolver());\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
