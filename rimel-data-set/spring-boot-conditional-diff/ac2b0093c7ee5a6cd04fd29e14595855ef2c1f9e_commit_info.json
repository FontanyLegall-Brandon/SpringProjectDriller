{'_old_path': None, '_new_path': PosixPath('spring-boot-project/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/OnEnabledDevtoolsConditionTests.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2012-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.devtools.autoconfigure;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Conditional;\n+import org.springframework.context.annotation.Configuration;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+/**\n+ * Tests for {@link OnEnabledDevtoolsCondition}.\n+ *\n+ * @author Madhura Bhave\n+ */\n+public class OnEnabledDevtoolsConditionTests {\n+\n+\tprivate AnnotationConfigApplicationContext context;\n+\n+\t@Before\n+\tpublic void setup() {\n+\t\tthis.context = new AnnotationConfigApplicationContext();\n+\t\tthis.context.register(TestConfiguration.class);\n+\t}\n+\n+\t@Test\n+\tpublic void outcomeWhenDevtoolsShouldBeEnabledIsTrueShouldMatch() throws Exception {\n+\t\tThread thread = new Thread(() -> {\n+\t\t\tOnEnabledDevtoolsConditionTests.this.context.refresh();\n+\t\t\tassertThat(OnEnabledDevtoolsConditionTests.this.context.containsBean("test"))\n+\t\t\t\t\t.isTrue();\n+\t\t});\n+\t\tthread.start();\n+\t\tthread.join();\n+\t}\n+\n+\t@Test\n+\tpublic void outcomeWhenDevtoolsShouldBeEnabledIsFalseShouldNotMatch() {\n+\t\tOnEnabledDevtoolsConditionTests.this.context.refresh();\n+\t\tassertThat(OnEnabledDevtoolsConditionTests.this.context.containsBean("test"))\n+\t\t\t\t.isFalse();\n+\t}\n+\n+\t@Configuration(proxyBeanMethods = false)\n+\tstatic class TestConfiguration {\n+\n+\t\t@Bean\n+\t\t@Conditional(OnEnabledDevtoolsCondition.class)\n+\t\tpublic String test() {\n+\t\t\treturn "hello";\n+\t\t}\n+\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.devtools.autoconfigure;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link OnEnabledDevtoolsCondition}.\n *\n * @author Madhura Bhave\n */\npublic class OnEnabledDevtoolsConditionTests {\n\n\tprivate AnnotationConfigApplicationContext context;\n\n\t@Before\n\tpublic void setup() {\n\t\tthis.context = new AnnotationConfigApplicationContext();\n\t\tthis.context.register(TestConfiguration.class);\n\t}\n\n\t@Test\n\tpublic void outcomeWhenDevtoolsShouldBeEnabledIsTrueShouldMatch() throws Exception {\n\t\tThread thread = new Thread(() -> {\n\t\t\tOnEnabledDevtoolsConditionTests.this.context.refresh();\n\t\t\tassertThat(OnEnabledDevtoolsConditionTests.this.context.containsBean("test"))\n\t\t\t\t\t.isTrue();\n\t\t});\n\t\tthread.start();\n\t\tthread.join();\n\t}\n\n\t@Test\n\tpublic void outcomeWhenDevtoolsShouldBeEnabledIsFalseShouldNotMatch() {\n\t\tOnEnabledDevtoolsConditionTests.this.context.refresh();\n\t\tassertThat(OnEnabledDevtoolsConditionTests.this.context.containsBean("test"))\n\t\t\t\t.isFalse();\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\tstatic class TestConfiguration {\n\n\t\t@Bean\n\t\t@Conditional(OnEnabledDevtoolsCondition.class)\n\t\tpublic String test() {\n\t\t\treturn "hello";\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
