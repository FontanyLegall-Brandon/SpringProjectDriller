{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -65,8 +65,7 @@ import org.springframework.util.Assert;\n  */\n @Configuration(proxyBeanMethods = false)\n @ConditionalOnClass({ SpringLiquibase.class, DatabaseChange.class })\n-@ConditionalOnBean(DataSource.class)\n-@ConditionalOnProperty(prefix = "spring.liquibase", name = "enabled",\n+@ConditionalOnProperty(prefix = LiquibaseProperties.PROPERTIES_PREFIX, name = "enabled",\n \t\tmatchIfMissing = true)\n @AutoConfigureAfter({ DataSourceAutoConfiguration.class,\n \t\tHibernateJpaAutoConfiguration.class })\n@@ -141,9 +140,12 @@ public class LiquibaseAutoConfiguration {\n \t\t\t\tliquibase.setDataSource(liquibaseDataSource);\n \t\t\t\treturn liquibase;\n \t\t\t}\n-\t\t\tSpringLiquibase liquibase = new DataSourceClosingSpringLiquibase();\n-\t\t\tliquibase.setDataSource(createNewDataSource(dataSourceProperties));\n-\t\t\treturn liquibase;\n+\t\t\telse if (this.properties.isCreateDataSource()) {\n+\t\t\t\tSpringLiquibase liquibase = new DataSourceClosingSpringLiquibase();\n+\t\t\t\tliquibase.setDataSource(createNewDataSource(dataSourceProperties));\n+\t\t\t\treturn liquibase;\n+\t\t\t}\n+\t\t\tthrow new LiquibaseDataSourceMissingException();\n \t\t}\n \n \t\tprivate DataSource getDataSource(DataSource liquibaseDataSource,\n@@ -151,7 +153,7 @@ public class LiquibaseAutoConfiguration {\n \t\t\tif (liquibaseDataSource != null) {\n \t\t\t\treturn liquibaseDataSource;\n \t\t\t}\n-\t\t\tif (this.properties.getUrl() == null && this.properties.getUser() == null) {\n+\t\t\tif (!this.properties.isCreateDataSource()) {\n \t\t\t\treturn dataSource;\n \t\t\t}\n \t\t\treturn null;\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.liquibase;\n\nimport java.util.function.Supplier;\n\nimport javax.annotation.PostConstruct;\nimport javax.persistence.EntityManagerFactory;\nimport javax.sql.DataSource;\n\nimport liquibase.change.DatabaseChange;\nimport liquibase.integration.spring.SpringLiquibase;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.data.jpa.EntityManagerFactoryDependsOnPostProcessor;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;\nimport org.springframework.boot.autoconfigure.jdbc.JdbcOperationsDependsOnPostProcessor;\nimport org.springframework.boot.autoconfigure.jdbc.NamedParameterJdbcOperationsDependsOnPostProcessor;\nimport org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.jdbc.DataSourceBuilder;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.jdbc.core.JdbcOperations;\nimport org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations;\nimport org.springframework.orm.jpa.AbstractEntityManagerFactoryBean;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.util.Assert;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Liquibase.\n *\n * @author Marcel Overdijk\n * @author Dave Syer\n * @author Phillip Webb\n * @author Eddú Meléndez\n * @author Andy Wilkinson\n * @author Dominic Gunn\n * @author Dan Zheng\n * @since 1.1.0\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass({ SpringLiquibase.class, DatabaseChange.class })\n@ConditionalOnProperty(prefix = LiquibaseProperties.PROPERTIES_PREFIX, name = "enabled",\n\t\tmatchIfMissing = true)\n@AutoConfigureAfter({ DataSourceAutoConfiguration.class,\n\t\tHibernateJpaAutoConfiguration.class })\npublic class LiquibaseAutoConfiguration {\n\n\t@Bean\n\tpublic LiquibaseSchemaManagementProvider liquibaseDefaultDdlModeProvider(\n\t\t\tObjectProvider<SpringLiquibase> liquibases) {\n\t\treturn new LiquibaseSchemaManagementProvider(liquibases);\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnMissingBean(SpringLiquibase.class)\n\t@EnableConfigurationProperties({ DataSourceProperties.class,\n\t\t\tLiquibaseProperties.class })\n\t@Import(LiquibaseJpaDependencyConfiguration.class)\n\tpublic static class LiquibaseConfiguration {\n\n\t\tprivate final LiquibaseProperties properties;\n\n\t\tprivate final ResourceLoader resourceLoader;\n\n\t\tpublic LiquibaseConfiguration(LiquibaseProperties properties,\n\t\t\t\tResourceLoader resourceLoader) {\n\t\t\tthis.properties = properties;\n\t\t\tthis.resourceLoader = resourceLoader;\n\t\t}\n\n\t\t@PostConstruct\n\t\tpublic void checkChangelogExists() {\n\t\t\tif (this.properties.isCheckChangeLogLocation()) {\n\t\t\t\tResource resource = this.resourceLoader\n\t\t\t\t\t\t.getResource(this.properties.getChangeLog());\n\t\t\t\tAssert.state(resource.exists(),\n\t\t\t\t\t\t() -> "Cannot find changelog location: " + resource\n\t\t\t\t\t\t\t\t+ " (please add changelog or check your Liquibase "\n\t\t\t\t\t\t\t\t+ "configuration)");\n\t\t\t}\n\t\t}\n\n\t\t@Bean\n\t\tpublic SpringLiquibase liquibase(DataSourceProperties dataSourceProperties,\n\t\t\t\tObjectProvider<DataSource> dataSource,\n\t\t\t\t@LiquibaseDataSource ObjectProvider<DataSource> liquibaseDataSource) {\n\t\t\tSpringLiquibase liquibase = createSpringLiquibase(\n\t\t\t\t\tliquibaseDataSource.getIfAvailable(), dataSource.getIfUnique(),\n\t\t\t\t\tdataSourceProperties);\n\t\t\tliquibase.setChangeLog(this.properties.getChangeLog());\n\t\t\tliquibase.setContexts(this.properties.getContexts());\n\t\t\tliquibase.setDefaultSchema(this.properties.getDefaultSchema());\n\t\t\tliquibase.setLiquibaseSchema(this.properties.getLiquibaseSchema());\n\t\t\tliquibase.setLiquibaseTablespace(this.properties.getLiquibaseTablespace());\n\t\t\tliquibase.setDatabaseChangeLogTable(\n\t\t\t\t\tthis.properties.getDatabaseChangeLogTable());\n\t\t\tliquibase.setDatabaseChangeLogLockTable(\n\t\t\t\t\tthis.properties.getDatabaseChangeLogLockTable());\n\t\t\tliquibase.setDropFirst(this.properties.isDropFirst());\n\t\t\tliquibase.setShouldRun(this.properties.isEnabled());\n\t\t\tliquibase.setLabels(this.properties.getLabels());\n\t\t\tliquibase.setChangeLogParameters(this.properties.getParameters());\n\t\t\tliquibase.setRollbackFile(this.properties.getRollbackFile());\n\t\t\tliquibase.setTestRollbackOnUpdate(this.properties.isTestRollbackOnUpdate());\n\t\t\treturn liquibase;\n\t\t}\n\n\t\tprivate SpringLiquibase createSpringLiquibase(DataSource liquibaseDatasource,\n\t\t\t\tDataSource dataSource, DataSourceProperties dataSourceProperties) {\n\t\t\tDataSource liquibaseDataSource = getDataSource(liquibaseDatasource,\n\t\t\t\t\tdataSource);\n\t\t\tif (liquibaseDataSource != null) {\n\t\t\t\tSpringLiquibase liquibase = new SpringLiquibase();\n\t\t\t\tliquibase.setDataSource(liquibaseDataSource);\n\t\t\t\treturn liquibase;\n\t\t\t}\n\t\t\telse if (this.properties.isCreateDataSource()) {\n\t\t\t\tSpringLiquibase liquibase = new DataSourceClosingSpringLiquibase();\n\t\t\t\tliquibase.setDataSource(createNewDataSource(dataSourceProperties));\n\t\t\t\treturn liquibase;\n\t\t\t}\n\t\t\tthrow new LiquibaseDataSourceMissingException();\n\t\t}\n\n\t\tprivate DataSource getDataSource(DataSource liquibaseDataSource,\n\t\t\t\tDataSource dataSource) {\n\t\t\tif (liquibaseDataSource != null) {\n\t\t\t\treturn liquibaseDataSource;\n\t\t\t}\n\t\t\tif (!this.properties.isCreateDataSource()) {\n\t\t\t\treturn dataSource;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\tprivate DataSource createNewDataSource(\n\t\t\t\tDataSourceProperties dataSourceProperties) {\n\t\t\tString url = getProperty(this.properties::getUrl,\n\t\t\t\t\tdataSourceProperties::getUrl);\n\t\t\tString user = getProperty(this.properties::getUser,\n\t\t\t\t\tdataSourceProperties::getUsername);\n\t\t\tString password = getProperty(this.properties::getPassword,\n\t\t\t\t\tdataSourceProperties::getPassword);\n\t\t\treturn DataSourceBuilder.create().url(url).username(user).password(password)\n\t\t\t\t\t.build();\n\t\t}\n\n\t\tprivate String getProperty(Supplier<String> property,\n\t\t\t\tSupplier<String> defaultValue) {\n\t\t\tString value = property.get();\n\t\t\treturn (value != null) ? value : defaultValue.get();\n\t\t}\n\n\t}\n\n\t/**\n\t * Additional configuration to ensure that {@link EntityManagerFactory} beans depend\n\t * on the liquibase bean.\n\t */\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnClass(LocalContainerEntityManagerFactoryBean.class)\n\t@ConditionalOnBean(AbstractEntityManagerFactoryBean.class)\n\tprotected static class LiquibaseJpaDependencyConfiguration\n\t\t\textends EntityManagerFactoryDependsOnPostProcessor {\n\n\t\tpublic LiquibaseJpaDependencyConfiguration() {\n\t\t\tsuper("liquibase");\n\t\t}\n\n\t}\n\n\t/**\n\t * Additional configuration to ensure that {@link JdbcOperations} beans depend on the\n\t * liquibase bean.\n\t */\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnClass(JdbcOperations.class)\n\t@ConditionalOnBean(JdbcOperations.class)\n\tprotected static class LiquibaseJdbcOperationsDependencyConfiguration\n\t\t\textends JdbcOperationsDependsOnPostProcessor {\n\n\t\tpublic LiquibaseJdbcOperationsDependencyConfiguration() {\n\t\t\tsuper("liquibase");\n\t\t}\n\n\t}\n\n\t/**\n\t * Additional configuration to ensure that {@link NamedParameterJdbcOperations} beans\n\t * depend on the liquibase bean.\n\t */\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnClass(NamedParameterJdbcOperations.class)\n\t@ConditionalOnBean(NamedParameterJdbcOperations.class)\n\tprotected static class LiquibaseNamedParameterJdbcOperationsDependencyConfiguration\n\t\t\textends NamedParameterJdbcOperationsDependsOnPostProcessor {\n\n\t\tpublic LiquibaseNamedParameterJdbcOperationsDependencyConfiguration() {\n\t\t\tsuper("liquibase");\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.liquibase;\n\nimport java.util.function.Supplier;\n\nimport javax.annotation.PostConstruct;\nimport javax.persistence.EntityManagerFactory;\nimport javax.sql.DataSource;\n\nimport liquibase.change.DatabaseChange;\nimport liquibase.integration.spring.SpringLiquibase;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.data.jpa.EntityManagerFactoryDependsOnPostProcessor;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;\nimport org.springframework.boot.autoconfigure.jdbc.JdbcOperationsDependsOnPostProcessor;\nimport org.springframework.boot.autoconfigure.jdbc.NamedParameterJdbcOperationsDependsOnPostProcessor;\nimport org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.jdbc.DataSourceBuilder;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.jdbc.core.JdbcOperations;\nimport org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations;\nimport org.springframework.orm.jpa.AbstractEntityManagerFactoryBean;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.util.Assert;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Liquibase.\n *\n * @author Marcel Overdijk\n * @author Dave Syer\n * @author Phillip Webb\n * @author Eddú Meléndez\n * @author Andy Wilkinson\n * @author Dominic Gunn\n * @author Dan Zheng\n * @since 1.1.0\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass({ SpringLiquibase.class, DatabaseChange.class })\n@ConditionalOnBean(DataSource.class)\n@ConditionalOnProperty(prefix = "spring.liquibase", name = "enabled",\n\t\tmatchIfMissing = true)\n@AutoConfigureAfter({ DataSourceAutoConfiguration.class,\n\t\tHibernateJpaAutoConfiguration.class })\npublic class LiquibaseAutoConfiguration {\n\n\t@Bean\n\tpublic LiquibaseSchemaManagementProvider liquibaseDefaultDdlModeProvider(\n\t\t\tObjectProvider<SpringLiquibase> liquibases) {\n\t\treturn new LiquibaseSchemaManagementProvider(liquibases);\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnMissingBean(SpringLiquibase.class)\n\t@EnableConfigurationProperties({ DataSourceProperties.class,\n\t\t\tLiquibaseProperties.class })\n\t@Import(LiquibaseJpaDependencyConfiguration.class)\n\tpublic static class LiquibaseConfiguration {\n\n\t\tprivate final LiquibaseProperties properties;\n\n\t\tprivate final ResourceLoader resourceLoader;\n\n\t\tpublic LiquibaseConfiguration(LiquibaseProperties properties,\n\t\t\t\tResourceLoader resourceLoader) {\n\t\t\tthis.properties = properties;\n\t\t\tthis.resourceLoader = resourceLoader;\n\t\t}\n\n\t\t@PostConstruct\n\t\tpublic void checkChangelogExists() {\n\t\t\tif (this.properties.isCheckChangeLogLocation()) {\n\t\t\t\tResource resource = this.resourceLoader\n\t\t\t\t\t\t.getResource(this.properties.getChangeLog());\n\t\t\t\tAssert.state(resource.exists(),\n\t\t\t\t\t\t() -> "Cannot find changelog location: " + resource\n\t\t\t\t\t\t\t\t+ " (please add changelog or check your Liquibase "\n\t\t\t\t\t\t\t\t+ "configuration)");\n\t\t\t}\n\t\t}\n\n\t\t@Bean\n\t\tpublic SpringLiquibase liquibase(DataSourceProperties dataSourceProperties,\n\t\t\t\tObjectProvider<DataSource> dataSource,\n\t\t\t\t@LiquibaseDataSource ObjectProvider<DataSource> liquibaseDataSource) {\n\t\t\tSpringLiquibase liquibase = createSpringLiquibase(\n\t\t\t\t\tliquibaseDataSource.getIfAvailable(), dataSource.getIfUnique(),\n\t\t\t\t\tdataSourceProperties);\n\t\t\tliquibase.setChangeLog(this.properties.getChangeLog());\n\t\t\tliquibase.setContexts(this.properties.getContexts());\n\t\t\tliquibase.setDefaultSchema(this.properties.getDefaultSchema());\n\t\t\tliquibase.setLiquibaseSchema(this.properties.getLiquibaseSchema());\n\t\t\tliquibase.setLiquibaseTablespace(this.properties.getLiquibaseTablespace());\n\t\t\tliquibase.setDatabaseChangeLogTable(\n\t\t\t\t\tthis.properties.getDatabaseChangeLogTable());\n\t\t\tliquibase.setDatabaseChangeLogLockTable(\n\t\t\t\t\tthis.properties.getDatabaseChangeLogLockTable());\n\t\t\tliquibase.setDropFirst(this.properties.isDropFirst());\n\t\t\tliquibase.setShouldRun(this.properties.isEnabled());\n\t\t\tliquibase.setLabels(this.properties.getLabels());\n\t\t\tliquibase.setChangeLogParameters(this.properties.getParameters());\n\t\t\tliquibase.setRollbackFile(this.properties.getRollbackFile());\n\t\t\tliquibase.setTestRollbackOnUpdate(this.properties.isTestRollbackOnUpdate());\n\t\t\treturn liquibase;\n\t\t}\n\n\t\tprivate SpringLiquibase createSpringLiquibase(DataSource liquibaseDatasource,\n\t\t\t\tDataSource dataSource, DataSourceProperties dataSourceProperties) {\n\t\t\tDataSource liquibaseDataSource = getDataSource(liquibaseDatasource,\n\t\t\t\t\tdataSource);\n\t\t\tif (liquibaseDataSource != null) {\n\t\t\t\tSpringLiquibase liquibase = new SpringLiquibase();\n\t\t\t\tliquibase.setDataSource(liquibaseDataSource);\n\t\t\t\treturn liquibase;\n\t\t\t}\n\t\t\tSpringLiquibase liquibase = new DataSourceClosingSpringLiquibase();\n\t\t\tliquibase.setDataSource(createNewDataSource(dataSourceProperties));\n\t\t\treturn liquibase;\n\t\t}\n\n\t\tprivate DataSource getDataSource(DataSource liquibaseDataSource,\n\t\t\t\tDataSource dataSource) {\n\t\t\tif (liquibaseDataSource != null) {\n\t\t\t\treturn liquibaseDataSource;\n\t\t\t}\n\t\t\tif (this.properties.getUrl() == null && this.properties.getUser() == null) {\n\t\t\t\treturn dataSource;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\tprivate DataSource createNewDataSource(\n\t\t\t\tDataSourceProperties dataSourceProperties) {\n\t\t\tString url = getProperty(this.properties::getUrl,\n\t\t\t\t\tdataSourceProperties::getUrl);\n\t\t\tString user = getProperty(this.properties::getUser,\n\t\t\t\t\tdataSourceProperties::getUsername);\n\t\t\tString password = getProperty(this.properties::getPassword,\n\t\t\t\t\tdataSourceProperties::getPassword);\n\t\t\treturn DataSourceBuilder.create().url(url).username(user).password(password)\n\t\t\t\t\t.build();\n\t\t}\n\n\t\tprivate String getProperty(Supplier<String> property,\n\t\t\t\tSupplier<String> defaultValue) {\n\t\t\tString value = property.get();\n\t\t\treturn (value != null) ? value : defaultValue.get();\n\t\t}\n\n\t}\n\n\t/**\n\t * Additional configuration to ensure that {@link EntityManagerFactory} beans depend\n\t * on the liquibase bean.\n\t */\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnClass(LocalContainerEntityManagerFactoryBean.class)\n\t@ConditionalOnBean(AbstractEntityManagerFactoryBean.class)\n\tprotected static class LiquibaseJpaDependencyConfiguration\n\t\t\textends EntityManagerFactoryDependsOnPostProcessor {\n\n\t\tpublic LiquibaseJpaDependencyConfiguration() {\n\t\t\tsuper("liquibase");\n\t\t}\n\n\t}\n\n\t/**\n\t * Additional configuration to ensure that {@link JdbcOperations} beans depend on the\n\t * liquibase bean.\n\t */\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnClass(JdbcOperations.class)\n\t@ConditionalOnBean(JdbcOperations.class)\n\tprotected static class LiquibaseJdbcOperationsDependencyConfiguration\n\t\t\textends JdbcOperationsDependsOnPostProcessor {\n\n\t\tpublic LiquibaseJdbcOperationsDependencyConfiguration() {\n\t\t\tsuper("liquibase");\n\t\t}\n\n\t}\n\n\t/**\n\t * Additional configuration to ensure that {@link NamedParameterJdbcOperations} beans\n\t * depend on the liquibase bean.\n\t */\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnClass(NamedParameterJdbcOperations.class)\n\t@ConditionalOnBean(NamedParameterJdbcOperations.class)\n\tprotected static class LiquibaseNamedParameterJdbcOperationsDependencyConfiguration\n\t\t\textends NamedParameterJdbcOperationsDependsOnPostProcessor {\n\n\t\tpublic LiquibaseNamedParameterJdbcOperationsDependencyConfiguration() {\n\t\t\tsuper("liquibase");\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
