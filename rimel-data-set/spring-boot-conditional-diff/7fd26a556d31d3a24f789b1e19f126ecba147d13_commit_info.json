{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/TwitterAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/TwitterAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -19,21 +19,18 @@ package org.springframework.boot.autoconfigure.social;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n import org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\n import org.springframework.boot.bind.RelaxedPropertyResolver;\n-import org.springframework.context.EnvironmentAware;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Scope;\n import org.springframework.context.annotation.ScopedProxyMode;\n-import org.springframework.core.env.Environment;\n-import org.springframework.social.config.annotation.ConnectionFactoryConfigurer;\n import org.springframework.social.config.annotation.EnableSocial;\n-import org.springframework.social.config.annotation.SocialConfigurerAdapter;\n import org.springframework.social.connect.Connection;\n+import org.springframework.social.connect.ConnectionFactory;\n import org.springframework.social.connect.ConnectionRepository;\n import org.springframework.social.connect.web.GenericConnectionStatusView;\n import org.springframework.social.twitter.api.Twitter;\n@@ -44,7 +41,7 @@ import org.springframework.web.servlet.View;\n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for Spring Social connectivity with\n  * Twitter.\n- *\n+ * \n  * @author Craig Walls\n  * @since 1.1.0\n  */\n@@ -57,24 +54,18 @@ public class TwitterAutoConfiguration {\n \t@EnableSocial\n \t@ConditionalOnWebApplication\n \tprotected static class TwitterAutoConfigurationAdapter extends\n-\t\t\tSocialConfigurerAdapter implements EnvironmentAware {\n-\n-\t\tprivate String appId;\n-\t\tprivate String appSecret;\n+\t\t\tSocialAutoConfigurerAdapter {\n \n \t\t@Override\n-\t\tpublic void setEnvironment(Environment env) {\n-\t\t\tRelaxedPropertyResolver propertyResolver = new RelaxedPropertyResolver(env,\n-\t\t\t\t\t"spring.social.");\n-\t\t\tthis.appId = propertyResolver.getRequiredProperty("twitter.appId");\n-\t\t\tthis.appSecret = propertyResolver.getRequiredProperty("twitter.appSecret");\n+\t\tprotected String getPropertyPrefix() {\n+\t\t\treturn "spring.social.twitter.";\n \t\t}\n \n \t\t@Override\n-\t\tpublic void addConnectionFactories(ConnectionFactoryConfigurer cfConfig,\n-\t\t\t\tEnvironment env) {\n-\t\t\tcfConfig.addConnectionFactory(new TwitterConnectionFactory(this.appId,\n-\t\t\t\t\tthis.appSecret));\n+\t\tprotected ConnectionFactory<?> createConnectionFactory(\n+\t\t\t\tRelaxedPropertyResolver properties) {\n+\t\t\treturn new TwitterConnectionFactory(properties.getRequiredProperty("app-id"),\n+\t\t\t\t\tproperties.getRequiredProperty("app-secret"));\n \t\t}\n \n \t\t@Bean\n@@ -83,12 +74,16 @@ public class TwitterAutoConfiguration {\n \t\tpublic Twitter twitter(ConnectionRepository repository) {\n \t\t\tConnection<Twitter> connection = repository\n \t\t\t\t\t.findPrimaryConnection(Twitter.class);\n-\t\t\treturn connection != null ? connection.getApi() : new TwitterTemplate(\n-\t\t\t\t\tthis.appId, this.appSecret);\n+\t\t\tif (connection != null) {\n+\t\t\t\treturn connection.getApi();\n+\t\t\t}\n+\t\t\tString id = getProperties().getRequiredProperty("app-id");\n+\t\t\tString secret = getProperties().getRequiredProperty("app-secret");\n+\t\t\treturn new TwitterTemplate(id, secret);\n \t\t}\n \n \t\t@Bean(name = { "connect/twitterConnect", "connect/twitterConnected" })\n-\t\t@ConditionalOnExpression("${spring.social.auto_connection_views:false}")\n+\t\t@ConditionalOnProperty(prefix = "spring.social.", value = "auto-connection-views")\n \t\tpublic View twitterConnectView() {\n \t\t\treturn new GenericConnectionStatusView("twitter", "Twitter");\n \t\t}\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.social;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.boot.bind.RelaxedPropertyResolver;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.context.annotation.ScopedProxyMode;\nimport org.springframework.social.config.annotation.EnableSocial;\nimport org.springframework.social.connect.Connection;\nimport org.springframework.social.connect.ConnectionFactory;\nimport org.springframework.social.connect.ConnectionRepository;\nimport org.springframework.social.connect.web.GenericConnectionStatusView;\nimport org.springframework.social.twitter.api.Twitter;\nimport org.springframework.social.twitter.api.impl.TwitterTemplate;\nimport org.springframework.social.twitter.connect.TwitterConnectionFactory;\nimport org.springframework.web.servlet.View;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Social connectivity with\n * Twitter.\n * \n * @author Craig Walls\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass({ TwitterConnectionFactory.class })\n@AutoConfigureAfter(WebMvcAutoConfiguration.class)\npublic class TwitterAutoConfiguration {\n\n\t@Configuration\n\t@EnableSocial\n\t@ConditionalOnWebApplication\n\tprotected static class TwitterAutoConfigurationAdapter extends\n\t\t\tSocialAutoConfigurerAdapter {\n\n\t\t@Override\n\t\tprotected String getPropertyPrefix() {\n\t\t\treturn "spring.social.twitter.";\n\t\t}\n\n\t\t@Override\n\t\tprotected ConnectionFactory<?> createConnectionFactory(\n\t\t\t\tRelaxedPropertyResolver properties) {\n\t\t\treturn new TwitterConnectionFactory(properties.getRequiredProperty("app-id"),\n\t\t\t\t\tproperties.getRequiredProperty("app-secret"));\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(TwitterConnectionFactory.class)\n\t\t@Scope(value = "request", proxyMode = ScopedProxyMode.INTERFACES)\n\t\tpublic Twitter twitter(ConnectionRepository repository) {\n\t\t\tConnection<Twitter> connection = repository\n\t\t\t\t\t.findPrimaryConnection(Twitter.class);\n\t\t\tif (connection != null) {\n\t\t\t\treturn connection.getApi();\n\t\t\t}\n\t\t\tString id = getProperties().getRequiredProperty("app-id");\n\t\t\tString secret = getProperties().getRequiredProperty("app-secret");\n\t\t\treturn new TwitterTemplate(id, secret);\n\t\t}\n\n\t\t@Bean(name = { "connect/twitterConnect", "connect/twitterConnected" })\n\t\t@ConditionalOnProperty(prefix = "spring.social.", value = "auto-connection-views")\n\t\tpublic View twitterConnectView() {\n\t\t\treturn new GenericConnectionStatusView("twitter", "Twitter");\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.social;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.boot.bind.RelaxedPropertyResolver;\nimport org.springframework.context.EnvironmentAware;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.context.annotation.ScopedProxyMode;\nimport org.springframework.core.env.Environment;\nimport org.springframework.social.config.annotation.ConnectionFactoryConfigurer;\nimport org.springframework.social.config.annotation.EnableSocial;\nimport org.springframework.social.config.annotation.SocialConfigurerAdapter;\nimport org.springframework.social.connect.Connection;\nimport org.springframework.social.connect.ConnectionRepository;\nimport org.springframework.social.connect.web.GenericConnectionStatusView;\nimport org.springframework.social.twitter.api.Twitter;\nimport org.springframework.social.twitter.api.impl.TwitterTemplate;\nimport org.springframework.social.twitter.connect.TwitterConnectionFactory;\nimport org.springframework.web.servlet.View;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Social connectivity with\n * Twitter.\n *\n * @author Craig Walls\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass({ TwitterConnectionFactory.class })\n@AutoConfigureAfter(WebMvcAutoConfiguration.class)\npublic class TwitterAutoConfiguration {\n\n\t@Configuration\n\t@EnableSocial\n\t@ConditionalOnWebApplication\n\tprotected static class TwitterAutoConfigurationAdapter extends\n\t\t\tSocialConfigurerAdapter implements EnvironmentAware {\n\n\t\tprivate String appId;\n\t\tprivate String appSecret;\n\n\t\t@Override\n\t\tpublic void setEnvironment(Environment env) {\n\t\t\tRelaxedPropertyResolver propertyResolver = new RelaxedPropertyResolver(env,\n\t\t\t\t\t"spring.social.");\n\t\t\tthis.appId = propertyResolver.getRequiredProperty("twitter.appId");\n\t\t\tthis.appSecret = propertyResolver.getRequiredProperty("twitter.appSecret");\n\t\t}\n\n\t\t@Override\n\t\tpublic void addConnectionFactories(ConnectionFactoryConfigurer cfConfig,\n\t\t\t\tEnvironment env) {\n\t\t\tcfConfig.addConnectionFactory(new TwitterConnectionFactory(this.appId,\n\t\t\t\t\tthis.appSecret));\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(TwitterConnectionFactory.class)\n\t\t@Scope(value = "request", proxyMode = ScopedProxyMode.INTERFACES)\n\t\tpublic Twitter twitter(ConnectionRepository repository) {\n\t\t\tConnection<Twitter> connection = repository\n\t\t\t\t\t.findPrimaryConnection(Twitter.class);\n\t\t\treturn connection != null ? connection.getApi() : new TwitterTemplate(\n\t\t\t\t\tthis.appId, this.appSecret);\n\t\t}\n\n\t\t@Bean(name = { "connect/twitterConnect", "connect/twitterConnected" })\n\t\t@ConditionalOnExpression("${spring.social.auto_connection_views:false}")\n\t\tpublic View twitterConnectView() {\n\t\t\treturn new GenericConnectionStatusView("twitter", "Twitter");\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
