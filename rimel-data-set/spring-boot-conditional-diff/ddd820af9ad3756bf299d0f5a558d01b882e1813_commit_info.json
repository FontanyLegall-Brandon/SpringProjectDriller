{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/integration/IntegrationMetricsAutoConfiguration.java'), '_new_path': None, 'change_type': <ModificationType.DELETE: 4>, 'diff': '@@ -1,53 +0,0 @@\n-/*\n- * Copyright 2012-2018 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the "License");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an "AS IS" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.boot.actuate.autoconfigure.metrics.integration;\n-\n-import io.micrometer.core.instrument.MeterRegistry;\n-\n-import org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration;\n-import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n-import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n-import org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.integration.config.EnableIntegration;\n-import org.springframework.integration.support.management.micrometer.MicrometerMetricsFactory;\n-\n-/**\n- * {@link EnableAutoConfiguration Auto-configuration} for Spring Integration Micrometer\n- * support.\n- *\n- * @author Phillip Webb\n- * @author Gary Russell\n- * @since 2.0.0\n- */\n-@Configuration\n-@ConditionalOnClass({ EnableIntegration.class, MeterRegistry.class })\n-@AutoConfigureAfter({ IntegrationAutoConfiguration.class,\n-\t\tSimpleMetricsExportAutoConfiguration.class })\n-@ConditionalOnBean(MeterRegistry.class)\n-public class IntegrationMetricsAutoConfiguration {\n-\n-\t@Bean\n-\tpublic MicrometerMetricsFactory integrationMicrometerMetricsFactory(\n-\t\t\tMeterRegistry meterRegistry) {\n-\t\treturn new MicrometerMetricsFactory(meterRegistry);\n-\t}\n-\n-}\n', 'source_code': None, 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics.integration;\n\nimport io.micrometer.core.instrument.MeterRegistry;\n\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.integration.config.EnableIntegration;\nimport org.springframework.integration.support.management.micrometer.MicrometerMetricsFactory;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Integration Micrometer\n * support.\n *\n * @author Phillip Webb\n * @author Gary Russell\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass({ EnableIntegration.class, MeterRegistry.class })\n@AutoConfigureAfter({ IntegrationAutoConfiguration.class,\n\t\tSimpleMetricsExportAutoConfiguration.class })\n@ConditionalOnBean(MeterRegistry.class)\npublic class IntegrationMetricsAutoConfiguration {\n\n\t@Bean\n\tpublic MicrometerMetricsFactory integrationMicrometerMetricsFactory(\n\t\t\tMeterRegistry meterRegistry) {\n\t\treturn new MicrometerMetricsFactory(meterRegistry);\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
