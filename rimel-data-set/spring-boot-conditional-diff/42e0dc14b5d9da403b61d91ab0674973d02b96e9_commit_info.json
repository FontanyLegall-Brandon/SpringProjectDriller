{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/artemis/ArtemisEmbeddedServerConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/artemis/ArtemisEmbeddedServerConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -19,13 +19,16 @@ package org.springframework.boot.autoconfigure.jms.artemis;\n import java.util.List;\n import java.util.stream.Collectors;\n \n+import org.apache.activemq.artemis.api.core.RoutingType;\n+import org.apache.activemq.artemis.core.config.CoreAddressConfiguration;\n+import org.apache.activemq.artemis.core.config.CoreQueueConfiguration;\n+import org.apache.activemq.artemis.core.server.embedded.EmbeddedActiveMQ;\n import org.apache.activemq.artemis.jms.server.config.JMSConfiguration;\n import org.apache.activemq.artemis.jms.server.config.JMSQueueConfiguration;\n import org.apache.activemq.artemis.jms.server.config.TopicConfiguration;\n import org.apache.activemq.artemis.jms.server.config.impl.JMSConfigurationImpl;\n import org.apache.activemq.artemis.jms.server.config.impl.JMSQueueConfigurationImpl;\n import org.apache.activemq.artemis.jms.server.config.impl.TopicConfigurationImpl;\n-import org.apache.activemq.artemis.jms.server.embedded.EmbeddedJMS;\n \n import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n@@ -42,7 +45,7 @@ import org.springframework.context.annotation.Configuration;\n  * @author Stephane Nicoll\n  */\n @Configuration(proxyBeanMethods = false)\n-@ConditionalOnClass(EmbeddedJMS.class)\n+@ConditionalOnClass(EmbeddedActiveMQ.class)\n @ConditionalOnProperty(prefix = "spring.artemis.embedded", name = "enabled", havingValue = "true",\n \t\tmatchIfMissing = true)\n class ArtemisEmbeddedServerConfiguration {\n@@ -61,15 +64,25 @@ class ArtemisEmbeddedServerConfiguration {\n \n \t@Bean(initMethod = "start", destroyMethod = "stop")\n \t@ConditionalOnMissingBean\n-\tEmbeddedJMS artemisServer(org.apache.activemq.artemis.core.config.Configuration configuration,\n-\t\t\tJMSConfiguration jmsConfiguration,\n-\t\t\tObjectProvider<ArtemisConfigurationCustomizer> configurationCustomizers) {\n-\t\tEmbeddedJMS server = new EmbeddedJMS();\n+\tEmbeddedActiveMQ embeddedActiveMq(org.apache.activemq.artemis.core.config.Configuration configuration,\n+\t\t\tJMSConfiguration jmsConfiguration, ObjectProvider<ArtemisConfigurationCustomizer> configurationCustomizers)\n+\t\t\tthrows Exception {\n+\t\tfor (JMSQueueConfiguration queueConfiguration : jmsConfiguration.getQueueConfigurations()) {\n+\t\t\tString queueName = queueConfiguration.getName();\n+\t\t\tconfiguration.addAddressConfiguration(\n+\t\t\t\t\tnew CoreAddressConfiguration().setName(queueName).addRoutingType(RoutingType.ANYCAST)\n+\t\t\t\t\t\t\t.addQueueConfiguration(new CoreQueueConfiguration().setAddress(queueName).setName(queueName)\n+\t\t\t\t\t\t\t\t\t.setFilterString(queueConfiguration.getSelector())\n+\t\t\t\t\t\t\t\t\t.setDurable(queueConfiguration.isDurable()).setRoutingType(RoutingType.ANYCAST)));\n+\t\t}\n+\t\tfor (TopicConfiguration topicConfiguration : jmsConfiguration.getTopicConfigurations()) {\n+\t\t\tconfiguration.addAddressConfiguration(new CoreAddressConfiguration().setName(topicConfiguration.getName())\n+\t\t\t\t\t.addRoutingType(RoutingType.MULTICAST));\n+\t\t}\n \t\tconfigurationCustomizers.orderedStream().forEach((customizer) -> customizer.customize(configuration));\n-\t\tserver.setConfiguration(configuration);\n-\t\tserver.setJmsConfiguration(jmsConfiguration);\n-\t\tserver.setRegistry(new ArtemisNoOpBindingRegistry());\n-\t\treturn server;\n+\t\tEmbeddedActiveMQ embeddedActiveMq = new EmbeddedActiveMQ();\n+\t\tembeddedActiveMq.setConfiguration(configuration);\n+\t\treturn embeddedActiveMq;\n \t}\n \n \t@Bean\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jms.artemis;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nimport org.apache.activemq.artemis.api.core.RoutingType;\nimport org.apache.activemq.artemis.core.config.CoreAddressConfiguration;\nimport org.apache.activemq.artemis.core.config.CoreQueueConfiguration;\nimport org.apache.activemq.artemis.core.server.embedded.EmbeddedActiveMQ;\nimport org.apache.activemq.artemis.jms.server.config.JMSConfiguration;\nimport org.apache.activemq.artemis.jms.server.config.JMSQueueConfiguration;\nimport org.apache.activemq.artemis.jms.server.config.TopicConfiguration;\nimport org.apache.activemq.artemis.jms.server.config.impl.JMSConfigurationImpl;\nimport org.apache.activemq.artemis.jms.server.config.impl.JMSQueueConfigurationImpl;\nimport org.apache.activemq.artemis.jms.server.config.impl.TopicConfigurationImpl;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Configuration used to create the embedded Artemis server.\n *\n * @author Eddú Meléndez\n * @author Phillip Webb\n * @author Stephane Nicoll\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass(EmbeddedActiveMQ.class)\n@ConditionalOnProperty(prefix = "spring.artemis.embedded", name = "enabled", havingValue = "true",\n\t\tmatchIfMissing = true)\nclass ArtemisEmbeddedServerConfiguration {\n\n\tprivate final ArtemisProperties properties;\n\n\tArtemisEmbeddedServerConfiguration(ArtemisProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\torg.apache.activemq.artemis.core.config.Configuration artemisConfiguration() {\n\t\treturn new ArtemisEmbeddedConfigurationFactory(this.properties).createConfiguration();\n\t}\n\n\t@Bean(initMethod = "start", destroyMethod = "stop")\n\t@ConditionalOnMissingBean\n\tEmbeddedActiveMQ embeddedActiveMq(org.apache.activemq.artemis.core.config.Configuration configuration,\n\t\t\tJMSConfiguration jmsConfiguration, ObjectProvider<ArtemisConfigurationCustomizer> configurationCustomizers)\n\t\t\tthrows Exception {\n\t\tfor (JMSQueueConfiguration queueConfiguration : jmsConfiguration.getQueueConfigurations()) {\n\t\t\tString queueName = queueConfiguration.getName();\n\t\t\tconfiguration.addAddressConfiguration(\n\t\t\t\t\tnew CoreAddressConfiguration().setName(queueName).addRoutingType(RoutingType.ANYCAST)\n\t\t\t\t\t\t\t.addQueueConfiguration(new CoreQueueConfiguration().setAddress(queueName).setName(queueName)\n\t\t\t\t\t\t\t\t\t.setFilterString(queueConfiguration.getSelector())\n\t\t\t\t\t\t\t\t\t.setDurable(queueConfiguration.isDurable()).setRoutingType(RoutingType.ANYCAST)));\n\t\t}\n\t\tfor (TopicConfiguration topicConfiguration : jmsConfiguration.getTopicConfigurations()) {\n\t\t\tconfiguration.addAddressConfiguration(new CoreAddressConfiguration().setName(topicConfiguration.getName())\n\t\t\t\t\t.addRoutingType(RoutingType.MULTICAST));\n\t\t}\n\t\tconfigurationCustomizers.orderedStream().forEach((customizer) -> customizer.customize(configuration));\n\t\tEmbeddedActiveMQ embeddedActiveMq = new EmbeddedActiveMQ();\n\t\tembeddedActiveMq.setConfiguration(configuration);\n\t\treturn embeddedActiveMq;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tJMSConfiguration artemisJmsConfiguration(ObjectProvider<JMSQueueConfiguration> queuesConfiguration,\n\t\t\tObjectProvider<TopicConfiguration> topicsConfiguration) {\n\t\tJMSConfiguration configuration = new JMSConfigurationImpl();\n\t\taddAll(configuration.getQueueConfigurations(), queuesConfiguration);\n\t\taddAll(configuration.getTopicConfigurations(), topicsConfiguration);\n\t\taddQueues(configuration, this.properties.getEmbedded().getQueues());\n\t\taddTopics(configuration, this.properties.getEmbedded().getTopics());\n\t\treturn configuration;\n\t}\n\n\tprivate <T> void addAll(List<T> list, ObjectProvider<T> items) {\n\t\tif (items != null) {\n\t\t\tlist.addAll(items.orderedStream().collect(Collectors.toList()));\n\t\t}\n\t}\n\n\tprivate void addQueues(JMSConfiguration configuration, String[] queues) {\n\t\tboolean persistent = this.properties.getEmbedded().isPersistent();\n\t\tfor (String queue : queues) {\n\t\t\tJMSQueueConfigurationImpl jmsQueueConfiguration = new JMSQueueConfigurationImpl();\n\t\t\tjmsQueueConfiguration.setName(queue);\n\t\t\tjmsQueueConfiguration.setDurable(persistent);\n\t\t\tjmsQueueConfiguration.setBindings("/queue/" + queue);\n\t\t\tconfiguration.getQueueConfigurations().add(jmsQueueConfiguration);\n\t\t}\n\t}\n\n\tprivate void addTopics(JMSConfiguration configuration, String[] topics) {\n\t\tfor (String topic : topics) {\n\t\t\tTopicConfigurationImpl topicConfiguration = new TopicConfigurationImpl();\n\t\t\ttopicConfiguration.setName(topic);\n\t\t\ttopicConfiguration.setBindings("/topic/" + topic);\n\t\t\tconfiguration.getTopicConfigurations().add(topicConfiguration);\n\t\t}\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jms.artemis;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nimport org.apache.activemq.artemis.jms.server.config.JMSConfiguration;\nimport org.apache.activemq.artemis.jms.server.config.JMSQueueConfiguration;\nimport org.apache.activemq.artemis.jms.server.config.TopicConfiguration;\nimport org.apache.activemq.artemis.jms.server.config.impl.JMSConfigurationImpl;\nimport org.apache.activemq.artemis.jms.server.config.impl.JMSQueueConfigurationImpl;\nimport org.apache.activemq.artemis.jms.server.config.impl.TopicConfigurationImpl;\nimport org.apache.activemq.artemis.jms.server.embedded.EmbeddedJMS;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Configuration used to create the embedded Artemis server.\n *\n * @author Eddú Meléndez\n * @author Phillip Webb\n * @author Stephane Nicoll\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass(EmbeddedJMS.class)\n@ConditionalOnProperty(prefix = "spring.artemis.embedded", name = "enabled", havingValue = "true",\n\t\tmatchIfMissing = true)\nclass ArtemisEmbeddedServerConfiguration {\n\n\tprivate final ArtemisProperties properties;\n\n\tArtemisEmbeddedServerConfiguration(ArtemisProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\torg.apache.activemq.artemis.core.config.Configuration artemisConfiguration() {\n\t\treturn new ArtemisEmbeddedConfigurationFactory(this.properties).createConfiguration();\n\t}\n\n\t@Bean(initMethod = "start", destroyMethod = "stop")\n\t@ConditionalOnMissingBean\n\tEmbeddedJMS artemisServer(org.apache.activemq.artemis.core.config.Configuration configuration,\n\t\t\tJMSConfiguration jmsConfiguration,\n\t\t\tObjectProvider<ArtemisConfigurationCustomizer> configurationCustomizers) {\n\t\tEmbeddedJMS server = new EmbeddedJMS();\n\t\tconfigurationCustomizers.orderedStream().forEach((customizer) -> customizer.customize(configuration));\n\t\tserver.setConfiguration(configuration);\n\t\tserver.setJmsConfiguration(jmsConfiguration);\n\t\tserver.setRegistry(new ArtemisNoOpBindingRegistry());\n\t\treturn server;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tJMSConfiguration artemisJmsConfiguration(ObjectProvider<JMSQueueConfiguration> queuesConfiguration,\n\t\t\tObjectProvider<TopicConfiguration> topicsConfiguration) {\n\t\tJMSConfiguration configuration = new JMSConfigurationImpl();\n\t\taddAll(configuration.getQueueConfigurations(), queuesConfiguration);\n\t\taddAll(configuration.getTopicConfigurations(), topicsConfiguration);\n\t\taddQueues(configuration, this.properties.getEmbedded().getQueues());\n\t\taddTopics(configuration, this.properties.getEmbedded().getTopics());\n\t\treturn configuration;\n\t}\n\n\tprivate <T> void addAll(List<T> list, ObjectProvider<T> items) {\n\t\tif (items != null) {\n\t\t\tlist.addAll(items.orderedStream().collect(Collectors.toList()));\n\t\t}\n\t}\n\n\tprivate void addQueues(JMSConfiguration configuration, String[] queues) {\n\t\tboolean persistent = this.properties.getEmbedded().isPersistent();\n\t\tfor (String queue : queues) {\n\t\t\tJMSQueueConfigurationImpl jmsQueueConfiguration = new JMSQueueConfigurationImpl();\n\t\t\tjmsQueueConfiguration.setName(queue);\n\t\t\tjmsQueueConfiguration.setDurable(persistent);\n\t\t\tjmsQueueConfiguration.setBindings("/queue/" + queue);\n\t\t\tconfiguration.getQueueConfigurations().add(jmsQueueConfiguration);\n\t\t}\n\t}\n\n\tprivate void addTopics(JMSConfiguration configuration, String[] topics) {\n\t\tfor (String topic : topics) {\n\t\t\tTopicConfigurationImpl topicConfiguration = new TopicConfigurationImpl();\n\t\t\ttopicConfiguration.setName(topic);\n\t\t\ttopicConfiguration.setBindings("/topic/" + topic);\n\t\t\tconfiguration.getTopicConfigurations().add(topicConfiguration);\n\t\t}\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
