{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -26,15 +26,21 @@ import javax.servlet.ServletContext;\n import javax.servlet.ServletException;\n import javax.servlet.ServletRegistration;\n import javax.ws.rs.ApplicationPath;\n+import javax.ws.rs.ext.ContextResolver;\n+import javax.ws.rs.ext.Provider;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.glassfish.jersey.CommonProperties;\n+import org.glassfish.jersey.jackson.JacksonFeature;\n import org.glassfish.jersey.server.ResourceConfig;\n import org.glassfish.jersey.servlet.ServletContainer;\n import org.glassfish.jersey.servlet.ServletProperties;\n \n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n import org.springframework.boot.autoconfigure.AutoConfigureOrder;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n@@ -43,6 +49,7 @@ import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;\n import org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration;\n import org.springframework.boot.context.embedded.FilterRegistrationBean;\n import org.springframework.boot.context.embedded.RegistrationBean;\n@@ -73,6 +80,7 @@ import org.springframework.web.filter.RequestContextFilter;\n @ConditionalOnWebApplication\n @AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)\n @AutoConfigureBefore(DispatcherServletAutoConfiguration.class)\n+@AutoConfigureAfter(JacksonAutoConfiguration.class)\n @EnableConfigurationProperties(JerseyProperties.class)\n public class JerseyAutoConfiguration implements ServletContextAware {\n \n@@ -84,10 +92,24 @@ public class JerseyAutoConfiguration implements ServletContextAware {\n \t@Autowired\n \tprivate ResourceConfig config;\n \n+\t@Autowired(required = false)\n+\tprivate ResourceConfigCustomizer customizer;\n+\n \tprivate String path;\n \n \t@PostConstruct\n \tpublic void path() {\n+\t\tresolveApplicationPath();\n+\t\tapplyCustomConfig();\n+\t}\n+\n+\tprivate void applyCustomConfig() {\n+\t\tif (this.customizer != null) {\n+\t\t\tthis.customizer.customize(this.config);\n+\t\t}\n+\t}\n+\n+\tprivate void resolveApplicationPath() {\n \t\tif (StringUtils.hasLength(this.jersey.getApplicationPath())) {\n \t\t\tthis.path = parseApplicationPath(this.jersey.getApplicationPath());\n \t\t}\n@@ -193,6 +215,36 @@ public class JerseyAutoConfiguration implements ServletContextAware {\n \t\t\t// will try and register a ContextLoaderListener which we don\'t need\n \t\t\tservletContext.setInitParameter("contextConfigLocation", "<NONE>");\n \t\t}\n+\t}\n+\n+\t@ConditionalOnClass(JacksonFeature.class)\n+\t@Configuration\n+\tstatic class ObjectMapperResourceConfigCustomizer {\n+\n+\t\t@Bean\n+\t\tpublic ResourceConfigCustomizer resourceConfigCustomizer() {\n+\t\t\treturn new ResourceConfigCustomizer() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic void customize(ResourceConfig config) {\n+\t\t\t\t\tconfig.register(JacksonFeature.class);\n+\t\t\t\t\tconfig.register(ObjectMapperContextResolver.class);\n+\t\t\t\t}\n+\t\t\t};\n+\t\t}\n+\n+\t\t@Provider\n+\t\tstatic class ObjectMapperContextResolver\n+\t\t\t\timplements ContextResolver<ObjectMapper> {\n+\n+\t\t\t@Autowired\n+\t\t\tprivate ObjectMapper objectMapper;\n+\n+\t\t\t@Override\n+\t\t\tpublic ObjectMapper getContext(Class<?> type) {\n+\t\t\t\treturn this.objectMapper;\n+\t\t\t}\n+\n+\t\t}\n \n \t}\n \n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jersey;\n\nimport java.util.Arrays;\nimport java.util.EnumSet;\nimport java.util.Map.Entry;\n\nimport javax.annotation.PostConstruct;\nimport javax.servlet.DispatcherType;\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRegistration;\nimport javax.ws.rs.ApplicationPath;\nimport javax.ws.rs.ext.ContextResolver;\nimport javax.ws.rs.ext.Provider;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.glassfish.jersey.CommonProperties;\nimport org.glassfish.jersey.jackson.JacksonFeature;\nimport org.glassfish.jersey.server.ResourceConfig;\nimport org.glassfish.jersey.servlet.ServletContainer;\nimport org.glassfish.jersey.servlet.ServletProperties;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.AutoConfigureOrder;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration;\nimport org.springframework.boot.context.embedded.FilterRegistrationBean;\nimport org.springframework.boot.context.embedded.RegistrationBean;\nimport org.springframework.boot.context.embedded.ServletRegistrationBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.AnnotationUtils;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.WebApplicationInitializer;\nimport org.springframework.web.context.ServletContextAware;\nimport org.springframework.web.filter.RequestContextFilter;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Jersey.\n *\n * @author Dave Syer\n * @author Andy Wilkinson\n * @author Eddú Meléndez\n */\n@Configuration\n@ConditionalOnClass(name = { "org.glassfish.jersey.server.spring.SpringComponentProvider",\n\t\t"javax.servlet.ServletRegistration" })\n@ConditionalOnBean(type = "org.glassfish.jersey.server.ResourceConfig")\n@ConditionalOnWebApplication\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)\n@AutoConfigureBefore(DispatcherServletAutoConfiguration.class)\n@AutoConfigureAfter(JacksonAutoConfiguration.class)\n@EnableConfigurationProperties(JerseyProperties.class)\npublic class JerseyAutoConfiguration implements ServletContextAware {\n\n\tprivate static final Log logger = LogFactory.getLog(JerseyAutoConfiguration.class);\n\n\t@Autowired\n\tprivate JerseyProperties jersey;\n\n\t@Autowired\n\tprivate ResourceConfig config;\n\n\t@Autowired(required = false)\n\tprivate ResourceConfigCustomizer customizer;\n\n\tprivate String path;\n\n\t@PostConstruct\n\tpublic void path() {\n\t\tresolveApplicationPath();\n\t\tapplyCustomConfig();\n\t}\n\n\tprivate void applyCustomConfig() {\n\t\tif (this.customizer != null) {\n\t\t\tthis.customizer.customize(this.config);\n\t\t}\n\t}\n\n\tprivate void resolveApplicationPath() {\n\t\tif (StringUtils.hasLength(this.jersey.getApplicationPath())) {\n\t\t\tthis.path = parseApplicationPath(this.jersey.getApplicationPath());\n\t\t}\n\t\telse {\n\t\t\tthis.path = findApplicationPath(AnnotationUtils\n\t\t\t\t\t.findAnnotation(this.config.getClass(), ApplicationPath.class));\n\t\t}\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic FilterRegistrationBean requestContextFilter() {\n\t\tFilterRegistrationBean registration = new FilterRegistrationBean();\n\t\tregistration.setFilter(new RequestContextFilter());\n\t\tregistration.setOrder(this.jersey.getFilter().getOrder() - 1);\n\t\tregistration.setName("requestContextFilter");\n\t\treturn registration;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "jerseyFilterRegistration")\n\t@ConditionalOnProperty(prefix = "spring.jersey", name = "type", havingValue = "filter")\n\tpublic FilterRegistrationBean jerseyFilterRegistration() {\n\t\tFilterRegistrationBean registration = new FilterRegistrationBean();\n\t\tregistration.setFilter(new ServletContainer(this.config));\n\t\tregistration.setUrlPatterns(Arrays.asList(this.path));\n\t\tregistration.setOrder(this.jersey.getFilter().getOrder());\n\t\tregistration.addInitParameter(ServletProperties.FILTER_CONTEXT_PATH,\n\t\t\t\tstripPattern(this.path));\n\t\taddInitParameters(registration);\n\t\tregistration.setName("jerseyFilter");\n\t\tregistration.setDispatcherTypes(EnumSet.allOf(DispatcherType.class));\n\t\treturn registration;\n\t}\n\n\tprivate String stripPattern(String path) {\n\t\tif (path.endsWith("/*")) {\n\t\t\tpath = path.substring(0, path.lastIndexOf("/*"));\n\t\t}\n\t\treturn path;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "jerseyServletRegistration")\n\t@ConditionalOnProperty(prefix = "spring.jersey", name = "type", havingValue = "servlet", matchIfMissing = true)\n\tpublic ServletRegistrationBean jerseyServletRegistration() {\n\t\tServletRegistrationBean registration = new ServletRegistrationBean(\n\t\t\t\tnew ServletContainer(this.config), this.path);\n\t\taddInitParameters(registration);\n\t\tregistration.setName(getServletRegistrationName());\n\t\treturn registration;\n\t}\n\n\tprivate String getServletRegistrationName() {\n\t\treturn ClassUtils.getUserClass(this.config.getClass()).getName();\n\t}\n\n\tprivate void addInitParameters(RegistrationBean registration) {\n\t\tfor (Entry<String, String> entry : this.jersey.getInit().entrySet()) {\n\t\t\tregistration.addInitParameter(entry.getKey(), entry.getValue());\n\t\t}\n\t}\n\n\tprivate static String findApplicationPath(ApplicationPath annotation) {\n\t\t// Jersey doesn\'t like to be the default servlet, so map to /* as a fallback\n\t\tif (annotation == null) {\n\t\t\treturn "/*";\n\t\t}\n\t\treturn parseApplicationPath(annotation.value());\n\t}\n\n\tprivate static String parseApplicationPath(String applicationPath) {\n\t\tif (!applicationPath.startsWith("/")) {\n\t\t\tapplicationPath = "/" + applicationPath;\n\t\t}\n\t\treturn applicationPath.equals("/") ? "/*" : applicationPath + "/*";\n\t}\n\n\t@Override\n\tpublic void setServletContext(ServletContext servletContext) {\n\t\tString servletRegistrationName = getServletRegistrationName();\n\t\tServletRegistration registration = servletContext\n\t\t\t\t.getServletRegistration(servletRegistrationName);\n\t\tif (registration != null) {\n\t\t\tif (logger.isInfoEnabled()) {\n\t\t\t\tlogger.info("Configuring existing registration for Jersey servlet \'"\n\t\t\t\t\t\t+ servletRegistrationName + "\'");\n\t\t\t}\n\t\t\tregistration.setInitParameters(this.jersey.getInit());\n\t\t\tregistration.setInitParameter(\n\t\t\t\t\tCommonProperties.METAINF_SERVICES_LOOKUP_DISABLE,\n\t\t\t\t\tBoolean.TRUE.toString());\n\t\t}\n\t}\n\n\t@Order(Ordered.HIGHEST_PRECEDENCE)\n\tpublic static final class JerseyWebApplicationInitializer\n\t\t\timplements WebApplicationInitializer {\n\n\t\t@Override\n\t\tpublic void onStartup(ServletContext servletContext) throws ServletException {\n\t\t\t// We need to switch *off* the Jersey WebApplicationInitializer because it\n\t\t\t// will try and register a ContextLoaderListener which we don\'t need\n\t\t\tservletContext.setInitParameter("contextConfigLocation", "<NONE>");\n\t\t}\n\t}\n\n\t@ConditionalOnClass(JacksonFeature.class)\n\t@Configuration\n\tstatic class ObjectMapperResourceConfigCustomizer {\n\n\t\t@Bean\n\t\tpublic ResourceConfigCustomizer resourceConfigCustomizer() {\n\t\t\treturn new ResourceConfigCustomizer() {\n\t\t\t\t@Override\n\t\t\t\tpublic void customize(ResourceConfig config) {\n\t\t\t\t\tconfig.register(JacksonFeature.class);\n\t\t\t\t\tconfig.register(ObjectMapperContextResolver.class);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\t@Provider\n\t\tstatic class ObjectMapperContextResolver\n\t\t\t\timplements ContextResolver<ObjectMapper> {\n\n\t\t\t@Autowired\n\t\t\tprivate ObjectMapper objectMapper;\n\n\t\t\t@Override\n\t\t\tpublic ObjectMapper getContext(Class<?> type) {\n\t\t\t\treturn this.objectMapper;\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jersey;\n\nimport java.util.Arrays;\nimport java.util.EnumSet;\nimport java.util.Map.Entry;\n\nimport javax.annotation.PostConstruct;\nimport javax.servlet.DispatcherType;\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRegistration;\nimport javax.ws.rs.ApplicationPath;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.glassfish.jersey.CommonProperties;\nimport org.glassfish.jersey.server.ResourceConfig;\nimport org.glassfish.jersey.servlet.ServletContainer;\nimport org.glassfish.jersey.servlet.ServletProperties;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.AutoConfigureOrder;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration;\nimport org.springframework.boot.context.embedded.FilterRegistrationBean;\nimport org.springframework.boot.context.embedded.RegistrationBean;\nimport org.springframework.boot.context.embedded.ServletRegistrationBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.AnnotationUtils;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.WebApplicationInitializer;\nimport org.springframework.web.context.ServletContextAware;\nimport org.springframework.web.filter.RequestContextFilter;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Jersey.\n *\n * @author Dave Syer\n * @author Andy Wilkinson\n * @author Eddú Meléndez\n */\n@Configuration\n@ConditionalOnClass(name = { "org.glassfish.jersey.server.spring.SpringComponentProvider",\n\t\t"javax.servlet.ServletRegistration" })\n@ConditionalOnBean(type = "org.glassfish.jersey.server.ResourceConfig")\n@ConditionalOnWebApplication\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)\n@AutoConfigureBefore(DispatcherServletAutoConfiguration.class)\n@EnableConfigurationProperties(JerseyProperties.class)\npublic class JerseyAutoConfiguration implements ServletContextAware {\n\n\tprivate static final Log logger = LogFactory.getLog(JerseyAutoConfiguration.class);\n\n\t@Autowired\n\tprivate JerseyProperties jersey;\n\n\t@Autowired\n\tprivate ResourceConfig config;\n\n\tprivate String path;\n\n\t@PostConstruct\n\tpublic void path() {\n\t\tif (StringUtils.hasLength(this.jersey.getApplicationPath())) {\n\t\t\tthis.path = parseApplicationPath(this.jersey.getApplicationPath());\n\t\t}\n\t\telse {\n\t\t\tthis.path = findApplicationPath(AnnotationUtils\n\t\t\t\t\t.findAnnotation(this.config.getClass(), ApplicationPath.class));\n\t\t}\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic FilterRegistrationBean requestContextFilter() {\n\t\tFilterRegistrationBean registration = new FilterRegistrationBean();\n\t\tregistration.setFilter(new RequestContextFilter());\n\t\tregistration.setOrder(this.jersey.getFilter().getOrder() - 1);\n\t\tregistration.setName("requestContextFilter");\n\t\treturn registration;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "jerseyFilterRegistration")\n\t@ConditionalOnProperty(prefix = "spring.jersey", name = "type", havingValue = "filter")\n\tpublic FilterRegistrationBean jerseyFilterRegistration() {\n\t\tFilterRegistrationBean registration = new FilterRegistrationBean();\n\t\tregistration.setFilter(new ServletContainer(this.config));\n\t\tregistration.setUrlPatterns(Arrays.asList(this.path));\n\t\tregistration.setOrder(this.jersey.getFilter().getOrder());\n\t\tregistration.addInitParameter(ServletProperties.FILTER_CONTEXT_PATH,\n\t\t\t\tstripPattern(this.path));\n\t\taddInitParameters(registration);\n\t\tregistration.setName("jerseyFilter");\n\t\tregistration.setDispatcherTypes(EnumSet.allOf(DispatcherType.class));\n\t\treturn registration;\n\t}\n\n\tprivate String stripPattern(String path) {\n\t\tif (path.endsWith("/*")) {\n\t\t\tpath = path.substring(0, path.lastIndexOf("/*"));\n\t\t}\n\t\treturn path;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "jerseyServletRegistration")\n\t@ConditionalOnProperty(prefix = "spring.jersey", name = "type", havingValue = "servlet", matchIfMissing = true)\n\tpublic ServletRegistrationBean jerseyServletRegistration() {\n\t\tServletRegistrationBean registration = new ServletRegistrationBean(\n\t\t\t\tnew ServletContainer(this.config), this.path);\n\t\taddInitParameters(registration);\n\t\tregistration.setName(getServletRegistrationName());\n\t\treturn registration;\n\t}\n\n\tprivate String getServletRegistrationName() {\n\t\treturn ClassUtils.getUserClass(this.config.getClass()).getName();\n\t}\n\n\tprivate void addInitParameters(RegistrationBean registration) {\n\t\tfor (Entry<String, String> entry : this.jersey.getInit().entrySet()) {\n\t\t\tregistration.addInitParameter(entry.getKey(), entry.getValue());\n\t\t}\n\t}\n\n\tprivate static String findApplicationPath(ApplicationPath annotation) {\n\t\t// Jersey doesn\'t like to be the default servlet, so map to /* as a fallback\n\t\tif (annotation == null) {\n\t\t\treturn "/*";\n\t\t}\n\t\treturn parseApplicationPath(annotation.value());\n\t}\n\n\tprivate static String parseApplicationPath(String applicationPath) {\n\t\tif (!applicationPath.startsWith("/")) {\n\t\t\tapplicationPath = "/" + applicationPath;\n\t\t}\n\t\treturn applicationPath.equals("/") ? "/*" : applicationPath + "/*";\n\t}\n\n\t@Override\n\tpublic void setServletContext(ServletContext servletContext) {\n\t\tString servletRegistrationName = getServletRegistrationName();\n\t\tServletRegistration registration = servletContext\n\t\t\t\t.getServletRegistration(servletRegistrationName);\n\t\tif (registration != null) {\n\t\t\tif (logger.isInfoEnabled()) {\n\t\t\t\tlogger.info("Configuring existing registration for Jersey servlet \'"\n\t\t\t\t\t\t+ servletRegistrationName + "\'");\n\t\t\t}\n\t\t\tregistration.setInitParameters(this.jersey.getInit());\n\t\t\tregistration.setInitParameter(\n\t\t\t\t\tCommonProperties.METAINF_SERVICES_LOOKUP_DISABLE,\n\t\t\t\t\tBoolean.TRUE.toString());\n\t\t}\n\t}\n\n\t@Order(Ordered.HIGHEST_PRECEDENCE)\n\tpublic static final class JerseyWebApplicationInitializer\n\t\t\timplements WebApplicationInitializer {\n\n\t\t@Override\n\t\tpublic void onStartup(ServletContext servletContext) throws ServletException {\n\t\t\t// We need to switch *off* the Jersey WebApplicationInitializer because it\n\t\t\t// will try and register a ContextLoaderListener which we don\'t need\n\t\t\tservletContext.setInitParameter("contextConfigLocation", "<NONE>");\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
