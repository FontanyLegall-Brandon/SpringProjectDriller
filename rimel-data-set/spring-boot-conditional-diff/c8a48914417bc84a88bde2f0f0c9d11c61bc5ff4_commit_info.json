{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -17,6 +17,8 @@\n package org.springframework.boot.autoconfigure.redis;\n \n import java.net.UnknownHostException;\n+import java.util.ArrayList;\n+import java.util.List;\n \n import org.apache.commons.pool2.impl.GenericObjectPool;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -24,15 +26,19 @@ import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;\n+import org.springframework.boot.autoconfigure.redis.RedisProperties.Sentinel;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.data.redis.connection.RedisConnectionFactory;\n+import org.springframework.data.redis.connection.RedisNode;\n+import org.springframework.data.redis.connection.RedisSentinelConfiguration;\n import org.springframework.data.redis.connection.jedis.JedisConnection;\n import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;\n import org.springframework.data.redis.core.RedisOperations;\n import org.springframework.data.redis.core.RedisTemplate;\n import org.springframework.data.redis.core.StringRedisTemplate;\n+import org.springframework.util.StringUtils;\n \n import redis.clients.jedis.Jedis;\n import redis.clients.jedis.JedisPoolConfig;\n@@ -43,6 +49,7 @@ import redis.clients.jedis.JedisPoolConfig;\n  * @author Dave Syer\n  * @author Andy Wilkinson\n  * @author Christian Dupuis\n+ * @author Christoph Strobl\n  */\n @Configuration\n @ConditionalOnClass({ JedisConnection.class, RedisOperations.class, Jedis.class })\n@@ -55,17 +62,58 @@ public class RedisAutoConfiguration {\n \t\treturn new RedisProperties();\n \t}\n \n-\t@Configuration\n-\t@ConditionalOnMissingClass(name = "org.apache.commons.pool2.impl.GenericObjectPool")\n-\tprotected static class RedisConnectionConfiguration {\n+\tprotected abstract static class RedisHAConnectionConfiguration {\n \n \t\t@Autowired\n-\t\tprivate RedisProperties properties;\n+\t\tprotected RedisProperties properties;\n+\n+\t\t@Autowired(required = false)\n+\t\tprivate RedisSentinelConfiguration sentinelConfiguration;\n+\n+\t\tprotected RedisSentinelConfiguration potentiallyGetSentinelConfig() {\n+\n+\t\t\tif (this.sentinelConfiguration == null\n+\t\t\t\t\t&& this.properties.getSentinel() == null) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\n+\t\t\tRedisSentinelConfiguration sentinelConfig = this.sentinelConfiguration;\n+\t\t\tif (sentinelConfig == null && this.properties.getSentinel() != null) {\n+\t\t\t\tsentinelConfig = new RedisSentinelConfiguration().master(this.properties\n+\t\t\t\t\t\t.getSentinel().getMaster());\n+\t\t\t\tsentinelConfig.setSentinels(createRedisNodesForSentinel(this.properties\n+\t\t\t\t\t\t.getSentinel()));\n+\t\t\t}\n+\t\t\treturn sentinelConfig;\n+\t\t}\n+\n+\t\tprivate List<RedisNode> createRedisNodesForSentinel(Sentinel sentinel) {\n+\n+\t\t\tString[] nodeStrings = StringUtils.commaDelimitedListToStringArray(sentinel\n+\t\t\t\t\t.getNodes());\n+\n+\t\t\tList<RedisNode> nodes = new ArrayList<RedisNode>(nodeStrings.length);\n+\n+\t\t\tfor (String hostAndPort : nodeStrings) {\n+\t\t\t\tString[] args = StringUtils.split(hostAndPort, ":");\n+\t\t\t\tnodes.add(new RedisNode(args[0], Integer.valueOf(args[1])));\n+\t\t\t}\n+\n+\t\t\treturn nodes;\n+\t\t}\n+\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnMissingClass(name = "org.apache.commons.pool2.impl.GenericObjectPool")\n+\tprotected static class RedisConnectionConfiguration extends\n+\t\t\tRedisHAConnectionConfiguration {\n \n \t\t@Bean\n \t\t@ConditionalOnMissingBean\n \t\tRedisConnectionFactory redisConnectionFactory() throws UnknownHostException {\n-\t\t\tJedisConnectionFactory factory = new JedisConnectionFactory();\n+\t\t\tJedisConnectionFactory factory = new JedisConnectionFactory(\n+\t\t\t\t\tpotentiallyGetSentinelConfig());\n \t\t\tapplyConnectionFactoryProperties(factory, this.properties);\n \t\t\treturn factory;\n \t\t}\n@@ -74,10 +122,8 @@ public class RedisAutoConfiguration {\n \n \t@Configuration\n \t@ConditionalOnClass(GenericObjectPool.class)\n-\tprotected static class RedisPooledConnectionConfiguration {\n-\n-\t\t@Autowired\n-\t\tprivate RedisProperties properties;\n+\tprotected static class RedisPooledConnectionConfiguration extends\n+\t\t\tRedisHAConnectionConfiguration {\n \n \t\t@Bean\n \t\t@ConditionalOnMissingBean\n@@ -88,10 +134,14 @@ public class RedisAutoConfiguration {\n \t\t}\n \n \t\tprivate JedisConnectionFactory createJedisConnectionFactory() {\n+\n \t\t\tif (this.properties.getPool() != null) {\n-\t\t\t\treturn new JedisConnectionFactory(jedisPoolConfig());\n+\t\t\t\treturn new JedisConnectionFactory(potentiallyGetSentinelConfig(),\n+\t\t\t\t\t\tjedisPoolConfig());\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\treturn new JedisConnectionFactory(potentiallyGetSentinelConfig());\n \t\t\t}\n-\t\t\treturn new JedisConnectionFactory();\n \t\t}\n \n \t\tprivate JedisPoolConfig jedisPoolConfig() {\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.redis;\n\nimport java.net.UnknownHostException;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.apache.commons.pool2.impl.GenericObjectPool;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;\nimport org.springframework.boot.autoconfigure.redis.RedisProperties.Sentinel;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.connection.RedisNode;\nimport org.springframework.data.redis.connection.RedisSentinelConfiguration;\nimport org.springframework.data.redis.connection.jedis.JedisConnection;\nimport org.springframework.data.redis.connection.jedis.JedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisOperations;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.util.StringUtils;\n\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPoolConfig;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s Redis support.\n *\n * @author Dave Syer\n * @author Andy Wilkinson\n * @author Christian Dupuis\n * @author Christoph Strobl\n */\n@Configuration\n@ConditionalOnClass({ JedisConnection.class, RedisOperations.class, Jedis.class })\n@EnableConfigurationProperties\npublic class RedisAutoConfiguration {\n\n\t@Bean(name = "org.springframework.autoconfigure.redis.RedisProperties")\n\t@ConditionalOnMissingBean\n\tpublic RedisProperties redisProperties() {\n\t\treturn new RedisProperties();\n\t}\n\n\tprotected abstract static class RedisHAConnectionConfiguration {\n\n\t\t@Autowired\n\t\tprotected RedisProperties properties;\n\n\t\t@Autowired(required = false)\n\t\tprivate RedisSentinelConfiguration sentinelConfiguration;\n\n\t\tprotected RedisSentinelConfiguration potentiallyGetSentinelConfig() {\n\n\t\t\tif (this.sentinelConfiguration == null\n\t\t\t\t\t&& this.properties.getSentinel() == null) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tRedisSentinelConfiguration sentinelConfig = this.sentinelConfiguration;\n\t\t\tif (sentinelConfig == null && this.properties.getSentinel() != null) {\n\t\t\t\tsentinelConfig = new RedisSentinelConfiguration().master(this.properties\n\t\t\t\t\t\t.getSentinel().getMaster());\n\t\t\t\tsentinelConfig.setSentinels(createRedisNodesForSentinel(this.properties\n\t\t\t\t\t\t.getSentinel()));\n\t\t\t}\n\t\t\treturn sentinelConfig;\n\t\t}\n\n\t\tprivate List<RedisNode> createRedisNodesForSentinel(Sentinel sentinel) {\n\n\t\t\tString[] nodeStrings = StringUtils.commaDelimitedListToStringArray(sentinel\n\t\t\t\t\t.getNodes());\n\n\t\t\tList<RedisNode> nodes = new ArrayList<RedisNode>(nodeStrings.length);\n\n\t\t\tfor (String hostAndPort : nodeStrings) {\n\t\t\t\tString[] args = StringUtils.split(hostAndPort, ":");\n\t\t\t\tnodes.add(new RedisNode(args[0], Integer.valueOf(args[1])));\n\t\t\t}\n\n\t\t\treturn nodes;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingClass(name = "org.apache.commons.pool2.impl.GenericObjectPool")\n\tprotected static class RedisConnectionConfiguration extends\n\t\t\tRedisHAConnectionConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tRedisConnectionFactory redisConnectionFactory() throws UnknownHostException {\n\t\t\tJedisConnectionFactory factory = new JedisConnectionFactory(\n\t\t\t\t\tpotentiallyGetSentinelConfig());\n\t\t\tapplyConnectionFactoryProperties(factory, this.properties);\n\t\t\treturn factory;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(GenericObjectPool.class)\n\tprotected static class RedisPooledConnectionConfiguration extends\n\t\t\tRedisHAConnectionConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tRedisConnectionFactory redisConnectionFactory() throws UnknownHostException {\n\t\t\tJedisConnectionFactory factory = createJedisConnectionFactory();\n\t\t\tapplyConnectionFactoryProperties(factory, this.properties);\n\t\t\treturn factory;\n\t\t}\n\n\t\tprivate JedisConnectionFactory createJedisConnectionFactory() {\n\n\t\t\tif (this.properties.getPool() != null) {\n\t\t\t\treturn new JedisConnectionFactory(potentiallyGetSentinelConfig(),\n\t\t\t\t\t\tjedisPoolConfig());\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn new JedisConnectionFactory(potentiallyGetSentinelConfig());\n\t\t\t}\n\t\t}\n\n\t\tprivate JedisPoolConfig jedisPoolConfig() {\n\t\t\tJedisPoolConfig config = new JedisPoolConfig();\n\t\t\tRedisProperties.Pool props = this.properties.getPool();\n\t\t\tconfig.setMaxTotal(props.getMaxActive());\n\t\t\tconfig.setMaxIdle(props.getMaxIdle());\n\t\t\tconfig.setMinIdle(props.getMinIdle());\n\t\t\tconfig.setMaxWaitMillis(props.getMaxWait());\n\t\t\treturn config;\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class RedisConfiguration {\n\n\t\t@Autowired\n\t\tprivate RedisProperties properties;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "redisTemplate")\n\t\tRedisOperations<Object, Object> redisTemplate(\n\t\t\t\tRedisConnectionFactory redisConnectionFactory)\n\t\t\t\tthrows UnknownHostException {\n\t\t\tRedisTemplate<Object, Object> template = new RedisTemplate<Object, Object>();\n\t\t\ttemplate.setConnectionFactory(redisConnectionFactory);\n\t\t\treturn template;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(StringRedisTemplate.class)\n\t\tStringRedisTemplate stringRedisTemplate(\n\t\t\t\tRedisConnectionFactory redisConnectionFactory)\n\t\t\t\tthrows UnknownHostException {\n\t\t\tStringRedisTemplate template = new StringRedisTemplate();\n\t\t\ttemplate.setConnectionFactory(redisConnectionFactory);\n\t\t\treturn template;\n\t\t}\n\n\t}\n\n\tstatic void applyConnectionFactoryProperties(JedisConnectionFactory factory,\n\t\t\tRedisProperties properties) {\n\t\tfactory.setHostName(properties.getHost());\n\t\tfactory.setPort(properties.getPort());\n\t\tif (properties.getPassword() != null) {\n\t\t\tfactory.setPassword(properties.getPassword());\n\t\t}\n\t\tfactory.setDatabase(properties.getDatabase());\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.redis;\n\nimport java.net.UnknownHostException;\n\nimport org.apache.commons.pool2.impl.GenericObjectPool;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.connection.jedis.JedisConnection;\nimport org.springframework.data.redis.connection.jedis.JedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisOperations;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.core.StringRedisTemplate;\n\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPoolConfig;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s Redis support.\n *\n * @author Dave Syer\n * @author Andy Wilkinson\n * @author Christian Dupuis\n */\n@Configuration\n@ConditionalOnClass({ JedisConnection.class, RedisOperations.class, Jedis.class })\n@EnableConfigurationProperties\npublic class RedisAutoConfiguration {\n\n\t@Bean(name = "org.springframework.autoconfigure.redis.RedisProperties")\n\t@ConditionalOnMissingBean\n\tpublic RedisProperties redisProperties() {\n\t\treturn new RedisProperties();\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingClass(name = "org.apache.commons.pool2.impl.GenericObjectPool")\n\tprotected static class RedisConnectionConfiguration {\n\n\t\t@Autowired\n\t\tprivate RedisProperties properties;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tRedisConnectionFactory redisConnectionFactory() throws UnknownHostException {\n\t\t\tJedisConnectionFactory factory = new JedisConnectionFactory();\n\t\t\tapplyConnectionFactoryProperties(factory, this.properties);\n\t\t\treturn factory;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(GenericObjectPool.class)\n\tprotected static class RedisPooledConnectionConfiguration {\n\n\t\t@Autowired\n\t\tprivate RedisProperties properties;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tRedisConnectionFactory redisConnectionFactory() throws UnknownHostException {\n\t\t\tJedisConnectionFactory factory = createJedisConnectionFactory();\n\t\t\tapplyConnectionFactoryProperties(factory, this.properties);\n\t\t\treturn factory;\n\t\t}\n\n\t\tprivate JedisConnectionFactory createJedisConnectionFactory() {\n\t\t\tif (this.properties.getPool() != null) {\n\t\t\t\treturn new JedisConnectionFactory(jedisPoolConfig());\n\t\t\t}\n\t\t\treturn new JedisConnectionFactory();\n\t\t}\n\n\t\tprivate JedisPoolConfig jedisPoolConfig() {\n\t\t\tJedisPoolConfig config = new JedisPoolConfig();\n\t\t\tRedisProperties.Pool props = this.properties.getPool();\n\t\t\tconfig.setMaxTotal(props.getMaxActive());\n\t\t\tconfig.setMaxIdle(props.getMaxIdle());\n\t\t\tconfig.setMinIdle(props.getMinIdle());\n\t\t\tconfig.setMaxWaitMillis(props.getMaxWait());\n\t\t\treturn config;\n\t\t}\n\n\t}\n\n\t@Configuration\n\tprotected static class RedisConfiguration {\n\n\t\t@Autowired\n\t\tprivate RedisProperties properties;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "redisTemplate")\n\t\tRedisOperations<Object, Object> redisTemplate(\n\t\t\t\tRedisConnectionFactory redisConnectionFactory)\n\t\t\t\tthrows UnknownHostException {\n\t\t\tRedisTemplate<Object, Object> template = new RedisTemplate<Object, Object>();\n\t\t\ttemplate.setConnectionFactory(redisConnectionFactory);\n\t\t\treturn template;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(StringRedisTemplate.class)\n\t\tStringRedisTemplate stringRedisTemplate(\n\t\t\t\tRedisConnectionFactory redisConnectionFactory)\n\t\t\t\tthrows UnknownHostException {\n\t\t\tStringRedisTemplate template = new StringRedisTemplate();\n\t\t\ttemplate.setConnectionFactory(redisConnectionFactory);\n\t\t\treturn template;\n\t\t}\n\n\t}\n\n\tstatic void applyConnectionFactoryProperties(JedisConnectionFactory factory,\n\t\t\tRedisProperties properties) {\n\t\tfactory.setHostName(properties.getHost());\n\t\tfactory.setPort(properties.getPort());\n\t\tif (properties.getPassword() != null) {\n\t\t\tfactory.setPassword(properties.getPassword());\n\t\t}\n\t\tfactory.setDatabase(properties.getDatabase());\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
