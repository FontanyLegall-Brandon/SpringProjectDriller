{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -19,15 +19,20 @@ package org.springframework.boot.actuate.autoconfigure.cloudfoundry.servlet;\n import java.util.Arrays;\n \n import org.springframework.boot.actuate.autoconfigure.cloudfoundry.CloudFoundryWebAnnotationEndpointDiscoverer;\n+import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\n+import org.springframework.boot.actuate.autoconfigure.health.HealthEndpointAutoConfiguration;\n import org.springframework.boot.actuate.autoconfigure.web.servlet.ServletManagementContextAutoConfiguration;\n import org.springframework.boot.actuate.endpoint.reflect.ParameterMapper;\n import org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes;\n import org.springframework.boot.actuate.endpoint.web.EndpointPathResolver;\n+import org.springframework.boot.actuate.health.HealthEndpoint;\n+import org.springframework.boot.actuate.health.HealthEndpointWebExtension;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n import org.springframework.boot.autoconfigure.security.SecurityProperties;\n@@ -48,14 +53,14 @@ import org.springframework.web.servlet.DispatcherServlet;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} to expose actuator endpoints for\n- * cloud foundry to use.\n+ * Cloud Foundry to use.\n  *\n  * @author Madhura Bhave\n  * @since 2.0.0\n  */\n @Configuration\n @ConditionalOnProperty(prefix = "management.cloudfoundry", name = "enabled", matchIfMissing = true)\n-@AutoConfigureAfter(ServletManagementContextAutoConfiguration.class)\n+@AutoConfigureAfter({ ServletManagementContextAutoConfiguration.class, HealthEndpointAutoConfiguration.class })\n @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n @ConditionalOnClass(DispatcherServlet.class)\n @ConditionalOnBean(DispatcherServlet.class)\n@@ -68,6 +73,15 @@ public class CloudFoundryActuatorAutoConfiguration {\n \t\tthis.applicationContext = applicationContext;\n \t}\n \n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\t@ConditionalOnEnabledEndpoint\n+\t@ConditionalOnBean({ HealthEndpoint.class, HealthEndpointWebExtension.class })\n+\tpublic CloudFoundryHealthEndpointWebExtension cloudFoundryHealthEndpointWebExtension(\n+\t\t\tHealthEndpointWebExtension healthEndpointWebExtension) {\n+\t\treturn new CloudFoundryHealthEndpointWebExtension(healthEndpointWebExtension);\n+\t}\n+\n \t@Bean\n \tpublic CloudFoundryWebEndpointServletHandlerMapping cloudFoundryWebEndpointServletHandlerMapping(\n \t\t\tParameterMapper parameterMapper, EndpointMediaTypes endpointMediaTypes,\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.cloudfoundry.servlet;\n\nimport java.util.Arrays;\n\nimport org.springframework.boot.actuate.autoconfigure.cloudfoundry.CloudFoundryWebAnnotationEndpointDiscoverer;\nimport org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\nimport org.springframework.boot.actuate.autoconfigure.health.HealthEndpointAutoConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.web.servlet.ServletManagementContextAutoConfiguration;\nimport org.springframework.boot.actuate.endpoint.reflect.ParameterMapper;\nimport org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes;\nimport org.springframework.boot.actuate.endpoint.web.EndpointPathResolver;\nimport org.springframework.boot.actuate.health.HealthEndpoint;\nimport org.springframework.boot.actuate.health.HealthEndpointWebExtension;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.security.SecurityProperties;\nimport org.springframework.boot.cloud.CloudPlatform;\nimport org.springframework.boot.endpoint.web.EndpointMapping;\nimport org.springframework.boot.web.client.RestTemplateBuilder;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.env.Environment;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.security.config.annotation.web.WebSecurityConfigurer;\nimport org.springframework.security.config.annotation.web.builders.WebSecurity;\nimport org.springframework.security.web.util.matcher.AntPathRequestMatcher;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.servlet.DispatcherServlet;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to expose actuator endpoints for\n * Cloud Foundry to use.\n *\n * @author Madhura Bhave\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnProperty(prefix = "management.cloudfoundry", name = "enabled", matchIfMissing = true)\n@AutoConfigureAfter({ ServletManagementContextAutoConfiguration.class, HealthEndpointAutoConfiguration.class })\n@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n@ConditionalOnClass(DispatcherServlet.class)\n@ConditionalOnBean(DispatcherServlet.class)\n@ConditionalOnCloudPlatform(CloudPlatform.CLOUD_FOUNDRY)\npublic class CloudFoundryActuatorAutoConfiguration {\n\n\tprivate final ApplicationContext applicationContext;\n\n\tCloudFoundryActuatorAutoConfiguration(ApplicationContext applicationContext) {\n\t\tthis.applicationContext = applicationContext;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnEnabledEndpoint\n\t@ConditionalOnBean({ HealthEndpoint.class, HealthEndpointWebExtension.class })\n\tpublic CloudFoundryHealthEndpointWebExtension cloudFoundryHealthEndpointWebExtension(\n\t\t\tHealthEndpointWebExtension healthEndpointWebExtension) {\n\t\treturn new CloudFoundryHealthEndpointWebExtension(healthEndpointWebExtension);\n\t}\n\n\t@Bean\n\tpublic CloudFoundryWebEndpointServletHandlerMapping cloudFoundryWebEndpointServletHandlerMapping(\n\t\t\tParameterMapper parameterMapper, EndpointMediaTypes endpointMediaTypes,\n\t\t\tRestTemplateBuilder restTemplateBuilder) {\n\t\tCloudFoundryWebAnnotationEndpointDiscoverer endpointDiscoverer = new CloudFoundryWebAnnotationEndpointDiscoverer(\n\t\t\t\tthis.applicationContext, parameterMapper, endpointMediaTypes,\n\t\t\t\tEndpointPathResolver.useEndpointId(), null, null,\n\t\t\t\tCloudFoundryHealthEndpointWebExtension.class);\n\t\tCloudFoundrySecurityInterceptor securityInterceptor = getSecurityInterceptor(\n\t\t\t\trestTemplateBuilder, this.applicationContext.getEnvironment());\n\t\treturn new CloudFoundryWebEndpointServletHandlerMapping(\n\t\t\t\tnew EndpointMapping("/cloudfoundryapplication"),\n\t\t\t\tendpointDiscoverer.discoverEndpoints(), endpointMediaTypes,\n\t\t\t\tgetCorsConfiguration(), securityInterceptor);\n\t}\n\n\tprivate CloudFoundrySecurityInterceptor getSecurityInterceptor(\n\t\t\tRestTemplateBuilder restTemplateBuilder, Environment environment) {\n\t\tCloudFoundrySecurityService cloudfoundrySecurityService = getCloudFoundrySecurityService(\n\t\t\t\trestTemplateBuilder, environment);\n\t\tTokenValidator tokenValidator = new TokenValidator(cloudfoundrySecurityService);\n\t\treturn new CloudFoundrySecurityInterceptor(tokenValidator,\n\t\t\t\tcloudfoundrySecurityService,\n\t\t\t\tenvironment.getProperty("vcap.application.application_id"));\n\t}\n\n\tprivate CloudFoundrySecurityService getCloudFoundrySecurityService(\n\t\t\tRestTemplateBuilder restTemplateBuilder, Environment environment) {\n\t\tString cloudControllerUrl = environment.getProperty("vcap.application.cf_api");\n\t\tboolean skipSslValidation = environment.getProperty(\n\t\t\t\t"management.cloudfoundry.skip-ssl-validation", Boolean.class, false);\n\t\treturn (cloudControllerUrl == null ? null\n\t\t\t\t: new CloudFoundrySecurityService(restTemplateBuilder, cloudControllerUrl,\n\t\t\t\t\t\tskipSslValidation));\n\t}\n\n\tprivate CorsConfiguration getCorsConfiguration() {\n\t\tCorsConfiguration corsConfiguration = new CorsConfiguration();\n\t\tcorsConfiguration.addAllowedOrigin(CorsConfiguration.ALL);\n\t\tcorsConfiguration.setAllowedMethods(\n\t\t\t\tArrays.asList(HttpMethod.GET.name(), HttpMethod.POST.name()));\n\t\tcorsConfiguration.setAllowedHeaders(\n\t\t\t\tArrays.asList("Authorization", "X-Cf-App-Instance", "Content-Type"));\n\t\treturn corsConfiguration;\n\t}\n\n\t/**\n\t * {@link WebSecurityConfigurer} to tell Spring Security to ignore cloudfoundry\n\t * specific paths. The Cloud foundry endpoints are protected by their own security\n\t * interceptor.\n\t */\n\t@ConditionalOnClass(WebSecurity.class)\n\t@Order(SecurityProperties.IGNORED_ORDER)\n\t@Configuration\n\tpublic static class IgnoredPathsWebSecurityConfigurer\n\t\t\timplements WebSecurityConfigurer<WebSecurity> {\n\n\t\t@Override\n\t\tpublic void init(WebSecurity builder) throws Exception {\n\t\t\tbuilder.ignoring().requestMatchers(\n\t\t\t\t\tnew AntPathRequestMatcher("/cloudfoundryapplication/**"));\n\t\t}\n\n\t\t@Override\n\t\tpublic void configure(WebSecurity builder) throws Exception {\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.cloudfoundry.servlet;\n\nimport java.util.Arrays;\n\nimport org.springframework.boot.actuate.autoconfigure.cloudfoundry.CloudFoundryWebAnnotationEndpointDiscoverer;\nimport org.springframework.boot.actuate.autoconfigure.web.servlet.ServletManagementContextAutoConfiguration;\nimport org.springframework.boot.actuate.endpoint.reflect.ParameterMapper;\nimport org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes;\nimport org.springframework.boot.actuate.endpoint.web.EndpointPathResolver;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.security.SecurityProperties;\nimport org.springframework.boot.cloud.CloudPlatform;\nimport org.springframework.boot.endpoint.web.EndpointMapping;\nimport org.springframework.boot.web.client.RestTemplateBuilder;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.env.Environment;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.security.config.annotation.web.WebSecurityConfigurer;\nimport org.springframework.security.config.annotation.web.builders.WebSecurity;\nimport org.springframework.security.web.util.matcher.AntPathRequestMatcher;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.servlet.DispatcherServlet;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to expose actuator endpoints for\n * cloud foundry to use.\n *\n * @author Madhura Bhave\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnProperty(prefix = "management.cloudfoundry", name = "enabled", matchIfMissing = true)\n@AutoConfigureAfter(ServletManagementContextAutoConfiguration.class)\n@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n@ConditionalOnClass(DispatcherServlet.class)\n@ConditionalOnBean(DispatcherServlet.class)\n@ConditionalOnCloudPlatform(CloudPlatform.CLOUD_FOUNDRY)\npublic class CloudFoundryActuatorAutoConfiguration {\n\n\tprivate final ApplicationContext applicationContext;\n\n\tCloudFoundryActuatorAutoConfiguration(ApplicationContext applicationContext) {\n\t\tthis.applicationContext = applicationContext;\n\t}\n\n\t@Bean\n\tpublic CloudFoundryWebEndpointServletHandlerMapping cloudFoundryWebEndpointServletHandlerMapping(\n\t\t\tParameterMapper parameterMapper, EndpointMediaTypes endpointMediaTypes,\n\t\t\tRestTemplateBuilder restTemplateBuilder) {\n\t\tCloudFoundryWebAnnotationEndpointDiscoverer endpointDiscoverer = new CloudFoundryWebAnnotationEndpointDiscoverer(\n\t\t\t\tthis.applicationContext, parameterMapper, endpointMediaTypes,\n\t\t\t\tEndpointPathResolver.useEndpointId(), null, null,\n\t\t\t\tCloudFoundryHealthEndpointWebExtension.class);\n\t\tCloudFoundrySecurityInterceptor securityInterceptor = getSecurityInterceptor(\n\t\t\t\trestTemplateBuilder, this.applicationContext.getEnvironment());\n\t\treturn new CloudFoundryWebEndpointServletHandlerMapping(\n\t\t\t\tnew EndpointMapping("/cloudfoundryapplication"),\n\t\t\t\tendpointDiscoverer.discoverEndpoints(), endpointMediaTypes,\n\t\t\t\tgetCorsConfiguration(), securityInterceptor);\n\t}\n\n\tprivate CloudFoundrySecurityInterceptor getSecurityInterceptor(\n\t\t\tRestTemplateBuilder restTemplateBuilder, Environment environment) {\n\t\tCloudFoundrySecurityService cloudfoundrySecurityService = getCloudFoundrySecurityService(\n\t\t\t\trestTemplateBuilder, environment);\n\t\tTokenValidator tokenValidator = new TokenValidator(cloudfoundrySecurityService);\n\t\treturn new CloudFoundrySecurityInterceptor(tokenValidator,\n\t\t\t\tcloudfoundrySecurityService,\n\t\t\t\tenvironment.getProperty("vcap.application.application_id"));\n\t}\n\n\tprivate CloudFoundrySecurityService getCloudFoundrySecurityService(\n\t\t\tRestTemplateBuilder restTemplateBuilder, Environment environment) {\n\t\tString cloudControllerUrl = environment.getProperty("vcap.application.cf_api");\n\t\tboolean skipSslValidation = environment.getProperty(\n\t\t\t\t"management.cloudfoundry.skip-ssl-validation", Boolean.class, false);\n\t\treturn (cloudControllerUrl == null ? null\n\t\t\t\t: new CloudFoundrySecurityService(restTemplateBuilder, cloudControllerUrl,\n\t\t\t\t\t\tskipSslValidation));\n\t}\n\n\tprivate CorsConfiguration getCorsConfiguration() {\n\t\tCorsConfiguration corsConfiguration = new CorsConfiguration();\n\t\tcorsConfiguration.addAllowedOrigin(CorsConfiguration.ALL);\n\t\tcorsConfiguration.setAllowedMethods(\n\t\t\t\tArrays.asList(HttpMethod.GET.name(), HttpMethod.POST.name()));\n\t\tcorsConfiguration.setAllowedHeaders(\n\t\t\t\tArrays.asList("Authorization", "X-Cf-App-Instance", "Content-Type"));\n\t\treturn corsConfiguration;\n\t}\n\n\t/**\n\t * {@link WebSecurityConfigurer} to tell Spring Security to ignore cloudfoundry\n\t * specific paths. The Cloud foundry endpoints are protected by their own security\n\t * interceptor.\n\t */\n\t@ConditionalOnClass(WebSecurity.class)\n\t@Order(SecurityProperties.IGNORED_ORDER)\n\t@Configuration\n\tpublic static class IgnoredPathsWebSecurityConfigurer\n\t\t\timplements WebSecurityConfigurer<WebSecurity> {\n\n\t\t@Override\n\t\tpublic void init(WebSecurity builder) throws Exception {\n\t\t\tbuilder.ignoring().requestMatchers(\n\t\t\t\t\tnew AntPathRequestMatcher("/cloudfoundryapplication/**"));\n\t\t}\n\n\t\t@Override\n\t\tpublic void configure(WebSecurity builder) throws Exception {\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
