{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2016 the original author or authors.\n+ * Copyright 2012-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -16,21 +16,23 @@\n \n package org.springframework.boot.autoconfigure.thymeleaf;\n \n-import java.lang.reflect.Method;\n import java.util.Collection;\n+import java.util.LinkedHashMap;\n \n+import javax.annotation.PostConstruct;\n import javax.servlet.Servlet;\n \n import com.github.mxab.thymeleaf.extras.dataattribute.dialect.DataAttributeDialect;\n import nz.net.ultraq.thymeleaf.LayoutDialect;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n import org.thymeleaf.dialect.IDialect;\n-import org.thymeleaf.extras.conditionalcomments.dialect.ConditionalCommentsDialect;\n import org.thymeleaf.extras.java8time.dialect.Java8TimeDialect;\n import org.thymeleaf.extras.springsecurity4.dialect.SpringSecurityDialect;\n-import org.thymeleaf.spring4.SpringTemplateEngine;\n-import org.thymeleaf.spring4.resourceresolver.SpringResourceResourceResolver;\n-import org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver;\n-import org.thymeleaf.spring4.view.ThymeleafViewResolver;\n+import org.thymeleaf.spring5.SpringTemplateEngine;\n+import org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver;\n+import org.thymeleaf.spring5.view.ThymeleafViewResolver;\n+import org.thymeleaf.templatemode.TemplateMode;\n import org.thymeleaf.templateresolver.ITemplateResolver;\n \n import org.springframework.beans.factory.ObjectProvider;\n@@ -38,16 +40,18 @@ import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.autoconfigure.template.TemplateLocation;\n import org.springframework.boot.autoconfigure.web.ConditionalOnEnabledResourceChain;\n import org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.Ordered;\n import org.springframework.util.CollectionUtils;\n-import org.springframework.util.ReflectionUtils;\n+import org.springframework.util.MimeType;\n import org.springframework.web.servlet.resource.ResourceUrlEncodingFilter;\n \n /**\n@@ -61,118 +65,103 @@ import org.springframework.web.servlet.resource.ResourceUrlEncodingFilter;\n  */\n @Configuration\n @EnableConfigurationProperties(ThymeleafProperties.class)\n-@ConditionalOnClass(SpringTemplateEngine.class)\n+@ConditionalOnClass(TemplateMode.class)\n @AutoConfigureAfter(WebMvcAutoConfiguration.class)\n public class ThymeleafAutoConfiguration {\n \n \t@Configuration\n-\t@ConditionalOnMissingClass("org.thymeleaf.templatemode.TemplateMode")\n-\tstatic class Thymeleaf2Configuration {\n+\t@ConditionalOnMissingBean(name = "defaultTemplateResolver")\n+\tstatic class DefaultTemplateResolverConfiguration {\n \n-\t\t@Configuration\n-\t\t@ConditionalOnMissingBean(name = "defaultTemplateResolver")\n-\t\tstatic class DefaultTemplateResolverConfiguration\n-\t\t\t\textends AbstractTemplateResolverConfiguration {\n+\t\tprivate static final Log logger = LogFactory\n+\t\t\t\t.getLog(DefaultTemplateResolverConfiguration.class);\n \n-\t\t\tDefaultTemplateResolverConfiguration(ThymeleafProperties properties,\n-\t\t\t\t\tApplicationContext applicationContext) {\n-\t\t\t\tsuper(properties, applicationContext);\n-\t\t\t}\n+\t\tprivate final ThymeleafProperties properties;\n \n-\t\t\t@Bean\n-\t\t\tpublic SpringResourceResourceResolver thymeleafResourceResolver() {\n-\t\t\t\treturn new SpringResourceResourceResolver();\n-\t\t\t}\n+\t\tprivate final ApplicationContext applicationContext;\n \n+\t\tDefaultTemplateResolverConfiguration(ThymeleafProperties properties,\n+\t\t\t\tApplicationContext applicationContext) {\n+\t\t\tthis.properties = properties;\n+\t\t\tthis.applicationContext = applicationContext;\n \t\t}\n \n-\t\t@Configuration\n-\t\t@ConditionalOnClass({ Servlet.class })\n-\t\t@ConditionalOnWebApplication\n-\t\tstatic class Thymeleaf2ViewResolverConfiguration\n-\t\t\t\textends AbstractThymeleafViewResolverConfiguration {\n-\n-\t\t\tThymeleaf2ViewResolverConfiguration(ThymeleafProperties properties,\n-\t\t\t\t\tSpringTemplateEngine templateEngine) {\n-\t\t\t\tsuper(properties, templateEngine);\n-\t\t\t}\n-\n-\t\t\t@Override\n-\t\t\tprotected void configureTemplateEngine(ThymeleafViewResolver resolver,\n-\t\t\t\t\tSpringTemplateEngine templateEngine) {\n-\t\t\t\tresolver.setTemplateEngine(templateEngine);\n+\t\t@PostConstruct\n+\t\tpublic void checkTemplateLocationExists() {\n+\t\t\tboolean checkTemplateLocation = this.properties.isCheckTemplateLocation();\n+\t\t\tif (checkTemplateLocation) {\n+\t\t\t\tTemplateLocation location = new TemplateLocation(\n+\t\t\t\t\t\tthis.properties.getPrefix());\n+\t\t\t\tif (!location.exists(this.applicationContext)) {\n+\t\t\t\t\tlogger.warn("Cannot find template location: " + location\n+\t\t\t\t\t\t\t+ " (please add some templates or check "\n+\t\t\t\t\t\t\t+ "your Thymeleaf configuration)");\n+\t\t\t\t}\n \t\t\t}\n-\n \t\t}\n \n-\t\t@Configuration\n-\t\t@ConditionalOnClass(ConditionalCommentsDialect.class)\n-\t\tstatic class ThymeleafConditionalCommentsDialectConfiguration {\n-\n-\t\t\t@Bean\n-\t\t\t@ConditionalOnMissingBean\n-\t\t\tpublic ConditionalCommentsDialect conditionalCommentsDialect() {\n-\t\t\t\treturn new ConditionalCommentsDialect();\n+\t\t@Bean\n+\t\tpublic SpringResourceTemplateResolver defaultTemplateResolver() {\n+\t\t\tSpringResourceTemplateResolver resolver = new SpringResourceTemplateResolver();\n+\t\t\tresolver.setApplicationContext(this.applicationContext);\n+\t\t\tresolver.setPrefix(this.properties.getPrefix());\n+\t\t\tresolver.setSuffix(this.properties.getSuffix());\n+\t\t\tresolver.setTemplateMode(this.properties.getMode());\n+\t\t\tif (this.properties.getEncoding() != null) {\n+\t\t\t\tresolver.setCharacterEncoding(this.properties.getEncoding().name());\n \t\t\t}\n-\n+\t\t\tresolver.setCacheable(this.properties.isCache());\n+\t\t\tInteger order = this.properties.getTemplateResolverOrder();\n+\t\t\tif (order != null) {\n+\t\t\t\tresolver.setOrder(order);\n+\t\t\t}\n+\t\t\tresolver.setCheckExistence(this.properties.isCheckTemplate());\n+\t\t\treturn resolver;\n \t\t}\n \n \t}\n \n \t@Configuration\n-\t@ConditionalOnClass(name = "org.thymeleaf.templatemode.TemplateMode")\n-\tstatic class Thymeleaf3Configuration {\n-\n-\t\t@Configuration\n-\t\t@ConditionalOnMissingBean(name = "defaultTemplateResolver")\n-\t\tstatic class DefaultTemplateResolverConfiguration\n-\t\t\t\textends AbstractTemplateResolverConfiguration {\n+\t@ConditionalOnClass({ Servlet.class })\n+\t@ConditionalOnWebApplication\n+\tstatic class ThymeleafViewResolverConfiguration {\n \n-\t\t\tDefaultTemplateResolverConfiguration(ThymeleafProperties properties,\n-\t\t\t\t\tApplicationContext applicationContext) {\n-\t\t\t\tsuper(properties, applicationContext);\n-\t\t\t}\n+\t\tprivate final ThymeleafProperties properties;\n \n-\t\t\t@Bean\n-\t\t\t@Override\n-\t\t\tpublic SpringResourceTemplateResolver defaultTemplateResolver() {\n-\t\t\t\tSpringResourceTemplateResolver resolver = super.defaultTemplateResolver();\n-\t\t\t\tMethod setCheckExistence = ReflectionUtils.findMethod(resolver.getClass(),\n-\t\t\t\t\t\t"setCheckExistence", boolean.class);\n-\t\t\t\tReflectionUtils.invokeMethod(setCheckExistence, resolver,\n-\t\t\t\t\t\tgetProperties().isCheckTemplate());\n-\t\t\t\treturn resolver;\n-\t\t\t}\n+\t\tprivate final SpringTemplateEngine templateEngine;\n \n+\t\tThymeleafViewResolverConfiguration(ThymeleafProperties properties,\n+\t\t\t\tSpringTemplateEngine templateEngine) {\n+\t\t\tthis.properties = properties;\n+\t\t\tthis.templateEngine = templateEngine;\n \t\t}\n \n-\t\t@Configuration\n-\t\t@ConditionalOnClass({ Servlet.class })\n-\t\t@ConditionalOnWebApplication\n-\t\tstatic class Thymeleaf3ViewResolverConfiguration\n-\t\t\t\textends AbstractThymeleafViewResolverConfiguration {\n-\n-\t\t\tThymeleaf3ViewResolverConfiguration(ThymeleafProperties properties,\n-\t\t\t\t\tSpringTemplateEngine templateEngine) {\n-\t\t\t\tsuper(properties, templateEngine);\n-\t\t\t}\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(name = "thymeleafViewResolver")\n+\t\t@ConditionalOnProperty(name = "spring.thymeleaf.enabled", matchIfMissing = true)\n+\t\tpublic ThymeleafViewResolver thymeleafViewResolver() {\n+\t\t\tThymeleafViewResolver resolver = new ThymeleafViewResolver();\n+\t\t\tresolver.setTemplateEngine(this.templateEngine);\n+\t\t\tresolver.setCharacterEncoding(this.properties.getEncoding().name());\n+\t\t\tresolver.setContentType(appendCharset(this.properties.getContentType(),\n+\t\t\t\t\tresolver.getCharacterEncoding()));\n+\t\t\tresolver.setExcludedViewNames(this.properties.getExcludedViewNames());\n+\t\t\tresolver.setViewNames(this.properties.getViewNames());\n+\t\t\t// This resolver acts as a fallback resolver (e.g. like a\n+\t\t\t// InternalResourceViewResolver) so it needs to have low precedence\n+\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 5);\n+\t\t\tresolver.setCache(this.properties.isCache());\n+\t\t\treturn resolver;\n+\t\t}\n \n-\t\t\t@Override\n-\t\t\tprotected void configureTemplateEngine(ThymeleafViewResolver resolver,\n-\t\t\t\t\tSpringTemplateEngine templateEngine) {\n-\t\t\t\tMethod setTemplateEngine;\n-\t\t\t\ttry {\n-\t\t\t\t\tsetTemplateEngine = ReflectionUtils.findMethod(resolver.getClass(),\n-\t\t\t\t\t\t\t"setTemplateEngine",\n-\t\t\t\t\t\t\tClass.forName("org.thymeleaf.ITemplateEngine", true,\n-\t\t\t\t\t\t\t\t\tresolver.getClass().getClassLoader()));\n-\t\t\t\t}\n-\t\t\t\tcatch (ClassNotFoundException ex) {\n-\t\t\t\t\tthrow new IllegalStateException(ex);\n-\t\t\t\t}\n-\t\t\t\tReflectionUtils.invokeMethod(setTemplateEngine, resolver, templateEngine);\n+\t\tprivate String appendCharset(MimeType type, String charset) {\n+\t\t\tif (type.getCharset() != null) {\n+\t\t\t\treturn type.toString();\n \t\t\t}\n-\n+\t\t\tLinkedHashMap<String, String> parameters = new LinkedHashMap<String, String>();\n+\t\t\tparameters.put("charset", charset);\n+\t\t\tparameters.putAll(type.getParameters());\n+\t\t\treturn new MimeType(type, parameters).toString();\n \t\t}\n \n \t}\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.thymeleaf;\n\nimport java.util.Collection;\nimport java.util.LinkedHashMap;\n\nimport javax.annotation.PostConstruct;\nimport javax.servlet.Servlet;\n\nimport com.github.mxab.thymeleaf.extras.dataattribute.dialect.DataAttributeDialect;\nimport nz.net.ultraq.thymeleaf.LayoutDialect;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.thymeleaf.dialect.IDialect;\nimport org.thymeleaf.extras.java8time.dialect.Java8TimeDialect;\nimport org.thymeleaf.extras.springsecurity4.dialect.SpringSecurityDialect;\nimport org.thymeleaf.spring5.SpringTemplateEngine;\nimport org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver;\nimport org.thymeleaf.spring5.view.ThymeleafViewResolver;\nimport org.thymeleaf.templatemode.TemplateMode;\nimport org.thymeleaf.templateresolver.ITemplateResolver;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.template.TemplateLocation;\nimport org.springframework.boot.autoconfigure.web.ConditionalOnEnabledResourceChain;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.util.MimeType;\nimport org.springframework.web.servlet.resource.ResourceUrlEncodingFilter;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Thymeleaf.\n *\n * @author Dave Syer\n * @author Andy Wilkinson\n * @author Stephane Nicoll\n * @author Brian Clozel\n * @author Eddú Meléndez\n */\n@Configuration\n@EnableConfigurationProperties(ThymeleafProperties.class)\n@ConditionalOnClass(TemplateMode.class)\n@AutoConfigureAfter(WebMvcAutoConfiguration.class)\npublic class ThymeleafAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnMissingBean(name = "defaultTemplateResolver")\n\tstatic class DefaultTemplateResolverConfiguration {\n\n\t\tprivate static final Log logger = LogFactory\n\t\t\t\t.getLog(DefaultTemplateResolverConfiguration.class);\n\n\t\tprivate final ThymeleafProperties properties;\n\n\t\tprivate final ApplicationContext applicationContext;\n\n\t\tDefaultTemplateResolverConfiguration(ThymeleafProperties properties,\n\t\t\t\tApplicationContext applicationContext) {\n\t\t\tthis.properties = properties;\n\t\t\tthis.applicationContext = applicationContext;\n\t\t}\n\n\t\t@PostConstruct\n\t\tpublic void checkTemplateLocationExists() {\n\t\t\tboolean checkTemplateLocation = this.properties.isCheckTemplateLocation();\n\t\t\tif (checkTemplateLocation) {\n\t\t\t\tTemplateLocation location = new TemplateLocation(\n\t\t\t\t\t\tthis.properties.getPrefix());\n\t\t\t\tif (!location.exists(this.applicationContext)) {\n\t\t\t\t\tlogger.warn("Cannot find template location: " + location\n\t\t\t\t\t\t\t+ " (please add some templates or check "\n\t\t\t\t\t\t\t+ "your Thymeleaf configuration)");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t@Bean\n\t\tpublic SpringResourceTemplateResolver defaultTemplateResolver() {\n\t\t\tSpringResourceTemplateResolver resolver = new SpringResourceTemplateResolver();\n\t\t\tresolver.setApplicationContext(this.applicationContext);\n\t\t\tresolver.setPrefix(this.properties.getPrefix());\n\t\t\tresolver.setSuffix(this.properties.getSuffix());\n\t\t\tresolver.setTemplateMode(this.properties.getMode());\n\t\t\tif (this.properties.getEncoding() != null) {\n\t\t\t\tresolver.setCharacterEncoding(this.properties.getEncoding().name());\n\t\t\t}\n\t\t\tresolver.setCacheable(this.properties.isCache());\n\t\t\tInteger order = this.properties.getTemplateResolverOrder();\n\t\t\tif (order != null) {\n\t\t\t\tresolver.setOrder(order);\n\t\t\t}\n\t\t\tresolver.setCheckExistence(this.properties.isCheckTemplate());\n\t\t\treturn resolver;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ Servlet.class })\n\t@ConditionalOnWebApplication\n\tstatic class ThymeleafViewResolverConfiguration {\n\n\t\tprivate final ThymeleafProperties properties;\n\n\t\tprivate final SpringTemplateEngine templateEngine;\n\n\t\tThymeleafViewResolverConfiguration(ThymeleafProperties properties,\n\t\t\t\tSpringTemplateEngine templateEngine) {\n\t\t\tthis.properties = properties;\n\t\t\tthis.templateEngine = templateEngine;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "thymeleafViewResolver")\n\t\t@ConditionalOnProperty(name = "spring.thymeleaf.enabled", matchIfMissing = true)\n\t\tpublic ThymeleafViewResolver thymeleafViewResolver() {\n\t\t\tThymeleafViewResolver resolver = new ThymeleafViewResolver();\n\t\t\tresolver.setTemplateEngine(this.templateEngine);\n\t\t\tresolver.setCharacterEncoding(this.properties.getEncoding().name());\n\t\t\tresolver.setContentType(appendCharset(this.properties.getContentType(),\n\t\t\t\t\tresolver.getCharacterEncoding()));\n\t\t\tresolver.setExcludedViewNames(this.properties.getExcludedViewNames());\n\t\t\tresolver.setViewNames(this.properties.getViewNames());\n\t\t\t// This resolver acts as a fallback resolver (e.g. like a\n\t\t\t// InternalResourceViewResolver) so it needs to have low precedence\n\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 5);\n\t\t\tresolver.setCache(this.properties.isCache());\n\t\t\treturn resolver;\n\t\t}\n\n\t\tprivate String appendCharset(MimeType type, String charset) {\n\t\t\tif (type.getCharset() != null) {\n\t\t\t\treturn type.toString();\n\t\t\t}\n\t\t\tLinkedHashMap<String, String> parameters = new LinkedHashMap<String, String>();\n\t\t\tparameters.put("charset", charset);\n\t\t\tparameters.putAll(type.getParameters());\n\t\t\treturn new MimeType(type, parameters).toString();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(SpringTemplateEngine.class)\n\tprotected static class ThymeleafDefaultConfiguration {\n\n\t\tprivate final Collection<ITemplateResolver> templateResolvers;\n\n\t\tprivate final Collection<IDialect> dialects;\n\n\t\tpublic ThymeleafDefaultConfiguration(\n\t\t\t\tCollection<ITemplateResolver> templateResolvers,\n\t\t\t\tObjectProvider<Collection<IDialect>> dialectsProvider) {\n\t\t\tthis.templateResolvers = templateResolvers;\n\t\t\tthis.dialects = dialectsProvider.getIfAvailable();\n\t\t}\n\n\t\t@Bean\n\t\tpublic SpringTemplateEngine templateEngine() {\n\t\t\tSpringTemplateEngine engine = new SpringTemplateEngine();\n\t\t\tfor (ITemplateResolver templateResolver : this.templateResolvers) {\n\t\t\t\tengine.addTemplateResolver(templateResolver);\n\t\t\t}\n\t\t\tif (!CollectionUtils.isEmpty(this.dialects)) {\n\t\t\t\tfor (IDialect dialect : this.dialects) {\n\t\t\t\t\tengine.addDialect(dialect);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn engine;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(name = "nz.net.ultraq.thymeleaf.LayoutDialect")\n\tprotected static class ThymeleafWebLayoutConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic LayoutDialect layoutDialect() {\n\t\t\treturn new LayoutDialect();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(DataAttributeDialect.class)\n\tprotected static class DataAttributeDialectConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic DataAttributeDialect dialect() {\n\t\t\treturn new DataAttributeDialect();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ SpringSecurityDialect.class })\n\tprotected static class ThymeleafSecurityDialectConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic SpringSecurityDialect securityDialect() {\n\t\t\treturn new SpringSecurityDialect();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(Java8TimeDialect.class)\n\tprotected static class ThymeleafJava8TimeDialect {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic Java8TimeDialect java8TimeDialect() {\n\t\t\treturn new Java8TimeDialect();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnWebApplication\n\tprotected static class ThymeleafResourceHandlingConfig {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnEnabledResourceChain\n\t\tpublic ResourceUrlEncodingFilter resourceUrlEncodingFilter() {\n\t\t\treturn new ResourceUrlEncodingFilter();\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.thymeleaf;\n\nimport java.lang.reflect.Method;\nimport java.util.Collection;\n\nimport javax.servlet.Servlet;\n\nimport com.github.mxab.thymeleaf.extras.dataattribute.dialect.DataAttributeDialect;\nimport nz.net.ultraq.thymeleaf.LayoutDialect;\nimport org.thymeleaf.dialect.IDialect;\nimport org.thymeleaf.extras.conditionalcomments.dialect.ConditionalCommentsDialect;\nimport org.thymeleaf.extras.java8time.dialect.Java8TimeDialect;\nimport org.thymeleaf.extras.springsecurity4.dialect.SpringSecurityDialect;\nimport org.thymeleaf.spring4.SpringTemplateEngine;\nimport org.thymeleaf.spring4.resourceresolver.SpringResourceResourceResolver;\nimport org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver;\nimport org.thymeleaf.spring4.view.ThymeleafViewResolver;\nimport org.thymeleaf.templateresolver.ITemplateResolver;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.web.ConditionalOnEnabledResourceChain;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.util.ReflectionUtils;\nimport org.springframework.web.servlet.resource.ResourceUrlEncodingFilter;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Thymeleaf.\n *\n * @author Dave Syer\n * @author Andy Wilkinson\n * @author Stephane Nicoll\n * @author Brian Clozel\n * @author Eddú Meléndez\n */\n@Configuration\n@EnableConfigurationProperties(ThymeleafProperties.class)\n@ConditionalOnClass(SpringTemplateEngine.class)\n@AutoConfigureAfter(WebMvcAutoConfiguration.class)\npublic class ThymeleafAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnMissingClass("org.thymeleaf.templatemode.TemplateMode")\n\tstatic class Thymeleaf2Configuration {\n\n\t\t@Configuration\n\t\t@ConditionalOnMissingBean(name = "defaultTemplateResolver")\n\t\tstatic class DefaultTemplateResolverConfiguration\n\t\t\t\textends AbstractTemplateResolverConfiguration {\n\n\t\t\tDefaultTemplateResolverConfiguration(ThymeleafProperties properties,\n\t\t\t\t\tApplicationContext applicationContext) {\n\t\t\t\tsuper(properties, applicationContext);\n\t\t\t}\n\n\t\t\t@Bean\n\t\t\tpublic SpringResourceResourceResolver thymeleafResourceResolver() {\n\t\t\t\treturn new SpringResourceResourceResolver();\n\t\t\t}\n\n\t\t}\n\n\t\t@Configuration\n\t\t@ConditionalOnClass({ Servlet.class })\n\t\t@ConditionalOnWebApplication\n\t\tstatic class Thymeleaf2ViewResolverConfiguration\n\t\t\t\textends AbstractThymeleafViewResolverConfiguration {\n\n\t\t\tThymeleaf2ViewResolverConfiguration(ThymeleafProperties properties,\n\t\t\t\t\tSpringTemplateEngine templateEngine) {\n\t\t\t\tsuper(properties, templateEngine);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tprotected void configureTemplateEngine(ThymeleafViewResolver resolver,\n\t\t\t\t\tSpringTemplateEngine templateEngine) {\n\t\t\t\tresolver.setTemplateEngine(templateEngine);\n\t\t\t}\n\n\t\t}\n\n\t\t@Configuration\n\t\t@ConditionalOnClass(ConditionalCommentsDialect.class)\n\t\tstatic class ThymeleafConditionalCommentsDialectConfiguration {\n\n\t\t\t@Bean\n\t\t\t@ConditionalOnMissingBean\n\t\t\tpublic ConditionalCommentsDialect conditionalCommentsDialect() {\n\t\t\t\treturn new ConditionalCommentsDialect();\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(name = "org.thymeleaf.templatemode.TemplateMode")\n\tstatic class Thymeleaf3Configuration {\n\n\t\t@Configuration\n\t\t@ConditionalOnMissingBean(name = "defaultTemplateResolver")\n\t\tstatic class DefaultTemplateResolverConfiguration\n\t\t\t\textends AbstractTemplateResolverConfiguration {\n\n\t\t\tDefaultTemplateResolverConfiguration(ThymeleafProperties properties,\n\t\t\t\t\tApplicationContext applicationContext) {\n\t\t\t\tsuper(properties, applicationContext);\n\t\t\t}\n\n\t\t\t@Bean\n\t\t\t@Override\n\t\t\tpublic SpringResourceTemplateResolver defaultTemplateResolver() {\n\t\t\t\tSpringResourceTemplateResolver resolver = super.defaultTemplateResolver();\n\t\t\t\tMethod setCheckExistence = ReflectionUtils.findMethod(resolver.getClass(),\n\t\t\t\t\t\t"setCheckExistence", boolean.class);\n\t\t\t\tReflectionUtils.invokeMethod(setCheckExistence, resolver,\n\t\t\t\t\t\tgetProperties().isCheckTemplate());\n\t\t\t\treturn resolver;\n\t\t\t}\n\n\t\t}\n\n\t\t@Configuration\n\t\t@ConditionalOnClass({ Servlet.class })\n\t\t@ConditionalOnWebApplication\n\t\tstatic class Thymeleaf3ViewResolverConfiguration\n\t\t\t\textends AbstractThymeleafViewResolverConfiguration {\n\n\t\t\tThymeleaf3ViewResolverConfiguration(ThymeleafProperties properties,\n\t\t\t\t\tSpringTemplateEngine templateEngine) {\n\t\t\t\tsuper(properties, templateEngine);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tprotected void configureTemplateEngine(ThymeleafViewResolver resolver,\n\t\t\t\t\tSpringTemplateEngine templateEngine) {\n\t\t\t\tMethod setTemplateEngine;\n\t\t\t\ttry {\n\t\t\t\t\tsetTemplateEngine = ReflectionUtils.findMethod(resolver.getClass(),\n\t\t\t\t\t\t\t"setTemplateEngine",\n\t\t\t\t\t\t\tClass.forName("org.thymeleaf.ITemplateEngine", true,\n\t\t\t\t\t\t\t\t\tresolver.getClass().getClassLoader()));\n\t\t\t\t}\n\t\t\t\tcatch (ClassNotFoundException ex) {\n\t\t\t\t\tthrow new IllegalStateException(ex);\n\t\t\t\t}\n\t\t\t\tReflectionUtils.invokeMethod(setTemplateEngine, resolver, templateEngine);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(SpringTemplateEngine.class)\n\tprotected static class ThymeleafDefaultConfiguration {\n\n\t\tprivate final Collection<ITemplateResolver> templateResolvers;\n\n\t\tprivate final Collection<IDialect> dialects;\n\n\t\tpublic ThymeleafDefaultConfiguration(\n\t\t\t\tCollection<ITemplateResolver> templateResolvers,\n\t\t\t\tObjectProvider<Collection<IDialect>> dialectsProvider) {\n\t\t\tthis.templateResolvers = templateResolvers;\n\t\t\tthis.dialects = dialectsProvider.getIfAvailable();\n\t\t}\n\n\t\t@Bean\n\t\tpublic SpringTemplateEngine templateEngine() {\n\t\t\tSpringTemplateEngine engine = new SpringTemplateEngine();\n\t\t\tfor (ITemplateResolver templateResolver : this.templateResolvers) {\n\t\t\t\tengine.addTemplateResolver(templateResolver);\n\t\t\t}\n\t\t\tif (!CollectionUtils.isEmpty(this.dialects)) {\n\t\t\t\tfor (IDialect dialect : this.dialects) {\n\t\t\t\t\tengine.addDialect(dialect);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn engine;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(name = "nz.net.ultraq.thymeleaf.LayoutDialect")\n\tprotected static class ThymeleafWebLayoutConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic LayoutDialect layoutDialect() {\n\t\t\treturn new LayoutDialect();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(DataAttributeDialect.class)\n\tprotected static class DataAttributeDialectConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic DataAttributeDialect dialect() {\n\t\t\treturn new DataAttributeDialect();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ SpringSecurityDialect.class })\n\tprotected static class ThymeleafSecurityDialectConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic SpringSecurityDialect securityDialect() {\n\t\t\treturn new SpringSecurityDialect();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(Java8TimeDialect.class)\n\tprotected static class ThymeleafJava8TimeDialect {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic Java8TimeDialect java8TimeDialect() {\n\t\t\treturn new Java8TimeDialect();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnWebApplication\n\tprotected static class ThymeleafResourceHandlingConfig {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnEnabledResourceChain\n\t\tpublic ResourceUrlEncodingFilter resourceUrlEncodingFilter() {\n\t\t\treturn new ResourceUrlEncodingFilter();\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
