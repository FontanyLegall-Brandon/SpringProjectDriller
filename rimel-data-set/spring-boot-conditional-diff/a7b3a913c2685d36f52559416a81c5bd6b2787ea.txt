@@ -0,0 +1,78 @@
+
+
+package org.springframework.boot.autoconfigure.ws;
+
+import java.util.Map;
+
+import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
+import org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration;
+import org.springframework.boot.context.embedded.ServletRegistrationBean;
+import org.springframework.boot.context.properties.EnableConfigurationProperties;
+import org.springframework.context.ApplicationContext;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Import;
+import org.springframework.ws.config.annotation.DelegatingWsConfiguration;
+import org.springframework.ws.config.annotation.WsConfigurationSupport;
+import org.springframework.ws.transport.http.MessageDispatcherServlet;
+
+
+@Configuration
+@ConditionalOnWebApplication
+@ConditionalOnClass(MessageDispatcherServlet.class)
+@ConditionalOnMissingBean(WsConfigurationSupport.class)
+@EnableConfigurationProperties(WsProperties.class)
+@AutoConfigureAfter(EmbeddedServletContainerAutoConfiguration.class)
+public class WsAutoConfiguration {
+
+	private WsProperties properties;
+
+	public WsAutoConfiguration(WsProperties properties) {
+		this.properties = properties;
+	}
+
+	@Bean
+	public ServletRegistrationBean messageDispatcherServlet(
+			ApplicationContext applicationContext) {
+		MessageDispatcherServlet servlet = new MessageDispatcherServlet();
+		servlet.setApplicationContext(applicationContext);
+		String path = this.properties.getPath();
+		String urlMapping = (path.endsWith() ? path +  : path + );
+		ServletRegistrationBean registration = new ServletRegistrationBean(
+				servlet, urlMapping);
+		registration.setLoadOnStartup(this.properties.getServlet().getLoadOnStartup());
+		for (Map.Entry<String, String> entry : this.properties.getInit().entrySet()) {
+			registration.addInitParameter(entry.getKey(), entry.getValue());
+		}
+		return registration;
+	}
+
+	@Configuration
+	@Import(DelegatingWsConfiguration.class)
+	protected static class WsConfiguration {
+	}
+
+}

