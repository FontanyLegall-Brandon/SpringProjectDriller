{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/reactive/WebFluxEndpointManagementContextConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/reactive/WebFluxEndpointManagementContextConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -17,17 +17,24 @@\n package org.springframework.boot.actuate.autoconfigure.endpoint.web.reactive;\n \n import org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties;\n+import org.springframework.boot.actuate.autoconfigure.endpoint.web.servlet.CorsEndpointProperties;\n import org.springframework.boot.actuate.autoconfigure.web.ManagementContextConfiguration;\n import org.springframework.boot.actuate.endpoint.annotation.Endpoint;\n import org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes;\n import org.springframework.boot.actuate.endpoint.web.annotation.WebAnnotationEndpointDiscoverer;\n import org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.boot.endpoint.web.EndpointMapping;\n import org.springframework.context.annotation.Bean;\n+import org.springframework.http.server.reactive.HttpHandler;\n+import org.springframework.util.CollectionUtils;\n+import org.springframework.web.cors.CorsConfiguration;\n+import org.springframework.web.reactive.DispatcherHandler;\n \n /**\n  * {@link ManagementContextConfiguration} for Reactive {@link Endpoint} concerns.\n@@ -38,18 +45,44 @@ import org.springframework.context.annotation.Bean;\n  */\n @ManagementContextConfiguration\n @ConditionalOnWebApplication(type = Type.REACTIVE)\n+@ConditionalOnClass({ DispatcherHandler.class, HttpHandler.class })\n @ConditionalOnBean(WebAnnotationEndpointDiscoverer.class)\n+@EnableConfigurationProperties(CorsEndpointProperties.class)\n public class WebFluxEndpointManagementContextConfiguration {\n \n \t@Bean\n \t@ConditionalOnMissingBean\n \tpublic WebFluxEndpointHandlerMapping webEndpointReactiveHandlerMapping(\n \t\t\tWebAnnotationEndpointDiscoverer endpointDiscoverer,\n-\t\t\tEndpointMediaTypes endpointMediaTypes,\n+\t\t\tEndpointMediaTypes endpointMediaTypes, CorsEndpointProperties corsProperties,\n \t\t\tWebEndpointProperties webEndpointProperties) {\n \t\treturn new WebFluxEndpointHandlerMapping(\n \t\t\t\tnew EndpointMapping(webEndpointProperties.getBasePath()),\n-\t\t\t\tendpointDiscoverer.discoverEndpoints(), endpointMediaTypes);\n+\t\t\t\tendpointDiscoverer.discoverEndpoints(), endpointMediaTypes, getCorsConfiguration(corsProperties));\n+\t}\n+\n+\tprivate CorsConfiguration getCorsConfiguration(CorsEndpointProperties properties) {\n+\t\tif (CollectionUtils.isEmpty(properties.getAllowedOrigins())) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tCorsConfiguration configuration = new CorsConfiguration();\n+\t\tconfiguration.setAllowedOrigins(properties.getAllowedOrigins());\n+\t\tif (!CollectionUtils.isEmpty(properties.getAllowedHeaders())) {\n+\t\t\tconfiguration.setAllowedHeaders(properties.getAllowedHeaders());\n+\t\t}\n+\t\tif (!CollectionUtils.isEmpty(properties.getAllowedMethods())) {\n+\t\t\tconfiguration.setAllowedMethods(properties.getAllowedMethods());\n+\t\t}\n+\t\tif (!CollectionUtils.isEmpty(properties.getExposedHeaders())) {\n+\t\t\tconfiguration.setExposedHeaders(properties.getExposedHeaders());\n+\t\t}\n+\t\tif (properties.getMaxAge() != null) {\n+\t\t\tconfiguration.setMaxAge(properties.getMaxAge().getSeconds());\n+\t\t}\n+\t\tif (properties.getAllowCredentials() != null) {\n+\t\t\tconfiguration.setAllowCredentials(properties.getAllowCredentials());\n+\t\t}\n+\t\treturn configuration;\n \t}\n \n }\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.endpoint.web.reactive;\n\nimport org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties;\nimport org.springframework.boot.actuate.autoconfigure.endpoint.web.servlet.CorsEndpointProperties;\nimport org.springframework.boot.actuate.autoconfigure.web.ManagementContextConfiguration;\nimport org.springframework.boot.actuate.endpoint.annotation.Endpoint;\nimport org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes;\nimport org.springframework.boot.actuate.endpoint.web.annotation.WebAnnotationEndpointDiscoverer;\nimport org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.endpoint.web.EndpointMapping;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.http.server.reactive.HttpHandler;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.reactive.DispatcherHandler;\n\n/**\n * {@link ManagementContextConfiguration} for Reactive {@link Endpoint} concerns.\n *\n * @author Andy Wilkinson\n * @author Phillip Webb\n * @since 2.0.0\n */\n@ManagementContextConfiguration\n@ConditionalOnWebApplication(type = Type.REACTIVE)\n@ConditionalOnClass({ DispatcherHandler.class, HttpHandler.class })\n@ConditionalOnBean(WebAnnotationEndpointDiscoverer.class)\n@EnableConfigurationProperties(CorsEndpointProperties.class)\npublic class WebFluxEndpointManagementContextConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic WebFluxEndpointHandlerMapping webEndpointReactiveHandlerMapping(\n\t\t\tWebAnnotationEndpointDiscoverer endpointDiscoverer,\n\t\t\tEndpointMediaTypes endpointMediaTypes, CorsEndpointProperties corsProperties,\n\t\t\tWebEndpointProperties webEndpointProperties) {\n\t\treturn new WebFluxEndpointHandlerMapping(\n\t\t\t\tnew EndpointMapping(webEndpointProperties.getBasePath()),\n\t\t\t\tendpointDiscoverer.discoverEndpoints(), endpointMediaTypes, getCorsConfiguration(corsProperties));\n\t}\n\n\tprivate CorsConfiguration getCorsConfiguration(CorsEndpointProperties properties) {\n\t\tif (CollectionUtils.isEmpty(properties.getAllowedOrigins())) {\n\t\t\treturn null;\n\t\t}\n\t\tCorsConfiguration configuration = new CorsConfiguration();\n\t\tconfiguration.setAllowedOrigins(properties.getAllowedOrigins());\n\t\tif (!CollectionUtils.isEmpty(properties.getAllowedHeaders())) {\n\t\t\tconfiguration.setAllowedHeaders(properties.getAllowedHeaders());\n\t\t}\n\t\tif (!CollectionUtils.isEmpty(properties.getAllowedMethods())) {\n\t\t\tconfiguration.setAllowedMethods(properties.getAllowedMethods());\n\t\t}\n\t\tif (!CollectionUtils.isEmpty(properties.getExposedHeaders())) {\n\t\t\tconfiguration.setExposedHeaders(properties.getExposedHeaders());\n\t\t}\n\t\tif (properties.getMaxAge() != null) {\n\t\t\tconfiguration.setMaxAge(properties.getMaxAge().getSeconds());\n\t\t}\n\t\tif (properties.getAllowCredentials() != null) {\n\t\t\tconfiguration.setAllowCredentials(properties.getAllowCredentials());\n\t\t}\n\t\treturn configuration;\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.endpoint.web.reactive;\n\nimport org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties;\nimport org.springframework.boot.actuate.autoconfigure.web.ManagementContextConfiguration;\nimport org.springframework.boot.actuate.endpoint.annotation.Endpoint;\nimport org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes;\nimport org.springframework.boot.actuate.endpoint.web.annotation.WebAnnotationEndpointDiscoverer;\nimport org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.endpoint.web.EndpointMapping;\nimport org.springframework.context.annotation.Bean;\n\n/**\n * {@link ManagementContextConfiguration} for Reactive {@link Endpoint} concerns.\n *\n * @author Andy Wilkinson\n * @author Phillip Webb\n * @since 2.0.0\n */\n@ManagementContextConfiguration\n@ConditionalOnWebApplication(type = Type.REACTIVE)\n@ConditionalOnBean(WebAnnotationEndpointDiscoverer.class)\npublic class WebFluxEndpointManagementContextConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic WebFluxEndpointHandlerMapping webEndpointReactiveHandlerMapping(\n\t\t\tWebAnnotationEndpointDiscoverer endpointDiscoverer,\n\t\t\tEndpointMediaTypes endpointMediaTypes,\n\t\t\tWebEndpointProperties webEndpointProperties) {\n\t\treturn new WebFluxEndpointHandlerMapping(\n\t\t\t\tnew EndpointMapping(webEndpointProperties.getBasePath()),\n\t\t\t\tendpointDiscoverer.discoverEndpoints(), endpointMediaTypes);\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
