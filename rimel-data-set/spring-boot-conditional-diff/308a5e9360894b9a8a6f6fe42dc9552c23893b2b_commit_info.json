{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cassandra/CassandraReactiveHealthIndicatorAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cassandra/CassandraReactiveHealthIndicatorAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -61,7 +61,7 @@ public class CassandraReactiveHealthIndicatorAutoConfiguration extends\n \t}\n \n \t@Bean\n-\t@ConditionalOnMissingBean(name = "cassandraReactiveHealthIndicator")\n+\t@ConditionalOnMissingBean(name = "cassandraHealthIndicator")\n \tpublic ReactiveHealthIndicator cassandraHealthIndicator() {\n \t\treturn createHealthIndicator(this.reactiveCassandraOperations);\n \t}\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.boot.actuate.autoconfigure.cassandra;\n\nimport java.util.Map;\n\nimport com.datastax.driver.core.Cluster;\nimport reactor.core.publisher.Flux;\n\nimport org.springframework.boot.actuate.autoconfigure.health.CompositeReactiveHealthIndicatorConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.health.ConditionalOnEnabledHealthIndicator;\nimport org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration;\nimport org.springframework.boot.actuate.cassandra.CassandraReactiveHealthIndicator;\nimport org.springframework.boot.actuate.health.ReactiveHealthIndicator;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.cassandra.core.ReactiveCassandraOperations;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for\n * {@link CassandraReactiveHealthIndicator}.\n *\n * @author Artsiom Yudovin\n * @author Stephane Nicoll\n * @since 2.1.0\n */\n@Configuration\n@ConditionalOnClass({ Cluster.class, ReactiveCassandraOperations.class, Flux.class })\n@ConditionalOnBean(ReactiveCassandraOperations.class)\n@ConditionalOnEnabledHealthIndicator("cassandra")\n@AutoConfigureBefore(HealthIndicatorAutoConfiguration.class)\n@AutoConfigureAfter(CassandraReactiveDataAutoConfiguration.class)\npublic class CassandraReactiveHealthIndicatorAutoConfiguration extends\n\t\tCompositeReactiveHealthIndicatorConfiguration<CassandraReactiveHealthIndicator, ReactiveCassandraOperations> {\n\n\tprivate final Map<String, ReactiveCassandraOperations> reactiveCassandraOperations;\n\n\tpublic CassandraReactiveHealthIndicatorAutoConfiguration(\n\t\t\tMap<String, ReactiveCassandraOperations> reactiveCassandraOperations) {\n\t\tthis.reactiveCassandraOperations = reactiveCassandraOperations;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "cassandraHealthIndicator")\n\tpublic ReactiveHealthIndicator cassandraHealthIndicator() {\n\t\treturn createHealthIndicator(this.reactiveCassandraOperations);\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.boot.actuate.autoconfigure.cassandra;\n\nimport java.util.Map;\n\nimport com.datastax.driver.core.Cluster;\nimport reactor.core.publisher.Flux;\n\nimport org.springframework.boot.actuate.autoconfigure.health.CompositeReactiveHealthIndicatorConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.health.ConditionalOnEnabledHealthIndicator;\nimport org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration;\nimport org.springframework.boot.actuate.cassandra.CassandraReactiveHealthIndicator;\nimport org.springframework.boot.actuate.health.ReactiveHealthIndicator;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.cassandra.core.ReactiveCassandraOperations;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for\n * {@link CassandraReactiveHealthIndicator}.\n *\n * @author Artsiom Yudovin\n * @author Stephane Nicoll\n * @since 2.1.0\n */\n@Configuration\n@ConditionalOnClass({ Cluster.class, ReactiveCassandraOperations.class, Flux.class })\n@ConditionalOnBean(ReactiveCassandraOperations.class)\n@ConditionalOnEnabledHealthIndicator("cassandra")\n@AutoConfigureBefore(HealthIndicatorAutoConfiguration.class)\n@AutoConfigureAfter(CassandraReactiveDataAutoConfiguration.class)\npublic class CassandraReactiveHealthIndicatorAutoConfiguration extends\n\t\tCompositeReactiveHealthIndicatorConfiguration<CassandraReactiveHealthIndicator, ReactiveCassandraOperations> {\n\n\tprivate final Map<String, ReactiveCassandraOperations> reactiveCassandraOperations;\n\n\tpublic CassandraReactiveHealthIndicatorAutoConfiguration(\n\t\t\tMap<String, ReactiveCassandraOperations> reactiveCassandraOperations) {\n\t\tthis.reactiveCassandraOperations = reactiveCassandraOperations;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "cassandraReactiveHealthIndicator")\n\tpublic ReactiveHealthIndicator cassandraHealthIndicator() {\n\t\treturn createHealthIndicator(this.reactiveCassandraOperations);\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
