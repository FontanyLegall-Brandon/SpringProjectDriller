@@ -31,22 +31,16 @@ import org.springframework.beans.factory.support.BeanDefinitionRegistry;
 import org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;
 import org.springframework.beans.factory.support.RootBeanDefinition;
 import org.springframework.boot.autoconfigure.AutoConfigureBefore;
-import org.springframework.boot.autoconfigure.condition.ConditionMessage;
-import org.springframework.boot.autoconfigure.condition.ConditionOutcome;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
-import org.springframework.boot.autoconfigure.condition.SpringBootCondition;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;
 import org.springframework.boot.autoconfigure.jdbc.EmbeddedDatabaseConnection;
-import org.springframework.boot.bind.RelaxedPropertyResolver;
 import org.springframework.context.EnvironmentAware;
 import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.ConditionContext;
-import org.springframework.context.annotation.Conditional;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.core.Ordered;
 import org.springframework.core.annotation.Order;
 import org.springframework.core.env.Environment;
-import org.springframework.core.type.AnnotatedTypeMetadata;
 import org.springframework.jdbc.datasource.embedded.EmbeddedDatabase;
 import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;
 import org.springframework.util.Assert;
@@ -56,7 +50,6 @@ import org.springframework.util.ObjectUtils;
  * Auto-configuration for a test database.
  *
  * @author Phillip Webb
- * @author Eddú Meléndez
  * @since 1.4.0
  * @see AutoConfigureTestDatabase
  */
@@ -64,9 +57,6 @@ import org.springframework.util.ObjectUtils;
 @AutoConfigureBefore(DataSourceAutoConfiguration.class)
 public class TestDatabaseAutoConfiguration {
 
-	private static final String SPRING_TEST_DATABASE_PREFIX = ;
-	private static final String REPLACE_PROPERTY = ;
-
 	private final Environment environment;
 
 	TestDatabaseAutoConfiguration(Environment environment) {
@@ -74,55 +64,18 @@ public class TestDatabaseAutoConfiguration {
 	}
 
 	@Bean
-	@Conditional(TestDatabaseReplaceAutoConfiguredCondition.class)
+	@ConditionalOnProperty(prefix = , name = , havingValue = )
 	@ConditionalOnMissingBean
 	public DataSource dataSource() {
 		return new EmbeddedDataSourceFactory(this.environment).getEmbeddedDatabase();
 	}
 
 	@Bean
-	@Conditional(TestDatabaseReplaceAnyCondition.class)
+	@ConditionalOnProperty(prefix = , name = , havingValue = , matchIfMissing = true)
 	public static EmbeddedDataSourceBeanFactoryPostProcessor embeddedDataSourceBeanFactoryPostProcessor() {
 		return new EmbeddedDataSourceBeanFactoryPostProcessor();
 	}
 
-	static class TestDatabaseReplaceAutoConfiguredCondition extends SpringBootCondition {
-
-		@Override
-		public ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata
-				metadata) {
-			RelaxedPropertyResolver resolver = new RelaxedPropertyResolver(context.getEnvironment(), SPRING_TEST_DATABASE_PREFIX);
-			ConditionMessage.Builder message = ConditionMessage
-					.forCondition();
-			if (resolver.containsProperty(REPLACE_PROPERTY) && .equals(resolver.getProperty(REPLACE_PROPERTY))) {
-				return ConditionOutcome.noMatch(message.didNotFind().atAll());
-			}
-			else if (resolver.containsProperty(REPLACE_PROPERTY) && .equals(resolver.getProperty(REPLACE_PROPERTY))) {
-				return ConditionOutcome.match(message.found().atAll());
-			}
-			return ConditionOutcome.noMatch(message.didNotFind().atAll());
-		}
-
-	}
-
-	static class TestDatabaseReplaceAnyCondition extends SpringBootCondition {
-
-		@Override
-		public ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata metadata) {
-			RelaxedPropertyResolver resolver = new RelaxedPropertyResolver(context.getEnvironment(), SPRING_TEST_DATABASE_PREFIX);
-			ConditionMessage.Builder message = ConditionMessage
-					.forCondition();
-			if (resolver.containsProperty(REPLACE_PROPERTY) && .equals(resolver.getProperty(REPLACE_PROPERTY))) {
-				return ConditionOutcome.noMatch(message.didNotFind().atAll());
-			}
-			else if (!resolver.containsProperty(REPLACE_PROPERTY) || .equals(resolver.getProperty(REPLACE_PROPERTY))) {
-				return ConditionOutcome.match(message.found().atAll());
-			}
-			return ConditionOutcome.noMatch(message.didNotFind().atAll());
-		}
-
-	}
-
 	@Order(Ordered.LOWEST_PRECEDENCE)
 	private static class EmbeddedDataSourceBeanFactoryPostProcessor
 			implements BeanDefinitionRegistryPostProcessor {

