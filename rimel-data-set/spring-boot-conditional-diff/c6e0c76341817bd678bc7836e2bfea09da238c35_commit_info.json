{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/aop/AopAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/aop/AopAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -37,13 +37,13 @@ public class AopAutoConfiguration {\n \n \t@Configuration\n \t@EnableAspectJAutoProxy(proxyTargetClass = false)\n-\t@ConditionalOnExpression("!${spring.aop.proxyTargetClass:false}")\n+\t@ConditionalOnExpression("!${spring.aop.proxyTargetClass:true}")\n \tpublic static class JdkDynamicAutoProxyConfiguration {\n \t}\n \n \t@Configuration\n \t@EnableAspectJAutoProxy(proxyTargetClass = true)\n-\t@ConditionalOnExpression("${spring.aop.proxyTargetClass:false}")\n+\t@ConditionalOnExpression("${spring.aop.proxyTargetClass:true}")\n \tpublic static class CglibAutoProxyConfiguration {\n \t}\n \n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.aop;\n\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.reflect.Advice;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.EnableAspectJAutoProxy;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring AOP.\n * \n * @author Dave Syer\n * @see EnableAspectJAutoProxy\n */\n@Configuration\n@ConditionalOnClass({ EnableAspectJAutoProxy.class, Aspect.class, Advice.class })\n@ConditionalOnExpression("${spring.aop.auto:true}")\npublic class AopAutoConfiguration {\n\n\t@Configuration\n\t@EnableAspectJAutoProxy(proxyTargetClass = false)\n\t@ConditionalOnExpression("!${spring.aop.proxyTargetClass:true}")\n\tpublic static class JdkDynamicAutoProxyConfiguration {\n\t}\n\n\t@Configuration\n\t@EnableAspectJAutoProxy(proxyTargetClass = true)\n\t@ConditionalOnExpression("${spring.aop.proxyTargetClass:true}")\n\tpublic static class CglibAutoProxyConfiguration {\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.aop;\n\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.reflect.Advice;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.EnableAspectJAutoProxy;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring AOP.\n * \n * @author Dave Syer\n * @see EnableAspectJAutoProxy\n */\n@Configuration\n@ConditionalOnClass({ EnableAspectJAutoProxy.class, Aspect.class, Advice.class })\n@ConditionalOnExpression("${spring.aop.auto:true}")\npublic class AopAutoConfiguration {\n\n\t@Configuration\n\t@EnableAspectJAutoProxy(proxyTargetClass = false)\n\t@ConditionalOnExpression("!${spring.aop.proxyTargetClass:false}")\n\tpublic static class JdkDynamicAutoProxyConfiguration {\n\t}\n\n\t@Configuration\n\t@EnableAspectJAutoProxy(proxyTargetClass = true)\n\t@ConditionalOnExpression("${spring.aop.proxyTargetClass:false}")\n\tpublic static class CglibAutoProxyConfiguration {\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
