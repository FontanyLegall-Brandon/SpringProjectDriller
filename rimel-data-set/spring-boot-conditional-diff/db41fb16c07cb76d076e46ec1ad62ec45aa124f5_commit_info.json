{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hazelcast/HazelcastAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hazelcast/HazelcastAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -17,12 +17,6 @@\n package org.springframework.boot.autoconfigure.hazelcast;\n \n import java.io.IOException;\n-import java.net.URL;\n-\n-import com.hazelcast.config.Config;\n-import com.hazelcast.config.XmlConfigBuilder;\n-import com.hazelcast.core.Hazelcast;\n-import com.hazelcast.core.HazelcastInstance;\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n@@ -34,9 +28,10 @@ import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.core.io.Resource;\n-import org.springframework.util.Assert;\n-import org.springframework.util.ResourceUtils;\n-import org.springframework.util.StringUtils;\n+\n+import com.hazelcast.config.Config;\n+import com.hazelcast.core.Hazelcast;\n+import com.hazelcast.core.HazelcastInstance;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for Hazelcast. Creates a\n@@ -53,37 +48,8 @@ import org.springframework.util.StringUtils;\n @EnableConfigurationProperties(HazelcastProperties.class)\n public class HazelcastAutoConfiguration {\n \n-\n-\t/**\n-\t * Create a {@link HazelcastInstance} based on the specified configuration location.\n-\t * @param location the location of the configuration file\n-\t * @return a {@link HazelcastInstance} for the specified configuration\n-\t * @throws IOException the configuration file could not be read\n-\t */\n-\tpublic static HazelcastInstance createHazelcastInstance(Resource location)\n-\t\t\tthrows IOException {\n-\t\tAssert.notNull(location, "Config must not be null");\n-\t\tURL configUrl = location.getURL();\n-\t\tConfig config = new XmlConfigBuilder(configUrl).build();\n-\t\tif (ResourceUtils.isFileURL(configUrl)) {\n-\t\t\tconfig.setConfigurationFile(location.getFile());\n-\t\t}\n-\t\telse {\n-\t\t\tconfig.setConfigurationUrl(configUrl);\n-\t\t}\n-\t\treturn createHazelcastInstance(config);\n-\t}\n-\n-\tprivate static HazelcastInstance createHazelcastInstance(Config config) {\n-\t\tif (StringUtils.hasText(config.getInstanceName())) {\n-\t\t\treturn Hazelcast.getOrCreateHazelcastInstance(config);\n-\t\t}\n-\t\treturn Hazelcast.newHazelcastInstance(config);\n-\t}\n-\n-\n \t@Configuration\n-\t@ConditionalOnMissingBean({HazelcastInstance.class, Config.class})\n+\t@ConditionalOnMissingBean({ HazelcastInstance.class, Config.class })\n \t@Conditional(ConfigAvailableCondition.class)\n \tstatic class HazelcastConfigFileConfiguration {\n \n@@ -95,7 +61,7 @@ public class HazelcastAutoConfiguration {\n \t\tpublic HazelcastInstance hazelcastInstance() throws IOException {\n \t\t\tResource config = this.hazelcastProperties.resolveConfigLocation();\n \t\t\tif (config != null) {\n-\t\t\t\treturn createHazelcastInstance(config);\n+\t\t\t\treturn new HazelcastInstanceFactory(config).getHazelcastInstance();\n \t\t\t}\n \t\t\treturn Hazelcast.newHazelcastInstance();\n \t\t}\n@@ -109,7 +75,7 @@ public class HazelcastAutoConfiguration {\n \n \t\t@Bean\n \t\tpublic HazelcastInstance hazelcastInstance(Config config) {\n-\t\t\treturn createHazelcastInstance(config);\n+\t\t\treturn new HazelcastInstanceFactory(config).getHazelcastInstance();\n \t\t}\n \n \t}\n@@ -123,6 +89,7 @@ public class HazelcastAutoConfiguration {\n \t\tpublic ConfigAvailableCondition() {\n \t\t\tsuper("spring.hazelcast", "config");\n \t\t}\n+\n \t}\n \n }\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.hazelcast;\n\nimport java.io.IOException;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.Resource;\n\nimport com.hazelcast.config.Config;\nimport com.hazelcast.core.Hazelcast;\nimport com.hazelcast.core.HazelcastInstance;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Hazelcast. Creates a\n * {@link HazelcastInstance} based on explicit configuration or when a default\n * configuration file is found in the environment.\n *\n * @author Stephane Nicoll\n * @since 1.3.0\n * @see HazelcastConfigResourceCondition\n */\n@Configuration\n@ConditionalOnClass(HazelcastInstance.class)\n@ConditionalOnMissingBean(HazelcastInstance.class)\n@EnableConfigurationProperties(HazelcastProperties.class)\npublic class HazelcastAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnMissingBean({ HazelcastInstance.class, Config.class })\n\t@Conditional(ConfigAvailableCondition.class)\n\tstatic class HazelcastConfigFileConfiguration {\n\n\t\t@Autowired\n\t\tprivate HazelcastProperties hazelcastProperties;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic HazelcastInstance hazelcastInstance() throws IOException {\n\t\t\tResource config = this.hazelcastProperties.resolveConfigLocation();\n\t\t\tif (config != null) {\n\t\t\t\treturn new HazelcastInstanceFactory(config).getHazelcastInstance();\n\t\t\t}\n\t\t\treturn Hazelcast.newHazelcastInstance();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(HazelcastInstance.class)\n\t@ConditionalOnSingleCandidate(Config.class)\n\tstatic class HazelcastConfigConfiguration {\n\n\t\t@Bean\n\t\tpublic HazelcastInstance hazelcastInstance(Config config) {\n\t\t\treturn new HazelcastInstanceFactory(config).getHazelcastInstance();\n\t\t}\n\n\t}\n\n\t/**\n\t * {@link HazelcastConfigResourceCondition} that checks if the\n\t * {@code spring.hazelcast.config} configuration key is defined.\n\t */\n\tstatic class ConfigAvailableCondition extends HazelcastConfigResourceCondition {\n\n\t\tpublic ConfigAvailableCondition() {\n\t\t\tsuper("spring.hazelcast", "config");\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.hazelcast;\n\nimport java.io.IOException;\nimport java.net.URL;\n\nimport com.hazelcast.config.Config;\nimport com.hazelcast.config.XmlConfigBuilder;\nimport com.hazelcast.core.Hazelcast;\nimport com.hazelcast.core.HazelcastInstance;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.Resource;\nimport org.springframework.util.Assert;\nimport org.springframework.util.ResourceUtils;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Hazelcast. Creates a\n * {@link HazelcastInstance} based on explicit configuration or when a default\n * configuration file is found in the environment.\n *\n * @author Stephane Nicoll\n * @since 1.3.0\n * @see HazelcastConfigResourceCondition\n */\n@Configuration\n@ConditionalOnClass(HazelcastInstance.class)\n@ConditionalOnMissingBean(HazelcastInstance.class)\n@EnableConfigurationProperties(HazelcastProperties.class)\npublic class HazelcastAutoConfiguration {\n\n\n\t/**\n\t * Create a {@link HazelcastInstance} based on the specified configuration location.\n\t * @param location the location of the configuration file\n\t * @return a {@link HazelcastInstance} for the specified configuration\n\t * @throws IOException the configuration file could not be read\n\t */\n\tpublic static HazelcastInstance createHazelcastInstance(Resource location)\n\t\t\tthrows IOException {\n\t\tAssert.notNull(location, "Config must not be null");\n\t\tURL configUrl = location.getURL();\n\t\tConfig config = new XmlConfigBuilder(configUrl).build();\n\t\tif (ResourceUtils.isFileURL(configUrl)) {\n\t\t\tconfig.setConfigurationFile(location.getFile());\n\t\t}\n\t\telse {\n\t\t\tconfig.setConfigurationUrl(configUrl);\n\t\t}\n\t\treturn createHazelcastInstance(config);\n\t}\n\n\tprivate static HazelcastInstance createHazelcastInstance(Config config) {\n\t\tif (StringUtils.hasText(config.getInstanceName())) {\n\t\t\treturn Hazelcast.getOrCreateHazelcastInstance(config);\n\t\t}\n\t\treturn Hazelcast.newHazelcastInstance(config);\n\t}\n\n\n\t@Configuration\n\t@ConditionalOnMissingBean({HazelcastInstance.class, Config.class})\n\t@Conditional(ConfigAvailableCondition.class)\n\tstatic class HazelcastConfigFileConfiguration {\n\n\t\t@Autowired\n\t\tprivate HazelcastProperties hazelcastProperties;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic HazelcastInstance hazelcastInstance() throws IOException {\n\t\t\tResource config = this.hazelcastProperties.resolveConfigLocation();\n\t\t\tif (config != null) {\n\t\t\t\treturn createHazelcastInstance(config);\n\t\t\t}\n\t\t\treturn Hazelcast.newHazelcastInstance();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(HazelcastInstance.class)\n\t@ConditionalOnSingleCandidate(Config.class)\n\tstatic class HazelcastConfigConfiguration {\n\n\t\t@Bean\n\t\tpublic HazelcastInstance hazelcastInstance(Config config) {\n\t\t\treturn createHazelcastInstance(config);\n\t\t}\n\n\t}\n\n\t/**\n\t * {@link HazelcastConfigResourceCondition} that checks if the\n\t * {@code spring.hazelcast.config} configuration key is defined.\n\t */\n\tstatic class ConfigAvailableCondition extends HazelcastConfigResourceCondition {\n\n\t\tpublic ConfigAvailableCondition() {\n\t\t\tsuper("spring.hazelcast", "config");\n\t\t}\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
