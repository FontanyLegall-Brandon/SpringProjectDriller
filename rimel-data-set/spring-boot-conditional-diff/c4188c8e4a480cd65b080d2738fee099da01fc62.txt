@@ -0,0 +1,85 @@
+
+
+package org.springframework.boot.autoconfigure.kafka;
+
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.context.properties.EnableConfigurationProperties;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Import;
+import org.springframework.kafka.core.ConsumerFactory;
+import org.springframework.kafka.core.DefaultKafkaConsumerFactory;
+import org.springframework.kafka.core.DefaultKafkaProducerFactory;
+import org.springframework.kafka.core.KafkaTemplate;
+import org.springframework.kafka.core.ProducerFactory;
+import org.springframework.kafka.support.LoggingProducerListener;
+import org.springframework.kafka.support.ProducerListener;
+
+
+@Configuration
+@ConditionalOnClass(KafkaTemplate.class)
+@EnableConfigurationProperties(KafkaProperties.class)
+@Import(KafkaAnnotationDrivenConfiguration.class)
+public class KafkaAutoConfiguration {
+
+	private final KafkaProperties properties;
+
+	public KafkaAutoConfiguration(KafkaProperties properties) {
+		this.properties = properties;
+	}
+
+	@Bean
+	@ConditionalOnMissingBean(KafkaTemplate.class)
+	public KafkaTemplate<?, ?> kafkaTemplate(ProducerFactory<Object, Object> kafkaProducerFactory,
+			ProducerListener<Object, Object> kafkaProducerListener) {
+		KafkaTemplate<Object, Object> kafkaTemplate = new KafkaTemplate<Object, Object>(kafkaProducerFactory);
+		kafkaTemplate.setProducerListener(kafkaProducerListener);
+		kafkaTemplate.setDefaultTopic(this.properties.getTemplate().getDefaultTopic());
+		return kafkaTemplate;
+	}
+
+	@Bean
+	@ConditionalOnMissingBean(ProducerListener.class)
+	public ProducerListener<Object, Object> kafkaProducerListener() {
+		return new LoggingProducerListener<Object, Object>();
+	}
+
+	@Configuration
+	protected static class ConnectionConfig {
+
+		@Bean
+		@ConditionalOnMissingBean(ConsumerFactory.class)
+		public ConsumerFactory<?, ?> kafkaConsumerFactory(KafkaProperties properties) {
+			return new DefaultKafkaConsumerFactory<Object, Object>(properties.buildConsumerProperties());
+		}
+
+		@Bean
+		@ConditionalOnMissingBean(ProducerFactory.class)
+		public ProducerFactory<?, ?> kafkaProducerFactory(KafkaProperties properties) {
+			return new DefaultKafkaProducerFactory<Object, Object>(properties.buildProducerProperties());
+		}
+
+	}
+
+}

