{'_old_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ErrorMvcAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ErrorMvcAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,19 +16,33 @@\n \n package org.springframework.boot.actuate.autoconfigure;\n \n+import java.util.HashMap;\n+import java.util.Map;\n+\n import javax.servlet.Servlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n \n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.actuate.web.BasicErrorController;\n import org.springframework.boot.actuate.web.ErrorController;\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\n import org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainerFactory;\n import org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;\n import org.springframework.boot.context.embedded.ErrorPage;\n import org.springframework.context.annotation.Bean;\n+import org.springframework.context.expression.MapAccessor;\n+import org.springframework.expression.Expression;\n+import org.springframework.expression.spel.standard.SpelExpressionParser;\n+import org.springframework.expression.spel.support.StandardEvaluationContext;\n+import org.springframework.util.PropertyPlaceholderHelper;\n+import org.springframework.util.PropertyPlaceholderHelper.PlaceholderResolver;\n import org.springframework.web.servlet.DispatcherServlet;\n+import org.springframework.web.servlet.View;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} to render errors via a MVC error\n@@ -37,6 +51,9 @@ import org.springframework.web.servlet.DispatcherServlet;\n  * @author Dave Syer\n  */\n @ConditionalOnClass({ Servlet.class, DispatcherServlet.class })\n+// Ensure this loads before the main WebMvcAutoConfiguration so that the error View is\n+// available\n+@AutoConfigureBefore(WebMvcAutoConfiguration.class)\n public class ErrorMvcAutoConfiguration implements EmbeddedServletContainerCustomizer {\n \n \t@Value("${error.path:/error}")\n@@ -53,4 +70,60 @@ public class ErrorMvcAutoConfiguration implements EmbeddedServletContainerCustom\n \t\tfactory.addErrorPages(new ErrorPage(this.errorPath));\n \t}\n \n+\tprivate SpelView defaultErrorView = new SpelView(\n+\t\t\t"<html><body><h1>Whitelabel Error Page</h1>"\n+\t\t\t\t\t+ "<p>This application has no explicit mapping for /error, so you are seeing this as a fallback.</p>"\n+\t\t\t\t\t+ "<div id=\'created\'>${timestamp}</div>"\n+\t\t\t\t\t+ "<div>There was an unexpected error (type=${error}, status=${status}).</div>"\n+\t\t\t\t\t+ "<div>${message}</div>" + "</body></html>");\n+\n+\t@Bean(name = "error")\n+\t@ConditionalOnMissingBean(name = "error")\n+\tpublic View defaultErrorView() {\n+\t\treturn this.defaultErrorView;\n+\t}\n+\n+\tprivate static class SpelView implements View {\n+\n+\t\tprivate final String template;\n+\n+\t\tprivate final SpelExpressionParser parser = new SpelExpressionParser();\n+\n+\t\tprivate final StandardEvaluationContext context = new StandardEvaluationContext();\n+\n+\t\tprivate PropertyPlaceholderHelper helper;\n+\n+\t\tprivate PlaceholderResolver resolver;\n+\n+\t\tpublic SpelView(String template) {\n+\t\t\tthis.template = template;\n+\t\t\tthis.context.addPropertyAccessor(new MapAccessor());\n+\t\t\tthis.helper = new PropertyPlaceholderHelper("${", "}");\n+\t\t\tthis.resolver = new PlaceholderResolver() {\n+\t\t\t\tpublic String resolvePlaceholder(String name) {\n+\t\t\t\t\tExpression expression = SpelView.this.parser.parseExpression(name);\n+\t\t\t\t\tObject value = expression.getValue(SpelView.this.context);\n+\t\t\t\t\treturn value == null ? null : value.toString();\n+\t\t\t\t}\n+\t\t\t};\n+\t\t}\n+\n+\t\tpublic String getContentType() {\n+\t\t\treturn "text/html";\n+\t\t}\n+\n+\t\tpublic void render(Map<String, ?> model, HttpServletRequest request,\n+\t\t\t\tHttpServletResponse response) throws Exception {\n+\t\t\tif (response.getContentType() == null) {\n+\t\t\t\tresponse.setContentType(getContentType());\n+\t\t\t}\n+\t\t\tMap<String, Object> map = new HashMap<String, Object>(model);\n+\t\t\tmap.put("path", request.getContextPath());\n+\t\t\tthis.context.setRootObject(map);\n+\t\t\tString result = this.helper.replacePlaceholders(this.template, this.resolver);\n+\t\t\tresponse.getWriter().append(result);\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport javax.servlet.Servlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.actuate.web.BasicErrorController;\nimport org.springframework.boot.actuate.web.ErrorController;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainerFactory;\nimport org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;\nimport org.springframework.boot.context.embedded.ErrorPage;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.expression.MapAccessor;\nimport org.springframework.expression.Expression;\nimport org.springframework.expression.spel.standard.SpelExpressionParser;\nimport org.springframework.expression.spel.support.StandardEvaluationContext;\nimport org.springframework.util.PropertyPlaceholderHelper;\nimport org.springframework.util.PropertyPlaceholderHelper.PlaceholderResolver;\nimport org.springframework.web.servlet.DispatcherServlet;\nimport org.springframework.web.servlet.View;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to render errors via a MVC error\n * controller.\n * \n * @author Dave Syer\n */\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class })\n// Ensure this loads before the main WebMvcAutoConfiguration so that the error View is\n// available\n@AutoConfigureBefore(WebMvcAutoConfiguration.class)\npublic class ErrorMvcAutoConfiguration implements EmbeddedServletContainerCustomizer {\n\n\t@Value("${error.path:/error}")\n\tprivate String errorPath = "/error";\n\n\t@Bean\n\t@ConditionalOnMissingBean(ErrorController.class)\n\tpublic BasicErrorController basicErrorController() {\n\t\treturn new BasicErrorController();\n\t}\n\n\t@Override\n\tpublic void customize(ConfigurableEmbeddedServletContainerFactory factory) {\n\t\tfactory.addErrorPages(new ErrorPage(this.errorPath));\n\t}\n\n\tprivate SpelView defaultErrorView = new SpelView(\n\t\t\t"<html><body><h1>Whitelabel Error Page</h1>"\n\t\t\t\t\t+ "<p>This application has no explicit mapping for /error, so you are seeing this as a fallback.</p>"\n\t\t\t\t\t+ "<div id=\'created\'>${timestamp}</div>"\n\t\t\t\t\t+ "<div>There was an unexpected error (type=${error}, status=${status}).</div>"\n\t\t\t\t\t+ "<div>${message}</div>" + "</body></html>");\n\n\t@Bean(name = "error")\n\t@ConditionalOnMissingBean(name = "error")\n\tpublic View defaultErrorView() {\n\t\treturn this.defaultErrorView;\n\t}\n\n\tprivate static class SpelView implements View {\n\n\t\tprivate final String template;\n\n\t\tprivate final SpelExpressionParser parser = new SpelExpressionParser();\n\n\t\tprivate final StandardEvaluationContext context = new StandardEvaluationContext();\n\n\t\tprivate PropertyPlaceholderHelper helper;\n\n\t\tprivate PlaceholderResolver resolver;\n\n\t\tpublic SpelView(String template) {\n\t\t\tthis.template = template;\n\t\t\tthis.context.addPropertyAccessor(new MapAccessor());\n\t\t\tthis.helper = new PropertyPlaceholderHelper("${", "}");\n\t\t\tthis.resolver = new PlaceholderResolver() {\n\t\t\t\tpublic String resolvePlaceholder(String name) {\n\t\t\t\t\tExpression expression = SpelView.this.parser.parseExpression(name);\n\t\t\t\t\tObject value = expression.getValue(SpelView.this.context);\n\t\t\t\t\treturn value == null ? null : value.toString();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tpublic String getContentType() {\n\t\t\treturn "text/html";\n\t\t}\n\n\t\tpublic void render(Map<String, ?> model, HttpServletRequest request,\n\t\t\t\tHttpServletResponse response) throws Exception {\n\t\t\tif (response.getContentType() == null) {\n\t\t\t\tresponse.setContentType(getContentType());\n\t\t\t}\n\t\t\tMap<String, Object> map = new HashMap<String, Object>(model);\n\t\t\tmap.put("path", request.getContextPath());\n\t\t\tthis.context.setRootObject(map);\n\t\t\tString result = this.helper.replacePlaceholders(this.template, this.resolver);\n\t\t\tresponse.getWriter().append(result);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport javax.servlet.Servlet;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.actuate.web.BasicErrorController;\nimport org.springframework.boot.actuate.web.ErrorController;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainerFactory;\nimport org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;\nimport org.springframework.boot.context.embedded.ErrorPage;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.web.servlet.DispatcherServlet;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to render errors via a MVC error\n * controller.\n * \n * @author Dave Syer\n */\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class })\npublic class ErrorMvcAutoConfiguration implements EmbeddedServletContainerCustomizer {\n\n\t@Value("${error.path:/error}")\n\tprivate String errorPath = "/error";\n\n\t@Bean\n\t@ConditionalOnMissingBean(ErrorController.class)\n\tpublic BasicErrorController basicErrorController() {\n\t\treturn new BasicErrorController();\n\t}\n\n\t@Override\n\tpublic void customize(ConfigurableEmbeddedServletContainerFactory factory) {\n\t\tfactory.addErrorPages(new ErrorPage(this.errorPath));\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
