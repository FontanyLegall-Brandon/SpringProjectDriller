{'_old_path': None, '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/orm/jpa/HibernateMetricsAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2012-2018 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.autoconfigure.metrics.orm.jpa;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import javax.persistence.EntityManagerFactory;\n+\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.binder.jpa.HibernateMetrics;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration;\n+import org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for metrics on all available\n+ * Hibernate {@link EntityManagerFactory entityManagerFactories} with statistics enabled.\n+ * <p>\n+ * {@link HibernateMetrics} can only monitor Hibernate {@link EntityManagerFactory}\n+ * instances with statistics enabled (for instance, by setting JPA property\n+ * <code>hibernate.generate_statistics</code> to <code>true</code>).\n+ *\n+ * @author Rui Figueira\n+ */\n+@Configuration\n+@AutoConfigureAfter({ MetricsAutoConfiguration.class, HibernateJpaAutoConfiguration.class,\n+\t\tSimpleMetricsExportAutoConfiguration.class })\n+@ConditionalOnBean({ EntityManagerFactory.class, MeterRegistry.class })\n+public class HibernateMetricsAutoConfiguration {\n+\n+\tprivate static final String ENTITY_MANAGER_FACTORY_SUFFIX = "entityManagerFactory";\n+\n+\tprivate final MeterRegistry registry;\n+\n+\tpublic HibernateMetricsAutoConfiguration(MeterRegistry registry) {\n+\t\tthis.registry = registry;\n+\t}\n+\n+\t@Autowired\n+\tpublic void bindEntityManagerFactoriesToRegistry(\n+\t\t\tMap<String, EntityManagerFactory> entityManagerFactories) {\n+\t\tentityManagerFactories.forEach(this::maybeBindEntityManagerFactoryToRegistry);\n+\t}\n+\n+\tprivate void maybeBindEntityManagerFactoryToRegistry(String beanName,\n+\t\t\tEntityManagerFactory entityManagerFactory) {\n+\t\tString entityManagerFactoryName = getEntityManagerFactoryName(beanName);\n+\t\t// HibernateMetrics internally checks if statistics are enabled before binding\n+\t\tnew HibernateMetrics(entityManagerFactory, entityManagerFactoryName,\n+\t\t\t\tCollections.emptyList()).bindTo(this.registry);\n+\t}\n+\n+\t/**\n+\t * Get the name of a {@link EntityManagerFactory} based on its {@code beanName}.\n+\t * @param beanName the name of the {@link EntityManagerFactory} bean\n+\t * @return a name for the given entity manager factory\n+\t */\n+\tprivate String getEntityManagerFactoryName(String beanName) {\n+\t\tif (beanName.length() > ENTITY_MANAGER_FACTORY_SUFFIX.length() && StringUtils\n+\t\t\t\t.endsWithIgnoreCase(beanName, ENTITY_MANAGER_FACTORY_SUFFIX)) {\n+\t\t\treturn beanName.substring(0,\n+\t\t\t\t\tbeanName.length() - ENTITY_MANAGER_FACTORY_SUFFIX.length());\n+\t\t}\n+\t\treturn beanName;\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics.orm.jpa;\n\nimport java.util.Collections;\nimport java.util.Map;\n\nimport javax.persistence.EntityManagerFactory;\n\nimport io.micrometer.core.instrument.MeterRegistry;\nimport io.micrometer.core.instrument.binder.jpa.HibernateMetrics;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for metrics on all available\n * Hibernate {@link EntityManagerFactory entityManagerFactories} with statistics enabled.\n * <p>\n * {@link HibernateMetrics} can only monitor Hibernate {@link EntityManagerFactory}\n * instances with statistics enabled (for instance, by setting JPA property\n * <code>hibernate.generate_statistics</code> to <code>true</code>).\n *\n * @author Rui Figueira\n */\n@Configuration\n@AutoConfigureAfter({ MetricsAutoConfiguration.class, HibernateJpaAutoConfiguration.class,\n\t\tSimpleMetricsExportAutoConfiguration.class })\n@ConditionalOnBean({ EntityManagerFactory.class, MeterRegistry.class })\npublic class HibernateMetricsAutoConfiguration {\n\n\tprivate static final String ENTITY_MANAGER_FACTORY_SUFFIX = "entityManagerFactory";\n\n\tprivate final MeterRegistry registry;\n\n\tpublic HibernateMetricsAutoConfiguration(MeterRegistry registry) {\n\t\tthis.registry = registry;\n\t}\n\n\t@Autowired\n\tpublic void bindEntityManagerFactoriesToRegistry(\n\t\t\tMap<String, EntityManagerFactory> entityManagerFactories) {\n\t\tentityManagerFactories.forEach(this::maybeBindEntityManagerFactoryToRegistry);\n\t}\n\n\tprivate void maybeBindEntityManagerFactoryToRegistry(String beanName,\n\t\t\tEntityManagerFactory entityManagerFactory) {\n\t\tString entityManagerFactoryName = getEntityManagerFactoryName(beanName);\n\t\t// HibernateMetrics internally checks if statistics are enabled before binding\n\t\tnew HibernateMetrics(entityManagerFactory, entityManagerFactoryName,\n\t\t\t\tCollections.emptyList()).bindTo(this.registry);\n\t}\n\n\t/**\n\t * Get the name of a {@link EntityManagerFactory} based on its {@code beanName}.\n\t * @param beanName the name of the {@link EntityManagerFactory} bean\n\t * @return a name for the given entity manager factory\n\t */\n\tprivate String getEntityManagerFactoryName(String beanName) {\n\t\tif (beanName.length() > ENTITY_MANAGER_FACTORY_SUFFIX.length() && StringUtils\n\t\t\t\t.endsWithIgnoreCase(beanName, ENTITY_MANAGER_FACTORY_SUFFIX)) {\n\t\t\treturn beanName.substring(0,\n\t\t\t\t\tbeanName.length() - ENTITY_MANAGER_FACTORY_SUFFIX.length());\n\t\t}\n\t\treturn beanName;\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
