{'_old_path': PosixPath('spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/RemoteDevToolsAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/RemoteDevToolsAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -25,6 +25,7 @@ import org.apache.commons.logging.LogFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n@@ -50,6 +51,7 @@ import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.core.annotation.Order;\n import org.springframework.http.server.ServerHttpRequest;\n+import org.springframework.security.config.annotation.ObjectPostProcessor;\n import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n \n@@ -158,6 +160,7 @@ public class RemoteDevToolsAutoConfiguration {\n \n \t@Configuration\n \t@ConditionalOnClass(WebSecurityConfigurerAdapter.class)\n+\t@ConditionalOnBean(ObjectPostProcessor.class)\n \tstatic class RemoteDevToolsSecurityConfiguration {\n \n \t\t@Bean\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.devtools.autoconfigure;\n\nimport java.util.Collection;\n\nimport javax.servlet.Filter;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.security.SecurityProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.devtools.remote.server.AccessManager;\nimport org.springframework.boot.devtools.remote.server.Dispatcher;\nimport org.springframework.boot.devtools.remote.server.DispatcherFilter;\nimport org.springframework.boot.devtools.remote.server.Handler;\nimport org.springframework.boot.devtools.remote.server.HandlerMapper;\nimport org.springframework.boot.devtools.remote.server.HttpHeaderAccessManager;\nimport org.springframework.boot.devtools.remote.server.HttpStatusHandler;\nimport org.springframework.boot.devtools.remote.server.UrlHandlerMapper;\nimport org.springframework.boot.devtools.restart.server.DefaultSourceFolderUrlFilter;\nimport org.springframework.boot.devtools.restart.server.HttpRestartServer;\nimport org.springframework.boot.devtools.restart.server.HttpRestartServerHandler;\nimport org.springframework.boot.devtools.restart.server.SourceFolderUrlFilter;\nimport org.springframework.boot.devtools.tunnel.server.HttpTunnelServer;\nimport org.springframework.boot.devtools.tunnel.server.HttpTunnelServerHandler;\nimport org.springframework.boot.devtools.tunnel.server.RemoteDebugPortProvider;\nimport org.springframework.boot.devtools.tunnel.server.SocketTargetServerConnection;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.http.server.ServerHttpRequest;\nimport org.springframework.security.config.annotation.ObjectPostProcessor;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for remote development support.\n *\n * @author Phillip Webb\n * @author Rob Winch\n * @author Andy Wilkinson\n * @since 1.3.0\n */\n@Configuration\n@ConditionalOnProperty(prefix = "spring.devtools.remote", name = "secret")\n@ConditionalOnClass({ Filter.class, ServerHttpRequest.class })\n@EnableConfigurationProperties(DevToolsProperties.class)\npublic class RemoteDevToolsAutoConfiguration {\n\n\tprivate static final Log logger = LogFactory\n\t\t\t.getLog(RemoteDevToolsAutoConfiguration.class);\n\n\t@Autowired\n\tprivate DevToolsProperties properties;\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic AccessManager remoteDevToolsAccessManager() {\n\t\tRemoteDevToolsProperties remoteProperties = this.properties.getRemote();\n\t\treturn new HttpHeaderAccessManager(remoteProperties.getSecretHeaderName(),\n\t\t\t\tremoteProperties.getSecret());\n\t}\n\n\t@Bean\n\tpublic HandlerMapper remoteDevToolsHealthCheckHandlerMapper() {\n\t\tHandler handler = new HttpStatusHandler();\n\t\treturn new UrlHandlerMapper(this.properties.getRemote().getContextPath(), handler);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic DispatcherFilter remoteDevToolsDispatcherFilter(AccessManager accessManager,\n\t\t\tCollection<HandlerMapper> mappers) {\n\t\tDispatcher dispatcher = new Dispatcher(accessManager, mappers);\n\t\treturn new DispatcherFilter(dispatcher);\n\t}\n\n\t/**\n\t * Configuration for remote update and restarts.\n\t */\n\t@ConditionalOnProperty(prefix = "spring.devtools.remote.restart", name = "enabled", matchIfMissing = true)\n\tstatic class RemoteRestartConfiguration {\n\n\t\t@Autowired\n\t\tprivate DevToolsProperties properties;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic SourceFolderUrlFilter remoteRestartSourceFolderUrlFilter() {\n\t\t\treturn new DefaultSourceFolderUrlFilter();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic HttpRestartServer remoteRestartHttpRestartServer(\n\t\t\t\tSourceFolderUrlFilter sourceFolderUrlFilter) {\n\t\t\treturn new HttpRestartServer(sourceFolderUrlFilter);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "remoteRestartHanderMapper")\n\t\tpublic UrlHandlerMapper remoteRestartHanderMapper(HttpRestartServer server) {\n\t\t\tString url = this.properties.getRemote().getContextPath() + "/restart";\n\t\t\tlogger.warn("Listening for remote restart updates on " + url);\n\t\t\tHandler handler = new HttpRestartServerHandler(server);\n\t\t\treturn new UrlHandlerMapper(url, handler);\n\t\t}\n\n\t}\n\n\t/**\n\t * Configuration for remote debug HTTP tunneling.\n\t */\n\t@ConditionalOnProperty(prefix = "spring.devtools.remote.debug", name = "enabled", matchIfMissing = true)\n\tstatic class RemoteDebugTunnelConfiguration {\n\n\t\t@Autowired\n\t\tprivate DevToolsProperties properties;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "remoteDebugHanderMapper")\n\t\tpublic UrlHandlerMapper remoteDebugHanderMapper(\n\t\t\t\t@Qualifier("remoteDebugHttpTunnelServer") HttpTunnelServer server) {\n\t\t\tString url = this.properties.getRemote().getContextPath() + "/debug";\n\t\t\tlogger.warn("Listening for remote debug traffic on " + url);\n\t\t\tHandler handler = new HttpTunnelServerHandler(server);\n\t\t\treturn new UrlHandlerMapper(url, handler);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "remoteDebugHttpTunnelServer")\n\t\tpublic HttpTunnelServer remoteDebugHttpTunnelServer() {\n\t\t\treturn new HttpTunnelServer(new SocketTargetServerConnection(\n\t\t\t\t\tnew RemoteDebugPortProvider()));\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(WebSecurityConfigurerAdapter.class)\n\t@ConditionalOnBean(ObjectPostProcessor.class)\n\tstatic class RemoteDevToolsSecurityConfiguration {\n\n\t\t@Bean\n\t\tpublic RemoteRestartWebSecurityConfigurer remoteRestartWebSecurityConfigurer() {\n\t\t\treturn new RemoteRestartWebSecurityConfigurer();\n\t\t}\n\n\t\t@Order(SecurityProperties.IGNORED_ORDER + 2)\n\t\tstatic class RemoteRestartWebSecurityConfigurer extends\n\t\t\t\tWebSecurityConfigurerAdapter {\n\n\t\t\t@Autowired\n\t\t\tprivate DevToolsProperties properties;\n\n\t\t\t@Override\n\t\t\tpublic void configure(HttpSecurity http) throws Exception {\n\t\t\t\thttp.antMatcher(this.properties.getRemote().getContextPath() + "/**");\n\t\t\t\thttp.csrf().disable();\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.devtools.autoconfigure;\n\nimport java.util.Collection;\n\nimport javax.servlet.Filter;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.security.SecurityProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.devtools.remote.server.AccessManager;\nimport org.springframework.boot.devtools.remote.server.Dispatcher;\nimport org.springframework.boot.devtools.remote.server.DispatcherFilter;\nimport org.springframework.boot.devtools.remote.server.Handler;\nimport org.springframework.boot.devtools.remote.server.HandlerMapper;\nimport org.springframework.boot.devtools.remote.server.HttpHeaderAccessManager;\nimport org.springframework.boot.devtools.remote.server.HttpStatusHandler;\nimport org.springframework.boot.devtools.remote.server.UrlHandlerMapper;\nimport org.springframework.boot.devtools.restart.server.DefaultSourceFolderUrlFilter;\nimport org.springframework.boot.devtools.restart.server.HttpRestartServer;\nimport org.springframework.boot.devtools.restart.server.HttpRestartServerHandler;\nimport org.springframework.boot.devtools.restart.server.SourceFolderUrlFilter;\nimport org.springframework.boot.devtools.tunnel.server.HttpTunnelServer;\nimport org.springframework.boot.devtools.tunnel.server.HttpTunnelServerHandler;\nimport org.springframework.boot.devtools.tunnel.server.RemoteDebugPortProvider;\nimport org.springframework.boot.devtools.tunnel.server.SocketTargetServerConnection;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.http.server.ServerHttpRequest;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for remote development support.\n *\n * @author Phillip Webb\n * @author Rob Winch\n * @author Andy Wilkinson\n * @since 1.3.0\n */\n@Configuration\n@ConditionalOnProperty(prefix = "spring.devtools.remote", name = "secret")\n@ConditionalOnClass({ Filter.class, ServerHttpRequest.class })\n@EnableConfigurationProperties(DevToolsProperties.class)\npublic class RemoteDevToolsAutoConfiguration {\n\n\tprivate static final Log logger = LogFactory\n\t\t\t.getLog(RemoteDevToolsAutoConfiguration.class);\n\n\t@Autowired\n\tprivate DevToolsProperties properties;\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic AccessManager remoteDevToolsAccessManager() {\n\t\tRemoteDevToolsProperties remoteProperties = this.properties.getRemote();\n\t\treturn new HttpHeaderAccessManager(remoteProperties.getSecretHeaderName(),\n\t\t\t\tremoteProperties.getSecret());\n\t}\n\n\t@Bean\n\tpublic HandlerMapper remoteDevToolsHealthCheckHandlerMapper() {\n\t\tHandler handler = new HttpStatusHandler();\n\t\treturn new UrlHandlerMapper(this.properties.getRemote().getContextPath(), handler);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic DispatcherFilter remoteDevToolsDispatcherFilter(AccessManager accessManager,\n\t\t\tCollection<HandlerMapper> mappers) {\n\t\tDispatcher dispatcher = new Dispatcher(accessManager, mappers);\n\t\treturn new DispatcherFilter(dispatcher);\n\t}\n\n\t/**\n\t * Configuration for remote update and restarts.\n\t */\n\t@ConditionalOnProperty(prefix = "spring.devtools.remote.restart", name = "enabled", matchIfMissing = true)\n\tstatic class RemoteRestartConfiguration {\n\n\t\t@Autowired\n\t\tprivate DevToolsProperties properties;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic SourceFolderUrlFilter remoteRestartSourceFolderUrlFilter() {\n\t\t\treturn new DefaultSourceFolderUrlFilter();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic HttpRestartServer remoteRestartHttpRestartServer(\n\t\t\t\tSourceFolderUrlFilter sourceFolderUrlFilter) {\n\t\t\treturn new HttpRestartServer(sourceFolderUrlFilter);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "remoteRestartHanderMapper")\n\t\tpublic UrlHandlerMapper remoteRestartHanderMapper(HttpRestartServer server) {\n\t\t\tString url = this.properties.getRemote().getContextPath() + "/restart";\n\t\t\tlogger.warn("Listening for remote restart updates on " + url);\n\t\t\tHandler handler = new HttpRestartServerHandler(server);\n\t\t\treturn new UrlHandlerMapper(url, handler);\n\t\t}\n\n\t}\n\n\t/**\n\t * Configuration for remote debug HTTP tunneling.\n\t */\n\t@ConditionalOnProperty(prefix = "spring.devtools.remote.debug", name = "enabled", matchIfMissing = true)\n\tstatic class RemoteDebugTunnelConfiguration {\n\n\t\t@Autowired\n\t\tprivate DevToolsProperties properties;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "remoteDebugHanderMapper")\n\t\tpublic UrlHandlerMapper remoteDebugHanderMapper(\n\t\t\t\t@Qualifier("remoteDebugHttpTunnelServer") HttpTunnelServer server) {\n\t\t\tString url = this.properties.getRemote().getContextPath() + "/debug";\n\t\t\tlogger.warn("Listening for remote debug traffic on " + url);\n\t\t\tHandler handler = new HttpTunnelServerHandler(server);\n\t\t\treturn new UrlHandlerMapper(url, handler);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "remoteDebugHttpTunnelServer")\n\t\tpublic HttpTunnelServer remoteDebugHttpTunnelServer() {\n\t\t\treturn new HttpTunnelServer(new SocketTargetServerConnection(\n\t\t\t\t\tnew RemoteDebugPortProvider()));\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(WebSecurityConfigurerAdapter.class)\n\tstatic class RemoteDevToolsSecurityConfiguration {\n\n\t\t@Bean\n\t\tpublic RemoteRestartWebSecurityConfigurer remoteRestartWebSecurityConfigurer() {\n\t\t\treturn new RemoteRestartWebSecurityConfigurer();\n\t\t}\n\n\t\t@Order(SecurityProperties.IGNORED_ORDER + 2)\n\t\tstatic class RemoteRestartWebSecurityConfigurer extends\n\t\t\t\tWebSecurityConfigurerAdapter {\n\n\t\t\t@Autowired\n\t\t\tprivate DevToolsProperties properties;\n\n\t\t\t@Override\n\t\t\tpublic void configure(HttpSecurity http) throws Exception {\n\t\t\t\thttp.antMatcher(this.properties.getRemote().getContextPath() + "/**");\n\t\t\t\thttp.csrf().disable();\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
