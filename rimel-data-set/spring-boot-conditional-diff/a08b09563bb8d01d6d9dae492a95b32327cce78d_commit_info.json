{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jooq/JooqAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2012-2015 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.jooq;\n+\n+import javax.sql.DataSource;\n+\n+import org.jooq.ConnectionProvider;\n+import org.jooq.DSLContext;\n+import org.jooq.ExecuteListenerProvider;\n+import org.jooq.RecordListenerProvider;\n+import org.jooq.RecordMapperProvider;\n+import org.jooq.SQLDialect;\n+import org.jooq.TransactionProvider;\n+import org.jooq.VisitListenerProvider;\n+import org.jooq.conf.Settings;\n+import org.jooq.impl.DataSourceConnectionProvider;\n+import org.jooq.impl.DefaultConfiguration;\n+import org.jooq.impl.DefaultDSLContext;\n+import org.jooq.impl.DefaultExecuteListenerProvider;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy;\n+import org.springframework.transaction.PlatformTransactionManager;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for JOOQ.\n+ *\n+ * @author Andreas Ahlenstorf\n+ * @since 1.3.0\n+ */\n+@Configuration\n+@ConditionalOnClass(DSLContext.class)\n+@ConditionalOnBean(DataSource.class)\n+@AutoConfigureAfter(DataSourceAutoConfiguration.class)\n+public class JooqAutoConfiguration {\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean(DataSourceConnectionProvider.class)\n+\tpublic DataSourceConnectionProvider dataSourceConnectionProvider(DataSource dataSource) {\n+\t\treturn new DataSourceConnectionProvider(new TransactionAwareDataSourceProxy(\n+\t\t\t\tdataSource));\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnBean(PlatformTransactionManager.class)\n+\tpublic TransactionProvider transactionProvider(PlatformTransactionManager txManager) {\n+\t\treturn new SpringTransactionProvider(txManager);\n+\t}\n+\n+\t@Bean\n+\tpublic ExecuteListenerProvider jooqExceptionTranslatorExecuteListenerProvider() {\n+\t\treturn new DefaultExecuteListenerProvider(new JooqExceptionTranslator());\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnMissingBean(DSLContext.class)\n+\t@EnableConfigurationProperties(JooqProperties.class)\n+\tpublic static class DslContextConfiguration {\n+\n+\t\t@Autowired\n+\t\tprivate JooqProperties properties = new JooqProperties();\n+\n+\t\t@Autowired\n+\t\tprivate ConnectionProvider connectionProvider;\n+\n+\t\t@Autowired(required = false)\n+\t\tprivate TransactionProvider transactionProvider;\n+\n+\t\t@Autowired(required = false)\n+\t\tprivate RecordMapperProvider recordMapperProvider;\n+\n+\t\t@Autowired(required = false)\n+\t\tprivate Settings settings;\n+\n+\t\t@Autowired(required = false)\n+\t\tprivate RecordListenerProvider[] recordListenerProviders;\n+\n+\t\t@Autowired\n+\t\tprivate ExecuteListenerProvider[] executeListenerProviders;\n+\n+\t\t@Autowired(required = false)\n+\t\tprivate VisitListenerProvider[] visitListenerProviders;\n+\n+\t\t@Bean\n+\t\tpublic DefaultDSLContext dslContext(org.jooq.Configuration configuration) {\n+\t\t\treturn new DefaultDSLContext(configuration);\n+\t\t}\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(org.jooq.Configuration.class)\n+\t\tpublic DefaultConfiguration jooqConfiguration() {\n+\t\t\tDefaultConfiguration configuration = new DefaultConfiguration();\n+\t\t\tif (!StringUtils.isEmpty(this.properties.getSqlDialect())) {\n+\t\t\t\tconfiguration.set(SQLDialect.valueOf(this.properties.getSqlDialect()));\n+\t\t\t}\n+\t\t\tconfiguration.set(this.connectionProvider);\n+\t\t\tif (this.transactionProvider != null) {\n+\t\t\t\tconfiguration.set(this.transactionProvider);\n+\t\t\t}\n+\t\t\tif (this.recordMapperProvider != null) {\n+\t\t\t\tconfiguration.set(this.recordMapperProvider);\n+\t\t\t}\n+\t\t\tif (this.settings != null) {\n+\t\t\t\tconfiguration.set(this.settings);\n+\t\t\t}\n+\t\t\tconfiguration.set(this.recordListenerProviders);\n+\t\t\tconfiguration.set(this.executeListenerProviders);\n+\t\t\tconfiguration.set(this.visitListenerProviders);\n+\t\t\treturn configuration;\n+\t\t}\n+\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jooq;\n\nimport javax.sql.DataSource;\n\nimport org.jooq.ConnectionProvider;\nimport org.jooq.DSLContext;\nimport org.jooq.ExecuteListenerProvider;\nimport org.jooq.RecordListenerProvider;\nimport org.jooq.RecordMapperProvider;\nimport org.jooq.SQLDialect;\nimport org.jooq.TransactionProvider;\nimport org.jooq.VisitListenerProvider;\nimport org.jooq.conf.Settings;\nimport org.jooq.impl.DataSourceConnectionProvider;\nimport org.jooq.impl.DefaultConfiguration;\nimport org.jooq.impl.DefaultDSLContext;\nimport org.jooq.impl.DefaultExecuteListenerProvider;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for JOOQ.\n *\n * @author Andreas Ahlenstorf\n * @since 1.3.0\n */\n@Configuration\n@ConditionalOnClass(DSLContext.class)\n@ConditionalOnBean(DataSource.class)\n@AutoConfigureAfter(DataSourceAutoConfiguration.class)\npublic class JooqAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean(DataSourceConnectionProvider.class)\n\tpublic DataSourceConnectionProvider dataSourceConnectionProvider(DataSource dataSource) {\n\t\treturn new DataSourceConnectionProvider(new TransactionAwareDataSourceProxy(\n\t\t\t\tdataSource));\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(PlatformTransactionManager.class)\n\tpublic TransactionProvider transactionProvider(PlatformTransactionManager txManager) {\n\t\treturn new SpringTransactionProvider(txManager);\n\t}\n\n\t@Bean\n\tpublic ExecuteListenerProvider jooqExceptionTranslatorExecuteListenerProvider() {\n\t\treturn new DefaultExecuteListenerProvider(new JooqExceptionTranslator());\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(DSLContext.class)\n\t@EnableConfigurationProperties(JooqProperties.class)\n\tpublic static class DslContextConfiguration {\n\n\t\t@Autowired\n\t\tprivate JooqProperties properties = new JooqProperties();\n\n\t\t@Autowired\n\t\tprivate ConnectionProvider connectionProvider;\n\n\t\t@Autowired(required = false)\n\t\tprivate TransactionProvider transactionProvider;\n\n\t\t@Autowired(required = false)\n\t\tprivate RecordMapperProvider recordMapperProvider;\n\n\t\t@Autowired(required = false)\n\t\tprivate Settings settings;\n\n\t\t@Autowired(required = false)\n\t\tprivate RecordListenerProvider[] recordListenerProviders;\n\n\t\t@Autowired\n\t\tprivate ExecuteListenerProvider[] executeListenerProviders;\n\n\t\t@Autowired(required = false)\n\t\tprivate VisitListenerProvider[] visitListenerProviders;\n\n\t\t@Bean\n\t\tpublic DefaultDSLContext dslContext(org.jooq.Configuration configuration) {\n\t\t\treturn new DefaultDSLContext(configuration);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(org.jooq.Configuration.class)\n\t\tpublic DefaultConfiguration jooqConfiguration() {\n\t\t\tDefaultConfiguration configuration = new DefaultConfiguration();\n\t\t\tif (!StringUtils.isEmpty(this.properties.getSqlDialect())) {\n\t\t\t\tconfiguration.set(SQLDialect.valueOf(this.properties.getSqlDialect()));\n\t\t\t}\n\t\t\tconfiguration.set(this.connectionProvider);\n\t\t\tif (this.transactionProvider != null) {\n\t\t\t\tconfiguration.set(this.transactionProvider);\n\t\t\t}\n\t\t\tif (this.recordMapperProvider != null) {\n\t\t\t\tconfiguration.set(this.recordMapperProvider);\n\t\t\t}\n\t\t\tif (this.settings != null) {\n\t\t\t\tconfiguration.set(this.settings);\n\t\t\t}\n\t\t\tconfiguration.set(this.recordListenerProviders);\n\t\t\tconfiguration.set(this.executeListenerProviders);\n\t\t\tconfiguration.set(this.visitListenerProviders);\n\t\t\treturn configuration;\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
