{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsAnnotationDrivenConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsAnnotationDrivenConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -22,6 +22,7 @@ import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnJndi;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.jms.annotation.EnableJms;\n@@ -73,6 +74,7 @@ class JmsAnnotationDrivenConfiguration {\n \t}\n \n \t@Bean\n+\t@ConditionalOnSingleCandidate(ConnectionFactory.class)\n \t@ConditionalOnMissingBean(name = "jmsListenerContainerFactory")\n \tpublic DefaultJmsListenerContainerFactory jmsListenerContainerFactory(\n \t\t\tDefaultJmsListenerContainerFactoryConfigurer configurer,\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jms;\n\nimport javax.jms.ConnectionFactory;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnJndi;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jms.annotation.EnableJms;\nimport org.springframework.jms.config.DefaultJmsListenerContainerFactory;\nimport org.springframework.jms.config.JmsListenerConfigUtils;\nimport org.springframework.jms.support.converter.MessageConverter;\nimport org.springframework.jms.support.destination.DestinationResolver;\nimport org.springframework.jms.support.destination.JndiDestinationResolver;\nimport org.springframework.transaction.jta.JtaTransactionManager;\n\n/**\n * Configuration for Spring 4.1 annotation driven JMS.\n *\n * @author Phillip Webb\n * @author Stephane Nicoll\n * @since 1.2.0\n */\n@Configuration\n@ConditionalOnClass(EnableJms.class)\nclass JmsAnnotationDrivenConfiguration {\n\n\tprivate final ObjectProvider<DestinationResolver> destinationResolver;\n\n\tprivate final ObjectProvider<JtaTransactionManager> transactionManager;\n\n\tprivate final ObjectProvider<MessageConverter> messageConverter;\n\n\tprivate final JmsProperties properties;\n\n\tJmsAnnotationDrivenConfiguration(\n\t\t\tObjectProvider<DestinationResolver> destinationResolver,\n\t\t\tObjectProvider<JtaTransactionManager> transactionManager,\n\t\t\tObjectProvider<MessageConverter> messageConverter, JmsProperties properties) {\n\t\tthis.destinationResolver = destinationResolver;\n\t\tthis.transactionManager = transactionManager;\n\t\tthis.messageConverter = messageConverter;\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic DefaultJmsListenerContainerFactoryConfigurer jmsListenerContainerFactoryConfigurer() {\n\t\tDefaultJmsListenerContainerFactoryConfigurer configurer = new DefaultJmsListenerContainerFactoryConfigurer();\n\t\tconfigurer.setDestinationResolver(this.destinationResolver.getIfUnique());\n\t\tconfigurer.setTransactionManager(this.transactionManager.getIfUnique());\n\t\tconfigurer.setMessageConverter(this.messageConverter.getIfUnique());\n\t\tconfigurer.setJmsProperties(this.properties);\n\t\treturn configurer;\n\t}\n\n\t@Bean\n\t@ConditionalOnSingleCandidate(ConnectionFactory.class)\n\t@ConditionalOnMissingBean(name = "jmsListenerContainerFactory")\n\tpublic DefaultJmsListenerContainerFactory jmsListenerContainerFactory(\n\t\t\tDefaultJmsListenerContainerFactoryConfigurer configurer,\n\t\t\tConnectionFactory connectionFactory) {\n\t\tDefaultJmsListenerContainerFactory factory = new DefaultJmsListenerContainerFactory();\n\t\tconfigurer.configure(factory, connectionFactory);\n\t\treturn factory;\n\t}\n\n\t@Configuration\n\t@EnableJms\n\t@ConditionalOnMissingBean(name = JmsListenerConfigUtils.JMS_LISTENER_ANNOTATION_PROCESSOR_BEAN_NAME)\n\tprotected static class EnableJmsConfiguration {\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnJndi\n\tprotected static class JndiConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(DestinationResolver.class)\n\t\tpublic JndiDestinationResolver destinationResolver() {\n\t\t\tJndiDestinationResolver resolver = new JndiDestinationResolver();\n\t\t\tresolver.setFallbackToDynamicDestination(true);\n\t\t\treturn resolver;\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jms;\n\nimport javax.jms.ConnectionFactory;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnJndi;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jms.annotation.EnableJms;\nimport org.springframework.jms.config.DefaultJmsListenerContainerFactory;\nimport org.springframework.jms.config.JmsListenerConfigUtils;\nimport org.springframework.jms.support.converter.MessageConverter;\nimport org.springframework.jms.support.destination.DestinationResolver;\nimport org.springframework.jms.support.destination.JndiDestinationResolver;\nimport org.springframework.transaction.jta.JtaTransactionManager;\n\n/**\n * Configuration for Spring 4.1 annotation driven JMS.\n *\n * @author Phillip Webb\n * @author Stephane Nicoll\n * @since 1.2.0\n */\n@Configuration\n@ConditionalOnClass(EnableJms.class)\nclass JmsAnnotationDrivenConfiguration {\n\n\tprivate final ObjectProvider<DestinationResolver> destinationResolver;\n\n\tprivate final ObjectProvider<JtaTransactionManager> transactionManager;\n\n\tprivate final ObjectProvider<MessageConverter> messageConverter;\n\n\tprivate final JmsProperties properties;\n\n\tJmsAnnotationDrivenConfiguration(\n\t\t\tObjectProvider<DestinationResolver> destinationResolver,\n\t\t\tObjectProvider<JtaTransactionManager> transactionManager,\n\t\t\tObjectProvider<MessageConverter> messageConverter, JmsProperties properties) {\n\t\tthis.destinationResolver = destinationResolver;\n\t\tthis.transactionManager = transactionManager;\n\t\tthis.messageConverter = messageConverter;\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic DefaultJmsListenerContainerFactoryConfigurer jmsListenerContainerFactoryConfigurer() {\n\t\tDefaultJmsListenerContainerFactoryConfigurer configurer = new DefaultJmsListenerContainerFactoryConfigurer();\n\t\tconfigurer.setDestinationResolver(this.destinationResolver.getIfUnique());\n\t\tconfigurer.setTransactionManager(this.transactionManager.getIfUnique());\n\t\tconfigurer.setMessageConverter(this.messageConverter.getIfUnique());\n\t\tconfigurer.setJmsProperties(this.properties);\n\t\treturn configurer;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "jmsListenerContainerFactory")\n\tpublic DefaultJmsListenerContainerFactory jmsListenerContainerFactory(\n\t\t\tDefaultJmsListenerContainerFactoryConfigurer configurer,\n\t\t\tConnectionFactory connectionFactory) {\n\t\tDefaultJmsListenerContainerFactory factory = new DefaultJmsListenerContainerFactory();\n\t\tconfigurer.configure(factory, connectionFactory);\n\t\treturn factory;\n\t}\n\n\t@Configuration\n\t@EnableJms\n\t@ConditionalOnMissingBean(name = JmsListenerConfigUtils.JMS_LISTENER_ANNOTATION_PROCESSOR_BEAN_NAME)\n\tprotected static class EnableJmsConfiguration {\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnJndi\n\tprotected static class JndiConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(DestinationResolver.class)\n\t\tpublic JndiDestinationResolver destinationResolver() {\n\t\t\tJndiDestinationResolver resolver = new JndiDestinationResolver();\n\t\t\tresolver.setFallbackToDynamicDestination(true);\n\t\t\treturn resolver;\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
