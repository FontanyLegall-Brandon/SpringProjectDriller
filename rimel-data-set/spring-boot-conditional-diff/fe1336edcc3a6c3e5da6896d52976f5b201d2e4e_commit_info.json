{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,7 +16,17 @@\n \n package org.springframework.boot.autoconfigure.batch;\n \n+import javax.sql.DataSource;\n+\n+import org.springframework.batch.core.configuration.ListableJobLocator;\n+import org.springframework.batch.core.converter.JobParametersConverter;\n+import org.springframework.batch.core.explore.JobExplorer;\n+import org.springframework.batch.core.explore.support.JobExplorerFactoryBean;\n import org.springframework.batch.core.launch.JobLauncher;\n+import org.springframework.batch.core.launch.JobOperator;\n+import org.springframework.batch.core.launch.support.SimpleJobOperator;\n+import org.springframework.batch.core.repository.JobRepository;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.ExitCodeGenerator;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n@@ -26,6 +36,7 @@ import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.jdbc.core.JdbcOperations;\n import org.springframework.util.StringUtils;\n \n /**\n@@ -37,20 +48,23 @@ import org.springframework.util.StringUtils;\n  * @author Dave Syer\n  */\n @Configuration\n-@ConditionalOnClass({ JobLauncher.class })\n+@ConditionalOnClass({ JobLauncher.class, DataSource.class, JdbcOperations.class })\n public class BatchAutoConfiguration {\n \n \t@Value("${spring.batch.job.name:}")\n \tprivate String jobName;\n \n+\t@Autowired(required = false)\n+\tprivate JobParametersConverter jobParametersConverter;\n+\n \t@Bean\n-\t@ConditionalOnMissingBean(BatchDatabaseInitializer.class)\n+\t@ConditionalOnMissingBean\n \tpublic BatchDatabaseInitializer batchDatabaseInitializer() {\n \t\treturn new BatchDatabaseInitializer();\n \t}\n \n \t@Bean\n-\t@ConditionalOnMissingBean(JobLauncherCommandLineRunner.class)\n+\t@ConditionalOnMissingBean\n \t@ConditionalOnBean(JobLauncher.class)\n \t@ConditionalOnExpression("${spring.batch.job.enabled:true}")\n \tpublic JobLauncherCommandLineRunner jobLauncherCommandLineRunner() {\n@@ -62,10 +76,34 @@ public class BatchAutoConfiguration {\n \t}\n \n \t@Bean\n-\t@ConditionalOnMissingBean(ExitCodeGenerator.class)\n+\t@ConditionalOnMissingBean\n \t@ConditionalOnBean(JobLauncher.class)\n \tpublic ExitCodeGenerator jobExecutionExitCodeGenerator() {\n \t\treturn new JobExecutionExitCodeGenerator();\n \t}\n \n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic JobExplorer jobExplorer(DataSource dataSource) throws Exception {\n+\t\tJobExplorerFactoryBean factory = new JobExplorerFactoryBean();\n+\t\tfactory.setDataSource(dataSource);\n+\t\tfactory.afterPropertiesSet();\n+\t\treturn (JobExplorer) factory.getObject();\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic JobOperator jobOperator(JobExplorer jobExplorer, JobLauncher jobLauncher,\n+\t\t\tListableJobLocator jobRegistry, JobRepository jobRepository) throws Exception {\n+\t\tSimpleJobOperator factory = new SimpleJobOperator();\n+\t\tfactory.setJobExplorer(jobExplorer);\n+\t\tfactory.setJobLauncher(jobLauncher);\n+\t\tfactory.setJobRegistry(jobRegistry);\n+\t\tfactory.setJobRepository(jobRepository);\n+\t\tif (this.jobParametersConverter != null) {\n+\t\t\tfactory.setJobParametersConverter(this.jobParametersConverter);\n+\t\t}\n+\t\treturn factory;\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.batch;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.batch.core.configuration.ListableJobLocator;\nimport org.springframework.batch.core.converter.JobParametersConverter;\nimport org.springframework.batch.core.explore.JobExplorer;\nimport org.springframework.batch.core.explore.support.JobExplorerFactoryBean;\nimport org.springframework.batch.core.launch.JobLauncher;\nimport org.springframework.batch.core.launch.JobOperator;\nimport org.springframework.batch.core.launch.support.SimpleJobOperator;\nimport org.springframework.batch.core.repository.JobRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.ExitCodeGenerator;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jdbc.core.JdbcOperations;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Batch. By default all\n * jobs in the context will be executed on startup (disable this behaviour with\n * <code>spring.boot.exec.enabled=false</code>). User can supply a job name to execute on\n * startup with <code>spring.batch.exec.name=...</code>.\n * \n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnClass({ JobLauncher.class, DataSource.class, JdbcOperations.class })\npublic class BatchAutoConfiguration {\n\n\t@Value("${spring.batch.job.name:}")\n\tprivate String jobName;\n\n\t@Autowired(required = false)\n\tprivate JobParametersConverter jobParametersConverter;\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic BatchDatabaseInitializer batchDatabaseInitializer() {\n\t\treturn new BatchDatabaseInitializer();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnBean(JobLauncher.class)\n\t@ConditionalOnExpression("${spring.batch.job.enabled:true}")\n\tpublic JobLauncherCommandLineRunner jobLauncherCommandLineRunner() {\n\t\tJobLauncherCommandLineRunner runner = new JobLauncherCommandLineRunner();\n\t\tif (StringUtils.hasText(this.jobName)) {\n\t\t\trunner.setJobName(this.jobName);\n\t\t}\n\t\treturn runner;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnBean(JobLauncher.class)\n\tpublic ExitCodeGenerator jobExecutionExitCodeGenerator() {\n\t\treturn new JobExecutionExitCodeGenerator();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic JobExplorer jobExplorer(DataSource dataSource) throws Exception {\n\t\tJobExplorerFactoryBean factory = new JobExplorerFactoryBean();\n\t\tfactory.setDataSource(dataSource);\n\t\tfactory.afterPropertiesSet();\n\t\treturn (JobExplorer) factory.getObject();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic JobOperator jobOperator(JobExplorer jobExplorer, JobLauncher jobLauncher,\n\t\t\tListableJobLocator jobRegistry, JobRepository jobRepository) throws Exception {\n\t\tSimpleJobOperator factory = new SimpleJobOperator();\n\t\tfactory.setJobExplorer(jobExplorer);\n\t\tfactory.setJobLauncher(jobLauncher);\n\t\tfactory.setJobRegistry(jobRegistry);\n\t\tfactory.setJobRepository(jobRepository);\n\t\tif (this.jobParametersConverter != null) {\n\t\t\tfactory.setJobParametersConverter(this.jobParametersConverter);\n\t\t}\n\t\treturn factory;\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.batch;\n\nimport org.springframework.batch.core.launch.JobLauncher;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.ExitCodeGenerator;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Batch. By default all\n * jobs in the context will be executed on startup (disable this behaviour with\n * <code>spring.boot.exec.enabled=false</code>). User can supply a job name to execute on\n * startup with <code>spring.batch.exec.name=...</code>.\n * \n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnClass({ JobLauncher.class })\npublic class BatchAutoConfiguration {\n\n\t@Value("${spring.batch.job.name:}")\n\tprivate String jobName;\n\n\t@Bean\n\t@ConditionalOnMissingBean(BatchDatabaseInitializer.class)\n\tpublic BatchDatabaseInitializer batchDatabaseInitializer() {\n\t\treturn new BatchDatabaseInitializer();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(JobLauncherCommandLineRunner.class)\n\t@ConditionalOnBean(JobLauncher.class)\n\t@ConditionalOnExpression("${spring.batch.job.enabled:true}")\n\tpublic JobLauncherCommandLineRunner jobLauncherCommandLineRunner() {\n\t\tJobLauncherCommandLineRunner runner = new JobLauncherCommandLineRunner();\n\t\tif (StringUtils.hasText(this.jobName)) {\n\t\t\trunner.setJobName(this.jobName);\n\t\t}\n\t\treturn runner;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(ExitCodeGenerator.class)\n\t@ConditionalOnBean(JobLauncher.class)\n\tpublic ExitCodeGenerator jobExecutionExitCodeGenerator() {\n\t\treturn new JobExecutionExitCodeGenerator();\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
