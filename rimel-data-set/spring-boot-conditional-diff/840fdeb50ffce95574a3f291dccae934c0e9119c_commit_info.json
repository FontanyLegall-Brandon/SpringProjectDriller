{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -29,9 +29,9 @@ import org.springframework.beans.factory.BeanFactoryUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n-import org.springframework.boot.autoconfigure.condition.ConditionLogUtils;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.SpringBootCondition;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Condition;\n@@ -39,6 +39,7 @@ import org.springframework.context.annotation.ConditionContext;\n import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Import;\n+import org.springframework.core.env.Environment;\n import org.springframework.core.io.Resource;\n import org.springframework.core.type.AnnotatedTypeMetadata;\n import org.springframework.jdbc.core.JdbcOperations;\n@@ -55,6 +56,7 @@ import org.springframework.util.StringUtils;\n  * {@link EnableAutoConfiguration Auto-configuration} for {@link DataSource}.\n  * \n  * @author Dave Syer\n+ * @author Phillip Webb\n  */\n @Configuration\n @ConditionalOnClass(EmbeddedDatabaseType.class /* Spring JDBC */)\n@@ -85,7 +87,7 @@ public class DataSourceAutoConfiguration {\n \t}\n \n \t@Configuration\n-\t@Conditional(DataSourceAutoConfiguration.SomeDatabaseCondition.class)\n+\t@Conditional(DataSourceAutoConfiguration.DatabaseCondition.class)\n \tprotected static class JdbcTemplateConfiguration {\n \n \t\t@Autowired(required = false)\n@@ -134,166 +136,131 @@ public class DataSourceAutoConfiguration {\n \t\t}\n \t}\n \n-\tstatic class SomeDatabaseCondition implements Condition {\n+\tstatic abstract class NonEmbeddedDatabaseCondition extends SpringBootCondition {\n \n-\t\tprivate Log logger = LogFactory.getLog(getClass());\n-\n-\t\tprivate Condition tomcatCondition = new TomcatDatabaseCondition();\n-\n-\t\tprivate Condition dbcpCondition = new BasicDatabaseCondition();\n-\n-\t\tprivate Condition embeddedCondition = new EmbeddedDatabaseCondition();\n+\t\tprotected abstract String getDataSourceClassName();\n \n \t\t@Override\n-\t\tpublic boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n-\n-\t\t\tString checking = ConditionLogUtils.getPrefix(this.logger, metadata);\n-\n-\t\t\tif (this.tomcatCondition.matches(context, metadata)\n-\t\t\t\t\t|| this.dbcpCondition.matches(context, metadata)\n-\t\t\t\t\t|| this.embeddedCondition.matches(context, metadata)) {\n-\t\t\t\tif (this.logger.isDebugEnabled()) {\n-\t\t\t\t\tthis.logger.debug(checking + "Existing auto database "\n-\t\t\t\t\t\t\t+ "detected: match result true");\n-\t\t\t\t}\n-\t\t\t\treturn true;\n+\t\tpublic Outcome getMatchOutcome(ConditionContext context,\n+\t\t\t\tAnnotatedTypeMetadata metadata) {\n+\n+\t\t\tif (!ClassUtils.isPresent(getDataSourceClassName(), context.getClassLoader())) {\n+\t\t\t\treturn Outcome.noMatch(getDataSourceClassName()\n+\t\t\t\t\t\t+ " DataSource class not found");\n \t\t\t}\n-\t\t\tif (BeanFactoryUtils.beanNamesForTypeIncludingAncestors(\n-\t\t\t\t\tcontext.getBeanFactory(), DataSource.class, true, false).length > 0) {\n-\t\t\t\tif (this.logger.isDebugEnabled()) {\n-\t\t\t\t\tthis.logger.debug(checking + "Existing bean configured database "\n-\t\t\t\t\t\t\t+ "detected: match result true");\n-\t\t\t\t}\n-\t\t\t\treturn true;\n+\n+\t\t\tString driverClassName = getDriverClassName(context.getEnvironment());\n+\t\t\tif (driverClassName == null) {\n+\t\t\t\treturn Outcome.noMatch("no database driver");\n \t\t\t}\n-\t\t\tif (this.logger.isDebugEnabled()) {\n-\t\t\t\tthis.logger.debug(checking + "Existing bean configured database not "\n-\t\t\t\t\t\t+ "detected: match result false");\n+\n+\t\t\tString url = getUrl(context.getEnvironment());\n+\t\t\tif (url == null) {\n+\t\t\t\treturn Outcome.noMatch("no database URL");\n \t\t\t}\n-\t\t\treturn false;\n-\t\t}\n \n-\t}\n+\t\t\tif (ClassUtils.isPresent(driverClassName, context.getClassLoader())) {\n+\t\t\t\treturn Outcome.match("found database driver " + driverClassName);\n+\t\t\t}\n \n-\tstatic class TomcatDatabaseCondition extends NonEmbeddedDatabaseCondition {\n+\t\t\treturn Outcome.match("missing database driver " + driverClassName);\n+\t\t}\n \n-\t\t@Override\n-\t\tprotected String getDataSourecClassName() {\n-\t\t\treturn "org.apache.tomcat.jdbc.pool.DataSource";\n+\t\tprivate String getDriverClassName(Environment environment) {\n+\t\t\tString driverClassName = environment == null ? null : environment\n+\t\t\t\t\t.getProperty("spring.database.driverClassName");\n+\t\t\tif (driverClassName == null) {\n+\t\t\t\tdriverClassName = EmbeddedDatabaseConfiguration\n+\t\t\t\t\t\t.getEmbeddedDatabaseDriverClass(EmbeddedDatabaseConfiguration\n+\t\t\t\t\t\t\t\t.getEmbeddedDatabaseType());\n+\t\t\t}\n+\t\t\treturn driverClassName;\n \t\t}\n \n+\t\tprivate String getUrl(Environment environment) {\n+\t\t\tString url = (environment == null ? null : environment\n+\t\t\t\t\t.getProperty("spring.database.url"));\n+\t\t\tif (url == null) {\n+\t\t\t\turl = EmbeddedDatabaseConfiguration\n+\t\t\t\t\t\t.getEmbeddedDatabaseUrl(EmbeddedDatabaseConfiguration\n+\t\t\t\t\t\t\t\t.getEmbeddedDatabaseType());\n+\t\t\t}\n+\t\t\treturn url;\n+\t\t}\n \t}\n \n \tstatic class BasicDatabaseCondition extends NonEmbeddedDatabaseCondition {\n \n-\t\tprivate Condition condition = new TomcatDatabaseCondition();\n+\t\tprivate Condition tomcatCondition = new TomcatDatabaseCondition();\n \n \t\t@Override\n-\t\tprotected String getDataSourecClassName() {\n+\t\tprotected String getDataSourceClassName() {\n \t\t\treturn "org.apache.commons.dbcp.BasicDataSource";\n \t\t}\n \n \t\t@Override\n-\t\tpublic boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n-\t\t\tif (this.condition.matches(context, metadata)) {\n-\t\t\t\treturn false; // prefer Tomcat pool\n+\t\tpublic Outcome getMatchOutcome(ConditionContext context,\n+\t\t\t\tAnnotatedTypeMetadata metadata) {\n+\t\t\tif (matches(context, metadata, this.tomcatCondition)) {\n+\t\t\t\treturn Outcome.noMatch("tomcat DataSource");\n \t\t\t}\n-\t\t\treturn super.matches(context, metadata);\n+\t\t\treturn super.getMatchOutcome(context, metadata);\n \t\t}\n \t}\n \n-\tstatic abstract class NonEmbeddedDatabaseCondition implements Condition {\n-\n-\t\tprivate Log logger = LogFactory.getLog(getClass());\n-\n-\t\tprotected abstract String getDataSourecClassName();\n+\tstatic class TomcatDatabaseCondition extends NonEmbeddedDatabaseCondition {\n \n \t\t@Override\n-\t\tpublic boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n-\n-\t\t\tString checking = ConditionLogUtils.getPrefix(this.logger, metadata);\n+\t\tprotected String getDataSourceClassName() {\n+\t\t\treturn "org.apache.tomcat.jdbc.pool.DataSource";\n+\t\t}\n \n-\t\t\tif (!ClassUtils.isPresent(getDataSourecClassName(), null)) {\n-\t\t\t\tif (this.logger.isDebugEnabled()) {\n-\t\t\t\t\tthis.logger.debug(checking + "Tomcat DataSource pool not found");\n-\t\t\t\t}\n-\t\t\t\treturn false;\n-\t\t\t}\n+\t}\n \n-\t\t\tString driverClassName = getDriverClassName(context, checking);\n-\t\t\tString url = getUrl(context);\n+\tstatic class EmbeddedDatabaseCondition extends SpringBootCondition {\n \n-\t\t\tif (driverClassName != null && url != null\n-\t\t\t\t\t&& ClassUtils.isPresent(driverClassName, null)) {\n-\t\t\t\tif (this.logger.isDebugEnabled()) {\n-\t\t\t\t\tthis.logger.debug(checking + "Driver class " + driverClassName\n-\t\t\t\t\t\t\t+ " found");\n-\t\t\t\t}\n-\t\t\t\treturn true;\n-\t\t\t}\n+\t\tprivate SpringBootCondition tomcatCondition = new TomcatDatabaseCondition();\n \n-\t\t\tif (this.logger.isDebugEnabled()) {\n-\t\t\t\tthis.logger.debug(checking + "Driver class " + driverClassName\n-\t\t\t\t\t\t+ " not found");\n-\t\t\t}\n-\t\t\treturn false;\n-\t\t}\n+\t\tprivate SpringBootCondition dbcpCondition = new BasicDatabaseCondition();\n \n-\t\tprivate String getDriverClassName(ConditionContext context, String checking) {\n-\t\t\tString driverClassName = context.getEnvironment().getProperty(\n-\t\t\t\t\t"spring.database.driverClassName");\n-\t\t\tif (this.logger.isDebugEnabled()) {\n-\t\t\t\tthis.logger.debug(checking\n-\t\t\t\t\t\t+ "Spring JDBC detected (embedded database type is "\n-\t\t\t\t\t\t+ EmbeddedDatabaseConfiguration.getEmbeddedDatabaseType() + ").");\n-\t\t\t}\n-\t\t\tif (driverClassName == null) {\n-\t\t\t\tdriverClassName = EmbeddedDatabaseConfiguration\n-\t\t\t\t\t\t.getEmbeddedDatabaseDriverClass(EmbeddedDatabaseConfiguration\n-\t\t\t\t\t\t\t\t.getEmbeddedDatabaseType());\n+\t\t@Override\n+\t\tpublic Outcome getMatchOutcome(ConditionContext context,\n+\t\t\t\tAnnotatedTypeMetadata metadata) {\n+\t\t\tif (anyMatches(context, metadata, this.tomcatCondition, this.dbcpCondition)) {\n+\t\t\t\treturn Outcome.noMatch("existing non-embedded database detected");\n \t\t\t}\n-\t\t\treturn driverClassName;\n-\t\t}\n-\n-\t\tprivate String getUrl(ConditionContext context) {\n-\t\t\tString url = context.getEnvironment().getProperty("spring.database.url");\n-\t\t\tif (url == null) {\n-\t\t\t\turl = EmbeddedDatabaseConfiguration\n-\t\t\t\t\t\t.getEmbeddedDatabaseUrl(EmbeddedDatabaseConfiguration\n-\t\t\t\t\t\t\t\t.getEmbeddedDatabaseType());\n+\t\t\tEmbeddedDatabaseType type = EmbeddedDatabaseConfiguration\n+\t\t\t\t\t.getEmbeddedDatabaseType();\n+\t\t\tif (type == null) {\n+\t\t\t\treturn Outcome.noMatch("no embedded database detected");\n \t\t\t}\n-\t\t\treturn url;\n+\t\t\treturn Outcome.match("embedded database " + type + " detected");\n \t\t}\n \t}\n \n-\tstatic class EmbeddedDatabaseCondition implements Condition {\n+\tstatic class DatabaseCondition extends SpringBootCondition {\n \n-\t\tprivate Log logger = LogFactory.getLog(getClass());\n+\t\tprivate SpringBootCondition tomcatCondition = new TomcatDatabaseCondition();\n \n-\t\tprivate Condition tomcatCondition = new TomcatDatabaseCondition();\n+\t\tprivate SpringBootCondition dbcpCondition = new BasicDatabaseCondition();\n \n-\t\tprivate Condition dbcpCondition = new BasicDatabaseCondition();\n+\t\tprivate SpringBootCondition embeddedCondition = new EmbeddedDatabaseCondition();\n \n \t\t@Override\n-\t\tpublic boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n+\t\tpublic Outcome getMatchOutcome(ConditionContext context,\n+\t\t\t\tAnnotatedTypeMetadata metadata) {\n \n-\t\t\tString checking = ConditionLogUtils.getPrefix(this.logger, metadata);\n-\n-\t\t\tif (this.tomcatCondition.matches(context, metadata)\n-\t\t\t\t\t|| this.dbcpCondition.matches(context, metadata)) {\n-\t\t\t\tif (this.logger.isDebugEnabled()) {\n-\t\t\t\t\tthis.logger.debug(checking + "Existing non-embedded "\n-\t\t\t\t\t\t\t+ "database detected: match result false");\n-\t\t\t\t}\n-\t\t\t\treturn false;\n+\t\t\tif (anyMatches(context, metadata, this.tomcatCondition, this.dbcpCondition,\n+\t\t\t\t\tthis.embeddedCondition)) {\n+\t\t\t\treturn Outcome.match("existing auto database detected");\n \t\t\t}\n-\t\t\tif (this.logger.isDebugEnabled()) {\n-\t\t\t\tthis.logger.debug(checking\n-\t\t\t\t\t\t+ "Spring JDBC detected (embedded database type is "\n-\t\t\t\t\t\t+ EmbeddedDatabaseConfiguration.getEmbeddedDatabaseType() + ").");\n+\n+\t\t\tif (BeanFactoryUtils.beanNamesForTypeIncludingAncestors(\n+\t\t\t\t\tcontext.getBeanFactory(), DataSource.class, true, false).length > 0) {\n+\t\t\t\treturn Outcome.match("Existing bean configured database detected");\n \t\t\t}\n-\t\t\treturn EmbeddedDatabaseConfiguration.getEmbeddedDatabaseType() != null;\n+\n+\t\t\treturn Outcome.noMatch("no existing bean configured database");\n \t\t}\n \t}\n-\n }\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jdbc;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport javax.annotation.PostConstruct;\nimport javax.sql.DataSource;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.beans.factory.BeanFactoryUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Condition;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.core.env.Environment;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.jdbc.core.JdbcOperations;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations;\nimport org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\nimport org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;\nimport org.springframework.jdbc.datasource.init.DatabasePopulatorUtils;\nimport org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link DataSource}.\n * \n * @author Dave Syer\n * @author Phillip Webb\n */\n@Configuration\n@ConditionalOnClass(EmbeddedDatabaseType.class /* Spring JDBC */)\n@ConditionalOnMissingBean(DataSource.class)\npublic class DataSourceAutoConfiguration {\n\n\tprivate static Log logger = LogFactory.getLog(DataSourceAutoConfiguration.class);\n\n\t@Autowired(required = false)\n\tprivate DataSource dataSource;\n\n\t@Autowired\n\tprivate ApplicationContext applicationContext;\n\n\t@Conditional(DataSourceAutoConfiguration.EmbeddedDatabaseCondition.class)\n\t@Import(EmbeddedDatabaseConfiguration.class)\n\tprotected static class EmbeddedConfiguration {\n\t}\n\n\t@Conditional(DataSourceAutoConfiguration.TomcatDatabaseCondition.class)\n\t@Import(TomcatDataSourceConfiguration.class)\n\tprotected static class TomcatConfiguration {\n\t}\n\n\t@Conditional(DataSourceAutoConfiguration.BasicDatabaseCondition.class)\n\t@Import(BasicDataSourceConfiguration.class)\n\tprotected static class DbcpConfiguration {\n\t}\n\n\t@Configuration\n\t@Conditional(DataSourceAutoConfiguration.DatabaseCondition.class)\n\tprotected static class JdbcTemplateConfiguration {\n\n\t\t@Autowired(required = false)\n\t\tprivate DataSource dataSource;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(JdbcOperations.class)\n\t\tpublic JdbcTemplate jdbcTemplate() {\n\t\t\treturn new JdbcTemplate(this.dataSource);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(NamedParameterJdbcOperations.class)\n\t\tpublic NamedParameterJdbcOperations namedParameterJdbcTemplate() {\n\t\t\treturn new NamedParameterJdbcTemplate(this.dataSource);\n\t\t}\n\n\t}\n\n\t@Value("${spring.database.schema:classpath*:schema-${spring.database.platform:all}.sql}")\n\tprivate String schemaLocations = "";\n\n\t@PostConstruct\n\tprotected void initialize() throws Exception {\n\t\tif (this.dataSource == null) {\n\t\t\tlogger.debug("No DataSource found so not initializing");\n\t\t\treturn;\n\t\t}\n\t\tResourceDatabasePopulator populator = new ResourceDatabasePopulator();\n\t\tboolean exists = false;\n\t\tList<Resource> resources = new ArrayList<Resource>();\n\t\tfor (String location : StringUtils\n\t\t\t\t.commaDelimitedListToStringArray(this.schemaLocations)) {\n\t\t\tresources\n\t\t\t\t\t.addAll(Arrays.asList(this.applicationContext.getResources(location)));\n\t\t}\n\t\tfor (Resource resource : resources) {\n\t\t\tif (resource.exists()) {\n\t\t\t\texists = true;\n\t\t\t\tpopulator.addScript(resource);\n\t\t\t\tpopulator.setContinueOnError(true);\n\t\t\t}\n\t\t}\n\t\tif (exists) {\n\t\t\tDatabasePopulatorUtils.execute(populator, this.dataSource);\n\t\t}\n\t}\n\n\tstatic abstract class NonEmbeddedDatabaseCondition extends SpringBootCondition {\n\n\t\tprotected abstract String getDataSourceClassName();\n\n\t\t@Override\n\t\tpublic Outcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\n\t\t\tif (!ClassUtils.isPresent(getDataSourceClassName(), context.getClassLoader())) {\n\t\t\t\treturn Outcome.noMatch(getDataSourceClassName()\n\t\t\t\t\t\t+ " DataSource class not found");\n\t\t\t}\n\n\t\t\tString driverClassName = getDriverClassName(context.getEnvironment());\n\t\t\tif (driverClassName == null) {\n\t\t\t\treturn Outcome.noMatch("no database driver");\n\t\t\t}\n\n\t\t\tString url = getUrl(context.getEnvironment());\n\t\t\tif (url == null) {\n\t\t\t\treturn Outcome.noMatch("no database URL");\n\t\t\t}\n\n\t\t\tif (ClassUtils.isPresent(driverClassName, context.getClassLoader())) {\n\t\t\t\treturn Outcome.match("found database driver " + driverClassName);\n\t\t\t}\n\n\t\t\treturn Outcome.match("missing database driver " + driverClassName);\n\t\t}\n\n\t\tprivate String getDriverClassName(Environment environment) {\n\t\t\tString driverClassName = environment == null ? null : environment\n\t\t\t\t\t.getProperty("spring.database.driverClassName");\n\t\t\tif (driverClassName == null) {\n\t\t\t\tdriverClassName = EmbeddedDatabaseConfiguration\n\t\t\t\t\t\t.getEmbeddedDatabaseDriverClass(EmbeddedDatabaseConfiguration\n\t\t\t\t\t\t\t\t.getEmbeddedDatabaseType());\n\t\t\t}\n\t\t\treturn driverClassName;\n\t\t}\n\n\t\tprivate String getUrl(Environment environment) {\n\t\t\tString url = (environment == null ? null : environment\n\t\t\t\t\t.getProperty("spring.database.url"));\n\t\t\tif (url == null) {\n\t\t\t\turl = EmbeddedDatabaseConfiguration\n\t\t\t\t\t\t.getEmbeddedDatabaseUrl(EmbeddedDatabaseConfiguration\n\t\t\t\t\t\t\t\t.getEmbeddedDatabaseType());\n\t\t\t}\n\t\t\treturn url;\n\t\t}\n\t}\n\n\tstatic class BasicDatabaseCondition extends NonEmbeddedDatabaseCondition {\n\n\t\tprivate Condition tomcatCondition = new TomcatDatabaseCondition();\n\n\t\t@Override\n\t\tprotected String getDataSourceClassName() {\n\t\t\treturn "org.apache.commons.dbcp.BasicDataSource";\n\t\t}\n\n\t\t@Override\n\t\tpublic Outcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tif (matches(context, metadata, this.tomcatCondition)) {\n\t\t\t\treturn Outcome.noMatch("tomcat DataSource");\n\t\t\t}\n\t\t\treturn super.getMatchOutcome(context, metadata);\n\t\t}\n\t}\n\n\tstatic class TomcatDatabaseCondition extends NonEmbeddedDatabaseCondition {\n\n\t\t@Override\n\t\tprotected String getDataSourceClassName() {\n\t\t\treturn "org.apache.tomcat.jdbc.pool.DataSource";\n\t\t}\n\n\t}\n\n\tstatic class EmbeddedDatabaseCondition extends SpringBootCondition {\n\n\t\tprivate SpringBootCondition tomcatCondition = new TomcatDatabaseCondition();\n\n\t\tprivate SpringBootCondition dbcpCondition = new BasicDatabaseCondition();\n\n\t\t@Override\n\t\tpublic Outcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tif (anyMatches(context, metadata, this.tomcatCondition, this.dbcpCondition)) {\n\t\t\t\treturn Outcome.noMatch("existing non-embedded database detected");\n\t\t\t}\n\t\t\tEmbeddedDatabaseType type = EmbeddedDatabaseConfiguration\n\t\t\t\t\t.getEmbeddedDatabaseType();\n\t\t\tif (type == null) {\n\t\t\t\treturn Outcome.noMatch("no embedded database detected");\n\t\t\t}\n\t\t\treturn Outcome.match("embedded database " + type + " detected");\n\t\t}\n\t}\n\n\tstatic class DatabaseCondition extends SpringBootCondition {\n\n\t\tprivate SpringBootCondition tomcatCondition = new TomcatDatabaseCondition();\n\n\t\tprivate SpringBootCondition dbcpCondition = new BasicDatabaseCondition();\n\n\t\tprivate SpringBootCondition embeddedCondition = new EmbeddedDatabaseCondition();\n\n\t\t@Override\n\t\tpublic Outcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\n\t\t\tif (anyMatches(context, metadata, this.tomcatCondition, this.dbcpCondition,\n\t\t\t\t\tthis.embeddedCondition)) {\n\t\t\t\treturn Outcome.match("existing auto database detected");\n\t\t\t}\n\n\t\t\tif (BeanFactoryUtils.beanNamesForTypeIncludingAncestors(\n\t\t\t\t\tcontext.getBeanFactory(), DataSource.class, true, false).length > 0) {\n\t\t\t\treturn Outcome.match("Existing bean configured database detected");\n\t\t\t}\n\n\t\t\treturn Outcome.noMatch("no existing bean configured database");\n\t\t}\n\t}\n}\n', 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jdbc;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport javax.annotation.PostConstruct;\nimport javax.sql.DataSource;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.beans.factory.BeanFactoryUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionLogUtils;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Condition;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.jdbc.core.JdbcOperations;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations;\nimport org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\nimport org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;\nimport org.springframework.jdbc.datasource.init.DatabasePopulatorUtils;\nimport org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link DataSource}.\n * \n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnClass(EmbeddedDatabaseType.class /* Spring JDBC */)\n@ConditionalOnMissingBean(DataSource.class)\npublic class DataSourceAutoConfiguration {\n\n\tprivate static Log logger = LogFactory.getLog(DataSourceAutoConfiguration.class);\n\n\t@Autowired(required = false)\n\tprivate DataSource dataSource;\n\n\t@Autowired\n\tprivate ApplicationContext applicationContext;\n\n\t@Conditional(DataSourceAutoConfiguration.EmbeddedDatabaseCondition.class)\n\t@Import(EmbeddedDatabaseConfiguration.class)\n\tprotected static class EmbeddedConfiguration {\n\t}\n\n\t@Conditional(DataSourceAutoConfiguration.TomcatDatabaseCondition.class)\n\t@Import(TomcatDataSourceConfiguration.class)\n\tprotected static class TomcatConfiguration {\n\t}\n\n\t@Conditional(DataSourceAutoConfiguration.BasicDatabaseCondition.class)\n\t@Import(BasicDataSourceConfiguration.class)\n\tprotected static class DbcpConfiguration {\n\t}\n\n\t@Configuration\n\t@Conditional(DataSourceAutoConfiguration.SomeDatabaseCondition.class)\n\tprotected static class JdbcTemplateConfiguration {\n\n\t\t@Autowired(required = false)\n\t\tprivate DataSource dataSource;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(JdbcOperations.class)\n\t\tpublic JdbcTemplate jdbcTemplate() {\n\t\t\treturn new JdbcTemplate(this.dataSource);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(NamedParameterJdbcOperations.class)\n\t\tpublic NamedParameterJdbcOperations namedParameterJdbcTemplate() {\n\t\t\treturn new NamedParameterJdbcTemplate(this.dataSource);\n\t\t}\n\n\t}\n\n\t@Value("${spring.database.schema:classpath*:schema-${spring.database.platform:all}.sql}")\n\tprivate String schemaLocations = "";\n\n\t@PostConstruct\n\tprotected void initialize() throws Exception {\n\t\tif (this.dataSource == null) {\n\t\t\tlogger.debug("No DataSource found so not initializing");\n\t\t\treturn;\n\t\t}\n\t\tResourceDatabasePopulator populator = new ResourceDatabasePopulator();\n\t\tboolean exists = false;\n\t\tList<Resource> resources = new ArrayList<Resource>();\n\t\tfor (String location : StringUtils\n\t\t\t\t.commaDelimitedListToStringArray(this.schemaLocations)) {\n\t\t\tresources\n\t\t\t\t\t.addAll(Arrays.asList(this.applicationContext.getResources(location)));\n\t\t}\n\t\tfor (Resource resource : resources) {\n\t\t\tif (resource.exists()) {\n\t\t\t\texists = true;\n\t\t\t\tpopulator.addScript(resource);\n\t\t\t\tpopulator.setContinueOnError(true);\n\t\t\t}\n\t\t}\n\t\tif (exists) {\n\t\t\tDatabasePopulatorUtils.execute(populator, this.dataSource);\n\t\t}\n\t}\n\n\tstatic class SomeDatabaseCondition implements Condition {\n\n\t\tprivate Log logger = LogFactory.getLog(getClass());\n\n\t\tprivate Condition tomcatCondition = new TomcatDatabaseCondition();\n\n\t\tprivate Condition dbcpCondition = new BasicDatabaseCondition();\n\n\t\tprivate Condition embeddedCondition = new EmbeddedDatabaseCondition();\n\n\t\t@Override\n\t\tpublic boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n\n\t\t\tString checking = ConditionLogUtils.getPrefix(this.logger, metadata);\n\n\t\t\tif (this.tomcatCondition.matches(context, metadata)\n\t\t\t\t\t|| this.dbcpCondition.matches(context, metadata)\n\t\t\t\t\t|| this.embeddedCondition.matches(context, metadata)) {\n\t\t\t\tif (this.logger.isDebugEnabled()) {\n\t\t\t\t\tthis.logger.debug(checking + "Existing auto database "\n\t\t\t\t\t\t\t+ "detected: match result true");\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (BeanFactoryUtils.beanNamesForTypeIncludingAncestors(\n\t\t\t\t\tcontext.getBeanFactory(), DataSource.class, true, false).length > 0) {\n\t\t\t\tif (this.logger.isDebugEnabled()) {\n\t\t\t\t\tthis.logger.debug(checking + "Existing bean configured database "\n\t\t\t\t\t\t\t+ "detected: match result true");\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (this.logger.isDebugEnabled()) {\n\t\t\t\tthis.logger.debug(checking + "Existing bean configured database not "\n\t\t\t\t\t\t+ "detected: match result false");\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t}\n\n\tstatic class TomcatDatabaseCondition extends NonEmbeddedDatabaseCondition {\n\n\t\t@Override\n\t\tprotected String getDataSourecClassName() {\n\t\t\treturn "org.apache.tomcat.jdbc.pool.DataSource";\n\t\t}\n\n\t}\n\n\tstatic class BasicDatabaseCondition extends NonEmbeddedDatabaseCondition {\n\n\t\tprivate Condition condition = new TomcatDatabaseCondition();\n\n\t\t@Override\n\t\tprotected String getDataSourecClassName() {\n\t\t\treturn "org.apache.commons.dbcp.BasicDataSource";\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n\t\t\tif (this.condition.matches(context, metadata)) {\n\t\t\t\treturn false; // prefer Tomcat pool\n\t\t\t}\n\t\t\treturn super.matches(context, metadata);\n\t\t}\n\t}\n\n\tstatic abstract class NonEmbeddedDatabaseCondition implements Condition {\n\n\t\tprivate Log logger = LogFactory.getLog(getClass());\n\n\t\tprotected abstract String getDataSourecClassName();\n\n\t\t@Override\n\t\tpublic boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n\n\t\t\tString checking = ConditionLogUtils.getPrefix(this.logger, metadata);\n\n\t\t\tif (!ClassUtils.isPresent(getDataSourecClassName(), null)) {\n\t\t\t\tif (this.logger.isDebugEnabled()) {\n\t\t\t\t\tthis.logger.debug(checking + "Tomcat DataSource pool not found");\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tString driverClassName = getDriverClassName(context, checking);\n\t\t\tString url = getUrl(context);\n\n\t\t\tif (driverClassName != null && url != null\n\t\t\t\t\t&& ClassUtils.isPresent(driverClassName, null)) {\n\t\t\t\tif (this.logger.isDebugEnabled()) {\n\t\t\t\t\tthis.logger.debug(checking + "Driver class " + driverClassName\n\t\t\t\t\t\t\t+ " found");\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (this.logger.isDebugEnabled()) {\n\t\t\t\tthis.logger.debug(checking + "Driver class " + driverClassName\n\t\t\t\t\t\t+ " not found");\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tprivate String getDriverClassName(ConditionContext context, String checking) {\n\t\t\tString driverClassName = context.getEnvironment().getProperty(\n\t\t\t\t\t"spring.database.driverClassName");\n\t\t\tif (this.logger.isDebugEnabled()) {\n\t\t\t\tthis.logger.debug(checking\n\t\t\t\t\t\t+ "Spring JDBC detected (embedded database type is "\n\t\t\t\t\t\t+ EmbeddedDatabaseConfiguration.getEmbeddedDatabaseType() + ").");\n\t\t\t}\n\t\t\tif (driverClassName == null) {\n\t\t\t\tdriverClassName = EmbeddedDatabaseConfiguration\n\t\t\t\t\t\t.getEmbeddedDatabaseDriverClass(EmbeddedDatabaseConfiguration\n\t\t\t\t\t\t\t\t.getEmbeddedDatabaseType());\n\t\t\t}\n\t\t\treturn driverClassName;\n\t\t}\n\n\t\tprivate String getUrl(ConditionContext context) {\n\t\t\tString url = context.getEnvironment().getProperty("spring.database.url");\n\t\t\tif (url == null) {\n\t\t\t\turl = EmbeddedDatabaseConfiguration\n\t\t\t\t\t\t.getEmbeddedDatabaseUrl(EmbeddedDatabaseConfiguration\n\t\t\t\t\t\t\t\t.getEmbeddedDatabaseType());\n\t\t\t}\n\t\t\treturn url;\n\t\t}\n\t}\n\n\tstatic class EmbeddedDatabaseCondition implements Condition {\n\n\t\tprivate Log logger = LogFactory.getLog(getClass());\n\n\t\tprivate Condition tomcatCondition = new TomcatDatabaseCondition();\n\n\t\tprivate Condition dbcpCondition = new BasicDatabaseCondition();\n\n\t\t@Override\n\t\tpublic boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n\n\t\t\tString checking = ConditionLogUtils.getPrefix(this.logger, metadata);\n\n\t\t\tif (this.tomcatCondition.matches(context, metadata)\n\t\t\t\t\t|| this.dbcpCondition.matches(context, metadata)) {\n\t\t\t\tif (this.logger.isDebugEnabled()) {\n\t\t\t\t\tthis.logger.debug(checking + "Existing non-embedded "\n\t\t\t\t\t\t\t+ "database detected: match result false");\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (this.logger.isDebugEnabled()) {\n\t\t\t\tthis.logger.debug(checking\n\t\t\t\t\t\t+ "Spring JDBC detected (embedded database type is "\n\t\t\t\t\t\t+ EmbeddedDatabaseConfiguration.getEmbeddedDatabaseType() + ").");\n\t\t\t}\n\t\t\treturn EmbeddedDatabaseConfiguration.getEmbeddedDatabaseType() != null;\n\t\t}\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
