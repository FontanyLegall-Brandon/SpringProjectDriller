{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,12 +16,22 @@\n \n package org.springframework.boot.autoconfigure.liquibase;\n \n+import java.util.HashSet;\n+import java.util.Set;\n+\n import javax.annotation.PostConstruct;\n+import javax.persistence.EntityManagerFactory;\n import javax.sql.DataSource;\n \n import liquibase.integration.spring.SpringLiquibase;\n \n+import org.springframework.beans.factory.BeanFactory;\n+import org.springframework.beans.factory.ListableBeanFactory;\n+import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.config.BeanDefinition;\n+import org.springframework.beans.factory.config.BeanFactoryPostProcessor;\n+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n@@ -32,15 +42,24 @@ import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n import org.springframework.core.io.DefaultResourceLoader;\n import org.springframework.core.io.Resource;\n import org.springframework.core.io.ResourceLoader;\n+import org.springframework.orm.jpa.AbstractEntityManagerFactoryBean;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+import static java.util.Arrays.asList;\n+import static org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors;\n+import static org.springframework.beans.factory.BeanFactoryUtils.transformedBeanName;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for Liquibase.\n  * \n  * @author Marcel Overdijk\n+ * @author Dave Syer\n  * @since 1.1.0\n  */\n @Configuration\n@@ -53,6 +72,7 @@ public class LiquibaseAutoConfiguration {\n \t@Configuration\n \t@ConditionalOnMissingBean(SpringLiquibase.class)\n \t@EnableConfigurationProperties(LiquibaseProperties.class)\n+\t@Import(LiquibaseJpaDependencyConfiguration.class)\n \tpublic static class LiquibaseConfiguration {\n \n \t\t@Autowired\n@@ -87,4 +107,58 @@ public class LiquibaseAutoConfiguration {\n \t\t\treturn liquibase;\n \t\t}\n \t}\n+\n+\t@Configuration\n+\t@ConditionalOnClass(LocalContainerEntityManagerFactoryBean.class)\n+\t@ConditionalOnBean(AbstractEntityManagerFactoryBean.class)\n+\tprotected static class LiquibaseJpaDependencyConfiguration implements\n+\t\t\tBeanFactoryPostProcessor {\n+\n+\t\tpublic static final String LIQUIBASE_JPA_BEAN_NAME = "liquibase";\n+\n+\t\t@Override\n+\t\tpublic void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {\n+\n+\t\t\tfor (String beanName : getEntityManagerFactoryBeanNames(beanFactory)) {\n+\t\t\t\tBeanDefinition definition = getBeanDefinition(beanName, beanFactory);\n+\t\t\t\tdefinition.setDependsOn(StringUtils.addStringToArray(\n+\t\t\t\t\t\tdefinition.getDependsOn(), LIQUIBASE_JPA_BEAN_NAME));\n+\t\t\t}\n+\t\t}\n+\n+\t\tprivate static BeanDefinition getBeanDefinition(String beanName,\n+\t\t\t\tConfigurableListableBeanFactory beanFactory) {\n+\t\t\ttry {\n+\t\t\t\treturn beanFactory.getBeanDefinition(beanName);\n+\t\t\t}\n+\t\t\tcatch (NoSuchBeanDefinitionException e) {\n+\n+\t\t\t\tBeanFactory parentBeanFactory = beanFactory.getParentBeanFactory();\n+\n+\t\t\t\tif (parentBeanFactory instanceof ConfigurableListableBeanFactory) {\n+\t\t\t\t\treturn getBeanDefinition(beanName,\n+\t\t\t\t\t\t\t(ConfigurableListableBeanFactory) parentBeanFactory);\n+\t\t\t\t}\n+\n+\t\t\t\tthrow e;\n+\t\t\t}\n+\t\t}\n+\n+\t\tprivate static Iterable<String> getEntityManagerFactoryBeanNames(\n+\t\t\t\tListableBeanFactory beanFactory) {\n+\n+\t\t\tSet<String> names = new HashSet<String>();\n+\t\t\tnames.addAll(asList(beanNamesForTypeIncludingAncestors(beanFactory,\n+\t\t\t\t\tEntityManagerFactory.class, true, false)));\n+\n+\t\t\tfor (String factoryBeanName : beanNamesForTypeIncludingAncestors(beanFactory,\n+\t\t\t\t\tAbstractEntityManagerFactoryBean.class, true, false)) {\n+\t\t\t\tnames.add(transformedBeanName(factoryBeanName));\n+\t\t\t}\n+\n+\t\t\treturn names;\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.liquibase;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport javax.annotation.PostConstruct;\nimport javax.persistence.EntityManagerFactory;\nimport javax.sql.DataSource;\n\nimport liquibase.integration.spring.SpringLiquibase;\n\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.ListableBeanFactory;\nimport org.springframework.beans.factory.NoSuchBeanDefinitionException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.config.BeanDefinition;\nimport org.springframework.beans.factory.config.BeanFactoryPostProcessor;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.orm.jpa.AbstractEntityManagerFactoryBean;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.util.Assert;\nimport org.springframework.util.StringUtils;\n\nimport static java.util.Arrays.asList;\nimport static org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors;\nimport static org.springframework.beans.factory.BeanFactoryUtils.transformedBeanName;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Liquibase.\n * \n * @author Marcel Overdijk\n * @author Dave Syer\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass(SpringLiquibase.class)\n@ConditionalOnBean(DataSource.class)\n@ConditionalOnExpression("${liquibase.enabled:true}")\n@AutoConfigureAfter(DataSourceAutoConfiguration.class)\npublic class LiquibaseAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnMissingBean(SpringLiquibase.class)\n\t@EnableConfigurationProperties(LiquibaseProperties.class)\n\t@Import(LiquibaseJpaDependencyConfiguration.class)\n\tpublic static class LiquibaseConfiguration {\n\n\t\t@Autowired\n\t\tprivate LiquibaseProperties properties = new LiquibaseProperties();\n\n\t\t@Autowired\n\t\tprivate ResourceLoader resourceLoader = new DefaultResourceLoader();\n\n\t\t@Autowired\n\t\tprivate DataSource dataSource;\n\n\t\t@PostConstruct\n\t\tpublic void checkChangelogExists() {\n\t\t\tif (this.properties.isCheckChangeLogLocation()) {\n\t\t\t\tResource resource = this.resourceLoader.getResource(this.properties\n\t\t\t\t\t\t.getChangeLog());\n\t\t\t\tAssert.state(resource.exists(), "Cannot find changelog location: "\n\t\t\t\t\t\t+ resource\n\t\t\t\t\t\t+ " (please add changelog or check your Liquibase configuration)");\n\t\t\t}\n\t\t}\n\n\t\t@Bean\n\t\tpublic SpringLiquibase liquibase() {\n\t\t\tSpringLiquibase liquibase = new SpringLiquibase();\n\t\t\tliquibase.setChangeLog(this.properties.getChangeLog());\n\t\t\tliquibase.setContexts(this.properties.getContexts());\n\t\t\tliquibase.setDataSource(this.dataSource);\n\t\t\tliquibase.setDefaultSchema(this.properties.getDefaultSchema());\n\t\t\tliquibase.setDropFirst(this.properties.isDropFirst());\n\t\t\tliquibase.setShouldRun(this.properties.isEnabled());\n\t\t\treturn liquibase;\n\t\t}\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(LocalContainerEntityManagerFactoryBean.class)\n\t@ConditionalOnBean(AbstractEntityManagerFactoryBean.class)\n\tprotected static class LiquibaseJpaDependencyConfiguration implements\n\t\t\tBeanFactoryPostProcessor {\n\n\t\tpublic static final String LIQUIBASE_JPA_BEAN_NAME = "liquibase";\n\n\t\t@Override\n\t\tpublic void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {\n\n\t\t\tfor (String beanName : getEntityManagerFactoryBeanNames(beanFactory)) {\n\t\t\t\tBeanDefinition definition = getBeanDefinition(beanName, beanFactory);\n\t\t\t\tdefinition.setDependsOn(StringUtils.addStringToArray(\n\t\t\t\t\t\tdefinition.getDependsOn(), LIQUIBASE_JPA_BEAN_NAME));\n\t\t\t}\n\t\t}\n\n\t\tprivate static BeanDefinition getBeanDefinition(String beanName,\n\t\t\t\tConfigurableListableBeanFactory beanFactory) {\n\t\t\ttry {\n\t\t\t\treturn beanFactory.getBeanDefinition(beanName);\n\t\t\t}\n\t\t\tcatch (NoSuchBeanDefinitionException e) {\n\n\t\t\t\tBeanFactory parentBeanFactory = beanFactory.getParentBeanFactory();\n\n\t\t\t\tif (parentBeanFactory instanceof ConfigurableListableBeanFactory) {\n\t\t\t\t\treturn getBeanDefinition(beanName,\n\t\t\t\t\t\t\t(ConfigurableListableBeanFactory) parentBeanFactory);\n\t\t\t\t}\n\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\n\t\tprivate static Iterable<String> getEntityManagerFactoryBeanNames(\n\t\t\t\tListableBeanFactory beanFactory) {\n\n\t\t\tSet<String> names = new HashSet<String>();\n\t\t\tnames.addAll(asList(beanNamesForTypeIncludingAncestors(beanFactory,\n\t\t\t\t\tEntityManagerFactory.class, true, false)));\n\n\t\t\tfor (String factoryBeanName : beanNamesForTypeIncludingAncestors(beanFactory,\n\t\t\t\t\tAbstractEntityManagerFactoryBean.class, true, false)) {\n\t\t\t\tnames.add(transformedBeanName(factoryBeanName));\n\t\t\t}\n\n\t\t\treturn names;\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.liquibase;\n\nimport javax.annotation.PostConstruct;\nimport javax.sql.DataSource;\n\nimport liquibase.integration.spring.SpringLiquibase;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.util.Assert;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Liquibase.\n * \n * @author Marcel Overdijk\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass(SpringLiquibase.class)\n@ConditionalOnBean(DataSource.class)\n@ConditionalOnExpression("${liquibase.enabled:true}")\n@AutoConfigureAfter(DataSourceAutoConfiguration.class)\npublic class LiquibaseAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnMissingBean(SpringLiquibase.class)\n\t@EnableConfigurationProperties(LiquibaseProperties.class)\n\tpublic static class LiquibaseConfiguration {\n\n\t\t@Autowired\n\t\tprivate LiquibaseProperties properties = new LiquibaseProperties();\n\n\t\t@Autowired\n\t\tprivate ResourceLoader resourceLoader = new DefaultResourceLoader();\n\n\t\t@Autowired\n\t\tprivate DataSource dataSource;\n\n\t\t@PostConstruct\n\t\tpublic void checkChangelogExists() {\n\t\t\tif (this.properties.isCheckChangeLogLocation()) {\n\t\t\t\tResource resource = this.resourceLoader.getResource(this.properties\n\t\t\t\t\t\t.getChangeLog());\n\t\t\t\tAssert.state(resource.exists(), "Cannot find changelog location: "\n\t\t\t\t\t\t+ resource\n\t\t\t\t\t\t+ " (please add changelog or check your Liquibase configuration)");\n\t\t\t}\n\t\t}\n\n\t\t@Bean\n\t\tpublic SpringLiquibase liquibase() {\n\t\t\tSpringLiquibase liquibase = new SpringLiquibase();\n\t\t\tliquibase.setChangeLog(this.properties.getChangeLog());\n\t\t\tliquibase.setContexts(this.properties.getContexts());\n\t\t\tliquibase.setDataSource(this.dataSource);\n\t\t\tliquibase.setDefaultSchema(this.properties.getDefaultSchema());\n\t\t\tliquibase.setDropFirst(this.properties.isDropFirst());\n\t\t\tliquibase.setShouldRun(this.properties.isEnabled());\n\t\t\treturn liquibase;\n\t\t}\n\t}\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
