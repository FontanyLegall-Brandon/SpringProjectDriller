{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2RestOperationsConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2RestOperationsConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -19,19 +19,26 @@ package org.springframework.boot.autoconfigure.security.oauth2.client;\n import javax.annotation.Resource;\n \n import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionOutcome;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnNotWebApplication;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.autoconfigure.condition.SpringBootCondition;\n+import org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2RestOperationsConfiguration.OAuth2ClientIdCondition;\n+import org.springframework.boot.bind.RelaxedPropertyResolver;\n import org.springframework.boot.context.embedded.FilterRegistrationBean;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.ConditionContext;\n+import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Primary;\n import org.springframework.context.annotation.Scope;\n import org.springframework.context.annotation.ScopedProxyMode;\n+import org.springframework.core.env.PropertyResolver;\n+import org.springframework.core.type.AnnotatedTypeMetadata;\n import org.springframework.security.core.Authentication;\n import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.security.oauth2.client.DefaultOAuth2ClientContext;\n@@ -48,6 +55,7 @@ import org.springframework.security.oauth2.config.annotation.web.configuration.E\n import org.springframework.security.oauth2.config.annotation.web.configuration.OAuth2ClientConfiguration;\n import org.springframework.security.oauth2.provider.OAuth2Authentication;\n import org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationDetails;\n+import org.springframework.util.StringUtils;\n \n /**\n  * Configuration for OAuth2 Single Sign On REST operations.\n@@ -57,7 +65,7 @@ import org.springframework.security.oauth2.provider.authentication.OAuth2Authent\n  */\n @Configuration\n @ConditionalOnClass(EnableOAuth2Client.class)\n-@ConditionalOnExpression("\'${spring.oauth2.client.clientId:}\'!=\'\'")\n+@Conditional(OAuth2ClientIdCondition.class)\n public class OAuth2RestOperationsConfiguration {\n \n \t@Bean\n@@ -158,4 +166,20 @@ public class OAuth2RestOperationsConfiguration {\n \n \t}\n \n+\t/**\n+\t * Condition to check if a {@code spring.oauth2.client.client-id} is specified.\n+\t */\n+\tstatic class OAuth2ClientIdCondition extends SpringBootCondition {\n+\n+\t\t@Override\n+\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n+\t\t\t\tAnnotatedTypeMetadata metadata) {\n+\t\t\tPropertyResolver resolver = new RelaxedPropertyResolver(\n+\t\t\t\t\tcontext.getEnvironment(), "spring.oauth2.client.");\n+\t\t\tString clientId = resolver.getProperty("client-id");\n+\t\t\treturn new ConditionOutcome(StringUtils.hasLength(clientId),\n+\t\t\t\t\t"Non empty spring.oauth2.client.client-id");\n+\t\t}\n+\n+\t}\n }\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security.oauth2.client;\n\nimport javax.annotation.Resource;\n\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnNotWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2RestOperationsConfiguration.OAuth2ClientIdCondition;\nimport org.springframework.boot.bind.RelaxedPropertyResolver;\nimport org.springframework.boot.context.embedded.FilterRegistrationBean;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.context.annotation.ScopedProxyMode;\nimport org.springframework.core.env.PropertyResolver;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.oauth2.client.DefaultOAuth2ClientContext;\nimport org.springframework.security.oauth2.client.OAuth2ClientContext;\nimport org.springframework.security.oauth2.client.OAuth2RestTemplate;\nimport org.springframework.security.oauth2.client.filter.OAuth2ClientContextFilter;\nimport org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails;\nimport org.springframework.security.oauth2.client.token.AccessTokenRequest;\nimport org.springframework.security.oauth2.client.token.DefaultAccessTokenRequest;\nimport org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails;\nimport org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails;\nimport org.springframework.security.oauth2.common.DefaultOAuth2AccessToken;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.EnableOAuth2Client;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.OAuth2ClientConfiguration;\nimport org.springframework.security.oauth2.provider.OAuth2Authentication;\nimport org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationDetails;\nimport org.springframework.util.StringUtils;\n\n/**\n * Configuration for OAuth2 Single Sign On REST operations.\n *\n * @author Dave Syer\n * @since 1.3.0\n */\n@Configuration\n@ConditionalOnClass(EnableOAuth2Client.class)\n@Conditional(OAuth2ClientIdCondition.class)\npublic class OAuth2RestOperationsConfiguration {\n\n\t@Bean\n\t@Primary\n\tpublic OAuth2RestTemplate oauth2RestTemplate(OAuth2ClientContext oauth2ClientContext,\n\t\t\tOAuth2ProtectedResourceDetails details) {\n\t\tOAuth2RestTemplate template = new OAuth2RestTemplate(details, oauth2ClientContext);\n\t\treturn template;\n\t}\n\n\t@Configuration\n\tprotected abstract static class BaseConfiguration {\n\n\t\t@Bean\n\t\t@ConfigurationProperties("spring.oauth2.client")\n\t\t@Primary\n\t\tpublic AuthorizationCodeResourceDetails oauth2RemoteResource() {\n\t\t\tAuthorizationCodeResourceDetails details = new AuthorizationCodeResourceDetails();\n\t\t\treturn details;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnNotWebApplication\n\tprotected static class SingletonScopedConfiguration {\n\n\t\t@Bean\n\t\t@ConfigurationProperties("spring.oauth2.client")\n\t\t@Primary\n\t\tpublic ClientCredentialsResourceDetails oauth2RemoteResource() {\n\t\t\tClientCredentialsResourceDetails details = new ClientCredentialsResourceDetails();\n\t\t\treturn details;\n\t\t}\n\n\t\t@Bean\n\t\tpublic OAuth2ClientContext oauth2ClientContext() {\n\t\t\treturn new DefaultOAuth2ClientContext(new DefaultAccessTokenRequest());\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(OAuth2ClientConfiguration.class)\n\t@ConditionalOnWebApplication\n\tprotected static class SessionScopedConfiguration extends BaseConfiguration {\n\n\t\t@Resource\n\t\t@Qualifier("accessTokenRequest")\n\t\tprotected AccessTokenRequest accessTokenRequest;\n\n\t\t@Bean\n\t\t@Scope(value = "session", proxyMode = ScopedProxyMode.INTERFACES)\n\t\tpublic OAuth2ClientContext oauth2ClientContext() {\n\t\t\treturn new DefaultOAuth2ClientContext(this.accessTokenRequest);\n\t\t}\n\n\t\t@Bean\n\t\tpublic FilterRegistrationBean oauth2ClientFilterRegistration(\n\t\t\t\tOAuth2ClientContextFilter filter) {\n\t\t\tFilterRegistrationBean registration = new FilterRegistrationBean();\n\t\t\tregistration.setFilter(filter);\n\t\t\tregistration.setOrder(-100);\n\t\t\treturn registration;\n\t\t}\n\n\t}\n\n\t/*\n\t * When the authentication is per cookie but the stored token is an oauth2 one, we can\n\t * pass that on to a client that wants to call downstream. We don\'t even need an\n\t * OAuth2ClientContextFilter until we need to refresh the access token. To handle\n\t * refresh tokens you need to {@code @EnableOAuth2Client}\n\t */\n\t@Configuration\n\t@ConditionalOnMissingBean(OAuth2ClientConfiguration.class)\n\t@ConditionalOnWebApplication\n\tprotected static class RequestScopedConfiguration extends BaseConfiguration {\n\n\t\t@Bean\n\t\t@Scope(value = "request", proxyMode = ScopedProxyMode.INTERFACES)\n\t\tpublic OAuth2ClientContext oauth2ClientContext() {\n\t\t\tDefaultOAuth2ClientContext context = new DefaultOAuth2ClientContext(\n\t\t\t\t\tnew DefaultAccessTokenRequest());\n\t\t\tAuthentication principal = SecurityContextHolder.getContext()\n\t\t\t\t\t.getAuthentication();\n\t\t\tif (principal instanceof OAuth2Authentication) {\n\t\t\t\tOAuth2Authentication authentication = (OAuth2Authentication) principal;\n\t\t\t\tObject details = authentication.getDetails();\n\t\t\t\tif (details instanceof OAuth2AuthenticationDetails) {\n\t\t\t\t\tOAuth2AuthenticationDetails oauthsDetails = (OAuth2AuthenticationDetails) details;\n\t\t\t\t\tString token = oauthsDetails.getTokenValue();\n\t\t\t\t\tcontext.setAccessToken(new DefaultOAuth2AccessToken(token));\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn context;\n\t\t}\n\n\t}\n\n\t/**\n\t * Condition to check if a {@code spring.oauth2.client.client-id} is specified.\n\t */\n\tstatic class OAuth2ClientIdCondition extends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tPropertyResolver resolver = new RelaxedPropertyResolver(\n\t\t\t\t\tcontext.getEnvironment(), "spring.oauth2.client.");\n\t\t\tString clientId = resolver.getProperty("client-id");\n\t\t\treturn new ConditionOutcome(StringUtils.hasLength(clientId),\n\t\t\t\t\t"Non empty spring.oauth2.client.client-id");\n\t\t}\n\n\t}\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security.oauth2.client;\n\nimport javax.annotation.Resource;\n\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnNotWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.context.embedded.FilterRegistrationBean;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.context.annotation.ScopedProxyMode;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.oauth2.client.DefaultOAuth2ClientContext;\nimport org.springframework.security.oauth2.client.OAuth2ClientContext;\nimport org.springframework.security.oauth2.client.OAuth2RestTemplate;\nimport org.springframework.security.oauth2.client.filter.OAuth2ClientContextFilter;\nimport org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails;\nimport org.springframework.security.oauth2.client.token.AccessTokenRequest;\nimport org.springframework.security.oauth2.client.token.DefaultAccessTokenRequest;\nimport org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails;\nimport org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails;\nimport org.springframework.security.oauth2.common.DefaultOAuth2AccessToken;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.EnableOAuth2Client;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.OAuth2ClientConfiguration;\nimport org.springframework.security.oauth2.provider.OAuth2Authentication;\nimport org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationDetails;\n\n/**\n * Configuration for OAuth2 Single Sign On REST operations.\n *\n * @author Dave Syer\n * @since 1.3.0\n */\n@Configuration\n@ConditionalOnClass(EnableOAuth2Client.class)\n@ConditionalOnExpression("\'${spring.oauth2.client.clientId:}\'!=\'\'")\npublic class OAuth2RestOperationsConfiguration {\n\n\t@Bean\n\t@Primary\n\tpublic OAuth2RestTemplate oauth2RestTemplate(OAuth2ClientContext oauth2ClientContext,\n\t\t\tOAuth2ProtectedResourceDetails details) {\n\t\tOAuth2RestTemplate template = new OAuth2RestTemplate(details, oauth2ClientContext);\n\t\treturn template;\n\t}\n\n\t@Configuration\n\tprotected abstract static class BaseConfiguration {\n\n\t\t@Bean\n\t\t@ConfigurationProperties("spring.oauth2.client")\n\t\t@Primary\n\t\tpublic AuthorizationCodeResourceDetails oauth2RemoteResource() {\n\t\t\tAuthorizationCodeResourceDetails details = new AuthorizationCodeResourceDetails();\n\t\t\treturn details;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnNotWebApplication\n\tprotected static class SingletonScopedConfiguration {\n\n\t\t@Bean\n\t\t@ConfigurationProperties("spring.oauth2.client")\n\t\t@Primary\n\t\tpublic ClientCredentialsResourceDetails oauth2RemoteResource() {\n\t\t\tClientCredentialsResourceDetails details = new ClientCredentialsResourceDetails();\n\t\t\treturn details;\n\t\t}\n\n\t\t@Bean\n\t\tpublic OAuth2ClientContext oauth2ClientContext() {\n\t\t\treturn new DefaultOAuth2ClientContext(new DefaultAccessTokenRequest());\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(OAuth2ClientConfiguration.class)\n\t@ConditionalOnWebApplication\n\tprotected static class SessionScopedConfiguration extends BaseConfiguration {\n\n\t\t@Resource\n\t\t@Qualifier("accessTokenRequest")\n\t\tprotected AccessTokenRequest accessTokenRequest;\n\n\t\t@Bean\n\t\t@Scope(value = "session", proxyMode = ScopedProxyMode.INTERFACES)\n\t\tpublic OAuth2ClientContext oauth2ClientContext() {\n\t\t\treturn new DefaultOAuth2ClientContext(this.accessTokenRequest);\n\t\t}\n\n\t\t@Bean\n\t\tpublic FilterRegistrationBean oauth2ClientFilterRegistration(\n\t\t\t\tOAuth2ClientContextFilter filter) {\n\t\t\tFilterRegistrationBean registration = new FilterRegistrationBean();\n\t\t\tregistration.setFilter(filter);\n\t\t\tregistration.setOrder(-100);\n\t\t\treturn registration;\n\t\t}\n\n\t}\n\n\t/*\n\t * When the authentication is per cookie but the stored token is an oauth2 one, we can\n\t * pass that on to a client that wants to call downstream. We don\'t even need an\n\t * OAuth2ClientContextFilter until we need to refresh the access token. To handle\n\t * refresh tokens you need to {@code @EnableOAuth2Client}\n\t */\n\t@Configuration\n\t@ConditionalOnMissingBean(OAuth2ClientConfiguration.class)\n\t@ConditionalOnWebApplication\n\tprotected static class RequestScopedConfiguration extends BaseConfiguration {\n\n\t\t@Bean\n\t\t@Scope(value = "request", proxyMode = ScopedProxyMode.INTERFACES)\n\t\tpublic OAuth2ClientContext oauth2ClientContext() {\n\t\t\tDefaultOAuth2ClientContext context = new DefaultOAuth2ClientContext(\n\t\t\t\t\tnew DefaultAccessTokenRequest());\n\t\t\tAuthentication principal = SecurityContextHolder.getContext()\n\t\t\t\t\t.getAuthentication();\n\t\t\tif (principal instanceof OAuth2Authentication) {\n\t\t\t\tOAuth2Authentication authentication = (OAuth2Authentication) principal;\n\t\t\t\tObject details = authentication.getDetails();\n\t\t\t\tif (details instanceof OAuth2AuthenticationDetails) {\n\t\t\t\t\tOAuth2AuthenticationDetails oauthsDetails = (OAuth2AuthenticationDetails) details;\n\t\t\t\t\tString token = oauthsDetails.getTokenValue();\n\t\t\t\t\tcontext.setAccessToken(new DefaultOAuth2AccessToken(token));\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn context;\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
