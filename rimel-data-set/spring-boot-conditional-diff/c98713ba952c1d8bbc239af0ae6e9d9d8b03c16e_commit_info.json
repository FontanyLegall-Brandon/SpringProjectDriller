{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -26,9 +26,7 @@ import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.jms.annotation.EnableJms;\n-import org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor;\n-import org.springframework.jms.config.DefaultJmsListenerContainerFactory;\n+import org.springframework.context.annotation.Import;\n import org.springframework.jms.core.JmsMessagingTemplate;\n import org.springframework.jms.core.JmsTemplate;\n import org.springframework.jms.support.destination.DestinationResolver;\n@@ -43,6 +41,7 @@ import org.springframework.jms.support.destination.DestinationResolver;\n @ConditionalOnClass(JmsTemplate.class)\n @ConditionalOnBean(ConnectionFactory.class)\n @EnableConfigurationProperties(JmsProperties.class)\n+@Import(JmsAnnotationDrivenConfiguration.class)\n public class JmsAutoConfiguration {\n \n \t@Autowired\n@@ -76,25 +75,4 @@ public class JmsAutoConfiguration {\n \n \t}\n \n-\t@ConditionalOnClass(EnableJms.class)\n-\t@ConditionalOnBean(JmsListenerAnnotationBeanPostProcessor.class)\n-\tprotected static class AnnotationDrivenConfiguration {\n-\n-\t\t@Autowired(required = false)\n-\t\tprivate DestinationResolver destinationResolver;\n-\n-\t\t@Bean\n-\t\t@ConditionalOnMissingBean(name = "jmsListenerContainerFactory")\n-\t\tpublic DefaultJmsListenerContainerFactory jmsListenerContainerFactory(\n-\t\t\t\tConnectionFactory connectionFactory) {\n-\t\t\tDefaultJmsListenerContainerFactory factory = new DefaultJmsListenerContainerFactory();\n-\t\t\tfactory.setConnectionFactory(connectionFactory);\n-\t\t\tif (this.destinationResolver != null) {\n-\t\t\t\tfactory.setDestinationResolver(this.destinationResolver);\n-\t\t\t}\n-\t\t\treturn factory;\n-\t\t}\n-\n-\t}\n-\n }\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jms;\n\nimport javax.jms.ConnectionFactory;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.jms.core.JmsMessagingTemplate;\nimport org.springframework.jms.core.JmsTemplate;\nimport org.springframework.jms.support.destination.DestinationResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring JMS.\n *\n * @author Greg Turnquist\n * @author Stephane Nicoll\n */\n@Configuration\n@ConditionalOnClass(JmsTemplate.class)\n@ConditionalOnBean(ConnectionFactory.class)\n@EnableConfigurationProperties(JmsProperties.class)\n@Import(JmsAnnotationDrivenConfiguration.class)\npublic class JmsAutoConfiguration {\n\n\t@Autowired\n\tprivate JmsProperties properties;\n\n\t@Autowired\n\tprivate ConnectionFactory connectionFactory;\n\n\t@Autowired(required = false)\n\tprivate DestinationResolver destinationResolver;\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic JmsTemplate jmsTemplate() {\n\t\tJmsTemplate jmsTemplate = new JmsTemplate(this.connectionFactory);\n\t\tjmsTemplate.setPubSubDomain(this.properties.isPubSubDomain());\n\t\tif (this.destinationResolver != null) {\n\t\t\tjmsTemplate.setDestinationResolver(this.destinationResolver);\n\t\t}\n\t\treturn jmsTemplate;\n\t}\n\n\t@ConditionalOnClass(JmsMessagingTemplate.class)\n\t@ConditionalOnMissingBean(JmsMessagingTemplate.class)\n\tprotected static class MessagingTemplateConfiguration {\n\n\t\t@Bean\n\t\tpublic JmsMessagingTemplate jmsMessagingTemplate(JmsTemplate jmsTemplate) {\n\t\t\treturn new JmsMessagingTemplate(jmsTemplate);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jms;\n\nimport javax.jms.ConnectionFactory;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jms.annotation.EnableJms;\nimport org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor;\nimport org.springframework.jms.config.DefaultJmsListenerContainerFactory;\nimport org.springframework.jms.core.JmsMessagingTemplate;\nimport org.springframework.jms.core.JmsTemplate;\nimport org.springframework.jms.support.destination.DestinationResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring JMS.\n *\n * @author Greg Turnquist\n * @author Stephane Nicoll\n */\n@Configuration\n@ConditionalOnClass(JmsTemplate.class)\n@ConditionalOnBean(ConnectionFactory.class)\n@EnableConfigurationProperties(JmsProperties.class)\npublic class JmsAutoConfiguration {\n\n\t@Autowired\n\tprivate JmsProperties properties;\n\n\t@Autowired\n\tprivate ConnectionFactory connectionFactory;\n\n\t@Autowired(required = false)\n\tprivate DestinationResolver destinationResolver;\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic JmsTemplate jmsTemplate() {\n\t\tJmsTemplate jmsTemplate = new JmsTemplate(this.connectionFactory);\n\t\tjmsTemplate.setPubSubDomain(this.properties.isPubSubDomain());\n\t\tif (this.destinationResolver != null) {\n\t\t\tjmsTemplate.setDestinationResolver(this.destinationResolver);\n\t\t}\n\t\treturn jmsTemplate;\n\t}\n\n\t@ConditionalOnClass(JmsMessagingTemplate.class)\n\t@ConditionalOnMissingBean(JmsMessagingTemplate.class)\n\tprotected static class MessagingTemplateConfiguration {\n\n\t\t@Bean\n\t\tpublic JmsMessagingTemplate jmsMessagingTemplate(JmsTemplate jmsTemplate) {\n\t\t\treturn new JmsMessagingTemplate(jmsTemplate);\n\t\t}\n\n\t}\n\n\t@ConditionalOnClass(EnableJms.class)\n\t@ConditionalOnBean(JmsListenerAnnotationBeanPostProcessor.class)\n\tprotected static class AnnotationDrivenConfiguration {\n\n\t\t@Autowired(required = false)\n\t\tprivate DestinationResolver destinationResolver;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "jmsListenerContainerFactory")\n\t\tpublic DefaultJmsListenerContainerFactory jmsListenerContainerFactory(\n\t\t\t\tConnectionFactory connectionFactory) {\n\t\t\tDefaultJmsListenerContainerFactory factory = new DefaultJmsListenerContainerFactory();\n\t\t\tfactory.setConnectionFactory(connectionFactory);\n\t\t\tif (this.destinationResolver != null) {\n\t\t\t\tfactory.setDestinationResolver(this.destinationResolver);\n\t\t\t}\n\t\t\treturn factory;\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
