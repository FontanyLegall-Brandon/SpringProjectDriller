{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,16 +16,25 @@\n \n package org.springframework.boot.autoconfigure;\n \n+import java.util.Locale;\n+import java.util.MissingResourceException;\n+import java.util.ResourceBundle;\n+\n+import org.springframework.boot.autoconfigure.MessageSourceAutoConfiguration.ResourceBundleCondition;\n+import org.springframework.boot.autoconfigure.condition.ConditionOutcome;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.boot.bind.RelaxedPropertyResolver;\n-import org.springframework.context.EnvironmentAware;\n+import org.springframework.boot.autoconfigure.condition.SpringBootCondition;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.MessageSource;\n import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.ConditionContext;\n+import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.support.ResourceBundleMessageSource;\n import org.springframework.core.Ordered;\n import org.springframework.core.annotation.Order;\n-import org.springframework.core.env.Environment;\n+import org.springframework.core.type.AnnotatedTypeMetadata;\n import org.springframework.util.StringUtils;\n \n import static org.springframework.util.StringUtils.commaDelimitedListToStringArray;\n@@ -39,28 +48,77 @@ import static org.springframework.util.StringUtils.trimAllWhitespace;\n @Configuration\n @ConditionalOnMissingBean(MessageSource.class)\n @Order(Ordered.HIGHEST_PRECEDENCE)\n-public class MessageSourceAutoConfiguration implements EnvironmentAware {\n+@Conditional(ResourceBundleCondition.class)\n+@EnableConfigurationProperties\n+@ConfigurationProperties(prefix = "spring.messages")\n+public class MessageSourceAutoConfiguration {\n \n-\tprivate RelaxedPropertyResolver environment;\n+\tprivate String basename = "messages";\n \n-\t@Override\n-\tpublic void setEnvironment(Environment environment) {\n-\t\tthis.environment = new RelaxedPropertyResolver(environment, "spring.messages.");\n-\t}\n+\tprivate String encoding = "utf-8";\n+\n+\tprivate int cacheSeconds = -1;\n \n \t@Bean\n \tpublic MessageSource messageSource() {\n \t\tResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\n-\t\tString basename = this.environment.getProperty("basename", "messages");\n-\t\tif (StringUtils.hasText(basename)) {\n+\t\tif (StringUtils.hasText(this.basename)) {\n \t\t\tmessageSource\n-\t\t\t\t\t.setBasenames(commaDelimitedListToStringArray(trimAllWhitespace(basename)));\n+\t\t\t\t\t.setBasenames(commaDelimitedListToStringArray(trimAllWhitespace(this.basename)));\n \t\t}\n-\t\tString encoding = this.environment.getProperty("encoding", "utf-8");\n-\t\tmessageSource.setDefaultEncoding(encoding);\n-\t\tmessageSource.setCacheSeconds(this.environment.getProperty("cacheSeconds",\n-\t\t\t\tInteger.class, -1));\n+\t\tmessageSource.setDefaultEncoding(this.encoding);\n+\t\tmessageSource.setCacheSeconds(this.cacheSeconds);\n \t\treturn messageSource;\n \t}\n \n+\tpublic String getBasename() {\n+\t\treturn this.basename;\n+\t}\n+\n+\tpublic void setBasename(String basename) {\n+\t\tthis.basename = basename;\n+\t}\n+\n+\tpublic String getEncoding() {\n+\t\treturn this.encoding;\n+\t}\n+\n+\tpublic void setEncoding(String encoding) {\n+\t\tthis.encoding = encoding;\n+\t}\n+\n+\tpublic int getCacheSeconds() {\n+\t\treturn this.cacheSeconds;\n+\t}\n+\n+\tpublic void setCacheSeconds(int cacheSeconds) {\n+\t\tthis.cacheSeconds = cacheSeconds;\n+\t}\n+\n+\tprotected static class ResourceBundleCondition extends SpringBootCondition {\n+\n+\t\t@Override\n+\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n+\t\t\t\tAnnotatedTypeMetadata metadata) {\n+\t\t\tString basename = context.getEnvironment().getProperty(\n+\t\t\t\t\t"spring.messages.basename", "messages");\n+\t\t\tif (!StringUtils.hasText(basename)) {\n+\t\t\t\treturn ConditionOutcome.noMatch("Empty spring.messages.basename");\n+\t\t\t}\n+\t\t\tfor (String name : commaDelimitedListToStringArray(trimAllWhitespace(basename))) {\n+\t\t\t\ttry {\n+\t\t\t\t\tResourceBundle.getBundle(name, Locale.getDefault(),\n+\t\t\t\t\t\t\tcontext.getClassLoader());\n+\t\t\t\t}\n+\t\t\t\tcatch (MissingResourceException e) {\n+\t\t\t\t\treturn ConditionOutcome\n+\t\t\t\t\t\t\t.noMatch("Bundle found for spring.messages.basename: " + name);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn ConditionOutcome.match("Bundle found for spring.messages.basename: "\n+\t\t\t\t\t+ basename);\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure;\n\nimport java.util.Locale;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\n\nimport org.springframework.boot.autoconfigure.MessageSourceAutoConfiguration.ResourceBundleCondition;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.MessageSource;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.support.ResourceBundleMessageSource;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.util.StringUtils;\n\nimport static org.springframework.util.StringUtils.commaDelimitedListToStringArray;\nimport static org.springframework.util.StringUtils.trimAllWhitespace;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link MessageSource}.\n * \n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnMissingBean(MessageSource.class)\n@Order(Ordered.HIGHEST_PRECEDENCE)\n@Conditional(ResourceBundleCondition.class)\n@EnableConfigurationProperties\n@ConfigurationProperties(prefix = "spring.messages")\npublic class MessageSourceAutoConfiguration {\n\n\tprivate String basename = "messages";\n\n\tprivate String encoding = "utf-8";\n\n\tprivate int cacheSeconds = -1;\n\n\t@Bean\n\tpublic MessageSource messageSource() {\n\t\tResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\n\t\tif (StringUtils.hasText(this.basename)) {\n\t\t\tmessageSource\n\t\t\t\t\t.setBasenames(commaDelimitedListToStringArray(trimAllWhitespace(this.basename)));\n\t\t}\n\t\tmessageSource.setDefaultEncoding(this.encoding);\n\t\tmessageSource.setCacheSeconds(this.cacheSeconds);\n\t\treturn messageSource;\n\t}\n\n\tpublic String getBasename() {\n\t\treturn this.basename;\n\t}\n\n\tpublic void setBasename(String basename) {\n\t\tthis.basename = basename;\n\t}\n\n\tpublic String getEncoding() {\n\t\treturn this.encoding;\n\t}\n\n\tpublic void setEncoding(String encoding) {\n\t\tthis.encoding = encoding;\n\t}\n\n\tpublic int getCacheSeconds() {\n\t\treturn this.cacheSeconds;\n\t}\n\n\tpublic void setCacheSeconds(int cacheSeconds) {\n\t\tthis.cacheSeconds = cacheSeconds;\n\t}\n\n\tprotected static class ResourceBundleCondition extends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tString basename = context.getEnvironment().getProperty(\n\t\t\t\t\t"spring.messages.basename", "messages");\n\t\t\tif (!StringUtils.hasText(basename)) {\n\t\t\t\treturn ConditionOutcome.noMatch("Empty spring.messages.basename");\n\t\t\t}\n\t\t\tfor (String name : commaDelimitedListToStringArray(trimAllWhitespace(basename))) {\n\t\t\t\ttry {\n\t\t\t\t\tResourceBundle.getBundle(name, Locale.getDefault(),\n\t\t\t\t\t\t\tcontext.getClassLoader());\n\t\t\t\t}\n\t\t\t\tcatch (MissingResourceException e) {\n\t\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t\t.noMatch("Bundle found for spring.messages.basename: " + name);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn ConditionOutcome.match("Bundle found for spring.messages.basename: "\n\t\t\t\t\t+ basename);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.bind.RelaxedPropertyResolver;\nimport org.springframework.context.EnvironmentAware;\nimport org.springframework.context.MessageSource;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.support.ResourceBundleMessageSource;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.env.Environment;\nimport org.springframework.util.StringUtils;\n\nimport static org.springframework.util.StringUtils.commaDelimitedListToStringArray;\nimport static org.springframework.util.StringUtils.trimAllWhitespace;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link MessageSource}.\n * \n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnMissingBean(MessageSource.class)\n@Order(Ordered.HIGHEST_PRECEDENCE)\npublic class MessageSourceAutoConfiguration implements EnvironmentAware {\n\n\tprivate RelaxedPropertyResolver environment;\n\n\t@Override\n\tpublic void setEnvironment(Environment environment) {\n\t\tthis.environment = new RelaxedPropertyResolver(environment, "spring.messages.");\n\t}\n\n\t@Bean\n\tpublic MessageSource messageSource() {\n\t\tResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\n\t\tString basename = this.environment.getProperty("basename", "messages");\n\t\tif (StringUtils.hasText(basename)) {\n\t\t\tmessageSource\n\t\t\t\t\t.setBasenames(commaDelimitedListToStringArray(trimAllWhitespace(basename)));\n\t\t}\n\t\tString encoding = this.environment.getProperty("encoding", "utf-8");\n\t\tmessageSource.setDefaultEncoding(encoding);\n\t\tmessageSource.setCacheSeconds(this.environment.getProperty("cacheSeconds",\n\t\t\t\tInteger.class, -1));\n\t\treturn messageSource;\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
