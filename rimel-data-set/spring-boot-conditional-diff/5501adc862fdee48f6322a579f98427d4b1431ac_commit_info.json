{'_old_path': PosixPath('spring-bootstrap-service/src/main/java/org/springframework/bootstrap/autoconfigure/service/ServiceAutoConfiguration.java'), '_new_path': PosixPath('spring-bootstrap-service/src/main/java/org/springframework/bootstrap/autoconfigure/service/ServiceAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -18,10 +18,13 @@ package org.springframework.bootstrap.autoconfigure.service;\n \n import java.util.List;\n \n+import org.springframework.bootstrap.context.annotation.ConditionalOnMissingBean;\n import org.springframework.bootstrap.context.annotation.EnableAutoConfiguration;\n import org.springframework.bootstrap.service.annotation.EnableConfigurationProperties;\n+import org.springframework.bootstrap.service.properties.EndpointsProperties;\n import org.springframework.bootstrap.service.properties.ManagementServerProperties;\n import org.springframework.bootstrap.service.properties.ServerProperties;\n+import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Import;\n import org.springframework.http.converter.HttpMessageConverter;\n@@ -62,6 +65,12 @@ public class ServiceAutoConfiguration extends WebMvcConfigurationSupport {\n \t@EnableConfigurationProperties({ ServerProperties.class,\n \t\t\tManagementServerProperties.class })\n \tpublic static class ServerPropertiesConfiguration {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(EndpointsProperties.class)\n+\t\tpublic EndpointsProperties endpointsProperties() {\n+\t\t\treturn new EndpointsProperties();\n+\t\t}\n \t}\n \n }\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.bootstrap.autoconfigure.service;\n\nimport java.util.List;\n\nimport org.springframework.bootstrap.context.annotation.ConditionalOnMissingBean;\nimport org.springframework.bootstrap.context.annotation.EnableAutoConfiguration;\nimport org.springframework.bootstrap.service.annotation.EnableConfigurationProperties;\nimport org.springframework.bootstrap.service.properties.EndpointsProperties;\nimport org.springframework.bootstrap.service.properties.ManagementServerProperties;\nimport org.springframework.bootstrap.service.properties.ServerProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\n\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport com.fasterxml.jackson.datatype.joda.JodaModule;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for service apps.\n * \n * @author Dave Syer\n */\n@Configuration\n@Import({ ManagementConfiguration.class, MetricConfiguration.class,\n\t\tServerConfiguration.class, SecurityConfiguration.class,\n\t\tMetricFilterConfiguration.class })\npublic class ServiceAutoConfiguration extends WebMvcConfigurationSupport {\n\n\t@Override\n\tprotected void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n\t\taddDefaultHttpMessageConverters(converters);\n\t\tfor (HttpMessageConverter<?> converter : converters) {\n\t\t\tif (converter instanceof MappingJackson2HttpMessageConverter) {\n\t\t\t\tMappingJackson2HttpMessageConverter jacksonConverter = (MappingJackson2HttpMessageConverter) converter;\n\t\t\t\tjacksonConverter.getObjectMapper().registerModule(new JodaModule());\n\t\t\t\tjacksonConverter.getObjectMapper().disable(\n\t\t\t\t\t\tSerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t * ServerProperties has to be declared in a non-conditional bean, so that it gets\n\t * added to the context early enough\n\t */\n\t@EnableConfigurationProperties({ ServerProperties.class,\n\t\t\tManagementServerProperties.class })\n\tpublic static class ServerPropertiesConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(EndpointsProperties.class)\n\t\tpublic EndpointsProperties endpointsProperties() {\n\t\t\treturn new EndpointsProperties();\n\t\t}\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.bootstrap.autoconfigure.service;\n\nimport java.util.List;\n\nimport org.springframework.bootstrap.context.annotation.EnableAutoConfiguration;\nimport org.springframework.bootstrap.service.annotation.EnableConfigurationProperties;\nimport org.springframework.bootstrap.service.properties.ManagementServerProperties;\nimport org.springframework.bootstrap.service.properties.ServerProperties;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\n\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport com.fasterxml.jackson.datatype.joda.JodaModule;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for service apps.\n * \n * @author Dave Syer\n */\n@Configuration\n@Import({ ManagementConfiguration.class, MetricConfiguration.class,\n\t\tServerConfiguration.class, SecurityConfiguration.class,\n\t\tMetricFilterConfiguration.class })\npublic class ServiceAutoConfiguration extends WebMvcConfigurationSupport {\n\n\t@Override\n\tprotected void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n\t\taddDefaultHttpMessageConverters(converters);\n\t\tfor (HttpMessageConverter<?> converter : converters) {\n\t\t\tif (converter instanceof MappingJackson2HttpMessageConverter) {\n\t\t\t\tMappingJackson2HttpMessageConverter jacksonConverter = (MappingJackson2HttpMessageConverter) converter;\n\t\t\t\tjacksonConverter.getObjectMapper().registerModule(new JodaModule());\n\t\t\t\tjacksonConverter.getObjectMapper().disable(\n\t\t\t\t\t\tSerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t * ServerProperties has to be declared in a non-conditional bean, so that it gets\n\t * added to the context early enough\n\t */\n\t@EnableConfigurationProperties({ ServerProperties.class,\n\t\t\tManagementServerProperties.class })\n\tpublic static class ServerPropertiesConfiguration {\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
