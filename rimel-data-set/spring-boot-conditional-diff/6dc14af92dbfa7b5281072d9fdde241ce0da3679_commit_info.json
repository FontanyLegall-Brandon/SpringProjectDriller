{'_old_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnBeanTests.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnBeanTests.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -139,6 +139,16 @@ public class ConditionalOnBeanTests {\n \t\tassertThat(this.context.getBeansOfType(ExampleBean.class)).hasSize(1);\n \t}\n \n+\t@Test\n+\tpublic void conditionEvaluationConsidersChangeInTypeWhenBeanIsOverridden() {\n+\t\tthis.context.register(OriginalDefinition.class, OverridingDefinition.class,\n+\t\t\t\tConsumingConfiguration.class);\n+\t\tthis.context.refresh();\n+\t\tassertThat(this.context.containsBean("testBean")).isTrue();\n+\t\tassertThat(this.context.getBean(Integer.class)).isEqualTo(1);\n+\t\tassertThat(this.context.getBeansOfType(ConsumingConfiguration.class)).isEmpty();\n+\t}\n+\n \t@Configuration\n \t@ConditionalOnBean(name = "foo")\n \tprotected static class OnBeanNameConfiguration {\n@@ -311,4 +321,35 @@ public class ConditionalOnBeanTests {\n \n \t}\n \n+\t@Configuration\n+\tpublic static class OriginalDefinition {\n+\n+\t\t@Bean\n+\t\tpublic String testBean() {\n+\t\t\treturn "test";\n+\t\t}\n+\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnBean(String.class)\n+\tpublic static class OverridingDefinition {\n+\n+\t\t@Bean\n+\t\tpublic Integer testBean() {\n+\t\t\treturn 1;\n+\t\t}\n+\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnBean(String.class)\n+\tpublic static class ConsumingConfiguration {\n+\n+\t\tConsumingConfiguration(String testBean) {\n+\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\nimport java.util.Date;\n\nimport org.junit.Test;\n\nimport org.springframework.beans.factory.FactoryBean;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistry;\nimport org.springframework.beans.factory.support.RootBeanDefinition;\nimport org.springframework.boot.test.util.EnvironmentTestUtils;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.ImportBeanDefinitionRegistrar;\nimport org.springframework.context.annotation.ImportResource;\nimport org.springframework.context.support.PropertySourcesPlaceholderConfigurer;\nimport org.springframework.core.type.AnnotationMetadata;\nimport org.springframework.scheduling.annotation.EnableScheduling;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link ConditionalOnBean}.\n *\n * @author Dave Syer\n */\npublic class ConditionalOnBeanTests {\n\n\tprivate final AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n\n\t@Test\n\tpublic void testNameOnBeanCondition() {\n\t\tthis.context.register(FooConfiguration.class, OnBeanNameConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.containsBean("bar")).isTrue();\n\t\tassertThat(this.context.getBean("bar")).isEqualTo("bar");\n\t}\n\n\t@Test\n\tpublic void testNameAndTypeOnBeanCondition() {\n\t\tthis.context.register(FooConfiguration.class,\n\t\t\t\tOnBeanNameAndTypeConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.containsBean("bar")).isTrue();\n\t}\n\n\t@Test\n\tpublic void testNameOnBeanConditionReverseOrder() {\n\t\tthis.context.register(OnBeanNameConfiguration.class, FooConfiguration.class);\n\t\tthis.context.refresh();\n\t\t// Ideally this should be true\n\t\tassertThat(this.context.containsBean("bar")).isFalse();\n\t}\n\n\t@Test\n\tpublic void testClassOnBeanCondition() {\n\t\tthis.context.register(FooConfiguration.class, OnBeanClassConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.containsBean("bar")).isTrue();\n\t\tassertThat(this.context.getBean("bar")).isEqualTo("bar");\n\t}\n\n\t@Test\n\tpublic void testClassOnBeanClassNameCondition() {\n\t\tthis.context.register(FooConfiguration.class, OnBeanClassNameConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.containsBean("bar")).isTrue();\n\t\tassertThat(this.context.getBean("bar")).isEqualTo("bar");\n\t}\n\n\t@Test\n\tpublic void testOnBeanConditionWithXml() {\n\t\tthis.context.register(XmlConfiguration.class, OnBeanNameConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.containsBean("bar")).isTrue();\n\t\tassertThat(this.context.getBean("bar")).isEqualTo("bar");\n\t}\n\n\t@Test\n\tpublic void testOnBeanConditionWithCombinedXml() {\n\t\tthis.context.register(CombinedXmlConfiguration.class);\n\t\tthis.context.refresh();\n\t\t// Ideally this should be true\n\t\tassertThat(this.context.containsBean("bar")).isFalse();\n\t}\n\n\t@Test\n\tpublic void testAnnotationOnBeanCondition() {\n\t\tthis.context.register(FooConfiguration.class, OnAnnotationConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.containsBean("bar")).isTrue();\n\t\tassertThat(this.context.getBean("bar")).isEqualTo("bar");\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanType() throws Exception {\n\t\tthis.context.register(FooConfiguration.class,\n\t\t\t\tOnBeanMissingClassConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.containsBean("bar")).isFalse();\n\t}\n\n\t@Test\n\tpublic void withPropertyPlaceholderClassName() throws Exception {\n\t\tEnvironmentTestUtils.addEnvironment(this.context, "mybeanclass=java.lang.String");\n\t\tthis.context.register(PropertySourcesPlaceholderConfigurer.class,\n\t\t\t\tWithPropertyPlaceholderClassName.class, OnBeanClassConfiguration.class);\n\t\tthis.context.refresh();\n\t}\n\n\t@Test\n\tpublic void beanProducedByFactoryBeanIsConsideredWhenMatchingOnAnnotation() {\n\t\tthis.context.register(FactoryBeanConfiguration.class,\n\t\t\t\tOnAnnotationWithFactoryBeanConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.containsBean("bar")).isTrue();\n\t\tassertThat(this.context.getBeansOfType(ExampleBean.class)).hasSize(1);\n\t}\n\n\t@Test\n\tpublic void conditionEvaluationConsidersChangeInTypeWhenBeanIsOverridden() {\n\t\tthis.context.register(OriginalDefinition.class, OverridingDefinition.class,\n\t\t\t\tConsumingConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.containsBean("testBean")).isTrue();\n\t\tassertThat(this.context.getBean(Integer.class)).isEqualTo(1);\n\t\tassertThat(this.context.getBeansOfType(ConsumingConfiguration.class)).isEmpty();\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(name = "foo")\n\tprotected static class OnBeanNameConfiguration {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(name = "foo", value = Date.class)\n\tprotected static class OnBeanNameAndTypeConfiguration {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(annotation = EnableScheduling.class)\n\tprotected static class OnAnnotationConfiguration {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(String.class)\n\tprotected static class OnBeanClassConfiguration {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(type = "java.lang.String")\n\tprotected static class OnBeanClassNameConfiguration {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(type = "some.type.Missing")\n\tprotected static class OnBeanMissingClassConfiguration {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@EnableScheduling\n\tprotected static class FooConfiguration {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ImportResource("org/springframework/boot/autoconfigure/condition/foo.xml")\n\tprotected static class XmlConfiguration {\n\n\t}\n\n\t@Configuration\n\t@ImportResource("org/springframework/boot/autoconfigure/condition/foo.xml")\n\t@Import(OnBeanNameConfiguration.class)\n\tprotected static class CombinedXmlConfiguration {\n\n\t}\n\n\t@Configuration\n\t@Import(WithPropertyPlaceholderClassNameRegistrar.class)\n\tprotected static class WithPropertyPlaceholderClassName {\n\n\t}\n\n\t@Configuration\n\tstatic class FactoryBeanConfiguration {\n\n\t\t@Bean\n\t\tpublic ExampleFactoryBean exampleBeanFactoryBean() {\n\t\t\treturn new ExampleFactoryBean();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(annotation = TestAnnotation.class)\n\tstatic class OnAnnotationWithFactoryBeanConfiguration {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\tprotected static class WithPropertyPlaceholderClassNameRegistrar\n\t\t\timplements ImportBeanDefinitionRegistrar {\n\n\t\t@Override\n\t\tpublic void registerBeanDefinitions(AnnotationMetadata importingClassMetadata,\n\t\t\t\tBeanDefinitionRegistry registry) {\n\t\t\tRootBeanDefinition bd = new RootBeanDefinition();\n\t\t\tbd.setBeanClassName("${mybeanclass}");\n\t\t\tregistry.registerBeanDefinition("mybean", bd);\n\t\t}\n\n\t}\n\n\tpublic static class ExampleFactoryBean implements FactoryBean<ExampleBean> {\n\n\t\t@Override\n\t\tpublic ExampleBean getObject() throws Exception {\n\t\t\treturn new ExampleBean("fromFactory");\n\t\t}\n\n\t\t@Override\n\t\tpublic Class<?> getObjectType() {\n\t\t\treturn ExampleBean.class;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean isSingleton() {\n\t\t\treturn false;\n\t\t}\n\n\t}\n\n\t@TestAnnotation\n\tpublic static class ExampleBean {\n\n\t\tprivate String value;\n\n\t\tpublic ExampleBean(String value) {\n\t\t\tthis.value = value;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn this.value;\n\t\t}\n\n\t}\n\n\t@Target(ElementType.TYPE)\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Documented\n\tpublic @interface TestAnnotation {\n\n\t}\n\n\t@Configuration\n\tpublic static class OriginalDefinition {\n\n\t\t@Bean\n\t\tpublic String testBean() {\n\t\t\treturn "test";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(String.class)\n\tpublic static class OverridingDefinition {\n\n\t\t@Bean\n\t\tpublic Integer testBean() {\n\t\t\treturn 1;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(String.class)\n\tpublic static class ConsumingConfiguration {\n\n\t\tConsumingConfiguration(String testBean) {\n\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\nimport java.util.Date;\n\nimport org.junit.Test;\n\nimport org.springframework.beans.factory.FactoryBean;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistry;\nimport org.springframework.beans.factory.support.RootBeanDefinition;\nimport org.springframework.boot.test.util.EnvironmentTestUtils;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.ImportBeanDefinitionRegistrar;\nimport org.springframework.context.annotation.ImportResource;\nimport org.springframework.context.support.PropertySourcesPlaceholderConfigurer;\nimport org.springframework.core.type.AnnotationMetadata;\nimport org.springframework.scheduling.annotation.EnableScheduling;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link ConditionalOnBean}.\n *\n * @author Dave Syer\n */\npublic class ConditionalOnBeanTests {\n\n\tprivate final AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n\n\t@Test\n\tpublic void testNameOnBeanCondition() {\n\t\tthis.context.register(FooConfiguration.class, OnBeanNameConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.containsBean("bar")).isTrue();\n\t\tassertThat(this.context.getBean("bar")).isEqualTo("bar");\n\t}\n\n\t@Test\n\tpublic void testNameAndTypeOnBeanCondition() {\n\t\tthis.context.register(FooConfiguration.class,\n\t\t\t\tOnBeanNameAndTypeConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.containsBean("bar")).isTrue();\n\t}\n\n\t@Test\n\tpublic void testNameOnBeanConditionReverseOrder() {\n\t\tthis.context.register(OnBeanNameConfiguration.class, FooConfiguration.class);\n\t\tthis.context.refresh();\n\t\t// Ideally this should be true\n\t\tassertThat(this.context.containsBean("bar")).isFalse();\n\t}\n\n\t@Test\n\tpublic void testClassOnBeanCondition() {\n\t\tthis.context.register(FooConfiguration.class, OnBeanClassConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.containsBean("bar")).isTrue();\n\t\tassertThat(this.context.getBean("bar")).isEqualTo("bar");\n\t}\n\n\t@Test\n\tpublic void testClassOnBeanClassNameCondition() {\n\t\tthis.context.register(FooConfiguration.class, OnBeanClassNameConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.containsBean("bar")).isTrue();\n\t\tassertThat(this.context.getBean("bar")).isEqualTo("bar");\n\t}\n\n\t@Test\n\tpublic void testOnBeanConditionWithXml() {\n\t\tthis.context.register(XmlConfiguration.class, OnBeanNameConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.containsBean("bar")).isTrue();\n\t\tassertThat(this.context.getBean("bar")).isEqualTo("bar");\n\t}\n\n\t@Test\n\tpublic void testOnBeanConditionWithCombinedXml() {\n\t\tthis.context.register(CombinedXmlConfiguration.class);\n\t\tthis.context.refresh();\n\t\t// Ideally this should be true\n\t\tassertThat(this.context.containsBean("bar")).isFalse();\n\t}\n\n\t@Test\n\tpublic void testAnnotationOnBeanCondition() {\n\t\tthis.context.register(FooConfiguration.class, OnAnnotationConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.containsBean("bar")).isTrue();\n\t\tassertThat(this.context.getBean("bar")).isEqualTo("bar");\n\t}\n\n\t@Test\n\tpublic void testOnMissingBeanType() throws Exception {\n\t\tthis.context.register(FooConfiguration.class,\n\t\t\t\tOnBeanMissingClassConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.containsBean("bar")).isFalse();\n\t}\n\n\t@Test\n\tpublic void withPropertyPlaceholderClassName() throws Exception {\n\t\tEnvironmentTestUtils.addEnvironment(this.context, "mybeanclass=java.lang.String");\n\t\tthis.context.register(PropertySourcesPlaceholderConfigurer.class,\n\t\t\t\tWithPropertyPlaceholderClassName.class, OnBeanClassConfiguration.class);\n\t\tthis.context.refresh();\n\t}\n\n\t@Test\n\tpublic void beanProducedByFactoryBeanIsConsideredWhenMatchingOnAnnotation() {\n\t\tthis.context.register(FactoryBeanConfiguration.class,\n\t\t\t\tOnAnnotationWithFactoryBeanConfiguration.class);\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.containsBean("bar")).isTrue();\n\t\tassertThat(this.context.getBeansOfType(ExampleBean.class)).hasSize(1);\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(name = "foo")\n\tprotected static class OnBeanNameConfiguration {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(name = "foo", value = Date.class)\n\tprotected static class OnBeanNameAndTypeConfiguration {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(annotation = EnableScheduling.class)\n\tprotected static class OnAnnotationConfiguration {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(String.class)\n\tprotected static class OnBeanClassConfiguration {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(type = "java.lang.String")\n\tprotected static class OnBeanClassNameConfiguration {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(type = "some.type.Missing")\n\tprotected static class OnBeanMissingClassConfiguration {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@EnableScheduling\n\tprotected static class FooConfiguration {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ImportResource("org/springframework/boot/autoconfigure/condition/foo.xml")\n\tprotected static class XmlConfiguration {\n\n\t}\n\n\t@Configuration\n\t@ImportResource("org/springframework/boot/autoconfigure/condition/foo.xml")\n\t@Import(OnBeanNameConfiguration.class)\n\tprotected static class CombinedXmlConfiguration {\n\n\t}\n\n\t@Configuration\n\t@Import(WithPropertyPlaceholderClassNameRegistrar.class)\n\tprotected static class WithPropertyPlaceholderClassName {\n\n\t}\n\n\t@Configuration\n\tstatic class FactoryBeanConfiguration {\n\n\t\t@Bean\n\t\tpublic ExampleFactoryBean exampleBeanFactoryBean() {\n\t\t\treturn new ExampleFactoryBean();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(annotation = TestAnnotation.class)\n\tstatic class OnAnnotationWithFactoryBeanConfiguration {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\tprotected static class WithPropertyPlaceholderClassNameRegistrar\n\t\t\timplements ImportBeanDefinitionRegistrar {\n\n\t\t@Override\n\t\tpublic void registerBeanDefinitions(AnnotationMetadata importingClassMetadata,\n\t\t\t\tBeanDefinitionRegistry registry) {\n\t\t\tRootBeanDefinition bd = new RootBeanDefinition();\n\t\t\tbd.setBeanClassName("${mybeanclass}");\n\t\t\tregistry.registerBeanDefinition("mybean", bd);\n\t\t}\n\n\t}\n\n\tpublic static class ExampleFactoryBean implements FactoryBean<ExampleBean> {\n\n\t\t@Override\n\t\tpublic ExampleBean getObject() throws Exception {\n\t\t\treturn new ExampleBean("fromFactory");\n\t\t}\n\n\t\t@Override\n\t\tpublic Class<?> getObjectType() {\n\t\t\treturn ExampleBean.class;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean isSingleton() {\n\t\t\treturn false;\n\t\t}\n\n\t}\n\n\t@TestAnnotation\n\tpublic static class ExampleBean {\n\n\t\tprivate String value;\n\n\t\tpublic ExampleBean(String value) {\n\t\t\tthis.value = value;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn this.value;\n\t\t}\n\n\t}\n\n\t@Target(ElementType.TYPE)\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Documented\n\tpublic @interface TestAnnotation {\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
