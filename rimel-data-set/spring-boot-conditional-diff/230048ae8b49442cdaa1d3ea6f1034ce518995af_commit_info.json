{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/JacksonHttpMessageConvertersConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2012-2015 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.web;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;\n+import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\n+import org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+\n+/**\n+ * Configuration for HTTP message converters that use Jackson\n+ *\n+ * @author Andy Wilkinson\n+ * @since 1.2.2\n+ */\n+@Configuration\n+class JacksonHttpMessageConvertersConfiguration {\n+\n+\t@Configuration\n+\t@ConditionalOnClass(ObjectMapper.class)\n+\t@ConditionalOnBean(ObjectMapper.class)\n+\t@EnableConfigurationProperties(HttpMapperProperties.class)\n+\t@ConditionalOnProperty(name = HttpMessageConvertersAutoConfiguration.PREFERRED_MAPPER_PROPERTY, havingValue = "jackson", matchIfMissing = true)\n+\t@SuppressWarnings("deprecation")\n+\tprotected static class MappingJackson2HttpMessageConverterConfiguration {\n+\n+\t\t// This can be removed when the deprecated class is removed (the ObjectMapper will\n+\t\t// already have all the correct properties).\n+\t\t@Autowired\n+\t\tprivate HttpMapperProperties properties = new HttpMapperProperties();\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean\n+\t\tpublic MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter(\n+\t\t\t\tObjectMapper objectMapper) {\n+\t\t\tMappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter(\n+\t\t\t\t\tobjectMapper);\n+\t\t\tif (this.properties.isJsonPrettyPrint() != null) {\n+\t\t\t\tconverter.setPrettyPrint(this.properties.isJsonPrettyPrint());\n+\t\t\t}\n+\t\t\treturn converter;\n+\t\t}\n+\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnClass(XmlMapper.class)\n+\t@ConditionalOnBean(Jackson2ObjectMapperBuilder.class)\n+\t@EnableConfigurationProperties(HttpMapperProperties.class)\n+\t@SuppressWarnings("deprecation")\n+\tprotected static class MappingJackson2XmlHttpMessageConverterConfiguration {\n+\n+\t\t@Autowired\n+\t\tprivate HttpMapperProperties properties = new HttpMapperProperties();\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean\n+\t\tpublic MappingJackson2XmlHttpMessageConverter mappingJackson2XmlHttpMessageConverter(\n+\t\t\t\tJackson2ObjectMapperBuilder builder) {\n+\t\t\tMappingJackson2XmlHttpMessageConverter converter = new MappingJackson2XmlHttpMessageConverter();\n+\t\t\tconverter.setObjectMapper(builder.createXmlMapper(true).build());\n+\t\t\tif (this.properties.isJsonPrettyPrint() != null) {\n+\t\t\t\tconverter.setPrettyPrint(this.properties.isJsonPrettyPrint());\n+\t\t\t}\n+\t\t\treturn converter;\n+\t\t}\n+\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\nimport org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.dataformat.xml.XmlMapper;\n\n/**\n * Configuration for HTTP message converters that use Jackson\n *\n * @author Andy Wilkinson\n * @since 1.2.2\n */\n@Configuration\nclass JacksonHttpMessageConvertersConfiguration {\n\n\t@Configuration\n\t@ConditionalOnClass(ObjectMapper.class)\n\t@ConditionalOnBean(ObjectMapper.class)\n\t@EnableConfigurationProperties(HttpMapperProperties.class)\n\t@ConditionalOnProperty(name = HttpMessageConvertersAutoConfiguration.PREFERRED_MAPPER_PROPERTY, havingValue = "jackson", matchIfMissing = true)\n\t@SuppressWarnings("deprecation")\n\tprotected static class MappingJackson2HttpMessageConverterConfiguration {\n\n\t\t// This can be removed when the deprecated class is removed (the ObjectMapper will\n\t\t// already have all the correct properties).\n\t\t@Autowired\n\t\tprivate HttpMapperProperties properties = new HttpMapperProperties();\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter(\n\t\t\t\tObjectMapper objectMapper) {\n\t\t\tMappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter(\n\t\t\t\t\tobjectMapper);\n\t\t\tif (this.properties.isJsonPrettyPrint() != null) {\n\t\t\t\tconverter.setPrettyPrint(this.properties.isJsonPrettyPrint());\n\t\t\t}\n\t\t\treturn converter;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(XmlMapper.class)\n\t@ConditionalOnBean(Jackson2ObjectMapperBuilder.class)\n\t@EnableConfigurationProperties(HttpMapperProperties.class)\n\t@SuppressWarnings("deprecation")\n\tprotected static class MappingJackson2XmlHttpMessageConverterConfiguration {\n\n\t\t@Autowired\n\t\tprivate HttpMapperProperties properties = new HttpMapperProperties();\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic MappingJackson2XmlHttpMessageConverter mappingJackson2XmlHttpMessageConverter(\n\t\t\t\tJackson2ObjectMapperBuilder builder) {\n\t\t\tMappingJackson2XmlHttpMessageConverter converter = new MappingJackson2XmlHttpMessageConverter();\n\t\t\tconverter.setObjectMapper(builder.createXmlMapper(true).build());\n\t\t\tif (this.properties.isJsonPrettyPrint() != null) {\n\t\t\t\tconverter.setPrettyPrint(this.properties.isJsonPrettyPrint());\n\t\t\t}\n\t\t\treturn converter;\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
