{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ErrorMvcAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ErrorMvcAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -27,11 +27,13 @@ import javax.servlet.http.HttpServletResponse;\n \n import org.springframework.aop.framework.autoproxy.AutoProxyUtils;\n import org.springframework.beans.BeansException;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.config.BeanFactoryPostProcessor;\n import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionOutcome;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n@@ -40,9 +42,11 @@ import org.springframework.boot.autoconfigure.condition.SearchStrategy;\n import org.springframework.boot.autoconfigure.condition.SpringBootCondition;\n import org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider;\n import org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.boot.web.servlet.ErrorPage;\n import org.springframework.boot.web.servlet.ErrorPageRegistrar;\n import org.springframework.boot.web.servlet.ErrorPageRegistry;\n+import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.ConditionContext;\n import org.springframework.context.annotation.Conditional;\n@@ -69,18 +73,28 @@ import org.springframework.web.util.HtmlUtils;\n  * @author Andy Wilkinson\n  * @author Stephane Nicoll\n  */\n-@ConditionalOnClass({ Servlet.class, DispatcherServlet.class })\n+@Configuration\n @ConditionalOnWebApplication\n-// Ensure this loads before the main WebMvcAutoConfiguration so that the error View is\n-// available\n+@ConditionalOnClass({ Servlet.class, DispatcherServlet.class })\n+// Load before the main WebMvcAutoConfiguration so that the error View is available\n @AutoConfigureBefore(WebMvcAutoConfiguration.class)\n-@Configuration\n+@EnableConfigurationProperties(ResourceProperties.class)\n public class ErrorMvcAutoConfiguration {\n \n-\tprivate final ServerProperties properties;\n+\tprivate final ApplicationContext applicationContext;\n+\n+\tprivate final ServerProperties serverProperties;\n \n-\tpublic ErrorMvcAutoConfiguration(ServerProperties properties) {\n-\t\tthis.properties = properties;\n+\tprivate final ResourceProperties resourceProperties;\n+\n+\t@Autowired(required = false)\n+\tprivate List<ErrorViewResolver> errorViewResolvers;\n+\n+\tpublic ErrorMvcAutoConfiguration(ApplicationContext applicationContext,\n+\t\t\tServerProperties serverProperties, ResourceProperties resourceProperties) {\n+\t\tthis.applicationContext = applicationContext;\n+\t\tthis.serverProperties = serverProperties;\n+\t\tthis.resourceProperties = resourceProperties;\n \t}\n \n \t@Bean\n@@ -92,12 +106,21 @@ public class ErrorMvcAutoConfiguration {\n \t@Bean\n \t@ConditionalOnMissingBean(value = ErrorController.class, search = SearchStrategy.CURRENT)\n \tpublic BasicErrorController basicErrorController(ErrorAttributes errorAttributes) {\n-\t\treturn new BasicErrorController(errorAttributes, this.properties.getError());\n+\t\treturn new BasicErrorController(errorAttributes, this.serverProperties.getError(),\n+\t\t\t\tthis.errorViewResolvers);\n \t}\n \n \t@Bean\n \tpublic ErrorPageCustomizer errorPageCustomizer() {\n-\t\treturn new ErrorPageCustomizer(this.properties);\n+\t\treturn new ErrorPageCustomizer(this.serverProperties);\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnBean(DispatcherServlet.class)\n+\t@ConditionalOnMissingBean\n+\tpublic DefaultErrorViewResolver conventionErrorViewResolver() {\n+\t\treturn new DefaultErrorViewResolver(this.applicationContext,\n+\t\t\t\tthis.resourceProperties);\n \t}\n \n \t@Bean\n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.servlet.Servlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.springframework.aop.framework.autoproxy.AutoProxyUtils;\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.config.BeanFactoryPostProcessor;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider;\nimport org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.web.servlet.ErrorPage;\nimport org.springframework.boot.web.servlet.ErrorPageRegistrar;\nimport org.springframework.boot.web.servlet.ErrorPageRegistry;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.expression.MapAccessor;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.io.support.SpringFactoriesLoader;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.expression.EvaluationContext;\nimport org.springframework.expression.Expression;\nimport org.springframework.expression.spel.standard.SpelExpressionParser;\nimport org.springframework.expression.spel.support.StandardEvaluationContext;\nimport org.springframework.util.PropertyPlaceholderHelper.PlaceholderResolver;\nimport org.springframework.web.servlet.DispatcherServlet;\nimport org.springframework.web.servlet.View;\nimport org.springframework.web.servlet.view.BeanNameViewResolver;\nimport org.springframework.web.util.HtmlUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to render errors via an MVC error\n * controller.\n *\n * @author Dave Syer\n * @author Andy Wilkinson\n * @author Stephane Nicoll\n */\n@Configuration\n@ConditionalOnWebApplication\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class })\n// Load before the main WebMvcAutoConfiguration so that the error View is available\n@AutoConfigureBefore(WebMvcAutoConfiguration.class)\n@EnableConfigurationProperties(ResourceProperties.class)\npublic class ErrorMvcAutoConfiguration {\n\n\tprivate final ApplicationContext applicationContext;\n\n\tprivate final ServerProperties serverProperties;\n\n\tprivate final ResourceProperties resourceProperties;\n\n\t@Autowired(required = false)\n\tprivate List<ErrorViewResolver> errorViewResolvers;\n\n\tpublic ErrorMvcAutoConfiguration(ApplicationContext applicationContext,\n\t\t\tServerProperties serverProperties, ResourceProperties resourceProperties) {\n\t\tthis.applicationContext = applicationContext;\n\t\tthis.serverProperties = serverProperties;\n\t\tthis.resourceProperties = resourceProperties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(value = ErrorAttributes.class, search = SearchStrategy.CURRENT)\n\tpublic DefaultErrorAttributes errorAttributes() {\n\t\treturn new DefaultErrorAttributes();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(value = ErrorController.class, search = SearchStrategy.CURRENT)\n\tpublic BasicErrorController basicErrorController(ErrorAttributes errorAttributes) {\n\t\treturn new BasicErrorController(errorAttributes, this.serverProperties.getError(),\n\t\t\t\tthis.errorViewResolvers);\n\t}\n\n\t@Bean\n\tpublic ErrorPageCustomizer errorPageCustomizer() {\n\t\treturn new ErrorPageCustomizer(this.serverProperties);\n\t}\n\n\t@Bean\n\t@ConditionalOnBean(DispatcherServlet.class)\n\t@ConditionalOnMissingBean\n\tpublic DefaultErrorViewResolver conventionErrorViewResolver() {\n\t\treturn new DefaultErrorViewResolver(this.applicationContext,\n\t\t\t\tthis.resourceProperties);\n\t}\n\n\t@Bean\n\tpublic static PreserveErrorControllerTargetClassPostProcessor preserveErrorControllerTargetClassPostProcessor() {\n\t\treturn new PreserveErrorControllerTargetClassPostProcessor();\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "server.error.whitelabel", name = "enabled", matchIfMissing = true)\n\t@Conditional(ErrorTemplateMissingCondition.class)\n\tprotected static class WhitelabelErrorViewConfiguration {\n\n\t\tprivate final SpelView defaultErrorView = new SpelView(\n\t\t\t\t"<html><body><h1>Whitelabel Error Page</h1>"\n\t\t\t\t\t\t+ "<p>This application has no explicit mapping for /error, so you are seeing this as a fallback.</p>"\n\t\t\t\t\t\t+ "<div id=\'created\'>${timestamp}</div>"\n\t\t\t\t\t\t+ "<div>There was an unexpected error (type=${error}, status=${status}).</div>"\n\t\t\t\t\t\t+ "<div>${message}</div></body></html>");\n\n\t\t@Bean(name = "error")\n\t\t@ConditionalOnMissingBean(name = "error")\n\t\tpublic View defaultErrorView() {\n\t\t\treturn this.defaultErrorView;\n\t\t}\n\n\t\t// If the user adds @EnableWebMvc then the bean name view resolver from\n\t\t// WebMvcAutoConfiguration disappears, so add it back in to avoid disappointment.\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(BeanNameViewResolver.class)\n\t\tpublic BeanNameViewResolver beanNameViewResolver() {\n\t\t\tBeanNameViewResolver resolver = new BeanNameViewResolver();\n\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 10);\n\t\t\treturn resolver;\n\t\t}\n\n\t}\n\n\t/**\n\t * {@link SpringBootCondition} that matches when no error template view is detected.\n\t */\n\tprivate static class ErrorTemplateMissingCondition extends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tList<TemplateAvailabilityProvider> availabilityProviders = SpringFactoriesLoader\n\t\t\t\t\t.loadFactories(TemplateAvailabilityProvider.class,\n\t\t\t\t\t\t\tcontext.getClassLoader());\n\n\t\t\tfor (TemplateAvailabilityProvider availabilityProvider : availabilityProviders) {\n\t\t\t\tif (availabilityProvider.isTemplateAvailable("error",\n\t\t\t\t\t\tcontext.getEnvironment(), context.getClassLoader(),\n\t\t\t\t\t\tcontext.getResourceLoader())) {\n\t\t\t\t\treturn ConditionOutcome.noMatch("Template from "\n\t\t\t\t\t\t\t+ availabilityProvider + " found for error view");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn ConditionOutcome.match("No error template view detected");\n\t\t}\n\n\t}\n\n\t/**\n\t * Simple {@link View} implementation that resolves variables as SpEL expressions.\n\t */\n\tprivate static class SpelView implements View {\n\n\t\tprivate final NonRecursivePropertyPlaceholderHelper helper;\n\n\t\tprivate final String template;\n\n\t\tprivate final Map<String, Expression> expressions;\n\n\t\tSpelView(String template) {\n\t\t\tthis.helper = new NonRecursivePropertyPlaceholderHelper("${", "}");\n\t\t\tthis.template = template;\n\t\t\tExpressionCollector expressionCollector = new ExpressionCollector();\n\t\t\tthis.helper.replacePlaceholders(this.template, expressionCollector);\n\t\t\tthis.expressions = expressionCollector.getExpressions();\n\t\t}\n\n\t\t@Override\n\t\tpublic String getContentType() {\n\t\t\treturn "text/html";\n\t\t}\n\n\t\t@Override\n\t\tpublic void render(Map<String, ?> model, HttpServletRequest request,\n\t\t\t\tHttpServletResponse response) throws Exception {\n\t\t\tif (response.getContentType() == null) {\n\t\t\t\tresponse.setContentType(getContentType());\n\t\t\t}\n\t\t\tMap<String, Object> map = new HashMap<String, Object>(model);\n\t\t\tmap.put("path", request.getContextPath());\n\t\t\tPlaceholderResolver resolver = new ExpressionResolver(this.expressions, map);\n\t\t\tString result = this.helper.replacePlaceholders(this.template, resolver);\n\t\t\tresponse.getWriter().append(result);\n\t\t}\n\n\t}\n\n\t/**\n\t * {@link PlaceholderResolver} to collect placeholder expressions.\n\t */\n\tprivate static class ExpressionCollector implements PlaceholderResolver {\n\n\t\tprivate final SpelExpressionParser parser = new SpelExpressionParser();\n\n\t\tprivate final Map<String, Expression> expressions = new HashMap<String, Expression>();\n\n\t\t@Override\n\t\tpublic String resolvePlaceholder(String name) {\n\t\t\tthis.expressions.put(name, this.parser.parseExpression(name));\n\t\t\treturn null;\n\t\t}\n\n\t\tpublic Map<String, Expression> getExpressions() {\n\t\t\treturn Collections.unmodifiableMap(this.expressions);\n\t\t}\n\n\t}\n\n\t/**\n\t * SpEL based {@link PlaceholderResolver}.\n\t */\n\tprivate static class ExpressionResolver implements PlaceholderResolver {\n\n\t\tprivate final Map<String, Expression> expressions;\n\n\t\tprivate final EvaluationContext context;\n\n\t\tExpressionResolver(Map<String, Expression> expressions, Map<String, ?> map) {\n\t\t\tthis.expressions = expressions;\n\t\t\tthis.context = getContext(map);\n\t\t}\n\n\t\tprivate EvaluationContext getContext(Map<String, ?> map) {\n\t\t\tStandardEvaluationContext context = new StandardEvaluationContext();\n\t\t\tcontext.addPropertyAccessor(new MapAccessor());\n\t\t\tcontext.setRootObject(map);\n\t\t\treturn context;\n\t\t}\n\n\t\t@Override\n\t\tpublic String resolvePlaceholder(String placeholderName) {\n\t\t\tExpression expression = this.expressions.get(placeholderName);\n\t\t\treturn escape(expression == null ? null : expression.getValue(this.context));\n\t\t}\n\n\t\tprivate String escape(Object value) {\n\t\t\treturn HtmlUtils.htmlEscape(value == null ? null : value.toString());\n\t\t}\n\n\t}\n\n\t/**\n\t * {@link EmbeddedServletContainerCustomizer} that configures the container\'s error\n\t * pages.\n\t */\n\tprivate static class ErrorPageCustomizer implements ErrorPageRegistrar, Ordered {\n\n\t\tprivate final ServerProperties properties;\n\n\t\tprotected ErrorPageCustomizer(ServerProperties properties) {\n\t\t\tthis.properties = properties;\n\t\t}\n\n\t\t@Override\n\t\tpublic void registerErrorPages(ErrorPageRegistry errorPageRegistry) {\n\t\t\tErrorPage errorPage = new ErrorPage(this.properties.getServletPrefix()\n\t\t\t\t\t+ this.properties.getError().getPath());\n\t\t\terrorPageRegistry.addErrorPages(errorPage);\n\t\t}\n\n\t\t@Override\n\t\tpublic int getOrder() {\n\t\t\treturn 0;\n\t\t}\n\n\t}\n\n\t/**\n\t * {@link BeanFactoryPostProcessor} to ensure that the target class of ErrorController\n\t * MVC beans are preserved when using AOP.\n\t */\n\tstatic class PreserveErrorControllerTargetClassPostProcessor\n\t\t\timplements BeanFactoryPostProcessor {\n\n\t\t@Override\n\t\tpublic void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)\n\t\t\t\tthrows BeansException {\n\t\t\tString[] errorControllerBeans = beanFactory\n\t\t\t\t\t.getBeanNamesForType(ErrorController.class, false, false);\n\t\t\tfor (String errorControllerBean : errorControllerBeans) {\n\t\t\t\ttry {\n\t\t\t\t\tbeanFactory.getBeanDefinition(errorControllerBean).setAttribute(\n\t\t\t\t\t\t\tAutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE);\n\t\t\t\t}\n\t\t\t\tcatch (Throwable ex) {\n\t\t\t\t\t// Ignore\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.servlet.Servlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.springframework.aop.framework.autoproxy.AutoProxyUtils;\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.config.BeanFactoryPostProcessor;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider;\nimport org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;\nimport org.springframework.boot.web.servlet.ErrorPage;\nimport org.springframework.boot.web.servlet.ErrorPageRegistrar;\nimport org.springframework.boot.web.servlet.ErrorPageRegistry;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.expression.MapAccessor;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.io.support.SpringFactoriesLoader;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.expression.EvaluationContext;\nimport org.springframework.expression.Expression;\nimport org.springframework.expression.spel.standard.SpelExpressionParser;\nimport org.springframework.expression.spel.support.StandardEvaluationContext;\nimport org.springframework.util.PropertyPlaceholderHelper.PlaceholderResolver;\nimport org.springframework.web.servlet.DispatcherServlet;\nimport org.springframework.web.servlet.View;\nimport org.springframework.web.servlet.view.BeanNameViewResolver;\nimport org.springframework.web.util.HtmlUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to render errors via an MVC error\n * controller.\n *\n * @author Dave Syer\n * @author Andy Wilkinson\n * @author Stephane Nicoll\n */\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class })\n@ConditionalOnWebApplication\n// Ensure this loads before the main WebMvcAutoConfiguration so that the error View is\n// available\n@AutoConfigureBefore(WebMvcAutoConfiguration.class)\n@Configuration\npublic class ErrorMvcAutoConfiguration {\n\n\tprivate final ServerProperties properties;\n\n\tpublic ErrorMvcAutoConfiguration(ServerProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(value = ErrorAttributes.class, search = SearchStrategy.CURRENT)\n\tpublic DefaultErrorAttributes errorAttributes() {\n\t\treturn new DefaultErrorAttributes();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(value = ErrorController.class, search = SearchStrategy.CURRENT)\n\tpublic BasicErrorController basicErrorController(ErrorAttributes errorAttributes) {\n\t\treturn new BasicErrorController(errorAttributes, this.properties.getError());\n\t}\n\n\t@Bean\n\tpublic ErrorPageCustomizer errorPageCustomizer() {\n\t\treturn new ErrorPageCustomizer(this.properties);\n\t}\n\n\t@Bean\n\tpublic static PreserveErrorControllerTargetClassPostProcessor preserveErrorControllerTargetClassPostProcessor() {\n\t\treturn new PreserveErrorControllerTargetClassPostProcessor();\n\t}\n\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "server.error.whitelabel", name = "enabled", matchIfMissing = true)\n\t@Conditional(ErrorTemplateMissingCondition.class)\n\tprotected static class WhitelabelErrorViewConfiguration {\n\n\t\tprivate final SpelView defaultErrorView = new SpelView(\n\t\t\t\t"<html><body><h1>Whitelabel Error Page</h1>"\n\t\t\t\t\t\t+ "<p>This application has no explicit mapping for /error, so you are seeing this as a fallback.</p>"\n\t\t\t\t\t\t+ "<div id=\'created\'>${timestamp}</div>"\n\t\t\t\t\t\t+ "<div>There was an unexpected error (type=${error}, status=${status}).</div>"\n\t\t\t\t\t\t+ "<div>${message}</div></body></html>");\n\n\t\t@Bean(name = "error")\n\t\t@ConditionalOnMissingBean(name = "error")\n\t\tpublic View defaultErrorView() {\n\t\t\treturn this.defaultErrorView;\n\t\t}\n\n\t\t// If the user adds @EnableWebMvc then the bean name view resolver from\n\t\t// WebMvcAutoConfiguration disappears, so add it back in to avoid disappointment.\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(BeanNameViewResolver.class)\n\t\tpublic BeanNameViewResolver beanNameViewResolver() {\n\t\t\tBeanNameViewResolver resolver = new BeanNameViewResolver();\n\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 10);\n\t\t\treturn resolver;\n\t\t}\n\n\t}\n\n\t/**\n\t * {@link SpringBootCondition} that matches when no error template view is detected.\n\t */\n\tprivate static class ErrorTemplateMissingCondition extends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tList<TemplateAvailabilityProvider> availabilityProviders = SpringFactoriesLoader\n\t\t\t\t\t.loadFactories(TemplateAvailabilityProvider.class,\n\t\t\t\t\t\t\tcontext.getClassLoader());\n\n\t\t\tfor (TemplateAvailabilityProvider availabilityProvider : availabilityProviders) {\n\t\t\t\tif (availabilityProvider.isTemplateAvailable("error",\n\t\t\t\t\t\tcontext.getEnvironment(), context.getClassLoader(),\n\t\t\t\t\t\tcontext.getResourceLoader())) {\n\t\t\t\t\treturn ConditionOutcome.noMatch("Template from "\n\t\t\t\t\t\t\t+ availabilityProvider + " found for error view");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn ConditionOutcome.match("No error template view detected");\n\t\t}\n\n\t}\n\n\t/**\n\t * Simple {@link View} implementation that resolves variables as SpEL expressions.\n\t */\n\tprivate static class SpelView implements View {\n\n\t\tprivate final NonRecursivePropertyPlaceholderHelper helper;\n\n\t\tprivate final String template;\n\n\t\tprivate final Map<String, Expression> expressions;\n\n\t\tSpelView(String template) {\n\t\t\tthis.helper = new NonRecursivePropertyPlaceholderHelper("${", "}");\n\t\t\tthis.template = template;\n\t\t\tExpressionCollector expressionCollector = new ExpressionCollector();\n\t\t\tthis.helper.replacePlaceholders(this.template, expressionCollector);\n\t\t\tthis.expressions = expressionCollector.getExpressions();\n\t\t}\n\n\t\t@Override\n\t\tpublic String getContentType() {\n\t\t\treturn "text/html";\n\t\t}\n\n\t\t@Override\n\t\tpublic void render(Map<String, ?> model, HttpServletRequest request,\n\t\t\t\tHttpServletResponse response) throws Exception {\n\t\t\tif (response.getContentType() == null) {\n\t\t\t\tresponse.setContentType(getContentType());\n\t\t\t}\n\t\t\tMap<String, Object> map = new HashMap<String, Object>(model);\n\t\t\tmap.put("path", request.getContextPath());\n\t\t\tPlaceholderResolver resolver = new ExpressionResolver(this.expressions, map);\n\t\t\tString result = this.helper.replacePlaceholders(this.template, resolver);\n\t\t\tresponse.getWriter().append(result);\n\t\t}\n\n\t}\n\n\t/**\n\t * {@link PlaceholderResolver} to collect placeholder expressions.\n\t */\n\tprivate static class ExpressionCollector implements PlaceholderResolver {\n\n\t\tprivate final SpelExpressionParser parser = new SpelExpressionParser();\n\n\t\tprivate final Map<String, Expression> expressions = new HashMap<String, Expression>();\n\n\t\t@Override\n\t\tpublic String resolvePlaceholder(String name) {\n\t\t\tthis.expressions.put(name, this.parser.parseExpression(name));\n\t\t\treturn null;\n\t\t}\n\n\t\tpublic Map<String, Expression> getExpressions() {\n\t\t\treturn Collections.unmodifiableMap(this.expressions);\n\t\t}\n\n\t}\n\n\t/**\n\t * SpEL based {@link PlaceholderResolver}.\n\t */\n\tprivate static class ExpressionResolver implements PlaceholderResolver {\n\n\t\tprivate final Map<String, Expression> expressions;\n\n\t\tprivate final EvaluationContext context;\n\n\t\tExpressionResolver(Map<String, Expression> expressions, Map<String, ?> map) {\n\t\t\tthis.expressions = expressions;\n\t\t\tthis.context = getContext(map);\n\t\t}\n\n\t\tprivate EvaluationContext getContext(Map<String, ?> map) {\n\t\t\tStandardEvaluationContext context = new StandardEvaluationContext();\n\t\t\tcontext.addPropertyAccessor(new MapAccessor());\n\t\t\tcontext.setRootObject(map);\n\t\t\treturn context;\n\t\t}\n\n\t\t@Override\n\t\tpublic String resolvePlaceholder(String placeholderName) {\n\t\t\tExpression expression = this.expressions.get(placeholderName);\n\t\t\treturn escape(expression == null ? null : expression.getValue(this.context));\n\t\t}\n\n\t\tprivate String escape(Object value) {\n\t\t\treturn HtmlUtils.htmlEscape(value == null ? null : value.toString());\n\t\t}\n\n\t}\n\n\t/**\n\t * {@link EmbeddedServletContainerCustomizer} that configures the container\'s error\n\t * pages.\n\t */\n\tprivate static class ErrorPageCustomizer implements ErrorPageRegistrar, Ordered {\n\n\t\tprivate final ServerProperties properties;\n\n\t\tprotected ErrorPageCustomizer(ServerProperties properties) {\n\t\t\tthis.properties = properties;\n\t\t}\n\n\t\t@Override\n\t\tpublic void registerErrorPages(ErrorPageRegistry errorPageRegistry) {\n\t\t\tErrorPage errorPage = new ErrorPage(this.properties.getServletPrefix()\n\t\t\t\t\t+ this.properties.getError().getPath());\n\t\t\terrorPageRegistry.addErrorPages(errorPage);\n\t\t}\n\n\t\t@Override\n\t\tpublic int getOrder() {\n\t\t\treturn 0;\n\t\t}\n\n\t}\n\n\t/**\n\t * {@link BeanFactoryPostProcessor} to ensure that the target class of ErrorController\n\t * MVC beans are preserved when using AOP.\n\t */\n\tstatic class PreserveErrorControllerTargetClassPostProcessor\n\t\t\timplements BeanFactoryPostProcessor {\n\n\t\t@Override\n\t\tpublic void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)\n\t\t\t\tthrows BeansException {\n\t\t\tString[] errorControllerBeans = beanFactory\n\t\t\t\t\t.getBeanNamesForType(ErrorController.class, false, false);\n\t\t\tfor (String errorControllerBean : errorControllerBeans) {\n\t\t\t\ttry {\n\t\t\t\t\tbeanFactory.getBeanDefinition(errorControllerBean).setAttribute(\n\t\t\t\t\t\t\tAutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE);\n\t\t\t\t}\n\t\t\t\tcatch (Throwable ex) {\n\t\t\t\t\t// Ignore\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
