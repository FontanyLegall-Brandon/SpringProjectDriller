@@ -0,0 +1,72 @@
+
+
+package org.springframework.boot.actuate.autoconfigure.metrics.web.reactive;
+
+import io.micrometer.core.instrument.MeterRegistry;
+
+import org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration;
+import org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties;
+import org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration;
+import org.springframework.boot.actuate.autoconfigure.metrics.web.client.RestTemplateMetricsAutoConfiguration;
+import org.springframework.boot.actuate.metrics.web.reactive.client.DefaultWebClientExchangeTagsProvider;
+import org.springframework.boot.actuate.metrics.web.reactive.client.MetricsWebClientCustomizer;
+import org.springframework.boot.actuate.metrics.web.reactive.client.WebClientExchangeTagsProvider;
+import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.AutoConfigureBefore;
+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.web.reactive.function.client.WebClient;
+
+
+@Configuration
+@ConditionalOnClass(WebClient.class)
+@AutoConfigureAfter({MetricsAutoConfiguration.class,
+		SimpleMetricsExportAutoConfiguration.class})
+@AutoConfigureBefore(WebClientAutoConfiguration.class)
+@ConditionalOnBean(MeterRegistry.class)
+public class WebClientMetricsAutoConfiguration {
+
+	@Bean
+	@ConditionalOnMissingBean
+	public WebClientExchangeTagsProvider defaultWebClientExchangeTagsProvider() {
+		return new DefaultWebClientExchangeTagsProvider();
+	}
+
+	@Bean
+	public MetricsWebClientCustomizer metricsWebClientCustomizer(MeterRegistry meterRegistry,
+			WebClientExchangeTagsProvider tagsProvider,
+			MetricsProperties properties) {
+		return new MetricsWebClientCustomizer(meterRegistry, tagsProvider,
+				properties.getWeb().getClient().getRequestsMetricName());
+	}
+
+}

