{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/TwitterAutoConfiguration.java'), '_new_path': None, 'change_type': <ModificationType.DELETE: 4>, 'diff': '@@ -1,96 +0,0 @@\n-/*\n- * Copyright 2012-2017 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the "License");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an "AS IS" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.boot.autoconfigure.social;\n-\n-import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n-import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n-import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\n-import org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration;\n-import org.springframework.boot.context.properties.EnableConfigurationProperties;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.context.annotation.Scope;\n-import org.springframework.context.annotation.ScopedProxyMode;\n-import org.springframework.social.config.annotation.EnableSocial;\n-import org.springframework.social.config.annotation.SocialConfigurerAdapter;\n-import org.springframework.social.connect.Connection;\n-import org.springframework.social.connect.ConnectionFactory;\n-import org.springframework.social.connect.ConnectionRepository;\n-import org.springframework.social.connect.web.GenericConnectionStatusView;\n-import org.springframework.social.twitter.api.Twitter;\n-import org.springframework.social.twitter.api.impl.TwitterTemplate;\n-import org.springframework.social.twitter.connect.TwitterConnectionFactory;\n-\n-/**\n- * {@link EnableAutoConfiguration Auto-configuration} for Spring Social connectivity with\n- * Twitter.\n- *\n- * @author Craig Walls\n- * @since 1.1.0\n- */\n-@Configuration\n-@ConditionalOnClass({ SocialConfigurerAdapter.class, TwitterConnectionFactory.class })\n-@ConditionalOnProperty(prefix = "spring.social.twitter", name = "app-id")\n-@AutoConfigureBefore(SocialWebAutoConfiguration.class)\n-@AutoConfigureAfter(WebMvcAutoConfiguration.class)\n-public class TwitterAutoConfiguration {\n-\n-\t@Configuration\n-\t@EnableSocial\n-\t@EnableConfigurationProperties(TwitterProperties.class)\n-\t@ConditionalOnWebApplication(type = Type.SERVLET)\n-\tprotected static class TwitterConfigurerAdapter extends SocialAutoConfigurerAdapter {\n-\n-\t\tprivate final TwitterProperties properties;\n-\n-\t\tprotected TwitterConfigurerAdapter(TwitterProperties properties) {\n-\t\t\tthis.properties = properties;\n-\t\t}\n-\n-\t\t@Bean\n-\t\t@ConditionalOnMissingBean\n-\t\t@Scope(value = "request", proxyMode = ScopedProxyMode.INTERFACES)\n-\t\tpublic Twitter twitter(ConnectionRepository repository) {\n-\t\t\tConnection<Twitter> connection = repository\n-\t\t\t\t\t.findPrimaryConnection(Twitter.class);\n-\t\t\tif (connection != null) {\n-\t\t\t\treturn connection.getApi();\n-\t\t\t}\n-\t\t\treturn new TwitterTemplate(this.properties.getAppId(),\n-\t\t\t\t\tthis.properties.getAppSecret());\n-\t\t}\n-\n-\t\t@Bean(name = { "connect/twitterConnect", "connect/twitterConnected" })\n-\t\t@ConditionalOnProperty(prefix = "spring.social", name = "auto-connection-views")\n-\t\tpublic GenericConnectionStatusView twitterConnectView() {\n-\t\t\treturn new GenericConnectionStatusView("twitter", "Twitter");\n-\t\t}\n-\n-\t\t@Override\n-\t\tprotected ConnectionFactory<?> createConnectionFactory() {\n-\t\t\treturn new TwitterConnectionFactory(this.properties.getAppId(),\n-\t\t\t\t\tthis.properties.getAppSecret());\n-\t\t}\n-\n-\t}\n-\n-}\n', 'source_code': None, 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.social;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.context.annotation.ScopedProxyMode;\nimport org.springframework.social.config.annotation.EnableSocial;\nimport org.springframework.social.config.annotation.SocialConfigurerAdapter;\nimport org.springframework.social.connect.Connection;\nimport org.springframework.social.connect.ConnectionFactory;\nimport org.springframework.social.connect.ConnectionRepository;\nimport org.springframework.social.connect.web.GenericConnectionStatusView;\nimport org.springframework.social.twitter.api.Twitter;\nimport org.springframework.social.twitter.api.impl.TwitterTemplate;\nimport org.springframework.social.twitter.connect.TwitterConnectionFactory;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Social connectivity with\n * Twitter.\n *\n * @author Craig Walls\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass({ SocialConfigurerAdapter.class, TwitterConnectionFactory.class })\n@ConditionalOnProperty(prefix = "spring.social.twitter", name = "app-id")\n@AutoConfigureBefore(SocialWebAutoConfiguration.class)\n@AutoConfigureAfter(WebMvcAutoConfiguration.class)\npublic class TwitterAutoConfiguration {\n\n\t@Configuration\n\t@EnableSocial\n\t@EnableConfigurationProperties(TwitterProperties.class)\n\t@ConditionalOnWebApplication(type = Type.SERVLET)\n\tprotected static class TwitterConfigurerAdapter extends SocialAutoConfigurerAdapter {\n\n\t\tprivate final TwitterProperties properties;\n\n\t\tprotected TwitterConfigurerAdapter(TwitterProperties properties) {\n\t\t\tthis.properties = properties;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@Scope(value = "request", proxyMode = ScopedProxyMode.INTERFACES)\n\t\tpublic Twitter twitter(ConnectionRepository repository) {\n\t\t\tConnection<Twitter> connection = repository\n\t\t\t\t\t.findPrimaryConnection(Twitter.class);\n\t\t\tif (connection != null) {\n\t\t\t\treturn connection.getApi();\n\t\t\t}\n\t\t\treturn new TwitterTemplate(this.properties.getAppId(),\n\t\t\t\t\tthis.properties.getAppSecret());\n\t\t}\n\n\t\t@Bean(name = { "connect/twitterConnect", "connect/twitterConnected" })\n\t\t@ConditionalOnProperty(prefix = "spring.social", name = "auto-connection-views")\n\t\tpublic GenericConnectionStatusView twitterConnectView() {\n\t\t\treturn new GenericConnectionStatusView("twitter", "Twitter");\n\t\t}\n\n\t\t@Override\n\t\tprotected ConnectionFactory<?> createConnectionFactory() {\n\t\t\treturn new TwitterConnectionFactory(this.properties.getAppId(),\n\t\t\t\t\tthis.properties.getAppSecret());\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
