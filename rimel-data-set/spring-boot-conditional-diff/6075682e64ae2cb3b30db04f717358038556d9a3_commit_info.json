{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/HazelcastCacheConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/HazelcastCacheConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -41,10 +41,11 @@ import org.springframework.context.annotation.Import;\n  * @see HazelcastConfigResourceCondition\n  */\n @Configuration\n-@ConditionalOnClass({HazelcastInstance.class, HazelcastCacheManager.class})\n+@ConditionalOnClass({ HazelcastInstance.class, HazelcastCacheManager.class })\n @ConditionalOnMissingBean(CacheManager.class)\n @Conditional(CacheCondition.class)\n-@Import({HazelcastInstanceConfiguration.Existing.class, HazelcastInstanceConfiguration.Specific.class})\n+@Import({ HazelcastInstanceConfiguration.Existing.class,\n+\t\tHazelcastInstanceConfiguration.Specific.class })\n class HazelcastCacheConfiguration {\n \n }\n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.cache;\n\nimport com.hazelcast.core.HazelcastInstance;\nimport com.hazelcast.spring.cache.HazelcastCacheManager;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration;\nimport org.springframework.boot.autoconfigure.hazelcast.HazelcastConfigResourceCondition;\nimport org.springframework.cache.CacheManager;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\n\n/**\n * Hazelcast cache configuration. Can either reuse the {@link HazelcastInstance} that has\n * been configured by the general {@link HazelcastAutoConfiguration} or create a separate\n * one if the {@code spring.cache.hazelcast.config} property has been set.\n * <p>\n * If the {@link HazelcastAutoConfiguration} has been disabled, an attempt to configure a\n * default {@link HazelcastInstance} is still made, using the same defaults.\n *\n * @author Stephane Nicoll\n * @since 1.3.0\n * @see HazelcastConfigResourceCondition\n */\n@Configuration\n@ConditionalOnClass({ HazelcastInstance.class, HazelcastCacheManager.class })\n@ConditionalOnMissingBean(CacheManager.class)\n@Conditional(CacheCondition.class)\n@Import({ HazelcastInstanceConfiguration.Existing.class,\n\t\tHazelcastInstanceConfiguration.Specific.class })\nclass HazelcastCacheConfiguration {\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.cache;\n\nimport com.hazelcast.core.HazelcastInstance;\nimport com.hazelcast.spring.cache.HazelcastCacheManager;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration;\nimport org.springframework.boot.autoconfigure.hazelcast.HazelcastConfigResourceCondition;\nimport org.springframework.cache.CacheManager;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\n\n/**\n * Hazelcast cache configuration. Can either reuse the {@link HazelcastInstance} that has\n * been configured by the general {@link HazelcastAutoConfiguration} or create a separate\n * one if the {@code spring.cache.hazelcast.config} property has been set.\n * <p>\n * If the {@link HazelcastAutoConfiguration} has been disabled, an attempt to configure a\n * default {@link HazelcastInstance} is still made, using the same defaults.\n *\n * @author Stephane Nicoll\n * @since 1.3.0\n * @see HazelcastConfigResourceCondition\n */\n@Configuration\n@ConditionalOnClass({HazelcastInstance.class, HazelcastCacheManager.class})\n@ConditionalOnMissingBean(CacheManager.class)\n@Conditional(CacheCondition.class)\n@Import({HazelcastInstanceConfiguration.Existing.class, HazelcastInstanceConfiguration.Specific.class})\nclass HazelcastCacheConfiguration {\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
