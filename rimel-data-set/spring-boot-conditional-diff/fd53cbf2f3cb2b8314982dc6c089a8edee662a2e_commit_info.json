{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -35,7 +35,6 @@ import org.springframework.boot.context.properties.ConfigurationProperties;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.context.annotation.Import;\n import org.springframework.core.io.DefaultResourceLoader;\n import org.springframework.core.io.ResourceLoader;\n import org.springframework.orm.jpa.AbstractEntityManagerFactoryBean;\n@@ -60,7 +59,6 @@ public class FlywayAutoConfiguration {\n \t@Configuration\n \t@ConditionalOnMissingBean(Flyway.class)\n \t@EnableConfigurationProperties(FlywayProperties.class)\n-\t@Import(FlywayJpaDependencyConfiguration.class)\n \tpublic static class FlywayConfiguration {\n \n \t\t@Autowired\n@@ -122,6 +120,21 @@ public class FlywayAutoConfiguration {\n \t\t@ConditionalOnMissingBean\n \t\tpublic FlywayMigrationInitializer flywayInitializer(Flyway flyway) {\n \t\t\treturn new FlywayMigrationInitializer(flyway, this.migrationStrategy);\n+\t\t}\n+\n+\t\t/**\n+\t\t * Additional configuration to ensure that {@link EntityManagerFactory} beans\n+\t\t * depend-on the {@code flywayInitializer} bean.\n+\t\t */\n+\t\t@Configuration\n+\t\t@ConditionalOnClass(LocalContainerEntityManagerFactoryBean.class)\n+\t\t@ConditionalOnBean(AbstractEntityManagerFactoryBean.class)\n+\t\tprotected class FlywayInitializerJpaDependencyConfiguration extends\n+\t\t\t\tEntityManagerFactoryDependsOnPostProcessor {\n+\n+\t\t\tpublic FlywayInitializerJpaDependencyConfiguration() {\n+\t\t\t\tsuper("flywayInitializer");\n+\t\t\t}\n \n \t\t}\n \n@@ -129,7 +142,7 @@ public class FlywayAutoConfiguration {\n \n \t/**\n \t * Additional configuration to ensure that {@link EntityManagerFactory} beans\n-\t * depend-on the flyway bean.\n+\t * depend-on the {@code flyway} bean.\n \t */\n \t@Configuration\n \t@ConditionalOnClass(LocalContainerEntityManagerFactoryBean.class)\n@@ -138,7 +151,7 @@ public class FlywayAutoConfiguration {\n \t\t\tEntityManagerFactoryDependsOnPostProcessor {\n \n \t\tpublic FlywayJpaDependencyConfiguration() {\n-\t\t\tsuper("flywayInitializer", "flyway");\n+\t\t\tsuper("flyway");\n \t\t}\n \n \t}\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.flyway;\n\nimport javax.annotation.PostConstruct;\nimport javax.persistence.EntityManagerFactory;\nimport javax.sql.DataSource;\n\nimport org.flywaydb.core.Flyway;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.data.jpa.EntityManagerFactoryDependsOnPostProcessor;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.orm.jpa.AbstractEntityManagerFactoryBean;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.util.Assert;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Flyway database migrations.\n *\n * @author Dave Syer\n * @author Phillip Webb\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass(Flyway.class)\n@ConditionalOnBean(DataSource.class)\n@ConditionalOnProperty(prefix = "flyway", name = "enabled", matchIfMissing = true)\n@AutoConfigureAfter({ DataSourceAutoConfiguration.class,\n\t\tHibernateJpaAutoConfiguration.class })\npublic class FlywayAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnMissingBean(Flyway.class)\n\t@EnableConfigurationProperties(FlywayProperties.class)\n\tpublic static class FlywayConfiguration {\n\n\t\t@Autowired\n\t\tprivate FlywayProperties properties = new FlywayProperties();\n\n\t\t@Autowired\n\t\tprivate ResourceLoader resourceLoader = new DefaultResourceLoader();\n\n\t\t@Autowired(required = false)\n\t\tprivate DataSource dataSource;\n\n\t\t@Autowired(required = false)\n\t\t@FlywayDataSource\n\t\tprivate DataSource flywayDataSource;\n\n\t\t@Autowired(required = false)\n\t\tprivate FlywayMigrationStrategy migrationStrategy;\n\n\t\t@PostConstruct\n\t\tpublic void checkLocationExists() {\n\t\t\tif (this.properties.isCheckLocation()) {\n\t\t\t\tAssert.state(!this.properties.getLocations().isEmpty(),\n\t\t\t\t\t\t"Migration script locations not configured");\n\t\t\t\tboolean exists = hasAtLeastOneLocation();\n\t\t\t\tAssert.state(exists, "Cannot find migrations location in: "\n\t\t\t\t\t\t+ this.properties.getLocations()\n\t\t\t\t\t\t+ " (please add migrations or check your Flyway configuration)");\n\t\t\t}\n\t\t}\n\n\t\tprivate boolean hasAtLeastOneLocation() {\n\t\t\tfor (String location : this.properties.getLocations()) {\n\t\t\t\tif (this.resourceLoader.getResource(location).exists()) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\t@Bean\n\t\t@ConfigurationProperties(prefix = "flyway")\n\t\tpublic Flyway flyway() {\n\t\t\tFlyway flyway = new Flyway();\n\t\t\tif (this.properties.isCreateDataSource()) {\n\t\t\t\tflyway.setDataSource(this.properties.getUrl(), this.properties.getUser(),\n\t\t\t\t\t\tthis.properties.getPassword(), this.properties.getInitSqls()\n\t\t\t\t\t\t\t\t.toArray(new String[0]));\n\t\t\t}\n\t\t\telse if (this.flywayDataSource != null) {\n\t\t\t\tflyway.setDataSource(this.flywayDataSource);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tflyway.setDataSource(this.dataSource);\n\t\t\t}\n\t\t\treturn flyway;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic FlywayMigrationInitializer flywayInitializer(Flyway flyway) {\n\t\t\treturn new FlywayMigrationInitializer(flyway, this.migrationStrategy);\n\t\t}\n\n\t\t/**\n\t\t * Additional configuration to ensure that {@link EntityManagerFactory} beans\n\t\t * depend-on the {@code flywayInitializer} bean.\n\t\t */\n\t\t@Configuration\n\t\t@ConditionalOnClass(LocalContainerEntityManagerFactoryBean.class)\n\t\t@ConditionalOnBean(AbstractEntityManagerFactoryBean.class)\n\t\tprotected class FlywayInitializerJpaDependencyConfiguration extends\n\t\t\t\tEntityManagerFactoryDependsOnPostProcessor {\n\n\t\t\tpublic FlywayInitializerJpaDependencyConfiguration() {\n\t\t\t\tsuper("flywayInitializer");\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Additional configuration to ensure that {@link EntityManagerFactory} beans\n\t * depend-on the {@code flyway} bean.\n\t */\n\t@Configuration\n\t@ConditionalOnClass(LocalContainerEntityManagerFactoryBean.class)\n\t@ConditionalOnBean(AbstractEntityManagerFactoryBean.class)\n\tprotected static class FlywayJpaDependencyConfiguration extends\n\t\t\tEntityManagerFactoryDependsOnPostProcessor {\n\n\t\tpublic FlywayJpaDependencyConfiguration() {\n\t\t\tsuper("flyway");\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.flyway;\n\nimport javax.annotation.PostConstruct;\nimport javax.persistence.EntityManagerFactory;\nimport javax.sql.DataSource;\n\nimport org.flywaydb.core.Flyway;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.data.jpa.EntityManagerFactoryDependsOnPostProcessor;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.orm.jpa.AbstractEntityManagerFactoryBean;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.util.Assert;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Flyway database migrations.\n *\n * @author Dave Syer\n * @author Phillip Webb\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass(Flyway.class)\n@ConditionalOnBean(DataSource.class)\n@ConditionalOnProperty(prefix = "flyway", name = "enabled", matchIfMissing = true)\n@AutoConfigureAfter({ DataSourceAutoConfiguration.class,\n\t\tHibernateJpaAutoConfiguration.class })\npublic class FlywayAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnMissingBean(Flyway.class)\n\t@EnableConfigurationProperties(FlywayProperties.class)\n\t@Import(FlywayJpaDependencyConfiguration.class)\n\tpublic static class FlywayConfiguration {\n\n\t\t@Autowired\n\t\tprivate FlywayProperties properties = new FlywayProperties();\n\n\t\t@Autowired\n\t\tprivate ResourceLoader resourceLoader = new DefaultResourceLoader();\n\n\t\t@Autowired(required = false)\n\t\tprivate DataSource dataSource;\n\n\t\t@Autowired(required = false)\n\t\t@FlywayDataSource\n\t\tprivate DataSource flywayDataSource;\n\n\t\t@Autowired(required = false)\n\t\tprivate FlywayMigrationStrategy migrationStrategy;\n\n\t\t@PostConstruct\n\t\tpublic void checkLocationExists() {\n\t\t\tif (this.properties.isCheckLocation()) {\n\t\t\t\tAssert.state(!this.properties.getLocations().isEmpty(),\n\t\t\t\t\t\t"Migration script locations not configured");\n\t\t\t\tboolean exists = hasAtLeastOneLocation();\n\t\t\t\tAssert.state(exists, "Cannot find migrations location in: "\n\t\t\t\t\t\t+ this.properties.getLocations()\n\t\t\t\t\t\t+ " (please add migrations or check your Flyway configuration)");\n\t\t\t}\n\t\t}\n\n\t\tprivate boolean hasAtLeastOneLocation() {\n\t\t\tfor (String location : this.properties.getLocations()) {\n\t\t\t\tif (this.resourceLoader.getResource(location).exists()) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\t@Bean\n\t\t@ConfigurationProperties(prefix = "flyway")\n\t\tpublic Flyway flyway() {\n\t\t\tFlyway flyway = new Flyway();\n\t\t\tif (this.properties.isCreateDataSource()) {\n\t\t\t\tflyway.setDataSource(this.properties.getUrl(), this.properties.getUser(),\n\t\t\t\t\t\tthis.properties.getPassword(), this.properties.getInitSqls()\n\t\t\t\t\t\t\t\t.toArray(new String[0]));\n\t\t\t}\n\t\t\telse if (this.flywayDataSource != null) {\n\t\t\t\tflyway.setDataSource(this.flywayDataSource);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tflyway.setDataSource(this.dataSource);\n\t\t\t}\n\t\t\treturn flyway;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic FlywayMigrationInitializer flywayInitializer(Flyway flyway) {\n\t\t\treturn new FlywayMigrationInitializer(flyway, this.migrationStrategy);\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Additional configuration to ensure that {@link EntityManagerFactory} beans\n\t * depend-on the flyway bean.\n\t */\n\t@Configuration\n\t@ConditionalOnClass(LocalContainerEntityManagerFactoryBean.class)\n\t@ConditionalOnBean(AbstractEntityManagerFactoryBean.class)\n\tprotected static class FlywayJpaDependencyConfiguration extends\n\t\t\tEntityManagerFactoryDependsOnPostProcessor {\n\n\t\tpublic FlywayJpaDependencyConfiguration() {\n\t\t\tsuper("flywayInitializer", "flyway");\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
