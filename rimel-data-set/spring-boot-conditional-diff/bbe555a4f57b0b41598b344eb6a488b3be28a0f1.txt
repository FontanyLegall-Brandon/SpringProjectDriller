@@ -0,0 +1,55 @@
+
+package org.springframework.boot.actuate.autoconfigure.web.jersey;
+
+import org.glassfish.jersey.server.ResourceConfig;
+
+import org.springframework.boot.actuate.autoconfigure.web.ManagementContextConfiguration;
+import org.springframework.boot.actuate.autoconfigure.web.ManagementContextType;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
+import org.springframework.boot.autoconfigure.jersey.JerseyProperties;
+import org.springframework.boot.autoconfigure.web.servlet.DefaultJerseyApplicationPath;
+import org.springframework.boot.autoconfigure.web.servlet.JerseyApplicationPath;
+import org.springframework.boot.context.properties.EnableConfigurationProperties;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Import;
+
+
+@ManagementContextConfiguration(ManagementContextType.SAME)
+@ConditionalOnMissingBean(ResourceConfig.class)
+@Import(JerseyManagementContextConfiguration.class)
+@EnableConfigurationProperties(JerseyProperties.class)
+@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)
+@ConditionalOnClass(ResourceConfig.class)
+@ConditionalOnMissingClass()
+public class JerseySameManagementContextConfiguration {
+
+	@Bean
+	@ConditionalOnMissingBean(JerseyApplicationPath.class)
+	public JerseyApplicationPath jerseyApplicationPath(JerseyProperties properties,
+			ResourceConfig config) {
+		return new DefaultJerseyApplicationPath(properties.getApplicationPath(), config);
+	}
+
+}

