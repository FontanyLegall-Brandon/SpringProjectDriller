{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/servlet/ServletManagementContextAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/servlet/ServletManagementContextAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -55,7 +55,7 @@ public class ServletManagementContextAutoConfiguration {\n \t// Put Servlets and Filters in their own nested class so they don\'t force early\n \t// instantiation of ManagementServerProperties.\n \t@Configuration\n-\t@ConditionalOnProperty(prefix = "management", name = "add-application-context-header", havingValue = "true")\n+\t@ConditionalOnProperty(prefix = "management.server", name = "add-application-context-header", havingValue = "true")\n \tprotected static class ApplicationContextFilterConfiguration {\n \n \t\t@Bean\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.web.servlet;\n\nimport javax.servlet.Servlet;\n\nimport org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.web.servlet.filter.ApplicationContextHeaderFilter;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Servlet-specific management\n * context concerns.\n *\n * @author Phillip Webb\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass(Servlet.class)\n@ConditionalOnWebApplication(type = Type.SERVLET)\npublic class ServletManagementContextAutoConfiguration {\n\n\t@Bean\n\tpublic ServletManagementContextFactory servletWebChildContextFactory() {\n\t\treturn new ServletManagementContextFactory();\n\t}\n\n\t@Bean\n\tpublic ManagementServletContext managementServletContext(\n\t\t\tWebEndpointProperties properties) {\n\t\treturn () -> properties.getBasePath();\n\t}\n\n\t// Put Servlets and Filters in their own nested class so they don\'t force early\n\t// instantiation of ManagementServerProperties.\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "management.server", name = "add-application-context-header", havingValue = "true")\n\tprotected static class ApplicationContextFilterConfiguration {\n\n\t\t@Bean\n\t\tpublic ApplicationContextHeaderFilter applicationContextIdFilter(\n\t\t\t\tApplicationContext context) {\n\t\t\treturn new ApplicationContextHeaderFilter(context);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.web.servlet;\n\nimport javax.servlet.Servlet;\n\nimport org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.web.servlet.filter.ApplicationContextHeaderFilter;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Servlet-specific management\n * context concerns.\n *\n * @author Phillip Webb\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass(Servlet.class)\n@ConditionalOnWebApplication(type = Type.SERVLET)\npublic class ServletManagementContextAutoConfiguration {\n\n\t@Bean\n\tpublic ServletManagementContextFactory servletWebChildContextFactory() {\n\t\treturn new ServletManagementContextFactory();\n\t}\n\n\t@Bean\n\tpublic ManagementServletContext managementServletContext(\n\t\t\tWebEndpointProperties properties) {\n\t\treturn () -> properties.getBasePath();\n\t}\n\n\t// Put Servlets and Filters in their own nested class so they don\'t force early\n\t// instantiation of ManagementServerProperties.\n\t@Configuration\n\t@ConditionalOnProperty(prefix = "management", name = "add-application-context-header", havingValue = "true")\n\tprotected static class ApplicationContextFilterConfiguration {\n\n\t\t@Bean\n\t\tpublic ApplicationContextHeaderFilter applicationContextIdFilter(\n\t\t\t\tApplicationContext context) {\n\t\t\treturn new ApplicationContextHeaderFilter(context);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
