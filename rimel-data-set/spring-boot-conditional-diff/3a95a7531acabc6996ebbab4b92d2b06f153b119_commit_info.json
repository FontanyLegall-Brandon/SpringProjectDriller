{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/servlet/AuthenticationManagerConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/servlet/AuthenticationManagerConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -61,6 +61,7 @@ public class AuthenticationManagerConfiguration {\n \t\t\t.getLog(AuthenticationManagerConfiguration.class);\n \n \t@Bean\n+\t@ConditionalOnMissingBean(type = "org.springframework.security.oauth2.client.registration.ClientRegistrationRepository")\n \tpublic InMemoryUserDetailsManager inMemoryUserDetailsManager(\n \t\t\tSecurityProperties properties,\n \t\t\tObjectProvider<PasswordEncoder> passwordEncoder) throws Exception {\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security.servlet;\n\nimport java.util.List;\nimport java.util.regex.Pattern;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.security.SecurityProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.AuthenticationProvider;\nimport org.springframework.security.config.annotation.ObjectPostProcessor;\nimport org.springframework.security.core.userdetails.User;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.provisioning.InMemoryUserDetailsManager;\n\n/**\n * Configuration for a Spring Security in-memory {@link AuthenticationManager}. Adds an\n * {@link InMemoryUserDetailsManager} with a default user and generated password. This can\n * be disabled by providing a bean of type {@link AuthenticationManager},\n * {@link AuthenticationProvider} or {@link UserDetailsService}.\n *\n * @author Dave Syer\n * @author Rob Winch\n * @author Madhura Bhave\n */\n@Configuration\n@ConditionalOnBean(ObjectPostProcessor.class)\n@ConditionalOnMissingBean({ AuthenticationManager.class, AuthenticationProvider.class,\n\t\tUserDetailsService.class })\npublic class AuthenticationManagerConfiguration {\n\n\tprivate static final String NOOP_PASSWORD_PREFIX = "{noop}";\n\n\tprivate static final Pattern PASSWORD_ALGORITHM_PATTERN = Pattern\n\t\t\t.compile("^\\\\{.+}.*$");\n\n\tprivate static final Log logger = LogFactory\n\t\t\t.getLog(AuthenticationManagerConfiguration.class);\n\n\t@Bean\n\t@ConditionalOnMissingBean(type = "org.springframework.security.oauth2.client.registration.ClientRegistrationRepository")\n\tpublic InMemoryUserDetailsManager inMemoryUserDetailsManager(\n\t\t\tSecurityProperties properties,\n\t\t\tObjectProvider<PasswordEncoder> passwordEncoder) throws Exception {\n\t\tSecurityProperties.User user = properties.getUser();\n\t\tList<String> roles = user.getRoles();\n\t\treturn new InMemoryUserDetailsManager(\n\t\t\t\tUser.withUsername(user.getName())\n\t\t\t\t\t\t.password(getOrDeducePassword(user,\n\t\t\t\t\t\t\t\tpasswordEncoder.getIfAvailable()))\n\t\t\t\t.roles(roles.toArray(new String[roles.size()])).build());\n\t}\n\n\tpublic String getOrDeducePassword(SecurityProperties.User user,\n\t\t\tPasswordEncoder encoder) {\n\t\tString password = user.getPassword();\n\t\tif (user.isPasswordGenerated()) {\n\t\t\tlogger.info(String.format("%n%nUsing generated security password: %s%n",\n\t\t\t\t\tuser.getPassword()));\n\t\t}\n\t\tif (encoder != null || PASSWORD_ALGORITHM_PATTERN.matcher(password).matches()) {\n\t\t\treturn password;\n\t\t}\n\t\treturn NOOP_PASSWORD_PREFIX + password;\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security.servlet;\n\nimport java.util.List;\nimport java.util.regex.Pattern;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.security.SecurityProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.AuthenticationProvider;\nimport org.springframework.security.config.annotation.ObjectPostProcessor;\nimport org.springframework.security.core.userdetails.User;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.provisioning.InMemoryUserDetailsManager;\n\n/**\n * Configuration for a Spring Security in-memory {@link AuthenticationManager}. Adds an\n * {@link InMemoryUserDetailsManager} with a default user and generated password. This can\n * be disabled by providing a bean of type {@link AuthenticationManager},\n * {@link AuthenticationProvider} or {@link UserDetailsService}.\n *\n * @author Dave Syer\n * @author Rob Winch\n * @author Madhura Bhave\n */\n@Configuration\n@ConditionalOnBean(ObjectPostProcessor.class)\n@ConditionalOnMissingBean({ AuthenticationManager.class, AuthenticationProvider.class,\n\t\tUserDetailsService.class })\npublic class AuthenticationManagerConfiguration {\n\n\tprivate static final String NOOP_PASSWORD_PREFIX = "{noop}";\n\n\tprivate static final Pattern PASSWORD_ALGORITHM_PATTERN = Pattern\n\t\t\t.compile("^\\\\{.+}.*$");\n\n\tprivate static final Log logger = LogFactory\n\t\t\t.getLog(AuthenticationManagerConfiguration.class);\n\n\t@Bean\n\tpublic InMemoryUserDetailsManager inMemoryUserDetailsManager(\n\t\t\tSecurityProperties properties,\n\t\t\tObjectProvider<PasswordEncoder> passwordEncoder) throws Exception {\n\t\tSecurityProperties.User user = properties.getUser();\n\t\tList<String> roles = user.getRoles();\n\t\treturn new InMemoryUserDetailsManager(\n\t\t\t\tUser.withUsername(user.getName())\n\t\t\t\t\t\t.password(getOrDeducePassword(user,\n\t\t\t\t\t\t\t\tpasswordEncoder.getIfAvailable()))\n\t\t\t\t.roles(roles.toArray(new String[roles.size()])).build());\n\t}\n\n\tpublic String getOrDeducePassword(SecurityProperties.User user,\n\t\t\tPasswordEncoder encoder) {\n\t\tString password = user.getPassword();\n\t\tif (user.isPasswordGenerated()) {\n\t\t\tlogger.info(String.format("%n%nUsing generated security password: %s%n",\n\t\t\t\t\tuser.getPassword()));\n\t\t}\n\t\tif (encoder != null || PASSWORD_ALGORITHM_PATTERN.matcher(password).matches()) {\n\t\t\treturn password;\n\t\t}\n\t\treturn NOOP_PASSWORD_PREFIX + password;\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
