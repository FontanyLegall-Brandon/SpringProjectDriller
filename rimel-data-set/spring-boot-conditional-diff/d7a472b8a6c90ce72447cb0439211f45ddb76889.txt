@@ -16,11 +16,18 @@
 
 package org.springframework.boot.actuate.autoconfigure.health;
 
+import io.micrometer.shaded.reactor.core.publisher.Mono;
+
 import org.springframework.boot.actuate.health.HealthAggregator;
+import org.springframework.boot.actuate.health.HealthContributorRegistry;
+import org.springframework.boot.actuate.health.HealthIndicatorRegistry;
 import org.springframework.boot.actuate.health.HealthStatusHttpMapper;
 import org.springframework.boot.actuate.health.OrderedHealthAggregator;
+import org.springframework.boot.actuate.health.ReactiveHealthContributorRegistry;
+import org.springframework.boot.actuate.health.ReactiveHealthIndicatorRegistry;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
-import org.springframework.boot.context.properties.ConfigurationProperties;
+import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
@@ -32,12 +39,12 @@ import org.springframework.context.annotation.Configuration;
  */
 @Configuration(proxyBeanMethods = false)
 @SuppressWarnings()
+@EnableConfigurationProperties
 class LegacyHealthEndpointCompatibilityConfiguration {
 
 	@Bean
-	@ConfigurationProperties(prefix = )
-	HealthIndicatorProperties healthIndicatorProperties(HealthEndpointProperties healthEndpointProperties) {
-		return new HealthIndicatorProperties(healthEndpointProperties);
+	HealthIndicatorProperties healthIndicatorProperties() {
+		return new HealthIndicatorProperties();
 	}
 
 	@Bean
@@ -60,4 +67,25 @@ class LegacyHealthEndpointCompatibilityConfiguration {
 		return mapper;
 	}
 
+	@Bean
+	@ConditionalOnMissingBean(HealthIndicatorRegistry.class)
+	HealthContributorRegistryHealthIndicatorRegistryAdapter healthIndicatorRegistry(
+			HealthContributorRegistry healthContributorRegistry) {
+		return new HealthContributorRegistryHealthIndicatorRegistryAdapter(healthContributorRegistry);
+	}
+
+	@Configuration(proxyBeanMethods = false)
+	@ConditionalOnClass(Mono.class)
+	static class LegacyReactiveHealthEndpointCompatibilityConfiguration {
+
+		@Bean
+		@ConditionalOnMissingBean(ReactiveHealthIndicatorRegistry.class)
+		ReactiveHealthContributorRegistryReactiveHealthIndicatorRegistryAdapter reactiveHealthIndicatorRegistry(
+				ReactiveHealthContributorRegistry reactiveHealthContributorRegistry) {
+			return new ReactiveHealthContributorRegistryReactiveHealthIndicatorRegistryAdapter(
+					reactiveHealthContributorRegistry);
+		}
+
+	}
+
 }

