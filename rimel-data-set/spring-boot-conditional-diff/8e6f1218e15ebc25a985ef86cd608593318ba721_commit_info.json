{'_old_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnWebApplicationTests.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnWebApplicationTests.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2016 the original author or authors.\n+ * Copyright 2012-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -16,59 +16,106 @@\n \n package org.springframework.boot.autoconfigure.condition;\n \n+import org.junit.After;\n import org.junit.Test;\n \n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\n+import org.springframework.boot.context.embedded.ReactiveWebApplicationContext;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.mock.web.MockServletContext;\n import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.entry;\n \n /**\n  * Tests for {@link ConditionalOnWebApplication}.\n  *\n  * @author Dave Syer\n+ * @author Stephane Nicoll\n  */\n public class ConditionalOnWebApplicationTests {\n \n-\tprivate final AnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext();\n+\tprivate ConfigurableApplicationContext context;\n+\n+\t@After\n+\tpublic void closeContext() {\n+\t\tif (this.context != null) {\n+\t\t\tthis.context.close();\n+\t\t}\n+\t}\n \n \t@Test\n-\tpublic void testWebApplication() {\n-\t\tthis.context.register(BasicConfiguration.class);\n-\t\tthis.context.setServletContext(new MockServletContext());\n-\t\tthis.context.refresh();\n-\t\tassertThat(this.context.containsBean("foo")).isTrue();\n-\t\tassertThat(this.context.getBean("foo")).isEqualTo("foo");\n+\tpublic void testWebApplicationWithServletContext() {\n+\t\tAnnotationConfigWebApplicationContext ctx = new AnnotationConfigWebApplicationContext();\n+\t\tctx.register(AnyWebApplicationConfiguration.class,\n+\t\t\t\tServletWebApplicationConfiguration.class,\n+\t\t\t\tReactiveWebApplicationConfiguration.class);\n+\t\tctx.setServletContext(new MockServletContext());\n+\t\tctx.refresh();\n+\n+\t\tthis.context = ctx;\n+\t\tassertThat(this.context.getBeansOfType(String.class)).containsExactly(\n+\t\t\t\tentry("any", "any"), entry("servlet", "servlet"));\n \t}\n \n \t@Test\n-\tpublic void testNotWebApplication() {\n-\t\tthis.context.register(MissingConfiguration.class);\n-\t\tthis.context.setServletContext(new MockServletContext());\n-\t\tthis.context.refresh();\n-\t\tassertThat(this.context.containsBean("foo")).isFalse();\n+\tpublic void testWebApplicationWithReactiveContext() {\n+\t\tReactiveWebApplicationContext ctx = new ReactiveWebApplicationContext();\n+\t\tctx.register(AnyWebApplicationConfiguration.class,\n+\t\t\t\tServletWebApplicationConfiguration.class,\n+\t\t\t\tReactiveWebApplicationConfiguration.class);\n+\t\tctx.refresh();\n+\n+\t\tthis.context = ctx;\n+\t\tassertThat(this.context.getBeansOfType(String.class)).containsExactly(\n+\t\t\t\tentry("any", "any"), entry("reactive", "reactive"));\n+\t}\n+\n+\t@Test\n+\tpublic void testNonWebApplication() {\n+\t\tAnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n+\t\tctx.register(AnyWebApplicationConfiguration.class,\n+\t\t\t\tServletWebApplicationConfiguration.class,\n+\t\t\t\tReactiveWebApplicationConfiguration.class);\n+\t\tctx.refresh();\n+\n+\t\tthis.context = ctx;\n+\t\tassertThat(this.context.getBeansOfType(String.class)).isEmpty();\n \t}\n \n \t@Configuration\n-\t@ConditionalOnNotWebApplication\n-\tprotected static class MissingConfiguration {\n+\t@ConditionalOnWebApplication\n+\tprotected static class AnyWebApplicationConfiguration {\n \n \t\t@Bean\n-\t\tpublic String bar() {\n-\t\t\treturn "bar";\n+\t\tpublic String any() {\n+\t\t\treturn "any";\n \t\t}\n \n \t}\n \n \t@Configuration\n-\t@ConditionalOnWebApplication\n-\tprotected static class BasicConfiguration {\n+\t@ConditionalOnWebApplication(type = Type.SERVLET)\n+\tprotected static class ServletWebApplicationConfiguration {\n+\n+\t\t@Bean\n+\t\tpublic String servlet() {\n+\t\t\treturn "servlet";\n+\t\t}\n+\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnWebApplication(type = Type.REACTIVE)\n+\tprotected static class ReactiveWebApplicationConfiguration {\n \n \t\t@Bean\n-\t\tpublic String foo() {\n-\t\t\treturn "foo";\n+\t\tpublic String reactive() {\n+\t\t\treturn "reactive";\n \t\t}\n \n \t}\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport org.junit.After;\nimport org.junit.Test;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.context.embedded.ReactiveWebApplicationContext;\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.mock.web.MockServletContext;\nimport org.springframework.web.context.support.AnnotationConfigWebApplicationContext;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.entry;\n\n/**\n * Tests for {@link ConditionalOnWebApplication}.\n *\n * @author Dave Syer\n * @author Stephane Nicoll\n */\npublic class ConditionalOnWebApplicationTests {\n\n\tprivate ConfigurableApplicationContext context;\n\n\t@After\n\tpublic void closeContext() {\n\t\tif (this.context != null) {\n\t\t\tthis.context.close();\n\t\t}\n\t}\n\n\t@Test\n\tpublic void testWebApplicationWithServletContext() {\n\t\tAnnotationConfigWebApplicationContext ctx = new AnnotationConfigWebApplicationContext();\n\t\tctx.register(AnyWebApplicationConfiguration.class,\n\t\t\t\tServletWebApplicationConfiguration.class,\n\t\t\t\tReactiveWebApplicationConfiguration.class);\n\t\tctx.setServletContext(new MockServletContext());\n\t\tctx.refresh();\n\n\t\tthis.context = ctx;\n\t\tassertThat(this.context.getBeansOfType(String.class)).containsExactly(\n\t\t\t\tentry("any", "any"), entry("servlet", "servlet"));\n\t}\n\n\t@Test\n\tpublic void testWebApplicationWithReactiveContext() {\n\t\tReactiveWebApplicationContext ctx = new ReactiveWebApplicationContext();\n\t\tctx.register(AnyWebApplicationConfiguration.class,\n\t\t\t\tServletWebApplicationConfiguration.class,\n\t\t\t\tReactiveWebApplicationConfiguration.class);\n\t\tctx.refresh();\n\n\t\tthis.context = ctx;\n\t\tassertThat(this.context.getBeansOfType(String.class)).containsExactly(\n\t\t\t\tentry("any", "any"), entry("reactive", "reactive"));\n\t}\n\n\t@Test\n\tpublic void testNonWebApplication() {\n\t\tAnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n\t\tctx.register(AnyWebApplicationConfiguration.class,\n\t\t\t\tServletWebApplicationConfiguration.class,\n\t\t\t\tReactiveWebApplicationConfiguration.class);\n\t\tctx.refresh();\n\n\t\tthis.context = ctx;\n\t\tassertThat(this.context.getBeansOfType(String.class)).isEmpty();\n\t}\n\n\t@Configuration\n\t@ConditionalOnWebApplication\n\tprotected static class AnyWebApplicationConfiguration {\n\n\t\t@Bean\n\t\tpublic String any() {\n\t\t\treturn "any";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnWebApplication(type = Type.SERVLET)\n\tprotected static class ServletWebApplicationConfiguration {\n\n\t\t@Bean\n\t\tpublic String servlet() {\n\t\t\treturn "servlet";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnWebApplication(type = Type.REACTIVE)\n\tprotected static class ReactiveWebApplicationConfiguration {\n\n\t\t@Bean\n\t\tpublic String reactive() {\n\t\t\treturn "reactive";\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport org.junit.Test;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.mock.web.MockServletContext;\nimport org.springframework.web.context.support.AnnotationConfigWebApplicationContext;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link ConditionalOnWebApplication}.\n *\n * @author Dave Syer\n */\npublic class ConditionalOnWebApplicationTests {\n\n\tprivate final AnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext();\n\n\t@Test\n\tpublic void testWebApplication() {\n\t\tthis.context.register(BasicConfiguration.class);\n\t\tthis.context.setServletContext(new MockServletContext());\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t\tassertThat(this.context.getBean("foo")).isEqualTo("foo");\n\t}\n\n\t@Test\n\tpublic void testNotWebApplication() {\n\t\tthis.context.register(MissingConfiguration.class);\n\t\tthis.context.setServletContext(new MockServletContext());\n\t\tthis.context.refresh();\n\t\tassertThat(this.context.containsBean("foo")).isFalse();\n\t}\n\n\t@Configuration\n\t@ConditionalOnNotWebApplication\n\tprotected static class MissingConfiguration {\n\n\t\t@Bean\n\t\tpublic String bar() {\n\t\t\treturn "bar";\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnWebApplication\n\tprotected static class BasicConfiguration {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
