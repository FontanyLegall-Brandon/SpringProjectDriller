{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/cache/CacheMeterBinderProvidersConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/cache/CacheMeterBinderProvidersConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -22,7 +22,10 @@ import io.micrometer.core.instrument.binder.MeterBinder;\n import net.sf.ehcache.Ehcache;\n \n import org.springframework.boot.actuate.metrics.cache.CacheMeterBinderProvider;\n-import org.springframework.boot.actuate.metrics.cache.CacheMeterBinderProviders;\n+import org.springframework.boot.actuate.metrics.cache.CaffeineCacheMeterBinderProvider;\n+import org.springframework.boot.actuate.metrics.cache.EhCache2CacheMeterBinderProvider;\n+import org.springframework.boot.actuate.metrics.cache.HazelcastCacheMeterBinderProvider;\n+import org.springframework.boot.actuate.metrics.cache.JCacheCacheMeterBinderProvider;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.cache.caffeine.CaffeineCache;\n import org.springframework.cache.ehcache.EhCacheCache;\n@@ -35,19 +38,19 @@ import org.springframework.context.annotation.Configuration;\n  *\n  * @author Stephane Nicoll\n  * @since 2.0.0\n- * @see CacheMeterBinderProviders\n  */\n @Configuration\n @ConditionalOnClass(MeterBinder.class)\n class CacheMeterBinderProvidersConfiguration {\n \n \t@Configuration\n-\t@ConditionalOnClass({ CaffeineCache.class, com.github.benmanes.caffeine.cache.Cache.class })\n+\t@ConditionalOnClass({ CaffeineCache.class,\n+\t\t\tcom.github.benmanes.caffeine.cache.Cache.class })\n \tstatic class CaffeineCacheMeterBinderProviderConfiguration {\n \n \t\t@Bean\n-\t\tpublic CacheMeterBinderProvider caffeineCacheMeterBinderProvider() {\n-\t\t\treturn new CacheMeterBinderProviders.CaffeineCacheMeterBinderProvider();\n+\t\tpublic CaffeineCacheMeterBinderProvider caffeineCacheMeterBinderProvider() {\n+\t\t\treturn new CaffeineCacheMeterBinderProvider();\n \t\t}\n \n \t}\n@@ -57,8 +60,8 @@ class CacheMeterBinderProvidersConfiguration {\n \tstatic class EhCache2CacheMeterBinderProviderConfiguration {\n \n \t\t@Bean\n-\t\tpublic CacheMeterBinderProvider ehCache2CacheMeterBinderProvider() {\n-\t\t\treturn new CacheMeterBinderProviders.EhCache2CacheMeterBinderProvider();\n+\t\tpublic EhCache2CacheMeterBinderProvider ehCache2CacheMeterBinderProvider() {\n+\t\t\treturn new EhCache2CacheMeterBinderProvider();\n \t\t}\n \n \t}\n@@ -68,8 +71,8 @@ class CacheMeterBinderProvidersConfiguration {\n \tstatic class HazelcastCacheMeterBinderProviderConfiguration {\n \n \t\t@Bean\n-\t\tpublic CacheMeterBinderProvider hazelcastCacheMeterBinderProvider() {\n-\t\t\treturn new CacheMeterBinderProviders.HazelcastCacheMeterBinderProvider();\n+\t\tpublic HazelcastCacheMeterBinderProvider hazelcastCacheMeterBinderProvider() {\n+\t\t\treturn new HazelcastCacheMeterBinderProvider();\n \t\t}\n \n \t}\n@@ -79,8 +82,8 @@ class CacheMeterBinderProvidersConfiguration {\n \tstatic class JCacheCacheMeterBinderProviderConfiguration {\n \n \t\t@Bean\n-\t\tpublic CacheMeterBinderProvider jCacheCacheMeterBinderProvider() {\n-\t\t\treturn new CacheMeterBinderProviders.JCacheCacheMeterBinderProvider();\n+\t\tpublic JCacheCacheMeterBinderProvider jCacheCacheMeterBinderProvider() {\n+\t\t\treturn new JCacheCacheMeterBinderProvider();\n \t\t}\n \n \t}\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics.cache;\n\nimport com.hazelcast.core.Hazelcast;\nimport com.hazelcast.spring.cache.HazelcastCache;\nimport io.micrometer.core.instrument.binder.MeterBinder;\nimport net.sf.ehcache.Ehcache;\n\nimport org.springframework.boot.actuate.metrics.cache.CacheMeterBinderProvider;\nimport org.springframework.boot.actuate.metrics.cache.CaffeineCacheMeterBinderProvider;\nimport org.springframework.boot.actuate.metrics.cache.EhCache2CacheMeterBinderProvider;\nimport org.springframework.boot.actuate.metrics.cache.HazelcastCacheMeterBinderProvider;\nimport org.springframework.boot.actuate.metrics.cache.JCacheCacheMeterBinderProvider;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.cache.caffeine.CaffeineCache;\nimport org.springframework.cache.ehcache.EhCacheCache;\nimport org.springframework.cache.jcache.JCacheCache;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link Configuration Auto-configuration} for {@link CacheMeterBinderProvider} beans.\n *\n * @author Stephane Nicoll\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass(MeterBinder.class)\nclass CacheMeterBinderProvidersConfiguration {\n\n\t@Configuration\n\t@ConditionalOnClass({ CaffeineCache.class,\n\t\t\tcom.github.benmanes.caffeine.cache.Cache.class })\n\tstatic class CaffeineCacheMeterBinderProviderConfiguration {\n\n\t\t@Bean\n\t\tpublic CaffeineCacheMeterBinderProvider caffeineCacheMeterBinderProvider() {\n\t\t\treturn new CaffeineCacheMeterBinderProvider();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ EhCacheCache.class, Ehcache.class })\n\tstatic class EhCache2CacheMeterBinderProviderConfiguration {\n\n\t\t@Bean\n\t\tpublic EhCache2CacheMeterBinderProvider ehCache2CacheMeterBinderProvider() {\n\t\t\treturn new EhCache2CacheMeterBinderProvider();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ HazelcastCache.class, Hazelcast.class })\n\tstatic class HazelcastCacheMeterBinderProviderConfiguration {\n\n\t\t@Bean\n\t\tpublic HazelcastCacheMeterBinderProvider hazelcastCacheMeterBinderProvider() {\n\t\t\treturn new HazelcastCacheMeterBinderProvider();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ JCacheCache.class, javax.cache.CacheManager.class })\n\tstatic class JCacheCacheMeterBinderProviderConfiguration {\n\n\t\t@Bean\n\t\tpublic JCacheCacheMeterBinderProvider jCacheCacheMeterBinderProvider() {\n\t\t\treturn new JCacheCacheMeterBinderProvider();\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics.cache;\n\nimport com.hazelcast.core.Hazelcast;\nimport com.hazelcast.spring.cache.HazelcastCache;\nimport io.micrometer.core.instrument.binder.MeterBinder;\nimport net.sf.ehcache.Ehcache;\n\nimport org.springframework.boot.actuate.metrics.cache.CacheMeterBinderProvider;\nimport org.springframework.boot.actuate.metrics.cache.CacheMeterBinderProviders;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.cache.caffeine.CaffeineCache;\nimport org.springframework.cache.ehcache.EhCacheCache;\nimport org.springframework.cache.jcache.JCacheCache;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link Configuration Auto-configuration} for {@link CacheMeterBinderProvider} beans.\n *\n * @author Stephane Nicoll\n * @since 2.0.0\n * @see CacheMeterBinderProviders\n */\n@Configuration\n@ConditionalOnClass(MeterBinder.class)\nclass CacheMeterBinderProvidersConfiguration {\n\n\t@Configuration\n\t@ConditionalOnClass({ CaffeineCache.class, com.github.benmanes.caffeine.cache.Cache.class })\n\tstatic class CaffeineCacheMeterBinderProviderConfiguration {\n\n\t\t@Bean\n\t\tpublic CacheMeterBinderProvider caffeineCacheMeterBinderProvider() {\n\t\t\treturn new CacheMeterBinderProviders.CaffeineCacheMeterBinderProvider();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ EhCacheCache.class, Ehcache.class })\n\tstatic class EhCache2CacheMeterBinderProviderConfiguration {\n\n\t\t@Bean\n\t\tpublic CacheMeterBinderProvider ehCache2CacheMeterBinderProvider() {\n\t\t\treturn new CacheMeterBinderProviders.EhCache2CacheMeterBinderProvider();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ HazelcastCache.class, Hazelcast.class })\n\tstatic class HazelcastCacheMeterBinderProviderConfiguration {\n\n\t\t@Bean\n\t\tpublic CacheMeterBinderProvider hazelcastCacheMeterBinderProvider() {\n\t\t\treturn new CacheMeterBinderProviders.HazelcastCacheMeterBinderProvider();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ JCacheCache.class, javax.cache.CacheManager.class })\n\tstatic class JCacheCacheMeterBinderProviderConfiguration {\n\n\t\t@Bean\n\t\tpublic CacheMeterBinderProvider jCacheCacheMeterBinderProvider() {\n\t\t\treturn new CacheMeterBinderProviders.JCacheCacheMeterBinderProvider();\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
