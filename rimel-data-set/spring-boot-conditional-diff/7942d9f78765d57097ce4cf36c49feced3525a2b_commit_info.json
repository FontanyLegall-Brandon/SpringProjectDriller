{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/couchbase/CouchbaseDataAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/couchbase/CouchbaseDataAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -40,7 +40,7 @@ import org.springframework.data.couchbase.repository.CouchbaseRepository;\n  * @since 1.4.0\n  */\n @Configuration\n-@ConditionalOnClass({Bucket.class, CouchbaseRepository.class})\n+@ConditionalOnClass({ Bucket.class, CouchbaseRepository.class })\n @AutoConfigureAfter(CouchbaseAutoConfiguration.class)\n @EnableConfigurationProperties(CouchbaseDataProperties.class)\n @Import({ CouchbaseConfigurerAdapterConfiguration.class,\n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.couchbase;\n\nimport javax.validation.Validator;\n\nimport com.couchbase.client.java.Bucket;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.data.couchbase.core.mapping.event.ValidatingCouchbaseEventListener;\nimport org.springframework.data.couchbase.repository.CouchbaseRepository;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s Couchbase support.\n *\n * @author Eddú Meléndez\n * @author Stephane Nicoll\n * @since 1.4.0\n */\n@Configuration\n@ConditionalOnClass({ Bucket.class, CouchbaseRepository.class })\n@AutoConfigureAfter(CouchbaseAutoConfiguration.class)\n@EnableConfigurationProperties(CouchbaseDataProperties.class)\n@Import({ CouchbaseConfigurerAdapterConfiguration.class,\n\t\tSpringBootCouchbaseDataConfiguration.class })\npublic class CouchbaseDataAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnClass(Validator.class)\n\tpublic static class ValidationConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnBean(Validator.class)\n\t\tpublic ValidatingCouchbaseEventListener validationEventListener(\n\t\t\t\tValidator validator) {\n\t\t\treturn new ValidatingCouchbaseEventListener(validator);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.couchbase;\n\nimport javax.validation.Validator;\n\nimport com.couchbase.client.java.Bucket;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.data.couchbase.core.mapping.event.ValidatingCouchbaseEventListener;\nimport org.springframework.data.couchbase.repository.CouchbaseRepository;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s Couchbase support.\n *\n * @author Eddú Meléndez\n * @author Stephane Nicoll\n * @since 1.4.0\n */\n@Configuration\n@ConditionalOnClass({Bucket.class, CouchbaseRepository.class})\n@AutoConfigureAfter(CouchbaseAutoConfiguration.class)\n@EnableConfigurationProperties(CouchbaseDataProperties.class)\n@Import({ CouchbaseConfigurerAdapterConfiguration.class,\n\t\tSpringBootCouchbaseDataConfiguration.class })\npublic class CouchbaseDataAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnClass(Validator.class)\n\tpublic static class ValidationConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnBean(Validator.class)\n\t\tpublic ValidatingCouchbaseEventListener validationEventListener(\n\t\t\t\tValidator validator) {\n\t\t\treturn new ValidatingCouchbaseEventListener(validator);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
