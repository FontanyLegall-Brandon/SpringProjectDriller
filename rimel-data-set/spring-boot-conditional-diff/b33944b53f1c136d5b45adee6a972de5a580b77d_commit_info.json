{'_old_path': None, '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketStrategiesAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2012-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.rsocket;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import io.rsocket.RSocketFactory;\n+\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;\n+import org.springframework.boot.rsocket.messaging.RSocketStrategiesCustomizer;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.ReactiveAdapterRegistry;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.core.io.buffer.NettyDataBufferFactory;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.codec.json.Jackson2JsonDecoder;\n+import org.springframework.http.codec.json.Jackson2JsonEncoder;\n+import org.springframework.messaging.rsocket.RSocketStrategies;\n+\n+/**\n+ * {@link EnableAutoConfiguration} for {@link RSocketStrategies}.\n+ *\n+ * @author Brian Clozel\n+ * @since 2.2.0\n+ */\n+@Configuration(proxyBeanMethods = false)\n+@ConditionalOnClass({ RSocketFactory.class, RSocketStrategies.class,\n+\t\tPooledByteBufAllocator.class })\n+@AutoConfigureAfter(JacksonAutoConfiguration.class)\n+public class RSocketStrategiesAutoConfiguration {\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic RSocketStrategies rSocketStrategies(\n+\t\t\tObjectProvider<RSocketStrategiesCustomizer> customizers) {\n+\t\tRSocketStrategies.Builder builder = RSocketStrategies.builder();\n+\t\tbuilder.reactiveAdapterStrategy(ReactiveAdapterRegistry.getSharedInstance());\n+\t\tcustomizers.stream().forEach((customizer) -> customizer.customize(builder));\n+\t\tbuilder.dataBufferFactory(\n+\t\t\t\tnew NettyDataBufferFactory(PooledByteBufAllocator.DEFAULT));\n+\t\treturn builder.build();\n+\t}\n+\n+\t@Configuration(proxyBeanMethods = false)\n+\t@ConditionalOnClass(ObjectMapper.class)\n+\tprotected static class JacksonStrategyConfiguration {\n+\n+\t\t@Bean\n+\t\t@Order(0)\n+\t\t@ConditionalOnBean(ObjectMapper.class)\n+\t\tpublic RSocketStrategiesCustomizer jacksonStrategyCustomizer(\n+\t\t\t\tObjectMapper objectMapper) {\n+\t\t\treturn (strategy) -> {\n+\t\t\t\tMediaType[] supportedTypes = new MediaType[] { MediaType.APPLICATION_JSON,\n+\t\t\t\t\t\tnew MediaType("application", "*+json") };\n+\t\t\t\tstrategy.decoder(new Jackson2JsonDecoder(objectMapper, supportedTypes));\n+\t\t\t\tstrategy.encoder(new Jackson2JsonEncoder(objectMapper, supportedTypes));\n+\t\t\t};\n+\t\t}\n+\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.rsocket;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport io.netty.buffer.PooledByteBufAllocator;\nimport io.rsocket.RSocketFactory;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;\nimport org.springframework.boot.rsocket.messaging.RSocketStrategiesCustomizer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.ReactiveAdapterRegistry;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.io.buffer.NettyDataBufferFactory;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.codec.json.Jackson2JsonDecoder;\nimport org.springframework.http.codec.json.Jackson2JsonEncoder;\nimport org.springframework.messaging.rsocket.RSocketStrategies;\n\n/**\n * {@link EnableAutoConfiguration} for {@link RSocketStrategies}.\n *\n * @author Brian Clozel\n * @since 2.2.0\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass({ RSocketFactory.class, RSocketStrategies.class,\n\t\tPooledByteBufAllocator.class })\n@AutoConfigureAfter(JacksonAutoConfiguration.class)\npublic class RSocketStrategiesAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic RSocketStrategies rSocketStrategies(\n\t\t\tObjectProvider<RSocketStrategiesCustomizer> customizers) {\n\t\tRSocketStrategies.Builder builder = RSocketStrategies.builder();\n\t\tbuilder.reactiveAdapterStrategy(ReactiveAdapterRegistry.getSharedInstance());\n\t\tcustomizers.stream().forEach((customizer) -> customizer.customize(builder));\n\t\tbuilder.dataBufferFactory(\n\t\t\t\tnew NettyDataBufferFactory(PooledByteBufAllocator.DEFAULT));\n\t\treturn builder.build();\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnClass(ObjectMapper.class)\n\tprotected static class JacksonStrategyConfiguration {\n\n\t\t@Bean\n\t\t@Order(0)\n\t\t@ConditionalOnBean(ObjectMapper.class)\n\t\tpublic RSocketStrategiesCustomizer jacksonStrategyCustomizer(\n\t\t\t\tObjectMapper objectMapper) {\n\t\t\treturn (strategy) -> {\n\t\t\t\tMediaType[] supportedTypes = new MediaType[] { MediaType.APPLICATION_JSON,\n\t\t\t\t\t\tnew MediaType("application", "*+json") };\n\t\t\t\tstrategy.decoder(new Jackson2JsonDecoder(objectMapper, supportedTypes));\n\t\t\t\tstrategy.encoder(new Jackson2JsonEncoder(objectMapper, supportedTypes));\n\t\t\t};\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
