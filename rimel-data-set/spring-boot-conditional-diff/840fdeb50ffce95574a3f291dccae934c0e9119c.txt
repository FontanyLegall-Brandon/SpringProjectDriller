@@ -29,9 +29,9 @@ import org.springframework.beans.factory.BeanFactoryUtils;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
-import org.springframework.boot.autoconfigure.condition.ConditionLogUtils;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.condition.SpringBootCondition;
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Condition;
@@ -39,6 +39,7 @@ import org.springframework.context.annotation.ConditionContext;
 import org.springframework.context.annotation.Conditional;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Import;
+import org.springframework.core.env.Environment;
 import org.springframework.core.io.Resource;
 import org.springframework.core.type.AnnotatedTypeMetadata;
 import org.springframework.jdbc.core.JdbcOperations;
@@ -55,6 +56,7 @@ import org.springframework.util.StringUtils;
  * {@link EnableAutoConfiguration Auto-configuration} for {@link DataSource}.
  * 
  * @author Dave Syer
+ * @author Phillip Webb
  */
 @Configuration
 @ConditionalOnClass(EmbeddedDatabaseType.class )
@@ -85,7 +87,7 @@ public class DataSourceAutoConfiguration {
 	}
 
 	@Configuration
-	@Conditional(DataSourceAutoConfiguration.SomeDatabaseCondition.class)
+	@Conditional(DataSourceAutoConfiguration.DatabaseCondition.class)
 	protected static class JdbcTemplateConfiguration {
 
 		@Autowired(required = false)
@@ -134,166 +136,131 @@ public class DataSourceAutoConfiguration {
 		}
 	}
 
-	static class SomeDatabaseCondition implements Condition {
+	static abstract class NonEmbeddedDatabaseCondition extends SpringBootCondition {
 
-		private Log logger = LogFactory.getLog(getClass());
-
-		private Condition tomcatCondition = new TomcatDatabaseCondition();
-
-		private Condition dbcpCondition = new BasicDatabaseCondition();
-
-		private Condition embeddedCondition = new EmbeddedDatabaseCondition();
+		protected abstract String getDataSourceClassName();
 
 		@Override
-		public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {
-
-			String checking = ConditionLogUtils.getPrefix(this.logger, metadata);
-
-			if (this.tomcatCondition.matches(context, metadata)
-					|| this.dbcpCondition.matches(context, metadata)
-					|| this.embeddedCondition.matches(context, metadata)) {
-				if (this.logger.isDebugEnabled()) {
-					this.logger.debug(checking + 
-							+ );
-				}
-				return true;
+		public Outcome getMatchOutcome(ConditionContext context,
+				AnnotatedTypeMetadata metadata) {
+
+			if (!ClassUtils.isPresent(getDataSourceClassName(), context.getClassLoader())) {
+				return Outcome.noMatch(getDataSourceClassName()
+						+ );
 			}
-			if (BeanFactoryUtils.beanNamesForTypeIncludingAncestors(
-					context.getBeanFactory(), DataSource.class, true, false).length > 0) {
-				if (this.logger.isDebugEnabled()) {
-					this.logger.debug(checking + 
-							+ );
-				}
-				return true;
+
+			String driverClassName = getDriverClassName(context.getEnvironment());
+			if (driverClassName == null) {
+				return Outcome.noMatch();
 			}
-			if (this.logger.isDebugEnabled()) {
-				this.logger.debug(checking + 
-						+ );
+
+			String url = getUrl(context.getEnvironment());
+			if (url == null) {
+				return Outcome.noMatch();
 			}
-			return false;
-		}
 
-	}
+			if (ClassUtils.isPresent(driverClassName, context.getClassLoader())) {
+				return Outcome.match( + driverClassName);
+			}
 
-	static class TomcatDatabaseCondition extends NonEmbeddedDatabaseCondition {
+			return Outcome.match( + driverClassName);
+		}
 
-		@Override
-		protected String getDataSourecClassName() {
-			return ;
+		private String getDriverClassName(Environment environment) {
+			String driverClassName = environment == null ? null : environment
+					.getProperty();
+			if (driverClassName == null) {
+				driverClassName = EmbeddedDatabaseConfiguration
+						.getEmbeddedDatabaseDriverClass(EmbeddedDatabaseConfiguration
+								.getEmbeddedDatabaseType());
+			}
+			return driverClassName;
 		}
 
+		private String getUrl(Environment environment) {
+			String url = (environment == null ? null : environment
+					.getProperty());
+			if (url == null) {
+				url = EmbeddedDatabaseConfiguration
+						.getEmbeddedDatabaseUrl(EmbeddedDatabaseConfiguration
+								.getEmbeddedDatabaseType());
+			}
+			return url;
+		}
 	}
 
 	static class BasicDatabaseCondition extends NonEmbeddedDatabaseCondition {
 
-		private Condition condition = new TomcatDatabaseCondition();
+		private Condition tomcatCondition = new TomcatDatabaseCondition();
 
 		@Override
-		protected String getDataSourecClassName() {
+		protected String getDataSourceClassName() {
 			return ;
 		}
 
 		@Override
-		public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {
-			if (this.condition.matches(context, metadata)) {
-				return false; 
+		public Outcome getMatchOutcome(ConditionContext context,
+				AnnotatedTypeMetadata metadata) {
+			if (matches(context, metadata, this.tomcatCondition)) {
+				return Outcome.noMatch();
 			}
-			return super.matches(context, metadata);
+			return super.getMatchOutcome(context, metadata);
 		}
 	}
 
-	static abstract class NonEmbeddedDatabaseCondition implements Condition {
-
-		private Log logger = LogFactory.getLog(getClass());
-
-		protected abstract String getDataSourecClassName();
+	static class TomcatDatabaseCondition extends NonEmbeddedDatabaseCondition {
 
 		@Override
-		public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {
-
-			String checking = ConditionLogUtils.getPrefix(this.logger, metadata);
+		protected String getDataSourceClassName() {
+			return ;
+		}
 
-			if (!ClassUtils.isPresent(getDataSourecClassName(), null)) {
-				if (this.logger.isDebugEnabled()) {
-					this.logger.debug(checking + );
-				}
-				return false;
-			}
+	}
 
-			String driverClassName = getDriverClassName(context, checking);
-			String url = getUrl(context);
+	static class EmbeddedDatabaseCondition extends SpringBootCondition {
 
-			if (driverClassName != null && url != null
-					&& ClassUtils.isPresent(driverClassName, null)) {
-				if (this.logger.isDebugEnabled()) {
-					this.logger.debug(checking +  + driverClassName
-							+ );
-				}
-				return true;
-			}
+		private SpringBootCondition tomcatCondition = new TomcatDatabaseCondition();
 
-			if (this.logger.isDebugEnabled()) {
-				this.logger.debug(checking +  + driverClassName
-						+ );
-			}
-			return false;
-		}
+		private SpringBootCondition dbcpCondition = new BasicDatabaseCondition();
 
-		private String getDriverClassName(ConditionContext context, String checking) {
-			String driverClassName = context.getEnvironment().getProperty(
-					);
-			if (this.logger.isDebugEnabled()) {
-				this.logger.debug(checking
-						+ 
-						+ EmbeddedDatabaseConfiguration.getEmbeddedDatabaseType() + );
-			}
-			if (driverClassName == null) {
-				driverClassName = EmbeddedDatabaseConfiguration
-						.getEmbeddedDatabaseDriverClass(EmbeddedDatabaseConfiguration
-								.getEmbeddedDatabaseType());
+		@Override
+		public Outcome getMatchOutcome(ConditionContext context,
+				AnnotatedTypeMetadata metadata) {
+			if (anyMatches(context, metadata, this.tomcatCondition, this.dbcpCondition)) {
+				return Outcome.noMatch();
 			}
-			return driverClassName;
-		}
-
-		private String getUrl(ConditionContext context) {
-			String url = context.getEnvironment().getProperty();
-			if (url == null) {
-				url = EmbeddedDatabaseConfiguration
-						.getEmbeddedDatabaseUrl(EmbeddedDatabaseConfiguration
-								.getEmbeddedDatabaseType());
+			EmbeddedDatabaseType type = EmbeddedDatabaseConfiguration
+					.getEmbeddedDatabaseType();
+			if (type == null) {
+				return Outcome.noMatch();
 			}
-			return url;
+			return Outcome.match( + type + );
 		}
 	}
 
-	static class EmbeddedDatabaseCondition implements Condition {
+	static class DatabaseCondition extends SpringBootCondition {
 
-		private Log logger = LogFactory.getLog(getClass());
+		private SpringBootCondition tomcatCondition = new TomcatDatabaseCondition();
 
-		private Condition tomcatCondition = new TomcatDatabaseCondition();
+		private SpringBootCondition dbcpCondition = new BasicDatabaseCondition();
 
-		private Condition dbcpCondition = new BasicDatabaseCondition();
+		private SpringBootCondition embeddedCondition = new EmbeddedDatabaseCondition();
 
 		@Override
-		public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {
+		public Outcome getMatchOutcome(ConditionContext context,
+				AnnotatedTypeMetadata metadata) {
 
-			String checking = ConditionLogUtils.getPrefix(this.logger, metadata);
-
-			if (this.tomcatCondition.matches(context, metadata)
-					|| this.dbcpCondition.matches(context, metadata)) {
-				if (this.logger.isDebugEnabled()) {
-					this.logger.debug(checking + 
-							+ );
-				}
-				return false;
+			if (anyMatches(context, metadata, this.tomcatCondition, this.dbcpCondition,
+					this.embeddedCondition)) {
+				return Outcome.match();
 			}
-			if (this.logger.isDebugEnabled()) {
-				this.logger.debug(checking
-						+ 
-						+ EmbeddedDatabaseConfiguration.getEmbeddedDatabaseType() + );
+
+			if (BeanFactoryUtils.beanNamesForTypeIncludingAncestors(
+					context.getBeanFactory(), DataSource.class, true, false).length > 0) {
+				return Outcome.match();
 			}
-			return EmbeddedDatabaseConfiguration.getEmbeddedDatabaseType() != null;
+
+			return Outcome.noMatch();
 		}
 	}
-
 }

