{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchConfigurerConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2012-2017 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.batch;\n+\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import org.springframework.batch.core.configuration.annotation.BatchConfigurer;\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.transaction.PlatformTransactionManager;\n+\n+/**\n+ *  Provide a {@link BatchConfigurer} according to the current environment.\n+ *\n+ * @author Stephane Nicoll\n+ */\n+@ConditionalOnClass(PlatformTransactionManager.class)\n+@ConditionalOnMissingBean(BatchConfigurer.class)\n+@Configuration\n+class BatchConfigurerConfiguration {\n+\n+\t@ConditionalOnMissingBean(name = "entityManagerFactory")\n+\tstatic class JdbcBatchConfiguration {\n+\n+\t\t@Bean\n+\t\tpublic BasicBatchConfigurer batchConfigurer(BatchProperties properties,\n+\t\t\t\tDataSource dataSource,\n+\t\t\t\tObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers) {\n+\t\t\treturn new BasicBatchConfigurer(properties, dataSource,\n+\t\t\t\t\ttransactionManagerCustomizers.getIfAvailable());\n+\t\t}\n+\n+\t}\n+\n+\t@ConditionalOnClass(name = "javax.persistence.EntityManagerFactory")\n+\t@ConditionalOnBean(name = "entityManagerFactory")\n+\tstatic class JpaBatchConfiguration {\n+\n+\t\t@Bean\n+\t\tpublic JpaBatchConfigurer batchConfigurer(BatchProperties properties,\n+\t\t\t\tDataSource dataSource,\n+\t\t\t\tObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers,\n+\t\t\t\tEntityManagerFactory entityManagerFactory) {\n+\t\t\treturn new JpaBatchConfigurer(properties, dataSource,\n+\t\t\t\t\ttransactionManagerCustomizers.getIfAvailable(), entityManagerFactory);\n+\t\t}\n+\n+\t}\n+\n+}\n+\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.batch;\n\nimport javax.persistence.EntityManagerFactory;\nimport javax.sql.DataSource;\n\nimport org.springframework.batch.core.configuration.annotation.BatchConfigurer;\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.transaction.PlatformTransactionManager;\n\n/**\n *  Provide a {@link BatchConfigurer} according to the current environment.\n *\n * @author Stephane Nicoll\n */\n@ConditionalOnClass(PlatformTransactionManager.class)\n@ConditionalOnMissingBean(BatchConfigurer.class)\n@Configuration\nclass BatchConfigurerConfiguration {\n\n\t@ConditionalOnMissingBean(name = "entityManagerFactory")\n\tstatic class JdbcBatchConfiguration {\n\n\t\t@Bean\n\t\tpublic BasicBatchConfigurer batchConfigurer(BatchProperties properties,\n\t\t\t\tDataSource dataSource,\n\t\t\t\tObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers) {\n\t\t\treturn new BasicBatchConfigurer(properties, dataSource,\n\t\t\t\t\ttransactionManagerCustomizers.getIfAvailable());\n\t\t}\n\n\t}\n\n\t@ConditionalOnClass(name = "javax.persistence.EntityManagerFactory")\n\t@ConditionalOnBean(name = "entityManagerFactory")\n\tstatic class JpaBatchConfiguration {\n\n\t\t@Bean\n\t\tpublic JpaBatchConfigurer batchConfigurer(BatchProperties properties,\n\t\t\t\tDataSource dataSource,\n\t\t\t\tObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers,\n\t\t\t\tEntityManagerFactory entityManagerFactory) {\n\t\t\treturn new JpaBatchConfigurer(properties, dataSource,\n\t\t\t\t\ttransactionManagerCustomizers.getIfAvailable(), entityManagerFactory);\n\t\t}\n\n\t}\n\n}\n\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
