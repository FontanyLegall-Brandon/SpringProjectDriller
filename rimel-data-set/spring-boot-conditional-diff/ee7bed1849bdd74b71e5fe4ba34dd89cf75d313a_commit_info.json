{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoReactiveAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoReactiveAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -21,11 +21,15 @@ import java.util.stream.Collectors;\n import javax.annotation.PreDestroy;\n \n import com.mongodb.MongoClientSettings;\n+import com.mongodb.MongoClientSettings.Builder;\n import com.mongodb.connection.netty.NettyStreamFactoryFactory;\n import com.mongodb.reactivestreams.client.MongoClient;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.nio.NioEventLoopGroup;\n import io.netty.channel.socket.SocketChannel;\n import reactor.core.publisher.Flux;\n \n+import org.springframework.beans.factory.DisposableBean;\n import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n@@ -77,23 +81,51 @@ public class MongoReactiveAutoConfiguration {\n \t}\n \n \t@Configuration\n-\t@ConditionalOnClass(SocketChannel.class)\n+\t@ConditionalOnClass({ SocketChannel.class, NioEventLoopGroup.class })\n \tstatic class NettyDriverConfiguration {\n \n \t\t@Bean\n \t\t@Order(Ordered.HIGHEST_PRECEDENCE)\n \t\tpublic MongoClientSettingsBuilderCustomizer nettyDriverCustomizer(\n \t\t\t\tObjectProvider<MongoClientSettings> settings) {\n-\t\t\treturn (builder) -> {\n-\t\t\t\tif (!isStreamFactoryFactoryDefined(settings.getIfAvailable())) {\n-\t\t\t\t\tbuilder.streamFactoryFactory(\n-\t\t\t\t\t\t\tNettyStreamFactoryFactory.builder().build());\n-\t\t\t\t}\n-\t\t\t};\n+\t\t\treturn new EventLoopGroupMongoClientSettingsBuilderCustomizer(settings);\n \t\t}\n \n-\t\tprivate boolean isStreamFactoryFactoryDefined(MongoClientSettings settings) {\n-\t\t\treturn settings != null && settings.getStreamFactoryFactory() != null;\n+\t\tprivate static final class EventLoopGroupMongoClientSettingsBuilderCustomizer\n+\t\t\t\timplements MongoClientSettingsBuilderCustomizer, DisposableBean {\n+\n+\t\t\tprivate final ObjectProvider<MongoClientSettings> settings;\n+\n+\t\t\tprivate EventLoopGroup eventLoopGroup;\n+\n+\t\t\tprivate EventLoopGroupMongoClientSettingsBuilderCustomizer(\n+\t\t\t\t\tObjectProvider<MongoClientSettings> settings) {\n+\t\t\t\tthis.settings = settings;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void customize(Builder builder) {\n+\t\t\t\tif (!isStreamFactoryFactoryDefined(this.settings.getIfAvailable())) {\n+\t\t\t\t\tNioEventLoopGroup eventLoopGroup = new NioEventLoopGroup();\n+\t\t\t\t\tthis.eventLoopGroup = eventLoopGroup;\n+\t\t\t\t\tbuilder.streamFactoryFactory(NettyStreamFactoryFactory.builder()\n+\t\t\t\t\t\t\t.eventLoopGroup(eventLoopGroup).build());\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void destroy() {\n+\t\t\t\tEventLoopGroup eventLoopGroup = this.eventLoopGroup;\n+\t\t\t\tif (eventLoopGroup != null) {\n+\t\t\t\t\teventLoopGroup.shutdownGracefully().awaitUninterruptibly();\n+\t\t\t\t\tthis.eventLoopGroup = null;\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tprivate boolean isStreamFactoryFactoryDefined(MongoClientSettings settings) {\n+\t\t\t\treturn settings != null && settings.getStreamFactoryFactory() != null;\n+\t\t\t}\n+\n \t\t}\n \n \t}\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.mongo;\n\nimport java.util.stream.Collectors;\n\nimport javax.annotation.PreDestroy;\n\nimport com.mongodb.MongoClientSettings;\nimport com.mongodb.MongoClientSettings.Builder;\nimport com.mongodb.connection.netty.NettyStreamFactoryFactory;\nimport com.mongodb.reactivestreams.client.MongoClient;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport reactor.core.publisher.Flux;\n\nimport org.springframework.beans.factory.DisposableBean;\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.env.Environment;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Reactive Mongo.\n *\n * @author Mark Paluch\n * @author Stephane Nicoll\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass({ MongoClient.class, Flux.class })\n@EnableConfigurationProperties(MongoProperties.class)\npublic class MongoReactiveAutoConfiguration {\n\n\tprivate final MongoClientSettings settings;\n\n\tprivate MongoClient mongo;\n\n\tpublic MongoReactiveAutoConfiguration(ObjectProvider<MongoClientSettings> settings) {\n\t\tthis.settings = settings.getIfAvailable();\n\t}\n\n\t@PreDestroy\n\tpublic void close() {\n\t\tif (this.mongo != null) {\n\t\t\tthis.mongo.close();\n\t\t}\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic MongoClient reactiveStreamsMongoClient(MongoProperties properties,\n\t\t\tEnvironment environment,\n\t\t\tObjectProvider<MongoClientSettingsBuilderCustomizer> builderCustomizers) {\n\t\tReactiveMongoClientFactory factory = new ReactiveMongoClientFactory(properties,\n\t\t\t\tenvironment,\n\t\t\t\tbuilderCustomizers.orderedStream().collect(Collectors.toList()));\n\t\tthis.mongo = factory.createMongoClient(this.settings);\n\t\treturn this.mongo;\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ SocketChannel.class, NioEventLoopGroup.class })\n\tstatic class NettyDriverConfiguration {\n\n\t\t@Bean\n\t\t@Order(Ordered.HIGHEST_PRECEDENCE)\n\t\tpublic MongoClientSettingsBuilderCustomizer nettyDriverCustomizer(\n\t\t\t\tObjectProvider<MongoClientSettings> settings) {\n\t\t\treturn new EventLoopGroupMongoClientSettingsBuilderCustomizer(settings);\n\t\t}\n\n\t\tprivate static final class EventLoopGroupMongoClientSettingsBuilderCustomizer\n\t\t\t\timplements MongoClientSettingsBuilderCustomizer, DisposableBean {\n\n\t\t\tprivate final ObjectProvider<MongoClientSettings> settings;\n\n\t\t\tprivate EventLoopGroup eventLoopGroup;\n\n\t\t\tprivate EventLoopGroupMongoClientSettingsBuilderCustomizer(\n\t\t\t\t\tObjectProvider<MongoClientSettings> settings) {\n\t\t\t\tthis.settings = settings;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void customize(Builder builder) {\n\t\t\t\tif (!isStreamFactoryFactoryDefined(this.settings.getIfAvailable())) {\n\t\t\t\t\tNioEventLoopGroup eventLoopGroup = new NioEventLoopGroup();\n\t\t\t\t\tthis.eventLoopGroup = eventLoopGroup;\n\t\t\t\t\tbuilder.streamFactoryFactory(NettyStreamFactoryFactory.builder()\n\t\t\t\t\t\t\t.eventLoopGroup(eventLoopGroup).build());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void destroy() {\n\t\t\t\tEventLoopGroup eventLoopGroup = this.eventLoopGroup;\n\t\t\t\tif (eventLoopGroup != null) {\n\t\t\t\t\teventLoopGroup.shutdownGracefully().awaitUninterruptibly();\n\t\t\t\t\tthis.eventLoopGroup = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprivate boolean isStreamFactoryFactoryDefined(MongoClientSettings settings) {\n\t\t\t\treturn settings != null && settings.getStreamFactoryFactory() != null;\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.mongo;\n\nimport java.util.stream.Collectors;\n\nimport javax.annotation.PreDestroy;\n\nimport com.mongodb.MongoClientSettings;\nimport com.mongodb.connection.netty.NettyStreamFactoryFactory;\nimport com.mongodb.reactivestreams.client.MongoClient;\nimport io.netty.channel.socket.SocketChannel;\nimport reactor.core.publisher.Flux;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.env.Environment;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Reactive Mongo.\n *\n * @author Mark Paluch\n * @author Stephane Nicoll\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass({ MongoClient.class, Flux.class })\n@EnableConfigurationProperties(MongoProperties.class)\npublic class MongoReactiveAutoConfiguration {\n\n\tprivate final MongoClientSettings settings;\n\n\tprivate MongoClient mongo;\n\n\tpublic MongoReactiveAutoConfiguration(ObjectProvider<MongoClientSettings> settings) {\n\t\tthis.settings = settings.getIfAvailable();\n\t}\n\n\t@PreDestroy\n\tpublic void close() {\n\t\tif (this.mongo != null) {\n\t\t\tthis.mongo.close();\n\t\t}\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic MongoClient reactiveStreamsMongoClient(MongoProperties properties,\n\t\t\tEnvironment environment,\n\t\t\tObjectProvider<MongoClientSettingsBuilderCustomizer> builderCustomizers) {\n\t\tReactiveMongoClientFactory factory = new ReactiveMongoClientFactory(properties,\n\t\t\t\tenvironment,\n\t\t\t\tbuilderCustomizers.orderedStream().collect(Collectors.toList()));\n\t\tthis.mongo = factory.createMongoClient(this.settings);\n\t\treturn this.mongo;\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(SocketChannel.class)\n\tstatic class NettyDriverConfiguration {\n\n\t\t@Bean\n\t\t@Order(Ordered.HIGHEST_PRECEDENCE)\n\t\tpublic MongoClientSettingsBuilderCustomizer nettyDriverCustomizer(\n\t\t\t\tObjectProvider<MongoClientSettings> settings) {\n\t\t\treturn (builder) -> {\n\t\t\t\tif (!isStreamFactoryFactoryDefined(settings.getIfAvailable())) {\n\t\t\t\t\tbuilder.streamFactoryFactory(\n\t\t\t\t\t\t\tNettyStreamFactoryFactory.builder().build());\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tprivate boolean isStreamFactoryFactoryDefined(MongoClientSettings settings) {\n\t\t\treturn settings != null && settings.getStreamFactoryFactory() != null;\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
