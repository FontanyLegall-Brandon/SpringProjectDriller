{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/EmbeddedServletContainerAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/EmbeddedServletContainerAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,6 +16,8 @@\n \n package org.springframework.boot.autoconfigure.web;\n \n+import java.util.Arrays;\n+\n import javax.servlet.Servlet;\n \n import org.apache.catalina.startup.Tomcat;\n@@ -39,11 +41,15 @@ import org.springframework.boot.context.embedded.ServletContextInitializer;\n import org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainerFactory;\n import org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;\n import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Condition;\n+import org.springframework.context.annotation.ConditionContext;\n+import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Import;\n import org.springframework.context.annotation.ImportBeanDefinitionRegistrar;\n import org.springframework.core.Ordered;\n import org.springframework.core.annotation.Order;\n+import org.springframework.core.type.AnnotatedTypeMetadata;\n import org.springframework.core.type.AnnotationMetadata;\n import org.springframework.web.servlet.DispatcherServlet;\n \n@@ -58,6 +64,11 @@ import org.springframework.web.servlet.DispatcherServlet;\n @Import(EmbeddedServletContainerCustomizerBeanPostProcessorRegistrar.class)\n public class EmbeddedServletContainerAutoConfiguration {\n \n+\t/*\n+\t * The bean name for a DispatcherServlet that will be mapped to the root URL "/"\n+\t */\n+\tpublic static final String DEFAULT_DISPATCHER_SERVLET_BEAN_NAME = "dispatcherServlet";\n+\n \t/**\n \t * Add the {@link DispatcherServlet} unless the user has defined their own\n \t * {@link ServletContextInitializer}s.\n@@ -65,12 +76,12 @@ public class EmbeddedServletContainerAutoConfiguration {\n \t@ConditionalOnClass(DispatcherServlet.class)\n \tpublic static class DispatcherServletConfiguration {\n \n-\t\t@Bean\n-\t\t@ConditionalOnMissingBean(value = { ServletContextInitializer.class,\n-\t\t\t\tServlet.class }, search = SearchStrategy.CURRENT)\n+\t\t@Bean(name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)\n+\t\t@Conditional(DefaultServletCondition.class)\n \t\tpublic DispatcherServlet dispatcherServlet() {\n \t\t\treturn new DispatcherServlet();\n \t\t}\n+\n \t}\n \n \t/**\n@@ -134,4 +145,24 @@ public class EmbeddedServletContainerAutoConfiguration {\n \t\t\t}\n \t\t}\n \t}\n+\n+\tprivate static class DefaultServletCondition implements Condition {\n+\n+\t\t@Override\n+\t\tpublic boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n+\t\t\tConfigurableListableBeanFactory beanFactory = context.getBeanFactory();\n+\t\t\tString[] beans = beanFactory.getBeanNamesForType(DispatcherServlet.class,\n+\t\t\t\t\tfalse, false);\n+\t\t\tif (beans.length == 0) {\n+\t\t\t\t// No dispatcher servlet so no need to ask further questions\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\tif (Arrays.asList(beans).contains(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)) {\n+\t\t\t\t// An existing bean with the default name\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\treturn true;\n+\t\t}\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web;\n\nimport java.util.Arrays;\n\nimport javax.servlet.Servlet;\n\nimport org.apache.catalina.startup.Tomcat;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.util.Loader;\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.beans.factory.config.BeanDefinition;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistry;\nimport org.springframework.beans.factory.support.RootBeanDefinition;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration.EmbeddedServletContainerCustomizerBeanPostProcessorRegistrar;\nimport org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizerBeanPostProcessor;\nimport org.springframework.boot.context.embedded.EmbeddedServletContainerFactory;\nimport org.springframework.boot.context.embedded.ServletContextInitializer;\nimport org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainerFactory;\nimport org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Condition;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.ImportBeanDefinitionRegistrar;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.core.type.AnnotationMetadata;\nimport org.springframework.web.servlet.DispatcherServlet;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for an embedded servlet containers.\n * \n * @author Phillip Webb\n * @author Dave Syer\n */\n@Order(Ordered.HIGHEST_PRECEDENCE)\n@Configuration\n@Import(EmbeddedServletContainerCustomizerBeanPostProcessorRegistrar.class)\npublic class EmbeddedServletContainerAutoConfiguration {\n\n\t/*\n\t * The bean name for a DispatcherServlet that will be mapped to the root URL "/"\n\t */\n\tpublic static final String DEFAULT_DISPATCHER_SERVLET_BEAN_NAME = "dispatcherServlet";\n\n\t/**\n\t * Add the {@link DispatcherServlet} unless the user has defined their own\n\t * {@link ServletContextInitializer}s.\n\t */\n\t@ConditionalOnClass(DispatcherServlet.class)\n\tpublic static class DispatcherServletConfiguration {\n\n\t\t@Bean(name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)\n\t\t@Conditional(DefaultServletCondition.class)\n\t\tpublic DispatcherServlet dispatcherServlet() {\n\t\t\treturn new DispatcherServlet();\n\t\t}\n\n\t}\n\n\t/**\n\t * Nested configuration for if Tomcat is being used.\n\t */\n\t@Configuration\n\t@ConditionalOnClass({ Servlet.class, Tomcat.class })\n\t@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)\n\tpublic static class EmbeddedTomcat {\n\n\t\t@Bean\n\t\tpublic TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() {\n\t\t\treturn new TomcatEmbeddedServletContainerFactory();\n\t\t}\n\n\t}\n\n\t/**\n\t * Nested configuration if Jetty is being used.\n\t */\n\t@Configuration\n\t@ConditionalOnClass({ Servlet.class, Server.class, Loader.class })\n\t@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)\n\tpublic static class EmbeddedJetty {\n\n\t\t@Bean\n\t\tpublic JettyEmbeddedServletContainerFactory jettyEmbeddedServletContainerFactory() {\n\t\t\treturn new JettyEmbeddedServletContainerFactory();\n\t\t}\n\n\t}\n\n\t/**\n\t * Registers a {@link EmbeddedServletContainerCustomizerBeanPostProcessor}. Registered\n\t * via {@link ImportBeanDefinitionRegistrar} for early registration.\n\t */\n\tpublic static class EmbeddedServletContainerCustomizerBeanPostProcessorRegistrar\n\t\t\timplements ImportBeanDefinitionRegistrar, BeanFactoryAware {\n\n\t\tprivate ConfigurableListableBeanFactory beanFactory;\n\n\t\t@Override\n\t\tpublic void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n\t\t\tif (beanFactory instanceof ConfigurableListableBeanFactory) {\n\t\t\t\tthis.beanFactory = (ConfigurableListableBeanFactory) beanFactory;\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void registerBeanDefinitions(AnnotationMetadata importingClassMetadata,\n\t\t\t\tBeanDefinitionRegistry registry) {\n\t\t\tif (this.beanFactory != null\n\t\t\t\t\t&& this.beanFactory.getBeansOfType(\n\t\t\t\t\t\t\tEmbeddedServletContainerCustomizerBeanPostProcessor.class)\n\t\t\t\t\t\t\t.size() == 0) {\n\t\t\t\tBeanDefinition beanDefinition = new RootBeanDefinition(\n\t\t\t\t\t\tEmbeddedServletContainerCustomizerBeanPostProcessor.class);\n\t\t\t\tregistry.registerBeanDefinition(\n\t\t\t\t\t\t"embeddedServletContainerCustomizerBeanPostProcessor",\n\t\t\t\t\t\tbeanDefinition);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static class DefaultServletCondition implements Condition {\n\n\t\t@Override\n\t\tpublic boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n\t\t\tConfigurableListableBeanFactory beanFactory = context.getBeanFactory();\n\t\t\tString[] beans = beanFactory.getBeanNamesForType(DispatcherServlet.class,\n\t\t\t\t\tfalse, false);\n\t\t\tif (beans.length == 0) {\n\t\t\t\t// No dispatcher servlet so no need to ask further questions\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (Arrays.asList(beans).contains(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)) {\n\t\t\t\t// An existing bean with the default name\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web;\n\nimport javax.servlet.Servlet;\n\nimport org.apache.catalina.startup.Tomcat;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.util.Loader;\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.beans.factory.config.BeanDefinition;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistry;\nimport org.springframework.beans.factory.support.RootBeanDefinition;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration.EmbeddedServletContainerCustomizerBeanPostProcessorRegistrar;\nimport org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizerBeanPostProcessor;\nimport org.springframework.boot.context.embedded.EmbeddedServletContainerFactory;\nimport org.springframework.boot.context.embedded.ServletContextInitializer;\nimport org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainerFactory;\nimport org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.ImportBeanDefinitionRegistrar;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.type.AnnotationMetadata;\nimport org.springframework.web.servlet.DispatcherServlet;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for an embedded servlet containers.\n * \n * @author Phillip Webb\n * @author Dave Syer\n */\n@Order(Ordered.HIGHEST_PRECEDENCE)\n@Configuration\n@Import(EmbeddedServletContainerCustomizerBeanPostProcessorRegistrar.class)\npublic class EmbeddedServletContainerAutoConfiguration {\n\n\t/**\n\t * Add the {@link DispatcherServlet} unless the user has defined their own\n\t * {@link ServletContextInitializer}s.\n\t */\n\t@ConditionalOnClass(DispatcherServlet.class)\n\tpublic static class DispatcherServletConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(value = { ServletContextInitializer.class,\n\t\t\t\tServlet.class }, search = SearchStrategy.CURRENT)\n\t\tpublic DispatcherServlet dispatcherServlet() {\n\t\t\treturn new DispatcherServlet();\n\t\t}\n\t}\n\n\t/**\n\t * Nested configuration for if Tomcat is being used.\n\t */\n\t@Configuration\n\t@ConditionalOnClass({ Servlet.class, Tomcat.class })\n\t@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)\n\tpublic static class EmbeddedTomcat {\n\n\t\t@Bean\n\t\tpublic TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() {\n\t\t\treturn new TomcatEmbeddedServletContainerFactory();\n\t\t}\n\n\t}\n\n\t/**\n\t * Nested configuration if Jetty is being used.\n\t */\n\t@Configuration\n\t@ConditionalOnClass({ Servlet.class, Server.class, Loader.class })\n\t@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)\n\tpublic static class EmbeddedJetty {\n\n\t\t@Bean\n\t\tpublic JettyEmbeddedServletContainerFactory jettyEmbeddedServletContainerFactory() {\n\t\t\treturn new JettyEmbeddedServletContainerFactory();\n\t\t}\n\n\t}\n\n\t/**\n\t * Registers a {@link EmbeddedServletContainerCustomizerBeanPostProcessor}. Registered\n\t * via {@link ImportBeanDefinitionRegistrar} for early registration.\n\t */\n\tpublic static class EmbeddedServletContainerCustomizerBeanPostProcessorRegistrar\n\t\t\timplements ImportBeanDefinitionRegistrar, BeanFactoryAware {\n\n\t\tprivate ConfigurableListableBeanFactory beanFactory;\n\n\t\t@Override\n\t\tpublic void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n\t\t\tif (beanFactory instanceof ConfigurableListableBeanFactory) {\n\t\t\t\tthis.beanFactory = (ConfigurableListableBeanFactory) beanFactory;\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void registerBeanDefinitions(AnnotationMetadata importingClassMetadata,\n\t\t\t\tBeanDefinitionRegistry registry) {\n\t\t\tif (this.beanFactory != null\n\t\t\t\t\t&& this.beanFactory.getBeansOfType(\n\t\t\t\t\t\t\tEmbeddedServletContainerCustomizerBeanPostProcessor.class)\n\t\t\t\t\t\t\t.size() == 0) {\n\t\t\t\tBeanDefinition beanDefinition = new RootBeanDefinition(\n\t\t\t\t\t\tEmbeddedServletContainerCustomizerBeanPostProcessor.class);\n\t\t\t\tregistry.registerBeanDefinition(\n\t\t\t\t\t\t"embeddedServletContainerCustomizerBeanPostProcessor",\n\t\t\t\t\t\tbeanDefinition);\n\t\t\t}\n\t\t}\n\t}\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
