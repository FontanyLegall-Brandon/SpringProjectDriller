{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,8 +16,10 @@\n \n package org.springframework.boot.autoconfigure.mongo;\n \n-import com.mongodb.MongoClient;\n-import com.mongodb.MongoClientOptions;\n+import java.util.stream.Collectors;\n+\n+import com.mongodb.MongoClientSettings;\n+import com.mongodb.client.MongoClient;\n \n import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n@@ -45,10 +47,13 @@ import org.springframework.core.env.Environment;\n public class MongoAutoConfiguration {\n \n \t@Bean\n-\t@ConditionalOnMissingBean(type = { "com.mongodb.MongoClient", "com.mongodb.client.MongoClient" })\n-\tpublic MongoClient mongo(MongoProperties properties, ObjectProvider<MongoClientOptions> options,\n-\t\t\tEnvironment environment) {\n-\t\treturn new MongoClientFactory(properties, environment).createMongoClient(options.getIfAvailable());\n+\t@ConditionalOnMissingBean(type = { "com.mongodb.client.MongoClient" })\n+\tpublic MongoClient mongo(MongoProperties properties, Environment environment,\n+\t\t\tObjectProvider<MongoClientSettingsBuilderCustomizer> builderCustomizers,\n+\t\t\tObjectProvider<MongoClientSettings> settings) {\n+\t\treturn new MongoClientFactory(properties, environment,\n+\t\t\t\tbuilderCustomizers.orderedStream().collect(Collectors.toList()))\n+\t\t\t\t\t\t.createMongoClient(settings.getIfAvailable());\n \t}\n \n }\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.mongo;\n\nimport java.util.stream.Collectors;\n\nimport com.mongodb.MongoClientSettings;\nimport com.mongodb.client.MongoClient;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Mongo.\n *\n * @author Dave Syer\n * @author Oliver Gierke\n * @author Phillip Webb\n * @author Mark Paluch\n * @author Stephane Nicoll\n * @since 1.0.0\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass(MongoClient.class)\n@EnableConfigurationProperties(MongoProperties.class)\n@ConditionalOnMissingBean(type = "org.springframework.data.mongodb.MongoDbFactory")\npublic class MongoAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean(type = { "com.mongodb.client.MongoClient" })\n\tpublic MongoClient mongo(MongoProperties properties, Environment environment,\n\t\t\tObjectProvider<MongoClientSettingsBuilderCustomizer> builderCustomizers,\n\t\t\tObjectProvider<MongoClientSettings> settings) {\n\t\treturn new MongoClientFactory(properties, environment,\n\t\t\t\tbuilderCustomizers.orderedStream().collect(Collectors.toList()))\n\t\t\t\t\t\t.createMongoClient(settings.getIfAvailable());\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.mongo;\n\nimport com.mongodb.MongoClient;\nimport com.mongodb.MongoClientOptions;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Mongo.\n *\n * @author Dave Syer\n * @author Oliver Gierke\n * @author Phillip Webb\n * @author Mark Paluch\n * @author Stephane Nicoll\n * @since 1.0.0\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass(MongoClient.class)\n@EnableConfigurationProperties(MongoProperties.class)\n@ConditionalOnMissingBean(type = "org.springframework.data.mongodb.MongoDbFactory")\npublic class MongoAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean(type = { "com.mongodb.MongoClient", "com.mongodb.client.MongoClient" })\n\tpublic MongoClient mongo(MongoProperties properties, ObjectProvider<MongoClientOptions> options,\n\t\t\tEnvironment environment) {\n\t\treturn new MongoClientFactory(properties, environment).createMongoClient(options.getIfAvailable());\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
