{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CaffeineCacheConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CaffeineCacheConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,6 +16,8 @@\n \n package org.springframework.boot.autoconfigure.cache;\n \n+import java.util.List;\n+\n import com.github.benmanes.caffeine.cache.CacheLoader;\n import com.github.benmanes.caffeine.cache.Caffeine;\n import com.github.benmanes.caffeine.cache.CaffeineSpec;\n@@ -23,10 +25,12 @@ import com.github.benmanes.caffeine.cache.CaffeineSpec;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.cache.CacheManager;\n import org.springframework.cache.caffeine.CaffeineCacheManager;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.util.CollectionUtils;\n import org.springframework.util.StringUtils;\n \n /**\n@@ -37,13 +41,16 @@ import org.springframework.util.StringUtils;\n  */\n @Configuration\n @ConditionalOnClass({ Caffeine.class, CaffeineCacheManager.class })\n-@ConditionalOnMissingBean(org.springframework.cache.CacheManager.class)\n+@ConditionalOnMissingBean(CacheManager.class)\n @Conditional({ CacheCondition.class })\n class CaffeineCacheConfiguration {\n \n \t@Autowired\n \tprivate CacheProperties cacheProperties;\n \n+\t@Autowired\n+\tprivate CacheManagerCustomizers customizers;\n+\n \t@Autowired(required = false)\n \tprivate Caffeine<Object, Object> caffeine;\n \n@@ -54,27 +61,34 @@ class CaffeineCacheConfiguration {\n \tprivate CacheLoader<Object, Object> cacheLoader;\n \n \t@Bean\n-\t@ConditionalOnMissingBean\n \tpublic CaffeineCacheManager caffeineCacheManager() {\n-\t\tCaffeineCacheManager caffeineCacheManager = new CaffeineCacheManager();\n-\t\tsetCacheBuilder(caffeineCacheManager);\n+\t\tCaffeineCacheManager cacheManager = createCacheManager();\n+\t\tList<String> cacheNames = this.cacheProperties.getCacheNames();\n+\t\tif (!CollectionUtils.isEmpty(cacheNames)) {\n+\t\t\tcacheManager.setCacheNames(cacheNames);\n+\t\t}\n+\t\treturn this.customizers.customize(cacheManager);\n+\t}\n+\n+\tprivate CaffeineCacheManager createCacheManager() {\n+\t\tCaffeineCacheManager cacheManager = new CaffeineCacheManager();\n+\t\tsetCacheBuilder(cacheManager);\n \t\tif (this.cacheLoader != null) {\n-\t\t\tcaffeineCacheManager.setCacheLoader(this.cacheLoader);\n+\t\t\tcacheManager.setCacheLoader(this.cacheLoader);\n \t\t}\n-\t\tcaffeineCacheManager.setCacheNames(this.cacheProperties.getCacheNames());\n-\t\treturn caffeineCacheManager;\n+\t\treturn cacheManager;\n \t}\n \n-\tprivate void setCacheBuilder(CaffeineCacheManager caffeineCacheManager) {\n+\tprivate void setCacheBuilder(CaffeineCacheManager cacheManager) {\n \t\tString specification = this.cacheProperties.getCaffeine().getSpec();\n \t\tif (StringUtils.hasText(specification)) {\n-\t\t\tcaffeineCacheManager.setCaffeine(Caffeine.from(specification));\n+\t\t\tcacheManager.setCacheSpecification(specification);\n \t\t}\n \t\telse if (this.caffeineSpec != null) {\n-\t\t\tcaffeineCacheManager.setCaffeine(Caffeine.from(this.caffeineSpec));\n+\t\t\tcacheManager.setCaffeineSpec(this.caffeineSpec);\n \t\t}\n \t\telse if (this.caffeine != null) {\n-\t\t\tcaffeineCacheManager.setCaffeine(this.caffeine);\n+\t\t\tcacheManager.setCaffeine(this.caffeine);\n \t\t}\n \t}\n \n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.cache;\n\nimport java.util.List;\n\nimport com.github.benmanes.caffeine.cache.CacheLoader;\nimport com.github.benmanes.caffeine.cache.Caffeine;\nimport com.github.benmanes.caffeine.cache.CaffeineSpec;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.cache.CacheManager;\nimport org.springframework.cache.caffeine.CaffeineCacheManager;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.util.StringUtils;\n\n/**\n * Caffeine cache configuration.\n *\n * @author Eddú Meléndez\n * @since 1.4.0\n */\n@Configuration\n@ConditionalOnClass({ Caffeine.class, CaffeineCacheManager.class })\n@ConditionalOnMissingBean(CacheManager.class)\n@Conditional({ CacheCondition.class })\nclass CaffeineCacheConfiguration {\n\n\t@Autowired\n\tprivate CacheProperties cacheProperties;\n\n\t@Autowired\n\tprivate CacheManagerCustomizers customizers;\n\n\t@Autowired(required = false)\n\tprivate Caffeine<Object, Object> caffeine;\n\n\t@Autowired(required = false)\n\tprivate CaffeineSpec caffeineSpec;\n\n\t@Autowired(required = false)\n\tprivate CacheLoader<Object, Object> cacheLoader;\n\n\t@Bean\n\tpublic CaffeineCacheManager caffeineCacheManager() {\n\t\tCaffeineCacheManager cacheManager = createCacheManager();\n\t\tList<String> cacheNames = this.cacheProperties.getCacheNames();\n\t\tif (!CollectionUtils.isEmpty(cacheNames)) {\n\t\t\tcacheManager.setCacheNames(cacheNames);\n\t\t}\n\t\treturn this.customizers.customize(cacheManager);\n\t}\n\n\tprivate CaffeineCacheManager createCacheManager() {\n\t\tCaffeineCacheManager cacheManager = new CaffeineCacheManager();\n\t\tsetCacheBuilder(cacheManager);\n\t\tif (this.cacheLoader != null) {\n\t\t\tcacheManager.setCacheLoader(this.cacheLoader);\n\t\t}\n\t\treturn cacheManager;\n\t}\n\n\tprivate void setCacheBuilder(CaffeineCacheManager cacheManager) {\n\t\tString specification = this.cacheProperties.getCaffeine().getSpec();\n\t\tif (StringUtils.hasText(specification)) {\n\t\t\tcacheManager.setCacheSpecification(specification);\n\t\t}\n\t\telse if (this.caffeineSpec != null) {\n\t\t\tcacheManager.setCaffeineSpec(this.caffeineSpec);\n\t\t}\n\t\telse if (this.caffeine != null) {\n\t\t\tcacheManager.setCaffeine(this.caffeine);\n\t\t}\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.cache;\n\nimport com.github.benmanes.caffeine.cache.CacheLoader;\nimport com.github.benmanes.caffeine.cache.Caffeine;\nimport com.github.benmanes.caffeine.cache.CaffeineSpec;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.cache.caffeine.CaffeineCacheManager;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.util.StringUtils;\n\n/**\n * Caffeine cache configuration.\n *\n * @author Eddú Meléndez\n * @since 1.4.0\n */\n@Configuration\n@ConditionalOnClass({ Caffeine.class, CaffeineCacheManager.class })\n@ConditionalOnMissingBean(org.springframework.cache.CacheManager.class)\n@Conditional({ CacheCondition.class })\nclass CaffeineCacheConfiguration {\n\n\t@Autowired\n\tprivate CacheProperties cacheProperties;\n\n\t@Autowired(required = false)\n\tprivate Caffeine<Object, Object> caffeine;\n\n\t@Autowired(required = false)\n\tprivate CaffeineSpec caffeineSpec;\n\n\t@Autowired(required = false)\n\tprivate CacheLoader<Object, Object> cacheLoader;\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic CaffeineCacheManager caffeineCacheManager() {\n\t\tCaffeineCacheManager caffeineCacheManager = new CaffeineCacheManager();\n\t\tsetCacheBuilder(caffeineCacheManager);\n\t\tif (this.cacheLoader != null) {\n\t\t\tcaffeineCacheManager.setCacheLoader(this.cacheLoader);\n\t\t}\n\t\tcaffeineCacheManager.setCacheNames(this.cacheProperties.getCacheNames());\n\t\treturn caffeineCacheManager;\n\t}\n\n\tprivate void setCacheBuilder(CaffeineCacheManager caffeineCacheManager) {\n\t\tString specification = this.cacheProperties.getCaffeine().getSpec();\n\t\tif (StringUtils.hasText(specification)) {\n\t\t\tcaffeineCacheManager.setCaffeine(Caffeine.from(specification));\n\t\t}\n\t\telse if (this.caffeineSpec != null) {\n\t\t\tcaffeineCacheManager.setCaffeine(Caffeine.from(this.caffeineSpec));\n\t\t}\n\t\telse if (this.caffeine != null) {\n\t\t\tcaffeineCacheManager.setCaffeine(this.caffeine);\n\t\t}\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
