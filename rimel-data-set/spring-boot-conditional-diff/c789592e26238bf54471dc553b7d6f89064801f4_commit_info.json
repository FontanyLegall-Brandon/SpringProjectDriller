{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/jest/JestAutoConfiguration.java'), '_new_path': None, 'change_type': <ModificationType.DELETE: 4>, 'diff': '@@ -1,82 +0,0 @@\n-/*\n- * Copyright 2012-2019 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the "License");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an "AS IS" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.boot.autoconfigure.elasticsearch.jest;\n-\n-import java.time.Duration;\n-\n-import com.google.gson.Gson;\n-import io.searchbox.client.JestClient;\n-import io.searchbox.client.JestClientFactory;\n-import io.searchbox.client.config.HttpClientConfig;\n-import org.apache.http.HttpHost;\n-\n-import org.springframework.beans.factory.ObjectProvider;\n-import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n-import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties.Proxy;\n-import org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration;\n-import org.springframework.boot.context.properties.EnableConfigurationProperties;\n-import org.springframework.boot.context.properties.PropertyMapper;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.util.Assert;\n-\n-/**\n- * {@link EnableAutoConfiguration Auto-configuration} for Jest.\n- *\n- * @author Stephane Nicoll\n- * @since 1.4.0\n- * @deprecated since 2.2.0 in favor of other auto-configured Elasticsearch clients\n- */\n-@Configuration(proxyBeanMethods = false)\n-@ConditionalOnClass(JestClient.class)\n-@EnableConfigurationProperties(JestProperties.class)\n-@AutoConfigureAfter(GsonAutoConfiguration.class)\n-@Deprecated\n-public class JestAutoConfiguration {\n-\n-\t@Bean(destroyMethod = "shutdownClient")\n-\t@ConditionalOnMissingBean\n-\tpublic JestClient jestClient(JestProperties properties, ObjectProvider<Gson> gson,\n-\t\t\tObjectProvider<HttpClientConfigBuilderCustomizer> builderCustomizers) {\n-\t\tJestClientFactory factory = new JestClientFactory();\n-\t\tfactory.setHttpClientConfig(createHttpClientConfig(properties, gson, builderCustomizers));\n-\t\treturn factory.getObject();\n-\t}\n-\n-\tprotected HttpClientConfig createHttpClientConfig(JestProperties properties, ObjectProvider<Gson> gson,\n-\t\t\tObjectProvider<HttpClientConfigBuilderCustomizer> builderCustomizers) {\n-\t\tHttpClientConfig.Builder builder = new HttpClientConfig.Builder(properties.getUris());\n-\t\tPropertyMapper map = PropertyMapper.get();\n-\t\tmap.from(properties::getUsername).whenHasText()\n-\t\t\t\t.to((username) -> builder.defaultCredentials(username, properties.getPassword()));\n-\t\tProxy proxy = properties.getProxy();\n-\t\tmap.from(proxy::getHost).whenHasText().to((host) -> {\n-\t\t\tAssert.notNull(proxy.getPort(), "Proxy port must not be null");\n-\t\t\tbuilder.proxy(new HttpHost(host, proxy.getPort()));\n-\t\t});\n-\t\tmap.from(gson::getIfUnique).whenNonNull().to(builder::gson);\n-\t\tmap.from(properties::isMultiThreaded).to(builder::multiThreaded);\n-\t\tmap.from(properties::getConnectionTimeout).whenNonNull().asInt(Duration::toMillis).to(builder::connTimeout);\n-\t\tmap.from(properties::getReadTimeout).whenNonNull().asInt(Duration::toMillis).to(builder::readTimeout);\n-\t\tbuilderCustomizers.orderedStream().forEach((customizer) -> customizer.customize(builder));\n-\t\treturn builder.build();\n-\t}\n-\n-}\n', 'source_code': None, 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.elasticsearch.jest;\n\nimport java.time.Duration;\n\nimport com.google.gson.Gson;\nimport io.searchbox.client.JestClient;\nimport io.searchbox.client.JestClientFactory;\nimport io.searchbox.client.config.HttpClientConfig;\nimport org.apache.http.HttpHost;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties.Proxy;\nimport org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.context.properties.PropertyMapper;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.util.Assert;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Jest.\n *\n * @author Stephane Nicoll\n * @since 1.4.0\n * @deprecated since 2.2.0 in favor of other auto-configured Elasticsearch clients\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass(JestClient.class)\n@EnableConfigurationProperties(JestProperties.class)\n@AutoConfigureAfter(GsonAutoConfiguration.class)\n@Deprecated\npublic class JestAutoConfiguration {\n\n\t@Bean(destroyMethod = "shutdownClient")\n\t@ConditionalOnMissingBean\n\tpublic JestClient jestClient(JestProperties properties, ObjectProvider<Gson> gson,\n\t\t\tObjectProvider<HttpClientConfigBuilderCustomizer> builderCustomizers) {\n\t\tJestClientFactory factory = new JestClientFactory();\n\t\tfactory.setHttpClientConfig(createHttpClientConfig(properties, gson, builderCustomizers));\n\t\treturn factory.getObject();\n\t}\n\n\tprotected HttpClientConfig createHttpClientConfig(JestProperties properties, ObjectProvider<Gson> gson,\n\t\t\tObjectProvider<HttpClientConfigBuilderCustomizer> builderCustomizers) {\n\t\tHttpClientConfig.Builder builder = new HttpClientConfig.Builder(properties.getUris());\n\t\tPropertyMapper map = PropertyMapper.get();\n\t\tmap.from(properties::getUsername).whenHasText()\n\t\t\t\t.to((username) -> builder.defaultCredentials(username, properties.getPassword()));\n\t\tProxy proxy = properties.getProxy();\n\t\tmap.from(proxy::getHost).whenHasText().to((host) -> {\n\t\t\tAssert.notNull(proxy.getPort(), "Proxy port must not be null");\n\t\t\tbuilder.proxy(new HttpHost(host, proxy.getPort()));\n\t\t});\n\t\tmap.from(gson::getIfUnique).whenNonNull().to(builder::gson);\n\t\tmap.from(properties::isMultiThreaded).to(builder::multiThreaded);\n\t\tmap.from(properties::getConnectionTimeout).whenNonNull().asInt(Duration::toMillis).to(builder::connTimeout);\n\t\tmap.from(properties::getReadTimeout).whenNonNull().asInt(Duration::toMillis).to(builder::readTimeout);\n\t\tbuilderCustomizers.orderedStream().forEach((customizer) -> customizer.customize(builder));\n\t\treturn builder.build();\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
