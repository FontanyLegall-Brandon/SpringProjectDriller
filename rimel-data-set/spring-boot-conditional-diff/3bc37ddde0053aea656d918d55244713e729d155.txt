@@ -16,122 +16,45 @@
 
 package org.springframework.boot.autoconfigure.websocket;
 
-import java.util.HashMap;
-import java.util.Map;
-
-import javax.servlet.ServletContainerInitializer;
+import javax.servlet.Servlet;
 
 import org.apache.catalina.Context;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-import org.springframework.beans.BeanUtils;
-import org.springframework.beans.BeansException;
-import org.springframework.beans.factory.BeanFactory;
-import org.springframework.beans.factory.BeanFactoryAware;
-import org.springframework.beans.factory.ListableBeanFactory;
-import org.springframework.beans.factory.config.BeanPostProcessor;
+import org.apache.catalina.deploy.ApplicationListener;
+import org.apache.catalina.startup.Tomcat;
 import org.springframework.boot.autoconfigure.AutoConfigureBefore;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration;
 import org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
-import org.springframework.util.ClassUtils;
 import org.springframework.web.socket.WebSocketHandler;
-import org.springframework.web.socket.config.annotation.EnableWebSocket;
-import org.springframework.web.socket.config.annotation.WebSocketConfigurer;
-import org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;
-import org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsService;
 
 
 @Configuration
-@ConditionalOnClass({ WebSocketHandler.class })
+@ConditionalOnClass(name = , value = {
+		Servlet.class, Tomcat.class, WebSocketHandler.class })
 @AutoConfigureBefore(EmbeddedServletContainerAutoConfiguration.class)
-@ConditionalOnMissingBean(WebSocketConfigurer.class)
-@EnableWebSocket
 public class WebSocketAutoConfiguration {
 
-	private static Log logger = LogFactory.getLog(WebSocketAutoConfiguration.class);
-
-	
-	
-	@Configuration
-	protected static class WebSocketRegistrationConfiguration implements
-			BeanPostProcessor, BeanFactoryAware, WebSocketConfigurer {
-
-		private final Map<String, WebSocketHandler> prefixes = new HashMap<String, WebSocketHandler>();
-
-		private ListableBeanFactory beanFactory;
+	private static final ApplicationListener WS_APPLICATION_LISTENER = new ApplicationListener(
+			, false);
 
-		@Override
-		public void setBeanFactory(BeanFactory beanFactory) throws BeansException {
-			this.beanFactory = (ListableBeanFactory) beanFactory;
-		}
-
-		@Override
-		public Object postProcessBeforeInitialization(Object bean, String beanName)
-				throws BeansException {
-			return bean;
-		}
-
-		@Override
-		public Object postProcessAfterInitialization(Object bean, String beanName)
-				throws BeansException {
-			if (bean instanceof WebSocketHandler && beanName.startsWith()) {
-				this.prefixes.put(beanName, (WebSocketHandler) bean);
+	@Bean
+	public TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() {
+		TomcatEmbeddedServletContainerFactory factory = new TomcatEmbeddedServletContainerFactory() {
+			@Override
+			protected void postProcessContext(Context context) {
+				context.addApplicationListener(WS_APPLICATION_LISTENER);
 			}
-			return bean;
-		}
-
-		private WebSocketHandler getHandler(String prefix) {
-			return this.prefixes.get(prefix);
-		}
-
-		private String[] getPrefixes() {
-			return this.prefixes.keySet().toArray(new String[this.prefixes.size()]);
-		}
-
-		@Override
-		public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {
-			
-			this.beanFactory.getBeansOfType(WebSocketHandler.class);
-			for (String prefix : getPrefixes()) {
-				logger.info( + prefix);
-				registry.addHandler(getHandler(prefix), prefix).withSockJS();
-			}
-		}
-
-	}
-
-	@Configuration
-	@ConditionalOnClass(name = )
-	protected static class TomcatWebSocketConfiguration {
-
-		@Bean
-		public TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() {
-			TomcatEmbeddedServletContainerFactory factory = new TomcatEmbeddedServletContainerFactory() {
-				@Override
-				protected void postProcessContext(Context context) {
-					context.addServletContainerInitializer(
-							(ServletContainerInitializer) BeanUtils
-									.instantiate(ClassUtils.resolveClassName(
-											,
-											null)), null);
-				}
-			};
-			return factory;
-		}
-
+		};
+		return factory;
 	}
 
 }

