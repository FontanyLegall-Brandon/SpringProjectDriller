{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/DispatcherServletAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/DispatcherServletAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -17,7 +17,6 @@\n package org.springframework.boot.autoconfigure.web.servlet;\n \n import java.util.Arrays;\n-import java.util.Collections;\n import java.util.List;\n \n import javax.servlet.MultipartConfigElement;\n@@ -34,7 +33,6 @@ import org.springframework.boot.autoconfigure.condition.ConditionOutcome;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\n import org.springframework.boot.autoconfigure.condition.SpringBootCondition;\n@@ -139,11 +137,10 @@ public class DispatcherServletAutoConfiguration {\n \n \t\t@Bean(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)\n \t\t@ConditionalOnBean(value = DispatcherServlet.class, name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)\n-\t\tpublic ServletRegistrationBean<DispatcherServlet> dispatcherServletRegistration(\n+\t\tpublic DispatcherServletRegistrationBean dispatcherServletRegistration(\n \t\t\t\tDispatcherServlet dispatcherServlet) {\n-\t\t\tServletRegistrationBean<DispatcherServlet> registration = new ServletRegistrationBean<>(\n-\t\t\t\t\tdispatcherServlet,\n-\t\t\t\t\tthis.serverProperties.getServlet().getServletMapping());\n+\t\t\tDispatcherServletRegistrationBean registration = new DispatcherServletRegistrationBean(\n+\t\t\t\t\tdispatcherServlet, this.serverProperties.getServlet().getPath());\n \t\t\tregistration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);\n \t\t\tregistration.setLoadOnStartup(\n \t\t\t\t\tthis.webMvcProperties.getServlet().getLoadOnStartup());\n@@ -153,15 +150,6 @@ public class DispatcherServletAutoConfiguration {\n \t\t\treturn registration;\n \t\t}\n \n-\t\t@Bean\n-\t\t@ConditionalOnMissingBean(DispatcherServletPathProvider.class)\n-\t\t@ConditionalOnSingleCandidate(DispatcherServlet.class)\n-\t\tpublic DispatcherServletPathProvider dispatcherServletPathProvider() {\n-\t\t\treturn () -> Collections.singleton(\n-\t\t\t\t\tDispatcherServletRegistrationConfiguration.this.serverProperties\n-\t\t\t\t\t\t\t.getServlet().getPath());\n-\t\t}\n-\n \t}\n \n \t@Order(Ordered.LOWEST_PRECEDENCE - 10)\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web.servlet;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport javax.servlet.MultipartConfigElement;\nimport javax.servlet.ServletRegistration;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureOrder;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionMessage;\nimport org.springframework.boot.autoconfigure.condition.ConditionMessage.Style;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.autoconfigure.web.ServerProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.web.servlet.ServletRegistrationBean;\nimport org.springframework.boot.web.servlet.support.SpringBootServletInitializer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.web.multipart.MultipartResolver;\nimport org.springframework.web.servlet.DispatcherServlet;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for the Spring\n * {@link DispatcherServlet}. Should work for a standalone application where an embedded\n * web server is already present and also for a deployable application using\n * {@link SpringBootServletInitializer}.\n *\n * @author Phillip Webb\n * @author Dave Syer\n * @author Stephane Nicoll\n * @author Brian Clozel\n */\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)\n@Configuration\n@ConditionalOnWebApplication(type = Type.SERVLET)\n@ConditionalOnClass(DispatcherServlet.class)\n@AutoConfigureAfter(ServletWebServerFactoryAutoConfiguration.class)\n@EnableConfigurationProperties(ServerProperties.class)\npublic class DispatcherServletAutoConfiguration {\n\n\t/*\n\t * The bean name for a DispatcherServlet that will be mapped to the root URL "/"\n\t */\n\tpublic static final String DEFAULT_DISPATCHER_SERVLET_BEAN_NAME = "dispatcherServlet";\n\n\t/*\n\t * The bean name for a ServletRegistrationBean for the DispatcherServlet "/"\n\t */\n\tpublic static final String DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME = "dispatcherServletRegistration";\n\n\t@Configuration\n\t@Conditional(DefaultDispatcherServletCondition.class)\n\t@ConditionalOnClass(ServletRegistration.class)\n\t@EnableConfigurationProperties(WebMvcProperties.class)\n\tprotected static class DispatcherServletConfiguration {\n\n\t\tprivate final WebMvcProperties webMvcProperties;\n\n\t\tpublic DispatcherServletConfiguration(WebMvcProperties webMvcProperties) {\n\t\t\tthis.webMvcProperties = webMvcProperties;\n\t\t}\n\n\t\t@Bean(name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)\n\t\tpublic DispatcherServlet dispatcherServlet() {\n\t\t\tDispatcherServlet dispatcherServlet = new DispatcherServlet();\n\t\t\tdispatcherServlet.setDispatchOptionsRequest(\n\t\t\t\t\tthis.webMvcProperties.isDispatchOptionsRequest());\n\t\t\tdispatcherServlet.setDispatchTraceRequest(\n\t\t\t\t\tthis.webMvcProperties.isDispatchTraceRequest());\n\t\t\tdispatcherServlet.setThrowExceptionIfNoHandlerFound(\n\t\t\t\t\tthis.webMvcProperties.isThrowExceptionIfNoHandlerFound());\n\t\t\treturn dispatcherServlet;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnBean(MultipartResolver.class)\n\t\t@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)\n\t\tpublic MultipartResolver multipartResolver(MultipartResolver resolver) {\n\t\t\t// Detect if the user has created a MultipartResolver but named it incorrectly\n\t\t\treturn resolver;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@Conditional(DispatcherServletRegistrationCondition.class)\n\t@ConditionalOnClass(ServletRegistration.class)\n\t@EnableConfigurationProperties(WebMvcProperties.class)\n\t@Import(DispatcherServletConfiguration.class)\n\tprotected static class DispatcherServletRegistrationConfiguration {\n\n\t\tprivate final ServerProperties serverProperties;\n\n\t\tprivate final WebMvcProperties webMvcProperties;\n\n\t\tprivate final MultipartConfigElement multipartConfig;\n\n\t\tpublic DispatcherServletRegistrationConfiguration(\n\t\t\t\tServerProperties serverProperties, WebMvcProperties webMvcProperties,\n\t\t\t\tObjectProvider<MultipartConfigElement> multipartConfigProvider) {\n\t\t\tthis.serverProperties = serverProperties;\n\t\t\tthis.webMvcProperties = webMvcProperties;\n\t\t\tthis.multipartConfig = multipartConfigProvider.getIfAvailable();\n\t\t}\n\n\t\t@Bean(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)\n\t\t@ConditionalOnBean(value = DispatcherServlet.class, name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)\n\t\tpublic DispatcherServletRegistrationBean dispatcherServletRegistration(\n\t\t\t\tDispatcherServlet dispatcherServlet) {\n\t\t\tDispatcherServletRegistrationBean registration = new DispatcherServletRegistrationBean(\n\t\t\t\t\tdispatcherServlet, this.serverProperties.getServlet().getPath());\n\t\t\tregistration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);\n\t\t\tregistration.setLoadOnStartup(\n\t\t\t\t\tthis.webMvcProperties.getServlet().getLoadOnStartup());\n\t\t\tif (this.multipartConfig != null) {\n\t\t\t\tregistration.setMultipartConfig(this.multipartConfig);\n\t\t\t}\n\t\t\treturn registration;\n\t\t}\n\n\t}\n\n\t@Order(Ordered.LOWEST_PRECEDENCE - 10)\n\tprivate static class DefaultDispatcherServletCondition extends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tConditionMessage.Builder message = ConditionMessage\n\t\t\t\t\t.forCondition("Default DispatcherServlet");\n\t\t\tConfigurableListableBeanFactory beanFactory = context.getBeanFactory();\n\t\t\tList<String> dispatchServletBeans = Arrays.asList(beanFactory\n\t\t\t\t\t.getBeanNamesForType(DispatcherServlet.class, false, false));\n\t\t\tif (dispatchServletBeans.contains(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)) {\n\t\t\t\treturn ConditionOutcome.noMatch(message.found("dispatcher servlet bean")\n\t\t\t\t\t\t.items(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME));\n\t\t\t}\n\t\t\tif (beanFactory.containsBean(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)) {\n\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t.noMatch(message.found("non dispatcher servlet bean")\n\t\t\t\t\t\t\t\t.items(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME));\n\t\t\t}\n\t\t\tif (dispatchServletBeans.isEmpty()) {\n\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t.match(message.didNotFind("dispatcher servlet beans").atAll());\n\t\t\t}\n\t\t\treturn ConditionOutcome.match(message\n\t\t\t\t\t.found("dispatcher servlet bean", "dispatcher servlet beans")\n\t\t\t\t\t.items(Style.QUOTE, dispatchServletBeans)\n\t\t\t\t\t.append("and none is named " + DEFAULT_DISPATCHER_SERVLET_BEAN_NAME));\n\t\t}\n\n\t}\n\n\t@Order(Ordered.LOWEST_PRECEDENCE - 10)\n\tprivate static class DispatcherServletRegistrationCondition\n\t\t\textends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tConfigurableListableBeanFactory beanFactory = context.getBeanFactory();\n\t\t\tConditionOutcome outcome = checkDefaultDispatcherName(beanFactory);\n\t\t\tif (!outcome.isMatch()) {\n\t\t\t\treturn outcome;\n\t\t\t}\n\t\t\treturn checkServletRegistration(beanFactory);\n\t\t}\n\n\t\tprivate ConditionOutcome checkDefaultDispatcherName(\n\t\t\t\tConfigurableListableBeanFactory beanFactory) {\n\t\t\tList<String> servlets = Arrays.asList(beanFactory\n\t\t\t\t\t.getBeanNamesForType(DispatcherServlet.class, false, false));\n\t\t\tboolean containsDispatcherBean = beanFactory\n\t\t\t\t\t.containsBean(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);\n\t\t\tif (containsDispatcherBean\n\t\t\t\t\t&& !servlets.contains(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)) {\n\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t.noMatch(startMessage().found("non dispatcher servlet")\n\t\t\t\t\t\t\t\t.items(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME));\n\t\t\t}\n\t\t\treturn ConditionOutcome.match();\n\t\t}\n\n\t\tprivate ConditionOutcome checkServletRegistration(\n\t\t\t\tConfigurableListableBeanFactory beanFactory) {\n\t\t\tConditionMessage.Builder message = startMessage();\n\t\t\tList<String> registrations = Arrays.asList(beanFactory\n\t\t\t\t\t.getBeanNamesForType(ServletRegistrationBean.class, false, false));\n\t\t\tboolean containsDispatcherRegistrationBean = beanFactory\n\t\t\t\t\t.containsBean(DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME);\n\t\t\tif (registrations.isEmpty()) {\n\t\t\t\tif (containsDispatcherRegistrationBean) {\n\t\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t\t.noMatch(message.found("non servlet registration bean").items(\n\t\t\t\t\t\t\t\t\tDEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME));\n\t\t\t\t}\n\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t.match(message.didNotFind("servlet registration bean").atAll());\n\t\t\t}\n\t\t\tif (registrations\n\t\t\t\t\t.contains(DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)) {\n\t\t\t\treturn ConditionOutcome.noMatch(message.found("servlet registration bean")\n\t\t\t\t\t\t.items(DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME));\n\t\t\t}\n\t\t\tif (containsDispatcherRegistrationBean) {\n\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t.noMatch(message.found("non servlet registration bean").items(\n\t\t\t\t\t\t\t\tDEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME));\n\t\t\t}\n\t\t\treturn ConditionOutcome.match(message.found("servlet registration beans")\n\t\t\t\t\t.items(Style.QUOTE, registrations).append("and none is named "\n\t\t\t\t\t\t\t+ DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME));\n\t\t}\n\n\t\tprivate ConditionMessage.Builder startMessage() {\n\t\t\treturn ConditionMessage.forCondition("DispatcherServlet Registration");\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.web.servlet;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\nimport javax.servlet.MultipartConfigElement;\nimport javax.servlet.ServletRegistration;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureOrder;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionMessage;\nimport org.springframework.boot.autoconfigure.condition.ConditionMessage.Style;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.autoconfigure.web.ServerProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.web.servlet.ServletRegistrationBean;\nimport org.springframework.boot.web.servlet.support.SpringBootServletInitializer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.web.multipart.MultipartResolver;\nimport org.springframework.web.servlet.DispatcherServlet;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for the Spring\n * {@link DispatcherServlet}. Should work for a standalone application where an embedded\n * web server is already present and also for a deployable application using\n * {@link SpringBootServletInitializer}.\n *\n * @author Phillip Webb\n * @author Dave Syer\n * @author Stephane Nicoll\n * @author Brian Clozel\n */\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)\n@Configuration\n@ConditionalOnWebApplication(type = Type.SERVLET)\n@ConditionalOnClass(DispatcherServlet.class)\n@AutoConfigureAfter(ServletWebServerFactoryAutoConfiguration.class)\n@EnableConfigurationProperties(ServerProperties.class)\npublic class DispatcherServletAutoConfiguration {\n\n\t/*\n\t * The bean name for a DispatcherServlet that will be mapped to the root URL "/"\n\t */\n\tpublic static final String DEFAULT_DISPATCHER_SERVLET_BEAN_NAME = "dispatcherServlet";\n\n\t/*\n\t * The bean name for a ServletRegistrationBean for the DispatcherServlet "/"\n\t */\n\tpublic static final String DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME = "dispatcherServletRegistration";\n\n\t@Configuration\n\t@Conditional(DefaultDispatcherServletCondition.class)\n\t@ConditionalOnClass(ServletRegistration.class)\n\t@EnableConfigurationProperties(WebMvcProperties.class)\n\tprotected static class DispatcherServletConfiguration {\n\n\t\tprivate final WebMvcProperties webMvcProperties;\n\n\t\tpublic DispatcherServletConfiguration(WebMvcProperties webMvcProperties) {\n\t\t\tthis.webMvcProperties = webMvcProperties;\n\t\t}\n\n\t\t@Bean(name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)\n\t\tpublic DispatcherServlet dispatcherServlet() {\n\t\t\tDispatcherServlet dispatcherServlet = new DispatcherServlet();\n\t\t\tdispatcherServlet.setDispatchOptionsRequest(\n\t\t\t\t\tthis.webMvcProperties.isDispatchOptionsRequest());\n\t\t\tdispatcherServlet.setDispatchTraceRequest(\n\t\t\t\t\tthis.webMvcProperties.isDispatchTraceRequest());\n\t\t\tdispatcherServlet.setThrowExceptionIfNoHandlerFound(\n\t\t\t\t\tthis.webMvcProperties.isThrowExceptionIfNoHandlerFound());\n\t\t\treturn dispatcherServlet;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnBean(MultipartResolver.class)\n\t\t@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)\n\t\tpublic MultipartResolver multipartResolver(MultipartResolver resolver) {\n\t\t\t// Detect if the user has created a MultipartResolver but named it incorrectly\n\t\t\treturn resolver;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@Conditional(DispatcherServletRegistrationCondition.class)\n\t@ConditionalOnClass(ServletRegistration.class)\n\t@EnableConfigurationProperties(WebMvcProperties.class)\n\t@Import(DispatcherServletConfiguration.class)\n\tprotected static class DispatcherServletRegistrationConfiguration {\n\n\t\tprivate final ServerProperties serverProperties;\n\n\t\tprivate final WebMvcProperties webMvcProperties;\n\n\t\tprivate final MultipartConfigElement multipartConfig;\n\n\t\tpublic DispatcherServletRegistrationConfiguration(\n\t\t\t\tServerProperties serverProperties, WebMvcProperties webMvcProperties,\n\t\t\t\tObjectProvider<MultipartConfigElement> multipartConfigProvider) {\n\t\t\tthis.serverProperties = serverProperties;\n\t\t\tthis.webMvcProperties = webMvcProperties;\n\t\t\tthis.multipartConfig = multipartConfigProvider.getIfAvailable();\n\t\t}\n\n\t\t@Bean(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)\n\t\t@ConditionalOnBean(value = DispatcherServlet.class, name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)\n\t\tpublic ServletRegistrationBean<DispatcherServlet> dispatcherServletRegistration(\n\t\t\t\tDispatcherServlet dispatcherServlet) {\n\t\t\tServletRegistrationBean<DispatcherServlet> registration = new ServletRegistrationBean<>(\n\t\t\t\t\tdispatcherServlet,\n\t\t\t\t\tthis.serverProperties.getServlet().getServletMapping());\n\t\t\tregistration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);\n\t\t\tregistration.setLoadOnStartup(\n\t\t\t\t\tthis.webMvcProperties.getServlet().getLoadOnStartup());\n\t\t\tif (this.multipartConfig != null) {\n\t\t\t\tregistration.setMultipartConfig(this.multipartConfig);\n\t\t\t}\n\t\t\treturn registration;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(DispatcherServletPathProvider.class)\n\t\t@ConditionalOnSingleCandidate(DispatcherServlet.class)\n\t\tpublic DispatcherServletPathProvider dispatcherServletPathProvider() {\n\t\t\treturn () -> Collections.singleton(\n\t\t\t\t\tDispatcherServletRegistrationConfiguration.this.serverProperties\n\t\t\t\t\t\t\t.getServlet().getPath());\n\t\t}\n\n\t}\n\n\t@Order(Ordered.LOWEST_PRECEDENCE - 10)\n\tprivate static class DefaultDispatcherServletCondition extends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tConditionMessage.Builder message = ConditionMessage\n\t\t\t\t\t.forCondition("Default DispatcherServlet");\n\t\t\tConfigurableListableBeanFactory beanFactory = context.getBeanFactory();\n\t\t\tList<String> dispatchServletBeans = Arrays.asList(beanFactory\n\t\t\t\t\t.getBeanNamesForType(DispatcherServlet.class, false, false));\n\t\t\tif (dispatchServletBeans.contains(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)) {\n\t\t\t\treturn ConditionOutcome.noMatch(message.found("dispatcher servlet bean")\n\t\t\t\t\t\t.items(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME));\n\t\t\t}\n\t\t\tif (beanFactory.containsBean(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)) {\n\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t.noMatch(message.found("non dispatcher servlet bean")\n\t\t\t\t\t\t\t\t.items(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME));\n\t\t\t}\n\t\t\tif (dispatchServletBeans.isEmpty()) {\n\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t.match(message.didNotFind("dispatcher servlet beans").atAll());\n\t\t\t}\n\t\t\treturn ConditionOutcome.match(message\n\t\t\t\t\t.found("dispatcher servlet bean", "dispatcher servlet beans")\n\t\t\t\t\t.items(Style.QUOTE, dispatchServletBeans)\n\t\t\t\t\t.append("and none is named " + DEFAULT_DISPATCHER_SERVLET_BEAN_NAME));\n\t\t}\n\n\t}\n\n\t@Order(Ordered.LOWEST_PRECEDENCE - 10)\n\tprivate static class DispatcherServletRegistrationCondition\n\t\t\textends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tConfigurableListableBeanFactory beanFactory = context.getBeanFactory();\n\t\t\tConditionOutcome outcome = checkDefaultDispatcherName(beanFactory);\n\t\t\tif (!outcome.isMatch()) {\n\t\t\t\treturn outcome;\n\t\t\t}\n\t\t\treturn checkServletRegistration(beanFactory);\n\t\t}\n\n\t\tprivate ConditionOutcome checkDefaultDispatcherName(\n\t\t\t\tConfigurableListableBeanFactory beanFactory) {\n\t\t\tList<String> servlets = Arrays.asList(beanFactory\n\t\t\t\t\t.getBeanNamesForType(DispatcherServlet.class, false, false));\n\t\t\tboolean containsDispatcherBean = beanFactory\n\t\t\t\t\t.containsBean(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);\n\t\t\tif (containsDispatcherBean\n\t\t\t\t\t&& !servlets.contains(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)) {\n\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t.noMatch(startMessage().found("non dispatcher servlet")\n\t\t\t\t\t\t\t\t.items(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME));\n\t\t\t}\n\t\t\treturn ConditionOutcome.match();\n\t\t}\n\n\t\tprivate ConditionOutcome checkServletRegistration(\n\t\t\t\tConfigurableListableBeanFactory beanFactory) {\n\t\t\tConditionMessage.Builder message = startMessage();\n\t\t\tList<String> registrations = Arrays.asList(beanFactory\n\t\t\t\t\t.getBeanNamesForType(ServletRegistrationBean.class, false, false));\n\t\t\tboolean containsDispatcherRegistrationBean = beanFactory\n\t\t\t\t\t.containsBean(DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME);\n\t\t\tif (registrations.isEmpty()) {\n\t\t\t\tif (containsDispatcherRegistrationBean) {\n\t\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t\t.noMatch(message.found("non servlet registration bean").items(\n\t\t\t\t\t\t\t\t\tDEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME));\n\t\t\t\t}\n\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t.match(message.didNotFind("servlet registration bean").atAll());\n\t\t\t}\n\t\t\tif (registrations\n\t\t\t\t\t.contains(DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)) {\n\t\t\t\treturn ConditionOutcome.noMatch(message.found("servlet registration bean")\n\t\t\t\t\t\t.items(DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME));\n\t\t\t}\n\t\t\tif (containsDispatcherRegistrationBean) {\n\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t.noMatch(message.found("non servlet registration bean").items(\n\t\t\t\t\t\t\t\tDEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME));\n\t\t\t}\n\t\t\treturn ConditionOutcome.match(message.found("servlet registration beans")\n\t\t\t\t\t.items(Style.QUOTE, registrations).append("and none is named "\n\t\t\t\t\t\t\t+ DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME));\n\t\t}\n\n\t\tprivate ConditionMessage.Builder startMessage() {\n\t\t\treturn ConditionMessage.forCondition("DispatcherServlet Registration");\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
