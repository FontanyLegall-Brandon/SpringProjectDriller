{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQXAConnectionFactoryConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQXAConnectionFactoryConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -36,6 +36,7 @@ import org.springframework.context.annotation.Primary;\n  * Configuration for ActiveMQ XA {@link ConnectionFactory}.\n  *\n  * @author Phillip Webb\n+ * @author Aurélien Leboulanger\n  * @since 1.2.0\n  */\n @Configuration\n@@ -54,7 +55,7 @@ class ActiveMQXAConnectionFactoryConfiguration {\n \t}\n \n \t@Bean\n-\t@ConditionalOnProperty(prefix = "spring.activemq", name = "pooled", havingValue = "false", matchIfMissing = true)\n+\t@ConditionalOnProperty(prefix = "spring.activemq.pool", name = "enabled", havingValue = "false", matchIfMissing = true)\n \tpublic ActiveMQConnectionFactory nonXaJmsConnectionFactory(\n \t\t\tActiveMQProperties properties) {\n \t\treturn new ActiveMQConnectionFactoryFactory(properties)\n@@ -62,17 +63,25 @@ class ActiveMQXAConnectionFactoryConfiguration {\n \t}\n \n \t@ConditionalOnClass(PooledConnectionFactory.class)\n-\t@ConditionalOnProperty(prefix = "spring.activemq", name = "pooled", havingValue = "true", matchIfMissing = false)\n+\t@ConditionalOnProperty(prefix = "spring.activemq.pool", name = "enabled", havingValue = "true", matchIfMissing = false)\n \tstatic class PooledConnectionFactoryConfiguration {\n \n \t\t@Bean(destroyMethod = "stop")\n \t\tpublic PooledConnectionFactory pooledNonXaJmsConnectionFactory(\n \t\t\t\tActiveMQProperties properties) {\n-\t\t\treturn new PooledConnectionFactory(\n+\t\t\tPooledConnectionFactory pooledConnectionFactory = new PooledConnectionFactory(\n \t\t\t\t\tnew ActiveMQConnectionFactoryFactory(properties)\n \t\t\t\t\t\t\t.createConnectionFactory(ActiveMQConnectionFactory.class));\n-\t\t}\n \n+\t\t\tActiveMQProperties.Pool pool = properties.getPool();\n+\t\t\tpooledConnectionFactory.setExpiryTimeout(pool.getExpiryTimeMillis());\n+\t\t\tpooledConnectionFactory.setMaxConnections(pool.getMaxConnections());\n+\t\t\tpooledConnectionFactory.setIdleTimeout(pool.getIdleTimeMillis());\n+\t\t\tpooledConnectionFactory.setMaximumActiveSessionPerConnection(pool.getMaxSessionsPerConnection());\n+\t\t\tpooledConnectionFactory.setTimeBetweenExpirationCheckMillis(pool.getTimeBetweenEvictionRunsMillis());\n+\n+\t\t\treturn pooledConnectionFactory;\n+\t\t}\n \t}\n \n }\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jms.activemq;\n\nimport javax.jms.ConnectionFactory;\nimport javax.transaction.TransactionManager;\n\nimport org.apache.activemq.ActiveMQConnectionFactory;\nimport org.apache.activemq.ActiveMQXAConnectionFactory;\nimport org.apache.activemq.pool.PooledConnectionFactory;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.jta.XAConnectionFactoryWrapper;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\n\n/**\n * Configuration for ActiveMQ XA {@link ConnectionFactory}.\n *\n * @author Phillip Webb\n * @author Aurélien Leboulanger\n * @since 1.2.0\n */\n@Configuration\n@ConditionalOnClass(TransactionManager.class)\n@ConditionalOnBean(XAConnectionFactoryWrapper.class)\n@ConditionalOnMissingBean(ConnectionFactory.class)\nclass ActiveMQXAConnectionFactoryConfiguration {\n\n\t@Primary\n\t@Bean(name = { "jmsConnectionFactory", "xaJmsConnectionFactory" })\n\tpublic ConnectionFactory jmsConnectionFactory(ActiveMQProperties properties,\n\t\t\tXAConnectionFactoryWrapper wrapper) throws Exception {\n\t\tActiveMQXAConnectionFactory connectionFactory = new ActiveMQConnectionFactoryFactory(\n\t\t\t\tproperties).createConnectionFactory(ActiveMQXAConnectionFactory.class);\n\t\treturn wrapper.wrapConnectionFactory(connectionFactory);\n\t}\n\n\t@Bean\n\t@ConditionalOnProperty(prefix = "spring.activemq.pool", name = "enabled", havingValue = "false", matchIfMissing = true)\n\tpublic ActiveMQConnectionFactory nonXaJmsConnectionFactory(\n\t\t\tActiveMQProperties properties) {\n\t\treturn new ActiveMQConnectionFactoryFactory(properties)\n\t\t\t\t.createConnectionFactory(ActiveMQConnectionFactory.class);\n\t}\n\n\t@ConditionalOnClass(PooledConnectionFactory.class)\n\t@ConditionalOnProperty(prefix = "spring.activemq.pool", name = "enabled", havingValue = "true", matchIfMissing = false)\n\tstatic class PooledConnectionFactoryConfiguration {\n\n\t\t@Bean(destroyMethod = "stop")\n\t\tpublic PooledConnectionFactory pooledNonXaJmsConnectionFactory(\n\t\t\t\tActiveMQProperties properties) {\n\t\t\tPooledConnectionFactory pooledConnectionFactory = new PooledConnectionFactory(\n\t\t\t\t\tnew ActiveMQConnectionFactoryFactory(properties)\n\t\t\t\t\t\t\t.createConnectionFactory(ActiveMQConnectionFactory.class));\n\n\t\t\tActiveMQProperties.Pool pool = properties.getPool();\n\t\t\tpooledConnectionFactory.setExpiryTimeout(pool.getExpiryTimeMillis());\n\t\t\tpooledConnectionFactory.setMaxConnections(pool.getMaxConnections());\n\t\t\tpooledConnectionFactory.setIdleTimeout(pool.getIdleTimeMillis());\n\t\t\tpooledConnectionFactory.setMaximumActiveSessionPerConnection(pool.getMaxSessionsPerConnection());\n\t\t\tpooledConnectionFactory.setTimeBetweenExpirationCheckMillis(pool.getTimeBetweenEvictionRunsMillis());\n\n\t\t\treturn pooledConnectionFactory;\n\t\t}\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jms.activemq;\n\nimport javax.jms.ConnectionFactory;\nimport javax.transaction.TransactionManager;\n\nimport org.apache.activemq.ActiveMQConnectionFactory;\nimport org.apache.activemq.ActiveMQXAConnectionFactory;\nimport org.apache.activemq.pool.PooledConnectionFactory;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.jta.XAConnectionFactoryWrapper;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\n\n/**\n * Configuration for ActiveMQ XA {@link ConnectionFactory}.\n *\n * @author Phillip Webb\n * @since 1.2.0\n */\n@Configuration\n@ConditionalOnClass(TransactionManager.class)\n@ConditionalOnBean(XAConnectionFactoryWrapper.class)\n@ConditionalOnMissingBean(ConnectionFactory.class)\nclass ActiveMQXAConnectionFactoryConfiguration {\n\n\t@Primary\n\t@Bean(name = { "jmsConnectionFactory", "xaJmsConnectionFactory" })\n\tpublic ConnectionFactory jmsConnectionFactory(ActiveMQProperties properties,\n\t\t\tXAConnectionFactoryWrapper wrapper) throws Exception {\n\t\tActiveMQXAConnectionFactory connectionFactory = new ActiveMQConnectionFactoryFactory(\n\t\t\t\tproperties).createConnectionFactory(ActiveMQXAConnectionFactory.class);\n\t\treturn wrapper.wrapConnectionFactory(connectionFactory);\n\t}\n\n\t@Bean\n\t@ConditionalOnProperty(prefix = "spring.activemq", name = "pooled", havingValue = "false", matchIfMissing = true)\n\tpublic ActiveMQConnectionFactory nonXaJmsConnectionFactory(\n\t\t\tActiveMQProperties properties) {\n\t\treturn new ActiveMQConnectionFactoryFactory(properties)\n\t\t\t\t.createConnectionFactory(ActiveMQConnectionFactory.class);\n\t}\n\n\t@ConditionalOnClass(PooledConnectionFactory.class)\n\t@ConditionalOnProperty(prefix = "spring.activemq", name = "pooled", havingValue = "true", matchIfMissing = false)\n\tstatic class PooledConnectionFactoryConfiguration {\n\n\t\t@Bean(destroyMethod = "stop")\n\t\tpublic PooledConnectionFactory pooledNonXaJmsConnectionFactory(\n\t\t\t\tActiveMQProperties properties) {\n\t\t\treturn new PooledConnectionFactory(\n\t\t\t\t\tnew ActiveMQConnectionFactoryFactory(properties)\n\t\t\t\t\t\t\t.createConnectionFactory(ActiveMQConnectionFactory.class));\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
