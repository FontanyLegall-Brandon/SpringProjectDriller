@@ -16,11 +16,13 @@
 
 package org.springframework.boot.autoconfigure.aop;
 
-import org.aspectj.lang.annotation.Aspect;
-import org.aspectj.lang.reflect.Advice;
-import org.aspectj.weaver.AnnotatedElement;
+import org.aspectj.weaver.Advice;
 
+import org.springframework.aop.config.AopConfigUtils;
+import org.springframework.beans.factory.BeanFactory;
+import org.springframework.beans.factory.support.BeanDefinitionRegistry;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.EnableAspectJAutoProxy;
@@ -40,23 +42,44 @@ import org.springframework.context.annotation.EnableAspectJAutoProxy;
  * @see EnableAspectJAutoProxy
  */
 @Configuration(proxyBeanMethods = false)
-@ConditionalOnClass({ EnableAspectJAutoProxy.class, Aspect.class, Advice.class, AnnotatedElement.class })
 @ConditionalOnProperty(prefix = , name = , havingValue = , matchIfMissing = true)
 public class AopAutoConfiguration {
 
 	@Configuration(proxyBeanMethods = false)
-	@EnableAspectJAutoProxy(proxyTargetClass = false)
-	@ConditionalOnProperty(prefix = , name = , havingValue = ,
-			matchIfMissing = false)
-	public static class JdkDynamicAutoProxyConfiguration {
+	@ConditionalOnClass(Advice.class)
+	static class AspectJAutoProxyingConfiguration {
+
+		@Configuration(proxyBeanMethods = false)
+		@EnableAspectJAutoProxy(proxyTargetClass = false)
+		@ConditionalOnProperty(prefix = , name = , havingValue = ,
+				matchIfMissing = false)
+		static class JdkDynamicAutoProxyConfiguration {
+
+		}
+
+		@Configuration(proxyBeanMethods = false)
+		@EnableAspectJAutoProxy(proxyTargetClass = true)
+		@ConditionalOnProperty(prefix = , name = , havingValue = ,
+				matchIfMissing = true)
+		static class CglibAutoProxyConfiguration {
+
+		}
 
 	}
 
 	@Configuration(proxyBeanMethods = false)
-	@EnableAspectJAutoProxy(proxyTargetClass = true)
+	@ConditionalOnMissingClass()
 	@ConditionalOnProperty(prefix = , name = , havingValue = ,
 			matchIfMissing = true)
-	public static class CglibAutoProxyConfiguration {
+	static class ClassProxyingConfiguration {
+
+		ClassProxyingConfiguration(BeanFactory beanFactory) {
+			if (beanFactory instanceof BeanDefinitionRegistry) {
+				BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory;
+				AopConfigUtils.registerAutoProxyCreatorIfNecessary(registry);
+				AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry);
+			}
+		}
 
 	}
 

