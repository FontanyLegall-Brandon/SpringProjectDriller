{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/couchbase/OnBootstrapHostsConditionTests.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2012-2016 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.couchbase;\n+\n+import org.junit.After;\n+import org.junit.Test;\n+\n+import org.springframework.boot.test.util.EnvironmentTestUtils;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Conditional;\n+import org.springframework.context.annotation.Configuration;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+/**\n+ * Tests for {@link OnBootstrapHostsCondition}.\n+ *\n+ * @author Stephane Nicoll\n+ */\n+public class OnBootstrapHostsConditionTests {\n+\n+\tprivate AnnotationConfigApplicationContext context;\n+\n+\t@After\n+\tpublic void tearDown() {\n+\t\tif (this.context != null) {\n+\t\t\tthis.context.close();\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void bootstrapHostsNotDefined() {\n+\t\tload(TestConfig.class);\n+\t\tassertThat(this.context.containsBean("foo")).isFalse();\n+\t}\n+\n+\t@Test\n+\tpublic void bootstrapHostsDefinedAsCommaSeparated() {\n+\t\tload(TestConfig.class, "spring.couchbase.bootstrap-hosts=value1");\n+\t\tassertThat(this.context.containsBean("foo")).isTrue();\n+\t}\n+\n+\t@Test\n+\tpublic void bootstrapHostsDefinedAsList() {\n+\t\tload(TestConfig.class, "spring.couchbase.bootstrap-hosts[0]=value1");\n+\t\tassertThat(this.context.containsBean("foo")).isTrue();\n+\t}\n+\n+\t@Test\n+\tpublic void bootstrapHostsDefinedAsCommaSeparatedRelaxed() {\n+\t\tload(TestConfig.class, "spring.couchbase.bootstrapHosts=value1");\n+\t\tassertThat(this.context.containsBean("foo")).isTrue();\n+\t}\n+\n+\t@Test\n+\tpublic void bootstrapHostsDefinedAsListRelaxed() {\n+\t\tload(TestConfig.class, "spring.couchbase.bootstrapHosts[0]=value1");\n+\t\tassertThat(this.context.containsBean("foo")).isTrue();\n+\t}\n+\n+\n+\tprivate void load(Class<?> config, String... environment) {\n+\t\tthis.context = new AnnotationConfigApplicationContext();\n+\t\tEnvironmentTestUtils.addEnvironment(this.context, environment);\n+\t\tthis.context.register(config);\n+\t\tthis.context.refresh();\n+\t}\n+\n+\t@Configuration\n+\t@Conditional(OnBootstrapHostsCondition.class)\n+\tprotected static class TestConfig {\n+\n+\t\t@Bean\n+\t\tpublic String foo() {\n+\t\t\treturn "foo";\n+\t\t}\n+\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.couchbase;\n\nimport org.junit.After;\nimport org.junit.Test;\n\nimport org.springframework.boot.test.util.EnvironmentTestUtils;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link OnBootstrapHostsCondition}.\n *\n * @author Stephane Nicoll\n */\npublic class OnBootstrapHostsConditionTests {\n\n\tprivate AnnotationConfigApplicationContext context;\n\n\t@After\n\tpublic void tearDown() {\n\t\tif (this.context != null) {\n\t\t\tthis.context.close();\n\t\t}\n\t}\n\n\t@Test\n\tpublic void bootstrapHostsNotDefined() {\n\t\tload(TestConfig.class);\n\t\tassertThat(this.context.containsBean("foo")).isFalse();\n\t}\n\n\t@Test\n\tpublic void bootstrapHostsDefinedAsCommaSeparated() {\n\t\tload(TestConfig.class, "spring.couchbase.bootstrap-hosts=value1");\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t}\n\n\t@Test\n\tpublic void bootstrapHostsDefinedAsList() {\n\t\tload(TestConfig.class, "spring.couchbase.bootstrap-hosts[0]=value1");\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t}\n\n\t@Test\n\tpublic void bootstrapHostsDefinedAsCommaSeparatedRelaxed() {\n\t\tload(TestConfig.class, "spring.couchbase.bootstrapHosts=value1");\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t}\n\n\t@Test\n\tpublic void bootstrapHostsDefinedAsListRelaxed() {\n\t\tload(TestConfig.class, "spring.couchbase.bootstrapHosts[0]=value1");\n\t\tassertThat(this.context.containsBean("foo")).isTrue();\n\t}\n\n\n\tprivate void load(Class<?> config, String... environment) {\n\t\tthis.context = new AnnotationConfigApplicationContext();\n\t\tEnvironmentTestUtils.addEnvironment(this.context, environment);\n\t\tthis.context.register(config);\n\t\tthis.context.refresh();\n\t}\n\n\t@Configuration\n\t@Conditional(OnBootstrapHostsCondition.class)\n\tprotected static class TestConfig {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
