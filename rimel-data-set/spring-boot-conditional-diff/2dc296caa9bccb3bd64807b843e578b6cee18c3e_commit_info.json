{'_old_path': PosixPath('spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/web/WebMvcAutoConfiguration.java'), '_new_path': PosixPath('spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/web/WebMvcAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -18,9 +18,11 @@ package org.springframework.bootstrap.autoconfigure.web;\n \n import javax.servlet.Servlet;\n \n+import org.springframework.beans.factory.BeanFactory;\n import org.springframework.beans.factory.ListableBeanFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.bootstrap.autoconfigure.web.WebMvcAutoConfiguration.WebMvcConfiguration;\n+import org.springframework.bootstrap.context.annotation.ConditionalOnBean;\n import org.springframework.bootstrap.context.annotation.ConditionalOnClass;\n import org.springframework.bootstrap.context.annotation.ConditionalOnMissingBean;\n import org.springframework.bootstrap.context.annotation.EnableAutoConfiguration;\n@@ -31,13 +33,17 @@ import org.springframework.core.convert.converter.Converter;\n import org.springframework.core.convert.converter.GenericConverter;\n import org.springframework.format.Formatter;\n import org.springframework.format.FormatterRegistry;\n+import org.springframework.web.accept.ContentNegotiationManager;\n import org.springframework.web.servlet.DispatcherServlet;\n import org.springframework.web.servlet.HandlerAdapter;\n import org.springframework.web.servlet.HandlerMapping;\n+import org.springframework.web.servlet.View;\n import org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;\n import org.springframework.web.servlet.config.annotation.EnableWebMvc;\n import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\n import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\n+import org.springframework.web.servlet.view.BeanNameViewResolver;\n+import org.springframework.web.servlet.view.ContentNegotiatingViewResolver;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for {@link EnableWebMvc Web MVC}.\n@@ -61,6 +67,23 @@ public class WebMvcAutoConfiguration {\n \t\t@Autowired\n \t\tprivate ListableBeanFactory beanFactory;\n \n+\t\t@ConditionalOnBean(View.class)\n+\t\t@Bean\n+\t\tpublic BeanNameViewResolver beanNameViewResolver() {\n+\t\t\tBeanNameViewResolver resolver = new BeanNameViewResolver();\n+\t\t\tresolver.setOrder(0);\n+\t\t\treturn resolver;\n+\t\t}\n+\n+\t\t@ConditionalOnBean(View.class)\n+\t\t@Bean\n+\t\tpublic ContentNegotiatingViewResolver viewResolver(BeanFactory beanFactory) {\n+\t\t\tContentNegotiatingViewResolver resolver = new ContentNegotiatingViewResolver();\n+\t\t\tresolver.setContentNegotiationManager(beanFactory\n+\t\t\t\t\t.getBean(ContentNegotiationManager.class));\n+\t\t\treturn resolver;\n+\t\t}\n+\n \t\t@Bean\n \t\tpublic DispatcherServlet dispatcherServlet() {\n \t\t\treturn new DispatcherServlet();\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.bootstrap.autoconfigure.web;\n\nimport javax.servlet.Servlet;\n\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.ListableBeanFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.bootstrap.autoconfigure.web.WebMvcAutoConfiguration.WebMvcConfiguration;\nimport org.springframework.bootstrap.context.annotation.ConditionalOnBean;\nimport org.springframework.bootstrap.context.annotation.ConditionalOnClass;\nimport org.springframework.bootstrap.context.annotation.ConditionalOnMissingBean;\nimport org.springframework.bootstrap.context.annotation.EnableAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.core.convert.converter.GenericConverter;\nimport org.springframework.format.Formatter;\nimport org.springframework.format.FormatterRegistry;\nimport org.springframework.web.accept.ContentNegotiationManager;\nimport org.springframework.web.servlet.DispatcherServlet;\nimport org.springframework.web.servlet.HandlerAdapter;\nimport org.springframework.web.servlet.HandlerMapping;\nimport org.springframework.web.servlet.View;\nimport org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\nimport org.springframework.web.servlet.view.BeanNameViewResolver;\nimport org.springframework.web.servlet.view.ContentNegotiatingViewResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link EnableWebMvc Web MVC}.\n * \n * @author Phillip Webb\n */\n@Configuration\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class })\n@ConditionalOnMissingBean({ HandlerAdapter.class, HandlerMapping.class })\n@Import(WebMvcConfiguration.class)\npublic class WebMvcAutoConfiguration {\n\n\t/**\n\t * Nested configuration used because {@code @EnableWebMvc} will add HandlerAdapter and\n\t * HandlerMapping, causing the condition to fail and the additional DispatcherServlet\n\t * bean never to be registered if it were declared directly.\n\t */\n\t@EnableWebMvc\n\tpublic static class WebMvcConfiguration extends WebMvcConfigurerAdapter {\n\n\t\t@Autowired\n\t\tprivate ListableBeanFactory beanFactory;\n\n\t\t@ConditionalOnBean(View.class)\n\t\t@Bean\n\t\tpublic BeanNameViewResolver beanNameViewResolver() {\n\t\t\tBeanNameViewResolver resolver = new BeanNameViewResolver();\n\t\t\tresolver.setOrder(0);\n\t\t\treturn resolver;\n\t\t}\n\n\t\t@ConditionalOnBean(View.class)\n\t\t@Bean\n\t\tpublic ContentNegotiatingViewResolver viewResolver(BeanFactory beanFactory) {\n\t\t\tContentNegotiatingViewResolver resolver = new ContentNegotiatingViewResolver();\n\t\t\tresolver.setContentNegotiationManager(beanFactory\n\t\t\t\t\t.getBean(ContentNegotiationManager.class));\n\t\t\treturn resolver;\n\t\t}\n\n\t\t@Bean\n\t\tpublic DispatcherServlet dispatcherServlet() {\n\t\t\treturn new DispatcherServlet();\n\t\t}\n\n\t\t@Override\n\t\tpublic void configureDefaultServletHandling(\n\t\t\t\tDefaultServletHandlerConfigurer configurer) {\n\t\t\tconfigurer.enable();\n\t\t}\n\n\t\t@Override\n\t\tpublic void addFormatters(FormatterRegistry registry) {\n\t\t\tfor (Converter<?, ?> converter : this.beanFactory.getBeansOfType(\n\t\t\t\t\tConverter.class).values()) {\n\t\t\t\tregistry.addConverter(converter);\n\t\t\t}\n\t\t\tfor (GenericConverter converter : this.beanFactory.getBeansOfType(\n\t\t\t\t\tGenericConverter.class).values()) {\n\t\t\t\tregistry.addConverter(converter);\n\t\t\t}\n\t\t\tfor (Formatter<?> formatter : this.beanFactory\n\t\t\t\t\t.getBeansOfType(Formatter.class).values()) {\n\t\t\t\tregistry.addFormatter(formatter);\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void addResourceHandlers(ResourceHandlerRegistry registry) {\n\t\t\tregistry.addResourceHandler("/**").addResourceLocations("/")\n\t\t\t\t\t.addResourceLocations("classpath:/META-INF/resources/")\n\t\t\t\t\t.addResourceLocations("classpath:/static")\n\t\t\t\t\t.addResourceLocations("classpath:/");\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.bootstrap.autoconfigure.web;\n\nimport javax.servlet.Servlet;\n\nimport org.springframework.beans.factory.ListableBeanFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.bootstrap.autoconfigure.web.WebMvcAutoConfiguration.WebMvcConfiguration;\nimport org.springframework.bootstrap.context.annotation.ConditionalOnClass;\nimport org.springframework.bootstrap.context.annotation.ConditionalOnMissingBean;\nimport org.springframework.bootstrap.context.annotation.EnableAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.core.convert.converter.GenericConverter;\nimport org.springframework.format.Formatter;\nimport org.springframework.format.FormatterRegistry;\nimport org.springframework.web.servlet.DispatcherServlet;\nimport org.springframework.web.servlet.HandlerAdapter;\nimport org.springframework.web.servlet.HandlerMapping;\nimport org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link EnableWebMvc Web MVC}.\n * \n * @author Phillip Webb\n */\n@Configuration\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class })\n@ConditionalOnMissingBean({ HandlerAdapter.class, HandlerMapping.class })\n@Import(WebMvcConfiguration.class)\npublic class WebMvcAutoConfiguration {\n\n\t/**\n\t * Nested configuration used because {@code @EnableWebMvc} will add HandlerAdapter and\n\t * HandlerMapping, causing the condition to fail and the additional DispatcherServlet\n\t * bean never to be registered if it were declared directly.\n\t */\n\t@EnableWebMvc\n\tpublic static class WebMvcConfiguration extends WebMvcConfigurerAdapter {\n\n\t\t@Autowired\n\t\tprivate ListableBeanFactory beanFactory;\n\n\t\t@Bean\n\t\tpublic DispatcherServlet dispatcherServlet() {\n\t\t\treturn new DispatcherServlet();\n\t\t}\n\n\t\t@Override\n\t\tpublic void configureDefaultServletHandling(\n\t\t\t\tDefaultServletHandlerConfigurer configurer) {\n\t\t\tconfigurer.enable();\n\t\t}\n\n\t\t@Override\n\t\tpublic void addFormatters(FormatterRegistry registry) {\n\t\t\tfor (Converter<?, ?> converter : this.beanFactory.getBeansOfType(\n\t\t\t\t\tConverter.class).values()) {\n\t\t\t\tregistry.addConverter(converter);\n\t\t\t}\n\t\t\tfor (GenericConverter converter : this.beanFactory.getBeansOfType(\n\t\t\t\t\tGenericConverter.class).values()) {\n\t\t\t\tregistry.addConverter(converter);\n\t\t\t}\n\t\t\tfor (Formatter<?> formatter : this.beanFactory\n\t\t\t\t\t.getBeansOfType(Formatter.class).values()) {\n\t\t\t\tregistry.addFormatter(formatter);\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void addResourceHandlers(ResourceHandlerRegistry registry) {\n\t\t\tregistry.addResourceHandler("/**").addResourceLocations("/")\n\t\t\t\t\t.addResourceLocations("classpath:/META-INF/resources/")\n\t\t\t\t\t.addResourceLocations("classpath:/static")\n\t\t\t\t\t.addResourceLocations("classpath:/");\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
