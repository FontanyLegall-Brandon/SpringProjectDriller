@@ -15,20 +15,29 @@
  */
 package org.springframework.boot.autoconfigure.security.oauth2.resource.servlet;
 
+import java.io.InputStreamReader;
+import java.security.KeyFactory;
+import java.security.interfaces.RSAPublicKey;
+import java.security.spec.X509EncodedKeySpec;
+import java.util.Base64;
+
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.autoconfigure.security.oauth2.resource.IssuerUriCondition;
+import org.springframework.boot.autoconfigure.security.oauth2.resource.KeyValueCondition;
 import org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ResourceServerProperties;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Conditional;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.security.oauth2.jwt.JwtDecoder;
 import org.springframework.security.oauth2.jwt.JwtDecoders;
-import org.springframework.security.oauth2.jwt.NimbusJwtDecoderJwkSupport;
+import org.springframework.security.oauth2.jwt.NimbusJwtDecoder;
+import org.springframework.util.FileCopyUtils;
+import org.springframework.util.ResourceUtils;
 
 /**
- * Configures a {@link JwtDecoder} when a JWK Set URI or OpenID Connect Issuer URI is
- * available.
+ * Configures a {@link JwtDecoder} when a JWK Set URI, OpenID Connect Issuer URI or Public
+ * Key configuration is available.
  *
  * @author Madhura Bhave
  * @author Artsiom Yudovin
@@ -46,8 +55,25 @@ class OAuth2ResourceServerJwtConfiguration {
 	@ConditionalOnProperty(name = )
 	@ConditionalOnMissingBean
 	public JwtDecoder jwtDecoderByJwkKeySetUri() {
-		return new NimbusJwtDecoderJwkSupport(this.properties.getJwkSetUri(),
-				this.properties.getJwsAlgorithm());
+		return NimbusJwtDecoder.withJwkSetUri(this.properties.getJwkSetUri())
+				.jwsAlgorithm(this.properties.getJwsAlgorithm()).build();
+	}
+
+	@Bean
+	@Conditional(KeyValueCondition.class)
+	@ConditionalOnMissingBean
+	public JwtDecoder jwtDecoderByPublicKeyValue() throws Exception {
+		String keyValue = FileCopyUtils.copyToString(new InputStreamReader(ResourceUtils
+				.getURL(this.properties.getPublicKeyLocation()).openStream()));
+		RSAPublicKey publicKey = (RSAPublicKey) KeyFactory.getInstance()
+				.generatePublic(new X509EncodedKeySpec(getKeySpec(keyValue)));
+		return NimbusJwtDecoder.withPublicKey(publicKey).build();
+	}
+
+	private byte[] getKeySpec(String keyValue) {
+		keyValue = keyValue.replace(, )
+				.replace(, ).replace(, );
+		return Base64.getDecoder().decode(keyValue);
 	}
 
 	@Bean

