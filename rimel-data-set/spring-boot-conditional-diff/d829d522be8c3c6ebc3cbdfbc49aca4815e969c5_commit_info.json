{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/HealthIndicatorAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/HealthIndicatorAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -16,16 +16,23 @@\n \n package org.springframework.boot.actuate.autoconfigure.health;\n \n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n import org.springframework.boot.actuate.health.ApplicationHealthIndicator;\n+import org.springframework.boot.actuate.health.DefaultHealthIndicatorRegistry;\n import org.springframework.boot.actuate.health.HealthAggregator;\n import org.springframework.boot.actuate.health.HealthIndicator;\n+import org.springframework.boot.actuate.health.HealthIndicatorRegistry;\n import org.springframework.boot.actuate.health.OrderedHealthAggregator;\n import org.springframework.boot.actuate.health.ReactiveHealthIndicator;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.util.ClassUtils;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for {@link HealthIndicator}s.\n@@ -33,6 +40,7 @@ import org.springframework.context.annotation.Configuration;\n  * @author Andy Wilkinson\n  * @author Stephane Nicoll\n  * @author Phillip Webb\n+ * @author Vedran Pavic\n  * @since 2.0.0\n  */\n @Configuration\n@@ -61,4 +69,34 @@ public class HealthIndicatorAutoConfiguration {\n \t\treturn healthAggregator;\n \t}\n \n+\t@Bean\n+\t@ConditionalOnMissingBean(HealthIndicatorRegistry.class)\n+\tpublic HealthIndicatorRegistry healthIndicatorRegistry(\n+\t\t\tApplicationContext applicationContext) {\n+\t\tHealthIndicatorRegistry registry = new DefaultHealthIndicatorRegistry();\n+\t\tMap<String, HealthIndicator> indicators = new LinkedHashMap<>();\n+\t\tindicators.putAll(applicationContext.getBeansOfType(HealthIndicator.class));\n+\t\tif (ClassUtils.isPresent("reactor.core.publisher.Flux", null)) {\n+\t\t\tnew ReactiveHealthIndicators().get(applicationContext)\n+\t\t\t\t\t.forEach(indicators::putIfAbsent);\n+\t\t}\n+\t\tindicators.forEach(registry::register);\n+\t\treturn registry;\n+\t}\n+\n+\tprivate static class ReactiveHealthIndicators {\n+\n+\t\tpublic Map<String, HealthIndicator> get(ApplicationContext applicationContext) {\n+\t\t\tMap<String, HealthIndicator> indicators = new LinkedHashMap<>();\n+\t\t\tapplicationContext.getBeansOfType(ReactiveHealthIndicator.class)\n+\t\t\t\t\t.forEach((name, indicator) -> indicators.put(name, adapt(indicator)));\n+\t\t\treturn indicators;\n+\t\t}\n+\n+\t\tprivate HealthIndicator adapt(ReactiveHealthIndicator indicator) {\n+\t\t\treturn () -> indicator.health().block();\n+\t\t}\n+\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.health;\n\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\nimport org.springframework.boot.actuate.health.ApplicationHealthIndicator;\nimport org.springframework.boot.actuate.health.DefaultHealthIndicatorRegistry;\nimport org.springframework.boot.actuate.health.HealthAggregator;\nimport org.springframework.boot.actuate.health.HealthIndicator;\nimport org.springframework.boot.actuate.health.HealthIndicatorRegistry;\nimport org.springframework.boot.actuate.health.OrderedHealthAggregator;\nimport org.springframework.boot.actuate.health.ReactiveHealthIndicator;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.util.ClassUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link HealthIndicator}s.\n *\n * @author Andy Wilkinson\n * @author Stephane Nicoll\n * @author Phillip Webb\n * @author Vedran Pavic\n * @since 2.0.0\n */\n@Configuration\n@EnableConfigurationProperties({ HealthIndicatorProperties.class })\npublic class HealthIndicatorAutoConfiguration {\n\n\tprivate final HealthIndicatorProperties properties;\n\n\tpublic HealthIndicatorAutoConfiguration(HealthIndicatorProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean({ HealthIndicator.class, ReactiveHealthIndicator.class })\n\tpublic ApplicationHealthIndicator applicationHealthIndicator() {\n\t\treturn new ApplicationHealthIndicator();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(HealthAggregator.class)\n\tpublic OrderedHealthAggregator healthAggregator() {\n\t\tOrderedHealthAggregator healthAggregator = new OrderedHealthAggregator();\n\t\tif (this.properties.getOrder() != null) {\n\t\t\thealthAggregator.setStatusOrder(this.properties.getOrder());\n\t\t}\n\t\treturn healthAggregator;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(HealthIndicatorRegistry.class)\n\tpublic HealthIndicatorRegistry healthIndicatorRegistry(\n\t\t\tApplicationContext applicationContext) {\n\t\tHealthIndicatorRegistry registry = new DefaultHealthIndicatorRegistry();\n\t\tMap<String, HealthIndicator> indicators = new LinkedHashMap<>();\n\t\tindicators.putAll(applicationContext.getBeansOfType(HealthIndicator.class));\n\t\tif (ClassUtils.isPresent("reactor.core.publisher.Flux", null)) {\n\t\t\tnew ReactiveHealthIndicators().get(applicationContext)\n\t\t\t\t\t.forEach(indicators::putIfAbsent);\n\t\t}\n\t\tindicators.forEach(registry::register);\n\t\treturn registry;\n\t}\n\n\tprivate static class ReactiveHealthIndicators {\n\n\t\tpublic Map<String, HealthIndicator> get(ApplicationContext applicationContext) {\n\t\t\tMap<String, HealthIndicator> indicators = new LinkedHashMap<>();\n\t\t\tapplicationContext.getBeansOfType(ReactiveHealthIndicator.class)\n\t\t\t\t\t.forEach((name, indicator) -> indicators.put(name, adapt(indicator)));\n\t\t\treturn indicators;\n\t\t}\n\n\t\tprivate HealthIndicator adapt(ReactiveHealthIndicator indicator) {\n\t\t\treturn () -> indicator.health().block();\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.health;\n\nimport org.springframework.boot.actuate.health.ApplicationHealthIndicator;\nimport org.springframework.boot.actuate.health.HealthAggregator;\nimport org.springframework.boot.actuate.health.HealthIndicator;\nimport org.springframework.boot.actuate.health.OrderedHealthAggregator;\nimport org.springframework.boot.actuate.health.ReactiveHealthIndicator;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link HealthIndicator}s.\n *\n * @author Andy Wilkinson\n * @author Stephane Nicoll\n * @author Phillip Webb\n * @since 2.0.0\n */\n@Configuration\n@EnableConfigurationProperties({ HealthIndicatorProperties.class })\npublic class HealthIndicatorAutoConfiguration {\n\n\tprivate final HealthIndicatorProperties properties;\n\n\tpublic HealthIndicatorAutoConfiguration(HealthIndicatorProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean({ HealthIndicator.class, ReactiveHealthIndicator.class })\n\tpublic ApplicationHealthIndicator applicationHealthIndicator() {\n\t\treturn new ApplicationHealthIndicator();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(HealthAggregator.class)\n\tpublic OrderedHealthAggregator healthAggregator() {\n\t\tOrderedHealthAggregator healthAggregator = new OrderedHealthAggregator();\n\t\tif (this.properties.getOrder() != null) {\n\t\t\thealthAggregator.setStatusOrder(this.properties.getOrder());\n\t\t}\n\t\treturn healthAggregator;\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
