{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/TwitterAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2012-2014 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.social;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\n+import org.springframework.boot.bind.RelaxedPropertyResolver;\n+import org.springframework.context.EnvironmentAware;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.context.annotation.ScopedProxyMode;\n+import org.springframework.core.env.Environment;\n+import org.springframework.social.config.annotation.ConnectionFactoryConfigurer;\n+import org.springframework.social.config.annotation.EnableSocial;\n+import org.springframework.social.config.annotation.SocialConfigurerAdapter;\n+import org.springframework.social.connect.Connection;\n+import org.springframework.social.connect.ConnectionRepository;\n+import org.springframework.social.connect.web.GenericConnectionStatusView;\n+import org.springframework.social.twitter.api.Twitter;\n+import org.springframework.social.twitter.api.impl.TwitterTemplate;\n+import org.springframework.social.twitter.connect.TwitterConnectionFactory;\n+import org.springframework.web.servlet.View;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for Spring Social connectivity\n+ * with Twitter.\n+ * \n+ * @author Craig Walls\n+ */\n+@Configuration\n+@ConditionalOnClass({ TwitterConnectionFactory.class })\n+@AutoConfigureAfter(WebMvcAutoConfiguration.class)\n+public class TwitterAutoConfiguration {\n+\n+\t@Configuration\n+\t@EnableSocial\n+\t@ConditionalOnWebApplication\n+\tprotected static class TwitterAutoConfigurationAdapter extends SocialConfigurerAdapter implements EnvironmentAware {\n+\n+\t\tprivate String appId;\n+\t\tprivate String appSecret;\n+\n+\t\t@Override\n+\t\tpublic void setEnvironment(Environment env) {\n+\t\t\tRelaxedPropertyResolver propertyResolver = new RelaxedPropertyResolver(env, "spring.social.");\n+\t\t\tthis.appId = propertyResolver.getRequiredProperty("twitter.appId");\n+\t\t\tthis.appSecret = propertyResolver.getRequiredProperty("twitter.appSecret");\n+\t\t}\n+\t\t\n+\t\t@Override\n+\t\tpublic void addConnectionFactories(ConnectionFactoryConfigurer cfConfig, Environment env) {\n+\t\t\tcfConfig.addConnectionFactory(new TwitterConnectionFactory(appId, appSecret));\n+\t\t}\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(TwitterConnectionFactory.class)\n+\t\t@Scope(value="request", proxyMode=ScopedProxyMode.INTERFACES)\n+\t\tpublic Twitter twitter(ConnectionRepository repository) {\n+\t\t\tConnection<Twitter> connection = repository.findPrimaryConnection(Twitter.class);\n+\t\t\treturn connection != null ? connection.getApi() : new TwitterTemplate(appId, appSecret);\n+\t\t}\n+\n+\t\t@Bean(name={"connect/twitterConnect", "connect/twitterConnected"})\n+\t\t@ConditionalOnExpression("${spring.social.auto_connection_views:false}")\n+\t\tpublic View twitterConnectView() {\n+\t\t\treturn new GenericConnectionStatusView("twitter", "Twitter");\n+\t\t}\n+\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.social;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.boot.bind.RelaxedPropertyResolver;\nimport org.springframework.context.EnvironmentAware;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.context.annotation.ScopedProxyMode;\nimport org.springframework.core.env.Environment;\nimport org.springframework.social.config.annotation.ConnectionFactoryConfigurer;\nimport org.springframework.social.config.annotation.EnableSocial;\nimport org.springframework.social.config.annotation.SocialConfigurerAdapter;\nimport org.springframework.social.connect.Connection;\nimport org.springframework.social.connect.ConnectionRepository;\nimport org.springframework.social.connect.web.GenericConnectionStatusView;\nimport org.springframework.social.twitter.api.Twitter;\nimport org.springframework.social.twitter.api.impl.TwitterTemplate;\nimport org.springframework.social.twitter.connect.TwitterConnectionFactory;\nimport org.springframework.web.servlet.View;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Social connectivity\n * with Twitter.\n * \n * @author Craig Walls\n */\n@Configuration\n@ConditionalOnClass({ TwitterConnectionFactory.class })\n@AutoConfigureAfter(WebMvcAutoConfiguration.class)\npublic class TwitterAutoConfiguration {\n\n\t@Configuration\n\t@EnableSocial\n\t@ConditionalOnWebApplication\n\tprotected static class TwitterAutoConfigurationAdapter extends SocialConfigurerAdapter implements EnvironmentAware {\n\n\t\tprivate String appId;\n\t\tprivate String appSecret;\n\n\t\t@Override\n\t\tpublic void setEnvironment(Environment env) {\n\t\t\tRelaxedPropertyResolver propertyResolver = new RelaxedPropertyResolver(env, "spring.social.");\n\t\t\tthis.appId = propertyResolver.getRequiredProperty("twitter.appId");\n\t\t\tthis.appSecret = propertyResolver.getRequiredProperty("twitter.appSecret");\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void addConnectionFactories(ConnectionFactoryConfigurer cfConfig, Environment env) {\n\t\t\tcfConfig.addConnectionFactory(new TwitterConnectionFactory(appId, appSecret));\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(TwitterConnectionFactory.class)\n\t\t@Scope(value="request", proxyMode=ScopedProxyMode.INTERFACES)\n\t\tpublic Twitter twitter(ConnectionRepository repository) {\n\t\t\tConnection<Twitter> connection = repository.findPrimaryConnection(Twitter.class);\n\t\t\treturn connection != null ? connection.getApi() : new TwitterTemplate(appId, appSecret);\n\t\t}\n\n\t\t@Bean(name={"connect/twitterConnect", "connect/twitterConnected"})\n\t\t@ConditionalOnExpression("${spring.social.auto_connection_views:false}")\n\t\tpublic View twitterConnectView() {\n\t\t\treturn new GenericConnectionStatusView("twitter", "Twitter");\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
