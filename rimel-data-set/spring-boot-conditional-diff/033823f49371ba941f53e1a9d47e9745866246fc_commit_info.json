{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -19,6 +19,7 @@ package org.springframework.boot.autoconfigure.security;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n import org.springframework.boot.context.embedded.DelegatingFilterProxyRegistrationBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n@@ -41,6 +42,7 @@ import org.springframework.security.web.context.AbstractSecurityWebApplicationIn\n @Configuration\n @ConditionalOnWebApplication\n @EnableConfigurationProperties\n+@ConditionalOnClass(AbstractSecurityWebApplicationInitializer.class)\n @AutoConfigureAfter(SpringBootWebSecurityConfiguration.class)\n public class SecurityFilterAutoConfiguration {\n \n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.context.embedded.DelegatingFilterProxyRegistrationBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;\nimport org.springframework.security.web.context.AbstractSecurityWebApplicationInitializer;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Security\'s Filter.\n * Configured separately from {@link SpringBootWebSecurityConfiguration} to ensure that\n * the filter\'s order is still configured when a user-provided\n * {@link WebSecurityConfiguration} exists.\n *\n * @author Rob Winch\n * @author Phillip Webb\n * @since 1.3\n */\n@Configuration\n@ConditionalOnWebApplication\n@EnableConfigurationProperties\n@ConditionalOnClass(AbstractSecurityWebApplicationInitializer.class)\n@AutoConfigureAfter(SpringBootWebSecurityConfiguration.class)\npublic class SecurityFilterAutoConfiguration {\n\n\tprivate static final String DEFAULT_FILTER_NAME = AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME;\n\n\t@Bean\n\t@ConditionalOnBean(name = DEFAULT_FILTER_NAME)\n\tpublic DelegatingFilterProxyRegistrationBean securityFilterChainRegistration(\n\t\t\tApplicationContext applicationContext,\n\t\t\tSecurityProperties securityProperties) {\n\t\tDelegatingFilterProxyRegistrationBean registration = new DelegatingFilterProxyRegistrationBean(\n\t\t\t\tDEFAULT_FILTER_NAME);\n\t\tregistration.setOrder(securityProperties.getFilterOrder());\n\t\treturn registration;\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.context.embedded.DelegatingFilterProxyRegistrationBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;\nimport org.springframework.security.web.context.AbstractSecurityWebApplicationInitializer;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Security\'s Filter.\n * Configured separately from {@link SpringBootWebSecurityConfiguration} to ensure that\n * the filter\'s order is still configured when a user-provided\n * {@link WebSecurityConfiguration} exists.\n *\n * @author Rob Winch\n * @author Phillip Webb\n * @since 1.3\n */\n@Configuration\n@ConditionalOnWebApplication\n@EnableConfigurationProperties\n@AutoConfigureAfter(SpringBootWebSecurityConfiguration.class)\npublic class SecurityFilterAutoConfiguration {\n\n\tprivate static final String DEFAULT_FILTER_NAME = AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME;\n\n\t@Bean\n\t@ConditionalOnBean(name = DEFAULT_FILTER_NAME)\n\tpublic DelegatingFilterProxyRegistrationBean securityFilterChainRegistration(\n\t\t\tApplicationContext applicationContext,\n\t\t\tSecurityProperties securityProperties) {\n\t\tDelegatingFilterProxyRegistrationBean registration = new DelegatingFilterProxyRegistrationBean(\n\t\t\t\tDEFAULT_FILTER_NAME);\n\t\tregistration.setOrder(securityProperties.getFilterOrder());\n\t\treturn registration;\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
