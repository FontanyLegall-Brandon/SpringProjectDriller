{'_old_path': None, '_new_path': PosixPath('spring-bootstrap-service/src/main/java/org/springframework/bootstrap/autoconfigure/service/InfoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2012-2013 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.bootstrap.autoconfigure.service;\n+\n+import java.io.IOException;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.annotation.Resource;\n+import javax.servlet.Servlet;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.bootstrap.bind.PropertiesConfigurationFactory;\n+import org.springframework.bootstrap.context.annotation.ConditionalOnClass;\n+import org.springframework.bootstrap.context.annotation.ConditionalOnMissingBean;\n+import org.springframework.bootstrap.context.annotation.EnableAutoConfiguration;\n+import org.springframework.bootstrap.service.info.InfoEndpoint;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.core.env.StandardEnvironment;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.support.PropertiesLoaderUtils;\n+import org.springframework.web.servlet.DispatcherServlet;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for /info endpoint.\n+ * \n+ * @author Dave Syer\n+ */\n+@Configuration\n+@ConditionalOnClass({ Servlet.class, DispatcherServlet.class })\n+@ConditionalOnMissingBean({ InfoEndpoint.class })\n+public class InfoConfiguration {\n+\n+\t@Resource(name = "infoMap")\n+\tprivate Map<String, Object> infoMap;\n+\n+\t@Autowired\n+\t@Qualifier("gitInfo")\n+\tprivate GitInfo gitInfo;\n+\n+\t@Bean\n+\tpublic Map<String, Object> applicationInfo() {\n+\t\tLinkedHashMap<String, Object> info = new LinkedHashMap<String, Object>();\n+\t\tinfo.putAll(this.infoMap);\n+\t\tif (this.gitInfo.getBranch() != null) {\n+\t\t\tinfo.put("git", this.gitInfo);\n+\t\t}\n+\t\treturn info;\n+\t}\n+\n+\t@Bean\n+\tpublic InfoEndpoint infoEndpoint() {\n+\t\treturn new InfoEndpoint(applicationInfo());\n+\t}\n+\n+\t@Configuration\n+\tpublic static class InfoPropertiesConfiguration {\n+\n+\t\t@Autowired\n+\t\tprivate ConfigurableEnvironment environment = new StandardEnvironment();\n+\n+\t\t@Bean\n+\t\tpublic PropertiesConfigurationFactory<GitInfo> gitInfo() throws IOException {\n+\t\t\tPropertiesConfigurationFactory<GitInfo> factory = new PropertiesConfigurationFactory<GitInfo>(\n+\t\t\t\t\tnew GitInfo());\n+\t\t\tfactory.setTargetName("git");\n+\t\t\tProperties properties = new Properties();\n+\t\t\tif (new ClassPathResource("git.properties").exists()) {\n+\t\t\t\tproperties = PropertiesLoaderUtils.loadProperties(new ClassPathResource(\n+\t\t\t\t\t\t"git.properties"));\n+\t\t\t}\n+\t\t\tfactory.setProperties(properties);\n+\t\t\treturn factory;\n+\t\t}\n+\n+\t\t@Bean\n+\t\tpublic PropertiesConfigurationFactory<Map<String, Object>> infoMap() {\n+\t\t\tPropertiesConfigurationFactory<Map<String, Object>> factory = new PropertiesConfigurationFactory<Map<String, Object>>(\n+\t\t\t\t\tnew LinkedHashMap<String, Object>());\n+\t\t\tfactory.setTargetName("info");\n+\t\t\tfactory.setPropertySources(this.environment.getPropertySources());\n+\t\t\treturn factory;\n+\t\t}\n+\n+\t}\n+\n+\tpublic static class GitInfo {\n+\t\tprivate String branch;\n+\t\tprivate Commit commit = new Commit();\n+\n+\t\tpublic String getBranch() {\n+\t\t\treturn this.branch;\n+\t\t}\n+\n+\t\tpublic void setBranch(String branch) {\n+\t\t\tthis.branch = branch;\n+\t\t}\n+\n+\t\tpublic Commit getCommit() {\n+\t\t\treturn this.commit;\n+\t\t}\n+\n+\t\tpublic static class Commit {\n+\t\t\tprivate String id;\n+\t\t\tprivate String time;\n+\n+\t\t\tpublic String getId() {\n+\t\t\t\treturn this.id == null ? "" : (this.id.length() > 7 ? this.id.substring(\n+\t\t\t\t\t\t0, 7) : this.id);\n+\t\t\t}\n+\n+\t\t\tpublic void setId(String id) {\n+\t\t\t\tthis.id = id;\n+\t\t\t}\n+\n+\t\t\tpublic String getTime() {\n+\t\t\t\treturn this.time;\n+\t\t\t}\n+\n+\t\t\tpublic void setTime(String time) {\n+\t\t\t\tthis.time = time;\n+\t\t\t}\n+\t\t}\n+\t}\n+}\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.bootstrap.autoconfigure.service;\n\nimport java.io.IOException;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport java.util.Properties;\n\nimport javax.annotation.Resource;\nimport javax.servlet.Servlet;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.bootstrap.bind.PropertiesConfigurationFactory;\nimport org.springframework.bootstrap.context.annotation.ConditionalOnClass;\nimport org.springframework.bootstrap.context.annotation.ConditionalOnMissingBean;\nimport org.springframework.bootstrap.context.annotation.EnableAutoConfiguration;\nimport org.springframework.bootstrap.service.info.InfoEndpoint;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.ConfigurableEnvironment;\nimport org.springframework.core.env.StandardEnvironment;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.core.io.support.PropertiesLoaderUtils;\nimport org.springframework.web.servlet.DispatcherServlet;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for /info endpoint.\n * \n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class })\n@ConditionalOnMissingBean({ InfoEndpoint.class })\npublic class InfoConfiguration {\n\n\t@Resource(name = "infoMap")\n\tprivate Map<String, Object> infoMap;\n\n\t@Autowired\n\t@Qualifier("gitInfo")\n\tprivate GitInfo gitInfo;\n\n\t@Bean\n\tpublic Map<String, Object> applicationInfo() {\n\t\tLinkedHashMap<String, Object> info = new LinkedHashMap<String, Object>();\n\t\tinfo.putAll(this.infoMap);\n\t\tif (this.gitInfo.getBranch() != null) {\n\t\t\tinfo.put("git", this.gitInfo);\n\t\t}\n\t\treturn info;\n\t}\n\n\t@Bean\n\tpublic InfoEndpoint infoEndpoint() {\n\t\treturn new InfoEndpoint(applicationInfo());\n\t}\n\n\t@Configuration\n\tpublic static class InfoPropertiesConfiguration {\n\n\t\t@Autowired\n\t\tprivate ConfigurableEnvironment environment = new StandardEnvironment();\n\n\t\t@Bean\n\t\tpublic PropertiesConfigurationFactory<GitInfo> gitInfo() throws IOException {\n\t\t\tPropertiesConfigurationFactory<GitInfo> factory = new PropertiesConfigurationFactory<GitInfo>(\n\t\t\t\t\tnew GitInfo());\n\t\t\tfactory.setTargetName("git");\n\t\t\tProperties properties = new Properties();\n\t\t\tif (new ClassPathResource("git.properties").exists()) {\n\t\t\t\tproperties = PropertiesLoaderUtils.loadProperties(new ClassPathResource(\n\t\t\t\t\t\t"git.properties"));\n\t\t\t}\n\t\t\tfactory.setProperties(properties);\n\t\t\treturn factory;\n\t\t}\n\n\t\t@Bean\n\t\tpublic PropertiesConfigurationFactory<Map<String, Object>> infoMap() {\n\t\t\tPropertiesConfigurationFactory<Map<String, Object>> factory = new PropertiesConfigurationFactory<Map<String, Object>>(\n\t\t\t\t\tnew LinkedHashMap<String, Object>());\n\t\t\tfactory.setTargetName("info");\n\t\t\tfactory.setPropertySources(this.environment.getPropertySources());\n\t\t\treturn factory;\n\t\t}\n\n\t}\n\n\tpublic static class GitInfo {\n\t\tprivate String branch;\n\t\tprivate Commit commit = new Commit();\n\n\t\tpublic String getBranch() {\n\t\t\treturn this.branch;\n\t\t}\n\n\t\tpublic void setBranch(String branch) {\n\t\t\tthis.branch = branch;\n\t\t}\n\n\t\tpublic Commit getCommit() {\n\t\t\treturn this.commit;\n\t\t}\n\n\t\tpublic static class Commit {\n\t\t\tprivate String id;\n\t\t\tprivate String time;\n\n\t\t\tpublic String getId() {\n\t\t\t\treturn this.id == null ? "" : (this.id.length() > 7 ? this.id.substring(\n\t\t\t\t\t\t0, 7) : this.id);\n\t\t\t}\n\n\t\t\tpublic void setId(String id) {\n\t\t\t\tthis.id = id;\n\t\t\t}\n\n\t\t\tpublic String getTime() {\n\t\t\t\treturn this.time;\n\t\t\t}\n\n\t\t\tpublic void setTime(String time) {\n\t\t\t\tthis.time = time;\n\t\t\t}\n\t\t}\n\t}\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
