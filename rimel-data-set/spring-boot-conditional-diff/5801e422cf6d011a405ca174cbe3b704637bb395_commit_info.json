{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsTemplateAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2012-2013 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.jms;\n+\n+import javax.jms.ConnectionFactory;\n+\n+import org.apache.activemq.ActiveMQConnectionFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.jms.core.JmsTemplate;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for {@link JmsTemplate}.\n+ * \n+ * @author Greg Turnquist\n+ */\n+@Configuration\n+@ConditionalOnClass(JmsTemplate.class)\n+public class JmsTemplateAutoConfiguration {\n+\n+\t@Configuration\n+\t@ConditionalOnMissingBean(JmsTemplate.class)\n+\tprotected static class JmsTemplateCreator {\n+\n+\t\t@Autowired\n+\t\tConnectionFactory connectionFactory;\n+\n+\t\t@Bean\n+\t\tpublic JmsTemplate jmsTemplate() {\n+\t\t\tJmsTemplate jmsTemplate = new JmsTemplate(connectionFactory);\n+\t\t\tjmsTemplate.setPubSubDomain(true);\n+\t\t\treturn jmsTemplate;\n+\t\t}\n+\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnClass(ActiveMQConnectionFactory.class)\n+\t@ConditionalOnMissingBean(ConnectionFactory.class)\n+\tprotected static class ActiveMQConnectionFactoryCreator {\n+\t\t@Bean\n+\t\tConnectionFactory connectionFactory() {\n+\t\t\treturn new ActiveMQConnectionFactory("vm://localhost");\n+\t\t}\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jms;\n\nimport javax.jms.ConnectionFactory;\n\nimport org.apache.activemq.ActiveMQConnectionFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jms.core.JmsTemplate;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link JmsTemplate}.\n * \n * @author Greg Turnquist\n */\n@Configuration\n@ConditionalOnClass(JmsTemplate.class)\npublic class JmsTemplateAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnMissingBean(JmsTemplate.class)\n\tprotected static class JmsTemplateCreator {\n\n\t\t@Autowired\n\t\tConnectionFactory connectionFactory;\n\n\t\t@Bean\n\t\tpublic JmsTemplate jmsTemplate() {\n\t\t\tJmsTemplate jmsTemplate = new JmsTemplate(connectionFactory);\n\t\t\tjmsTemplate.setPubSubDomain(true);\n\t\t\treturn jmsTemplate;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(ActiveMQConnectionFactory.class)\n\t@ConditionalOnMissingBean(ConnectionFactory.class)\n\tprotected static class ActiveMQConnectionFactoryCreator {\n\t\t@Bean\n\t\tConnectionFactory connectionFactory() {\n\t\t\treturn new ActiveMQConnectionFactory("vm://localhost");\n\t\t}\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
