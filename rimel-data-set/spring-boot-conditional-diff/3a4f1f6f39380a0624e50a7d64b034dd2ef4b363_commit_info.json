{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,11 +16,16 @@\n \n package org.springframework.boot.autoconfigure.jersey;\n \n+import java.util.Arrays;\n+import java.util.EnumSet;\n+\n import javax.annotation.PostConstruct;\n+import javax.servlet.DispatcherType;\n import javax.servlet.ServletContext;\n import javax.servlet.ServletException;\n import javax.ws.rs.ApplicationPath;\n \n+import org.glassfish.jersey.CommonProperties;\n import org.glassfish.jersey.server.ResourceConfig;\n import org.glassfish.jersey.servlet.ServletContainer;\n import org.glassfish.jersey.servlet.ServletProperties;\n@@ -30,10 +35,13 @@ import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n import org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration;\n+import org.springframework.boot.context.embedded.FilterRegistrationBean;\n import org.springframework.boot.context.embedded.ServletRegistrationBean;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.core.Ordered;\n@@ -56,8 +64,12 @@ import org.springframework.web.filter.RequestContextFilter;\n @ConditionalOnWebApplication\n @Order(Ordered.HIGHEST_PRECEDENCE)\n @AutoConfigureBefore(DispatcherServletAutoConfiguration.class)\n+@EnableConfigurationProperties(JerseyProperties.class)\n public class JerseyAutoConfiguration implements WebApplicationInitializer {\n \n+\t@Autowired\n+\tprivate JerseyProperties jersey;\n+\t\n \t@Autowired\n \tprivate ListableBeanFactory context;\n \n@@ -74,18 +86,41 @@ public class JerseyAutoConfiguration implements WebApplicationInitializer {\n \n \t@Bean\n \t@ConditionalOnMissingBean\n-\tpublic RequestContextFilter requestContextFilter() {\n-\t\treturn new RequestContextFilter();\n+\tpublic FilterRegistrationBean requestContextFilter() {\n+\t\tFilterRegistrationBean registration = new FilterRegistrationBean();\n+\t\tregistration.setFilter(new RequestContextFilter());\n+\t\tregistration.setOrder(jersey.getFilter().getOrder()-1);\n+\t\tregistration.setName("requestContextFilter");\n+\t\treturn registration;\n \t}\n \n+\t@Bean\n+\t@ConditionalOnMissingBean(name = "jerseyFilterRegistration")\n+\t@ConditionalOnExpression("\'${spring.jersey.type:servlet}\' == \'filter\'")\n+\tpublic FilterRegistrationBean jerseyFilterRegistration() {\n+\t\tClass<? extends ResourceConfig> configType = this.config.getClass();\n+\t\tFilterRegistrationBean registration = new FilterRegistrationBean();\n+\t\tregistration.setFilter(new ServletContainer());\n+\t\tregistration.setUrlPatterns(Arrays.asList(this.path));\n+\t\tregistration.setOrder(jersey.getFilter().getOrder());\n+\t\tregistration.addInitParameter(ServletProperties.JAXRS_APPLICATION_CLASS,\n+\t\t\t\tconfigType.getName());\n+\t\tregistration.addInitParameter(CommonProperties.METAINF_SERVICES_LOOKUP_DISABLE,  "true");\n+\t\tregistration.setName("jerseyFilter");\n+        registration.setDispatcherTypes(EnumSet.allOf(DispatcherType.class));\n+\t\treturn registration;\n+\t}\n+\t\n \t@Bean\n \t@ConditionalOnMissingBean(name = "jerseyServletRegistration")\n+\t@ConditionalOnExpression("\'${spring.jersey.type:servlet}\' == \'servlet\'")\n \tpublic ServletRegistrationBean jerseyServletRegistration() {\n \t\tClass<? extends ResourceConfig> configType = this.config.getClass();\n \t\tServletRegistrationBean registration = new ServletRegistrationBean(\n \t\t\t\tnew ServletContainer(), this.path);\n \t\tregistration.addInitParameter(ServletProperties.JAXRS_APPLICATION_CLASS,\n \t\t\t\tconfigType.getName());\n+\t\tregistration.addInitParameter(CommonProperties.METAINF_SERVICES_LOOKUP_DISABLE,  "true");\n \t\tregistration.setName("jerseyServlet");\n \t\treturn registration;\n \t}\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jersey;\n\nimport java.util.Arrays;\nimport java.util.EnumSet;\n\nimport javax.annotation.PostConstruct;\nimport javax.servlet.DispatcherType;\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletException;\nimport javax.ws.rs.ApplicationPath;\n\nimport org.glassfish.jersey.CommonProperties;\nimport org.glassfish.jersey.server.ResourceConfig;\nimport org.glassfish.jersey.servlet.ServletContainer;\nimport org.glassfish.jersey.servlet.ServletProperties;\nimport org.springframework.beans.factory.ListableBeanFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration;\nimport org.springframework.boot.context.embedded.FilterRegistrationBean;\nimport org.springframework.boot.context.embedded.ServletRegistrationBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.AnnotationUtils;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.web.WebApplicationInitializer;\nimport org.springframework.web.filter.RequestContextFilter;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Jersey.\n *\n * @author Dave Syer\n * @author Andy Wilkinson\n */\n@Configuration\n@ConditionalOnClass(name = {\n\t\t"org.glassfish.jersey.server.spring.SpringComponentProvider",\n\t\t"javax.servlet.ServletRegistration" })\n@ConditionalOnBean(type = "org.glassfish.jersey.server.ResourceConfig")\n@ConditionalOnWebApplication\n@Order(Ordered.HIGHEST_PRECEDENCE)\n@AutoConfigureBefore(DispatcherServletAutoConfiguration.class)\n@EnableConfigurationProperties(JerseyProperties.class)\npublic class JerseyAutoConfiguration implements WebApplicationInitializer {\n\n\t@Autowired\n\tprivate JerseyProperties jersey;\n\t\n\t@Autowired\n\tprivate ListableBeanFactory context;\n\n\t@Autowired\n\tprivate ResourceConfig config;\n\n\tprivate String path;\n\n\t@PostConstruct\n\tpublic void path() {\n\t\tthis.path = findPath(AnnotationUtils.findAnnotation(this.config.getClass(),\n\t\t\t\tApplicationPath.class));\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic FilterRegistrationBean requestContextFilter() {\n\t\tFilterRegistrationBean registration = new FilterRegistrationBean();\n\t\tregistration.setFilter(new RequestContextFilter());\n\t\tregistration.setOrder(jersey.getFilter().getOrder()-1);\n\t\tregistration.setName("requestContextFilter");\n\t\treturn registration;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "jerseyFilterRegistration")\n\t@ConditionalOnExpression("\'${spring.jersey.type:servlet}\' == \'filter\'")\n\tpublic FilterRegistrationBean jerseyFilterRegistration() {\n\t\tClass<? extends ResourceConfig> configType = this.config.getClass();\n\t\tFilterRegistrationBean registration = new FilterRegistrationBean();\n\t\tregistration.setFilter(new ServletContainer());\n\t\tregistration.setUrlPatterns(Arrays.asList(this.path));\n\t\tregistration.setOrder(jersey.getFilter().getOrder());\n\t\tregistration.addInitParameter(ServletProperties.JAXRS_APPLICATION_CLASS,\n\t\t\t\tconfigType.getName());\n\t\tregistration.addInitParameter(CommonProperties.METAINF_SERVICES_LOOKUP_DISABLE,  "true");\n\t\tregistration.setName("jerseyFilter");\n        registration.setDispatcherTypes(EnumSet.allOf(DispatcherType.class));\n\t\treturn registration;\n\t}\n\t\n\t@Bean\n\t@ConditionalOnMissingBean(name = "jerseyServletRegistration")\n\t@ConditionalOnExpression("\'${spring.jersey.type:servlet}\' == \'servlet\'")\n\tpublic ServletRegistrationBean jerseyServletRegistration() {\n\t\tClass<? extends ResourceConfig> configType = this.config.getClass();\n\t\tServletRegistrationBean registration = new ServletRegistrationBean(\n\t\t\t\tnew ServletContainer(), this.path);\n\t\tregistration.addInitParameter(ServletProperties.JAXRS_APPLICATION_CLASS,\n\t\t\t\tconfigType.getName());\n\t\tregistration.addInitParameter(CommonProperties.METAINF_SERVICES_LOOKUP_DISABLE,  "true");\n\t\tregistration.setName("jerseyServlet");\n\t\treturn registration;\n\t}\n\n\t@Override\n\tpublic void onStartup(ServletContext servletContext) throws ServletException {\n\t\t// We need to switch *off* the Jersey WebApplicationInitializer because it\n\t\t// will try and register a ContextLoaderListener which we don\'t need\n\t\tservletContext.setInitParameter("contextConfigLocation", "<NONE>");\n\t}\n\n\tprivate static String findPath(ApplicationPath annotation) {\n\t\t// Jersey doesn\'t like to be the default servlet, so map to /* as a fallback\n\t\tif (annotation == null) {\n\t\t\treturn "/*";\n\t\t}\n\t\tString path = annotation.value();\n\t\treturn ((path.isEmpty() || path.equals("/")) ? "/*" : path + "/*");\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jersey;\n\nimport javax.annotation.PostConstruct;\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletException;\nimport javax.ws.rs.ApplicationPath;\n\nimport org.glassfish.jersey.server.ResourceConfig;\nimport org.glassfish.jersey.servlet.ServletContainer;\nimport org.glassfish.jersey.servlet.ServletProperties;\nimport org.springframework.beans.factory.ListableBeanFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration;\nimport org.springframework.boot.context.embedded.ServletRegistrationBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.AnnotationUtils;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.web.WebApplicationInitializer;\nimport org.springframework.web.filter.RequestContextFilter;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Jersey.\n *\n * @author Dave Syer\n * @author Andy Wilkinson\n */\n@Configuration\n@ConditionalOnClass(name = {\n\t\t"org.glassfish.jersey.server.spring.SpringComponentProvider",\n\t\t"javax.servlet.ServletRegistration" })\n@ConditionalOnBean(type = "org.glassfish.jersey.server.ResourceConfig")\n@ConditionalOnWebApplication\n@Order(Ordered.HIGHEST_PRECEDENCE)\n@AutoConfigureBefore(DispatcherServletAutoConfiguration.class)\npublic class JerseyAutoConfiguration implements WebApplicationInitializer {\n\n\t@Autowired\n\tprivate ListableBeanFactory context;\n\n\t@Autowired\n\tprivate ResourceConfig config;\n\n\tprivate String path;\n\n\t@PostConstruct\n\tpublic void path() {\n\t\tthis.path = findPath(AnnotationUtils.findAnnotation(this.config.getClass(),\n\t\t\t\tApplicationPath.class));\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic RequestContextFilter requestContextFilter() {\n\t\treturn new RequestContextFilter();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "jerseyServletRegistration")\n\tpublic ServletRegistrationBean jerseyServletRegistration() {\n\t\tClass<? extends ResourceConfig> configType = this.config.getClass();\n\t\tServletRegistrationBean registration = new ServletRegistrationBean(\n\t\t\t\tnew ServletContainer(), this.path);\n\t\tregistration.addInitParameter(ServletProperties.JAXRS_APPLICATION_CLASS,\n\t\t\t\tconfigType.getName());\n\t\tregistration.setName("jerseyServlet");\n\t\treturn registration;\n\t}\n\n\t@Override\n\tpublic void onStartup(ServletContext servletContext) throws ServletException {\n\t\t// We need to switch *off* the Jersey WebApplicationInitializer because it\n\t\t// will try and register a ContextLoaderListener which we don\'t need\n\t\tservletContext.setInitParameter("contextConfigLocation", "<NONE>");\n\t}\n\n\tprivate static String findPath(ApplicationPath annotation) {\n\t\t// Jersey doesn\'t like to be the default servlet, so map to /* as a fallback\n\t\tif (annotation == null) {\n\t\t\treturn "/*";\n\t\t}\n\t\tString path = annotation.value();\n\t\treturn ((path.isEmpty() || path.equals("/")) ? "/*" : path + "/*");\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
