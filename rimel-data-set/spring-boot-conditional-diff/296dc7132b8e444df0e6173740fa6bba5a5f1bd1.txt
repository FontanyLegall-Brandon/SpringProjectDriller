@@ -0,0 +1,171 @@
+
+
+package org.springframework.boot.test.autoconfigure.json;
+
+import java.lang.reflect.Constructor;
+import java.lang.reflect.Field;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.google.gson.Gson;
+
+import org.springframework.beans.BeanUtils;
+import org.springframework.beans.BeansException;
+import org.springframework.beans.factory.FactoryBean;
+import org.springframework.beans.factory.config.BeanPostProcessor;
+import org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessorAdapter;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
+import org.springframework.boot.test.json.AbstractJsonMarshalTester;
+import org.springframework.boot.test.json.BasicJsonTester;
+import org.springframework.boot.test.json.GsonTester;
+import org.springframework.boot.test.json.JacksonTester;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Scope;
+import org.springframework.core.ResolvableType;
+import org.springframework.test.util.ReflectionTestUtils;
+import org.springframework.util.ReflectionUtils;
+import org.springframework.util.ReflectionUtils.FieldCallback;
+
+
+@Configuration
+@ConditionalOnClass(name = )
+@ConditionalOnProperty()
+public class JsonTestersAutoConfiguration {
+
+	@Bean
+	public static JsonMarshalTestersBeanPostProcessor jsonMarshalTestersBeanPostProcessor() {
+		return new JsonMarshalTestersBeanPostProcessor();
+	}
+
+	@Bean
+	@Scope()
+	public FactoryBean<BasicJsonTester> BasicJsonTesterFactoryBean() {
+		return new JsonTesterFactoryBean<BasicJsonTester, Void>(BasicJsonTester.class,
+				null);
+	}
+
+	@Bean
+	@Scope()
+	@ConditionalOnClass(ObjectMapper.class)
+	@ConditionalOnBean(ObjectMapper.class)
+	public FactoryBean<JacksonTester<?>> jacksonTesterFactoryBean(ObjectMapper mapper) {
+		return new JsonTesterFactoryBean<JacksonTester<?>, ObjectMapper>(
+				JacksonTester.class, mapper);
+	}
+
+	@Bean
+	@Scope()
+	@ConditionalOnClass(ObjectMapper.class)
+	@ConditionalOnBean(Gson.class)
+	public FactoryBean<GsonTester<?>> gsonTesterFactoryBean(Gson gson) {
+		return new JsonTesterFactoryBean<GsonTester<?>, Gson>(GsonTester.class, gson);
+	}
+
+	
+	private class JsonTesterFactoryBean<T, M> implements FactoryBean<T> {
+
+		private final Class<?> objectType;
+
+		private final M marshaller;
+
+		JsonTesterFactoryBean(Class<?> objectType, M marshaller) {
+			this.objectType = objectType;
+			this.marshaller = marshaller;
+
+		}
+
+		@Override
+		public boolean isSingleton() {
+			return false;
+		}
+
+		@Override
+		@SuppressWarnings()
+		public T getObject() throws Exception {
+			if (this.marshaller == null) {
+				Constructor<?> constructor = this.objectType.getDeclaredConstructor();
+				ReflectionUtils.makeAccessible(constructor);
+				return (T) BeanUtils.instantiateClass(constructor);
+			}
+			Constructor<?>[] constructors = this.objectType.getDeclaredConstructors();
+			for (Constructor<?> constructor : constructors) {
+				if (constructor.getParameterTypes().length == 1
+						&& constructor.getParameterTypes()[0]
+								.isInstance(this.marshaller)) {
+					ReflectionUtils.makeAccessible(constructor);
+					return (T) BeanUtils.instantiateClass(constructor, this.marshaller);
+				}
+			}
+			throw new IllegalStateException(
+					this.objectType + );
+		}
+
+		@Override
+		public Class<?> getObjectType() {
+			return this.objectType;
+		}
+
+	}
+
+	
+	private static class JsonMarshalTestersBeanPostProcessor
+			extends InstantiationAwareBeanPostProcessorAdapter {
+
+		@Override
+		public Object postProcessAfterInitialization(final Object bean, String beanName)
+				throws BeansException {
+
+			ReflectionUtils.doWithFields(bean.getClass(), new FieldCallback() {
+
+				@Override
+				public void doWith(Field field)
+						throws IllegalArgumentException, IllegalAccessException {
+					processFiled(bean, field);
+				}
+
+			});
+			return bean;
+		}
+
+		private void processFiled(Object bean, Field field) {
+			if (AbstractJsonMarshalTester.class.isAssignableFrom(field.getType())
+					|| BasicJsonTester.class.isAssignableFrom(field.getType())) {
+				ResolvableType type = ResolvableType.forField(field).getGeneric();
+				ReflectionUtils.makeAccessible(field);
+				Object tester = ReflectionUtils.getField(field, bean);
+				if (tester != null) {
+					ReflectionTestUtils.invokeMethod(tester, ,
+							bean.getClass(), type);
+				}
+			}
+		}
+
+	}
+
+}

