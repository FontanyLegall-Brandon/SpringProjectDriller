{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hateoas/HypermediaAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hateoas/HypermediaAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -67,6 +67,7 @@ public class HypermediaAutoConfiguration {\n \n \t@Configuration\n \t@ConditionalOnMissingBean(LinkDiscoverers.class)\n+\t@ConditionalOnClass(ObjectMapper.class)\n \t@EnableHypermediaSupport(type = HypermediaType.HAL)\n \tprotected static class HypermediaConfiguration {\n \n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.hateoas;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.beans.factory.NoSuchBeanDefinitionException;\nimport org.springframework.beans.factory.config.BeanPostProcessor;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.hateoas.EntityLinks;\nimport org.springframework.hateoas.LinkDiscoverers;\nimport org.springframework.hateoas.Resource;\nimport org.springframework.hateoas.config.EnableEntityLinks;\nimport org.springframework.hateoas.config.EnableHypermediaSupport;\nimport org.springframework.hateoas.config.EnableHypermediaSupport.HypermediaType;\nimport org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;\nimport org.springframework.plugin.core.Plugin;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring HATEOAS\'s\n * {@link EnableHypermediaSupport}.\n *\n * @author Roy Clarkson\n * @author Oliver Gierke\n * @author Andy Wilkinson\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass({ Resource.class, RequestMapping.class, Plugin.class })\n@ConditionalOnWebApplication\n@AutoConfigureAfter({ WebMvcAutoConfiguration.class, JacksonAutoConfiguration.class,\n\t\tHttpMessageConvertersAutoConfiguration.class,\n\t\tRepositoryRestMvcAutoConfiguration.class })\n@EnableConfigurationProperties(HateoasProperties.class)\n@Import(HypermediaHttpMessageConverterConfiguration.class)\npublic class HypermediaAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnMissingBean(LinkDiscoverers.class)\n\t@ConditionalOnClass(ObjectMapper.class)\n\t@EnableHypermediaSupport(type = HypermediaType.HAL)\n\tprotected static class HypermediaConfiguration {\n\n\t\t@Bean\n\t\tpublic static HalObjectMapperConfigurer halObjectMapperConfigurer() {\n\t\t\treturn new HalObjectMapperConfigurer();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(EntityLinks.class)\n\t@EnableEntityLinks\n\tprotected static class EntityLinksConfiguration {\n\n\t}\n\n\t/**\n\t * {@link BeanPostProcessor} to apply any {@link Jackson2ObjectMapperBuilder}\n\t * configuration to the HAL {@link ObjectMapper}.\n\t */\n\tprivate static class HalObjectMapperConfigurer\n\t\t\timplements BeanPostProcessor, BeanFactoryAware {\n\n\t\tprivate BeanFactory beanFactory;\n\n\t\t@Override\n\t\tpublic Object postProcessBeforeInitialization(Object bean, String beanName)\n\t\t\t\tthrows BeansException {\n\t\t\tif (bean instanceof ObjectMapper && "_halObjectMapper".equals(beanName)) {\n\t\t\t\tpostProcessHalObjectMapper((ObjectMapper) bean);\n\t\t\t}\n\t\t\treturn bean;\n\t\t}\n\n\t\tprivate void postProcessHalObjectMapper(ObjectMapper objectMapper) {\n\t\t\ttry {\n\t\t\t\tJackson2ObjectMapperBuilder builder = this.beanFactory\n\t\t\t\t\t\t.getBean(Jackson2ObjectMapperBuilder.class);\n\t\t\t\tbuilder.configure(objectMapper);\n\t\t\t}\n\t\t\tcatch (NoSuchBeanDefinitionException ex) {\n\t\t\t\t// No Jackson configuration required\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic Object postProcessAfterInitialization(Object bean, String beanName)\n\t\t\t\tthrows BeansException {\n\t\t\treturn bean;\n\t\t}\n\n\t\t@Override\n\t\tpublic void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n\t\t\tthis.beanFactory = beanFactory;\n\t\t}\n\n\t}\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.hateoas;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.beans.factory.NoSuchBeanDefinitionException;\nimport org.springframework.beans.factory.config.BeanPostProcessor;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.hateoas.EntityLinks;\nimport org.springframework.hateoas.LinkDiscoverers;\nimport org.springframework.hateoas.Resource;\nimport org.springframework.hateoas.config.EnableEntityLinks;\nimport org.springframework.hateoas.config.EnableHypermediaSupport;\nimport org.springframework.hateoas.config.EnableHypermediaSupport.HypermediaType;\nimport org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;\nimport org.springframework.plugin.core.Plugin;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring HATEOAS\'s\n * {@link EnableHypermediaSupport}.\n *\n * @author Roy Clarkson\n * @author Oliver Gierke\n * @author Andy Wilkinson\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass({ Resource.class, RequestMapping.class, Plugin.class })\n@ConditionalOnWebApplication\n@AutoConfigureAfter({ WebMvcAutoConfiguration.class, JacksonAutoConfiguration.class,\n\t\tHttpMessageConvertersAutoConfiguration.class,\n\t\tRepositoryRestMvcAutoConfiguration.class })\n@EnableConfigurationProperties(HateoasProperties.class)\n@Import(HypermediaHttpMessageConverterConfiguration.class)\npublic class HypermediaAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnMissingBean(LinkDiscoverers.class)\n\t@EnableHypermediaSupport(type = HypermediaType.HAL)\n\tprotected static class HypermediaConfiguration {\n\n\t\t@Bean\n\t\tpublic static HalObjectMapperConfigurer halObjectMapperConfigurer() {\n\t\t\treturn new HalObjectMapperConfigurer();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(EntityLinks.class)\n\t@EnableEntityLinks\n\tprotected static class EntityLinksConfiguration {\n\n\t}\n\n\t/**\n\t * {@link BeanPostProcessor} to apply any {@link Jackson2ObjectMapperBuilder}\n\t * configuration to the HAL {@link ObjectMapper}.\n\t */\n\tprivate static class HalObjectMapperConfigurer\n\t\t\timplements BeanPostProcessor, BeanFactoryAware {\n\n\t\tprivate BeanFactory beanFactory;\n\n\t\t@Override\n\t\tpublic Object postProcessBeforeInitialization(Object bean, String beanName)\n\t\t\t\tthrows BeansException {\n\t\t\tif (bean instanceof ObjectMapper && "_halObjectMapper".equals(beanName)) {\n\t\t\t\tpostProcessHalObjectMapper((ObjectMapper) bean);\n\t\t\t}\n\t\t\treturn bean;\n\t\t}\n\n\t\tprivate void postProcessHalObjectMapper(ObjectMapper objectMapper) {\n\t\t\ttry {\n\t\t\t\tJackson2ObjectMapperBuilder builder = this.beanFactory\n\t\t\t\t\t\t.getBean(Jackson2ObjectMapperBuilder.class);\n\t\t\t\tbuilder.configure(objectMapper);\n\t\t\t}\n\t\t\tcatch (NoSuchBeanDefinitionException ex) {\n\t\t\t\t// No Jackson configuration required\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic Object postProcessAfterInitialization(Object bean, String beanName)\n\t\t\t\tthrows BeansException {\n\t\t\treturn bean;\n\t\t}\n\n\t\t@Override\n\t\tpublic void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n\t\t\tthis.beanFactory = beanFactory;\n\t\t}\n\n\t}\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
