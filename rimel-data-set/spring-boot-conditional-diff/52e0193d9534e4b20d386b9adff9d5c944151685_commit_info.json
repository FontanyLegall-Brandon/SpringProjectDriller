{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsTemplateAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsTemplateAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -24,6 +24,7 @@ import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.jms.JmsTemplateAutoConfiguration.JmsTemplateProperties;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n@@ -37,41 +38,36 @@ import org.springframework.jms.core.JmsTemplate;\n  */\n @Configuration\n @ConditionalOnClass({ JmsTemplate.class, ConnectionFactory.class })\n+@EnableConfigurationProperties(JmsTemplateProperties.class)\n public class JmsTemplateAutoConfiguration {\n \n-\t@Configuration\n-\t@ConditionalOnMissingBean(JmsTemplate.class)\n-\t@EnableConfigurationProperties(JmsTemplateProperties.class)\n-\tprotected static class JmsTemplateCreator {\n-\t\t\n-\t\t@Autowired\n-\t\tprivate JmsTemplateProperties config;\n+\t@Autowired\n+\tprivate JmsTemplateProperties config;\n \n-\t\t@Autowired\n-\t\tprivate ConnectionFactory connectionFactory;\n-\n-\t\t@Bean\n-\t\tpublic JmsTemplate jmsTemplate() {\n-\t\t\tJmsTemplate jmsTemplate = new JmsTemplate(this.connectionFactory);\n-\t\t\tjmsTemplate.setPubSubDomain(this.config.isPubSubDomain());\n-\t\t\treturn jmsTemplate;\n-\t\t}\n+\t@Autowired\n+\tprivate ConnectionFactory connectionFactory;\n \n+\t@Bean\n+\t@ConditionalOnMissingBean(JmsTemplate.class)\n+\tpublic JmsTemplate jmsTemplate() {\n+\t\tJmsTemplate jmsTemplate = new JmsTemplate(this.connectionFactory);\n+\t\tjmsTemplate.setPubSubDomain(this.config.isPubSubDomain());\n+\t\treturn jmsTemplate;\n \t}\n-\t\n+\n \t@ConfigurationProperties(name = "spring.jms")\n \tpublic static class JmsTemplateProperties {\n-\t\t\n+\n \t\tprivate boolean pubSubDomain = true;\n \n \t\tpublic boolean isPubSubDomain() {\n-\t\t\treturn pubSubDomain;\n+\t\t\treturn this.pubSubDomain;\n \t\t}\n \n \t\tpublic void setPubSubDomain(boolean pubSubDomain) {\n \t\t\tthis.pubSubDomain = pubSubDomain;\n \t\t}\n-\t\t\n+\n \t}\n \n \t@Configuration\n@@ -79,37 +75,40 @@ public class JmsTemplateAutoConfiguration {\n \t@ConditionalOnMissingBean(ConnectionFactory.class)\n \t@EnableConfigurationProperties(ActiveMQConnectionFactoryProperties.class)\n \tprotected static class ActiveMQConnectionFactoryCreator {\n-\t\t\n+\n \t\t@Autowired\n \t\tprivate ActiveMQConnectionFactoryProperties config;\n-\t\t\n+\n \t\t@Bean\n-\t\tConnectionFactory connectionFactory() {\n+\t\tConnectionFactory jmsConnectionFactory() {\n \t\t\tif (this.config.isPooled()) {\n \t\t\t\tPooledConnectionFactory pool = new PooledConnectionFactory();\n-\t\t\t\tpool.setConnectionFactory(new ActiveMQConnectionFactory(this.config.getBrokerURL()));\n+\t\t\t\tpool.setConnectionFactory(new ActiveMQConnectionFactory(this.config\n+\t\t\t\t\t\t.getBrokerURL()));\n \t\t\t\treturn pool;\n-\t\t\t} else {\n+\t\t\t}\n+\t\t\telse {\n \t\t\t\treturn new ActiveMQConnectionFactory(this.config.getBrokerURL());\n \t\t\t}\n \t\t}\n \n \t}\n-\t\n+\n \t@ConfigurationProperties(name = "spring.activemq")\n \tpublic static class ActiveMQConnectionFactoryProperties {\n-\t\t\n+\n \t\tprivate String brokerURL = "tcp://localhost:61616";\n-\t\t\n+\n \t\tprivate boolean inMemory = true;\n-\t\t\n+\n \t\tprivate boolean pooled = false;\n-\t\t\n+\n \t\t// Will override brokerURL if inMemory is set to true\n \t\tpublic String getBrokerURL() {\n \t\t\tif (this.inMemory) {\n \t\t\t\treturn "vm://localhost";\n-\t\t\t} else {\n+\t\t\t}\n+\t\t\telse {\n \t\t\t\treturn this.brokerURL;\n \t\t\t}\n \t\t}\n@@ -119,7 +118,7 @@ public class JmsTemplateAutoConfiguration {\n \t\t}\n \n \t\tpublic boolean isInMemory() {\n-\t\t\treturn inMemory;\n+\t\t\treturn this.inMemory;\n \t\t}\n \n \t\tpublic void setInMemory(boolean inMemory) {\n@@ -127,13 +126,13 @@ public class JmsTemplateAutoConfiguration {\n \t\t}\n \n \t\tpublic boolean isPooled() {\n-\t\t\treturn pooled;\n+\t\t\treturn this.pooled;\n \t\t}\n \n \t\tpublic void setPooled(boolean pooled) {\n \t\t\tthis.pooled = pooled;\n \t\t}\n-\t\t\n+\n \t}\n \n }\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jms;\n\nimport javax.jms.ConnectionFactory;\n\nimport org.apache.activemq.ActiveMQConnectionFactory;\nimport org.apache.activemq.pool.PooledConnectionFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.jms.JmsTemplateAutoConfiguration.JmsTemplateProperties;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jms.core.JmsTemplate;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link JmsTemplate}.\n * \n * @author Greg Turnquist\n */\n@Configuration\n@ConditionalOnClass({ JmsTemplate.class, ConnectionFactory.class })\n@EnableConfigurationProperties(JmsTemplateProperties.class)\npublic class JmsTemplateAutoConfiguration {\n\n\t@Autowired\n\tprivate JmsTemplateProperties config;\n\n\t@Autowired\n\tprivate ConnectionFactory connectionFactory;\n\n\t@Bean\n\t@ConditionalOnMissingBean(JmsTemplate.class)\n\tpublic JmsTemplate jmsTemplate() {\n\t\tJmsTemplate jmsTemplate = new JmsTemplate(this.connectionFactory);\n\t\tjmsTemplate.setPubSubDomain(this.config.isPubSubDomain());\n\t\treturn jmsTemplate;\n\t}\n\n\t@ConfigurationProperties(name = "spring.jms")\n\tpublic static class JmsTemplateProperties {\n\n\t\tprivate boolean pubSubDomain = true;\n\n\t\tpublic boolean isPubSubDomain() {\n\t\t\treturn this.pubSubDomain;\n\t\t}\n\n\t\tpublic void setPubSubDomain(boolean pubSubDomain) {\n\t\t\tthis.pubSubDomain = pubSubDomain;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(ActiveMQConnectionFactory.class)\n\t@ConditionalOnMissingBean(ConnectionFactory.class)\n\t@EnableConfigurationProperties(ActiveMQConnectionFactoryProperties.class)\n\tprotected static class ActiveMQConnectionFactoryCreator {\n\n\t\t@Autowired\n\t\tprivate ActiveMQConnectionFactoryProperties config;\n\n\t\t@Bean\n\t\tConnectionFactory jmsConnectionFactory() {\n\t\t\tif (this.config.isPooled()) {\n\t\t\t\tPooledConnectionFactory pool = new PooledConnectionFactory();\n\t\t\t\tpool.setConnectionFactory(new ActiveMQConnectionFactory(this.config\n\t\t\t\t\t\t.getBrokerURL()));\n\t\t\t\treturn pool;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn new ActiveMQConnectionFactory(this.config.getBrokerURL());\n\t\t\t}\n\t\t}\n\n\t}\n\n\t@ConfigurationProperties(name = "spring.activemq")\n\tpublic static class ActiveMQConnectionFactoryProperties {\n\n\t\tprivate String brokerURL = "tcp://localhost:61616";\n\n\t\tprivate boolean inMemory = true;\n\n\t\tprivate boolean pooled = false;\n\n\t\t// Will override brokerURL if inMemory is set to true\n\t\tpublic String getBrokerURL() {\n\t\t\tif (this.inMemory) {\n\t\t\t\treturn "vm://localhost";\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn this.brokerURL;\n\t\t\t}\n\t\t}\n\n\t\tpublic void setBrokerURL(String brokerURL) {\n\t\t\tthis.brokerURL = brokerURL;\n\t\t}\n\n\t\tpublic boolean isInMemory() {\n\t\t\treturn this.inMemory;\n\t\t}\n\n\t\tpublic void setInMemory(boolean inMemory) {\n\t\t\tthis.inMemory = inMemory;\n\t\t}\n\n\t\tpublic boolean isPooled() {\n\t\t\treturn this.pooled;\n\t\t}\n\n\t\tpublic void setPooled(boolean pooled) {\n\t\t\tthis.pooled = pooled;\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jms;\n\nimport javax.jms.ConnectionFactory;\n\nimport org.apache.activemq.ActiveMQConnectionFactory;\nimport org.apache.activemq.pool.PooledConnectionFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jms.core.JmsTemplate;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link JmsTemplate}.\n * \n * @author Greg Turnquist\n */\n@Configuration\n@ConditionalOnClass({ JmsTemplate.class, ConnectionFactory.class })\npublic class JmsTemplateAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnMissingBean(JmsTemplate.class)\n\t@EnableConfigurationProperties(JmsTemplateProperties.class)\n\tprotected static class JmsTemplateCreator {\n\t\t\n\t\t@Autowired\n\t\tprivate JmsTemplateProperties config;\n\n\t\t@Autowired\n\t\tprivate ConnectionFactory connectionFactory;\n\n\t\t@Bean\n\t\tpublic JmsTemplate jmsTemplate() {\n\t\t\tJmsTemplate jmsTemplate = new JmsTemplate(this.connectionFactory);\n\t\t\tjmsTemplate.setPubSubDomain(this.config.isPubSubDomain());\n\t\t\treturn jmsTemplate;\n\t\t}\n\n\t}\n\t\n\t@ConfigurationProperties(name = "spring.jms")\n\tpublic static class JmsTemplateProperties {\n\t\t\n\t\tprivate boolean pubSubDomain = true;\n\n\t\tpublic boolean isPubSubDomain() {\n\t\t\treturn pubSubDomain;\n\t\t}\n\n\t\tpublic void setPubSubDomain(boolean pubSubDomain) {\n\t\t\tthis.pubSubDomain = pubSubDomain;\n\t\t}\n\t\t\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(ActiveMQConnectionFactory.class)\n\t@ConditionalOnMissingBean(ConnectionFactory.class)\n\t@EnableConfigurationProperties(ActiveMQConnectionFactoryProperties.class)\n\tprotected static class ActiveMQConnectionFactoryCreator {\n\t\t\n\t\t@Autowired\n\t\tprivate ActiveMQConnectionFactoryProperties config;\n\t\t\n\t\t@Bean\n\t\tConnectionFactory connectionFactory() {\n\t\t\tif (this.config.isPooled()) {\n\t\t\t\tPooledConnectionFactory pool = new PooledConnectionFactory();\n\t\t\t\tpool.setConnectionFactory(new ActiveMQConnectionFactory(this.config.getBrokerURL()));\n\t\t\t\treturn pool;\n\t\t\t} else {\n\t\t\t\treturn new ActiveMQConnectionFactory(this.config.getBrokerURL());\n\t\t\t}\n\t\t}\n\n\t}\n\t\n\t@ConfigurationProperties(name = "spring.activemq")\n\tpublic static class ActiveMQConnectionFactoryProperties {\n\t\t\n\t\tprivate String brokerURL = "tcp://localhost:61616";\n\t\t\n\t\tprivate boolean inMemory = true;\n\t\t\n\t\tprivate boolean pooled = false;\n\t\t\n\t\t// Will override brokerURL if inMemory is set to true\n\t\tpublic String getBrokerURL() {\n\t\t\tif (this.inMemory) {\n\t\t\t\treturn "vm://localhost";\n\t\t\t} else {\n\t\t\t\treturn this.brokerURL;\n\t\t\t}\n\t\t}\n\n\t\tpublic void setBrokerURL(String brokerURL) {\n\t\t\tthis.brokerURL = brokerURL;\n\t\t}\n\n\t\tpublic boolean isInMemory() {\n\t\t\treturn inMemory;\n\t\t}\n\n\t\tpublic void setInMemory(boolean inMemory) {\n\t\t\tthis.inMemory = inMemory;\n\t\t}\n\n\t\tpublic boolean isPooled() {\n\t\t\treturn pooled;\n\t\t}\n\n\t\tpublic void setPooled(boolean pooled) {\n\t\t\tthis.pooled = pooled;\n\t\t}\n\t\t\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
