{"author_date": "2015-03-30 10:39:41+01:00", "msg": "Add counter and gauge services based on in-memory buffers\n\nThis seems pretty efficient (approx 12M write/s as opposed to 2M with\nthe DefaultCounterService). N.B. there is no need to change most of\nthe rest of the metrics stuff because metrics are write-often, read-\nseldom, so we don't need high performance reads as much.\n\nThe Spring Integration configuration and Dropwizard support has changed\na bit. Functionally very similar and probably opaque to users, but now\nthe messaging operates as an Exporter on a @Scheduled method, and\nDropwizard is a replacement [Gauge,Counter]Service.\n\nMetrics are all\ncollected live in-memory (and can be very fast with Java 8), buffered\nthere and shipped out to a MessageChannel (if one exists with id\n\"metricsChannel\") in a background thread.\n\nWe can still use Java 8 library APIs (like LongAdder) but to compile\nto java 7 compatible byte code we have to forgo the use of lambdas :-(\nand shorthand generics (<>).\n\nFixes gh-2682, fixes gh-2513 (for Java 8 and Dropwizard users)."}