{'_old_path': None, '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/webservices/client/WebServiceTemplateAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2012-2018 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.webservices.client;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.webservices.client.WebServiceTemplateBuilder;\n+import org.springframework.boot.webservices.client.WebServiceTemplateCustomizer;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.annotation.AnnotationAwareOrderComparator;\n+import org.springframework.oxm.Marshaller;\n+import org.springframework.oxm.Unmarshaller;\n+import org.springframework.util.CollectionUtils;\n+import org.springframework.ws.client.core.WebServiceTemplate;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for {@link WebServiceTemplate}.\n+ *\n+ * @author Dmytro Nosan\n+ */\n+@Configuration\n+@ConditionalOnClass({ WebServiceTemplateBuilder.class, WebServiceTemplate.class,\n+\t\tUnmarshaller.class, Marshaller.class })\n+public class WebServiceTemplateAutoConfiguration {\n+\n+\tprivate final ObjectProvider<List<WebServiceTemplateCustomizer>> webServiceTemplateCustomizers;\n+\n+\tpublic WebServiceTemplateAutoConfiguration(\n+\t\t\tObjectProvider<List<WebServiceTemplateCustomizer>> webServiceTemplateCustomizers) {\n+\t\tthis.webServiceTemplateCustomizers = webServiceTemplateCustomizers;\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic WebServiceTemplateBuilder webServiceTemplateBuilder() {\n+\t\tWebServiceTemplateBuilder builder = new WebServiceTemplateBuilder();\n+\t\tList<WebServiceTemplateCustomizer> customizers = this.webServiceTemplateCustomizers\n+\t\t\t\t.getIfAvailable();\n+\t\tif (!CollectionUtils.isEmpty(customizers)) {\n+\t\t\tcustomizers = new ArrayList<>(customizers);\n+\t\t\tAnnotationAwareOrderComparator.sort(customizers);\n+\t\t\tbuilder = builder.setCustomizers(customizers);\n+\t\t}\n+\t\treturn builder;\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.webservices.client;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.webservices.client.WebServiceTemplateBuilder;\nimport org.springframework.boot.webservices.client.WebServiceTemplateCustomizer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.AnnotationAwareOrderComparator;\nimport org.springframework.oxm.Marshaller;\nimport org.springframework.oxm.Unmarshaller;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.ws.client.core.WebServiceTemplate;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link WebServiceTemplate}.\n *\n * @author Dmytro Nosan\n */\n@Configuration\n@ConditionalOnClass({ WebServiceTemplateBuilder.class, WebServiceTemplate.class,\n\t\tUnmarshaller.class, Marshaller.class })\npublic class WebServiceTemplateAutoConfiguration {\n\n\tprivate final ObjectProvider<List<WebServiceTemplateCustomizer>> webServiceTemplateCustomizers;\n\n\tpublic WebServiceTemplateAutoConfiguration(\n\t\t\tObjectProvider<List<WebServiceTemplateCustomizer>> webServiceTemplateCustomizers) {\n\t\tthis.webServiceTemplateCustomizers = webServiceTemplateCustomizers;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic WebServiceTemplateBuilder webServiceTemplateBuilder() {\n\t\tWebServiceTemplateBuilder builder = new WebServiceTemplateBuilder();\n\t\tList<WebServiceTemplateCustomizer> customizers = this.webServiceTemplateCustomizers\n\t\t\t\t.getIfAvailable();\n\t\tif (!CollectionUtils.isEmpty(customizers)) {\n\t\t\tcustomizers = new ArrayList<>(customizers);\n\t\t\tAnnotationAwareOrderComparator.sort(customizers);\n\t\t\tbuilder = builder.setCustomizers(customizers);\n\t\t}\n\t\treturn builder;\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
