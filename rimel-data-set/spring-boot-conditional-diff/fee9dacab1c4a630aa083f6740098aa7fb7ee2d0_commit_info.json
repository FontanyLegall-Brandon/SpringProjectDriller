{'_old_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/datadog/DatadogMetricsExportAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/datadog/DatadogMetricsExportAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -24,9 +24,9 @@ import org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfigu\n import org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration;\n import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n@@ -41,7 +41,7 @@ import org.springframework.context.annotation.Configuration;\n @AutoConfigureBefore({ MetricsAutoConfiguration.class,\n \t\tSimpleMetricsExportAutoConfiguration.class })\n @ConditionalOnClass(DatadogMeterRegistry.class)\n-@ConditionalOnProperty("management.metrics.export.datadog.api-key")\n+@ConditionalOnBean(Clock.class)\n @EnableConfigurationProperties(DatadogProperties.class)\n public class DatadogMetricsExportAutoConfiguration {\n \n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics.export.datadog;\n\nimport io.micrometer.core.instrument.Clock;\nimport io.micrometer.datadog.DatadogConfig;\nimport io.micrometer.datadog.DatadogMeterRegistry;\n\nimport org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for exporting metrics to Datadog.\n *\n * @author Jon Schneider\n * @since 2.0.0\n */\n@Configuration\n@AutoConfigureBefore({ MetricsAutoConfiguration.class,\n\t\tSimpleMetricsExportAutoConfiguration.class })\n@ConditionalOnClass(DatadogMeterRegistry.class)\n@ConditionalOnBean(Clock.class)\n@EnableConfigurationProperties(DatadogProperties.class)\npublic class DatadogMetricsExportAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic DatadogConfig datadogConfig(DatadogProperties datadogProperties) {\n\t\treturn new DatadogPropertiesConfigAdapter(datadogProperties);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic DatadogMeterRegistry datadogMeterRegistry(DatadogConfig datadogConfig,\n\t\t\tClock clock) {\n\t\treturn new DatadogMeterRegistry(datadogConfig, clock);\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics.export.datadog;\n\nimport io.micrometer.core.instrument.Clock;\nimport io.micrometer.datadog.DatadogConfig;\nimport io.micrometer.datadog.DatadogMeterRegistry;\n\nimport org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for exporting metrics to Datadog.\n *\n * @author Jon Schneider\n * @since 2.0.0\n */\n@Configuration\n@AutoConfigureBefore({ MetricsAutoConfiguration.class,\n\t\tSimpleMetricsExportAutoConfiguration.class })\n@ConditionalOnClass(DatadogMeterRegistry.class)\n@ConditionalOnProperty("management.metrics.export.datadog.api-key")\n@EnableConfigurationProperties(DatadogProperties.class)\npublic class DatadogMetricsExportAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic DatadogConfig datadogConfig(DatadogProperties datadogProperties) {\n\t\treturn new DatadogPropertiesConfigAdapter(datadogProperties);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic DatadogMeterRegistry datadogMeterRegistry(DatadogConfig datadogConfig,\n\t\t\tClock clock) {\n\t\treturn new DatadogMeterRegistry(datadogConfig, clock);\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
