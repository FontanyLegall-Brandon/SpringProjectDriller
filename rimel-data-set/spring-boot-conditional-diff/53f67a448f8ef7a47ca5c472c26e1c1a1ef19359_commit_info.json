{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/SpringSecurityOAuth2ResourceServerConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2012-2014 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.security.oauth2.resource;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionOutcome;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.autoconfigure.condition.OnBeanCondition;\n+import org.springframework.boot.autoconfigure.condition.SpringBootCondition;\n+import org.springframework.boot.autoconfigure.security.SecurityProperties;\n+import org.springframework.boot.autoconfigure.security.oauth2.ClientCredentialsProperties;\n+import org.springframework.boot.autoconfigure.security.oauth2.resource.SpringSecurityOAuth2ResourceServerConfiguration.ResourceServerCondition;\n+import org.springframework.boot.bind.RelaxedPropertyResolver;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.ConditionContext;\n+import org.springframework.context.annotation.Conditional;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.ConfigurationCondition;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.core.env.Environment;\n+import org.springframework.core.type.AnnotatedTypeMetadata;\n+import org.springframework.core.type.StandardAnnotationMetadata;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration;\n+import org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;\n+import org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfiguration;\n+import org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurer;\n+import org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;\n+import org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer;\n+import org.springframework.util.ClassUtils;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Auto-configure a Spring Security OAuth2 resource server. Back off if another\n+ * {@link ResourceServerConfigurer} already exists or if resource server not enabled.\n+ *\n+ * @author Greg Turnquist\n+ * @author Dave Syer\n+ */\n+@Configuration\n+@Conditional(ResourceServerCondition.class)\n+@ConditionalOnClass({ EnableResourceServer.class, SecurityProperties.class })\n+@ConditionalOnWebApplication\n+@ConditionalOnBean(ResourceServerConfiguration.class)\n+@Import(ResourceServerTokenServicesConfiguration.class)\n+public class SpringSecurityOAuth2ResourceServerConfiguration {\n+\n+\t@Autowired\n+\tprivate ResourceServerProperties resource;\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean(ResourceServerConfigurer.class)\n+\tpublic ResourceServerConfigurer resourceServer() {\n+\t\treturn new ResourceSecurityConfigurer(this.resource);\n+\t}\n+\n+\t@Configuration\n+\tprotected static class ResourceServerPropertiesConfiguration {\n+\n+\t\t@Autowired\n+\t\tprivate ClientCredentialsProperties credentials;\n+\n+\t\t@Bean\n+\t\tpublic ResourceServerProperties resourceServerProperties() {\n+\t\t\treturn new ResourceServerProperties(this.credentials.getClientId(),\n+\t\t\t\t\tthis.credentials.getClientSecret());\n+\t\t}\n+\t}\n+\n+\tprotected static class ResourceSecurityConfigurer extends\n+\t\t\tResourceServerConfigurerAdapter {\n+\n+\t\tprivate ResourceServerProperties resource;\n+\n+\t\t@Autowired\n+\t\tpublic ResourceSecurityConfigurer(ResourceServerProperties resource) {\n+\t\t\tthis.resource = resource;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void configure(ResourceServerSecurityConfigurer resources)\n+\t\t\t\tthrows Exception {\n+\t\t\tresources.resourceId(this.resource.getResourceId());\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void configure(HttpSecurity http) throws Exception {\n+\t\t\thttp.authorizeRequests().anyRequest().authenticated();\n+\t\t}\n+\n+\t}\n+\n+\t@ConditionalOnBean(AuthorizationServerEndpointsConfiguration.class)\n+\tprotected static class ResourceServerCondition extends SpringBootCondition implements\n+\t\t\tConfigurationCondition {\n+\n+\t\tprivate OnBeanCondition condition = new OnBeanCondition();\n+\n+\t\tprivate StandardAnnotationMetadata beanMetaData = new StandardAnnotationMetadata(\n+\t\t\t\tResourceServerCondition.class);\n+\n+\t\t@Override\n+\t\tpublic ConfigurationPhase getConfigurationPhase() {\n+\t\t\treturn ConfigurationPhase.REGISTER_BEAN;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n+\t\t\t\tAnnotatedTypeMetadata metadata) {\n+\t\t\tEnvironment environment = context.getEnvironment();\n+\t\t\tRelaxedPropertyResolver resolver = new RelaxedPropertyResolver(environment);\n+\t\t\tString client = environment\n+\t\t\t\t\t.resolvePlaceholders("${spring.oauth2.client.clientId:}");\n+\t\t\tif (StringUtils.hasText(client)) {\n+\t\t\t\treturn ConditionOutcome.match("found client id");\n+\t\t\t}\n+\t\t\tif (!resolver.getSubProperties("spring.oauth2.resource.jwt").isEmpty()) {\n+\t\t\t\treturn ConditionOutcome.match("found JWT resource configuration");\n+\t\t\t}\n+\t\t\tif (StringUtils.hasText(resolver\n+\t\t\t\t\t.getProperty("spring.oauth2.resource.userInfoUri"))) {\n+\t\t\t\treturn ConditionOutcome\n+\t\t\t\t\t\t.match("found UserInfo URI resource configuration");\n+\t\t\t}\n+\t\t\tif (ClassUtils\n+\t\t\t\t\t.isPresent(\n+\t\t\t\t\t\t\t"org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration",\n+\t\t\t\t\t\t\tnull)) {\n+\t\t\t\tif (this.condition.matches(context, this.beanMetaData)) {\n+\t\t\t\t\treturn ConditionOutcome\n+\t\t\t\t\t\t\t.match("found authorization server configuration");\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn ConditionOutcome\n+\t\t\t\t\t.noMatch("found neither client id nor JWT resource nor authorization server");\n+\t\t}\n+\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security.oauth2.resource;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.condition.OnBeanCondition;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.autoconfigure.security.SecurityProperties;\nimport org.springframework.boot.autoconfigure.security.oauth2.ClientCredentialsProperties;\nimport org.springframework.boot.autoconfigure.security.oauth2.resource.SpringSecurityOAuth2ResourceServerConfiguration.ResourceServerCondition;\nimport org.springframework.boot.bind.RelaxedPropertyResolver;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.ConfigurationCondition;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.core.env.Environment;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.core.type.StandardAnnotationMetadata;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfiguration;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurer;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;\nimport org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.StringUtils;\n\n/**\n * Auto-configure a Spring Security OAuth2 resource server. Back off if another\n * {@link ResourceServerConfigurer} already exists or if resource server not enabled.\n *\n * @author Greg Turnquist\n * @author Dave Syer\n */\n@Configuration\n@Conditional(ResourceServerCondition.class)\n@ConditionalOnClass({ EnableResourceServer.class, SecurityProperties.class })\n@ConditionalOnWebApplication\n@ConditionalOnBean(ResourceServerConfiguration.class)\n@Import(ResourceServerTokenServicesConfiguration.class)\npublic class SpringSecurityOAuth2ResourceServerConfiguration {\n\n\t@Autowired\n\tprivate ResourceServerProperties resource;\n\n\t@Bean\n\t@ConditionalOnMissingBean(ResourceServerConfigurer.class)\n\tpublic ResourceServerConfigurer resourceServer() {\n\t\treturn new ResourceSecurityConfigurer(this.resource);\n\t}\n\n\t@Configuration\n\tprotected static class ResourceServerPropertiesConfiguration {\n\n\t\t@Autowired\n\t\tprivate ClientCredentialsProperties credentials;\n\n\t\t@Bean\n\t\tpublic ResourceServerProperties resourceServerProperties() {\n\t\t\treturn new ResourceServerProperties(this.credentials.getClientId(),\n\t\t\t\t\tthis.credentials.getClientSecret());\n\t\t}\n\t}\n\n\tprotected static class ResourceSecurityConfigurer extends\n\t\t\tResourceServerConfigurerAdapter {\n\n\t\tprivate ResourceServerProperties resource;\n\n\t\t@Autowired\n\t\tpublic ResourceSecurityConfigurer(ResourceServerProperties resource) {\n\t\t\tthis.resource = resource;\n\t\t}\n\n\t\t@Override\n\t\tpublic void configure(ResourceServerSecurityConfigurer resources)\n\t\t\t\tthrows Exception {\n\t\t\tresources.resourceId(this.resource.getResourceId());\n\t\t}\n\n\t\t@Override\n\t\tpublic void configure(HttpSecurity http) throws Exception {\n\t\t\thttp.authorizeRequests().anyRequest().authenticated();\n\t\t}\n\n\t}\n\n\t@ConditionalOnBean(AuthorizationServerEndpointsConfiguration.class)\n\tprotected static class ResourceServerCondition extends SpringBootCondition implements\n\t\t\tConfigurationCondition {\n\n\t\tprivate OnBeanCondition condition = new OnBeanCondition();\n\n\t\tprivate StandardAnnotationMetadata beanMetaData = new StandardAnnotationMetadata(\n\t\t\t\tResourceServerCondition.class);\n\n\t\t@Override\n\t\tpublic ConfigurationPhase getConfigurationPhase() {\n\t\t\treturn ConfigurationPhase.REGISTER_BEAN;\n\t\t}\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tEnvironment environment = context.getEnvironment();\n\t\t\tRelaxedPropertyResolver resolver = new RelaxedPropertyResolver(environment);\n\t\t\tString client = environment\n\t\t\t\t\t.resolvePlaceholders("${spring.oauth2.client.clientId:}");\n\t\t\tif (StringUtils.hasText(client)) {\n\t\t\t\treturn ConditionOutcome.match("found client id");\n\t\t\t}\n\t\t\tif (!resolver.getSubProperties("spring.oauth2.resource.jwt").isEmpty()) {\n\t\t\t\treturn ConditionOutcome.match("found JWT resource configuration");\n\t\t\t}\n\t\t\tif (StringUtils.hasText(resolver\n\t\t\t\t\t.getProperty("spring.oauth2.resource.userInfoUri"))) {\n\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t.match("found UserInfo URI resource configuration");\n\t\t\t}\n\t\t\tif (ClassUtils\n\t\t\t\t\t.isPresent(\n\t\t\t\t\t\t\t"org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration",\n\t\t\t\t\t\t\tnull)) {\n\t\t\t\tif (this.condition.matches(context, this.beanMetaData)) {\n\t\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t\t.match("found authorization server configuration");\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn ConditionOutcome\n\t\t\t\t\t.noMatch("found neither client id nor JWT resource nor authorization server");\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
