{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -19,6 +19,7 @@ package org.springframework.boot.autoconfigure.orm.jpa;\n import java.util.List;\n import java.util.Map;\n \n+import javax.persistence.EntityManagerFactory;\n import javax.sql.DataSource;\n \n import org.springframework.beans.BeansException;\n@@ -105,7 +106,8 @@ public abstract class JpaBaseConfiguration implements BeanFactoryAware {\n \n \t@Bean\n \t@Primary\n-\t@ConditionalOnMissingBean\n+\t@ConditionalOnMissingBean({ LocalContainerEntityManagerFactoryBean.class,\n+\t\t\tEntityManagerFactory.class })\n \tpublic LocalContainerEntityManagerFactoryBean entityManagerFactory(\n \t\t\tEntityManagerFactoryBuilder factoryBuilder) {\n \t\tMap<String, Object> vendorProperties = getVendorProperties();\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.orm.jpa;\n\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.persistence.EntityManagerFactory;\nimport javax.sql.DataSource;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.boot.autoconfigure.AutoConfigurationPackages;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.orm.jpa.JpaTransactionManager;\nimport org.springframework.orm.jpa.JpaVendorAdapter;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.orm.jpa.persistenceunit.PersistenceUnitManager;\nimport org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter;\nimport org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor;\nimport org.springframework.orm.jpa.vendor.AbstractJpaVendorAdapter;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.transaction.jta.JtaTransactionManager;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\n\n/**\n * Base {@link EnableAutoConfiguration Auto-configuration} for JPA.\n *\n * @author Phillip Webb\n * @author Dave Syer\n * @author Oliver Gierke\n */\n@EnableConfigurationProperties(JpaProperties.class)\n@Import(DataSourceInitializedPublisher.Registrar.class)\npublic abstract class JpaBaseConfiguration implements BeanFactoryAware {\n\n\tprivate static final String[] NO_PACKAGES = new String[0];\n\n\tprivate ConfigurableListableBeanFactory beanFactory;\n\n\t@Autowired\n\tprivate DataSource dataSource;\n\n\t@Autowired(required = false)\n\tprivate PersistenceUnitManager persistenceUnitManager;\n\n\t@Autowired\n\tprivate JpaProperties jpaProperties;\n\n\t@Autowired(required = false)\n\tprivate JtaTransactionManager jtaTransactionManager;\n\n\t@Bean\n\t@ConditionalOnMissingBean(PlatformTransactionManager.class)\n\tpublic PlatformTransactionManager transactionManager() {\n\t\treturn new JpaTransactionManager();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic JpaVendorAdapter jpaVendorAdapter() {\n\t\tAbstractJpaVendorAdapter adapter = createJpaVendorAdapter();\n\t\tadapter.setShowSql(this.jpaProperties.isShowSql());\n\t\tadapter.setDatabase(this.jpaProperties.getDatabase());\n\t\tadapter.setDatabasePlatform(this.jpaProperties.getDatabasePlatform());\n\t\tadapter.setGenerateDdl(this.jpaProperties.isGenerateDdl());\n\t\treturn adapter;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic EntityManagerFactoryBuilder entityManagerFactoryBuilder(\n\t\t\tJpaVendorAdapter jpaVendorAdapter) {\n\t\tEntityManagerFactoryBuilder builder = new EntityManagerFactoryBuilder(\n\t\t\t\tjpaVendorAdapter, this.jpaProperties, this.persistenceUnitManager);\n\t\tbuilder.setCallback(getVendorCallback());\n\t\treturn builder;\n\t}\n\n\t@Bean\n\t@Primary\n\t@ConditionalOnMissingBean({ LocalContainerEntityManagerFactoryBean.class,\n\t\t\tEntityManagerFactory.class })\n\tpublic LocalContainerEntityManagerFactoryBean entityManagerFactory(\n\t\t\tEntityManagerFactoryBuilder factoryBuilder) {\n\t\tMap<String, Object> vendorProperties = getVendorProperties();\n\t\tcustomizeVendorProperties(vendorProperties);\n\t\treturn factoryBuilder.dataSource(this.dataSource).packages(getPackagesToScan())\n\t\t\t\t.properties(vendorProperties).jta(isJta()).build();\n\t}\n\n\tprotected abstract AbstractJpaVendorAdapter createJpaVendorAdapter();\n\n\tprotected abstract Map<String, Object> getVendorProperties();\n\n\t/**\n\t * Customize vendor properties before they are used. Allows for post processing (for\n\t * example to configure JTA specific settings).\n\t * @param vendorProperties the vendor properties to customize\n\t */\n\tprotected void customizeVendorProperties(Map<String, Object> vendorProperties) {\n\t}\n\n\tprotected EntityManagerFactoryBuilder.EntityManagerFactoryBeanCallback getVendorCallback() {\n\t\treturn null;\n\t}\n\n\tprotected String[] getPackagesToScan() {\n\t\tif (AutoConfigurationPackages.has(this.beanFactory)) {\n\t\t\tList<String> basePackages = AutoConfigurationPackages.get(this.beanFactory);\n\t\t\treturn basePackages.toArray(new String[basePackages.size()]);\n\t\t}\n\t\treturn NO_PACKAGES;\n\t}\n\n\t/**\n\t * @return the jtaTransactionManager or {@code null}\n\t */\n\tprotected JtaTransactionManager getJtaTransactionManager() {\n\t\treturn this.jtaTransactionManager;\n\t}\n\n\t/**\n\t * Returns if a JTA {@link PlatformTransactionManager} is being used.\n\t * @return if a JTA transaction manager is being used\n\t */\n\tprotected final boolean isJta() {\n\t\treturn (this.jtaTransactionManager != null);\n\t}\n\n\t@Override\n\tpublic void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n\t\tthis.beanFactory = (ConfigurableListableBeanFactory) beanFactory;\n\t}\n\n\t@Configuration\n\t@ConditionalOnWebApplication\n\t@ConditionalOnClass(WebMvcConfigurerAdapter.class)\n\t@ConditionalOnMissingBean({ OpenEntityManagerInViewInterceptor.class,\n\t\t\tOpenEntityManagerInViewFilter.class })\n\t@ConditionalOnProperty(prefix = "spring.jpa", name = "open-in-view", havingValue = "true", matchIfMissing = true)\n\tprotected static class JpaWebConfiguration {\n\n\t\t// Defined as a nested config to ensure WebMvcConfigurerAdapter is not read when\n\t\t// not on the classpath\n\t\t@Configuration\n\t\tprotected static class JpaWebMvcConfiguration extends WebMvcConfigurerAdapter {\n\n\t\t\t@Bean\n\t\t\tpublic OpenEntityManagerInViewInterceptor openEntityManagerInViewInterceptor() {\n\t\t\t\treturn new OpenEntityManagerInViewInterceptor();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void addInterceptors(InterceptorRegistry registry) {\n\t\t\t\tregistry.addWebRequestInterceptor(openEntityManagerInViewInterceptor());\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.orm.jpa;\n\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.boot.autoconfigure.AutoConfigurationPackages;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.orm.jpa.JpaTransactionManager;\nimport org.springframework.orm.jpa.JpaVendorAdapter;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.orm.jpa.persistenceunit.PersistenceUnitManager;\nimport org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter;\nimport org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor;\nimport org.springframework.orm.jpa.vendor.AbstractJpaVendorAdapter;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.transaction.jta.JtaTransactionManager;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\n\n/**\n * Base {@link EnableAutoConfiguration Auto-configuration} for JPA.\n *\n * @author Phillip Webb\n * @author Dave Syer\n * @author Oliver Gierke\n */\n@EnableConfigurationProperties(JpaProperties.class)\n@Import(DataSourceInitializedPublisher.Registrar.class)\npublic abstract class JpaBaseConfiguration implements BeanFactoryAware {\n\n\tprivate static final String[] NO_PACKAGES = new String[0];\n\n\tprivate ConfigurableListableBeanFactory beanFactory;\n\n\t@Autowired\n\tprivate DataSource dataSource;\n\n\t@Autowired(required = false)\n\tprivate PersistenceUnitManager persistenceUnitManager;\n\n\t@Autowired\n\tprivate JpaProperties jpaProperties;\n\n\t@Autowired(required = false)\n\tprivate JtaTransactionManager jtaTransactionManager;\n\n\t@Bean\n\t@ConditionalOnMissingBean(PlatformTransactionManager.class)\n\tpublic PlatformTransactionManager transactionManager() {\n\t\treturn new JpaTransactionManager();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic JpaVendorAdapter jpaVendorAdapter() {\n\t\tAbstractJpaVendorAdapter adapter = createJpaVendorAdapter();\n\t\tadapter.setShowSql(this.jpaProperties.isShowSql());\n\t\tadapter.setDatabase(this.jpaProperties.getDatabase());\n\t\tadapter.setDatabasePlatform(this.jpaProperties.getDatabasePlatform());\n\t\tadapter.setGenerateDdl(this.jpaProperties.isGenerateDdl());\n\t\treturn adapter;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic EntityManagerFactoryBuilder entityManagerFactoryBuilder(\n\t\t\tJpaVendorAdapter jpaVendorAdapter) {\n\t\tEntityManagerFactoryBuilder builder = new EntityManagerFactoryBuilder(\n\t\t\t\tjpaVendorAdapter, this.jpaProperties, this.persistenceUnitManager);\n\t\tbuilder.setCallback(getVendorCallback());\n\t\treturn builder;\n\t}\n\n\t@Bean\n\t@Primary\n\t@ConditionalOnMissingBean\n\tpublic LocalContainerEntityManagerFactoryBean entityManagerFactory(\n\t\t\tEntityManagerFactoryBuilder factoryBuilder) {\n\t\tMap<String, Object> vendorProperties = getVendorProperties();\n\t\tcustomizeVendorProperties(vendorProperties);\n\t\treturn factoryBuilder.dataSource(this.dataSource).packages(getPackagesToScan())\n\t\t\t\t.properties(vendorProperties).jta(isJta()).build();\n\t}\n\n\tprotected abstract AbstractJpaVendorAdapter createJpaVendorAdapter();\n\n\tprotected abstract Map<String, Object> getVendorProperties();\n\n\t/**\n\t * Customize vendor properties before they are used. Allows for post processing (for\n\t * example to configure JTA specific settings).\n\t * @param vendorProperties the vendor properties to customize\n\t */\n\tprotected void customizeVendorProperties(Map<String, Object> vendorProperties) {\n\t}\n\n\tprotected EntityManagerFactoryBuilder.EntityManagerFactoryBeanCallback getVendorCallback() {\n\t\treturn null;\n\t}\n\n\tprotected String[] getPackagesToScan() {\n\t\tif (AutoConfigurationPackages.has(this.beanFactory)) {\n\t\t\tList<String> basePackages = AutoConfigurationPackages.get(this.beanFactory);\n\t\t\treturn basePackages.toArray(new String[basePackages.size()]);\n\t\t}\n\t\treturn NO_PACKAGES;\n\t}\n\n\t/**\n\t * @return the jtaTransactionManager or {@code null}\n\t */\n\tprotected JtaTransactionManager getJtaTransactionManager() {\n\t\treturn this.jtaTransactionManager;\n\t}\n\n\t/**\n\t * Returns if a JTA {@link PlatformTransactionManager} is being used.\n\t * @return if a JTA transaction manager is being used\n\t */\n\tprotected final boolean isJta() {\n\t\treturn (this.jtaTransactionManager != null);\n\t}\n\n\t@Override\n\tpublic void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n\t\tthis.beanFactory = (ConfigurableListableBeanFactory) beanFactory;\n\t}\n\n\t@Configuration\n\t@ConditionalOnWebApplication\n\t@ConditionalOnClass(WebMvcConfigurerAdapter.class)\n\t@ConditionalOnMissingBean({ OpenEntityManagerInViewInterceptor.class,\n\t\t\tOpenEntityManagerInViewFilter.class })\n\t@ConditionalOnProperty(prefix = "spring.jpa", name = "open-in-view", havingValue = "true", matchIfMissing = true)\n\tprotected static class JpaWebConfiguration {\n\n\t\t// Defined as a nested config to ensure WebMvcConfigurerAdapter is not read when\n\t\t// not on the classpath\n\t\t@Configuration\n\t\tprotected static class JpaWebMvcConfiguration extends WebMvcConfigurerAdapter {\n\n\t\t\t@Bean\n\t\t\tpublic OpenEntityManagerInViewInterceptor openEntityManagerInViewInterceptor() {\n\t\t\t\treturn new OpenEntityManagerInViewInterceptor();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void addInterceptors(InterceptorRegistry registry) {\n\t\t\t\tregistry.addWebRequestInterceptor(openEntityManagerInViewInterceptor());\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
