{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/velocity/VelocityAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/velocity/VelocityAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -30,6 +30,7 @@ import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnNotWebApplication;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n import org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n@@ -124,6 +125,7 @@ public class VelocityAutoConfiguration {\n \n \t\t@Bean\n \t\t@ConditionalOnMissingBean(name = "velocityViewResolver")\n+\t\t@ConditionalOnProperty(name = "spring.velocity.enabled", matchIfMissing = true)\n \t\tpublic VelocityViewResolver velocityViewResolver() {\n \t\t\tVelocityViewResolver resolver = new VelocityViewResolver();\n \t\t\tthis.properties.applyToViewResolver(resolver);\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.velocity;\n\nimport java.io.IOException;\nimport java.util.Properties;\n\nimport javax.annotation.PostConstruct;\nimport javax.servlet.Servlet;\n\nimport org.apache.velocity.app.VelocityEngine;\nimport org.apache.velocity.exception.VelocityException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnNotWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.ui.velocity.VelocityEngineFactory;\nimport org.springframework.ui.velocity.VelocityEngineFactoryBean;\nimport org.springframework.util.Assert;\nimport org.springframework.web.servlet.view.velocity.VelocityConfig;\nimport org.springframework.web.servlet.view.velocity.VelocityConfigurer;\nimport org.springframework.web.servlet.view.velocity.VelocityViewResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Velocity.\n *\n * @author Andy Wilkinson\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass({ VelocityEngine.class, VelocityEngineFactory.class })\n@AutoConfigureAfter(WebMvcAutoConfiguration.class)\n@EnableConfigurationProperties(VelocityProperties.class)\npublic class VelocityAutoConfiguration {\n\n\t@Autowired\n\tprivate final ResourceLoader resourceLoader = new DefaultResourceLoader();\n\n\t@Autowired\n\tprivate VelocityProperties properties;\n\n\t@PostConstruct\n\tpublic void checkTemplateLocationExists() {\n\t\tif (this.properties.isCheckTemplateLocation()) {\n\t\t\tResource resource = this.resourceLoader.getResource(this.properties\n\t\t\t\t\t.getResourceLoaderPath());\n\t\t\tAssert.state(resource.exists(), "Cannot find template location: " + resource\n\t\t\t\t\t+ " (please add some templates, check your Velocity configuration, "\n\t\t\t\t\t+ "or set spring.velocity.checkTemplateLocation=false)");\n\t\t}\n\t}\n\n\tprotected static class VelocityConfiguration {\n\n\t\t@Autowired\n\t\tprotected VelocityProperties properties;\n\n\t\tprotected void applyProperties(VelocityEngineFactory factory) {\n\t\t\tfactory.setResourceLoaderPath(this.properties.getResourceLoaderPath());\n\t\t\tfactory.setPreferFileSystemAccess(this.properties.isPreferFileSystemAccess());\n\t\t\tProperties velocityProperties = new Properties();\n\t\t\tvelocityProperties.putAll(this.properties.getProperties());\n\t\t\tfactory.setVelocityProperties(velocityProperties);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnNotWebApplication\n\tpublic static class VelocityNonWebConfiguration extends VelocityConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic VelocityEngineFactoryBean velocityConfiguration() {\n\t\t\tVelocityEngineFactoryBean velocityEngineFactoryBean = new VelocityEngineFactoryBean();\n\t\t\tapplyProperties(velocityEngineFactoryBean);\n\t\t\treturn velocityEngineFactoryBean;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(Servlet.class)\n\t@ConditionalOnWebApplication\n\tpublic static class VelocityWebConfiguration extends VelocityConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(VelocityConfig.class)\n\t\tpublic VelocityConfigurer velocityConfigurer() {\n\t\t\tVelocityConfigurer configurer = new VelocityConfigurer();\n\t\t\tapplyProperties(configurer);\n\t\t\treturn configurer;\n\t\t}\n\n\t\t@Bean\n\t\tpublic VelocityEngine velocityEngine(VelocityConfigurer configurer)\n\t\t\t\tthrows VelocityException, IOException {\n\t\t\treturn configurer.getVelocityEngine();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "velocityViewResolver")\n\t\t@ConditionalOnProperty(name = "spring.velocity.enabled", matchIfMissing = true)\n\t\tpublic VelocityViewResolver velocityViewResolver() {\n\t\t\tVelocityViewResolver resolver = new VelocityViewResolver();\n\t\t\tthis.properties.applyToViewResolver(resolver);\n\t\t\treturn resolver;\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.velocity;\n\nimport java.io.IOException;\nimport java.util.Properties;\n\nimport javax.annotation.PostConstruct;\nimport javax.servlet.Servlet;\n\nimport org.apache.velocity.app.VelocityEngine;\nimport org.apache.velocity.exception.VelocityException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnNotWebApplication;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.ui.velocity.VelocityEngineFactory;\nimport org.springframework.ui.velocity.VelocityEngineFactoryBean;\nimport org.springframework.util.Assert;\nimport org.springframework.web.servlet.view.velocity.VelocityConfig;\nimport org.springframework.web.servlet.view.velocity.VelocityConfigurer;\nimport org.springframework.web.servlet.view.velocity.VelocityViewResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Velocity.\n *\n * @author Andy Wilkinson\n * @since 1.1.0\n */\n@Configuration\n@ConditionalOnClass({ VelocityEngine.class, VelocityEngineFactory.class })\n@AutoConfigureAfter(WebMvcAutoConfiguration.class)\n@EnableConfigurationProperties(VelocityProperties.class)\npublic class VelocityAutoConfiguration {\n\n\t@Autowired\n\tprivate final ResourceLoader resourceLoader = new DefaultResourceLoader();\n\n\t@Autowired\n\tprivate VelocityProperties properties;\n\n\t@PostConstruct\n\tpublic void checkTemplateLocationExists() {\n\t\tif (this.properties.isCheckTemplateLocation()) {\n\t\t\tResource resource = this.resourceLoader.getResource(this.properties\n\t\t\t\t\t.getResourceLoaderPath());\n\t\t\tAssert.state(resource.exists(), "Cannot find template location: " + resource\n\t\t\t\t\t+ " (please add some templates, check your Velocity configuration, "\n\t\t\t\t\t+ "or set spring.velocity.checkTemplateLocation=false)");\n\t\t}\n\t}\n\n\tprotected static class VelocityConfiguration {\n\n\t\t@Autowired\n\t\tprotected VelocityProperties properties;\n\n\t\tprotected void applyProperties(VelocityEngineFactory factory) {\n\t\t\tfactory.setResourceLoaderPath(this.properties.getResourceLoaderPath());\n\t\t\tfactory.setPreferFileSystemAccess(this.properties.isPreferFileSystemAccess());\n\t\t\tProperties velocityProperties = new Properties();\n\t\t\tvelocityProperties.putAll(this.properties.getProperties());\n\t\t\tfactory.setVelocityProperties(velocityProperties);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnNotWebApplication\n\tpublic static class VelocityNonWebConfiguration extends VelocityConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic VelocityEngineFactoryBean velocityConfiguration() {\n\t\t\tVelocityEngineFactoryBean velocityEngineFactoryBean = new VelocityEngineFactoryBean();\n\t\t\tapplyProperties(velocityEngineFactoryBean);\n\t\t\treturn velocityEngineFactoryBean;\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(Servlet.class)\n\t@ConditionalOnWebApplication\n\tpublic static class VelocityWebConfiguration extends VelocityConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(VelocityConfig.class)\n\t\tpublic VelocityConfigurer velocityConfigurer() {\n\t\t\tVelocityConfigurer configurer = new VelocityConfigurer();\n\t\t\tapplyProperties(configurer);\n\t\t\treturn configurer;\n\t\t}\n\n\t\t@Bean\n\t\tpublic VelocityEngine velocityEngine(VelocityConfigurer configurer)\n\t\t\t\tthrows VelocityException, IOException {\n\t\t\treturn configurer.getVelocityEngine();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "velocityViewResolver")\n\t\tpublic VelocityViewResolver velocityViewResolver() {\n\t\t\tVelocityViewResolver resolver = new VelocityViewResolver();\n\t\t\tthis.properties.applyToViewResolver(resolver);\n\t\t\treturn resolver;\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
