@@ -0,0 +1,90 @@
+
+
+package org.springframework.boot.autoconfigure.task;
+
+import java.util.concurrent.Executor;
+import java.util.stream.Collectors;
+
+import org.springframework.beans.factory.ObjectProvider;
+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.context.properties.EnableConfigurationProperties;
+import org.springframework.boot.task.TaskExecutorBuilder;
+import org.springframework.boot.task.TaskExecutorCustomizer;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.core.task.TaskDecorator;
+import org.springframework.core.task.TaskExecutor;
+import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
+
+
+@ConditionalOnClass(ThreadPoolTaskExecutor.class)
+@Configuration
+@EnableConfigurationProperties(TaskProperties.class)
+public class TaskExecutorAutoConfiguration {
+
+	
+	public static final String APPLICATION_TASK_EXECUTOR_BEAN_NAME = ;
+
+	private final TaskProperties properties;
+
+	private final ObjectProvider<TaskExecutorCustomizer> taskExecutorCustomizers;
+
+	private final ObjectProvider<TaskDecorator> taskDecorator;
+
+	public TaskExecutorAutoConfiguration(TaskProperties properties,
+			ObjectProvider<TaskExecutorCustomizer> taskExecutorCustomizers,
+			ObjectProvider<TaskDecorator> taskDecorator) {
+		this.properties = properties;
+		this.taskExecutorCustomizers = taskExecutorCustomizers;
+		this.taskDecorator = taskDecorator;
+	}
+
+	@Bean
+	@ConditionalOnMissingBean
+	public TaskExecutorBuilder taskExecutorBuilder() {
+		TaskExecutorBuilder builder = new TaskExecutorBuilder();
+		TaskProperties.Pool pool = this.properties.getPool();
+		builder = builder.queueCapacity(pool.getQueueCapacity())
+				.corePoolSize(pool.getCoreSize()).maxPoolSize(pool.getMaxSize())
+				.allowCoreThreadTimeOut(pool.isAllowCoreThreadTimeout())
+				.keepAlive(pool.getKeepAlive());
+		builder = builder.threadNamePrefix(this.properties.getThreadNamePrefix());
+		builder = builder.customizers(
+				this.taskExecutorCustomizers.stream().collect(Collectors.toList()));
+		TaskDecorator taskDecorator = this.taskDecorator.getIfUnique();
+		if (taskDecorator != null) {
+			builder = builder.taskDecorator(taskDecorator);
+		}
+		return builder;
+	}
+
+	@Bean(name = APPLICATION_TASK_EXECUTOR_BEAN_NAME)
+	@ConditionalOnMissingBean(Executor.class)
+	public ThreadPoolTaskExecutor applicationTaskExecutor(TaskExecutorBuilder builder) {
+		return builder.build();
+	}
+
+}

