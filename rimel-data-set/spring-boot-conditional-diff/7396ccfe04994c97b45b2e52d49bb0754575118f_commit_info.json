{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2SsoCustomConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2SsoCustomConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -24,16 +24,11 @@ import org.aopalliance.intercept.MethodInvocation;\n import org.springframework.aop.framework.ProxyFactory;\n import org.springframework.beans.BeansException;\n import org.springframework.beans.factory.config.BeanPostProcessor;\n-import org.springframework.boot.autoconfigure.condition.ConditionOutcome;\n-import org.springframework.boot.autoconfigure.condition.SpringBootCondition;\n-import org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2SsoCustomConfiguration.WebSecurityEnhancerCondition;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.ApplicationContextAware;\n-import org.springframework.context.annotation.ConditionContext;\n import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.ImportAware;\n-import org.springframework.core.type.AnnotatedTypeMetadata;\n import org.springframework.core.type.AnnotationMetadata;\n import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n@@ -49,7 +44,7 @@ import org.springframework.util.ReflectionUtils;\n  * @author Dave Syer\n  */\n @Configuration\n-@Conditional(WebSecurityEnhancerCondition.class)\n+@Conditional(EnableOAuth2SsoCondition.class)\n public class OAuth2SsoCustomConfiguration\n \t\timplements ImportAware, BeanPostProcessor, ApplicationContextAware {\n \n@@ -111,24 +106,4 @@ public class OAuth2SsoCustomConfiguration\n \n \t}\n \n-\tprotected static class WebSecurityEnhancerCondition extends SpringBootCondition {\n-\n-\t\t@Override\n-\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n-\t\t\t\tAnnotatedTypeMetadata metadata) {\n-\t\t\tString[] enablers = context.getBeanFactory()\n-\t\t\t\t\t.getBeanNamesForAnnotation(EnableOAuth2Sso.class);\n-\t\t\tfor (String name : enablers) {\n-\t\t\t\tif (context.getBeanFactory().isTypeMatch(name,\n-\t\t\t\t\t\tWebSecurityConfigurerAdapter.class)) {\n-\t\t\t\t\treturn ConditionOutcome.match(\n-\t\t\t\t\t\t\t"found @EnableOAuth2Sso on a WebSecurityConfigurerAdapter");\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn ConditionOutcome.noMatch(\n-\t\t\t\t\t"found no @EnableOAuth2Sso on a WebSecurityConfigurerAdapter");\n-\t\t}\n-\n-\t}\n-\n }\n', 'source_code': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security.oauth2.client;\n\nimport java.lang.reflect.Method;\n\nimport org.aopalliance.intercept.MethodInterceptor;\nimport org.aopalliance.intercept.MethodInvocation;\n\nimport org.springframework.aop.framework.ProxyFactory;\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.config.BeanPostProcessor;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.ImportAware;\nimport org.springframework.core.type.AnnotationMetadata;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.ReflectionUtils;\n\n/**\n * Configuration for OAuth2 Single Sign On (SSO) when there is an existing\n * {@link WebSecurityConfigurerAdapter} provided by the user and annotated with\n * {@code @EnableOAuth2Sso}. The user-provided configuration is enhanced by adding an\n * authentication filter and an authentication entry point.\n *\n * @author Dave Syer\n */\n@Configuration\n@Conditional(EnableOAuth2SsoCondition.class)\npublic class OAuth2SsoCustomConfiguration\n\t\timplements ImportAware, BeanPostProcessor, ApplicationContextAware {\n\n\tprivate Class<?> configType;\n\n\tprivate ApplicationContext applicationContext;\n\n\t@Override\n\tpublic void setApplicationContext(ApplicationContext applicationContext) {\n\t\tthis.applicationContext = applicationContext;\n\t}\n\n\t@Override\n\tpublic void setImportMetadata(AnnotationMetadata importMetadata) {\n\t\tthis.configType = ClassUtils.resolveClassName(importMetadata.getClassName(),\n\t\t\t\tnull);\n\n\t}\n\n\t@Override\n\tpublic Object postProcessBeforeInitialization(Object bean, String beanName)\n\t\t\tthrows BeansException {\n\t\treturn bean;\n\t}\n\n\t@Override\n\tpublic Object postProcessAfterInitialization(Object bean, String beanName)\n\t\t\tthrows BeansException {\n\t\tif (this.configType.isAssignableFrom(bean.getClass())\n\t\t\t\t&& bean instanceof WebSecurityConfigurerAdapter) {\n\t\t\tProxyFactory factory = new ProxyFactory();\n\t\t\tfactory.setTarget(bean);\n\t\t\tfactory.addAdvice(new SsoSecurityAdapter(this.applicationContext));\n\t\t\tbean = factory.getProxy();\n\t\t}\n\t\treturn bean;\n\t}\n\n\tprivate static class SsoSecurityAdapter implements MethodInterceptor {\n\n\t\tprivate SsoSecurityConfigurer configurer;\n\n\t\tSsoSecurityAdapter(ApplicationContext applicationContext) {\n\t\t\tthis.configurer = new SsoSecurityConfigurer(applicationContext);\n\t\t}\n\n\t\t@Override\n\t\tpublic Object invoke(MethodInvocation invocation) throws Throwable {\n\t\t\tif (invocation.getMethod().getName().equals("init")) {\n\t\t\t\tMethod method = ReflectionUtils\n\t\t\t\t\t\t.findMethod(WebSecurityConfigurerAdapter.class, "getHttp");\n\t\t\t\tReflectionUtils.makeAccessible(method);\n\t\t\t\tHttpSecurity http = (HttpSecurity) ReflectionUtils.invokeMethod(method,\n\t\t\t\t\t\tinvocation.getThis());\n\t\t\t\tthis.configurer.configure(http);\n\t\t\t}\n\t\t\treturn invocation.proceed();\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security.oauth2.client;\n\nimport java.lang.reflect.Method;\n\nimport org.aopalliance.intercept.MethodInterceptor;\nimport org.aopalliance.intercept.MethodInvocation;\n\nimport org.springframework.aop.framework.ProxyFactory;\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.config.BeanPostProcessor;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2SsoCustomConfiguration.WebSecurityEnhancerCondition;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.ImportAware;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.core.type.AnnotationMetadata;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.ReflectionUtils;\n\n/**\n * Configuration for OAuth2 Single Sign On (SSO) when there is an existing\n * {@link WebSecurityConfigurerAdapter} provided by the user and annotated with\n * {@code @EnableOAuth2Sso}. The user-provided configuration is enhanced by adding an\n * authentication filter and an authentication entry point.\n *\n * @author Dave Syer\n */\n@Configuration\n@Conditional(WebSecurityEnhancerCondition.class)\npublic class OAuth2SsoCustomConfiguration\n\t\timplements ImportAware, BeanPostProcessor, ApplicationContextAware {\n\n\tprivate Class<?> configType;\n\n\tprivate ApplicationContext applicationContext;\n\n\t@Override\n\tpublic void setApplicationContext(ApplicationContext applicationContext) {\n\t\tthis.applicationContext = applicationContext;\n\t}\n\n\t@Override\n\tpublic void setImportMetadata(AnnotationMetadata importMetadata) {\n\t\tthis.configType = ClassUtils.resolveClassName(importMetadata.getClassName(),\n\t\t\t\tnull);\n\n\t}\n\n\t@Override\n\tpublic Object postProcessBeforeInitialization(Object bean, String beanName)\n\t\t\tthrows BeansException {\n\t\treturn bean;\n\t}\n\n\t@Override\n\tpublic Object postProcessAfterInitialization(Object bean, String beanName)\n\t\t\tthrows BeansException {\n\t\tif (this.configType.isAssignableFrom(bean.getClass())\n\t\t\t\t&& bean instanceof WebSecurityConfigurerAdapter) {\n\t\t\tProxyFactory factory = new ProxyFactory();\n\t\t\tfactory.setTarget(bean);\n\t\t\tfactory.addAdvice(new SsoSecurityAdapter(this.applicationContext));\n\t\t\tbean = factory.getProxy();\n\t\t}\n\t\treturn bean;\n\t}\n\n\tprivate static class SsoSecurityAdapter implements MethodInterceptor {\n\n\t\tprivate SsoSecurityConfigurer configurer;\n\n\t\tSsoSecurityAdapter(ApplicationContext applicationContext) {\n\t\t\tthis.configurer = new SsoSecurityConfigurer(applicationContext);\n\t\t}\n\n\t\t@Override\n\t\tpublic Object invoke(MethodInvocation invocation) throws Throwable {\n\t\t\tif (invocation.getMethod().getName().equals("init")) {\n\t\t\t\tMethod method = ReflectionUtils\n\t\t\t\t\t\t.findMethod(WebSecurityConfigurerAdapter.class, "getHttp");\n\t\t\t\tReflectionUtils.makeAccessible(method);\n\t\t\t\tHttpSecurity http = (HttpSecurity) ReflectionUtils.invokeMethod(method,\n\t\t\t\t\t\tinvocation.getThis());\n\t\t\t\tthis.configurer.configure(http);\n\t\t\t}\n\t\t\treturn invocation.proceed();\n\t\t}\n\n\t}\n\n\tprotected static class WebSecurityEnhancerCondition extends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tString[] enablers = context.getBeanFactory()\n\t\t\t\t\t.getBeanNamesForAnnotation(EnableOAuth2Sso.class);\n\t\t\tfor (String name : enablers) {\n\t\t\t\tif (context.getBeanFactory().isTypeMatch(name,\n\t\t\t\t\t\tWebSecurityConfigurerAdapter.class)) {\n\t\t\t\t\treturn ConditionOutcome.match(\n\t\t\t\t\t\t\t"found @EnableOAuth2Sso on a WebSecurityConfigurerAdapter");\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn ConditionOutcome.noMatch(\n\t\t\t\t\t"found no @EnableOAuth2Sso on a WebSecurityConfigurerAdapter");\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
