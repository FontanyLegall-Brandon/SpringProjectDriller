@@ -24,6 +24,7 @@ import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -46,39 +47,44 @@ import org.springframework.jms.support.destination.DestinationResolver;
 @Import(JmsAnnotationDrivenConfiguration.class)
 public class JmsAutoConfiguration {
 
-	@Autowired
-	private JmsProperties properties;
+	@Configuration
+	protected static class JmsTemplateConfiguration {
 
-	@Autowired
-	private ConnectionFactory connectionFactory;
+		@Autowired
+		private JmsProperties properties;
 
-	@Autowired
-	private ObjectProvider<DestinationResolver> destinationResolver;
+		@Autowired
+		private ObjectProvider<DestinationResolver> destinationResolver;
 
-	@Autowired
-	private ObjectProvider<MessageConverter> messageConverter;
+		@Autowired
+		private ObjectProvider<MessageConverter> messageConverter;
+
+		@Bean
+		@ConditionalOnMissingBean
+		@ConditionalOnSingleCandidate(ConnectionFactory.class)
+		public JmsTemplate jmsTemplate(ConnectionFactory connectionFactory) {
+			JmsTemplate jmsTemplate = new JmsTemplate(connectionFactory);
+			jmsTemplate.setPubSubDomain(this.properties.isPubSubDomain());
+			DestinationResolver destinationResolver = this.destinationResolver.getIfUnique();
+			if (destinationResolver != null) {
+				jmsTemplate.setDestinationResolver(destinationResolver);
+			}
+			MessageConverter messageConverter = this.messageConverter.getIfUnique();
+			if (messageConverter != null) {
+				jmsTemplate.setMessageConverter(messageConverter);
+			}
+			return jmsTemplate;
 
-	@Bean
-	@ConditionalOnMissingBean
-	public JmsTemplate jmsTemplate() {
-		JmsTemplate jmsTemplate = new JmsTemplate(this.connectionFactory);
-		jmsTemplate.setPubSubDomain(this.properties.isPubSubDomain());
-		DestinationResolver destinationResolver = this.destinationResolver.getIfUnique();
-		if (destinationResolver != null) {
-			jmsTemplate.setDestinationResolver(destinationResolver);
-		}
-		MessageConverter messageConverter = this.messageConverter.getIfUnique();
-		if (messageConverter != null) {
-			jmsTemplate.setMessageConverter(messageConverter);
 		}
-		return jmsTemplate;
 	}
 
 	@ConditionalOnClass(JmsMessagingTemplate.class)
-	@ConditionalOnMissingBean(JmsMessagingTemplate.class)
+	@Import(JmsTemplateConfiguration.class)
 	protected static class MessagingTemplateConfiguration {
 
 		@Bean
+		@ConditionalOnMissingBean
+		@ConditionalOnSingleCandidate(JmsTemplate.class)
 		public JmsMessagingTemplate jmsMessagingTemplate(JmsTemplate jmsTemplate) {
 			return new JmsMessagingTemplate(jmsTemplate);
 		}

