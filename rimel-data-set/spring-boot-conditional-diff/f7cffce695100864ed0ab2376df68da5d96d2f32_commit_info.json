{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JndiConnectionFactoryAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JndiConnectionFactoryAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -21,14 +21,19 @@ import java.util.Arrays;\n import javax.jms.ConnectionFactory;\n import javax.naming.NamingException;\n \n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnJndi;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration.JndiOrPropertyCondition;\n import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.core.annotation.AnnotationUtils;\n import org.springframework.jndi.JndiLocatorDelegate;\n+import org.springframework.util.StringUtils;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for JMS provided from JNDI.\n@@ -39,12 +44,26 @@ import org.springframework.jndi.JndiLocatorDelegate;\n @Configuration\n @AutoConfigureBefore(JmsAutoConfiguration.class)\n @ConditionalOnMissingBean(ConnectionFactory.class)\n-@ConditionalOnJndi({ "java:/JmsXA", "java:/XAConnectionFactory" })\n+@Conditional(JndiOrPropertyCondition.class)\n public class JndiConnectionFactoryAutoConfiguration {\n \n+\t// Keep these in sync with the condition below\n+\tprivate static String[] JNDI_LOCATIONS = { "java:/JmsXA", "java:/XAConnectionFactory" };\n+\n+\t@Autowired\n+\tprivate JmsProperties properties;\n+\n \t@Bean\n \tpublic ConnectionFactory connectionFactory() throws NamingException {\n-\t\tfor (String name : getJndiLocations()) {\n+\t\tif (StringUtils.hasLength(this.properties.getJndiName())) {\n+\t\t\treturn new JndiLocatorDelegate().lookup(this.properties.getJndiName(),\n+\t\t\t\t\tConnectionFactory.class);\n+\t\t}\n+\t\treturn findJndiConnectionFactory();\n+\t}\n+\n+\tprivate ConnectionFactory findJndiConnectionFactory() {\n+\t\tfor (String name : JNDI_LOCATIONS) {\n \t\t\ttry {\n \t\t\t\treturn new JndiLocatorDelegate().lookup(name, ConnectionFactory.class);\n \t\t\t}\n@@ -54,11 +73,26 @@ public class JndiConnectionFactoryAutoConfiguration {\n \t\t}\n \t\tthrow new IllegalStateException(\n \t\t\t\t"Unable to find ConnectionFactory in JNDI locations "\n-\t\t\t\t\t\t+ Arrays.asList(getJndiLocations()));\n+\t\t\t\t\t\t+ Arrays.asList(JNDI_LOCATIONS));\n \t}\n \n-\tprivate String[] getJndiLocations() {\n-\t\treturn AnnotationUtils.getAnnotation(getClass(), ConditionalOnJndi.class).value();\n+\t/**\n+\t * Condition for JNDI name or a specific property\n+\t */\n+\tstatic class JndiOrPropertyCondition extends AnyNestedCondition {\n+\n+\t\tpublic JndiOrPropertyCondition() {\n+\t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION);\n+\t\t}\n+\n+\t\t@ConditionalOnJndi({ "java:/JmsXA", "java:/XAConnectionFactory" })\n+\t\tstatic class Jndi {\n+\t\t}\n+\n+\t\t@ConditionalOnProperty(prefix = "spring.jms", name = "jndi-name")\n+\t\tstatic class Property {\n+\t\t}\n+\n \t}\n \n }\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jms;\n\nimport java.util.Arrays;\n\nimport javax.jms.ConnectionFactory;\nimport javax.naming.NamingException;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnJndi;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration.JndiOrPropertyCondition;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jndi.JndiLocatorDelegate;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for JMS provided from JNDI.\n *\n * @author Phillip Webb\n * @since 1.2.0\n */\n@Configuration\n@AutoConfigureBefore(JmsAutoConfiguration.class)\n@ConditionalOnMissingBean(ConnectionFactory.class)\n@Conditional(JndiOrPropertyCondition.class)\npublic class JndiConnectionFactoryAutoConfiguration {\n\n\t// Keep these in sync with the condition below\n\tprivate static String[] JNDI_LOCATIONS = { "java:/JmsXA", "java:/XAConnectionFactory" };\n\n\t@Autowired\n\tprivate JmsProperties properties;\n\n\t@Bean\n\tpublic ConnectionFactory connectionFactory() throws NamingException {\n\t\tif (StringUtils.hasLength(this.properties.getJndiName())) {\n\t\t\treturn new JndiLocatorDelegate().lookup(this.properties.getJndiName(),\n\t\t\t\t\tConnectionFactory.class);\n\t\t}\n\t\treturn findJndiConnectionFactory();\n\t}\n\n\tprivate ConnectionFactory findJndiConnectionFactory() {\n\t\tfor (String name : JNDI_LOCATIONS) {\n\t\t\ttry {\n\t\t\t\treturn new JndiLocatorDelegate().lookup(name, ConnectionFactory.class);\n\t\t\t}\n\t\t\tcatch (NamingException ex) {\n\t\t\t\t// Swallow and continue\n\t\t\t}\n\t\t}\n\t\tthrow new IllegalStateException(\n\t\t\t\t"Unable to find ConnectionFactory in JNDI locations "\n\t\t\t\t\t\t+ Arrays.asList(JNDI_LOCATIONS));\n\t}\n\n\t/**\n\t * Condition for JNDI name or a specific property\n\t */\n\tstatic class JndiOrPropertyCondition extends AnyNestedCondition {\n\n\t\tpublic JndiOrPropertyCondition() {\n\t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION);\n\t\t}\n\n\t\t@ConditionalOnJndi({ "java:/JmsXA", "java:/XAConnectionFactory" })\n\t\tstatic class Jndi {\n\t\t}\n\n\t\t@ConditionalOnProperty(prefix = "spring.jms", name = "jndi-name")\n\t\tstatic class Property {\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jms;\n\nimport java.util.Arrays;\n\nimport javax.jms.ConnectionFactory;\nimport javax.naming.NamingException;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnJndi;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.AnnotationUtils;\nimport org.springframework.jndi.JndiLocatorDelegate;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for JMS provided from JNDI.\n *\n * @author Phillip Webb\n * @since 1.2.0\n */\n@Configuration\n@AutoConfigureBefore(JmsAutoConfiguration.class)\n@ConditionalOnMissingBean(ConnectionFactory.class)\n@ConditionalOnJndi({ "java:/JmsXA", "java:/XAConnectionFactory" })\npublic class JndiConnectionFactoryAutoConfiguration {\n\n\t@Bean\n\tpublic ConnectionFactory connectionFactory() throws NamingException {\n\t\tfor (String name : getJndiLocations()) {\n\t\t\ttry {\n\t\t\t\treturn new JndiLocatorDelegate().lookup(name, ConnectionFactory.class);\n\t\t\t}\n\t\t\tcatch (NamingException ex) {\n\t\t\t\t// Swallow and continue\n\t\t\t}\n\t\t}\n\t\tthrow new IllegalStateException(\n\t\t\t\t"Unable to find ConnectionFactory in JNDI locations "\n\t\t\t\t\t\t+ Arrays.asList(getJndiLocations()));\n\t}\n\n\tprivate String[] getJndiLocations() {\n\t\treturn AnnotationUtils.getAnnotation(getClass(), ConditionalOnJndi.class).value();\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
