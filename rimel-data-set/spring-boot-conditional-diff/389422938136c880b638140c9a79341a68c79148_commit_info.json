{'_old_path': PosixPath('spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/env/EnvironmentEndpointAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/env/EnvironmentEndpointAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -18,7 +18,9 @@ package org.springframework.boot.actuate.autoconfigure.env;\n \n import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\n import org.springframework.boot.actuate.env.EnvironmentEndpoint;\n+import org.springframework.boot.actuate.env.EnvironmentWebEndpointExtension;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n@@ -55,4 +57,13 @@ public class EnvironmentEndpointAutoConfiguration {\n \t\treturn endpoint;\n \t}\n \n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\t@ConditionalOnEnabledEndpoint\n+\t@ConditionalOnBean(EnvironmentEndpoint.class)\n+\tpublic EnvironmentWebEndpointExtension environmentWebEndpointExtension(\n+\t\t\tEnvironmentEndpoint environmentEndpoint) {\n+\t\treturn new EnvironmentWebEndpointExtension(environmentEndpoint);\n+\t}\n+\n }\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.env;\n\nimport org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\nimport org.springframework.boot.actuate.env.EnvironmentEndpoint;\nimport org.springframework.boot.actuate.env.EnvironmentWebEndpointExtension;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for the {@link EnvironmentEndpoint}.\n *\n * @author Phillip Webb\n * @author Stephane Nicoll\n * @since 2.0.0\n */\n@Configuration\n@EnableConfigurationProperties(EnvironmentEndpointProperties.class)\npublic class EnvironmentEndpointAutoConfiguration {\n\n\tprivate final EnvironmentEndpointProperties properties;\n\n\tpublic EnvironmentEndpointAutoConfiguration(\n\t\t\tEnvironmentEndpointProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnEnabledEndpoint\n\tpublic EnvironmentEndpoint environmentEndpoint(Environment environment) {\n\t\tEnvironmentEndpoint endpoint = new EnvironmentEndpoint(environment);\n\t\tString[] keysToSanitize = this.properties.getKeysToSanitize();\n\t\tif (keysToSanitize != null) {\n\t\t\tendpoint.setKeysToSanitize(keysToSanitize);\n\t\t}\n\t\treturn endpoint;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnEnabledEndpoint\n\t@ConditionalOnBean(EnvironmentEndpoint.class)\n\tpublic EnvironmentWebEndpointExtension environmentWebEndpointExtension(\n\t\t\tEnvironmentEndpoint environmentEndpoint) {\n\t\treturn new EnvironmentWebEndpointExtension(environmentEndpoint);\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.env;\n\nimport org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;\nimport org.springframework.boot.actuate.env.EnvironmentEndpoint;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for the {@link EnvironmentEndpoint}.\n *\n * @author Phillip Webb\n * @author Stephane Nicoll\n * @since 2.0.0\n */\n@Configuration\n@EnableConfigurationProperties(EnvironmentEndpointProperties.class)\npublic class EnvironmentEndpointAutoConfiguration {\n\n\tprivate final EnvironmentEndpointProperties properties;\n\n\tpublic EnvironmentEndpointAutoConfiguration(\n\t\t\tEnvironmentEndpointProperties properties) {\n\t\tthis.properties = properties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\t@ConditionalOnEnabledEndpoint\n\tpublic EnvironmentEndpoint environmentEndpoint(Environment environment) {\n\t\tEnvironmentEndpoint endpoint = new EnvironmentEndpoint(environment);\n\t\tString[] keysToSanitize = this.properties.getKeysToSanitize();\n\t\tif (keysToSanitize != null) {\n\t\t\tendpoint.setKeysToSanitize(keysToSanitize);\n\t\t}\n\t\treturn endpoint;\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
