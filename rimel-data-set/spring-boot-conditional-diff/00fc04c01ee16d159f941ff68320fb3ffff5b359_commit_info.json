{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBean.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBean.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -35,7 +35,7 @@ import org.springframework.context.annotation.Conditional;\n @Target({ ElementType.TYPE, ElementType.METHOD })\n @Retention(RetentionPolicy.RUNTIME)\n @Documented\n-@Conditional(OnMissingBeanCondition.class)\n+@Conditional(OnBeanCondition.class)\n public @interface ConditionalOnMissingBean {\n \n \t/**\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Conditional;\n\n/**\n * {@link Conditional} that only matches when the specified bean classes and/or names are\n * not already contained in the {@link BeanFactory}.\n * \n * @author Phillip Webb\n */\n@Target({ ElementType.TYPE, ElementType.METHOD })\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Conditional(OnBeanCondition.class)\npublic @interface ConditionalOnMissingBean {\n\n\t/**\n\t * The class type of bean that should be checked. The condition matches when each\n\t * class specified is missing in the {@link ApplicationContext}.\n\t * @return the class types of beans to check\n\t */\n\tClass<?>[] value() default {};\n\n\t/**\n\t * The names of beans to check. The condition matches when each bean name specified is\n\t * missing in the {@link ApplicationContext}.\n\t * @return the name of beans to check\n\t */\n\tString[] name() default {};\n\n\t/**\n\t * Strategy to decide if the application context hierarchy (parent contexts) should be\n\t * considered.\n\t */\n\tSearchStrategy search() default SearchStrategy.ALL;\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Conditional;\n\n/**\n * {@link Conditional} that only matches when the specified bean classes and/or names are\n * not already contained in the {@link BeanFactory}.\n * \n * @author Phillip Webb\n */\n@Target({ ElementType.TYPE, ElementType.METHOD })\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Conditional(OnMissingBeanCondition.class)\npublic @interface ConditionalOnMissingBean {\n\n\t/**\n\t * The class type of bean that should be checked. The condition matches when each\n\t * class specified is missing in the {@link ApplicationContext}.\n\t * @return the class types of beans to check\n\t */\n\tClass<?>[] value() default {};\n\n\t/**\n\t * The names of beans to check. The condition matches when each bean name specified is\n\t * missing in the {@link ApplicationContext}.\n\t * @return the name of beans to check\n\t */\n\tString[] name() default {};\n\n\t/**\n\t * Strategy to decide if the application context hierarchy (parent contexts) should be\n\t * considered.\n\t */\n\tSearchStrategy search() default SearchStrategy.ALL;\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
