{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -22,7 +22,12 @@ import java.net.UnknownHostException;\n import java.util.ArrayList;\n import java.util.List;\n \n+import io.lettuce.core.RedisClient;\n+import io.lettuce.core.cluster.RedisClusterClient;\n+import io.lettuce.core.resource.ClientResources;\n+import io.lettuce.core.resource.DefaultClientResources;\n import org.apache.commons.pool2.impl.GenericObjectPool;\n+import org.apache.commons.pool2.impl.GenericObjectPoolConfig;\n import redis.clients.jedis.Jedis;\n import redis.clients.jedis.JedisPoolConfig;\n \n@@ -31,6 +36,7 @@ import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.data.redis.RedisProperties.Cluster;\n+import org.springframework.boot.autoconfigure.data.redis.RedisProperties.Lettuce;\n import org.springframework.boot.autoconfigure.data.redis.RedisProperties.Sentinel;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n@@ -41,6 +47,8 @@ import org.springframework.data.redis.connection.RedisNode;\n import org.springframework.data.redis.connection.RedisSentinelConfiguration;\n import org.springframework.data.redis.connection.jedis.JedisConnection;\n import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;\n+import org.springframework.data.redis.connection.lettuce.DefaultLettucePool;\n+import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;\n import org.springframework.data.redis.core.RedisOperations;\n import org.springframework.data.redis.core.RedisTemplate;\n import org.springframework.data.redis.core.StringRedisTemplate;\n@@ -58,31 +66,28 @@ import org.springframework.util.StringUtils;\n  * @author Eddú Meléndez\n  * @author Stephane Nicoll\n  * @author Marco Aust\n+ * @author Mark Paluch\n  */\n @Configuration\n-@ConditionalOnClass({ JedisConnection.class, RedisOperations.class, Jedis.class })\n+@ConditionalOnClass({ RedisOperations.class })\n @EnableConfigurationProperties(RedisProperties.class)\n public class RedisAutoConfiguration {\n \n \t/**\n-\t * Redis connection configuration.\n+\t * Jedis Redis connection configuration.\n \t */\n \t@Configuration\n-\t@ConditionalOnClass(GenericObjectPool.class)\n-\tprotected static class RedisConnectionConfiguration {\n+\t@ConditionalOnClass({ GenericObjectPool.class, JedisConnection.class, Jedis.class })\n+\tprotected static class JedisRedisConnectionConfiguration\n+\t\t\textends RedisBaseConfiguration {\n \n \t\tprivate final RedisProperties properties;\n \n-\t\tprivate final RedisSentinelConfiguration sentinelConfiguration;\n-\n-\t\tprivate final RedisClusterConfiguration clusterConfiguration;\n-\n-\t\tpublic RedisConnectionConfiguration(RedisProperties properties,\n+\t\tpublic JedisRedisConnectionConfiguration(RedisProperties properties,\n \t\t\t\tObjectProvider<RedisSentinelConfiguration> sentinelConfiguration,\n \t\t\t\tObjectProvider<RedisClusterConfiguration> clusterConfiguration) {\n+\t\t\tsuper(properties, sentinelConfiguration, clusterConfiguration);\n \t\t\tthis.properties = properties;\n-\t\t\tthis.sentinelConfiguration = sentinelConfiguration.getIfAvailable();\n-\t\t\tthis.clusterConfiguration = clusterConfiguration.getIfAvailable();\n \t\t}\n \n \t\t@Bean\n@@ -142,10 +147,239 @@ public class RedisAutoConfiguration {\n \t\t\t}\n \t\t}\n \n+\t\tprivate JedisConnectionFactory createJedisConnectionFactory() {\n+\t\t\tJedisPoolConfig poolConfig = this.properties.getPool() != null\n+\t\t\t\t\t? jedisPoolConfig() : new JedisPoolConfig();\n+\n+\t\t\tif (getSentinelConfig() != null) {\n+\t\t\t\treturn new JedisConnectionFactory(getSentinelConfig(), poolConfig);\n+\t\t\t}\n+\t\t\tif (getClusterConfiguration() != null) {\n+\t\t\t\treturn new JedisConnectionFactory(getClusterConfiguration(), poolConfig);\n+\t\t\t}\n+\t\t\treturn new JedisConnectionFactory(poolConfig);\n+\t\t}\n+\n+\t\tprivate JedisPoolConfig jedisPoolConfig() {\n+\t\t\tJedisPoolConfig config = new JedisPoolConfig();\n+\t\t\tRedisProperties.Pool props = this.properties.getPool();\n+\t\t\tconfig.setMaxTotal(props.getMaxActive());\n+\t\t\tconfig.setMaxIdle(props.getMaxIdle());\n+\t\t\tconfig.setMinIdle(props.getMinIdle());\n+\t\t\tconfig.setMaxWaitMillis(props.getMaxWait());\n+\t\t\treturn config;\n+\t\t}\n+\n+\t}\n+\n+\t/**\n+\t * Lettuce Redis connection configuration.\n+\t */\n+\t@Configuration\n+\t@ConditionalOnClass({ GenericObjectPool.class, RedisClient.class,\n+\t\t\tRedisClusterClient.class })\n+\tprotected static class LettuceRedisConnectionConfiguration\n+\t\t\textends RedisBaseConfiguration {\n+\n+\t\tprivate final RedisProperties properties;\n+\n+\t\tpublic LettuceRedisConnectionConfiguration(RedisProperties properties,\n+\t\t\t\tObjectProvider<RedisSentinelConfiguration> sentinelConfigurationProvider,\n+\t\t\t\tObjectProvider<RedisClusterConfiguration> clusterConfigurationProvider) {\n+\t\t\tsuper(properties, sentinelConfigurationProvider,\n+\t\t\t\t\tclusterConfigurationProvider);\n+\t\t\tthis.properties = properties;\n+\t\t}\n+\n+\t\t@Bean(destroyMethod = "shutdown")\n+\t\t@ConditionalOnMissingBean(ClientResources.class)\n+\t\tpublic DefaultClientResources lettuceClientResources() {\n+\t\t\treturn DefaultClientResources.create();\n+\t\t}\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(RedisConnectionFactory.class)\n+\t\tpublic LettuceConnectionFactory redisConnectionFactory(\n+\t\t\t\tClientResources clientResources) throws UnknownHostException {\n+\t\t\treturn applyProperties(createLettuceConnectionFactory(clientResources));\n+\t\t}\n+\n+\t\tprotected final LettuceConnectionFactory applyProperties(\n+\t\t\t\tLettuceConnectionFactory factory) {\n+\t\t\tconfigureConnection(factory);\n+\t\t\tif (this.properties.isSsl()) {\n+\t\t\t\tfactory.setUseSsl(true);\n+\t\t\t}\n+\t\t\tif (this.properties.getLettuce() != null) {\n+\t\t\t\tLettuce lettuce = this.properties.getLettuce();\n+\t\t\t\tif (lettuce.getShutdownTimeout() >= 0) {\n+\t\t\t\t\tfactory.setShutdownTimeout(\n+\t\t\t\t\t\t\tthis.properties.getLettuce().getShutdownTimeout());\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn factory;\n+\t\t}\n+\n+\t\tprivate void configureConnection(LettuceConnectionFactory factory) {\n+\t\t\tif (StringUtils.hasText(this.properties.getUrl())) {\n+\t\t\t\tconfigureConnectionFromUrl(factory);\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tfactory.setHostName(this.properties.getHost());\n+\t\t\t\tfactory.setPort(this.properties.getPort());\n+\t\t\t\tif (this.properties.getPassword() != null) {\n+\t\t\t\t\tfactory.setPassword(this.properties.getPassword());\n+\t\t\t\t}\n+\t\t\t\tfactory.setDatabase(this.properties.getDatabase());\n+\t\t\t\tif (this.properties.getTimeout() > 0) {\n+\t\t\t\t\tfactory.setTimeout(this.properties.getTimeout());\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\tprivate void configureConnectionFromUrl(LettuceConnectionFactory factory) {\n+\t\t\tString url = this.properties.getUrl();\n+\t\t\tif (url.startsWith("rediss://")) {\n+\t\t\t\tfactory.setUseSsl(true);\n+\t\t\t}\n+\t\t\ttry {\n+\t\t\t\tURI uri = new URI(url);\n+\t\t\t\tfactory.setHostName(uri.getHost());\n+\t\t\t\tfactory.setPort(uri.getPort());\n+\t\t\t\tif (uri.getUserInfo() != null) {\n+\t\t\t\t\tString password = uri.getUserInfo();\n+\t\t\t\t\tint index = password.lastIndexOf(":");\n+\t\t\t\t\tif (index >= 0) {\n+\t\t\t\t\t\tpassword = password.substring(index + 1);\n+\t\t\t\t\t}\n+\t\t\t\t\tfactory.setPassword(password);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (URISyntaxException ex) {\n+\t\t\t\tthrow new IllegalArgumentException("Malformed \'spring.redis.url\' " + url,\n+\t\t\t\t\t\tex);\n+\t\t\t}\n+\t\t}\n+\n+\t\tprotected final DefaultLettucePool applyProperties(DefaultLettucePool pool) {\n+\t\t\tif (StringUtils.hasText(this.properties.getUrl())) {\n+\t\t\t\tconfigureConnectionFromUrl(pool);\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tpool.setHostName(this.properties.getHost());\n+\t\t\t\tpool.setPort(this.properties.getPort());\n+\t\t\t\tif (this.properties.getPassword() != null) {\n+\t\t\t\t\tpool.setPassword(this.properties.getPassword());\n+\t\t\t\t}\n+\t\t\t\tpool.setDatabase(this.properties.getDatabase());\n+\t\t\t}\n+\t\t\tif (this.properties.getTimeout() > 0) {\n+\t\t\t\tpool.setTimeout(this.properties.getTimeout());\n+\t\t\t}\n+\t\t\tpool.afterPropertiesSet();\n+\t\t\treturn pool;\n+\t\t}\n+\n+\t\tprivate void configureConnectionFromUrl(DefaultLettucePool lettucePool) {\n+\t\t\tString url = this.properties.getUrl();\n+\t\t\ttry {\n+\t\t\t\tURI uri = new URI(url);\n+\t\t\t\tlettucePool.setHostName(uri.getHost());\n+\t\t\t\tlettucePool.setPort(uri.getPort());\n+\t\t\t\tif (uri.getUserInfo() != null) {\n+\t\t\t\t\tString password = uri.getUserInfo();\n+\t\t\t\t\tint index = password.lastIndexOf(":");\n+\t\t\t\t\tif (index >= 0) {\n+\t\t\t\t\t\tpassword = password.substring(index + 1);\n+\t\t\t\t\t}\n+\t\t\t\t\tlettucePool.setPassword(password);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (URISyntaxException ex) {\n+\t\t\t\tthrow new IllegalArgumentException("Malformed \'spring.redis.url\' " + url,\n+\t\t\t\t\t\tex);\n+\t\t\t}\n+\t\t}\n+\n+\t\tprivate LettuceConnectionFactory createLettuceConnectionFactory(\n+\t\t\t\tClientResources clientResources) {\n+\n+\t\t\tif (getSentinelConfig() != null) {\n+\t\t\t\tif (this.properties.getLettuce() != null\n+\t\t\t\t\t\t&& this.properties.getLettuce().getPool() != null) {\n+\t\t\t\t\tDefaultLettucePool lettucePool = new DefaultLettucePool(\n+\t\t\t\t\t\t\tgetSentinelConfig());\n+\t\t\t\t\treturn new LettuceConnectionFactory(applyProperties(\n+\t\t\t\t\t\t\tapplyClientResources(lettucePool, clientResources)));\n+\t\t\t\t}\n+\t\t\t\treturn applyClientResources(\n+\t\t\t\t\t\tnew LettuceConnectionFactory(getSentinelConfig()),\n+\t\t\t\t\t\tclientResources);\n+\t\t\t}\n+\n+\t\t\tif (getClusterConfiguration() != null) {\n+\t\t\t\treturn applyClientResources(\n+\t\t\t\t\t\tnew LettuceConnectionFactory(getClusterConfiguration()),\n+\t\t\t\t\t\tclientResources);\n+\t\t\t}\n+\n+\t\t\tif (this.properties.getLettuce() != null\n+\t\t\t\t\t&& this.properties.getLettuce().getPool() != null) {\n+\t\t\t\tGenericObjectPoolConfig config = lettucePoolConfig(\n+\t\t\t\t\t\tthis.properties.getLettuce().getPool());\n+\t\t\t\tDefaultLettucePool lettucePool = new DefaultLettucePool(\n+\t\t\t\t\t\tthis.properties.getHost(), this.properties.getPort(), config);\n+\t\t\t\treturn new LettuceConnectionFactory(applyProperties(\n+\t\t\t\t\t\tapplyClientResources(lettucePool, clientResources)));\n+\t\t\t}\n+\n+\t\t\treturn applyClientResources(new LettuceConnectionFactory(), clientResources);\n+\t\t}\n+\n+\t\tprivate DefaultLettucePool applyClientResources(DefaultLettucePool lettucePool,\n+\t\t\t\tClientResources clientResources) {\n+\t\t\tlettucePool.setClientResources(clientResources);\n+\t\t\treturn lettucePool;\n+\t\t}\n+\n+\t\tprivate LettuceConnectionFactory applyClientResources(\n+\t\t\t\tLettuceConnectionFactory factory, ClientResources clientResources) {\n+\t\t\tfactory.setClientResources(clientResources);\n+\t\t\treturn factory;\n+\t\t}\n+\n+\t\tprivate GenericObjectPoolConfig lettucePoolConfig(RedisProperties.Pool props) {\n+\t\t\tGenericObjectPoolConfig config = new GenericObjectPoolConfig();\n+\t\t\tconfig.setMaxTotal(props.getMaxActive());\n+\t\t\tconfig.setMaxIdle(props.getMaxIdle());\n+\t\t\tconfig.setMinIdle(props.getMinIdle());\n+\t\t\tconfig.setMaxWaitMillis(props.getMaxWait());\n+\t\t\treturn config;\n+\t\t}\n+\n+\t}\n+\n+\tprotected abstract static class RedisBaseConfiguration {\n+\n+\t\tprivate final RedisProperties properties;\n+\n+\t\tprivate final RedisSentinelConfiguration sentinelConfiguration;\n+\n+\t\tprivate final RedisClusterConfiguration clusterConfiguration;\n+\n+\t\tprotected RedisBaseConfiguration(RedisProperties properties,\n+\t\t\t\tObjectProvider<RedisSentinelConfiguration> sentinelConfigurationProvider,\n+\t\t\t\tObjectProvider<RedisClusterConfiguration> clusterConfigurationProvider) {\n+\t\t\tthis.properties = properties;\n+\t\t\tthis.sentinelConfiguration = sentinelConfigurationProvider.getIfAvailable();\n+\t\t\tthis.clusterConfiguration = clusterConfigurationProvider.getIfAvailable();\n+\t\t}\n+\n \t\tprotected final RedisSentinelConfiguration getSentinelConfig() {\n \t\t\tif (this.sentinelConfiguration != null) {\n \t\t\t\treturn this.sentinelConfiguration;\n \t\t\t}\n+\n \t\t\tSentinel sentinelProperties = this.properties.getSentinel();\n \t\t\tif (sentinelProperties != null) {\n \t\t\t\tRedisSentinelConfiguration config = new RedisSentinelConfiguration();\n@@ -164,9 +398,11 @@ public class RedisAutoConfiguration {\n \t\t\tif (this.clusterConfiguration != null) {\n \t\t\t\treturn this.clusterConfiguration;\n \t\t\t}\n+\n \t\t\tif (this.properties.getCluster() == null) {\n \t\t\t\treturn null;\n \t\t\t}\n+\n \t\t\tCluster clusterProperties = this.properties.getCluster();\n \t\t\tRedisClusterConfiguration config = new RedisClusterConfiguration(\n \t\t\t\t\tclusterProperties.getNodes());\n@@ -194,29 +430,6 @@ public class RedisAutoConfiguration {\n \t\t\treturn nodes;\n \t\t}\n \n-\t\tprivate JedisConnectionFactory createJedisConnectionFactory() {\n-\t\t\tJedisPoolConfig poolConfig = this.properties.getPool() != null\n-\t\t\t\t\t? jedisPoolConfig() : new JedisPoolConfig();\n-\n-\t\t\tif (getSentinelConfig() != null) {\n-\t\t\t\treturn new JedisConnectionFactory(getSentinelConfig(), poolConfig);\n-\t\t\t}\n-\t\t\tif (getClusterConfiguration() != null) {\n-\t\t\t\treturn new JedisConnectionFactory(getClusterConfiguration(), poolConfig);\n-\t\t\t}\n-\t\t\treturn new JedisConnectionFactory(poolConfig);\n-\t\t}\n-\n-\t\tprivate JedisPoolConfig jedisPoolConfig() {\n-\t\t\tJedisPoolConfig config = new JedisPoolConfig();\n-\t\t\tRedisProperties.Pool props = this.properties.getPool();\n-\t\t\tconfig.setMaxTotal(props.getMaxActive());\n-\t\t\tconfig.setMaxIdle(props.getMaxIdle());\n-\t\t\tconfig.setMinIdle(props.getMinIdle());\n-\t\t\tconfig.setMaxWaitMillis(props.getMaxWait());\n-\t\t\treturn config;\n-\t\t}\n-\n \t}\n \n \t/**\n@@ -229,7 +442,7 @@ public class RedisAutoConfiguration {\n \t\t@ConditionalOnMissingBean(name = "redisTemplate")\n \t\tpublic RedisTemplate<Object, Object> redisTemplate(\n \t\t\t\tRedisConnectionFactory redisConnectionFactory)\n-\t\t\t\t\t\tthrows UnknownHostException {\n+\t\t\t\tthrows UnknownHostException {\n \t\t\tRedisTemplate<Object, Object> template = new RedisTemplate<>();\n \t\t\ttemplate.setConnectionFactory(redisConnectionFactory);\n \t\t\treturn template;\n@@ -239,7 +452,7 @@ public class RedisAutoConfiguration {\n \t\t@ConditionalOnMissingBean(StringRedisTemplate.class)\n \t\tpublic StringRedisTemplate stringRedisTemplate(\n \t\t\t\tRedisConnectionFactory redisConnectionFactory)\n-\t\t\t\t\t\tthrows UnknownHostException {\n+\t\t\t\tthrows UnknownHostException {\n \t\t\tStringRedisTemplate template = new StringRedisTemplate();\n \t\t\ttemplate.setConnectionFactory(redisConnectionFactory);\n \t\t\treturn template;\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.redis;\n\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.net.UnknownHostException;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.cluster.RedisClusterClient;\nimport io.lettuce.core.resource.ClientResources;\nimport io.lettuce.core.resource.DefaultClientResources;\nimport org.apache.commons.pool2.impl.GenericObjectPool;\nimport org.apache.commons.pool2.impl.GenericObjectPoolConfig;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPoolConfig;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.data.redis.RedisProperties.Cluster;\nimport org.springframework.boot.autoconfigure.data.redis.RedisProperties.Lettuce;\nimport org.springframework.boot.autoconfigure.data.redis.RedisProperties.Sentinel;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisClusterConfiguration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.connection.RedisNode;\nimport org.springframework.data.redis.connection.RedisSentinelConfiguration;\nimport org.springframework.data.redis.connection.jedis.JedisConnection;\nimport org.springframework.data.redis.connection.jedis.JedisConnectionFactory;\nimport org.springframework.data.redis.connection.lettuce.DefaultLettucePool;\nimport org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;\nimport org.springframework.data.redis.core.RedisOperations;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.util.Assert;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s Redis support.\n *\n * @author Dave Syer\n * @author Andy Wilkinson\n * @author Christian Dupuis\n * @author Christoph Strobl\n * @author Phillip Webb\n * @author Eddú Meléndez\n * @author Stephane Nicoll\n * @author Marco Aust\n * @author Mark Paluch\n */\n@Configuration\n@ConditionalOnClass({ RedisOperations.class })\n@EnableConfigurationProperties(RedisProperties.class)\npublic class RedisAutoConfiguration {\n\n\t/**\n\t * Jedis Redis connection configuration.\n\t */\n\t@Configuration\n\t@ConditionalOnClass({ GenericObjectPool.class, JedisConnection.class, Jedis.class })\n\tprotected static class JedisRedisConnectionConfiguration\n\t\t\textends RedisBaseConfiguration {\n\n\t\tprivate final RedisProperties properties;\n\n\t\tpublic JedisRedisConnectionConfiguration(RedisProperties properties,\n\t\t\t\tObjectProvider<RedisSentinelConfiguration> sentinelConfiguration,\n\t\t\t\tObjectProvider<RedisClusterConfiguration> clusterConfiguration) {\n\t\t\tsuper(properties, sentinelConfiguration, clusterConfiguration);\n\t\t\tthis.properties = properties;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(RedisConnectionFactory.class)\n\t\tpublic JedisConnectionFactory redisConnectionFactory()\n\t\t\t\tthrows UnknownHostException {\n\t\t\treturn applyProperties(createJedisConnectionFactory());\n\t\t}\n\n\t\tprotected final JedisConnectionFactory applyProperties(\n\t\t\t\tJedisConnectionFactory factory) {\n\t\t\tconfigureConnection(factory);\n\t\t\tif (this.properties.isSsl()) {\n\t\t\t\tfactory.setUseSsl(true);\n\t\t\t}\n\t\t\tfactory.setDatabase(this.properties.getDatabase());\n\t\t\tif (this.properties.getTimeout() > 0) {\n\t\t\t\tfactory.setTimeout(this.properties.getTimeout());\n\t\t\t}\n\t\t\treturn factory;\n\t\t}\n\n\t\tprivate void configureConnection(JedisConnectionFactory factory) {\n\t\t\tif (StringUtils.hasText(this.properties.getUrl())) {\n\t\t\t\tconfigureConnectionFromUrl(factory);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfactory.setHostName(this.properties.getHost());\n\t\t\t\tfactory.setPort(this.properties.getPort());\n\t\t\t\tif (this.properties.getPassword() != null) {\n\t\t\t\t\tfactory.setPassword(this.properties.getPassword());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tprivate void configureConnectionFromUrl(JedisConnectionFactory factory) {\n\t\t\tString url = this.properties.getUrl();\n\t\t\tif (url.startsWith("rediss://")) {\n\t\t\t\tfactory.setUseSsl(true);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tURI uri = new URI(url);\n\t\t\t\tfactory.setHostName(uri.getHost());\n\t\t\t\tfactory.setPort(uri.getPort());\n\t\t\t\tif (uri.getUserInfo() != null) {\n\t\t\t\t\tString password = uri.getUserInfo();\n\t\t\t\t\tint index = password.lastIndexOf(":");\n\t\t\t\t\tif (index >= 0) {\n\t\t\t\t\t\tpassword = password.substring(index + 1);\n\t\t\t\t\t}\n\t\t\t\t\tfactory.setPassword(password);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (URISyntaxException ex) {\n\t\t\t\tthrow new IllegalArgumentException("Malformed \'spring.redis.url\' " + url,\n\t\t\t\t\t\tex);\n\t\t\t}\n\t\t}\n\n\t\tprivate JedisConnectionFactory createJedisConnectionFactory() {\n\t\t\tJedisPoolConfig poolConfig = this.properties.getPool() != null\n\t\t\t\t\t? jedisPoolConfig() : new JedisPoolConfig();\n\n\t\t\tif (getSentinelConfig() != null) {\n\t\t\t\treturn new JedisConnectionFactory(getSentinelConfig(), poolConfig);\n\t\t\t}\n\t\t\tif (getClusterConfiguration() != null) {\n\t\t\t\treturn new JedisConnectionFactory(getClusterConfiguration(), poolConfig);\n\t\t\t}\n\t\t\treturn new JedisConnectionFactory(poolConfig);\n\t\t}\n\n\t\tprivate JedisPoolConfig jedisPoolConfig() {\n\t\t\tJedisPoolConfig config = new JedisPoolConfig();\n\t\t\tRedisProperties.Pool props = this.properties.getPool();\n\t\t\tconfig.setMaxTotal(props.getMaxActive());\n\t\t\tconfig.setMaxIdle(props.getMaxIdle());\n\t\t\tconfig.setMinIdle(props.getMinIdle());\n\t\t\tconfig.setMaxWaitMillis(props.getMaxWait());\n\t\t\treturn config;\n\t\t}\n\n\t}\n\n\t/**\n\t * Lettuce Redis connection configuration.\n\t */\n\t@Configuration\n\t@ConditionalOnClass({ GenericObjectPool.class, RedisClient.class,\n\t\t\tRedisClusterClient.class })\n\tprotected static class LettuceRedisConnectionConfiguration\n\t\t\textends RedisBaseConfiguration {\n\n\t\tprivate final RedisProperties properties;\n\n\t\tpublic LettuceRedisConnectionConfiguration(RedisProperties properties,\n\t\t\t\tObjectProvider<RedisSentinelConfiguration> sentinelConfigurationProvider,\n\t\t\t\tObjectProvider<RedisClusterConfiguration> clusterConfigurationProvider) {\n\t\t\tsuper(properties, sentinelConfigurationProvider,\n\t\t\t\t\tclusterConfigurationProvider);\n\t\t\tthis.properties = properties;\n\t\t}\n\n\t\t@Bean(destroyMethod = "shutdown")\n\t\t@ConditionalOnMissingBean(ClientResources.class)\n\t\tpublic DefaultClientResources lettuceClientResources() {\n\t\t\treturn DefaultClientResources.create();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(RedisConnectionFactory.class)\n\t\tpublic LettuceConnectionFactory redisConnectionFactory(\n\t\t\t\tClientResources clientResources) throws UnknownHostException {\n\t\t\treturn applyProperties(createLettuceConnectionFactory(clientResources));\n\t\t}\n\n\t\tprotected final LettuceConnectionFactory applyProperties(\n\t\t\t\tLettuceConnectionFactory factory) {\n\t\t\tconfigureConnection(factory);\n\t\t\tif (this.properties.isSsl()) {\n\t\t\t\tfactory.setUseSsl(true);\n\t\t\t}\n\t\t\tif (this.properties.getLettuce() != null) {\n\t\t\t\tLettuce lettuce = this.properties.getLettuce();\n\t\t\t\tif (lettuce.getShutdownTimeout() >= 0) {\n\t\t\t\t\tfactory.setShutdownTimeout(\n\t\t\t\t\t\t\tthis.properties.getLettuce().getShutdownTimeout());\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn factory;\n\t\t}\n\n\t\tprivate void configureConnection(LettuceConnectionFactory factory) {\n\t\t\tif (StringUtils.hasText(this.properties.getUrl())) {\n\t\t\t\tconfigureConnectionFromUrl(factory);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfactory.setHostName(this.properties.getHost());\n\t\t\t\tfactory.setPort(this.properties.getPort());\n\t\t\t\tif (this.properties.getPassword() != null) {\n\t\t\t\t\tfactory.setPassword(this.properties.getPassword());\n\t\t\t\t}\n\t\t\t\tfactory.setDatabase(this.properties.getDatabase());\n\t\t\t\tif (this.properties.getTimeout() > 0) {\n\t\t\t\t\tfactory.setTimeout(this.properties.getTimeout());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tprivate void configureConnectionFromUrl(LettuceConnectionFactory factory) {\n\t\t\tString url = this.properties.getUrl();\n\t\t\tif (url.startsWith("rediss://")) {\n\t\t\t\tfactory.setUseSsl(true);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tURI uri = new URI(url);\n\t\t\t\tfactory.setHostName(uri.getHost());\n\t\t\t\tfactory.setPort(uri.getPort());\n\t\t\t\tif (uri.getUserInfo() != null) {\n\t\t\t\t\tString password = uri.getUserInfo();\n\t\t\t\t\tint index = password.lastIndexOf(":");\n\t\t\t\t\tif (index >= 0) {\n\t\t\t\t\t\tpassword = password.substring(index + 1);\n\t\t\t\t\t}\n\t\t\t\t\tfactory.setPassword(password);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (URISyntaxException ex) {\n\t\t\t\tthrow new IllegalArgumentException("Malformed \'spring.redis.url\' " + url,\n\t\t\t\t\t\tex);\n\t\t\t}\n\t\t}\n\n\t\tprotected final DefaultLettucePool applyProperties(DefaultLettucePool pool) {\n\t\t\tif (StringUtils.hasText(this.properties.getUrl())) {\n\t\t\t\tconfigureConnectionFromUrl(pool);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tpool.setHostName(this.properties.getHost());\n\t\t\t\tpool.setPort(this.properties.getPort());\n\t\t\t\tif (this.properties.getPassword() != null) {\n\t\t\t\t\tpool.setPassword(this.properties.getPassword());\n\t\t\t\t}\n\t\t\t\tpool.setDatabase(this.properties.getDatabase());\n\t\t\t}\n\t\t\tif (this.properties.getTimeout() > 0) {\n\t\t\t\tpool.setTimeout(this.properties.getTimeout());\n\t\t\t}\n\t\t\tpool.afterPropertiesSet();\n\t\t\treturn pool;\n\t\t}\n\n\t\tprivate void configureConnectionFromUrl(DefaultLettucePool lettucePool) {\n\t\t\tString url = this.properties.getUrl();\n\t\t\ttry {\n\t\t\t\tURI uri = new URI(url);\n\t\t\t\tlettucePool.setHostName(uri.getHost());\n\t\t\t\tlettucePool.setPort(uri.getPort());\n\t\t\t\tif (uri.getUserInfo() != null) {\n\t\t\t\t\tString password = uri.getUserInfo();\n\t\t\t\t\tint index = password.lastIndexOf(":");\n\t\t\t\t\tif (index >= 0) {\n\t\t\t\t\t\tpassword = password.substring(index + 1);\n\t\t\t\t\t}\n\t\t\t\t\tlettucePool.setPassword(password);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (URISyntaxException ex) {\n\t\t\t\tthrow new IllegalArgumentException("Malformed \'spring.redis.url\' " + url,\n\t\t\t\t\t\tex);\n\t\t\t}\n\t\t}\n\n\t\tprivate LettuceConnectionFactory createLettuceConnectionFactory(\n\t\t\t\tClientResources clientResources) {\n\n\t\t\tif (getSentinelConfig() != null) {\n\t\t\t\tif (this.properties.getLettuce() != null\n\t\t\t\t\t\t&& this.properties.getLettuce().getPool() != null) {\n\t\t\t\t\tDefaultLettucePool lettucePool = new DefaultLettucePool(\n\t\t\t\t\t\t\tgetSentinelConfig());\n\t\t\t\t\treturn new LettuceConnectionFactory(applyProperties(\n\t\t\t\t\t\t\tapplyClientResources(lettucePool, clientResources)));\n\t\t\t\t}\n\t\t\t\treturn applyClientResources(\n\t\t\t\t\t\tnew LettuceConnectionFactory(getSentinelConfig()),\n\t\t\t\t\t\tclientResources);\n\t\t\t}\n\n\t\t\tif (getClusterConfiguration() != null) {\n\t\t\t\treturn applyClientResources(\n\t\t\t\t\t\tnew LettuceConnectionFactory(getClusterConfiguration()),\n\t\t\t\t\t\tclientResources);\n\t\t\t}\n\n\t\t\tif (this.properties.getLettuce() != null\n\t\t\t\t\t&& this.properties.getLettuce().getPool() != null) {\n\t\t\t\tGenericObjectPoolConfig config = lettucePoolConfig(\n\t\t\t\t\t\tthis.properties.getLettuce().getPool());\n\t\t\t\tDefaultLettucePool lettucePool = new DefaultLettucePool(\n\t\t\t\t\t\tthis.properties.getHost(), this.properties.getPort(), config);\n\t\t\t\treturn new LettuceConnectionFactory(applyProperties(\n\t\t\t\t\t\tapplyClientResources(lettucePool, clientResources)));\n\t\t\t}\n\n\t\t\treturn applyClientResources(new LettuceConnectionFactory(), clientResources);\n\t\t}\n\n\t\tprivate DefaultLettucePool applyClientResources(DefaultLettucePool lettucePool,\n\t\t\t\tClientResources clientResources) {\n\t\t\tlettucePool.setClientResources(clientResources);\n\t\t\treturn lettucePool;\n\t\t}\n\n\t\tprivate LettuceConnectionFactory applyClientResources(\n\t\t\t\tLettuceConnectionFactory factory, ClientResources clientResources) {\n\t\t\tfactory.setClientResources(clientResources);\n\t\t\treturn factory;\n\t\t}\n\n\t\tprivate GenericObjectPoolConfig lettucePoolConfig(RedisProperties.Pool props) {\n\t\t\tGenericObjectPoolConfig config = new GenericObjectPoolConfig();\n\t\t\tconfig.setMaxTotal(props.getMaxActive());\n\t\t\tconfig.setMaxIdle(props.getMaxIdle());\n\t\t\tconfig.setMinIdle(props.getMinIdle());\n\t\t\tconfig.setMaxWaitMillis(props.getMaxWait());\n\t\t\treturn config;\n\t\t}\n\n\t}\n\n\tprotected abstract static class RedisBaseConfiguration {\n\n\t\tprivate final RedisProperties properties;\n\n\t\tprivate final RedisSentinelConfiguration sentinelConfiguration;\n\n\t\tprivate final RedisClusterConfiguration clusterConfiguration;\n\n\t\tprotected RedisBaseConfiguration(RedisProperties properties,\n\t\t\t\tObjectProvider<RedisSentinelConfiguration> sentinelConfigurationProvider,\n\t\t\t\tObjectProvider<RedisClusterConfiguration> clusterConfigurationProvider) {\n\t\t\tthis.properties = properties;\n\t\t\tthis.sentinelConfiguration = sentinelConfigurationProvider.getIfAvailable();\n\t\t\tthis.clusterConfiguration = clusterConfigurationProvider.getIfAvailable();\n\t\t}\n\n\t\tprotected final RedisSentinelConfiguration getSentinelConfig() {\n\t\t\tif (this.sentinelConfiguration != null) {\n\t\t\t\treturn this.sentinelConfiguration;\n\t\t\t}\n\n\t\t\tSentinel sentinelProperties = this.properties.getSentinel();\n\t\t\tif (sentinelProperties != null) {\n\t\t\t\tRedisSentinelConfiguration config = new RedisSentinelConfiguration();\n\t\t\t\tconfig.master(sentinelProperties.getMaster());\n\t\t\t\tconfig.setSentinels(createSentinels(sentinelProperties));\n\t\t\t\treturn config;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * Create a {@link RedisClusterConfiguration} if necessary.\n\t\t * @return {@literal null} if no cluster settings are set.\n\t\t */\n\t\tprotected final RedisClusterConfiguration getClusterConfiguration() {\n\t\t\tif (this.clusterConfiguration != null) {\n\t\t\t\treturn this.clusterConfiguration;\n\t\t\t}\n\n\t\t\tif (this.properties.getCluster() == null) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tCluster clusterProperties = this.properties.getCluster();\n\t\t\tRedisClusterConfiguration config = new RedisClusterConfiguration(\n\t\t\t\t\tclusterProperties.getNodes());\n\n\t\t\tif (clusterProperties.getMaxRedirects() != null) {\n\t\t\t\tconfig.setMaxRedirects(clusterProperties.getMaxRedirects());\n\t\t\t}\n\t\t\treturn config;\n\t\t}\n\n\t\tprivate List<RedisNode> createSentinels(Sentinel sentinel) {\n\t\t\tList<RedisNode> nodes = new ArrayList<>();\n\t\t\tfor (String node : StringUtils\n\t\t\t\t\t.commaDelimitedListToStringArray(sentinel.getNodes())) {\n\t\t\t\ttry {\n\t\t\t\t\tString[] parts = StringUtils.split(node, ":");\n\t\t\t\t\tAssert.state(parts.length == 2, "Must be defined as \'host:port\'");\n\t\t\t\t\tnodes.add(new RedisNode(parts[0], Integer.valueOf(parts[1])));\n\t\t\t\t}\n\t\t\t\tcatch (RuntimeException ex) {\n\t\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t\t"Invalid redis sentinel " + "property \'" + node + "\'", ex);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn nodes;\n\t\t}\n\n\t}\n\n\t/**\n\t * Standard Redis configuration.\n\t */\n\t@Configuration\n\tprotected static class RedisConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "redisTemplate")\n\t\tpublic RedisTemplate<Object, Object> redisTemplate(\n\t\t\t\tRedisConnectionFactory redisConnectionFactory)\n\t\t\t\tthrows UnknownHostException {\n\t\t\tRedisTemplate<Object, Object> template = new RedisTemplate<>();\n\t\t\ttemplate.setConnectionFactory(redisConnectionFactory);\n\t\t\treturn template;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(StringRedisTemplate.class)\n\t\tpublic StringRedisTemplate stringRedisTemplate(\n\t\t\t\tRedisConnectionFactory redisConnectionFactory)\n\t\t\t\tthrows UnknownHostException {\n\t\t\tStringRedisTemplate template = new StringRedisTemplate();\n\t\t\ttemplate.setConnectionFactory(redisConnectionFactory);\n\t\t\treturn template;\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.redis;\n\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.net.UnknownHostException;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.apache.commons.pool2.impl.GenericObjectPool;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPoolConfig;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.data.redis.RedisProperties.Cluster;\nimport org.springframework.boot.autoconfigure.data.redis.RedisProperties.Sentinel;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisClusterConfiguration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.connection.RedisNode;\nimport org.springframework.data.redis.connection.RedisSentinelConfiguration;\nimport org.springframework.data.redis.connection.jedis.JedisConnection;\nimport org.springframework.data.redis.connection.jedis.JedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisOperations;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.util.Assert;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s Redis support.\n *\n * @author Dave Syer\n * @author Andy Wilkinson\n * @author Christian Dupuis\n * @author Christoph Strobl\n * @author Phillip Webb\n * @author Eddú Meléndez\n * @author Stephane Nicoll\n * @author Marco Aust\n */\n@Configuration\n@ConditionalOnClass({ JedisConnection.class, RedisOperations.class, Jedis.class })\n@EnableConfigurationProperties(RedisProperties.class)\npublic class RedisAutoConfiguration {\n\n\t/**\n\t * Redis connection configuration.\n\t */\n\t@Configuration\n\t@ConditionalOnClass(GenericObjectPool.class)\n\tprotected static class RedisConnectionConfiguration {\n\n\t\tprivate final RedisProperties properties;\n\n\t\tprivate final RedisSentinelConfiguration sentinelConfiguration;\n\n\t\tprivate final RedisClusterConfiguration clusterConfiguration;\n\n\t\tpublic RedisConnectionConfiguration(RedisProperties properties,\n\t\t\t\tObjectProvider<RedisSentinelConfiguration> sentinelConfiguration,\n\t\t\t\tObjectProvider<RedisClusterConfiguration> clusterConfiguration) {\n\t\t\tthis.properties = properties;\n\t\t\tthis.sentinelConfiguration = sentinelConfiguration.getIfAvailable();\n\t\t\tthis.clusterConfiguration = clusterConfiguration.getIfAvailable();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(RedisConnectionFactory.class)\n\t\tpublic JedisConnectionFactory redisConnectionFactory()\n\t\t\t\tthrows UnknownHostException {\n\t\t\treturn applyProperties(createJedisConnectionFactory());\n\t\t}\n\n\t\tprotected final JedisConnectionFactory applyProperties(\n\t\t\t\tJedisConnectionFactory factory) {\n\t\t\tconfigureConnection(factory);\n\t\t\tif (this.properties.isSsl()) {\n\t\t\t\tfactory.setUseSsl(true);\n\t\t\t}\n\t\t\tfactory.setDatabase(this.properties.getDatabase());\n\t\t\tif (this.properties.getTimeout() > 0) {\n\t\t\t\tfactory.setTimeout(this.properties.getTimeout());\n\t\t\t}\n\t\t\treturn factory;\n\t\t}\n\n\t\tprivate void configureConnection(JedisConnectionFactory factory) {\n\t\t\tif (StringUtils.hasText(this.properties.getUrl())) {\n\t\t\t\tconfigureConnectionFromUrl(factory);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfactory.setHostName(this.properties.getHost());\n\t\t\t\tfactory.setPort(this.properties.getPort());\n\t\t\t\tif (this.properties.getPassword() != null) {\n\t\t\t\t\tfactory.setPassword(this.properties.getPassword());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tprivate void configureConnectionFromUrl(JedisConnectionFactory factory) {\n\t\t\tString url = this.properties.getUrl();\n\t\t\tif (url.startsWith("rediss://")) {\n\t\t\t\tfactory.setUseSsl(true);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tURI uri = new URI(url);\n\t\t\t\tfactory.setHostName(uri.getHost());\n\t\t\t\tfactory.setPort(uri.getPort());\n\t\t\t\tif (uri.getUserInfo() != null) {\n\t\t\t\t\tString password = uri.getUserInfo();\n\t\t\t\t\tint index = password.lastIndexOf(":");\n\t\t\t\t\tif (index >= 0) {\n\t\t\t\t\t\tpassword = password.substring(index + 1);\n\t\t\t\t\t}\n\t\t\t\t\tfactory.setPassword(password);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (URISyntaxException ex) {\n\t\t\t\tthrow new IllegalArgumentException("Malformed \'spring.redis.url\' " + url,\n\t\t\t\t\t\tex);\n\t\t\t}\n\t\t}\n\n\t\tprotected final RedisSentinelConfiguration getSentinelConfig() {\n\t\t\tif (this.sentinelConfiguration != null) {\n\t\t\t\treturn this.sentinelConfiguration;\n\t\t\t}\n\t\t\tSentinel sentinelProperties = this.properties.getSentinel();\n\t\t\tif (sentinelProperties != null) {\n\t\t\t\tRedisSentinelConfiguration config = new RedisSentinelConfiguration();\n\t\t\t\tconfig.master(sentinelProperties.getMaster());\n\t\t\t\tconfig.setSentinels(createSentinels(sentinelProperties));\n\t\t\t\treturn config;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * Create a {@link RedisClusterConfiguration} if necessary.\n\t\t * @return {@literal null} if no cluster settings are set.\n\t\t */\n\t\tprotected final RedisClusterConfiguration getClusterConfiguration() {\n\t\t\tif (this.clusterConfiguration != null) {\n\t\t\t\treturn this.clusterConfiguration;\n\t\t\t}\n\t\t\tif (this.properties.getCluster() == null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tCluster clusterProperties = this.properties.getCluster();\n\t\t\tRedisClusterConfiguration config = new RedisClusterConfiguration(\n\t\t\t\t\tclusterProperties.getNodes());\n\n\t\t\tif (clusterProperties.getMaxRedirects() != null) {\n\t\t\t\tconfig.setMaxRedirects(clusterProperties.getMaxRedirects());\n\t\t\t}\n\t\t\treturn config;\n\t\t}\n\n\t\tprivate List<RedisNode> createSentinels(Sentinel sentinel) {\n\t\t\tList<RedisNode> nodes = new ArrayList<>();\n\t\t\tfor (String node : StringUtils\n\t\t\t\t\t.commaDelimitedListToStringArray(sentinel.getNodes())) {\n\t\t\t\ttry {\n\t\t\t\t\tString[] parts = StringUtils.split(node, ":");\n\t\t\t\t\tAssert.state(parts.length == 2, "Must be defined as \'host:port\'");\n\t\t\t\t\tnodes.add(new RedisNode(parts[0], Integer.valueOf(parts[1])));\n\t\t\t\t}\n\t\t\t\tcatch (RuntimeException ex) {\n\t\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t\t"Invalid redis sentinel " + "property \'" + node + "\'", ex);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn nodes;\n\t\t}\n\n\t\tprivate JedisConnectionFactory createJedisConnectionFactory() {\n\t\t\tJedisPoolConfig poolConfig = this.properties.getPool() != null\n\t\t\t\t\t? jedisPoolConfig() : new JedisPoolConfig();\n\n\t\t\tif (getSentinelConfig() != null) {\n\t\t\t\treturn new JedisConnectionFactory(getSentinelConfig(), poolConfig);\n\t\t\t}\n\t\t\tif (getClusterConfiguration() != null) {\n\t\t\t\treturn new JedisConnectionFactory(getClusterConfiguration(), poolConfig);\n\t\t\t}\n\t\t\treturn new JedisConnectionFactory(poolConfig);\n\t\t}\n\n\t\tprivate JedisPoolConfig jedisPoolConfig() {\n\t\t\tJedisPoolConfig config = new JedisPoolConfig();\n\t\t\tRedisProperties.Pool props = this.properties.getPool();\n\t\t\tconfig.setMaxTotal(props.getMaxActive());\n\t\t\tconfig.setMaxIdle(props.getMaxIdle());\n\t\t\tconfig.setMinIdle(props.getMinIdle());\n\t\t\tconfig.setMaxWaitMillis(props.getMaxWait());\n\t\t\treturn config;\n\t\t}\n\n\t}\n\n\t/**\n\t * Standard Redis configuration.\n\t */\n\t@Configuration\n\tprotected static class RedisConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "redisTemplate")\n\t\tpublic RedisTemplate<Object, Object> redisTemplate(\n\t\t\t\tRedisConnectionFactory redisConnectionFactory)\n\t\t\t\t\t\tthrows UnknownHostException {\n\t\t\tRedisTemplate<Object, Object> template = new RedisTemplate<>();\n\t\t\ttemplate.setConnectionFactory(redisConnectionFactory);\n\t\t\treturn template;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(StringRedisTemplate.class)\n\t\tpublic StringRedisTemplate stringRedisTemplate(\n\t\t\t\tRedisConnectionFactory redisConnectionFactory)\n\t\t\t\t\t\tthrows UnknownHostException {\n\t\t\tStringRedisTemplate template = new StringRedisTemplate();\n\t\t\ttemplate.setConnectionFactory(redisConnectionFactory);\n\t\t\treturn template;\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
