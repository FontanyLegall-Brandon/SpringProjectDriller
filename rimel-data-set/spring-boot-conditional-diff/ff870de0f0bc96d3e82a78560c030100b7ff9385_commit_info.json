{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JndiConnectionFactoryAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JndiConnectionFactoryAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,6 +16,8 @@\n \n package org.springframework.boot.autoconfigure.jms;\n \n+import java.util.Arrays;\n+\n import javax.jms.ConnectionFactory;\n import javax.naming.NamingException;\n \n@@ -25,6 +27,7 @@ import org.springframework.boot.autoconfigure.condition.ConditionalOnJndi;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.annotation.AnnotationUtils;\n import org.springframework.jndi.JndiLocatorDelegate;\n \n /**\n@@ -36,12 +39,26 @@ import org.springframework.jndi.JndiLocatorDelegate;\n @Configuration\n @AutoConfigureBefore(JmsAutoConfiguration.class)\n @ConditionalOnMissingBean(ConnectionFactory.class)\n-@ConditionalOnJndi("java:/JmsXA")\n+@ConditionalOnJndi({ "java:/JmsXA", "java:/XAConnectionFactory" })\n public class JndiConnectionFactoryAutoConfiguration {\n \n \t@Bean\n \tpublic ConnectionFactory connectionFactory() throws NamingException {\n-\t\treturn new JndiLocatorDelegate().lookup("java:/JmsXA", ConnectionFactory.class);\n+\t\tfor (String name : getJndiLocations()) {\n+\t\t\ttry {\n+\t\t\t\treturn new JndiLocatorDelegate().lookup(name, ConnectionFactory.class);\n+\t\t\t}\n+\t\t\tcatch (NamingException ex) {\n+\t\t\t\t// Swallow and continue\n+\t\t\t}\n+\t\t}\n+\t\tthrow new IllegalStateException(\n+\t\t\t\t"Unable to find ConnectionFactory in JNDI locations "\n+\t\t\t\t\t\t+ Arrays.asList(getJndiLocations()));\n+\t}\n+\n+\tprivate String[] getJndiLocations() {\n+\t\treturn AnnotationUtils.getAnnotation(getClass(), ConditionalOnJndi.class).value();\n \t}\n \n }\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jms;\n\nimport java.util.Arrays;\n\nimport javax.jms.ConnectionFactory;\nimport javax.naming.NamingException;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnJndi;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.AnnotationUtils;\nimport org.springframework.jndi.JndiLocatorDelegate;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for JMS provided from JNDI.\n *\n * @author Phillip Webb\n * @since 1.2.0\n */\n@Configuration\n@AutoConfigureBefore(JmsAutoConfiguration.class)\n@ConditionalOnMissingBean(ConnectionFactory.class)\n@ConditionalOnJndi({ "java:/JmsXA", "java:/XAConnectionFactory" })\npublic class JndiConnectionFactoryAutoConfiguration {\n\n\t@Bean\n\tpublic ConnectionFactory connectionFactory() throws NamingException {\n\t\tfor (String name : getJndiLocations()) {\n\t\t\ttry {\n\t\t\t\treturn new JndiLocatorDelegate().lookup(name, ConnectionFactory.class);\n\t\t\t}\n\t\t\tcatch (NamingException ex) {\n\t\t\t\t// Swallow and continue\n\t\t\t}\n\t\t}\n\t\tthrow new IllegalStateException(\n\t\t\t\t"Unable to find ConnectionFactory in JNDI locations "\n\t\t\t\t\t\t+ Arrays.asList(getJndiLocations()));\n\t}\n\n\tprivate String[] getJndiLocations() {\n\t\treturn AnnotationUtils.getAnnotation(getClass(), ConditionalOnJndi.class).value();\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jms;\n\nimport javax.jms.ConnectionFactory;\nimport javax.naming.NamingException;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnJndi;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jndi.JndiLocatorDelegate;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for JMS provided from JNDI.\n *\n * @author Phillip Webb\n * @since 1.2.0\n */\n@Configuration\n@AutoConfigureBefore(JmsAutoConfiguration.class)\n@ConditionalOnMissingBean(ConnectionFactory.class)\n@ConditionalOnJndi("java:/JmsXA")\npublic class JndiConnectionFactoryAutoConfiguration {\n\n\t@Bean\n\tpublic ConnectionFactory connectionFactory() throws NamingException {\n\t\treturn new JndiLocatorDelegate().lookup("java:/JmsXA", ConnectionFactory.class);\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
