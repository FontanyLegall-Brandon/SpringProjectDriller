{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hazelcast/HazelcastServerConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2012-2017 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.hazelcast;\n+\n+import java.io.IOException;\n+\n+import com.hazelcast.config.Config;\n+import com.hazelcast.core.Hazelcast;\n+import com.hazelcast.core.HazelcastInstance;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Conditional;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.io.Resource;\n+\n+/**\n+ * Configuration for Hazelcast server.\n+ *\n+ * @author Stephane Nicoll\n+ * @author Vedran Pavic\n+ * @since 2.0.0\n+ */\n+class HazelcastServerConfiguration {\n+\n+\tstatic final String CONFIG_SYSTEM_PROPERTY = "hazelcast.config";\n+\n+\t@Configuration\n+\t@ConditionalOnMissingBean(Config.class)\n+\t@Conditional(ConfigAvailableCondition.class)\n+\tstatic class HazelcastServerConfigFileConfiguration {\n+\n+\t\t@Bean\n+\t\tpublic HazelcastInstance hazelcastInstance(HazelcastProperties properties)\n+\t\t\t\tthrows IOException {\n+\t\t\tResource config = properties.resolveConfigLocation();\n+\t\t\tif (config != null) {\n+\t\t\t\treturn HazelcastInstanceFactory.createHazelcastInstance(config);\n+\t\t\t}\n+\t\t\treturn Hazelcast.newHazelcastInstance();\n+\t\t}\n+\n+\t}\n+\n+\t@Configuration\n+\t@ConditionalOnSingleCandidate(Config.class)\n+\tstatic class HazelcastServerConfigConfiguration {\n+\n+\t\t@Bean\n+\t\tpublic HazelcastInstance hazelcastInstance(Config config) {\n+\t\t\treturn HazelcastInstanceFactory.createHazelcastInstance(config);\n+\t\t}\n+\n+\t}\n+\n+\t/**\n+\t * {@link HazelcastConfigResourceCondition} that checks if the\n+\t * {@code spring.hazelcast.config} configuration key is defined.\n+\t */\n+\tstatic class ConfigAvailableCondition extends HazelcastConfigResourceCondition {\n+\n+\t\tConfigAvailableCondition() {\n+\t\t\tsuper(CONFIG_SYSTEM_PROPERTY, "file:./hazelcast.xml",\n+\t\t\t\t\t"classpath:/hazelcast.xml");\n+\t\t}\n+\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.hazelcast;\n\nimport java.io.IOException;\n\nimport com.hazelcast.config.Config;\nimport com.hazelcast.core.Hazelcast;\nimport com.hazelcast.core.HazelcastInstance;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.Resource;\n\n/**\n * Configuration for Hazelcast server.\n *\n * @author Stephane Nicoll\n * @author Vedran Pavic\n * @since 2.0.0\n */\nclass HazelcastServerConfiguration {\n\n\tstatic final String CONFIG_SYSTEM_PROPERTY = "hazelcast.config";\n\n\t@Configuration\n\t@ConditionalOnMissingBean(Config.class)\n\t@Conditional(ConfigAvailableCondition.class)\n\tstatic class HazelcastServerConfigFileConfiguration {\n\n\t\t@Bean\n\t\tpublic HazelcastInstance hazelcastInstance(HazelcastProperties properties)\n\t\t\t\tthrows IOException {\n\t\t\tResource config = properties.resolveConfigLocation();\n\t\t\tif (config != null) {\n\t\t\t\treturn HazelcastInstanceFactory.createHazelcastInstance(config);\n\t\t\t}\n\t\t\treturn Hazelcast.newHazelcastInstance();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnSingleCandidate(Config.class)\n\tstatic class HazelcastServerConfigConfiguration {\n\n\t\t@Bean\n\t\tpublic HazelcastInstance hazelcastInstance(Config config) {\n\t\t\treturn HazelcastInstanceFactory.createHazelcastInstance(config);\n\t\t}\n\n\t}\n\n\t/**\n\t * {@link HazelcastConfigResourceCondition} that checks if the\n\t * {@code spring.hazelcast.config} configuration key is defined.\n\t */\n\tstatic class ConfigAvailableCondition extends HazelcastConfigResourceCondition {\n\n\t\tConfigAvailableCondition() {\n\t\t\tsuper(CONFIG_SYSTEM_PROPERTY, "file:./hazelcast.xml",\n\t\t\t\t\t"classpath:/hazelcast.xml");\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
