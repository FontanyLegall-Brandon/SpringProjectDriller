{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jmx/JmxAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jmx/JmxAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -42,7 +42,7 @@ import org.springframework.util.StringUtils;\n  * {@link EnableAutoConfiguration Auto-configuration} to enable/disable Spring\'s\n  * {@link EnableMBeanExport} mechanism based on configuration properties.\n  * <p>\n- * To disable auto export of annotation beans set {@code spring.jmx.enabled: false}.\n+ * To enable auto export of annotation beans set {@code spring.jmx.enabled: true}.\n  *\n  * @author Christian Dupuis\n  * @author Madhura Bhave\n@@ -50,7 +50,7 @@ import org.springframework.util.StringUtils;\n  */\n @Configuration\n @ConditionalOnClass({ MBeanExporter.class })\n-@ConditionalOnProperty(prefix = "spring.jmx", name = "enabled", havingValue = "true", matchIfMissing = true)\n+@ConditionalOnProperty(prefix = "spring.jmx", name = "enabled", havingValue = "true")\n public class JmxAutoConfiguration {\n \n \tprivate final Environment environment;\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jmx;\n\nimport javax.management.MBeanServer;\n\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.EnableMBeanExport;\nimport org.springframework.context.annotation.MBeanExportConfiguration.SpecificPlatform;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.core.env.Environment;\nimport org.springframework.jmx.export.MBeanExporter;\nimport org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource;\nimport org.springframework.jmx.export.annotation.AnnotationMBeanExporter;\nimport org.springframework.jmx.export.naming.ObjectNamingStrategy;\nimport org.springframework.jmx.support.MBeanServerFactoryBean;\nimport org.springframework.jmx.support.RegistrationPolicy;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to enable/disable Spring\'s\n * {@link EnableMBeanExport} mechanism based on configuration properties.\n * <p>\n * To enable auto export of annotation beans set {@code spring.jmx.enabled: true}.\n *\n * @author Christian Dupuis\n * @author Madhura Bhave\n * @author Artsiom Yudovin\n */\n@Configuration\n@ConditionalOnClass({ MBeanExporter.class })\n@ConditionalOnProperty(prefix = "spring.jmx", name = "enabled", havingValue = "true")\npublic class JmxAutoConfiguration {\n\n\tprivate final Environment environment;\n\n\tpublic JmxAutoConfiguration(Environment environment) {\n\t\tthis.environment = environment;\n\t}\n\n\t@Bean\n\t@Primary\n\t@ConditionalOnMissingBean(value = MBeanExporter.class, search = SearchStrategy.CURRENT)\n\tpublic AnnotationMBeanExporter mbeanExporter(ObjectNamingStrategy namingStrategy,\n\t\t\tBeanFactory beanFactory) {\n\t\tAnnotationMBeanExporter exporter = new AnnotationMBeanExporter();\n\t\texporter.setRegistrationPolicy(RegistrationPolicy.FAIL_ON_EXISTING);\n\t\texporter.setNamingStrategy(namingStrategy);\n\t\tString serverBean = this.environment.getProperty("spring.jmx.server",\n\t\t\t\t"mbeanServer");\n\t\tif (StringUtils.hasLength(serverBean)) {\n\t\t\texporter.setServer(beanFactory.getBean(serverBean, MBeanServer.class));\n\t\t}\n\t\treturn exporter;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(value = ObjectNamingStrategy.class, search = SearchStrategy.CURRENT)\n\tpublic ParentAwareNamingStrategy objectNamingStrategy() {\n\t\tParentAwareNamingStrategy namingStrategy = new ParentAwareNamingStrategy(\n\t\t\t\tnew AnnotationJmxAttributeSource());\n\t\tString defaultDomain = this.environment.getProperty("spring.jmx.default-domain");\n\t\tif (StringUtils.hasLength(defaultDomain)) {\n\t\t\tnamingStrategy.setDefaultDomain(defaultDomain);\n\t\t}\n\t\tboolean uniqueNames = this.environment.getProperty("spring.jmx.unique-names",\n\t\t\t\tBoolean.class, false);\n\t\tnamingStrategy.setEnsureUniqueRuntimeObjectNames(uniqueNames);\n\t\treturn namingStrategy;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic MBeanServer mbeanServer() {\n\t\tSpecificPlatform platform = SpecificPlatform.get();\n\t\tif (platform != null) {\n\t\t\treturn platform.getMBeanServer();\n\t\t}\n\t\tMBeanServerFactoryBean factory = new MBeanServerFactoryBean();\n\t\tfactory.setLocateExistingServerIfPossible(true);\n\t\tfactory.afterPropertiesSet();\n\t\treturn factory.getObject();\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.jmx;\n\nimport javax.management.MBeanServer;\n\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.SearchStrategy;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.EnableMBeanExport;\nimport org.springframework.context.annotation.MBeanExportConfiguration.SpecificPlatform;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.core.env.Environment;\nimport org.springframework.jmx.export.MBeanExporter;\nimport org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource;\nimport org.springframework.jmx.export.annotation.AnnotationMBeanExporter;\nimport org.springframework.jmx.export.naming.ObjectNamingStrategy;\nimport org.springframework.jmx.support.MBeanServerFactoryBean;\nimport org.springframework.jmx.support.RegistrationPolicy;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} to enable/disable Spring\'s\n * {@link EnableMBeanExport} mechanism based on configuration properties.\n * <p>\n * To disable auto export of annotation beans set {@code spring.jmx.enabled: false}.\n *\n * @author Christian Dupuis\n * @author Madhura Bhave\n * @author Artsiom Yudovin\n */\n@Configuration\n@ConditionalOnClass({ MBeanExporter.class })\n@ConditionalOnProperty(prefix = "spring.jmx", name = "enabled", havingValue = "true", matchIfMissing = true)\npublic class JmxAutoConfiguration {\n\n\tprivate final Environment environment;\n\n\tpublic JmxAutoConfiguration(Environment environment) {\n\t\tthis.environment = environment;\n\t}\n\n\t@Bean\n\t@Primary\n\t@ConditionalOnMissingBean(value = MBeanExporter.class, search = SearchStrategy.CURRENT)\n\tpublic AnnotationMBeanExporter mbeanExporter(ObjectNamingStrategy namingStrategy,\n\t\t\tBeanFactory beanFactory) {\n\t\tAnnotationMBeanExporter exporter = new AnnotationMBeanExporter();\n\t\texporter.setRegistrationPolicy(RegistrationPolicy.FAIL_ON_EXISTING);\n\t\texporter.setNamingStrategy(namingStrategy);\n\t\tString serverBean = this.environment.getProperty("spring.jmx.server",\n\t\t\t\t"mbeanServer");\n\t\tif (StringUtils.hasLength(serverBean)) {\n\t\t\texporter.setServer(beanFactory.getBean(serverBean, MBeanServer.class));\n\t\t}\n\t\treturn exporter;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(value = ObjectNamingStrategy.class, search = SearchStrategy.CURRENT)\n\tpublic ParentAwareNamingStrategy objectNamingStrategy() {\n\t\tParentAwareNamingStrategy namingStrategy = new ParentAwareNamingStrategy(\n\t\t\t\tnew AnnotationJmxAttributeSource());\n\t\tString defaultDomain = this.environment.getProperty("spring.jmx.default-domain");\n\t\tif (StringUtils.hasLength(defaultDomain)) {\n\t\t\tnamingStrategy.setDefaultDomain(defaultDomain);\n\t\t}\n\t\tboolean uniqueNames = this.environment.getProperty("spring.jmx.unique-names",\n\t\t\t\tBoolean.class, false);\n\t\tnamingStrategy.setEnsureUniqueRuntimeObjectNames(uniqueNames);\n\t\treturn namingStrategy;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic MBeanServer mbeanServer() {\n\t\tSpecificPlatform platform = SpecificPlatform.get();\n\t\tif (platform != null) {\n\t\t\treturn platform.getMBeanServer();\n\t\t}\n\t\tMBeanServerFactoryBean factory = new MBeanServerFactoryBean();\n\t\tfactory.setLocateExistingServerIfPossible(true);\n\t\tfactory.afterPropertiesSet();\n\t\treturn factory.getObject();\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
