{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/ReactiveCassandraRepositoriesAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2012-2017 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.data.cassandra;\n+\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.cassandra.core.session.ReactiveSession;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.data.cassandra.repository.ReactiveCassandraRepository;\n+import org.springframework.data.cassandra.repository.config.EnableReactiveCassandraRepositories;\n+import org.springframework.data.cassandra.repository.support.ReactiveCassandraRepositoryFactoryBean;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s Cassandra\n+ * Reactive Repositories.\n+ *\n+ * @author Eddú Meléndez\n+ * @see EnableReactiveCassandraRepositories\n+ * @since 2.0.0\n+ */\n+@Configuration\n+@ConditionalOnClass({ ReactiveSession.class, ReactiveCassandraRepository.class })\n+@ConditionalOnProperty(prefix = "spring.data.cassandra.reactive-repositories", name = "enabled", havingValue = "true", matchIfMissing = true)\n+@ConditionalOnMissingBean(ReactiveCassandraRepositoryFactoryBean.class)\n+@Import(ReactiveCassandraRepositoriesAutoConfigureRegistrar.class)\n+public class ReactiveCassandraRepositoriesAutoConfiguration {\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.data.cassandra;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.cassandra.core.session.ReactiveSession;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.data.cassandra.repository.ReactiveCassandraRepository;\nimport org.springframework.data.cassandra.repository.config.EnableReactiveCassandraRepositories;\nimport org.springframework.data.cassandra.repository.support.ReactiveCassandraRepositoryFactoryBean;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Spring Data\'s Cassandra\n * Reactive Repositories.\n *\n * @author Eddú Meléndez\n * @see EnableReactiveCassandraRepositories\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnClass({ ReactiveSession.class, ReactiveCassandraRepository.class })\n@ConditionalOnProperty(prefix = "spring.data.cassandra.reactive-repositories", name = "enabled", havingValue = "true", matchIfMissing = true)\n@ConditionalOnMissingBean(ReactiveCassandraRepositoryFactoryBean.class)\n@Import(ReactiveCassandraRepositoriesAutoConfigureRegistrar.class)\npublic class ReactiveCassandraRepositoriesAutoConfiguration {\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
