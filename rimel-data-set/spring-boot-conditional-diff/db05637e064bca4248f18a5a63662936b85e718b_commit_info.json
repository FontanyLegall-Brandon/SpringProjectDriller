{'_old_path': PosixPath('spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/web/MultipartAutoConfiguration.java'), '_new_path': PosixPath('spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/web/MultipartAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -17,25 +17,30 @@\n package org.springframework.bootstrap.autoconfigure.web;\n \n import javax.servlet.MultipartConfigElement;\n+import javax.servlet.Servlet;\n \n import org.springframework.bootstrap.context.annotation.ConditionalOnBean;\n+import org.springframework.bootstrap.context.annotation.ConditionalOnClass;\n import org.springframework.bootstrap.context.annotation.EnableAutoConfiguration;\n+import org.springframework.bootstrap.context.embedded.EmbeddedWebApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.web.multipart.support.StandardServletMultipartResolver;\n \n /**\n- * {@link EnableAutoConfiguration Auto-configuration} for multi-part uploads. It detects\n- * the existence of a {@link MultipartConfigElement} in the app context and then adds\n- * critical beans while also autowiring it into the Jetty/Tomcat embedded containers.\n+ * {@link EnableAutoConfiguration Auto-configuration} for multi-part uploads. Adds a\n+ * {@link StandardServletMultipartResolver} when a {@link MultipartConfigElement} bean is\n+ * defined. The {@link EmbeddedWebApplicationContext} will associated the\n+ * {@link MultipartConfigElement} bean to any {@link Servlet} beans.\n  * \n  * @author Greg Turnquist\n  */\n @Configuration\n+@ConditionalOnClass({ Servlet.class, StandardServletMultipartResolver.class })\n+@ConditionalOnBean(MultipartConfigElement.class)\n public class MultipartAutoConfiguration {\n \n \t@Bean\n-\t@ConditionalOnBean(MultipartConfigElement.class)\n \tpublic StandardServletMultipartResolver multipartResolver() {\n \t\treturn new StandardServletMultipartResolver();\n \t}\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.bootstrap.autoconfigure.web;\n\nimport javax.servlet.MultipartConfigElement;\nimport javax.servlet.Servlet;\n\nimport org.springframework.bootstrap.context.annotation.ConditionalOnBean;\nimport org.springframework.bootstrap.context.annotation.ConditionalOnClass;\nimport org.springframework.bootstrap.context.annotation.EnableAutoConfiguration;\nimport org.springframework.bootstrap.context.embedded.EmbeddedWebApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.multipart.support.StandardServletMultipartResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for multi-part uploads. Adds a\n * {@link StandardServletMultipartResolver} when a {@link MultipartConfigElement} bean is\n * defined. The {@link EmbeddedWebApplicationContext} will associated the\n * {@link MultipartConfigElement} bean to any {@link Servlet} beans.\n * \n * @author Greg Turnquist\n */\n@Configuration\n@ConditionalOnClass({ Servlet.class, StandardServletMultipartResolver.class })\n@ConditionalOnBean(MultipartConfigElement.class)\npublic class MultipartAutoConfiguration {\n\n\t@Bean\n\tpublic StandardServletMultipartResolver multipartResolver() {\n\t\treturn new StandardServletMultipartResolver();\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.bootstrap.autoconfigure.web;\n\nimport javax.servlet.MultipartConfigElement;\n\nimport org.springframework.bootstrap.context.annotation.ConditionalOnBean;\nimport org.springframework.bootstrap.context.annotation.EnableAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.multipart.support.StandardServletMultipartResolver;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for multi-part uploads. It detects\n * the existence of a {@link MultipartConfigElement} in the app context and then adds\n * critical beans while also autowiring it into the Jetty/Tomcat embedded containers.\n * \n * @author Greg Turnquist\n */\n@Configuration\npublic class MultipartAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnBean(MultipartConfigElement.class)\n\tpublic StandardServletMultipartResolver multipartResolver() {\n\t\treturn new StandardServletMultipartResolver();\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
