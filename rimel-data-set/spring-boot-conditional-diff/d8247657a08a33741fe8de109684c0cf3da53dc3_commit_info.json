{'_old_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -22,6 +22,7 @@ import java.util.Map;\n import javax.jms.ConnectionFactory;\n import javax.sql.DataSource;\n \n+import com.datastax.driver.core.Cluster;\n import org.apache.solr.client.solrj.SolrServer;\n import org.elasticsearch.client.Client;\n \n@@ -29,6 +30,7 @@ import org.springframework.amqp.rabbit.core.RabbitTemplate;\n import org.springframework.beans.factory.InitializingBean;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.actuate.health.ApplicationHealthIndicator;\n+import org.springframework.boot.actuate.health.CassandraHealthIndicator;\n import org.springframework.boot.actuate.health.CompositeHealthIndicator;\n import org.springframework.boot.actuate.health.DataSourceHealthIndicator;\n import org.springframework.boot.actuate.health.DiskSpaceHealthIndicator;\n@@ -48,9 +50,11 @@ import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration;\n+import org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration;\n import org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration;\n import org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration;\n import org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration;\n@@ -66,6 +70,7 @@ import org.springframework.boot.context.properties.EnableConfigurationProperties\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.core.ResolvableType;\n+import org.springframework.data.cassandra.core.CassandraOperations;\n import org.springframework.data.mongodb.core.MongoTemplate;\n import org.springframework.data.redis.connection.RedisConnectionFactory;\n import org.springframework.jdbc.core.JdbcTemplate;\n@@ -78,15 +83,17 @@ import org.springframework.mail.javamail.JavaMailSenderImpl;\n  * @author Andy Wilkinson\n  * @author Stephane Nicoll\n  * @author Phillip Webb\n+ * @author Tommy Ludwig\n  * @since 1.1.0\n  */\n @Configuration\n @AutoConfigureBefore({ EndpointAutoConfiguration.class })\n-@AutoConfigureAfter({ DataSourceAutoConfiguration.class, MongoAutoConfiguration.class,\n-\t\tMongoDataAutoConfiguration.class, RedisAutoConfiguration.class,\n-\t\tRabbitAutoConfiguration.class, SolrAutoConfiguration.class,\n-\t\tMailSenderAutoConfiguration.class, JmsAutoConfiguration.class,\n-\t\tElasticsearchAutoConfiguration.class })\n+@AutoConfigureAfter({ CassandraAutoConfiguration.class,\n+\t\tCassandraDataAutoConfiguration.class, DataSourceAutoConfiguration.class,\n+\t\tMongoAutoConfiguration.class, MongoDataAutoConfiguration.class,\n+\t\tRedisAutoConfiguration.class, RabbitAutoConfiguration.class,\n+\t\tSolrAutoConfiguration.class, MailSenderAutoConfiguration.class,\n+\t\tJmsAutoConfiguration.class, ElasticsearchAutoConfiguration.class })\n @EnableConfigurationProperties({ HealthIndicatorAutoConfigurationProperties.class })\n public class HealthIndicatorAutoConfiguration {\n \n@@ -151,6 +158,24 @@ public class HealthIndicatorAutoConfiguration {\n \n \t}\n \n+\t@Configuration\n+\t@ConditionalOnClass({ CassandraOperations.class, Cluster.class })\n+\t@ConditionalOnBean(CassandraOperations.class)\n+\t@ConditionalOnEnabledHealthIndicator("cassandra")\n+\tpublic static class CassandraHealthIndicatorConfiguration extends\n+\t\t\tCompositeHealthIndicatorConfiguration<CassandraHealthIndicator, CassandraOperations> {\n+\n+\t\t@Autowired\n+\t\tprivate Map<String, CassandraOperations> cassandraOperations;\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean(name = "cassandraHealthIndicator")\n+\t\tpublic HealthIndicator cassandraHealthIndicator() {\n+\t\t\treturn createHealthIndicator(this.cassandraOperations);\n+\t\t}\n+\n+\t}\n+\n \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n', 'source_code': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport java.util.Collection;\nimport java.util.Map;\n\nimport javax.jms.ConnectionFactory;\nimport javax.sql.DataSource;\n\nimport com.datastax.driver.core.Cluster;\nimport org.apache.solr.client.solrj.SolrServer;\nimport org.elasticsearch.client.Client;\n\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuate.health.ApplicationHealthIndicator;\nimport org.springframework.boot.actuate.health.CassandraHealthIndicator;\nimport org.springframework.boot.actuate.health.CompositeHealthIndicator;\nimport org.springframework.boot.actuate.health.DataSourceHealthIndicator;\nimport org.springframework.boot.actuate.health.DiskSpaceHealthIndicator;\nimport org.springframework.boot.actuate.health.DiskSpaceHealthIndicatorProperties;\nimport org.springframework.boot.actuate.health.ElasticsearchHealthIndicator;\nimport org.springframework.boot.actuate.health.ElasticsearchHealthIndicatorProperties;\nimport org.springframework.boot.actuate.health.HealthAggregator;\nimport org.springframework.boot.actuate.health.HealthIndicator;\nimport org.springframework.boot.actuate.health.JmsHealthIndicator;\nimport org.springframework.boot.actuate.health.MailHealthIndicator;\nimport org.springframework.boot.actuate.health.MongoHealthIndicator;\nimport org.springframework.boot.actuate.health.OrderedHealthAggregator;\nimport org.springframework.boot.actuate.health.RabbitHealthIndicator;\nimport org.springframework.boot.actuate.health.RedisHealthIndicator;\nimport org.springframework.boot.actuate.health.SolrHealthIndicator;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration;\nimport org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration;\nimport org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration;\nimport org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration;\nimport org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadata;\nimport org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvider;\nimport org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProviders;\nimport org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration;\nimport org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration;\nimport org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration;\nimport org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.ResolvableType;\nimport org.springframework.data.cassandra.core.CassandraOperations;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.mail.javamail.JavaMailSenderImpl;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link HealthIndicator}s.\n *\n * @author Christian Dupuis\n * @author Andy Wilkinson\n * @author Stephane Nicoll\n * @author Phillip Webb\n * @author Tommy Ludwig\n * @since 1.1.0\n */\n@Configuration\n@AutoConfigureBefore({ EndpointAutoConfiguration.class })\n@AutoConfigureAfter({ CassandraAutoConfiguration.class,\n\t\tCassandraDataAutoConfiguration.class, DataSourceAutoConfiguration.class,\n\t\tMongoAutoConfiguration.class, MongoDataAutoConfiguration.class,\n\t\tRedisAutoConfiguration.class, RabbitAutoConfiguration.class,\n\t\tSolrAutoConfiguration.class, MailSenderAutoConfiguration.class,\n\t\tJmsAutoConfiguration.class, ElasticsearchAutoConfiguration.class })\n@EnableConfigurationProperties({ HealthIndicatorAutoConfigurationProperties.class })\npublic class HealthIndicatorAutoConfiguration {\n\n\t@Autowired\n\tprivate HealthIndicatorAutoConfigurationProperties configurationProperties = new HealthIndicatorAutoConfigurationProperties();\n\n\t@Bean\n\t@ConditionalOnMissingBean(HealthAggregator.class)\n\tpublic OrderedHealthAggregator healthAggregator() {\n\t\tOrderedHealthAggregator healthAggregator = new OrderedHealthAggregator();\n\t\tif (this.configurationProperties.getOrder() != null) {\n\t\t\thealthAggregator.setStatusOrder(this.configurationProperties.getOrder());\n\t\t}\n\t\treturn healthAggregator;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(HealthIndicator.class)\n\tpublic ApplicationHealthIndicator applicationHealthIndicator() {\n\t\treturn new ApplicationHealthIndicator();\n\t}\n\n\t/**\n\t * Base class for configurations that can combine source beans using a\n\t * {@link CompositeHealthIndicator}.\n\t * @param <H> The health indicator type\n\t * @param <S> The bean source type\n\t */\n\tprotected static abstract class CompositeHealthIndicatorConfiguration<H extends HealthIndicator, S> {\n\n\t\t@Autowired\n\t\tprivate HealthAggregator healthAggregator;\n\n\t\tprotected HealthIndicator createHealthIndicator(Map<String, S> beans) {\n\t\t\tif (beans.size() == 1) {\n\t\t\t\treturn createHealthIndicator(beans.values().iterator().next());\n\t\t\t}\n\t\t\tCompositeHealthIndicator composite = new CompositeHealthIndicator(\n\t\t\t\t\tthis.healthAggregator);\n\t\t\tfor (Map.Entry<String, S> entry : beans.entrySet()) {\n\t\t\t\tcomposite.addHealthIndicator(entry.getKey(),\n\t\t\t\t\t\tcreateHealthIndicator(entry.getValue()));\n\t\t\t}\n\t\t\treturn composite;\n\t\t}\n\n\t\t@SuppressWarnings("unchecked")\n\t\tprotected H createHealthIndicator(S source) {\n\t\t\tClass<?>[] generics = ResolvableType\n\t\t\t\t\t.forClass(CompositeHealthIndicatorConfiguration.class, getClass())\n\t\t\t\t\t.resolveGenerics();\n\t\t\tClass<H> indicatorClass = (Class<H>) generics[0];\n\t\t\tClass<S> sourceClass = (Class<S>) generics[1];\n\t\t\ttry {\n\t\t\t\treturn indicatorClass.getConstructor(sourceClass).newInstance(source);\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tthrow new IllegalStateException("Unable to create indicator "\n\t\t\t\t\t\t+ indicatorClass + " for source " + sourceClass, ex);\n\t\t\t}\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ CassandraOperations.class, Cluster.class })\n\t@ConditionalOnBean(CassandraOperations.class)\n\t@ConditionalOnEnabledHealthIndicator("cassandra")\n\tpublic static class CassandraHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<CassandraHealthIndicator, CassandraOperations> {\n\n\t\t@Autowired\n\t\tprivate Map<String, CassandraOperations> cassandraOperations;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "cassandraHealthIndicator")\n\t\tpublic HealthIndicator cassandraHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.cassandraOperations);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(JdbcTemplate.class)\n\t@ConditionalOnBean(DataSource.class)\n\t@ConditionalOnEnabledHealthIndicator("db")\n\tpublic static class DataSourcesHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n\t\t\timplements InitializingBean {\n\n\t\t@Autowired(required = false)\n\t\tprivate Map<String, DataSource> dataSources;\n\n\t\t@Autowired(required = false)\n\t\tprivate Collection<DataSourcePoolMetadataProvider> metadataProviders;\n\n\t\tprivate DataSourcePoolMetadataProvider poolMetadataProvider;\n\n\t\t@Override\n\t\tpublic void afterPropertiesSet() throws Exception {\n\t\t\tthis.poolMetadataProvider = new DataSourcePoolMetadataProviders(\n\t\t\t\t\tthis.metadataProviders);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "dbHealthIndicator")\n\t\tpublic HealthIndicator dbHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.dataSources);\n\t\t}\n\n\t\t@Override\n\t\tprotected DataSourceHealthIndicator createHealthIndicator(DataSource source) {\n\t\t\treturn new DataSourceHealthIndicator(source, getValidationQuery(source));\n\t\t}\n\n\t\tprivate String getValidationQuery(DataSource source) {\n\t\t\tDataSourcePoolMetadata poolMetadata = this.poolMetadataProvider\n\t\t\t\t\t.getDataSourcePoolMetadata(source);\n\t\t\treturn (poolMetadata == null ? null : poolMetadata.getValidationQuery());\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(MongoTemplate.class)\n\t@ConditionalOnEnabledHealthIndicator("mongo")\n\tpublic static class MongoHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {\n\n\t\t@Autowired\n\t\tprivate Map<String, MongoTemplate> mongoTemplates;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "mongoHealthIndicator")\n\t\tpublic HealthIndicator mongoHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.mongoTemplates);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(RedisConnectionFactory.class)\n\t@ConditionalOnEnabledHealthIndicator("redis")\n\tpublic static class RedisHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {\n\n\t\t@Autowired\n\t\tprivate Map<String, RedisConnectionFactory> redisConnectionFactories;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "redisHealthIndicator")\n\t\tpublic HealthIndicator redisHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.redisConnectionFactories);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(RabbitTemplate.class)\n\t@ConditionalOnEnabledHealthIndicator("rabbit")\n\tpublic static class RabbitHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {\n\n\t\t@Autowired\n\t\tprivate Map<String, RabbitTemplate> rabbitTemplates;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "rabbitHealthIndicator")\n\t\tpublic HealthIndicator rabbitHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.rabbitTemplates);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(SolrServer.class)\n\t@ConditionalOnEnabledHealthIndicator("solr")\n\tpublic static class SolrHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {\n\n\t\t@Autowired\n\t\tprivate Map<String, SolrServer> solrServers;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "solrHealthIndicator")\n\t\tpublic HealthIndicator solrHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.solrServers);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnEnabledHealthIndicator("diskspace")\n\tpublic static class DiskSpaceHealthIndicatorConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "diskSpaceHealthIndicator")\n\t\tpublic DiskSpaceHealthIndicator diskSpaceHealthIndicator(\n\t\t\t\tDiskSpaceHealthIndicatorProperties properties) {\n\t\t\treturn new DiskSpaceHealthIndicator(properties);\n\t\t}\n\n\t\t@Bean\n\t\tpublic DiskSpaceHealthIndicatorProperties diskSpaceHealthIndicatorProperties() {\n\t\t\treturn new DiskSpaceHealthIndicatorProperties();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(JavaMailSenderImpl.class)\n\t@ConditionalOnEnabledHealthIndicator("mail")\n\tpublic static class MailHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {\n\n\t\t@Autowired(required = false)\n\t\tprivate Map<String, JavaMailSenderImpl> mailSenders;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "mailHealthIndicator")\n\t\tpublic HealthIndicator mailHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.mailSenders);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(ConnectionFactory.class)\n\t@ConditionalOnEnabledHealthIndicator("jms")\n\tpublic static class JmsHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {\n\n\t\t@Autowired(required = false)\n\t\tprivate Map<String, ConnectionFactory> connectionFactories;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "jmsHealthIndicator")\n\t\tpublic HealthIndicator jmsHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.connectionFactories);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(Client.class)\n\t@ConditionalOnEnabledHealthIndicator("elasticsearch")\n\t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n\tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {\n\n\t\t@Autowired\n\t\tprivate Map<String, Client> clients;\n\n\t\t@Autowired\n\t\tprivate ElasticsearchHealthIndicatorProperties properties;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "elasticsearchHealthIndicator")\n\t\tpublic HealthIndicator elasticsearchHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.clients);\n\t\t}\n\n\t\t@Override\n\t\tprotected ElasticsearchHealthIndicator createHealthIndicator(Client client) {\n\t\t\treturn new ElasticsearchHealthIndicator(client, this.properties);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure;\n\nimport java.util.Collection;\nimport java.util.Map;\n\nimport javax.jms.ConnectionFactory;\nimport javax.sql.DataSource;\n\nimport org.apache.solr.client.solrj.SolrServer;\nimport org.elasticsearch.client.Client;\n\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuate.health.ApplicationHealthIndicator;\nimport org.springframework.boot.actuate.health.CompositeHealthIndicator;\nimport org.springframework.boot.actuate.health.DataSourceHealthIndicator;\nimport org.springframework.boot.actuate.health.DiskSpaceHealthIndicator;\nimport org.springframework.boot.actuate.health.DiskSpaceHealthIndicatorProperties;\nimport org.springframework.boot.actuate.health.ElasticsearchHealthIndicator;\nimport org.springframework.boot.actuate.health.ElasticsearchHealthIndicatorProperties;\nimport org.springframework.boot.actuate.health.HealthAggregator;\nimport org.springframework.boot.actuate.health.HealthIndicator;\nimport org.springframework.boot.actuate.health.JmsHealthIndicator;\nimport org.springframework.boot.actuate.health.MailHealthIndicator;\nimport org.springframework.boot.actuate.health.MongoHealthIndicator;\nimport org.springframework.boot.actuate.health.OrderedHealthAggregator;\nimport org.springframework.boot.actuate.health.RabbitHealthIndicator;\nimport org.springframework.boot.actuate.health.RedisHealthIndicator;\nimport org.springframework.boot.actuate.health.SolrHealthIndicator;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration;\nimport org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration;\nimport org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadata;\nimport org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvider;\nimport org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProviders;\nimport org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration;\nimport org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration;\nimport org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration;\nimport org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.ResolvableType;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.mail.javamail.JavaMailSenderImpl;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link HealthIndicator}s.\n *\n * @author Christian Dupuis\n * @author Andy Wilkinson\n * @author Stephane Nicoll\n * @author Phillip Webb\n * @since 1.1.0\n */\n@Configuration\n@AutoConfigureBefore({ EndpointAutoConfiguration.class })\n@AutoConfigureAfter({ DataSourceAutoConfiguration.class, MongoAutoConfiguration.class,\n\t\tMongoDataAutoConfiguration.class, RedisAutoConfiguration.class,\n\t\tRabbitAutoConfiguration.class, SolrAutoConfiguration.class,\n\t\tMailSenderAutoConfiguration.class, JmsAutoConfiguration.class,\n\t\tElasticsearchAutoConfiguration.class })\n@EnableConfigurationProperties({ HealthIndicatorAutoConfigurationProperties.class })\npublic class HealthIndicatorAutoConfiguration {\n\n\t@Autowired\n\tprivate HealthIndicatorAutoConfigurationProperties configurationProperties = new HealthIndicatorAutoConfigurationProperties();\n\n\t@Bean\n\t@ConditionalOnMissingBean(HealthAggregator.class)\n\tpublic OrderedHealthAggregator healthAggregator() {\n\t\tOrderedHealthAggregator healthAggregator = new OrderedHealthAggregator();\n\t\tif (this.configurationProperties.getOrder() != null) {\n\t\t\thealthAggregator.setStatusOrder(this.configurationProperties.getOrder());\n\t\t}\n\t\treturn healthAggregator;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(HealthIndicator.class)\n\tpublic ApplicationHealthIndicator applicationHealthIndicator() {\n\t\treturn new ApplicationHealthIndicator();\n\t}\n\n\t/**\n\t * Base class for configurations that can combine source beans using a\n\t * {@link CompositeHealthIndicator}.\n\t * @param <H> The health indicator type\n\t * @param <S> The bean source type\n\t */\n\tprotected static abstract class CompositeHealthIndicatorConfiguration<H extends HealthIndicator, S> {\n\n\t\t@Autowired\n\t\tprivate HealthAggregator healthAggregator;\n\n\t\tprotected HealthIndicator createHealthIndicator(Map<String, S> beans) {\n\t\t\tif (beans.size() == 1) {\n\t\t\t\treturn createHealthIndicator(beans.values().iterator().next());\n\t\t\t}\n\t\t\tCompositeHealthIndicator composite = new CompositeHealthIndicator(\n\t\t\t\t\tthis.healthAggregator);\n\t\t\tfor (Map.Entry<String, S> entry : beans.entrySet()) {\n\t\t\t\tcomposite.addHealthIndicator(entry.getKey(),\n\t\t\t\t\t\tcreateHealthIndicator(entry.getValue()));\n\t\t\t}\n\t\t\treturn composite;\n\t\t}\n\n\t\t@SuppressWarnings("unchecked")\n\t\tprotected H createHealthIndicator(S source) {\n\t\t\tClass<?>[] generics = ResolvableType\n\t\t\t\t\t.forClass(CompositeHealthIndicatorConfiguration.class, getClass())\n\t\t\t\t\t.resolveGenerics();\n\t\t\tClass<H> indicatorClass = (Class<H>) generics[0];\n\t\t\tClass<S> sourceClass = (Class<S>) generics[1];\n\t\t\ttry {\n\t\t\t\treturn indicatorClass.getConstructor(sourceClass).newInstance(source);\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tthrow new IllegalStateException("Unable to create indicator "\n\t\t\t\t\t\t+ indicatorClass + " for source " + sourceClass, ex);\n\t\t\t}\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass(JdbcTemplate.class)\n\t@ConditionalOnBean(DataSource.class)\n\t@ConditionalOnEnabledHealthIndicator("db")\n\tpublic static class DataSourcesHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n\t\t\timplements InitializingBean {\n\n\t\t@Autowired(required = false)\n\t\tprivate Map<String, DataSource> dataSources;\n\n\t\t@Autowired(required = false)\n\t\tprivate Collection<DataSourcePoolMetadataProvider> metadataProviders;\n\n\t\tprivate DataSourcePoolMetadataProvider poolMetadataProvider;\n\n\t\t@Override\n\t\tpublic void afterPropertiesSet() throws Exception {\n\t\t\tthis.poolMetadataProvider = new DataSourcePoolMetadataProviders(\n\t\t\t\t\tthis.metadataProviders);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "dbHealthIndicator")\n\t\tpublic HealthIndicator dbHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.dataSources);\n\t\t}\n\n\t\t@Override\n\t\tprotected DataSourceHealthIndicator createHealthIndicator(DataSource source) {\n\t\t\treturn new DataSourceHealthIndicator(source, getValidationQuery(source));\n\t\t}\n\n\t\tprivate String getValidationQuery(DataSource source) {\n\t\t\tDataSourcePoolMetadata poolMetadata = this.poolMetadataProvider\n\t\t\t\t\t.getDataSourcePoolMetadata(source);\n\t\t\treturn (poolMetadata == null ? null : poolMetadata.getValidationQuery());\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(MongoTemplate.class)\n\t@ConditionalOnEnabledHealthIndicator("mongo")\n\tpublic static class MongoHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {\n\n\t\t@Autowired\n\t\tprivate Map<String, MongoTemplate> mongoTemplates;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "mongoHealthIndicator")\n\t\tpublic HealthIndicator mongoHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.mongoTemplates);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(RedisConnectionFactory.class)\n\t@ConditionalOnEnabledHealthIndicator("redis")\n\tpublic static class RedisHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {\n\n\t\t@Autowired\n\t\tprivate Map<String, RedisConnectionFactory> redisConnectionFactories;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "redisHealthIndicator")\n\t\tpublic HealthIndicator redisHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.redisConnectionFactories);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(RabbitTemplate.class)\n\t@ConditionalOnEnabledHealthIndicator("rabbit")\n\tpublic static class RabbitHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {\n\n\t\t@Autowired\n\t\tprivate Map<String, RabbitTemplate> rabbitTemplates;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "rabbitHealthIndicator")\n\t\tpublic HealthIndicator rabbitHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.rabbitTemplates);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(SolrServer.class)\n\t@ConditionalOnEnabledHealthIndicator("solr")\n\tpublic static class SolrHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {\n\n\t\t@Autowired\n\t\tprivate Map<String, SolrServer> solrServers;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "solrHealthIndicator")\n\t\tpublic HealthIndicator solrHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.solrServers);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnEnabledHealthIndicator("diskspace")\n\tpublic static class DiskSpaceHealthIndicatorConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "diskSpaceHealthIndicator")\n\t\tpublic DiskSpaceHealthIndicator diskSpaceHealthIndicator(\n\t\t\t\tDiskSpaceHealthIndicatorProperties properties) {\n\t\t\treturn new DiskSpaceHealthIndicator(properties);\n\t\t}\n\n\t\t@Bean\n\t\tpublic DiskSpaceHealthIndicatorProperties diskSpaceHealthIndicatorProperties() {\n\t\t\treturn new DiskSpaceHealthIndicatorProperties();\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(JavaMailSenderImpl.class)\n\t@ConditionalOnEnabledHealthIndicator("mail")\n\tpublic static class MailHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {\n\n\t\t@Autowired(required = false)\n\t\tprivate Map<String, JavaMailSenderImpl> mailSenders;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "mailHealthIndicator")\n\t\tpublic HealthIndicator mailHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.mailSenders);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(ConnectionFactory.class)\n\t@ConditionalOnEnabledHealthIndicator("jms")\n\tpublic static class JmsHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {\n\n\t\t@Autowired(required = false)\n\t\tprivate Map<String, ConnectionFactory> connectionFactories;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "jmsHealthIndicator")\n\t\tpublic HealthIndicator jmsHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.connectionFactories);\n\t\t}\n\n\t}\n\n\t@Configuration\n\t@ConditionalOnBean(Client.class)\n\t@ConditionalOnEnabledHealthIndicator("elasticsearch")\n\t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n\tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n\t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {\n\n\t\t@Autowired\n\t\tprivate Map<String, Client> clients;\n\n\t\t@Autowired\n\t\tprivate ElasticsearchHealthIndicatorProperties properties;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(name = "elasticsearchHealthIndicator")\n\t\tpublic HealthIndicator elasticsearchHealthIndicator() {\n\t\t\treturn createHealthIndicator(this.clients);\n\t\t}\n\n\t\t@Override\n\t\tprotected ElasticsearchHealthIndicator createHealthIndicator(Client client) {\n\t\t\treturn new ElasticsearchHealthIndicator(client, this.properties);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
