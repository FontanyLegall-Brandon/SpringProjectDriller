{'_old_path': PosixPath('spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/autoconfigure/ManagementConfiguration.java'), '_new_path': PosixPath('spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/autoconfigure/ManagementConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -35,7 +35,7 @@ import org.springframework.context.event.ContextRefreshedEvent;\n  * \n  */\n @Configuration\n-@ConditionalOnExpression("${management.port:8080}>0")\n+@ConditionalOnExpression("${management.port:${server.port:8080}}>0")\n public class ManagementConfiguration implements ApplicationContextAware, DisposableBean,\n \t\tApplicationListener<ContextRefreshedEvent> {\n \n@@ -48,7 +48,7 @@ public class ManagementConfiguration implements ApplicationContextAware, Disposa\n \t@Autowired\n \tprivate ManagementServerProperties management = new ManagementServerProperties();\n \n-\t@ConditionalOnExpression("${server.port:8080} == ${management.port:8080}")\n+\t@ConditionalOnExpression("${server.port:8080} == ${management.port:${server.port:8080}}")\n \t@Configuration\n \t@Import({ VarzConfiguration.class, HealthzConfiguration.class,\n \t\t\tShutdownConfiguration.class, TraceConfiguration.class })\n', 'source_code': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.bootstrap.actuate.autoconfigure;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.DisposableBean;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.bootstrap.actuate.properties.ManagementServerProperties;\nimport org.springframework.bootstrap.actuate.properties.ServerProperties;\nimport org.springframework.bootstrap.context.annotation.ConditionalOnExpression;\nimport org.springframework.bootstrap.context.embedded.AnnotationConfigEmbeddedWebApplicationContext;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.context.ApplicationListener;\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.event.ContextRefreshedEvent;\n\n/**\n * @author Dave Syer\n * \n */\n@Configuration\n@ConditionalOnExpression("${management.port:${server.port:8080}}>0")\npublic class ManagementConfiguration implements ApplicationContextAware, DisposableBean,\n\t\tApplicationListener<ContextRefreshedEvent> {\n\n\tprivate ApplicationContext parent;\n\tprivate ConfigurableApplicationContext context;\n\n\t@Autowired\n\tprivate ServerProperties configuration = new ServerProperties();\n\n\t@Autowired\n\tprivate ManagementServerProperties management = new ManagementServerProperties();\n\n\t@ConditionalOnExpression("${server.port:8080} == ${management.port:${server.port:8080}}")\n\t@Configuration\n\t@Import({ VarzConfiguration.class, HealthzConfiguration.class,\n\t\t\tShutdownConfiguration.class, TraceConfiguration.class })\n\tpublic static class ManagementEndpointsConfiguration {\n\t}\n\n\t@Override\n\tpublic void setApplicationContext(ApplicationContext applicationContext)\n\t\t\tthrows BeansException {\n\t\tthis.parent = applicationContext;\n\t}\n\n\t@Override\n\tpublic void destroy() throws Exception {\n\t\tif (this.context != null) {\n\t\t\tthis.context.close();\n\t\t}\n\t}\n\n\t@Override\n\tpublic void onApplicationEvent(ContextRefreshedEvent event) {\n\t\tif (event.getSource() != this.parent) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.configuration.getPort() != this.management.getPort()) {\n\t\t\tAnnotationConfigEmbeddedWebApplicationContext context = new AnnotationConfigEmbeddedWebApplicationContext();\n\t\t\tcontext.setParent(this.parent);\n\t\t\tcontext.register(ManagementServerConfiguration.class,\n\t\t\t\t\tVarzConfiguration.class, HealthzConfiguration.class,\n\t\t\t\t\tShutdownConfiguration.class, TraceConfiguration.class);\n\t\t\tcontext.refresh();\n\t\t\tthis.context = context;\n\t\t}\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.bootstrap.actuate.autoconfigure;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.DisposableBean;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.bootstrap.actuate.properties.ManagementServerProperties;\nimport org.springframework.bootstrap.actuate.properties.ServerProperties;\nimport org.springframework.bootstrap.context.annotation.ConditionalOnExpression;\nimport org.springframework.bootstrap.context.embedded.AnnotationConfigEmbeddedWebApplicationContext;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.context.ApplicationListener;\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.event.ContextRefreshedEvent;\n\n/**\n * @author Dave Syer\n * \n */\n@Configuration\n@ConditionalOnExpression("${management.port:8080}>0")\npublic class ManagementConfiguration implements ApplicationContextAware, DisposableBean,\n\t\tApplicationListener<ContextRefreshedEvent> {\n\n\tprivate ApplicationContext parent;\n\tprivate ConfigurableApplicationContext context;\n\n\t@Autowired\n\tprivate ServerProperties configuration = new ServerProperties();\n\n\t@Autowired\n\tprivate ManagementServerProperties management = new ManagementServerProperties();\n\n\t@ConditionalOnExpression("${server.port:8080} == ${management.port:8080}")\n\t@Configuration\n\t@Import({ VarzConfiguration.class, HealthzConfiguration.class,\n\t\t\tShutdownConfiguration.class, TraceConfiguration.class })\n\tpublic static class ManagementEndpointsConfiguration {\n\t}\n\n\t@Override\n\tpublic void setApplicationContext(ApplicationContext applicationContext)\n\t\t\tthrows BeansException {\n\t\tthis.parent = applicationContext;\n\t}\n\n\t@Override\n\tpublic void destroy() throws Exception {\n\t\tif (this.context != null) {\n\t\t\tthis.context.close();\n\t\t}\n\t}\n\n\t@Override\n\tpublic void onApplicationEvent(ContextRefreshedEvent event) {\n\t\tif (event.getSource() != this.parent) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.configuration.getPort() != this.management.getPort()) {\n\t\t\tAnnotationConfigEmbeddedWebApplicationContext context = new AnnotationConfigEmbeddedWebApplicationContext();\n\t\t\tcontext.setParent(this.parent);\n\t\t\tcontext.register(ManagementServerConfiguration.class,\n\t\t\t\t\tVarzConfiguration.class, HealthzConfiguration.class,\n\t\t\t\t\tShutdownConfiguration.class, TraceConfiguration.class);\n\t\t\tcontext.refresh();\n\t\t\tthis.context = context;\n\t\t}\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
