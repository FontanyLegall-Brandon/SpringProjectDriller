{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/OnListConditionTests.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/OnPropertyListConditionTests.java'), 'change_type': <ModificationType.RENAME: 3>, 'diff': '@@ -26,11 +26,11 @@ import org.springframework.context.annotation.Configuration;\n import static org.assertj.core.api.Assertions.assertThat;\n \n /**\n- * Tests for {@link OnListCondition}.\n+ * Tests for {@link OnPropertyListCondition}.\n  *\n  * @author Stephane Nicoll\n  */\n-public class OnListConditionTests {\n+public class OnPropertyListConditionTests {\n \n \tprivate final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n \t\t\t.withUserConfiguration(TestConfig.class);\n@@ -65,7 +65,7 @@ public class OnListConditionTests {\n \t}\n \n \t@Configuration\n-\t@Conditional(TestListCondition.class)\n+\t@Conditional(TestPropertyListCondition.class)\n \tprotected static class TestConfig {\n \n \t\t@Bean\n@@ -75,9 +75,9 @@ public class OnListConditionTests {\n \n \t}\n \n-\tstatic class TestListCondition extends OnListCondition {\n+\tstatic class TestPropertyListCondition extends OnPropertyListCondition {\n \n-\t\tTestListCondition() {\n+\t\tTestPropertyListCondition() {\n \t\t\tsuper("spring.test.my-list", () -> ConditionMessage.forCondition("test"));\n \t\t}\n \n', 'source_code': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport org.junit.Test;\n\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link OnPropertyListCondition}.\n *\n * @author Stephane Nicoll\n */\npublic class OnPropertyListConditionTests {\n\n\tprivate final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t\t.withUserConfiguration(TestConfig.class);\n\n\t@Test\n\tpublic void propertyNotDefined() {\n\t\tthis.contextRunner.run((context) -> assertThat(context).doesNotHaveBean("foo"));\n\t}\n\n\t@Test\n\tpublic void propertyDefinedAsCommaSeparated() {\n\t\tthis.contextRunner.withPropertyValues("spring.test.my-list=value1")\n\t\t\t\t.run((context) -> assertThat(context).hasBean("foo"));\n\t}\n\n\t@Test\n\tpublic void propertyDefinedAsList() {\n\t\tthis.contextRunner.withPropertyValues("spring.test.my-list[0]=value1")\n\t\t\t\t.run((context) -> assertThat(context).hasBean("foo"));\n\t}\n\n\t@Test\n\tpublic void propertyDefinedAsCommaSeparatedRelaxed() {\n\t\tthis.contextRunner.withPropertyValues("spring.test.my-list=value1")\n\t\t\t\t.run((context) -> assertThat(context).hasBean("foo"));\n\t}\n\n\t@Test\n\tpublic void propertyDefinedAsListRelaxed() {\n\t\tthis.contextRunner.withPropertyValues("spring.test.myList[0]=value1")\n\t\t\t\t.run((context) -> assertThat(context).hasBean("foo"));\n\t}\n\n\t@Configuration\n\t@Conditional(TestPropertyListCondition.class)\n\tprotected static class TestConfig {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\tstatic class TestPropertyListCondition extends OnPropertyListCondition {\n\n\t\tTestPropertyListCondition() {\n\t\t\tsuper("spring.test.my-list", () -> ConditionMessage.forCondition("test"));\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.condition;\n\nimport org.junit.Test;\n\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link OnListCondition}.\n *\n * @author Stephane Nicoll\n */\npublic class OnListConditionTests {\n\n\tprivate final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t\t.withUserConfiguration(TestConfig.class);\n\n\t@Test\n\tpublic void propertyNotDefined() {\n\t\tthis.contextRunner.run((context) -> assertThat(context).doesNotHaveBean("foo"));\n\t}\n\n\t@Test\n\tpublic void propertyDefinedAsCommaSeparated() {\n\t\tthis.contextRunner.withPropertyValues("spring.test.my-list=value1")\n\t\t\t\t.run((context) -> assertThat(context).hasBean("foo"));\n\t}\n\n\t@Test\n\tpublic void propertyDefinedAsList() {\n\t\tthis.contextRunner.withPropertyValues("spring.test.my-list[0]=value1")\n\t\t\t\t.run((context) -> assertThat(context).hasBean("foo"));\n\t}\n\n\t@Test\n\tpublic void propertyDefinedAsCommaSeparatedRelaxed() {\n\t\tthis.contextRunner.withPropertyValues("spring.test.my-list=value1")\n\t\t\t\t.run((context) -> assertThat(context).hasBean("foo"));\n\t}\n\n\t@Test\n\tpublic void propertyDefinedAsListRelaxed() {\n\t\tthis.contextRunner.withPropertyValues("spring.test.myList[0]=value1")\n\t\t\t\t.run((context) -> assertThat(context).hasBean("foo"));\n\t}\n\n\t@Configuration\n\t@Conditional(TestListCondition.class)\n\tprotected static class TestConfig {\n\n\t\t@Bean\n\t\tpublic String foo() {\n\t\t\treturn "foo";\n\t\t}\n\n\t}\n\n\tstatic class TestListCondition extends OnListCondition {\n\n\t\tTestListCondition() {\n\t\t\tsuper("spring.test.my-list", () -> ConditionMessage.forCondition("test"));\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
