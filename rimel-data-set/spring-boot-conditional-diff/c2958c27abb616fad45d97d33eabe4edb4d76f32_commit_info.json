{'_old_path': None, '_new_path': PosixPath('spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/servlet/WebMvcMetricsConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2012-2017 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.autoconfigure.metrics.web.servlet;\n+\n+import io.micrometer.core.instrument.MeterRegistry;\n+\n+import org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties;\n+import org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider;\n+import org.springframework.boot.actuate.metrics.web.servlet.MetricsHandlerInterceptor;\n+import org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetrics;\n+import org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.web.servlet.DispatcherServlet;\n+import org.springframework.web.servlet.config.annotation.InterceptorRegistry;\n+import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n+\n+/**\n+ * Configures instrumentation of Spring Web MVC servlet-based request mappings.\n+ *\n+ * @author Jon Schneider\n+ * @since 2.0.0\n+ */\n+@Configuration\n+@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n+@ConditionalOnClass(DispatcherServlet.class)\n+@EnableConfigurationProperties(MetricsProperties.class)\n+public class WebMvcMetricsConfiguration {\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean(WebMvcTagsProvider.class)\n+\tpublic DefaultWebMvcTagsProvider webmvcTagConfigurer() {\n+\t\treturn new DefaultWebMvcTagsProvider();\n+\t}\n+\n+\t@Bean\n+\tpublic WebMvcMetrics controllerMetrics(MeterRegistry registry,\n+\t\t\tMetricsProperties properties, WebMvcTagsProvider configurer) {\n+\t\treturn new WebMvcMetrics(registry, configurer,\n+\t\t\t\tproperties.getWeb().getServer().getRequestsMetricName(),\n+\t\t\t\tproperties.getWeb().getServer().isAutoTimeRequests(),\n+\t\t\t\tproperties.getWeb().getServer().isRecordRequestPercentiles());\n+\t}\n+\n+\t@Bean\n+\tpublic MetricsHandlerInterceptor webMetricsInterceptor(\n+\t\t\tWebMvcMetrics controllerMetrics) {\n+\t\treturn new MetricsHandlerInterceptor(controllerMetrics);\n+\t}\n+\n+\t@Configuration\n+\tpublic class MetricsServletRequestInterceptorConfiguration\n+\t\t\timplements WebMvcConfigurer {\n+\n+\t\tprivate final MetricsHandlerInterceptor handlerInterceptor;\n+\n+\t\tpublic MetricsServletRequestInterceptorConfiguration(\n+\t\t\t\tMetricsHandlerInterceptor handlerInterceptor) {\n+\t\t\tthis.handlerInterceptor = handlerInterceptor;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void addInterceptors(InterceptorRegistry registry) {\n+\t\t\tregistry.addInterceptor(this.handlerInterceptor);\n+\t\t}\n+\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics.web.servlet;\n\nimport io.micrometer.core.instrument.MeterRegistry;\n\nimport org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties;\nimport org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider;\nimport org.springframework.boot.actuate.metrics.web.servlet.MetricsHandlerInterceptor;\nimport org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetrics;\nimport org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.DispatcherServlet;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n/**\n * Configures instrumentation of Spring Web MVC servlet-based request mappings.\n *\n * @author Jon Schneider\n * @since 2.0.0\n */\n@Configuration\n@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n@ConditionalOnClass(DispatcherServlet.class)\n@EnableConfigurationProperties(MetricsProperties.class)\npublic class WebMvcMetricsConfiguration {\n\n\t@Bean\n\t@ConditionalOnMissingBean(WebMvcTagsProvider.class)\n\tpublic DefaultWebMvcTagsProvider webmvcTagConfigurer() {\n\t\treturn new DefaultWebMvcTagsProvider();\n\t}\n\n\t@Bean\n\tpublic WebMvcMetrics controllerMetrics(MeterRegistry registry,\n\t\t\tMetricsProperties properties, WebMvcTagsProvider configurer) {\n\t\treturn new WebMvcMetrics(registry, configurer,\n\t\t\t\tproperties.getWeb().getServer().getRequestsMetricName(),\n\t\t\t\tproperties.getWeb().getServer().isAutoTimeRequests(),\n\t\t\t\tproperties.getWeb().getServer().isRecordRequestPercentiles());\n\t}\n\n\t@Bean\n\tpublic MetricsHandlerInterceptor webMetricsInterceptor(\n\t\t\tWebMvcMetrics controllerMetrics) {\n\t\treturn new MetricsHandlerInterceptor(controllerMetrics);\n\t}\n\n\t@Configuration\n\tpublic class MetricsServletRequestInterceptorConfiguration\n\t\t\timplements WebMvcConfigurer {\n\n\t\tprivate final MetricsHandlerInterceptor handlerInterceptor;\n\n\t\tpublic MetricsServletRequestInterceptorConfiguration(\n\t\t\t\tMetricsHandlerInterceptor handlerInterceptor) {\n\t\t\tthis.handlerInterceptor = handlerInterceptor;\n\t\t}\n\n\t\t@Override\n\t\tpublic void addInterceptors(InterceptorRegistry registry) {\n\t\t\tregistry.addInterceptor(this.handlerInterceptor);\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
