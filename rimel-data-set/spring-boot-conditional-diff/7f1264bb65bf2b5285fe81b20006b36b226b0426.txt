@@ -17,8 +17,6 @@
 package org.springframework.boot.actuate.autoconfigure;
 
 import java.io.IOException;
-import java.util.HashMap;
-import java.util.Map;
 
 import javax.servlet.Filter;
 import javax.servlet.FilterChain;
@@ -30,23 +28,20 @@ import javax.servlet.http.HttpServletResponse;
 import org.springframework.beans.BeansException;
 import org.springframework.beans.factory.NoSuchBeanDefinitionException;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
-import org.springframework.beans.factory.support.BeanDefinitionBuilder;
-import org.springframework.beans.factory.support.BeanDefinitionRegistry;
-import org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;
 import org.springframework.boot.actuate.endpoint.Endpoint;
 import org.springframework.boot.actuate.endpoint.EnvironmentEndpoint;
 import org.springframework.boot.actuate.endpoint.MetricsEndpoint;
 import org.springframework.boot.actuate.endpoint.ShutdownEndpoint;
 import org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping;
 import org.springframework.boot.actuate.endpoint.mvc.EnvironmentMvcEndpoint;
-import org.springframework.boot.actuate.endpoint.mvc.GenericMvcEndpoint;
 import org.springframework.boot.actuate.endpoint.mvc.MetricsMvcEndpoint;
+import org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints;
 import org.springframework.boot.actuate.endpoint.mvc.ShutdownMvcEndpoint;
 import org.springframework.boot.actuate.properties.ManagementServerProperties;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.PropertyPlaceholderAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
@@ -63,7 +58,6 @@ import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.event.ContextClosedEvent;
 import org.springframework.context.event.ContextRefreshedEvent;
-import org.springframework.stereotype.Component;
 import org.springframework.web.context.WebApplicationContext;
 import org.springframework.web.filter.OncePerRequestFilter;
 import org.springframework.web.servlet.DispatcherServlet;
@@ -97,7 +91,8 @@ public class EndpointWebMvcAutoConfiguration implements ApplicationContextAware,
 	@Bean
 	@ConditionalOnMissingBean
 	public EndpointHandlerMapping endpointHandlerMapping() {
-		EndpointHandlerMapping mapping = new EndpointHandlerMapping();
+		EndpointHandlerMapping mapping = new EndpointHandlerMapping(mvcEndpoints()
+				.getEndpoints());
 		mapping.setDisabled(ManagementServerPort.get(this.applicationContext) != ManagementServerPort.SAME);
 		mapping.setPrefix(this.managementServerProperties.getContextPath());
 		return mapping;
@@ -133,48 +128,28 @@ public class EndpointWebMvcAutoConfiguration implements ApplicationContextAware,
 		};
 	}
 
-	@Component
-	protected static class GenericEndpointPostProcessor implements
-			BeanDefinitionRegistryPostProcessor {
-
-		private BeanDefinitionRegistry registry;
-
-		private Map<Class<? extends Endpoint<?>>, Class<?>> endpointTypes = new HashMap<Class<? extends Endpoint<?>>, Class<?>>();
-
-		public GenericEndpointPostProcessor() {
-			this.endpointTypes.put(EnvironmentEndpoint.class,
-					EnvironmentMvcEndpoint.class);
-			this.endpointTypes.put(MetricsEndpoint.class, MetricsMvcEndpoint.class);
-			this.endpointTypes.put(ShutdownEndpoint.class, ShutdownMvcEndpoint.class);
-		}
-
-		@Override
-		public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)
-				throws BeansException {
-			for (String name : beanFactory.getBeanNamesForType(Endpoint.class)) {
-				Class<?> type = getTypeForEndpoint(beanFactory.getType(name));
-				BeanDefinitionBuilder bean = BeanDefinitionBuilder
-						.genericBeanDefinition(type);
-				bean.addConstructorArgReference(name);
-				this.registry.registerBeanDefinition( + name,
-						bean.getBeanDefinition());
-			}
-		}
+	@Bean
+	@ConditionalOnMissingBean
+	public MvcEndpoints mvcEndpoints() {
+		return new MvcEndpoints();
+	}
 
-		protected Class<?> getTypeForEndpoint(Class<?> endpoint) {
-			Class<?> type = GenericMvcEndpoint.class;
-			if (this.endpointTypes.containsKey(endpoint)) {
-				type = this.endpointTypes.get(endpoint);
-			}
-			return type;
-		}
+	@Bean
+	@ConditionalOnBean(EnvironmentEndpoint.class)
+	public EnvironmentMvcEndpoint environmentMvcEndpoint(EnvironmentEndpoint delegate) {
+		return new EnvironmentMvcEndpoint(delegate);
+	}
 
-		@Override
-		public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry)
-				throws BeansException {
-			this.registry = registry;
-		}
+	@Bean
+	@ConditionalOnBean(MetricsEndpoint.class)
+	public MetricsMvcEndpoint metricsMvcEndpoint(MetricsEndpoint delegate) {
+		return new MetricsMvcEndpoint(delegate);
+	}
 
+	@Bean
+	@ConditionalOnBean(ShutdownEndpoint.class)
+	public ShutdownMvcEndpoint shutdownMvcEndpoint(ShutdownEndpoint delegate) {
+		return new ShutdownMvcEndpoint(delegate);
 	}
 
 	private void createChildManagementContext() {

