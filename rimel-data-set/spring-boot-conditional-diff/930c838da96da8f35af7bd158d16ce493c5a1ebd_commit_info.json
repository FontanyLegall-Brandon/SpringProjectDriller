{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/jta/NarayanaJtaConfiguration.java'), '_new_path': None, 'change_type': <ModificationType.DELETE: 4>, 'diff': '@@ -1,172 +0,0 @@\n-/*\n- * Copyright 2012-2018 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the "License");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an "AS IS" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.boot.autoconfigure.transaction.jta;\n-\n-import java.io.File;\n-\n-import javax.jms.Message;\n-import javax.transaction.TransactionManager;\n-import javax.transaction.UserTransaction;\n-\n-import com.arjuna.ats.arjuna.recovery.RecoveryManager;\n-import com.arjuna.ats.jbossatx.jta.RecoveryManagerService;\n-import org.jboss.narayana.jta.jms.TransactionHelper;\n-import org.jboss.tm.XAResourceRecoveryRegistry;\n-\n-import org.springframework.beans.factory.ObjectProvider;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers;\n-import org.springframework.boot.context.properties.EnableConfigurationProperties;\n-import org.springframework.boot.jdbc.XADataSourceWrapper;\n-import org.springframework.boot.jms.XAConnectionFactoryWrapper;\n-import org.springframework.boot.jta.narayana.NarayanaBeanFactoryPostProcessor;\n-import org.springframework.boot.jta.narayana.NarayanaConfigurationBean;\n-import org.springframework.boot.jta.narayana.NarayanaProperties;\n-import org.springframework.boot.jta.narayana.NarayanaRecoveryManagerBean;\n-import org.springframework.boot.jta.narayana.NarayanaXAConnectionFactoryWrapper;\n-import org.springframework.boot.jta.narayana.NarayanaXADataSourceWrapper;\n-import org.springframework.boot.system.ApplicationHome;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.context.annotation.DependsOn;\n-import org.springframework.transaction.PlatformTransactionManager;\n-import org.springframework.transaction.jta.JtaTransactionManager;\n-import org.springframework.util.StringUtils;\n-\n-/**\n- * JTA Configuration for <a href="http://narayana.io/">Narayana</a>.\n- *\n- * @author Gytis Trikleris\n- * @author Kazuki Shimizu\n- * @since 1.4.0\n- */\n-@Configuration\n-@ConditionalOnClass({ JtaTransactionManager.class,\n-\t\tcom.arjuna.ats.jta.UserTransaction.class, XAResourceRecoveryRegistry.class })\n-@ConditionalOnMissingBean(PlatformTransactionManager.class)\n-@EnableConfigurationProperties(JtaProperties.class)\n-public class NarayanaJtaConfiguration {\n-\n-\tprivate final JtaProperties jtaProperties;\n-\n-\tprivate final TransactionManagerCustomizers transactionManagerCustomizers;\n-\n-\tpublic NarayanaJtaConfiguration(JtaProperties jtaProperties,\n-\t\t\tObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers) {\n-\t\tthis.jtaProperties = jtaProperties;\n-\t\tthis.transactionManagerCustomizers = transactionManagerCustomizers\n-\t\t\t\t.getIfAvailable();\n-\t}\n-\n-\t@Bean\n-\t@ConditionalOnMissingBean\n-\tpublic NarayanaProperties narayanaProperties() {\n-\t\treturn new NarayanaProperties();\n-\t}\n-\n-\t@Bean\n-\t@ConditionalOnMissingBean\n-\tpublic NarayanaConfigurationBean narayanaConfiguration(\n-\t\t\tNarayanaProperties properties) {\n-\t\tproperties.setLogDir(getLogDir().getAbsolutePath());\n-\t\tif (this.jtaProperties.getTransactionManagerId() != null) {\n-\t\t\tproperties.setTransactionManagerId(\n-\t\t\t\t\tthis.jtaProperties.getTransactionManagerId());\n-\t\t}\n-\t\treturn new NarayanaConfigurationBean(properties);\n-\t}\n-\n-\tprivate File getLogDir() {\n-\t\tif (StringUtils.hasLength(this.jtaProperties.getLogDir())) {\n-\t\t\treturn new File(this.jtaProperties.getLogDir());\n-\t\t}\n-\t\tFile home = new ApplicationHome().getDir();\n-\t\treturn new File(home, "transaction-logs");\n-\t}\n-\n-\t@Bean\n-\t@DependsOn("narayanaConfiguration")\n-\t@ConditionalOnMissingBean\n-\tpublic UserTransaction narayanaUserTransaction() {\n-\t\treturn com.arjuna.ats.jta.UserTransaction.userTransaction();\n-\t}\n-\n-\t@Bean\n-\t@DependsOn("narayanaConfiguration")\n-\t@ConditionalOnMissingBean\n-\tpublic TransactionManager narayanaTransactionManager() {\n-\t\treturn com.arjuna.ats.jta.TransactionManager.transactionManager();\n-\t}\n-\n-\t@Bean\n-\t@DependsOn("narayanaConfiguration")\n-\tpublic RecoveryManagerService narayanaRecoveryManagerService() {\n-\t\tRecoveryManager.delayRecoveryManagerThread();\n-\t\treturn new RecoveryManagerService();\n-\t}\n-\n-\t@Bean\n-\t@ConditionalOnMissingBean\n-\tpublic NarayanaRecoveryManagerBean narayanaRecoveryManager(\n-\t\t\tRecoveryManagerService recoveryManagerService) {\n-\t\treturn new NarayanaRecoveryManagerBean(recoveryManagerService);\n-\t}\n-\n-\t@Bean\n-\tpublic JtaTransactionManager transactionManager(UserTransaction userTransaction,\n-\t\t\tTransactionManager transactionManager) {\n-\t\tJtaTransactionManager jtaTransactionManager = new JtaTransactionManager(\n-\t\t\t\tuserTransaction, transactionManager);\n-\t\tif (this.transactionManagerCustomizers != null) {\n-\t\t\tthis.transactionManagerCustomizers.customize(jtaTransactionManager);\n-\t\t}\n-\t\treturn jtaTransactionManager;\n-\t}\n-\n-\t@Bean\n-\t@ConditionalOnMissingBean\n-\tpublic XADataSourceWrapper xaDataSourceWrapper(\n-\t\t\tNarayanaRecoveryManagerBean narayanaRecoveryManagerBean,\n-\t\t\tNarayanaProperties narayanaProperties) {\n-\t\treturn new NarayanaXADataSourceWrapper(narayanaRecoveryManagerBean,\n-\t\t\t\tnarayanaProperties);\n-\t}\n-\n-\t@Bean\n-\t@ConditionalOnMissingBean\n-\tpublic static NarayanaBeanFactoryPostProcessor narayanaBeanFactoryPostProcessor() {\n-\t\treturn new NarayanaBeanFactoryPostProcessor();\n-\t}\n-\n-\t@Configuration\n-\t@ConditionalOnClass({ Message.class, TransactionHelper.class })\n-\tstatic class NarayanaJtaJmsConfiguration {\n-\n-\t\t@Bean\n-\t\t@ConditionalOnMissingBean(XAConnectionFactoryWrapper.class)\n-\t\tpublic NarayanaXAConnectionFactoryWrapper xaConnectionFactoryWrapper(\n-\t\t\t\tTransactionManager transactionManager,\n-\t\t\t\tNarayanaRecoveryManagerBean narayanaRecoveryManagerBean,\n-\t\t\t\tNarayanaProperties narayanaProperties) {\n-\t\t\treturn new NarayanaXAConnectionFactoryWrapper(transactionManager,\n-\t\t\t\t\tnarayanaRecoveryManagerBean, narayanaProperties);\n-\t\t}\n-\n-\t}\n-\n-}\n', 'source_code': None, 'source_code_before': '/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.transaction.jta;\n\nimport java.io.File;\n\nimport javax.jms.Message;\nimport javax.transaction.TransactionManager;\nimport javax.transaction.UserTransaction;\n\nimport com.arjuna.ats.arjuna.recovery.RecoveryManager;\nimport com.arjuna.ats.jbossatx.jta.RecoveryManagerService;\nimport org.jboss.narayana.jta.jms.TransactionHelper;\nimport org.jboss.tm.XAResourceRecoveryRegistry;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.jdbc.XADataSourceWrapper;\nimport org.springframework.boot.jms.XAConnectionFactoryWrapper;\nimport org.springframework.boot.jta.narayana.NarayanaBeanFactoryPostProcessor;\nimport org.springframework.boot.jta.narayana.NarayanaConfigurationBean;\nimport org.springframework.boot.jta.narayana.NarayanaProperties;\nimport org.springframework.boot.jta.narayana.NarayanaRecoveryManagerBean;\nimport org.springframework.boot.jta.narayana.NarayanaXAConnectionFactoryWrapper;\nimport org.springframework.boot.jta.narayana.NarayanaXADataSourceWrapper;\nimport org.springframework.boot.system.ApplicationHome;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.DependsOn;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.transaction.jta.JtaTransactionManager;\nimport org.springframework.util.StringUtils;\n\n/**\n * JTA Configuration for <a href="http://narayana.io/">Narayana</a>.\n *\n * @author Gytis Trikleris\n * @author Kazuki Shimizu\n * @since 1.4.0\n */\n@Configuration\n@ConditionalOnClass({ JtaTransactionManager.class,\n\t\tcom.arjuna.ats.jta.UserTransaction.class, XAResourceRecoveryRegistry.class })\n@ConditionalOnMissingBean(PlatformTransactionManager.class)\n@EnableConfigurationProperties(JtaProperties.class)\npublic class NarayanaJtaConfiguration {\n\n\tprivate final JtaProperties jtaProperties;\n\n\tprivate final TransactionManagerCustomizers transactionManagerCustomizers;\n\n\tpublic NarayanaJtaConfiguration(JtaProperties jtaProperties,\n\t\t\tObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers) {\n\t\tthis.jtaProperties = jtaProperties;\n\t\tthis.transactionManagerCustomizers = transactionManagerCustomizers\n\t\t\t\t.getIfAvailable();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic NarayanaProperties narayanaProperties() {\n\t\treturn new NarayanaProperties();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic NarayanaConfigurationBean narayanaConfiguration(\n\t\t\tNarayanaProperties properties) {\n\t\tproperties.setLogDir(getLogDir().getAbsolutePath());\n\t\tif (this.jtaProperties.getTransactionManagerId() != null) {\n\t\t\tproperties.setTransactionManagerId(\n\t\t\t\t\tthis.jtaProperties.getTransactionManagerId());\n\t\t}\n\t\treturn new NarayanaConfigurationBean(properties);\n\t}\n\n\tprivate File getLogDir() {\n\t\tif (StringUtils.hasLength(this.jtaProperties.getLogDir())) {\n\t\t\treturn new File(this.jtaProperties.getLogDir());\n\t\t}\n\t\tFile home = new ApplicationHome().getDir();\n\t\treturn new File(home, "transaction-logs");\n\t}\n\n\t@Bean\n\t@DependsOn("narayanaConfiguration")\n\t@ConditionalOnMissingBean\n\tpublic UserTransaction narayanaUserTransaction() {\n\t\treturn com.arjuna.ats.jta.UserTransaction.userTransaction();\n\t}\n\n\t@Bean\n\t@DependsOn("narayanaConfiguration")\n\t@ConditionalOnMissingBean\n\tpublic TransactionManager narayanaTransactionManager() {\n\t\treturn com.arjuna.ats.jta.TransactionManager.transactionManager();\n\t}\n\n\t@Bean\n\t@DependsOn("narayanaConfiguration")\n\tpublic RecoveryManagerService narayanaRecoveryManagerService() {\n\t\tRecoveryManager.delayRecoveryManagerThread();\n\t\treturn new RecoveryManagerService();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic NarayanaRecoveryManagerBean narayanaRecoveryManager(\n\t\t\tRecoveryManagerService recoveryManagerService) {\n\t\treturn new NarayanaRecoveryManagerBean(recoveryManagerService);\n\t}\n\n\t@Bean\n\tpublic JtaTransactionManager transactionManager(UserTransaction userTransaction,\n\t\t\tTransactionManager transactionManager) {\n\t\tJtaTransactionManager jtaTransactionManager = new JtaTransactionManager(\n\t\t\t\tuserTransaction, transactionManager);\n\t\tif (this.transactionManagerCustomizers != null) {\n\t\t\tthis.transactionManagerCustomizers.customize(jtaTransactionManager);\n\t\t}\n\t\treturn jtaTransactionManager;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic XADataSourceWrapper xaDataSourceWrapper(\n\t\t\tNarayanaRecoveryManagerBean narayanaRecoveryManagerBean,\n\t\t\tNarayanaProperties narayanaProperties) {\n\t\treturn new NarayanaXADataSourceWrapper(narayanaRecoveryManagerBean,\n\t\t\t\tnarayanaProperties);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic static NarayanaBeanFactoryPostProcessor narayanaBeanFactoryPostProcessor() {\n\t\treturn new NarayanaBeanFactoryPostProcessor();\n\t}\n\n\t@Configuration\n\t@ConditionalOnClass({ Message.class, TransactionHelper.class })\n\tstatic class NarayanaJtaJmsConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(XAConnectionFactoryWrapper.class)\n\t\tpublic NarayanaXAConnectionFactoryWrapper xaConnectionFactoryWrapper(\n\t\t\t\tTransactionManager transactionManager,\n\t\t\t\tNarayanaRecoveryManagerBean narayanaRecoveryManagerBean,\n\t\t\t\tNarayanaProperties narayanaProperties) {\n\t\t\treturn new NarayanaXAConnectionFactoryWrapper(transactionManager,\n\t\t\t\t\tnarayanaRecoveryManagerBean, narayanaProperties);\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
