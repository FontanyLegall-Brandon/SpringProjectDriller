@@ -0,0 +1,131 @@
+
+
+package org.springframework.boot.autoconfigure.transaction.jta;
+
+import javax.jms.Message;
+import javax.transaction.TransactionManager;
+import javax.transaction.UserTransaction;
+
+import com.arjuna.ats.jbossatx.jta.RecoveryManagerService;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.jta.XAConnectionFactoryWrapper;
+import org.springframework.boot.jta.XADataSourceWrapper;
+import org.springframework.boot.jta.narayana.NarayanaBeanFactoryPostProcessor;
+import org.springframework.boot.jta.narayana.NarayanaConfigurationBean;
+import org.springframework.boot.jta.narayana.NarayanaProperties;
+import org.springframework.boot.jta.narayana.NarayanaRecoveryManagerBean;
+import org.springframework.boot.jta.narayana.NarayanaXAConnectionFactoryWrapper;
+import org.springframework.boot.jta.narayana.NarayanaXADataSourceWrapper;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.DependsOn;
+import org.springframework.transaction.PlatformTransactionManager;
+import org.springframework.transaction.jta.JtaTransactionManager;
+
+
+@Configuration
+@ConditionalOnClass({ JtaTransactionManager.class, com.arjuna.ats.jta.UserTransaction.class })
+@ConditionalOnMissingBean(PlatformTransactionManager.class)
+public class NarayanaJtaConfiguration {
+
+	@Autowired
+	private JtaProperties jtaProperties;
+
+	@Bean
+	@ConditionalOnMissingBean
+	public NarayanaProperties narayanaProperties() {
+		return new NarayanaProperties();
+	}
+
+	@Bean
+	@ConditionalOnMissingBean
+	public NarayanaConfigurationBean narayanaConfigurationBean(NarayanaProperties narayanaProperties) {
+		if (this.jtaProperties.getLogDir() != null) {
+			narayanaProperties.setLogDir(this.jtaProperties.getLogDir());
+		}
+
+		if (this.jtaProperties.getTransactionManagerId() != null) {
+			narayanaProperties.setTransactionManagerId(this.jtaProperties.getTransactionManagerId());
+		}
+
+		return new NarayanaConfigurationBean(narayanaProperties);
+	}
+
+	@Bean
+	@DependsOn()
+	@ConditionalOnMissingBean
+	public UserTransaction narayanaUserTransaction() {
+		return com.arjuna.ats.jta.UserTransaction.userTransaction();
+	}
+
+	@Bean
+	@DependsOn()
+	@ConditionalOnMissingBean
+	public TransactionManager narayanaTransactionManager() {
+		return com.arjuna.ats.jta.TransactionManager.transactionManager();
+	}
+
+	@Bean
+	@DependsOn()
+	public RecoveryManagerService narayanaRecoveryManagerService() {
+		return new RecoveryManagerService();
+	}
+
+	@Bean
+	public NarayanaRecoveryManagerBean narayanaRecoveryManagerBean(RecoveryManagerService recoveryManagerService) {
+		return new NarayanaRecoveryManagerBean(recoveryManagerService);
+	}
+
+	@Bean
+	public JtaTransactionManager transactionManager(UserTransaction userTransaction, TransactionManager transactionManager) {
+		return new JtaTransactionManager(userTransaction, transactionManager);
+	}
+
+	@Bean
+	@ConditionalOnMissingBean(XADataSourceWrapper.class)
+	public XADataSourceWrapper xaDataSourceWrapper(NarayanaRecoveryManagerBean narayanaRecoveryManagerBean,
+			NarayanaProperties narayanaProperties) {
+		return new NarayanaXADataSourceWrapper(narayanaRecoveryManagerBean, narayanaProperties);
+	}
+
+	@Bean
+	@ConditionalOnMissingBean
+	public static NarayanaBeanFactoryPostProcessor narayanaBeanFactoryPostProcessor() {
+		return new NarayanaBeanFactoryPostProcessor();
+	}
+
+	@Configuration
+	@ConditionalOnClass(Message.class)
+	static class NarayanaJtaJmsConfiguration {
+
+		@Bean
+		@ConditionalOnMissingBean(XAConnectionFactoryWrapper.class)
+		public NarayanaXAConnectionFactoryWrapper xaConnectionFactoryWrapper(TransactionManager transactionManager,
+				NarayanaRecoveryManagerBean narayanaRecoveryManagerBean, NarayanaProperties narayanaProperties) {
+			return new NarayanaXAConnectionFactoryWrapper(transactionManager, narayanaRecoveryManagerBean, narayanaProperties);
+		}
+
+	}
+
+}

