{'_old_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -18,9 +18,10 @@ package org.springframework.boot.autoconfigure.rsocket;\n \n import java.util.stream.Collectors;\n \n-import io.netty.buffer.PooledByteBufAllocator;\n import io.rsocket.RSocketFactory;\n import io.rsocket.SocketAcceptor;\n+import io.rsocket.transport.netty.server.TcpServerTransport;\n+import reactor.netty.http.server.HttpServer;\n \n import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n@@ -33,7 +34,7 @@ import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.boot.context.properties.PropertyMapper;\n-import org.springframework.boot.rsocket.netty.NettyRSocketBootstrap;\n+import org.springframework.boot.rsocket.server.RSocketServerBootstrap;\n import org.springframework.boot.rsocket.netty.NettyRSocketServerFactory;\n import org.springframework.boot.rsocket.server.RSocketServerFactory;\n import org.springframework.boot.rsocket.server.ServerRSocketFactoryCustomizer;\n@@ -57,8 +58,8 @@ import org.springframework.messaging.rsocket.RSocketStrategies;\n  * @since 2.2.0\n  */\n @Configuration(proxyBeanMethods = false)\n-@ConditionalOnClass({ RSocketFactory.class, RSocketStrategies.class,\n-\t\tPooledByteBufAllocator.class })\n+@ConditionalOnClass({ RSocketFactory.class, RSocketStrategies.class, HttpServer.class,\n+\t\tTcpServerTransport.class })\n @ConditionalOnBean(MessageHandlerAcceptor.class)\n @AutoConfigureAfter(RSocketStrategiesAutoConfiguration.class)\n @EnableConfigurationProperties(RSocketProperties.class)\n@@ -105,10 +106,10 @@ public class RSocketServerAutoConfiguration {\n \t\t}\n \n \t\t@Bean\n-\t\tpublic NettyRSocketBootstrap nettyRSocketBootstrap(\n+\t\tpublic RSocketServerBootstrap nettyRSocketBootstrap(\n \t\t\t\tRSocketServerFactory rSocketServerFactory,\n \t\t\t\tSocketAcceptor socketAcceptor) {\n-\t\t\treturn new NettyRSocketBootstrap(rSocketServerFactory, socketAcceptor);\n+\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, socketAcceptor);\n \t\t}\n \n \t}\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.rsocket;\n\nimport java.util.stream.Collectors;\n\nimport io.rsocket.RSocketFactory;\nimport io.rsocket.SocketAcceptor;\nimport io.rsocket.transport.netty.server.TcpServerTransport;\nimport reactor.netty.http.server.HttpServer;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.AllNestedConditions;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.context.properties.PropertyMapper;\nimport org.springframework.boot.rsocket.server.RSocketServerBootstrap;\nimport org.springframework.boot.rsocket.netty.NettyRSocketServerFactory;\nimport org.springframework.boot.rsocket.server.RSocketServerFactory;\nimport org.springframework.boot.rsocket.server.ServerRSocketFactoryCustomizer;\nimport org.springframework.boot.web.embedded.netty.NettyReactiveWebServerFactory;\nimport org.springframework.boot.web.server.WebServerFactoryCustomizer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.client.reactive.ReactorResourceFactory;\nimport org.springframework.messaging.rsocket.MessageHandlerAcceptor;\nimport org.springframework.messaging.rsocket.RSocketStrategies;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for RSocket servers. In the case of\n * {@link org.springframework.boot.WebApplicationType#REACTIVE}, the RSocket server is\n * added as a WebSocket endpoint on the existing\n * {@link org.springframework.boot.web.embedded.netty.NettyWebServer}. If a specific\n * server port is configured, a new standalone RSocket server is created.\n *\n * @author Brian Clozel\n * @since 2.2.0\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass({ RSocketFactory.class, RSocketStrategies.class, HttpServer.class,\n\t\tTcpServerTransport.class })\n@ConditionalOnBean(MessageHandlerAcceptor.class)\n@AutoConfigureAfter(RSocketStrategiesAutoConfiguration.class)\n@EnableConfigurationProperties(RSocketProperties.class)\npublic class RSocketServerAutoConfiguration {\n\n\t@Conditional(OnRSocketWebServerCondition.class)\n\t@Configuration(proxyBeanMethods = false)\n\tstatic class WebFluxServerAutoConfiguration {\n\n\t\t@Bean\n\t\tpublic WebServerFactoryCustomizer<NettyReactiveWebServerFactory> rSocketWebsocketCustomizer(\n\t\t\t\tRSocketProperties properties,\n\t\t\t\tMessageHandlerAcceptor messageHandlerAcceptor) {\n\t\t\tRSocketNettyServerCustomizer customizer = new RSocketNettyServerCustomizer(\n\t\t\t\t\tproperties.getServer().getMappingPath(), messageHandlerAcceptor);\n\t\t\treturn (factory) -> factory.addServerCustomizers(customizer);\n\t\t}\n\n\t}\n\n\t@ConditionalOnProperty(prefix = "spring.rsocket.server", name = "port")\n\t@Configuration(proxyBeanMethods = false)\n\tstatic class EmbeddedServerAutoConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic ReactorResourceFactory reactorServerResourceFactory() {\n\t\t\treturn new ReactorResourceFactory();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic RSocketServerFactory rSocketServerFactory(RSocketProperties properties,\n\t\t\t\tReactorResourceFactory resourceFactory,\n\t\t\t\tObjectProvider<ServerRSocketFactoryCustomizer> customizers) {\n\t\t\tNettyRSocketServerFactory factory = new NettyRSocketServerFactory();\n\t\t\tfactory.setResourceFactory(resourceFactory);\n\t\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\t\tmap.from(properties.getServer().getAddress()).to(factory::setAddress);\n\t\t\tmap.from(properties.getServer().getPort()).to(factory::setPort);\n\t\t\tfactory.setServerCustomizers(\n\t\t\t\t\tcustomizers.orderedStream().collect(Collectors.toList()));\n\t\t\treturn factory;\n\t\t}\n\n\t\t@Bean\n\t\tpublic RSocketServerBootstrap nettyRSocketBootstrap(\n\t\t\t\tRSocketServerFactory rSocketServerFactory,\n\t\t\t\tSocketAcceptor socketAcceptor) {\n\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, socketAcceptor);\n\t\t}\n\n\t}\n\n\tstatic class OnRSocketWebServerCondition extends AllNestedConditions {\n\n\t\tOnRSocketWebServerCondition() {\n\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n\t\t}\n\n\t\t@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)\n\t\tstatic class IsReactiveWebApplication {\n\n\t\t}\n\n\t\t@ConditionalOnProperty(prefix = "spring.rsocket.server", name = "port",\n\t\t\t\tmatchIfMissing = true)\n\t\tstatic class HasNoPortConfigured {\n\n\t\t}\n\n\t\t@ConditionalOnProperty(prefix = "spring.rsocket.server", name = "mapping-path")\n\t\tstatic class HasMappingPathConfigured {\n\n\t\t}\n\n\t\t@ConditionalOnProperty(prefix = "spring.rsocket.server", name = "transport",\n\t\t\t\thavingValue = "websocket")\n\t\tstatic class HasWebsocketTransportConfigured {\n\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.rsocket;\n\nimport java.util.stream.Collectors;\n\nimport io.netty.buffer.PooledByteBufAllocator;\nimport io.rsocket.RSocketFactory;\nimport io.rsocket.SocketAcceptor;\n\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.AllNestedConditions;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.context.properties.PropertyMapper;\nimport org.springframework.boot.rsocket.netty.NettyRSocketBootstrap;\nimport org.springframework.boot.rsocket.netty.NettyRSocketServerFactory;\nimport org.springframework.boot.rsocket.server.RSocketServerFactory;\nimport org.springframework.boot.rsocket.server.ServerRSocketFactoryCustomizer;\nimport org.springframework.boot.web.embedded.netty.NettyReactiveWebServerFactory;\nimport org.springframework.boot.web.server.WebServerFactoryCustomizer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.client.reactive.ReactorResourceFactory;\nimport org.springframework.messaging.rsocket.MessageHandlerAcceptor;\nimport org.springframework.messaging.rsocket.RSocketStrategies;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for RSocket servers. In the case of\n * {@link org.springframework.boot.WebApplicationType#REACTIVE}, the RSocket server is\n * added as a WebSocket endpoint on the existing\n * {@link org.springframework.boot.web.embedded.netty.NettyWebServer}. If a specific\n * server port is configured, a new standalone RSocket server is created.\n *\n * @author Brian Clozel\n * @since 2.2.0\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass({ RSocketFactory.class, RSocketStrategies.class,\n\t\tPooledByteBufAllocator.class })\n@ConditionalOnBean(MessageHandlerAcceptor.class)\n@AutoConfigureAfter(RSocketStrategiesAutoConfiguration.class)\n@EnableConfigurationProperties(RSocketProperties.class)\npublic class RSocketServerAutoConfiguration {\n\n\t@Conditional(OnRSocketWebServerCondition.class)\n\t@Configuration(proxyBeanMethods = false)\n\tstatic class WebFluxServerAutoConfiguration {\n\n\t\t@Bean\n\t\tpublic WebServerFactoryCustomizer<NettyReactiveWebServerFactory> rSocketWebsocketCustomizer(\n\t\t\t\tRSocketProperties properties,\n\t\t\t\tMessageHandlerAcceptor messageHandlerAcceptor) {\n\t\t\tRSocketNettyServerCustomizer customizer = new RSocketNettyServerCustomizer(\n\t\t\t\t\tproperties.getServer().getMappingPath(), messageHandlerAcceptor);\n\t\t\treturn (factory) -> factory.addServerCustomizers(customizer);\n\t\t}\n\n\t}\n\n\t@ConditionalOnProperty(prefix = "spring.rsocket.server", name = "port")\n\t@Configuration(proxyBeanMethods = false)\n\tstatic class EmbeddedServerAutoConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic ReactorResourceFactory reactorServerResourceFactory() {\n\t\t\treturn new ReactorResourceFactory();\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic RSocketServerFactory rSocketServerFactory(RSocketProperties properties,\n\t\t\t\tReactorResourceFactory resourceFactory,\n\t\t\t\tObjectProvider<ServerRSocketFactoryCustomizer> customizers) {\n\t\t\tNettyRSocketServerFactory factory = new NettyRSocketServerFactory();\n\t\t\tfactory.setResourceFactory(resourceFactory);\n\t\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\t\tmap.from(properties.getServer().getAddress()).to(factory::setAddress);\n\t\t\tmap.from(properties.getServer().getPort()).to(factory::setPort);\n\t\t\tfactory.setServerCustomizers(\n\t\t\t\t\tcustomizers.orderedStream().collect(Collectors.toList()));\n\t\t\treturn factory;\n\t\t}\n\n\t\t@Bean\n\t\tpublic NettyRSocketBootstrap nettyRSocketBootstrap(\n\t\t\t\tRSocketServerFactory rSocketServerFactory,\n\t\t\t\tSocketAcceptor socketAcceptor) {\n\t\t\treturn new NettyRSocketBootstrap(rSocketServerFactory, socketAcceptor);\n\t\t}\n\n\t}\n\n\tstatic class OnRSocketWebServerCondition extends AllNestedConditions {\n\n\t\tOnRSocketWebServerCondition() {\n\t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n\t\t}\n\n\t\t@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)\n\t\tstatic class IsReactiveWebApplication {\n\n\t\t}\n\n\t\t@ConditionalOnProperty(prefix = "spring.rsocket.server", name = "port",\n\t\t\t\tmatchIfMissing = true)\n\t\tstatic class HasNoPortConfigured {\n\n\t\t}\n\n\t\t@ConditionalOnProperty(prefix = "spring.rsocket.server", name = "mapping-path")\n\t\tstatic class HasMappingPathConfigured {\n\n\t\t}\n\n\t\t@ConditionalOnProperty(prefix = "spring.rsocket.server", name = "transport",\n\t\t\t\thavingValue = "websocket")\n\t\tstatic class HasWebsocketTransportConfigured {\n\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
