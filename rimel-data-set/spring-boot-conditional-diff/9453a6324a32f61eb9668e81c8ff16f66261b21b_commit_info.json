{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -16,6 +16,7 @@\n \n package org.springframework.boot.autoconfigure.amqp;\n \n+import com.rabbitmq.client.Channel;\n import org.springframework.amqp.core.AmqpAdmin;\n import org.springframework.amqp.rabbit.connection.CachingConnectionFactory;\n import org.springframework.amqp.rabbit.connection.ConnectionFactory;\n@@ -30,55 +31,70 @@ import org.springframework.boot.context.properties.EnableConfigurationProperties\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n-import com.rabbitmq.client.Channel;\n-\n /**\n- * {@link EnableAutoConfiguration Auto-configuration} for {@link RabbitTemplate}.\n- * \n+ * <P>  {@link EnableAutoConfiguration Auto-configuration} for {@link RabbitTemplate}.\n+ *\n+ * <p> This configuration class is active only when the RabbitMQ and Spring AMQP client libraries are on the classpath.\n+ *\n+ * <P> Registers a {@link org.springframework.amqp.rabbit.core.RabbitTemplate RabbitTemplate} instance if there\n+ * is no other bean of the same type in the context. Registers a {@link org.springframework.amqp.rabbit.connection.CachingConnectionFactory CachingConnectionFactory}\n+ * instance if there is no other bean of the same type in the context.\n+ *\n+ * <p> Registers a {@link org.springframework.amqp.core.AmqpAdmin } instance as long as {@literal spring.rabbitmq.dynamic=true}.\n+ *\n+ * <p>\n+ * The {@link org.springframework.amqp.rabbit.connection.CachingConnectionFactory} honors the following properties:\n+ * {@literal spring.rabbitmq.port} is used to specify the port to which the client should connect, and defaults to 5672.\n+ * {@literal spring.rabbitmq.username} is used to specify the (optional) username, and\n+ * {@literal spring.rabbitmq.password} is used to specify the (optional) password.\n+ * {@literal spring.rabbitmq.host} is used to specify the  host, and defaults to {@literal localhost}.\n+ *  {@literal spring.rabbitmq.virtualHost} is used to specify the  (optional) virtual host to which the client should connect.\n+ *\n  * @author Greg Turnquist\n+ * @author Josh Long\n  */\n @Configuration\n-@ConditionalOnClass({ RabbitTemplate.class, Channel.class })\n+@ConditionalOnClass({RabbitTemplate.class, Channel.class})\n @EnableConfigurationProperties(RabbitProperties.class)\n public class RabbitAutoConfiguration {\n \n-\t@Bean\n-\t@ConditionalOnExpression("${spring.rabbitmq.dynamic:true}")\n-\t@ConditionalOnMissingBean(AmqpAdmin.class)\n-\tpublic AmqpAdmin amqpAdmin(CachingConnectionFactory connectionFactory) {\n-\t\treturn new RabbitAdmin(connectionFactory);\n-\t}\n+    @Bean\n+    @ConditionalOnExpression("${spring.rabbitmq.dynamic:true}")\n+    @ConditionalOnMissingBean(AmqpAdmin.class)\n+    public AmqpAdmin amqpAdmin(CachingConnectionFactory connectionFactory) {\n+        return new RabbitAdmin(connectionFactory);\n+    }\n \n-\t@Autowired\n-\tprivate ConnectionFactory connectionFactory;\n+    @Autowired\n+    private ConnectionFactory connectionFactory;\n \n-\t@Bean\n-\t@ConditionalOnMissingBean(RabbitTemplate.class)\n-\tpublic RabbitTemplate rabbitTemplate() {\n-\t\treturn new RabbitTemplate(this.connectionFactory);\n-\t}\n+    @Bean\n+    @ConditionalOnMissingBean(RabbitTemplate.class)\n+    public RabbitTemplate rabbitTemplate() {\n+        return new RabbitTemplate(this.connectionFactory);\n+    }\n \n-\t@Configuration\n-\t@ConditionalOnMissingBean(ConnectionFactory.class)\n-\tprotected static class RabbitConnectionFactoryCreator {\n+    @Configuration\n+    @ConditionalOnMissingBean(ConnectionFactory.class)\n+    protected static class RabbitConnectionFactoryCreator {\n \n-\t\t@Bean\n-\t\tpublic ConnectionFactory rabbitConnectionFactory(RabbitProperties config) {\n-\t\t\tCachingConnectionFactory factory = new CachingConnectionFactory(\n-\t\t\t\t\tconfig.getHost());\n-\t\t\tfactory.setPort(config.getPort());\n-\t\t\tif (config.getUsername() != null) {\n-\t\t\t\tfactory.setUsername(config.getUsername());\n-\t\t\t}\n-\t\t\tif (config.getPassword() != null) {\n-\t\t\t\tfactory.setPassword(config.getPassword());\n-\t\t\t}\n-\t\t\tif (config.getVirtualHost() != null) {\n-\t\t\t\tfactory.setVirtualHost(config.getVirtualHost());\n-\t\t\t}\n-\t\t\treturn factory;\n-\t\t}\n+        @Bean\n+        public ConnectionFactory rabbitConnectionFactory(RabbitProperties config) {\n+            CachingConnectionFactory factory = new CachingConnectionFactory(\n+                    config.getHost());\n+            factory.setPort(config.getPort());\n+            if (config.getUsername() != null) {\n+                factory.setUsername(config.getUsername());\n+            }\n+            if (config.getPassword() != null) {\n+                factory.setPassword(config.getPassword());\n+            }\n+            if (config.getVirtualHost() != null) {\n+                factory.setVirtualHost(config.getVirtualHost());\n+            }\n+            return factory;\n+        }\n \n-\t}\n+    }\n \n }\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.amqp;\n\nimport com.rabbitmq.client.Channel;\nimport org.springframework.amqp.core.AmqpAdmin;\nimport org.springframework.amqp.rabbit.connection.CachingConnectionFactory;\nimport org.springframework.amqp.rabbit.connection.ConnectionFactory;\nimport org.springframework.amqp.rabbit.core.RabbitAdmin;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * <P>  {@link EnableAutoConfiguration Auto-configuration} for {@link RabbitTemplate}.\n *\n * <p> This configuration class is active only when the RabbitMQ and Spring AMQP client libraries are on the classpath.\n *\n * <P> Registers a {@link org.springframework.amqp.rabbit.core.RabbitTemplate RabbitTemplate} instance if there\n * is no other bean of the same type in the context. Registers a {@link org.springframework.amqp.rabbit.connection.CachingConnectionFactory CachingConnectionFactory}\n * instance if there is no other bean of the same type in the context.\n *\n * <p> Registers a {@link org.springframework.amqp.core.AmqpAdmin } instance as long as {@literal spring.rabbitmq.dynamic=true}.\n *\n * <p>\n * The {@link org.springframework.amqp.rabbit.connection.CachingConnectionFactory} honors the following properties:\n * {@literal spring.rabbitmq.port} is used to specify the port to which the client should connect, and defaults to 5672.\n * {@literal spring.rabbitmq.username} is used to specify the (optional) username, and\n * {@literal spring.rabbitmq.password} is used to specify the (optional) password.\n * {@literal spring.rabbitmq.host} is used to specify the  host, and defaults to {@literal localhost}.\n *  {@literal spring.rabbitmq.virtualHost} is used to specify the  (optional) virtual host to which the client should connect.\n *\n * @author Greg Turnquist\n * @author Josh Long\n */\n@Configuration\n@ConditionalOnClass({RabbitTemplate.class, Channel.class})\n@EnableConfigurationProperties(RabbitProperties.class)\npublic class RabbitAutoConfiguration {\n\n    @Bean\n    @ConditionalOnExpression("${spring.rabbitmq.dynamic:true}")\n    @ConditionalOnMissingBean(AmqpAdmin.class)\n    public AmqpAdmin amqpAdmin(CachingConnectionFactory connectionFactory) {\n        return new RabbitAdmin(connectionFactory);\n    }\n\n    @Autowired\n    private ConnectionFactory connectionFactory;\n\n    @Bean\n    @ConditionalOnMissingBean(RabbitTemplate.class)\n    public RabbitTemplate rabbitTemplate() {\n        return new RabbitTemplate(this.connectionFactory);\n    }\n\n    @Configuration\n    @ConditionalOnMissingBean(ConnectionFactory.class)\n    protected static class RabbitConnectionFactoryCreator {\n\n        @Bean\n        public ConnectionFactory rabbitConnectionFactory(RabbitProperties config) {\n            CachingConnectionFactory factory = new CachingConnectionFactory(\n                    config.getHost());\n            factory.setPort(config.getPort());\n            if (config.getUsername() != null) {\n                factory.setUsername(config.getUsername());\n            }\n            if (config.getPassword() != null) {\n                factory.setPassword(config.getPassword());\n            }\n            if (config.getVirtualHost() != null) {\n                factory.setVirtualHost(config.getVirtualHost());\n            }\n            return factory;\n        }\n\n    }\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.amqp;\n\nimport org.springframework.amqp.core.AmqpAdmin;\nimport org.springframework.amqp.rabbit.connection.CachingConnectionFactory;\nimport org.springframework.amqp.rabbit.connection.ConnectionFactory;\nimport org.springframework.amqp.rabbit.core.RabbitAdmin;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport com.rabbitmq.client.Channel;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for {@link RabbitTemplate}.\n * \n * @author Greg Turnquist\n */\n@Configuration\n@ConditionalOnClass({ RabbitTemplate.class, Channel.class })\n@EnableConfigurationProperties(RabbitProperties.class)\npublic class RabbitAutoConfiguration {\n\n\t@Bean\n\t@ConditionalOnExpression("${spring.rabbitmq.dynamic:true}")\n\t@ConditionalOnMissingBean(AmqpAdmin.class)\n\tpublic AmqpAdmin amqpAdmin(CachingConnectionFactory connectionFactory) {\n\t\treturn new RabbitAdmin(connectionFactory);\n\t}\n\n\t@Autowired\n\tprivate ConnectionFactory connectionFactory;\n\n\t@Bean\n\t@ConditionalOnMissingBean(RabbitTemplate.class)\n\tpublic RabbitTemplate rabbitTemplate() {\n\t\treturn new RabbitTemplate(this.connectionFactory);\n\t}\n\n\t@Configuration\n\t@ConditionalOnMissingBean(ConnectionFactory.class)\n\tprotected static class RabbitConnectionFactoryCreator {\n\n\t\t@Bean\n\t\tpublic ConnectionFactory rabbitConnectionFactory(RabbitProperties config) {\n\t\t\tCachingConnectionFactory factory = new CachingConnectionFactory(\n\t\t\t\t\tconfig.getHost());\n\t\t\tfactory.setPort(config.getPort());\n\t\t\tif (config.getUsername() != null) {\n\t\t\t\tfactory.setUsername(config.getUsername());\n\t\t\t}\n\t\t\tif (config.getPassword() != null) {\n\t\t\t\tfactory.setPassword(config.getPassword());\n\t\t\t}\n\t\t\tif (config.getVirtualHost() != null) {\n\t\t\t\tfactory.setVirtualHost(config.getVirtualHost());\n\t\t\t}\n\t\t\treturn factory;\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
