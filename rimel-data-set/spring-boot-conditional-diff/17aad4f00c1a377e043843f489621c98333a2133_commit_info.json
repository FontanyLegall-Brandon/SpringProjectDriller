{'_old_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/RedisSessionConfiguration.java'), '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/RedisSessionConfiguration.java'), 'change_type': <ModificationType.MODIFY: 5>, 'diff': '@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2016 the original author or authors.\n+ * Copyright 2012-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the "License");\n  * you may not use this file except in compliance with the License.\n@@ -23,6 +23,7 @@ import org.apache.commons.logging.LogFactory;\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n@@ -38,10 +39,12 @@ import org.springframework.session.data.redis.config.annotation.web.http.RedisHt\n  * @author Tommy Ludwig\n  * @author Eddú Meléndez\n  * @author Stephane Nicoll\n+ * @author Vedran Pavic\n  */\n @Configuration\n+@ConditionalOnClass(RedisTemplate.class)\n @ConditionalOnMissingBean(SessionRepository.class)\n-@ConditionalOnBean({ RedisTemplate.class, RedisConnectionFactory.class })\n+@ConditionalOnBean(RedisConnectionFactory.class)\n @Conditional(SessionCondition.class)\n class RedisSessionConfiguration {\n \n', 'source_code': '/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.session;\n\nimport javax.annotation.PostConstruct;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.session.SessionRepository;\nimport org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration;\n\n/**\n * Redis backed session configuration.\n *\n * @author Andy Wilkinson\n * @author Tommy Ludwig\n * @author Eddú Meléndez\n * @author Stephane Nicoll\n * @author Vedran Pavic\n */\n@Configuration\n@ConditionalOnClass(RedisTemplate.class)\n@ConditionalOnMissingBean(SessionRepository.class)\n@ConditionalOnBean(RedisConnectionFactory.class)\n@Conditional(SessionCondition.class)\nclass RedisSessionConfiguration {\n\n\tprivate static final Log logger = LogFactory.getLog(RedisSessionConfiguration.class);\n\n\t@Configuration\n\tpublic static class SpringBootRedisHttpSessionConfiguration\n\t\t\textends RedisHttpSessionConfiguration {\n\n\t\tprivate SessionProperties sessionProperties;\n\n\t\t@Autowired\n\t\tpublic void customize(SessionProperties sessionProperties) {\n\t\t\tthis.sessionProperties = sessionProperties;\n\t\t\tInteger timeout = this.sessionProperties.getTimeout();\n\t\t\tif (timeout != null) {\n\t\t\t\tsetMaxInactiveIntervalInSeconds(timeout);\n\t\t\t}\n\t\t\tSessionProperties.Redis redis = this.sessionProperties.getRedis();\n\t\t\tsetRedisNamespace(redis.getNamespace());\n\t\t\tsetRedisFlushMode(redis.getFlushMode());\n\t\t}\n\n\t\t@PostConstruct\n\t\tpublic void validate() {\n\t\t\tif (this.sessionProperties.getStoreType() == null) {\n\t\t\t\tlogger.warn("Spring Session store type is mandatory: set "\n\t\t\t\t\t\t+ "\'spring.session.store-type=redis\' in your configuration");\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': '/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.session;\n\nimport javax.annotation.PostConstruct;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.session.SessionRepository;\nimport org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration;\n\n/**\n * Redis backed session configuration.\n *\n * @author Andy Wilkinson\n * @author Tommy Ludwig\n * @author Eddú Meléndez\n * @author Stephane Nicoll\n */\n@Configuration\n@ConditionalOnMissingBean(SessionRepository.class)\n@ConditionalOnBean({ RedisTemplate.class, RedisConnectionFactory.class })\n@Conditional(SessionCondition.class)\nclass RedisSessionConfiguration {\n\n\tprivate static final Log logger = LogFactory.getLog(RedisSessionConfiguration.class);\n\n\t@Configuration\n\tpublic static class SpringBootRedisHttpSessionConfiguration\n\t\t\textends RedisHttpSessionConfiguration {\n\n\t\tprivate SessionProperties sessionProperties;\n\n\t\t@Autowired\n\t\tpublic void customize(SessionProperties sessionProperties) {\n\t\t\tthis.sessionProperties = sessionProperties;\n\t\t\tInteger timeout = this.sessionProperties.getTimeout();\n\t\t\tif (timeout != null) {\n\t\t\t\tsetMaxInactiveIntervalInSeconds(timeout);\n\t\t\t}\n\t\t\tSessionProperties.Redis redis = this.sessionProperties.getRedis();\n\t\t\tsetRedisNamespace(redis.getNamespace());\n\t\t\tsetRedisFlushMode(redis.getFlushMode());\n\t\t}\n\n\t\t@PostConstruct\n\t\tpublic void validate() {\n\t\t\tif (this.sessionProperties.getStoreType() == null) {\n\t\t\t\tlogger.warn("Spring Session store type is mandatory: set "\n\t\t\t\t\t\t+ "\'spring.session.store-type=redis\' in your configuration");\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n', '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
