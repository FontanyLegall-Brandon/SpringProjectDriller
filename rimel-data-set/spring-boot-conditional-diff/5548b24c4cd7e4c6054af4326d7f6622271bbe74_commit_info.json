{'_old_path': None, '_new_path': PosixPath('spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2012-2014 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.flyway;\n+\n+import javax.annotation.PostConstruct;\n+import javax.sql.DataSource;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.io.DefaultResourceLoader;\n+import org.springframework.core.io.Resource;\n+import org.springframework.core.io.ResourceLoader;\n+import org.springframework.util.Assert;\n+\n+import com.googlecode.flyway.core.Flyway;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for Flyway database migrations.\n+ * \n+ * @author Dave Syer\n+ */\n+@Configuration\n+@ConditionalOnClass(Flyway.class)\n+@AutoConfigureAfter(DataSourceAutoConfiguration.class)\n+public class FlywayAutoConfiguration {\n+\n+\t@Configuration\n+\t@ConditionalOnMissingBean(Flyway.class)\n+\t@EnableConfigurationProperties(FlywayProperties.class)\n+\tpublic static class LiquibaseConfiguration {\n+\n+\t\t@Autowired\n+\t\tprivate FlywayProperties properties = new FlywayProperties();\n+\n+\t\t@Autowired\n+\t\tprivate ResourceLoader resourceLoader = new DefaultResourceLoader();\n+\n+\t\t@Autowired\n+\t\tprivate DataSource dataSource;\n+\n+\t\t@PostConstruct\n+\t\tpublic void checkLocationExists() {\n+\t\t\tif (this.properties.isCheckLocation()) {\n+\n+\t\t\t\tAssert.state(!this.properties.getLocations().isEmpty(),\n+\t\t\t\t\t\t"Migration script locations not configured");\n+\t\t\t\tboolean exists = false;\n+\t\t\t\tfor (String location : this.properties.getLocations()) {\n+\t\t\t\t\tResource resource = this.resourceLoader.getResource(location);\n+\t\t\t\t\texists = !exists && resource.exists();\n+\t\t\t\t}\n+\t\t\t\tAssert.state(exists, "Cannot find migrations location in: "\n+\t\t\t\t\t\t+ this.properties.getLocations()\n+\t\t\t\t\t\t+ " (please add migrations or check your Flyway configuration)");\n+\t\t\t}\n+\t\t}\n+\n+\t\t@Bean\n+\t\tpublic Flyway flyway(DataSource dataSource) {\n+\t\t\tFlyway flyway = new Flyway();\n+\t\t\tflyway.setLocations(this.properties.getLocations().toArray(new String[0]));\n+\t\t\tflyway.setSchemas(this.properties.getSchemas().toArray(new String[0]));\n+\t\t\tflyway.setInitVersion(this.properties.getInitVersion());\n+\t\t\tflyway.setSqlMigrationPrefix(this.properties.getPrefix());\n+\t\t\tflyway.setSqlMigrationSuffix(this.properties.getSuffix());\n+\t\t\tflyway.setDataSource(dataSource);\n+\t\t\tflyway.migrate();\n+\t\t\treturn flyway;\n+\t\t}\n+\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.flyway;\n\nimport javax.annotation.PostConstruct;\nimport javax.sql.DataSource;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.util.Assert;\n\nimport com.googlecode.flyway.core.Flyway;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for Flyway database migrations.\n * \n * @author Dave Syer\n */\n@Configuration\n@ConditionalOnClass(Flyway.class)\n@AutoConfigureAfter(DataSourceAutoConfiguration.class)\npublic class FlywayAutoConfiguration {\n\n\t@Configuration\n\t@ConditionalOnMissingBean(Flyway.class)\n\t@EnableConfigurationProperties(FlywayProperties.class)\n\tpublic static class LiquibaseConfiguration {\n\n\t\t@Autowired\n\t\tprivate FlywayProperties properties = new FlywayProperties();\n\n\t\t@Autowired\n\t\tprivate ResourceLoader resourceLoader = new DefaultResourceLoader();\n\n\t\t@Autowired\n\t\tprivate DataSource dataSource;\n\n\t\t@PostConstruct\n\t\tpublic void checkLocationExists() {\n\t\t\tif (this.properties.isCheckLocation()) {\n\n\t\t\t\tAssert.state(!this.properties.getLocations().isEmpty(),\n\t\t\t\t\t\t"Migration script locations not configured");\n\t\t\t\tboolean exists = false;\n\t\t\t\tfor (String location : this.properties.getLocations()) {\n\t\t\t\t\tResource resource = this.resourceLoader.getResource(location);\n\t\t\t\t\texists = !exists && resource.exists();\n\t\t\t\t}\n\t\t\t\tAssert.state(exists, "Cannot find migrations location in: "\n\t\t\t\t\t\t+ this.properties.getLocations()\n\t\t\t\t\t\t+ " (please add migrations or check your Flyway configuration)");\n\t\t\t}\n\t\t}\n\n\t\t@Bean\n\t\tpublic Flyway flyway(DataSource dataSource) {\n\t\t\tFlyway flyway = new Flyway();\n\t\t\tflyway.setLocations(this.properties.getLocations().toArray(new String[0]));\n\t\t\tflyway.setSchemas(this.properties.getSchemas().toArray(new String[0]));\n\t\t\tflyway.setInitVersion(this.properties.getInitVersion());\n\t\t\tflyway.setSqlMigrationPrefix(this.properties.getPrefix());\n\t\t\tflyway.setSqlMigrationSuffix(this.properties.getSuffix());\n\t\t\tflyway.setDataSource(dataSource);\n\t\t\tflyway.migrate();\n\t\t\treturn flyway;\n\t\t}\n\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
