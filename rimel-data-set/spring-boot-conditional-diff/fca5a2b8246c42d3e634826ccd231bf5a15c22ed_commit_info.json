{'_old_path': None, '_new_path': PosixPath('spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/hazelcast/HazelcastHealthIndicatorAutoConfiguration.java'), 'change_type': <ModificationType.ADD: 1>, 'diff': '@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2012-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the "License");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an "AS IS" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.autoconfigure.hazelcast;\n+\n+import java.util.Map;\n+\n+import com.hazelcast.core.HazelcastInstance;\n+\n+import org.springframework.boot.actuate.autoconfigure.health.CompositeHealthIndicatorConfiguration;\n+import org.springframework.boot.actuate.autoconfigure.health.ConditionalOnEnabledHealthIndicator;\n+import org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration;\n+import org.springframework.boot.actuate.hazelcast.HazelcastHealthIndicator;\n+import org.springframework.boot.actuate.health.HealthIndicator;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for\n+ * {@link HazelcastHealthIndicator}.\n+ *\n+ * @author Dmytro Nosan\n+ * @since 2.2.0\n+ */\n+@Configuration(proxyBeanMethods = false)\n+@ConditionalOnClass(HazelcastInstance.class)\n+@ConditionalOnBean(HazelcastInstance.class)\n+@ConditionalOnEnabledHealthIndicator("hazelcast")\n+@AutoConfigureBefore(HealthIndicatorAutoConfiguration.class)\n+@AutoConfigureAfter(HazelcastAutoConfiguration.class)\n+public class HazelcastHealthIndicatorAutoConfiguration\n+\t\textends CompositeHealthIndicatorConfiguration<HazelcastHealthIndicator, HazelcastInstance> {\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean(name = "hazelcastHealthIndicator")\n+\tpublic HealthIndicator hazelcastHealthIndicator(Map<String, HazelcastInstance> hazelcastInstances) {\n+\t\treturn createHealthIndicator(hazelcastInstances);\n+\t}\n+\n+}\n', 'source_code': '/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.hazelcast;\n\nimport java.util.Map;\n\nimport com.hazelcast.core.HazelcastInstance;\n\nimport org.springframework.boot.actuate.autoconfigure.health.CompositeHealthIndicatorConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.health.ConditionalOnEnabledHealthIndicator;\nimport org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration;\nimport org.springframework.boot.actuate.hazelcast.HazelcastHealthIndicator;\nimport org.springframework.boot.actuate.health.HealthIndicator;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * {@link EnableAutoConfiguration Auto-configuration} for\n * {@link HazelcastHealthIndicator}.\n *\n * @author Dmytro Nosan\n * @since 2.2.0\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass(HazelcastInstance.class)\n@ConditionalOnBean(HazelcastInstance.class)\n@ConditionalOnEnabledHealthIndicator("hazelcast")\n@AutoConfigureBefore(HealthIndicatorAutoConfiguration.class)\n@AutoConfigureAfter(HazelcastAutoConfiguration.class)\npublic class HazelcastHealthIndicatorAutoConfiguration\n\t\textends CompositeHealthIndicatorConfiguration<HazelcastHealthIndicator, HazelcastInstance> {\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = "hazelcastHealthIndicator")\n\tpublic HealthIndicator hazelcastHealthIndicator(Map<String, HazelcastInstance> hazelcastInstances) {\n\t\treturn createHealthIndicator(hazelcastInstances);\n\t}\n\n}\n', 'source_code_before': None, '_nloc': None, '_complexity': None, '_token_count': None, '_function_list': []}
